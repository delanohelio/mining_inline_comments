{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDYyMzcx", "number": 8834, "title": "KAFKA-10134: Enable heartbeat during PrepareRebalance and Depend On State For Poll Timeout", "bodyText": "Split the consumer coordinator's REBALANCING state into PREPARING_REBALANCE  and COMPLETING_REBALANCE. The first is when the join group request is sent, and the second is after the join group response is received. During the first state we should still not send hb since it shares the same socket with the join group request and the group coordinator has disabled timeout, however when we transit to the second state we should start sending hb in case leader's assign takes long time. This is also for fixing KAFKA-10122.\n\n\nWhen deciding coordinator#timeToNextPoll, do not count in timeToNextHeartbeat if the state is in UNJOINED or PREPARING_REBALANCE since we would disable hb and hence its timer would not be updated.\n\n\nOn the broker side, allow hb received during PREPARING_REBALANCE, return NONE error code instead of REBALANCE_IN_PROGRESS. However on client side, we still need to ignore REBALANCE_IN_PROGRESS if state is COMPLETING_REBALANCE in case it is talking to an old versioned broker.\n\n\nPiggy-backing a log4j improvement on the broker coordinator for triggering rebalance reason, as I found it a bit blurred during the investigation. Also subsumed #9038 with log4j improvements.\n\n\nThe tricky part for allowing hb during COMPLETING_REBALANCE is in two parts: 1) before the sync-group response is received, a hb response may have reset the generation; also after the sync-group response but before the callback is triggered, a hb response can still reset the generation, we need to handle both cases by checking the generation / state. 2) with the hb thread enabled, the sync-group request may be sent by the hb thread even if the caller thread did not call poll yet.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-09T00:17:11Z", "url": "https://github.com/apache/kafka/pull/8834", "merged": true, "mergeCommit": {"oid": "7e7bb184d2abe34280a7f0eb0f0d9fc0e32389f2"}, "closed": true, "closedAt": "2020-09-10T21:34:39Z", "author": {"login": "guozhangwang"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpY8WYgH2gAyNDMxNDYyMzcxOjE4ZGNlNDI5NmNhYTk5OGQ4NDg5OTI5NDJmZTYwMmE2ZTcxOTJkOGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHnMwQAFqTQ4NjMwMzAzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18dce4296caa998d848992942fe602a6e7192d8a", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/18dce4296caa998d848992942fe602a6e7192d8a", "committedDate": "2020-06-08T23:20:37Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8758bf7ce2cc722e736fb3b6a87008996404e0f", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/f8758bf7ce2cc722e736fb3b6a87008996404e0f", "committedDate": "2020-06-09T00:14:34Z", "message": "add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/0f43c395ed5dd1e6676966e3f375e741cf840f82", "committedDate": "2020-06-09T00:15:55Z", "message": "minor fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzA2Mzk5", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-426706399", "createdAt": "2020-06-09T00:17:54Z", "commit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNzo1NFrOGg0lEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxODowNFrOGg0lMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw==", "bodyText": "This is a piggy-backed cleanup: we call resetGenerationXXX in the join/sync-group handler func and hence should not re-call it again here.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437069073", "createdAt": "2020-06-09T00:17:54Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTEwNQ==", "bodyText": "Minor log4j improvement.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437069105", "createdAt": "2020-06-09T00:18:04Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,9 +651,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/476b89bed2d50393be3b349606dcbb772ae68470", "committedDate": "2020-06-09T00:19:39Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzM3NDgz", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-426737483", "createdAt": "2020-06-09T01:59:28Z", "commit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMTo1OToyOVrOGg2KNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzoxMjo0OFrOGg3ULw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NDk2Ng==", "bodyText": "There might be slight performance gain if we just say \"Attempt to join group and receive member id required error.\" instead of passing in the error.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437094966", "createdAt": "2020-06-09T01:59:29Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,9 +651,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzk1OA==", "bodyText": "Just to confirm, this file only has logging changes right?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437107958", "createdAt": "2020-06-09T02:49:03Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -287,7 +287,7 @@ class GroupCoordinator(val brokerId: Int,\n \n           group.currentState match {\n             case PreparingRebalance =>\n-              updateMemberAndRebalance(group, member, protocols, responseCallback)\n+              updateMemberAndRebalance(group, member, protocols, s\"Member ${member.memberId} joining group during ${group.currentState}\", responseCallback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ==", "bodyText": "We should still handle fatal exception IMHO, such as FencedInstanceIdException", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110079", "createdAt": "2020-06-09T02:57:20Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1069,6 +1069,13 @@ private HeartbeatResponseHandler(final Generation generation) {\n         public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> future) {\n             sensors.heartbeatSensor.record(response.requestLatencyMs());\n             Errors error = heartbeatResponse.error();\n+\n+            if (state != MemberState.STABLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDUyNw==", "bodyText": "remove thread", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110527", "createdAt": "2020-06-09T02:59:25Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -604,6 +605,25 @@ public void testSyncGroupIllegalGenerationResponseWithOldGeneration() throws Int\n         assertEquals(newGen, coordinator.generation());\n     }\n \n+    @Test\n+    public void testHeartbeatSentWhenRebalancing() throws Exception {\n+        setupCoordinator();\n+        joinGroup();\n+\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n+\n+        coordinator.setNewState(AbstractCoordinator.MemberState.REBALANCING);\n+\n+        // the heartbeat thread should be sent out during a rebalance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDgyOQ==", "bodyText": "Why do we need to respond?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437110829", "createdAt": "2020-06-09T03:00:28Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -604,6 +605,25 @@ public void testSyncGroupIllegalGenerationResponseWithOldGeneration() throws Int\n         assertEquals(newGen, coordinator.generation());\n     }\n \n+    @Test\n+    public void testHeartbeatSentWhenRebalancing() throws Exception {\n+        setupCoordinator();\n+        joinGroup();\n+\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n+\n+        coordinator.setNewState(AbstractCoordinator.MemberState.REBALANCING);\n+\n+        // the heartbeat thread should be sent out during a rebalance\n+        mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n+        TestUtils.waitForCondition(() -> !mockClient.requests().isEmpty(), 2000,\n+                \"The heartbeat request was not sent\");\n+        assertTrue(coordinator.heartbeat().hasInflight());\n+\n+        mockClient.respond(heartbeatResponse(Errors.REBALANCE_IN_PROGRESS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMTM5NA==", "bodyText": "Do we still need this private function then?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437111394", "createdAt": "2020-06-09T03:02:27Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMzkwMw==", "bodyText": "Comment here as no better place: on L485 we have this logic:\nif (joinFuture == null) {\n            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n            // sending heartbeats if that callback takes some time.\n            disableHeartbeatThread();\n\nAs we are ensuring the heartbeat thread working during rebalance, will this case be a bit dangerous for heartbeat disabling? Maybe we could also do a check of member status here to decide whether to disable.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r437113903", "createdAt": "2020-06-09T03:12:48Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODgzODAw", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-429883800", "createdAt": "2020-06-12T16:34:10Z", "commit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozNDoxMFrOGjKfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozNDoxMFrOGjKfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTMwNQ==", "bodyText": "I can see it either way. It seems like this PR is about sending the heartbeats optimistically during rebalance, so there doesn't seem to really be any harm in ignoring the response for now. If we ignore the errors, then everything should still work, as the JoinGroup or SyncGroup response will tell us that we've been fenced next time we poll.\nIt seems like the advantage of handling the error here is that we can potentially rejoin just a tiny bit sooner by not having to wait for the JoinGroup or SyncGroup response. But it's not clear to me that it's actually ok not to handle those responses, so then we would also need to make sure the response handling logic can detect that the response has already been invalidated if we've sent a new JoinGroup request in the mean time.\nThis definitely has the potential to decrease the MTTR, but I'm wondering if we should take on the complexity right now, or consider it as a follow-on optimization.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r439525305", "createdAt": "2020-06-12T16:34:10Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1069,6 +1069,13 @@ private HeartbeatResponseHandler(final Generation generation) {\n         public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> future) {\n             sensors.heartbeatSensor.record(response.requestLatencyMs());\n             Errors error = heartbeatResponse.error();\n+\n+            if (state != MemberState.STABLE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzExMDA3OQ=="}, "originalCommit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzY2NzAx", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-443366701", "createdAt": "2020-07-06T19:56:05Z", "commit": {"oid": "476b89bed2d50393be3b349606dcbb772ae68470"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5afb6e89ba3ffedfec271ff425b92dcd44139fea", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/5afb6e89ba3ffedfec271ff425b92dcd44139fea", "committedDate": "2020-08-25T00:47:20Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31e5f97ac333f6433b1feeeead0faf4a863cade", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/e31e5f97ac333f6433b1feeeead0faf4a863cade", "committedDate": "2020-08-25T22:47:50Z", "message": "add additional states"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c29b026e0c7df083593b632a01bc71eafc3b70e", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/8c29b026e0c7df083593b632a01bc71eafc3b70e", "committedDate": "2020-08-26T00:18:36Z", "message": "update group coordinator test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/46995655a08d0e7f7423ebbdb31ca47e662b5a48", "committedDate": "2020-08-26T01:25:48Z", "message": "more updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MDg4OTQz", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-475088943", "createdAt": "2020-08-26T01:26:41Z", "commit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMToyNjo0MVrOHG2vpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMTozNDo0M1rOHG3EYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MDQzNg==", "bodyText": "This is the major fix 2) in description.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476950436", "createdAt": "2020-08-26T01:26:41Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -326,8 +331,9 @@ protected synchronized void pollHeartbeat(long now) {\n     }\n \n     protected synchronized long timeToNextHeartbeat(long now) {\n-        // if we have not joined the group, we don't need to send heartbeats\n-        if (state == MemberState.UNJOINED)\n+        // if we have not joined the group or we are preparing rebalance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MDk5NA==", "bodyText": "We do not need to explicitly disable heartbeat thread since when the state is transited to PREPARING_REBALANCE, the thread would disable itself in the next iteration.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476950994", "createdAt": "2020-08-26T01:27:38Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -483,12 +492,7 @@ private synchronized void resetStateAndRejoin() {\n         // rebalance in the call to poll below. This ensures that we do not mistakenly attempt\n         // to rejoin before the pending rebalance has completed.\n         if (joinFuture == null) {\n-            // fence off the heartbeat thread explicitly so that it cannot interfere with the join group.\n-            // Note that this must come after the call to onJoinPrepare since we must be able to continue\n-            // sending heartbeats if that callback takes some time.\n-            disableHeartbeatThread();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MTI2Mg==", "bodyText": "Moved this into sync-group handler for readability.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476951262", "createdAt": "2020-08-26T01:28:00Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -497,40 +501,18 @@ private synchronized void resetStateAndRejoin() {\n             joinFuture.addListener(new RequestFutureListener<ByteBuffer>() {\n                 @Override\n                 public void onSuccess(ByteBuffer value) {\n-                    // handle join completion in the callback so that the callback will be invoked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NDc0NA==", "bodyText": "We do not need this check any more since when we are only resetting generation if we see illegal generation or unknown member id, and in either case we should no longer heartbeat", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476954744", "createdAt": "2020-08-26T01:33:11Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -917,17 +938,14 @@ private synchronized void resetGeneration() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        // only reset the state to un-joined when it is not already in rebalancing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTA2OA==", "bodyText": "This is the major fix 1).", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476955068", "createdAt": "2020-08-26T01:33:38Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1311,9 +1324,10 @@ public void run() {\n                             continue;\n                         }\n \n-                        if (state != MemberState.STABLE) {\n-                            // the group is not stable (perhaps because we left the group or because the coordinator\n-                            // kicked us out), so disable heartbeats and wait for the main thread to rejoin.\n+                        // we do not need to heartbeat we are not part of a group yet;\n+                        // also if we already have fatal error, the client will be\n+                        // crashed soon, hence we do not need to continue heartbeating either\n+                        if (state.hasNotJoinedGroup() || hasFailed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTM0NA==", "bodyText": "This is now a redundant test.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476955344", "createdAt": "2020-08-26T01:34:08Z", "author": {"login": "guozhangwang"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -1098,44 +1136,6 @@ public void testWakeupAfterJoinGroupReceivedExternalCompletion() throws Exceptio\n         awaitFirstHeartbeat(heartbeatReceived);\n     }\n \n-    @Test\n-    public void testWakeupAfterSyncGroupSent() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTc0NA==", "bodyText": "This is the only logical change as 3) in the description. All others are logging changes.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r476955744", "createdAt": "2020-08-26T01:34:43Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -639,7 +641,11 @@ class GroupCoordinator(val brokerId: Int,\n               responseCallback(Errors.UNKNOWN_MEMBER_ID)\n \n             case CompletingRebalance =>\n-                responseCallback(Errors.REBALANCE_IN_PROGRESS)\n+              // consumers may start sending heartbeat after join-group response, in which case\n+              // we should treat them as normal hb request and reset the timer\n+              val member = group.get(memberId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/368c9f8f15f47bd3dcfff161e965d7f4e2b7421f", "committedDate": "2020-08-26T17:41:13Z", "message": "minor improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MDE1NTAx", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-476015501", "createdAt": "2020-08-26T22:50:32Z", "commit": {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjo1MDozMlrOHHgnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzoyMDo1MFrOHHiQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYzNjQ4NQ==", "bodyText": "Honestly, if we have to keep handling the REBALANCE_IN_PROGRESS error on the client side anyway, then maybe it's best to keep things simple and just continue to send this in the response. Otherwise it just seems like asking for trouble if we have to consider different possible responses depending on which version of the broker the client is talking to.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477636485", "createdAt": "2020-08-26T22:50:32Z", "author": {"login": "ableegoldman"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -639,7 +641,11 @@ class GroupCoordinator(val brokerId: Int,\n               responseCallback(Errors.UNKNOWN_MEMBER_ID)\n \n             case CompletingRebalance =>\n-                responseCallback(Errors.REBALANCE_IN_PROGRESS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NzY2NA==", "bodyText": "Wait, so before this the coordinator wouldn't complete the current heartbeat? Doesn't that mean that heartbeating is pointless until the rebalance completes? Obviously that doesn't line up with my observations since members were clearly getting kicked from the group before the rebalance had completed, so I must be missing something here", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477647664", "createdAt": "2020-08-26T23:05:35Z", "author": {"login": "ableegoldman"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -639,7 +641,11 @@ class GroupCoordinator(val brokerId: Int,\n               responseCallback(Errors.UNKNOWN_MEMBER_ID)\n \n             case CompletingRebalance =>\n-                responseCallback(Errors.REBALANCE_IN_PROGRESS)\n+              // consumers may start sending heartbeat after join-group response, in which case\n+              // we should treat them as normal hb request and reset the timer\n+              val member = group.get(memberId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1NTc0NA=="}, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzI1Nw==", "bodyText": "Can we still specify that we failed during the JoinGroup? eg Rebalance failed on JoinGroup with {} or something", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477653257", "createdAt": "2020-08-26T23:11:30Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -446,14 +453,15 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     resetJoinGroupFuture();\n                     needsJoinPrepare = true;\n                 } else {\n-                    log.info(\"Generation data was cleared by heartbeat thread. Initiating rejoin.\");\n+                    log.info(\"Generation data was cleared by heartbeat thread to {} and state is now {} before \" +\n+                         \"the rebalance callback is triggered, marking this rebalance as failed and retry\",\n+                         generation, state);\n                     resetStateAndRejoin();\n                     resetJoinGroupFuture();\n-                    return false;\n                 }\n             } else {\n                 final RuntimeException exception = future.exception();\n-                log.info(\"Join group failed with {}\", exception.toString());\n+                log.info(\"Rebalance failed with {}\", exception.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1Nzg4Mg==", "bodyText": "I assume you mean the JoinGroup response handler \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477657882", "createdAt": "2020-08-26T23:15:46Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -497,40 +501,18 @@ private synchronized void resetStateAndRejoin() {\n             joinFuture.addListener(new RequestFutureListener<ByteBuffer>() {\n                 @Override\n                 public void onSuccess(ByteBuffer value) {\n-                    // handle join completion in the callback so that the callback will be invoked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk1MTI2Mg=="}, "originalCommit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY2MzMyOA==", "bodyText": "Did you mean to say recordRebalanceFailure or is this comment just out of date after the latest changes?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r477663328", "createdAt": "2020-08-26T23:20:50Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw=="}, "originalCommit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf22491c15eaf08a5fb49bd111fb47e1a9a891a1", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/bf22491c15eaf08a5fb49bd111fb47e1a9a891a1", "committedDate": "2020-08-31T22:04:57Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTk1OTIw", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-478995920", "createdAt": "2020-08-31T22:16:42Z", "commit": {"oid": "46995655a08d0e7f7423ebbdb31ca47e662b5a48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoxNjo0MlrOHKLFuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoxNjo0MlrOHKLFuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyOTQ5Ng==", "bodyText": "Previously this function has two lines: update the state and record sensors. Now that the first is called in the caller, this function becomes a one-liner and hence not worthy anymore so I in-lined it.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r480429496", "createdAt": "2020-08-31T22:16:42Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -528,7 +528,6 @@ public void onFailure(RuntimeException e) {\n                 }\n \n                 private void recordRebalanceFailure() {\n-                    state = MemberState.UNJOINED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTA3Mw=="}, "originalCommit": {"oid": "0f43c395ed5dd1e6676966e3f375e741cf840f82"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/5ad51d35b0c6e801d2378416b7352b9e538d2368", "committedDate": "2020-08-31T23:37:36Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDM4Mjgy", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-480038282", "createdAt": "2020-09-01T19:07:13Z", "commit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTowNzoxM1rOHLEfNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxODozNFrOHLInbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTkxMQ==", "bodyText": "Since the state can also be set from the heartbeat thread, do you think it would be a good idea to also get a \"stateSnapshot\" inside the synchronized block at L439 so that the state and generation are consistent wrt each other?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481369911", "createdAt": "2020-09-01T19:07:13Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -433,7 +440,7 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     generationSnapshot = this.generation;\n                 }\n \n-                if (generationSnapshot != Generation.NO_GENERATION) {\n+                if (generationSnapshot != Generation.NO_GENERATION && state == MemberState.STABLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MTY1OQ==", "bodyText": "Different question: can we report the exception as the \"cause\", rather than just getting the toString of it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.info(\"Rebalance failed with {}\", exception.toString());\n          \n          \n            \n                            log.info(\"Rebalance failed.\", exception);", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481371659", "createdAt": "2020-09-01T19:10:28Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -446,14 +453,15 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     resetJoinGroupFuture();\n                     needsJoinPrepare = true;\n                 } else {\n-                    log.info(\"Generation data was cleared by heartbeat thread. Initiating rejoin.\");\n+                    log.info(\"Generation data was cleared by heartbeat thread to {} and state is now {} before \" +\n+                         \"the rebalance callback is triggered, marking this rebalance as failed and retry\",\n+                         generation, state);\n                     resetStateAndRejoin();\n                     resetJoinGroupFuture();\n-                    return false;\n                 }\n             } else {\n                 final RuntimeException exception = future.exception();\n-                log.info(\"Join group failed with {}\", exception.toString());\n+                log.info(\"Rebalance failed with {}\", exception.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY1MzI1Nw=="}, "originalCommit": {"oid": "368c9f8f15f47bd3dcfff161e965d7f4e2b7421f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3MzMwNQ==", "bodyText": "Should we also reset the generation here? With the new condition above, we may now enter this block if generation is not NO_GENERATION. I'm not sure if we want to have the generation set to some value but state set to UNJOINED and rejoinNeeded := true.", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481373305", "createdAt": "2020-09-01T19:13:31Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -446,14 +453,15 @@ boolean joinGroupIfNeeded(final Timer timer) {\n                     resetJoinGroupFuture();\n                     needsJoinPrepare = true;\n                 } else {\n-                    log.info(\"Generation data was cleared by heartbeat thread. Initiating rejoin.\");\n+                    log.info(\"Generation data was cleared by heartbeat thread to {} and state is now {} before \" +\n+                         \"the rebalance callback is triggered, marking this rebalance as failed and retry\",\n+                         generation, state);\n                     resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3ODcwOQ==", "bodyText": "We don't need to reset the state here anymore?", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481378709", "createdAt": "2020-09-01T19:24:09Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -652,10 +644,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n             } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                 // Broker requires a concrete member id to be allowed to join the group. Update member id\n                 // and send another join group request in next cycle.\n+                String memberId = joinResponse.data().memberId();\n+                log.debug(\"Attempt to join group returned {} error. Will set the member id as {} and then rejoin\", error, memberId);\n                 synchronized (AbstractCoordinator.this) {\n-                    AbstractCoordinator.this.generation = new Generation(OffsetCommitRequest.DEFAULT_GENERATION_ID,\n-                            joinResponse.data().memberId(), null);\n-                    AbstractCoordinator.this.resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNzU1MA==", "bodyText": "Should this be inside isTraceEnabled() to avoid computing remainingMs() in the case that trace logging isn't on?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());\n          \n          \n            \n                    if (log.isTraceEnabled()) {\n          \n          \n            \n                        log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\n(also below)", "url": "https://github.com/apache/kafka/pull/8834#discussion_r481437550", "createdAt": "2020-09-01T21:18:34Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Heartbeat.java", "diffHunk": "@@ -66,12 +73,16 @@ void sentHeartbeat(long now) {\n         heartbeatInFlight = true;\n         update(now);\n         heartbeatTimer.reset(rebalanceConfig.heartbeatIntervalMs);\n+\n+        log.trace(\"Sending heartbeat request with {}ms remaining on timer\", heartbeatTimer.remainingMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad51d35b0c6e801d2378416b7352b9e538d2368"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8655177c6705b47ffcefe6017a8abe3e371fd1c0", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/8655177c6705b47ffcefe6017a8abe3e371fd1c0", "committedDate": "2020-09-09T03:51:04Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KMinor-do-not-disable-heartbeat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04db568c545882981bc65be0125af9a3575db25", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/c04db568c545882981bc65be0125af9a3575db25", "committedDate": "2020-09-09T03:55:12Z", "message": "Update clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d328bcbdc5df6ed04f973e34e3991b07c1b6ff", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/76d328bcbdc5df6ed04f973e34e3991b07c1b6ff", "committedDate": "2020-09-09T04:15:21Z", "message": "Update clients/src/main/java/org/apache/kafka/clients/consumer/internals/Heartbeat.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34a5ff8d481ed2677dcb2b9cd1944bec2e9eec1", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/d34a5ff8d481ed2677dcb2b9cd1944bec2e9eec1", "committedDate": "2020-09-09T04:15:41Z", "message": "github comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9f9958c177e2066fb1243927a0a8a336880971", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/df9f9958c177e2066fb1243927a0a8a336880971", "committedDate": "2020-09-09T04:15:50Z", "message": "Merge branch 'KMinor-do-not-disable-heartbeat' of https://github.com/guozhangwang/kafka into KMinor-do-not-disable-heartbeat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzAzMDM3", "url": "https://github.com/apache/kafka/pull/8834#pullrequestreview-486303037", "createdAt": "2020-09-10T20:54:56Z", "commit": {"oid": "df9f9958c177e2066fb1243927a0a8a336880971"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 539, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}