{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzYwNzgy", "number": 9749, "title": "Only schedule AlterIsr thread when we have an ISR change", "bodyText": "Rather than scheduling every 50ms to check for unsent updates, we should schedule the propagation thread only after we receive ISR updates", "createdAt": "2020-12-14T19:53:25Z", "url": "https://github.com/apache/kafka/pull/9749", "merged": true, "mergeCommit": {"oid": "ee08b0b32ad6af82ecdfac04134dbf52996374d8"}, "closed": true, "closedAt": "2021-01-13T18:52:38Z", "author": {"login": "mumrah"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmJNCygH2gAyNTM5NzYwNzgyOjQzMGNlNGI4YWU1YmY0NDI2M2E0YmQzMmM4MDNmMTIwMDhkY2Y3OWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdv0UytgH2gAyNTM5NzYwNzgyOjcwYjIwY2UwM2QwZDc3NTc3YmY3ODI4ZTk3MWE1OTBhOTY3ZTM2N2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "430ce4b8ae5bf44263a4bd32c803f12008dcf79e", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/430ce4b8ae5bf44263a4bd32c803f12008dcf79e", "committedDate": "2020-12-14T17:29:45Z", "message": "Only schedule AlterIsr thread when we have an ISR change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODQ1MzAz", "url": "https://github.com/apache/kafka/pull/9749#pullrequestreview-551845303", "createdAt": "2020-12-14T19:58:11Z", "commit": {"oid": "430ce4b8ae5bf44263a4bd32c803f12008dcf79e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTo1ODoxMVrOIFkqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTo1ODoxMVrOIFkqAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNDM3MQ==", "bodyText": "The 50ms delay here acts like a simplistic linger time to allow ISR updates to batch. If we schedule the thread immediately after the first call to enqueue, we'll likely only send a single partition in the AlterIsr request. With the small delay, we give partitions a chance to accumulate for sending as one batch.\nWe might consider adding a real linger time with maximum delay if we find that we're sending inefficient batches in practice.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r542714371", "createdAt": "2020-12-14T19:58:11Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -62,27 +61,38 @@ class AlterIsrManagerImpl(val controllerChannelManager: BrokerToControllerChanne\n \n   private val lastIsrPropagationMs = new AtomicLong(0)\n \n-  override def start(): Unit = {\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n-  }\n+  override def start(): Unit = { }\n \n   override def enqueue(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+      if (inflightRequest.compareAndSet(false, true)) {\n+        // optimistically set the inflight flag even though we haven't sent the request yet\n+        scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, -1, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430ce4b8ae5bf44263a4bd32c803f12008dcf79e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c4eea501445bb1c57123519625343fd03950fb", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/11c4eea501445bb1c57123519625343fd03950fb", "committedDate": "2021-01-05T21:05:49Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into minor-alter-isr-scheduling\n\nConflicts:\n\tcore/src/main/scala/kafka/server/AlterIsrManager.scala"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7463b2c5da59fa2b8c09a61a9fcef4afe603de65", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/7463b2c5da59fa2b8c09a61a9fcef4afe603de65", "committedDate": "2021-01-07T19:39:56Z", "message": "Don't delay, make sure to submit any waiting items in callback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261670e909334bf6c7888c96f2a0b3ee9097974b", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/261670e909334bf6c7888c96f2a0b3ee9097974b", "committedDate": "2021-01-08T16:23:38Z", "message": "Re-send request with delay on top-level errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NDcwNjkw", "url": "https://github.com/apache/kafka/pull/9749#pullrequestreview-564470690", "createdAt": "2021-01-08T18:03:40Z", "commit": {"oid": "261670e909334bf6c7888c96f2a0b3ee9097974b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODowMzo0MFrOIQb6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODoxMzozMVrOIQcNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwNTQ0MA==", "bodyText": "If we are only waiting 1ms, would it be simpler to call propagateIsrChanges directly? Similarly after receiving a response with no error.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r554105440", "createdAt": "2021-01-08T18:03:40Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -122,43 +121,47 @@ class DefaultAlterIsrManager(\n \n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+      if (inflightRequest.compareAndSet(false, true)) {\n+        // optimistically set the inflight flag even though we haven't sent the request yet\n+        scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 1, -1, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261670e909334bf6c7888c96f2a0b3ee9097974b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMDM0Nw==", "bodyText": "This seems to introduce a race condition. Say we have an inflight request. Is the following sequence possible?\n\nthe response returns and the io thread calls propagateIsrChanges and sees an empty unsentIsrUpdates\nrequest thread calls submit and inserts a new item in unsentIsrUpdates\nrequest thread fails compareAndSet on inflightRequest\nio thread clears inflightRequest\n\nIt seems like we might need a lock.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r554110347", "createdAt": "2021-01-08T18:13:31Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -122,43 +121,47 @@ class DefaultAlterIsrManager(\n \n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+      if (inflightRequest.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261670e909334bf6c7888c96f2a0b3ee9097974b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6345f632515c761af5871def8b86d5a45b862747", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/6345f632515c761af5871def8b86d5a45b862747", "committedDate": "2021-01-08T20:44:19Z", "message": "Use a read/write lock to guard the inflight request flag and the collection of unsent items"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NjI4NDM2", "url": "https://github.com/apache/kafka/pull/9749#pullrequestreview-564628436", "createdAt": "2021-01-08T22:35:06Z", "commit": {"oid": "6345f632515c761af5871def8b86d5a45b862747"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjozNTowNlrOIQjgMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjozNTowNlrOIQjgMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIyOTgwOA==", "bodyText": "Do you think contention for this lock will be an issue? It seems unlikely to me. That makes me think we might be able to simplify the concurrency if we replace the read-write lock with a simple ReentrantLock. Then we could design this around two methods\ndef maybePropagateIsrChanges(): Unit = lock synchronized {\n if (!inflightRequest) {\n   ... \n }\n}\n\ndef clearInFlightRequest(): Unit = lock synchronized {\n  inFlightRequest = false\n}\nWhat do you think?", "url": "https://github.com/apache/kafka/pull/9749#discussion_r554229808", "createdAt": "2021-01-08T22:35:06Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -116,63 +116,78 @@ class DefaultAlterIsrManager(\n   private val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n \n   // Used to allow only one in-flight request at a time\n-  private val inflightRequest: AtomicBoolean = new AtomicBoolean(false)\n+  @volatile\n+  private var inflightRequest: Boolean = false\n \n-  private val lastIsrPropagationMs = new AtomicLong(0)\n+  // Protects the updates of the inflight flag and prevents new pending items from being submitted while we are\n+  // preparing a request\n+  private val inflightLock: ReentrantReadWriteLock = new ReentrantReadWriteLock()\n \n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    val (didSubmit, needsPropagate) = inReadLock(inflightLock) {\n+      if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+        (true, !inflightRequest)\n+      } else {\n+        (false, false)\n+      }\n+    }\n+    if (needsPropagate) {\n+      propagateIsrChanges(true)\n+    }\n+    didSubmit\n   }\n \n   override def clearPending(topicPartition: TopicPartition): Unit = {\n     unsentIsrUpdates.remove(topicPartition)\n   }\n \n-  private def propagateIsrChanges(): Unit = {\n-    if (!unsentIsrUpdates.isEmpty && inflightRequest.compareAndSet(false, true)) {\n-      // Copy current unsent ISRs but don't remove from the map\n-      val inflightAlterIsrItems = new ListBuffer[AlterIsrItem]()\n-      unsentIsrUpdates.values().forEach(item => inflightAlterIsrItems.append(item))\n-\n-      val now = time.milliseconds()\n-      lastIsrPropagationMs.set(now)\n-      sendRequest(inflightAlterIsrItems.toSeq)\n+  private def propagateIsrChanges(checkInflight: Boolean): Unit = inWriteLock(inflightLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6345f632515c761af5871def8b86d5a45b862747"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f1d3d9af0b42ac0fe76ae516493f53a164986b3", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/9f1d3d9af0b42ac0fe76ae516493f53a164986b3", "committedDate": "2021-01-11T17:25:59Z", "message": "Simplify locking and fixup tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1NjgxODMz", "url": "https://github.com/apache/kafka/pull/9749#pullrequestreview-565681833", "createdAt": "2021-01-11T19:44:09Z", "commit": {"oid": "9f1d3d9af0b42ac0fe76ae516493f53a164986b3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0NDowOVrOIRkg5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo1ODowOVrOIRk9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NDk0OA==", "bodyText": "nit: shall we pull this out of the match since it is done regardless? It would also make the code a little more resilient since we got rid of the try/catch to put it before handleAlterIsrResponse.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r555294948", "createdAt": "2021-01-11T19:44:09Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -116,63 +116,75 @@ class DefaultAlterIsrManager(\n   private val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n \n   // Used to allow only one in-flight request at a time\n-  private val inflightRequest: AtomicBoolean = new AtomicBoolean(false)\n+  @volatile\n+  private var inflightRequest: Boolean = false\n \n-  private val lastIsrPropagationMs = new AtomicLong(0)\n+  // Protect updates of the inflight flag and prevent additional pending items from being submitted while we are\n+  // preparing a request\n+  private val inflightLock: ReentrantLock = new ReentrantLock()\n \n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    inLock(inflightLock) {\n+      if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+        maybePropagateIsrChanges()\n+        true\n+      } else {\n+        false\n+      }\n+    }\n   }\n \n   override def clearPending(topicPartition: TopicPartition): Unit = {\n     unsentIsrUpdates.remove(topicPartition)\n   }\n \n-  private def propagateIsrChanges(): Unit = {\n-    if (!unsentIsrUpdates.isEmpty && inflightRequest.compareAndSet(false, true)) {\n-      // Copy current unsent ISRs but don't remove from the map\n+  private[server] def maybePropagateIsrChanges(): Unit = inLock(inflightLock) {\n+    // Send all pending items if there is not already a request in-flight.\n+    if (!inflightRequest && !unsentIsrUpdates.isEmpty) {\n+      // Copy current unsent ISRs but don't remove from the map, they get cleared in the response handler\n       val inflightAlterIsrItems = new ListBuffer[AlterIsrItem]()\n       unsentIsrUpdates.values().forEach(item => inflightAlterIsrItems.append(item))\n-\n-      val now = time.milliseconds()\n-      lastIsrPropagationMs.set(now)\n       sendRequest(inflightAlterIsrItems.toSeq)\n+      inflightRequest = true\n     }\n   }\n \n-  private def sendRequest(inflightAlterIsrItems: Seq[AlterIsrItem]): Unit = {\n-    val message = buildRequest(inflightAlterIsrItems)\n-\n-    def clearInflightRequests(): Unit = {\n-      // Be sure to clear the in-flight flag to allow future AlterIsr requests\n-      if (!inflightRequest.compareAndSet(true, false)) {\n-        throw new IllegalStateException(\"AlterIsr response callback called when no requests were in flight\")\n-      }\n+  private[server] def clearInFlightRequest(): Unit = inLock(inflightLock) {\n+    if (!inflightRequest) {\n+      warn(\"Attempting to clear AlterIsr in-flight flag when no apparent request is in-flight\")\n     }\n+    inflightRequest = false\n+  }\n \n+  private def sendRequest(inflightAlterIsrItems: Seq[AlterIsrItem]): Unit = {\n+    val message = buildRequest(inflightAlterIsrItems)\n     debug(s\"Sending AlterIsr to controller $message\")\n \n     // We will not timeout AlterISR request, instead letting it retry indefinitely\n     // until a response is received, or a new LeaderAndIsr overwrites the existing isrState\n-    // which causes the inflight requests to be ignored.\n+    // which causes the response for those partitions to be ignored.\n     controllerChannelManager.sendRequest(new AlterIsrRequest.Builder(message),\n       new ControllerRequestCompletionHandler {\n         override def onComplete(response: ClientResponse): Unit = {\n-          try {\n-            debug(s\"Received AlterIsr response $response\")\n-            val body = response.responseBody().asInstanceOf[AlterIsrResponse]\n-            handleAlterIsrResponse(body, message.brokerEpoch, inflightAlterIsrItems)\n-          } finally {\n-            clearInflightRequests()\n+          debug(s\"Received AlterIsr response $response\")\n+          val body = response.responseBody().asInstanceOf[AlterIsrResponse]\n+          handleAlterIsrResponse(body, message.brokerEpoch, inflightAlterIsrItems) match {\n+            case Errors.NONE =>\n+              // In the normal case, check for pending updates to send immediately\n+              clearInFlightRequest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1d3d9af0b42ac0fe76ae516493f53a164986b3"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NTk4NA==", "bodyText": "Do we still need this? It looks like all accesses are protected with the lock.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r555295984", "createdAt": "2021-01-11T19:46:07Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -116,63 +116,75 @@ class DefaultAlterIsrManager(\n   private val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n \n   // Used to allow only one in-flight request at a time\n-  private val inflightRequest: AtomicBoolean = new AtomicBoolean(false)\n+  @volatile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1d3d9af0b42ac0fe76ae516493f53a164986b3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMwMjI5NQ==", "bodyText": "Just doublechecking our locking order. When we call submit from Partition, we first have the leader and ISR write lock and then we acquire the inflight lock added here. Now when we call handleAlterIsrResponse, we may need to reacquire the leader and ISR write lock, but that is ok, because do not need to hold the inflight lock when we do so. I think it might be worth adding some comments on the locking order somewhere in this class since the use of the leader and ISR lock is kind of hidden.", "url": "https://github.com/apache/kafka/pull/9749#discussion_r555302295", "createdAt": "2021-01-11T19:58:09Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -116,63 +116,75 @@ class DefaultAlterIsrManager(\n   private val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n \n   // Used to allow only one in-flight request at a time\n-  private val inflightRequest: AtomicBoolean = new AtomicBoolean(false)\n+  @volatile\n+  private var inflightRequest: Boolean = false\n \n-  private val lastIsrPropagationMs = new AtomicLong(0)\n+  // Protect updates of the inflight flag and prevent additional pending items from being submitted while we are\n+  // preparing a request\n+  private val inflightLock: ReentrantLock = new ReentrantLock()\n \n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    inLock(inflightLock) {\n+      if (unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null) {\n+        maybePropagateIsrChanges()\n+        true\n+      } else {\n+        false\n+      }\n+    }\n   }\n \n   override def clearPending(topicPartition: TopicPartition): Unit = {\n     unsentIsrUpdates.remove(topicPartition)\n   }\n \n-  private def propagateIsrChanges(): Unit = {\n-    if (!unsentIsrUpdates.isEmpty && inflightRequest.compareAndSet(false, true)) {\n-      // Copy current unsent ISRs but don't remove from the map\n+  private[server] def maybePropagateIsrChanges(): Unit = inLock(inflightLock) {\n+    // Send all pending items if there is not already a request in-flight.\n+    if (!inflightRequest && !unsentIsrUpdates.isEmpty) {\n+      // Copy current unsent ISRs but don't remove from the map, they get cleared in the response handler\n       val inflightAlterIsrItems = new ListBuffer[AlterIsrItem]()\n       unsentIsrUpdates.values().forEach(item => inflightAlterIsrItems.append(item))\n-\n-      val now = time.milliseconds()\n-      lastIsrPropagationMs.set(now)\n       sendRequest(inflightAlterIsrItems.toSeq)\n+      inflightRequest = true\n     }\n   }\n \n-  private def sendRequest(inflightAlterIsrItems: Seq[AlterIsrItem]): Unit = {\n-    val message = buildRequest(inflightAlterIsrItems)\n-\n-    def clearInflightRequests(): Unit = {\n-      // Be sure to clear the in-flight flag to allow future AlterIsr requests\n-      if (!inflightRequest.compareAndSet(true, false)) {\n-        throw new IllegalStateException(\"AlterIsr response callback called when no requests were in flight\")\n-      }\n+  private[server] def clearInFlightRequest(): Unit = inLock(inflightLock) {\n+    if (!inflightRequest) {\n+      warn(\"Attempting to clear AlterIsr in-flight flag when no apparent request is in-flight\")\n     }\n+    inflightRequest = false\n+  }\n \n+  private def sendRequest(inflightAlterIsrItems: Seq[AlterIsrItem]): Unit = {\n+    val message = buildRequest(inflightAlterIsrItems)\n     debug(s\"Sending AlterIsr to controller $message\")\n \n     // We will not timeout AlterISR request, instead letting it retry indefinitely\n     // until a response is received, or a new LeaderAndIsr overwrites the existing isrState\n-    // which causes the inflight requests to be ignored.\n+    // which causes the response for those partitions to be ignored.\n     controllerChannelManager.sendRequest(new AlterIsrRequest.Builder(message),\n       new ControllerRequestCompletionHandler {\n         override def onComplete(response: ClientResponse): Unit = {\n-          try {\n-            debug(s\"Received AlterIsr response $response\")\n-            val body = response.responseBody().asInstanceOf[AlterIsrResponse]\n-            handleAlterIsrResponse(body, message.brokerEpoch, inflightAlterIsrItems)\n-          } finally {\n-            clearInflightRequests()\n+          debug(s\"Received AlterIsr response $response\")\n+          val body = response.responseBody().asInstanceOf[AlterIsrResponse]\n+          handleAlterIsrResponse(body, message.brokerEpoch, inflightAlterIsrItems) match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1d3d9af0b42ac0fe76ae516493f53a164986b3"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303a2b4ea7733e50d337a8a38fe671085912280b", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/303a2b4ea7733e50d337a8a38fe671085912280b", "committedDate": "2021-01-12T14:12:25Z", "message": "Revert back to a simple AtmoicBoolean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4e11d6221159fd0c8e3676c805b2d1c72e4597", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/bf4e11d6221159fd0c8e3676c805b2d1c72e4597", "committedDate": "2021-01-12T14:13:38Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into minor-alter-isr-scheduling\n\nConflicts:\n\tcore/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d44d25d7d2e72c374fa777abc1f738a970c9861", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/9d44d25d7d2e72c374fa777abc1f738a970c9861", "committedDate": "2021-01-12T17:15:31Z", "message": "Fixup unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NjU4MDI4", "url": "https://github.com/apache/kafka/pull/9749#pullrequestreview-566658028", "createdAt": "2021-01-12T20:11:19Z", "commit": {"oid": "9d44d25d7d2e72c374fa777abc1f738a970c9861"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMDoxMToyMFrOISS09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMDoxMToyMFrOISS09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA1Mzc0OQ==", "bodyText": "nit: space after if", "url": "https://github.com/apache/kafka/pull/9749#discussion_r556053749", "createdAt": "2021-01-12T20:11:20Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -112,68 +111,74 @@ class DefaultAlterIsrManager(\n   val brokerEpochSupplier: () => Long\n ) extends AlterIsrManager with Logging with KafkaMetricsGroup {\n \n-  // Used to allow only one pending ISR update per partition\n-  private val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n+  // Used to allow only one pending ISR update per partition (visible for testing)\n+  private[server] val unsentIsrUpdates: util.Map[TopicPartition, AlterIsrItem] = new ConcurrentHashMap[TopicPartition, AlterIsrItem]()\n \n   // Used to allow only one in-flight request at a time\n   private val inflightRequest: AtomicBoolean = new AtomicBoolean(false)\n \n-  private val lastIsrPropagationMs = new AtomicLong(0)\n-\n   override def start(): Unit = {\n     controllerChannelManager.start()\n-    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n   }\n \n   override def shutdown(): Unit = {\n     controllerChannelManager.shutdown()\n   }\n \n   override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n-    unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    val enqueued = unsentIsrUpdates.putIfAbsent(alterIsrItem.topicPartition, alterIsrItem) == null\n+    maybePropagateIsrChanges()\n+    enqueued\n   }\n \n   override def clearPending(topicPartition: TopicPartition): Unit = {\n     unsentIsrUpdates.remove(topicPartition)\n   }\n \n-  private def propagateIsrChanges(): Unit = {\n+  private[server] def maybePropagateIsrChanges(): Unit = {\n+    // Send all pending items if there is not already a request in-flight.\n     if (!unsentIsrUpdates.isEmpty && inflightRequest.compareAndSet(false, true)) {\n-      // Copy current unsent ISRs but don't remove from the map\n+      // Copy current unsent ISRs but don't remove from the map, they get cleared in the response handler\n       val inflightAlterIsrItems = new ListBuffer[AlterIsrItem]()\n       unsentIsrUpdates.values().forEach(item => inflightAlterIsrItems.append(item))\n-\n-      val now = time.milliseconds()\n-      lastIsrPropagationMs.set(now)\n       sendRequest(inflightAlterIsrItems.toSeq)\n     }\n   }\n \n-  private def sendRequest(inflightAlterIsrItems: Seq[AlterIsrItem]): Unit = {\n-    val message = buildRequest(inflightAlterIsrItems)\n-\n-    def clearInflightRequests(): Unit = {\n-      // Be sure to clear the in-flight flag to allow future AlterIsr requests\n-      if (!inflightRequest.compareAndSet(true, false)) {\n-        throw new IllegalStateException(\"AlterIsr response callback called when no requests were in flight\")\n-      }\n+  private[server] def clearInFlightRequest(): Unit = {\n+    if(!inflightRequest.compareAndSet(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d44d25d7d2e72c374fa777abc1f738a970c9861"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70b20ce03d0d77577bf7828e971a590a967e367e", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/70b20ce03d0d77577bf7828e971a590a967e367e", "committedDate": "2021-01-13T18:49:27Z", "message": "Fix spacing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2306, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}