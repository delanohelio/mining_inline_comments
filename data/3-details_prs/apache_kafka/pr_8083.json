{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzg1MzI4", "number": 8083, "title": "KIP-546 (1/2): Implements describeClientQuotas() and alterClientQuotas().", "bodyText": "Implements describeClientQuotas() and alterClientQuotas() to match current\nfunctionality, i.e. extensible entity types and other new quotas features\nlike resolving quotas is not yet supported.\nThis is the minimal functionality necessary for KIP-500, and converts the\nConfigCommand to use the client quotas APIs. resolveClientQuotas() and the\ncorresponding client quotas command will be in a future PR.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-10T22:26:13Z", "url": "https://github.com/apache/kafka/pull/8083", "merged": true, "mergeCommit": {"oid": "227a7322b77840e08924b9486e4bda2f3dfc1f1a"}, "closed": true, "closedAt": "2020-03-15T06:03:14Z", "author": {"login": "bdbyrne"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJxkbIABqjMwODkwMTg0OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNZtFTAH2gAyMzczMzg1MzI4OjVmYjU5MDRkODYyYTU0NGQyYzZiYjcxOGQ0NTg0Zjg3MjNlYzBjZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTM2NjMw", "url": "https://github.com/apache/kafka/pull/8083#pullrequestreview-372136630", "createdAt": "2020-03-10T16:49:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0OToxMlrOF0XyfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0OToxMlrOF0XyfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MDAyOA==", "bodyText": "Can we use Optional<String> for this?  Using magic string values feels messy, and will leak into the API", "url": "https://github.com/apache/kafka/pull/8083#discussion_r390460028", "createdAt": "2020-03-10T16:49:12Z", "author": {"login": "cmccabe"}, "path": "clients/src/main/java/org/apache/kafka/common/quota/QuotaFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.quota;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Describes a quota entity filter.\n+ */\n+public class QuotaFilter {\n+\n+    // Matches all entities with the entity type specified.\n+    private static final String MATCH_SPECIFIED = \"\";\n+\n+    private final String entityType;\n+    private final String match;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTY1NzU3", "url": "https://github.com/apache/kafka/pull/8083#pullrequestreview-372165757", "createdAt": "2020-03-10T17:23:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMzozMVrOF0ZOBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMzozMVrOF0ZOBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MzQ2MQ==", "bodyText": "I'd really rather not see the double equals used with strings.  I know Scala has special semantics for this, but it always looks wrong to people familiar with Java.  Maybe test isEmpty instead?", "url": "https://github.com/apache/kafka/pull/8083#discussion_r390483461", "createdAt": "2020-03-10T17:23:31Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/AdminManager.scala", "diffHunk": "@@ -700,4 +702,176 @@ class AdminManager(val config: KafkaConfig,\n     val readOnly = !DynamicBrokerConfig.AllDynamicConfigs.contains(name)\n     new DescribeConfigsResponse.ConfigEntry(name, valueAsString, source, isSensitive, readOnly, synonyms.asJava)\n   }\n+\n+  private def entityToSanitizedUserClientId(entity: QuotaEntity): (Option[String], Option[String]) = {\n+    if (entity.entries.isEmpty)\n+      throw new InvalidRequestException(\"Invalid empty quota entity\")\n+\n+    var user: Option[String] = None\n+    var clientId: Option[String] = None\n+    entity.entries().asScala.foreach { case (entityType, entityName) =>\n+      val sanitizedEntityName = Some(Sanitizer.sanitize(entityName))\n+      entityType match {\n+        case QuotaEntity.USER => user = sanitizedEntityName\n+        case QuotaEntity.CLIENT_ID => clientId = sanitizedEntityName\n+        case _ => throw new InvalidRequestException(s\"Unhandled quota entity type: ${entityType}\")\n+      }\n+      if (entityName == \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTY3MTQ3", "url": "https://github.com/apache/kafka/pull/8083#pullrequestreview-372167147", "createdAt": "2020-03-10T17:25:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNToyMVrOF0ZSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNToyMVrOF0ZSPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NDU0Mg==", "bodyText": "If it's not supported, it shouldn't silently return incorrect data.  It should throw an UnsupportedVersionException", "url": "https://github.com/apache/kafka/pull/8083#discussion_r390484542", "createdAt": "2020-03-10T17:25:21Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/AdminManager.scala", "diffHunk": "@@ -700,4 +702,176 @@ class AdminManager(val config: KafkaConfig,\n     val readOnly = !DynamicBrokerConfig.AllDynamicConfigs.contains(name)\n     new DescribeConfigsResponse.ConfigEntry(name, valueAsString, source, isSensitive, readOnly, synonyms.asJava)\n   }\n+\n+  private def entityToSanitizedUserClientId(entity: QuotaEntity): (Option[String], Option[String]) = {\n+    if (entity.entries.isEmpty)\n+      throw new InvalidRequestException(\"Invalid empty quota entity\")\n+\n+    var user: Option[String] = None\n+    var clientId: Option[String] = None\n+    entity.entries().asScala.foreach { case (entityType, entityName) =>\n+      val sanitizedEntityName = Some(Sanitizer.sanitize(entityName))\n+      entityType match {\n+        case QuotaEntity.USER => user = sanitizedEntityName\n+        case QuotaEntity.CLIENT_ID => clientId = sanitizedEntityName\n+        case _ => throw new InvalidRequestException(s\"Unhandled quota entity type: ${entityType}\")\n+      }\n+      if (entityName == \"\")\n+        throw new InvalidRequestException(s\"Empty ${entityType} not supported\")\n+    }\n+    (user, clientId)\n+  }\n+\n+  private def userClientIdToEntity(user: Option[String], clientId: Option[String]): QuotaEntity = {\n+    new QuotaEntity((user.map(u => QuotaEntity.USER -> u) ++ clientId.map(c => QuotaEntity.CLIENT_ID -> c)).toMap.asJava)\n+  }\n+\n+  def describeClientQuotas(filters: Seq[QuotaFilter], includeUnspecifiedTypes: Boolean): Map[QuotaEntity, Map[String, Double]] = {\n+    var userFilter: Option[QuotaFilter] = None\n+    var clientIdFilter: Option[QuotaFilter] = None\n+    var otherFilter: Boolean = false\n+    filters.foreach { filter =>\n+      filter.entityType() match {\n+        case QuotaEntity.USER =>\n+          if (userFilter.isDefined)\n+            throw new InvalidRequestException(s\"Duplicate user filter entity type\");\n+          userFilter = Some(filter)\n+        case QuotaEntity.CLIENT_ID =>\n+          if (clientIdFilter.isDefined)\n+            throw new InvalidRequestException(s\"Duplicate client filter entity type\");\n+          clientIdFilter = Some(filter)\n+        case \"\" =>\n+          throw new InvalidRequestException(s\"Unexpected empty filter entity type\")\n+        case _ =>\n+          // Supplying other entity types is not yet supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTY5MTkx", "url": "https://github.com/apache/kafka/pull/8083#pullrequestreview-372169191", "createdAt": "2020-03-10T17:27:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNzo0OFrOF0ZY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNzo0OFrOF0ZY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NjI0NQ==", "bodyText": "Need to update this JavaDoc parameter to match the new name of the function parameter.", "url": "https://github.com/apache/kafka/pull/8083#discussion_r390486245", "createdAt": "2020-03-10T17:27:48Z", "author": {"login": "cmccabe"}, "path": "clients/src/main/java/org/apache/kafka/common/quota/QuotaFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.quota;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Describes a quota entity filter.\n+ */\n+public class QuotaFilter {\n+\n+    // Matches all entities with the entity type specified.\n+    private static final String MATCH_SPECIFIED = \"\";\n+\n+    private final String entityType;\n+    private final String match;\n+\n+    /**\n+     * A filter to be applied.\n+     *\n+     * @param entityType the entity type the filter applies to\n+     * @param match the string that's matched exactly\n+     */\n+    private QuotaFilter(String entityType, String match) {\n+        this.entityType = Objects.requireNonNull(entityType);\n+        this.match = Objects.requireNonNull(match);\n+    }\n+\n+    /**\n+     * Constructs and returns a quota filter that matches the provided entity\n+     * name for the entity type exactly.\n+     *\n+     * @param entityType the entity type the filter applies to\n+     * @param match the string that's matched exactly", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6508233725aa718c5342f2c2adbc9ebacece72", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/ca6508233725aa718c5342f2c2adbc9ebacece72", "committedDate": "2020-03-11T18:58:22Z", "message": "KIP-546 (1/2): Implements describeClientQuotas() and alterClientQuotas().\n\nImplements describeClientQuotas() and alterClientQuotas() to match current\nfunctionality, i.e. extensible entity types and other new quotas features\nlike resolving quotas is not yet supported.\n\nThis is the minimal functionality necessary for KIP-500, and converts the\nConfigCommand to use the client quotas APIs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1836987e449bcbcaa3e0af83f9d1a1f3309c14", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/be1836987e449bcbcaa3e0af83f9d1a1f3309c14", "committedDate": "2020-03-11T18:58:22Z", "message": "(minor function renaming)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db7d0c81e3253135ad37a7a9b4918b4dfde26af", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4db7d0c81e3253135ad37a7a9b4918b4dfde26af", "committedDate": "2020-03-11T18:58:22Z", "message": "(address review comments)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5c7e3eb73be700455ecdb52e126caac03c51f7", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4a5c7e3eb73be700455ecdb52e126caac03c51f7", "committedDate": "2020-03-11T18:58:22Z", "message": "(address review comments, tests still need updating)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717d937c474cd9ec157f36e3c17c0db771238dc9", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/717d937c474cd9ec157f36e3c17c0db771238dc9", "committedDate": "2020-03-11T18:59:21Z", "message": "(remove includeUnspecified, matchSpecified -> matchSome, update tests)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "717d937c474cd9ec157f36e3c17c0db771238dc9", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/717d937c474cd9ec157f36e3c17c0db771238dc9", "committedDate": "2020-03-11T18:59:21Z", "message": "(remove includeUnspecified, matchSpecified -> matchSome, update tests)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb5904d862a544d2c6bb718d4584f8723ec0ce4", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/5fb5904d862a544d2c6bb718d4584f8723ec0ce4", "committedDate": "2020-03-14T00:23:58Z", "message": "(update filter API)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1831, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}