{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTgzMjQw", "number": 9360, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxMzoyN1rOEphX7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxMzo0NlrOEphYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTczODY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AdminManagerTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxMzoyN1rOHbPMfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxMzoyN1rOHbPMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyMjU1Nw==", "bodyText": "nit: space before \"zk\" - why is broker id anyway :-) ?", "url": "https://github.com/apache/kafka/pull/9360#discussion_r498322557", "createdAt": "2020-10-01T15:13:27Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/AdminManagerTest.scala", "diffHunk": "@@ -80,4 +81,30 @@ class AdminManagerTest {\n     assertEquals(Errors.NONE.code, results.head.errorCode())\n     assertFalse(\"Should return configs\", results.head.configs().isEmpty)\n   }\n+\n+  @Test\n+  def testDescribeConfigsWithDocumentation(): Unit = {\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Topic, topic)).andReturn(new java.util.Properties)\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Broker, brokerId.toString)).andReturn(TestUtils.createBrokerConfig(brokerId,\"zk\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "492f31fcc21b997c4c0057a3d5ba4c90f93112f9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTc0MDAxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AdminManagerTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxMzo0NlrOHbPNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxMjo1MFrOHbRrnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyMjc4OQ==", "bodyText": "we could check documentation is not empty as well?", "url": "https://github.com/apache/kafka/pull/9360#discussion_r498322789", "createdAt": "2020-10-01T15:13:46Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/AdminManagerTest.scala", "diffHunk": "@@ -80,4 +81,30 @@ class AdminManagerTest {\n     assertEquals(Errors.NONE.code, results.head.errorCode())\n     assertFalse(\"Should return configs\", results.head.configs().isEmpty)\n   }\n+\n+  @Test\n+  def testDescribeConfigsWithDocumentation(): Unit = {\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Topic, topic)).andReturn(new java.util.Properties)\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Broker, brokerId.toString)).andReturn(TestUtils.createBrokerConfig(brokerId,\"zk\"))\n+    EasyMock.expect(metadataCache.contains(topic)).andReturn(true)\n+    EasyMock.replay(zkClient, metadataCache)\n+\n+    val adminManager = createAdminManager()\n+\n+    val resources = List(\n+      new DescribeConfigsRequestData.DescribeConfigsResource()\n+        .setResourceName(topic)\n+        .setResourceType(ConfigResource.Type.TOPIC.id),\n+      new DescribeConfigsRequestData.DescribeConfigsResource()\n+        .setResourceName(brokerId.toString)\n+        .setResourceType(ConfigResource.Type.BROKER.id))\n+\n+    val results: List[DescribeConfigsResponseData.DescribeConfigsResult] = adminManager.describeConfigs(resources, true, true)\n+    assertEquals(2, results.size)\n+    results.foreach(r => {\n+      assertEquals(Errors.NONE.code, r.errorCode)\n+      assertFalse(\"Should return configs\", r.configs.isEmpty)\n+      r.configs.forEach(c => assertNotNull(s\"Config ${c.name} should have documentation\", c.documentation))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "492f31fcc21b997c4c0057a3d5ba4c90f93112f9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2MzI5NQ==", "bodyText": "sure thanks", "url": "https://github.com/apache/kafka/pull/9360#discussion_r498363295", "createdAt": "2020-10-01T16:12:50Z", "author": {"login": "edoardocomar"}, "path": "core/src/test/scala/unit/kafka/server/AdminManagerTest.scala", "diffHunk": "@@ -80,4 +81,30 @@ class AdminManagerTest {\n     assertEquals(Errors.NONE.code, results.head.errorCode())\n     assertFalse(\"Should return configs\", results.head.configs().isEmpty)\n   }\n+\n+  @Test\n+  def testDescribeConfigsWithDocumentation(): Unit = {\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Topic, topic)).andReturn(new java.util.Properties)\n+    EasyMock.expect(zkClient.getEntityConfigs(ConfigType.Broker, brokerId.toString)).andReturn(TestUtils.createBrokerConfig(brokerId,\"zk\"))\n+    EasyMock.expect(metadataCache.contains(topic)).andReturn(true)\n+    EasyMock.replay(zkClient, metadataCache)\n+\n+    val adminManager = createAdminManager()\n+\n+    val resources = List(\n+      new DescribeConfigsRequestData.DescribeConfigsResource()\n+        .setResourceName(topic)\n+        .setResourceType(ConfigResource.Type.TOPIC.id),\n+      new DescribeConfigsRequestData.DescribeConfigsResource()\n+        .setResourceName(brokerId.toString)\n+        .setResourceType(ConfigResource.Type.BROKER.id))\n+\n+    val results: List[DescribeConfigsResponseData.DescribeConfigsResult] = adminManager.describeConfigs(resources, true, true)\n+    assertEquals(2, results.size)\n+    results.foreach(r => {\n+      assertEquals(Errors.NONE.code, r.errorCode)\n+      assertFalse(\"Should return configs\", r.configs.isEmpty)\n+      r.configs.forEach(c => assertNotNull(s\"Config ${c.name} should have documentation\", c.documentation))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyMjc4OQ=="}, "originalCommit": {"oid": "492f31fcc21b997c4c0057a3d5ba4c90f93112f9"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1895, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}