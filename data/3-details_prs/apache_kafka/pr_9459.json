{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Nzg3NzMw", "number": 9459, "title": "MINOR: Add some class javadoc to Admin client", "bodyText": "", "createdAt": "2020-10-20T13:13:14Z", "url": "https://github.com/apache/kafka/pull/9459", "merged": true, "mergeCommit": {"oid": "47933088decc1bb33374b020e8f23ab7947285f2"}, "closed": true, "closedAt": "2020-10-22T12:19:05Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUYji4AH2gAyNTA2Nzg3NzMwOjI2NmJmYTMzMzM5OWZkYzdjNmRjYzk1YzgxMDVlZjQ3NTg0YjAxZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVA22EgFqTUxNDY1Mzk1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/266bfa333399fdc7c6dcc95c8105ef47584b01e3", "committedDate": "2020-10-20T13:12:16Z", "message": "MINOR: Add some class javadoc to Admin client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzExNDA0", "url": "https://github.com/apache/kafka/pull/9459#pullrequestreview-512711404", "createdAt": "2020-10-20T13:30:40Z", "commit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozMDo0MFrOHk8mGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1ODo0OVrOHk-OoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwMzU3Nw==", "bodyText": "request \"got\" re-sent to the control", "url": "https://github.com/apache/kafka/pull/9459#discussion_r508503577", "createdAt": "2020-10-20T13:30:40Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -45,15 +45,75 @@\n /**\n  * The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\n  * <p>\n+ * Instances returned from the {@code create} methods of this interface are guaranteed to be thread safe.\n+ * <p>\n+ * The operations exposed by Admin follow a consistent pattern:\n+ * <ul>\n+ *     <li>Admin instances should be created using {@link Admin#create(Properties)} or {@link Admin#create(Map)}</li>\n+ *     <li>Each operation typically has two overloaded methods, one which uses a default set of options and an\n+ *     overloaded method where the last parameter is an explicit options object.\n+ *     <li>The operation method's first parameter is a {@code Collection} of items to perform\n+ *     the operation on. Batching multiple requests into a single call is more efficient and should be\n+ *     preferred over multiple calls to the same method.\n+ *     <li>The operation methods execute asynchronously.\n+ *     <li>Each {@code xxx} operation method returns an {@code XxxResult} class with methods which expose\n+ *     {@link org.apache.kafka.common.KafkaFuture KafkaFutures}\n+ *     for accessing the result(s) of the operation.\n+ *     <li>Typically an {@code all()} method is provided for getting the overall success/failure of the batch and a\n+ *     {@code values()} method provided access to each item in a request batch.\n+ *     Other methods may also be provided.\n+ *     <li>For synchronous behaviour use {@link org.apache.kafka.common.KafkaFuture#get}\n+ * <p>\n+ * Here is a simple example of using an Admin client instance to create a new topic:\n+ * <pre>\n+ * {@code\n+ * Properties props = new Properties();\n+ * props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n+ *\n+ * try (Admin admin = Admin.create(props)) {\n+ *   String topicName = \"my-topic\";\n+ *   int partitions = 12;\n+ *   short replicationFactor = 3;\n+ *   // Create a compacted topic\n+ *   CreateTopicsResult result = admin.createTopics(Collections.singleton(\n+ *     new NewTopic(topicName, partitions, replicationFactor)\n+ *       .configs(Collections.singletonMap(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT)));\n+ *\n+ *   // Call values() to get the result for a specific topic\n+ *   KafkaFuture future = result.values().get(topicName);\n+ *\n+ *   // Call get() to block until the topic creation is complete or has failed\n+ *   // if creation failed the ExecutionException wraps the underlying cause.\n+ *   future.get();\n+ * }\n+ * </pre>\n+ *\n+ * <h3>Bootstrap and balancing</h3>\n+ * <p>\n+ * The {@code bootstrap.servers} config in the {@code Map} or {@code Properties} passed\n+ * to {@link Admin#create(Properties)} is only used for discovering the brokers in the cluster,\n+ * which the client will then connect to as needed.\n+ * As such, it is sufficient to include only two or three broker addresses to cope with the possibility of brokers\n+ * being unavailable.\n+ * <p>\n+ * Different operations necessitate requests being sent to different nodes in the cluster. For example\n+ * {@link #createTopics(Collection)} communicates with the controller, but {@link #describeTopics(Collection)}\n+ * can talk to any broker. When the recipient does not matter the instance will try to use the broker with the\n+ * fewest outstanding requests.\n+ * <p>\n+ * The client will transparently retry certain errors which are usually transient.\n+ * For example if the request for {@code createTopics()} got sent to a node which was not the controller\n+ * the metadata would be refreshed and the request re-sent to the controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwODA4Ng==", "bodyText": "{@link org.apache.kafka.common.KafkaFuture}", "url": "https://github.com/apache/kafka/pull/9459#discussion_r508508086", "createdAt": "2020-10-20T13:36:02Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -45,15 +45,75 @@\n /**\n  * The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\n  * <p>\n+ * Instances returned from the {@code create} methods of this interface are guaranteed to be thread safe.\n+ * <p>\n+ * The operations exposed by Admin follow a consistent pattern:\n+ * <ul>\n+ *     <li>Admin instances should be created using {@link Admin#create(Properties)} or {@link Admin#create(Map)}</li>\n+ *     <li>Each operation typically has two overloaded methods, one which uses a default set of options and an\n+ *     overloaded method where the last parameter is an explicit options object.\n+ *     <li>The operation method's first parameter is a {@code Collection} of items to perform\n+ *     the operation on. Batching multiple requests into a single call is more efficient and should be\n+ *     preferred over multiple calls to the same method.\n+ *     <li>The operation methods execute asynchronously.\n+ *     <li>Each {@code xxx} operation method returns an {@code XxxResult} class with methods which expose\n+ *     {@link org.apache.kafka.common.KafkaFuture KafkaFutures}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwOTA5NA==", "bodyText": "this line can be added to tail of above line", "url": "https://github.com/apache/kafka/pull/9459#discussion_r508509094", "createdAt": "2020-10-20T13:36:55Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -45,15 +45,75 @@\n /**\n  * The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\n  * <p>\n+ * Instances returned from the {@code create} methods of this interface are guaranteed to be thread safe.\n+ * <p>\n+ * The operations exposed by Admin follow a consistent pattern:\n+ * <ul>\n+ *     <li>Admin instances should be created using {@link Admin#create(Properties)} or {@link Admin#create(Map)}</li>\n+ *     <li>Each operation typically has two overloaded methods, one which uses a default set of options and an\n+ *     overloaded method where the last parameter is an explicit options object.\n+ *     <li>The operation method's first parameter is a {@code Collection} of items to perform\n+ *     the operation on. Batching multiple requests into a single call is more efficient and should be\n+ *     preferred over multiple calls to the same method.\n+ *     <li>The operation methods execute asynchronously.\n+ *     <li>Each {@code xxx} operation method returns an {@code XxxResult} class with methods which expose\n+ *     {@link org.apache.kafka.common.KafkaFuture KafkaFutures}\n+ *     for accessing the result(s) of the operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzMDMzNw==", "bodyText": "lose a curly bracket?", "url": "https://github.com/apache/kafka/pull/9459#discussion_r508530337", "createdAt": "2020-10-20T13:58:49Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -45,15 +45,75 @@\n /**\n  * The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\n  * <p>\n+ * Instances returned from the {@code create} methods of this interface are guaranteed to be thread safe.\n+ * <p>\n+ * The operations exposed by Admin follow a consistent pattern:\n+ * <ul>\n+ *     <li>Admin instances should be created using {@link Admin#create(Properties)} or {@link Admin#create(Map)}</li>\n+ *     <li>Each operation typically has two overloaded methods, one which uses a default set of options and an\n+ *     overloaded method where the last parameter is an explicit options object.\n+ *     <li>The operation method's first parameter is a {@code Collection} of items to perform\n+ *     the operation on. Batching multiple requests into a single call is more efficient and should be\n+ *     preferred over multiple calls to the same method.\n+ *     <li>The operation methods execute asynchronously.\n+ *     <li>Each {@code xxx} operation method returns an {@code XxxResult} class with methods which expose\n+ *     {@link org.apache.kafka.common.KafkaFuture KafkaFutures}\n+ *     for accessing the result(s) of the operation.\n+ *     <li>Typically an {@code all()} method is provided for getting the overall success/failure of the batch and a\n+ *     {@code values()} method provided access to each item in a request batch.\n+ *     Other methods may also be provided.\n+ *     <li>For synchronous behaviour use {@link org.apache.kafka.common.KafkaFuture#get}\n+ * <p>\n+ * Here is a simple example of using an Admin client instance to create a new topic:\n+ * <pre>\n+ * {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266bfa333399fdc7c6dcc95c8105ef47584b01e3"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1007851caec08b36fab69587f147f1154393b46f", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/1007851caec08b36fab69587f147f1154393b46f", "committedDate": "2020-10-20T14:56:09Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjczNjEx", "url": "https://github.com/apache/kafka/pull/9459#pullrequestreview-513273611", "createdAt": "2020-10-21T03:04:53Z", "commit": {"oid": "1007851caec08b36fab69587f147f1154393b46f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzowNDo1M1rOHlYgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMzowNDo1M1rOHlYgAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2MDc3MQ==", "bodyText": "{@link org.apache.kafka.common.KafkaFuture#get} => {@link org.apache.kafka.common.KafkaFuture#get()}", "url": "https://github.com/apache/kafka/pull/9459#discussion_r508960771", "createdAt": "2020-10-21T03:04:53Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -45,15 +45,76 @@\n /**\n  * The administrative client for Kafka, which supports managing and inspecting topics, brokers, configurations and ACLs.\n  * <p>\n+ * Instances returned from the {@code create} methods of this interface are guaranteed to be thread safe.\n+ * <p>\n+ * The operations exposed by Admin follow a consistent pattern:\n+ * <ul>\n+ *     <li>Admin instances should be created using {@link Admin#create(Properties)} or {@link Admin#create(Map)}</li>\n+ *     <li>Each operation typically has two overloaded methods, one which uses a default set of options and an\n+ *     overloaded method where the last parameter is an explicit options object.\n+ *     <li>The operation method's first parameter is a {@code Collection} of items to perform\n+ *     the operation on. Batching multiple requests into a single call is more efficient and should be\n+ *     preferred over multiple calls to the same method.\n+ *     <li>The operation methods execute asynchronously.\n+ *     <li>Each {@code xxx} operation method returns an {@code XxxResult} class with methods which expose\n+ *     {@link org.apache.kafka.common.KafkaFuture} for accessing the result(s) of the operation.\n+ *     <li>Typically an {@code all()} method is provided for getting the overall success/failure of the batch and a\n+ *     {@code values()} method provided access to each item in a request batch.\n+ *     Other methods may also be provided.\n+ *     <li>For synchronous behaviour use {@link org.apache.kafka.common.KafkaFuture#get}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1007851caec08b36fab69587f147f1154393b46f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d2cb31afb363f09c227f45a0449ee6827a3119", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/d9d2cb31afb363f09c227f45a0449ee6827a3119", "committedDate": "2020-10-21T07:52:20Z", "message": "Review comment and remove two erroneous throws"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDAzNjQw", "url": "https://github.com/apache/kafka/pull/9459#pullrequestreview-513403640", "createdAt": "2020-10-21T07:58:47Z", "commit": {"oid": "d9d2cb31afb363f09c227f45a0449ee6827a3119"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1ODo0N1rOHlfBgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo1ODo0N1rOHlfBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2NzY0OQ==", "bodyText": "@dongjinleekr Could you please take a look at this throws? It was added by your PR (#7083).", "url": "https://github.com/apache/kafka/pull/9459#discussion_r509067649", "createdAt": "2020-10-21T07:58:47Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -519,7 +519,6 @@ AlterConfigsResult incrementalAlterConfigs(Map<ConfigResource,\n      *\n      * @param replicaAssignment     The replicas with their log directory absolute path\n      * @return                      The AlterReplicaLogDirsResult\n-     * @throws InterruptedException Interrupted while joining I/O thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d2cb31afb363f09c227f45a0449ee6827a3119"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjUzOTUw", "url": "https://github.com/apache/kafka/pull/9459#pullrequestreview-514653950", "createdAt": "2020-10-22T12:09:33Z", "commit": {"oid": "d9d2cb31afb363f09c227f45a0449ee6827a3119"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 572, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}