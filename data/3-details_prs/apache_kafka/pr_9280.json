{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTA4MTUy", "number": 9280, "title": "KAFKA-10186: Abort transaction with pending data with TransactionAbortedException", "bodyText": "KAFKA-10186: Abort transaction with pending data with TransactionAbortedException\nIf a transaction is aborted with no underlying exception, throw\na new kind of exception - TransactionAbortedException to\ndistinguish this from other fatal exceptions.\nThis is part of KIP-654 and resolves KAFKA-10186\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-09-11T10:21:38Z", "url": "https://github.com/apache/kafka/pull/9280", "merged": true, "mergeCommit": {"oid": "40a23cc0c2e1efa8632f59b093672221a3c03c36"}, "closed": true, "closedAt": "2020-10-07T16:34:40Z", "author": {"login": "nym3r0s"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH-VrjAFqTQ4NzE3Nzg4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP7ptDgFqTUwMzE4OTMxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTc3ODg4", "url": "https://github.com/apache/kafka/pull/9280#pullrequestreview-487177888", "createdAt": "2020-09-11T23:50:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMzo1MDowOVrOHQwosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMzo1MDowOVrOHQwosw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjExNQ==", "bodyText": "This comment might be unnecessary, the code is pretty self-explanatory in this case \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9280#discussion_r487336115", "createdAt": "2020-09-11T23:50:09Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/Sender.java", "diffHunk": "@@ -418,10 +419,14 @@ private boolean maybeSendAndPollTransactionalRequest() {\n \n         if (transactionManager.hasAbortableError() || transactionManager.isAborting()) {\n             if (accumulator.hasIncomplete()) {\n+                // Attempt to get the last error that caused this abort.\n                 RuntimeException exception = transactionManager.lastError();\n+                // If there was no error, but we are still aborting,\n+                // then this is most likely a case where there was no fatal error.\n                 if (exception == null) {\n-                    exception = new KafkaException(\"Failing batch since transaction was aborted\");\n+                    exception = new TransactionAbortedException();\n                 }\n+                // Since the transaction is aborted / being aborted, abort all the undrained batches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c124b355088a1eb2afeb932573240158aa541a", "author": {"user": {"login": "nym3r0s", "name": "Gokul Srinivas"}}, "url": "https://github.com/apache/kafka/commit/a2c124b355088a1eb2afeb932573240158aa541a", "committedDate": "2020-09-23T17:04:49Z", "message": "KAFKA-10186: Abort transaction with pending data with TransactionAbortedException\n\nIf a transaction is aborted with no underlying exception, throw\na new kind of exception - `TransactionAbortedException` to\ndistinguish this from other fatal exceptions.\n\nThis is part of KIP-654 and resolves KAFKA-10186"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a2c124b355088a1eb2afeb932573240158aa541a", "author": {"user": {"login": "nym3r0s", "name": "Gokul Srinivas"}}, "url": "https://github.com/apache/kafka/commit/a2c124b355088a1eb2afeb932573240158aa541a", "committedDate": "2020-09-23T17:04:49Z", "message": "KAFKA-10186: Abort transaction with pending data with TransactionAbortedException\n\nIf a transaction is aborted with no underlying exception, throw\na new kind of exception - `TransactionAbortedException` to\ndistinguish this from other fatal exceptions.\n\nThis is part of KIP-654 and resolves KAFKA-10186"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac8e2d7eba16006bdd2e6d6b5dbd91653257a82", "author": {"user": {"login": "hachikuji", "name": "Jason Gustafson"}}, "url": "https://github.com/apache/kafka/commit/0ac8e2d7eba16006bdd2e6d6b5dbd91653257a82", "committedDate": "2020-09-25T18:06:00Z", "message": "Update Sender.java\n\nRemove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NjU0NTM2", "url": "https://github.com/apache/kafka/pull/9280#pullrequestreview-496654536", "createdAt": "2020-09-25T18:21:01Z", "commit": {"oid": "0ac8e2d7eba16006bdd2e6d6b5dbd91653257a82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTA0MDQx", "url": "https://github.com/apache/kafka/pull/9280#pullrequestreview-502504041", "createdAt": "2020-10-06T00:16:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNjo0NlrOHcx4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNjo0NlrOHcx4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTU3Ng==", "bodyText": "We have a helper for this pattern. See TestUtils.assertFutureThrows", "url": "https://github.com/apache/kafka/pull/9280#discussion_r499939576", "createdAt": "2020-10-06T00:16:46Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java", "diffHunk": "@@ -2358,6 +2359,41 @@ public void testForceShutdownWithIncompleteTransaction() {\n         }\n     }\n \n+    @Test\n+    public void testTransactionAbortedExceptionOnAbortWithoutError() throws InterruptedException, ExecutionException {\n+        ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n+        TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionAbortedExceptionOnAbortWithoutError\", 60000, 100, apiVersions, false);\n+\n+        setupWithTransactionState(txnManager, false, null);\n+        doInitTransactions(txnManager, producerIdAndEpoch);\n+        // Begin the transaction\n+        txnManager.beginTransaction();\n+        txnManager.maybeAddPartitionToTransaction(tp0);\n+        client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp0, Errors.NONE)));\n+        // Run it once so that the partition is added to the transaction.\n+        sender.runOnce();\n+        // Append a record to the accumulator.\n+        FutureRecordMetadata metadata1 = appendToAccumulator(tp0, time.milliseconds(), \"key1\", \"value1\");\n+        // Now abort the transaction manually.\n+        txnManager.beginAbort();\n+        // Try to send.\n+        // This should abort the existing transaction and\n+        // drain all the unsent batches with a TransactionAbortedException.\n+        sender.runOnce();\n+        // Now attempt to fetch the result for the record.\n+        try {\n+            // This should fail since we aborted the transaction.\n+            metadata1.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bcee799b6e5358a0835f4b4970c2d4a7681d175", "author": {"user": {"login": "nym3r0s", "name": "Gokul Srinivas"}}, "url": "https://github.com/apache/kafka/commit/7bcee799b6e5358a0835f4b4970c2d4a7681d175", "committedDate": "2020-10-06T10:22:22Z", "message": "KAFKA-10186 Add tests for ensuring `TransactionAbortedException`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7bcee799b6e5358a0835f4b4970c2d4a7681d175", "author": {"user": {"login": "nym3r0s", "name": "Gokul Srinivas"}}, "url": "https://github.com/apache/kafka/commit/7bcee799b6e5358a0835f4b4970c2d4a7681d175", "committedDate": "2020-10-06T10:22:22Z", "message": "KAFKA-10186 Add tests for ensuring `TransactionAbortedException`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTg5MzE2", "url": "https://github.com/apache/kafka/pull/9280#pullrequestreview-503189316", "createdAt": "2020-10-06T17:16:03Z", "commit": {"oid": "7bcee799b6e5358a0835f4b4970c2d4a7681d175"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 610, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}