{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDgzODA3", "number": 8663, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NzoxNlrOD8J5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDoxMToyOVrOD8UNBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAzMjM3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NzoxNlrOGU68Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowMDoxMFrOGU9RAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ==", "bodyText": "I think we can use a utility method provided by the ConfigDef class here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n          \n          \n            \n                            Arrays.setAll(topics, i -> topics[i].trim());\n          \n          \n            \n                            if (Arrays.asList(topics).contains(dlqTopic)) {\n          \n          \n            \n                            List<String> topics = (List<String>) ConfigDef.parseType(SinkTask.TOPICS_CONFIG, props.get(SinkTask.TOPICS_CONFIG), ConfigDef.Type.LIST);\n          \n          \n            \n                            if (topics.contains(dlqTopic)) {", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424590419", "createdAt": "2020-05-13T16:57:16Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTIxNA==", "bodyText": "I agree but we have to take into account the following:\n\nThat source code is also in WorkerSinkTask class.\nConfigDef.parseType does not trim the split. I mean, the result of splitting \"topic1,topic2          \" is not the same that \" topic1        ,topic2\".\n\nI could include the changes you comment in this class and also in the WorkerSinkTask to be aligned. On the other hand, I would also fix the trim thing in ConfigDef.parseType(or maybe in another PR).\nWhat do you think?", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424601214", "createdAt": "2020-05-13T17:15:09Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNA==", "bodyText": "I think ConfigDef::parseType does do the trimming: \n  \n    \n      kafka/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java\n    \n    \n         Line 705\n      in\n      9bc96d5\n    \n    \n    \n    \n\n        \n          \n           return Arrays.asList(COMMA_WITH_WHITESPACE.split(trimmed, -1)); \n        \n    \n  \n\n\nChanging the WorkerSinkTask to align seems fine, although if we're reusing this logic all over the place it might make sense to just add a utility method like parseTopicsList(Map<String, Object>) to something like the SinkConnectorConfig class that grabs the value for SinkTask.TOPICS_CONFIG, passes it to ConfigDef::parseType, and returns the result. That way we can just use that whenever we need to parse a topics list from a sink connector config.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424608914", "createdAt": "2020-05-13T17:27:41Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTMxMA==", "bodyText": "ConfigDef.parseType does a trim but for the whole string, not the splits. This would be the issue in case you have spaces in each splitted topic name.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424611310", "createdAt": "2020-05-13T17:31:33Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMjg5OA==", "bodyText": "I think it does do trimming for the splits, based on the regex that's used for the splitting. I tried out a few local examples and they seemed to confirm this; parsing something like \" \\t foo \\t, \\tbar\\t , b a z \" returned the list [\"foo\", \"bar\", \"b a z\"] for me.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424612898", "createdAt": "2020-05-13T17:34:11Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNzMwMA==", "bodyText": "Sorry about that. You're totally right.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424617300", "createdAt": "2020-05-13T17:41:47Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxOTU2Mg==", "bodyText": "Haha, no worries! Does adding this logic to a reusable place like the SinkConnectorConfig sound good to you?", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424619562", "createdAt": "2020-05-13T17:45:32Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODQ4Mg==", "bodyText": "Sure!", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424628482", "createdAt": "2020-05-13T18:00:10Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MDQxOQ=="}, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA1Nzg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowNDowNVrOGU7NEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowNDowNVrOGU7NEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NDcwNQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which matches in \" +\n          \n          \n            \n                                    SinkTask.TOPICS_REGEX_CONFIG);\n          \n          \n            \n                                throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which matches the regex in \" +\n          \n          \n            \n                                    SinkTask.TOPICS_REGEX_CONFIG);", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424594705", "createdAt": "2020-05-13T17:04:05Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +99,26 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                String[] topics = props.get(SinkTask.TOPICS_CONFIG).split(\",\");\n+                Arrays.setAll(topics, i -> topics[i].trim());\n+                if (Arrays.asList(topics).contains(dlqTopic)) {\n+                    throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which is already in \" +\n+                        SinkTask.TOPICS_CONFIG);\n+                }\n+            }\n+            if (hasTopicsRegexConfig) {\n+                String topicsRegexStr = props.get(SinkTask.TOPICS_REGEX_CONFIG);\n+                Pattern pattern = Pattern.compile(topicsRegexStr);\n+                if (pattern.matcher(dlqTopic).matches()) {\n+                    throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which matches in \" +\n+                        SinkTask.TOPICS_REGEX_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9806bd8a6ff94689223f2bf761d1cc92455c3659"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQzNTU0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0Njo0MVrOGU-9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo1ODo1OFrOGVa_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjI4NA==", "bodyText": "Is this necessary? Doesn't seem like it actually breaks anything if the user specifies duplicate topics. And if we do want to enforce constraints about non-empty topics and/or no duplicated topics, we can do that with a Validator for that property when it's defined in the ConfigDef.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424656284", "createdAt": "2020-05-13T18:46:41Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -108,6 +132,20 @@ public static boolean hasTopicsRegexConfig(Map<String, String> props) {\n         return topicsRegexStr != null && !topicsRegexStr.trim().isEmpty();\n     }\n \n+    public static boolean hasDlqTopicConfig(Map<String, String> props) {\n+        String dqlTopicStr = props.get(DLQ_TOPIC_NAME_CONFIG);\n+        return dqlTopicStr != null && !dqlTopicStr.trim().isEmpty();\n+    }\n+\n+    public static List<String> parseTopicsList(Map<String, String> props) {\n+        List<String> topics = (List<String>) ConfigDef.parseType(TOPICS_CONFIG, props.get(TOPICS_CONFIG), Type.LIST);\n+        return topics\n+                .stream()\n+                .filter(topic -> !topic.isEmpty())\n+                .distinct()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1OTM0OA==", "bodyText": "Actually it isn't. Just for the shake of having a \"cleaned\" list of topics. For instance, when logging topics in which the connector is going to subscribe...", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424659348", "createdAt": "2020-05-13T18:51:50Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -108,6 +132,20 @@ public static boolean hasTopicsRegexConfig(Map<String, String> props) {\n         return topicsRegexStr != null && !topicsRegexStr.trim().isEmpty();\n     }\n \n+    public static boolean hasDlqTopicConfig(Map<String, String> props) {\n+        String dqlTopicStr = props.get(DLQ_TOPIC_NAME_CONFIG);\n+        return dqlTopicStr != null && !dqlTopicStr.trim().isEmpty();\n+    }\n+\n+    public static List<String> parseTopicsList(Map<String, String> props) {\n+        List<String> topics = (List<String>) ConfigDef.parseType(TOPICS_CONFIG, props.get(TOPICS_CONFIG), Type.LIST);\n+        return topics\n+                .stream()\n+                .filter(topic -> !topic.isEmpty())\n+                .distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjI4NA=="}, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2Nzg2NQ==", "bodyText": "\ud83d\udc4d fair enough", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424667865", "createdAt": "2020-05-13T19:06:36Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -108,6 +132,20 @@ public static boolean hasTopicsRegexConfig(Map<String, String> props) {\n         return topicsRegexStr != null && !topicsRegexStr.trim().isEmpty();\n     }\n \n+    public static boolean hasDlqTopicConfig(Map<String, String> props) {\n+        String dqlTopicStr = props.get(DLQ_TOPIC_NAME_CONFIG);\n+        return dqlTopicStr != null && !dqlTopicStr.trim().isEmpty();\n+    }\n+\n+    public static List<String> parseTopicsList(Map<String, String> props) {\n+        List<String> topics = (List<String>) ConfigDef.parseType(TOPICS_CONFIG, props.get(TOPICS_CONFIG), Type.LIST);\n+        return topics\n+                .stream()\n+                .filter(topic -> !topic.isEmpty())\n+                .distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjI4NA=="}, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1OTUzMw==", "bodyText": "How about returning a Set instead of List?\nreturn topics\n                .stream()\n                .filter(topic -> !topic.isEmpty())\n                .collect(Collectors.toSet());", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424859533", "createdAt": "2020-05-14T04:08:25Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -108,6 +132,20 @@ public static boolean hasTopicsRegexConfig(Map<String, String> props) {\n         return topicsRegexStr != null && !topicsRegexStr.trim().isEmpty();\n     }\n \n+    public static boolean hasDlqTopicConfig(Map<String, String> props) {\n+        String dqlTopicStr = props.get(DLQ_TOPIC_NAME_CONFIG);\n+        return dqlTopicStr != null && !dqlTopicStr.trim().isEmpty();\n+    }\n+\n+    public static List<String> parseTopicsList(Map<String, String> props) {\n+        List<String> topics = (List<String>) ConfigDef.parseType(TOPICS_CONFIG, props.get(TOPICS_CONFIG), Type.LIST);\n+        return topics\n+                .stream()\n+                .filter(topic -> !topic.isEmpty())\n+                .distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjI4NA=="}, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExNTQ3NQ==", "bodyText": "That what I thought but we would also have a topic name with an empty string.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r425115475", "createdAt": "2020-05-14T12:58:58Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -108,6 +132,20 @@ public static boolean hasTopicsRegexConfig(Map<String, String> props) {\n         return topicsRegexStr != null && !topicsRegexStr.trim().isEmpty();\n     }\n \n+    public static boolean hasDlqTopicConfig(Map<String, String> props) {\n+        String dqlTopicStr = props.get(DLQ_TOPIC_NAME_CONFIG);\n+        return dqlTopicStr != null && !dqlTopicStr.trim().isEmpty();\n+    }\n+\n+    public static List<String> parseTopicsList(Map<String, String> props) {\n+        List<String> topics = (List<String>) ConfigDef.parseType(TOPICS_CONFIG, props.get(TOPICS_CONFIG), Type.LIST);\n+        return topics\n+                .stream()\n+                .filter(topic -> !topic.isEmpty())\n+                .distinct()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjI4NA=="}, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTcyMTY0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDoxMToyOVrOGVLaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoyNzozOFrOGVcM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MDI1NA==", "bodyText": "Should we log the topic name for this exception? For example, has a topic name (xxx) which", "url": "https://github.com/apache/kafka/pull/8663#discussion_r424860254", "createdAt": "2020-05-14T04:11:29Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +101,25 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                List<String> topics = parseTopicsList(props);\n+                if (topics.contains(dlqTopic)) {\n+                    throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which is already in \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzNTM0MQ==", "bodyText": "There will be just one topic in the DQL topic config. We could add it but I'm not sure if it's explicitly necessary.", "url": "https://github.com/apache/kafka/pull/8663#discussion_r425135341", "createdAt": "2020-05-14T13:27:38Z", "author": {"login": "mmolimar"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/SinkConnectorConfig.java", "diffHunk": "@@ -96,6 +101,25 @@ public static void validate(Map<String, String> props) {\n             throw new ConfigException(\"Must configure one of \" +\n                 SinkTask.TOPICS_CONFIG + \" or \" + SinkTask.TOPICS_REGEX_CONFIG);\n         }\n+\n+        if (hasDlqTopicConfig) {\n+            String dlqTopic = props.get(DLQ_TOPIC_NAME_CONFIG).trim();\n+            if (hasTopicsConfig) {\n+                List<String> topics = parseTopicsList(props);\n+                if (topics.contains(dlqTopic)) {\n+                    throw new ConfigException(DLQ_TOPIC_NAME_CONFIG + \" has a topic name which is already in \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MDI1NA=="}, "originalCommit": {"oid": "d9f55aed36097b74b0953b180e8d4dec882cd04b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2599, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}