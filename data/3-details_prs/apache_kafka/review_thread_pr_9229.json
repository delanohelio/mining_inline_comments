{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODIzNjU4", "number": 9229, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMzo1MDo1NVrOFu2KGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMzo1MjozNlrOFu2LKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg0NjY2MTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/RequestLocal.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMzo1MDo1NVrOJEI-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNTowMzoyN1rOJEKOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODMyMTEzOQ==", "bodyText": "NoCaching should use BufferSupplier.NO_CACHING, right?", "url": "https://github.com/apache/kafka/pull/9229#discussion_r608321139", "createdAt": "2021-04-07T03:50:55Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/RequestLocal.scala", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import org.apache.kafka.common.utils.BufferSupplier\n+\n+object RequestLocal {\n+  val NoCaching: RequestLocal = RequestLocal(BufferSupplier.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a123daa92b6c61e7e17664b4106dbbfec6dc3b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM0MTUwNA==", "bodyText": "Indeed.", "url": "https://github.com/apache/kafka/pull/9229#discussion_r608341504", "createdAt": "2021-04-07T05:03:27Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/RequestLocal.scala", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import org.apache.kafka.common.utils.BufferSupplier\n+\n+object RequestLocal {\n+  val NoCaching: RequestLocal = RequestLocal(BufferSupplier.create())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODMyMTEzOQ=="}, "originalCommit": {"oid": "2a123daa92b6c61e7e17664b4106dbbfec6dc3b6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg0NjY2NDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwMzo1MjozNlrOJEJABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wN1QwNTowMzoyMlrOJEKN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODMyMTU0Mw==", "bodyText": "Should we call completeShutdown() rather than shutdownComplete.countDown()?", "url": "https://github.com/apache/kafka/pull/9229#discussion_r608321543", "createdAt": "2021-04-07T03:52:36Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -64,14 +65,14 @@ class KafkaRequestHandler(id: Int,\n       req match {\n         case RequestChannel.ShutdownRequest =>\n           debug(s\"Kafka request handler $id on broker $brokerId received shut down command\")\n-          shutdownComplete.countDown()\n+          completeShutdown()\n           return\n \n         case request: RequestChannel.Request =>\n           try {\n             request.requestDequeueTimeNanos = endTime\n             trace(s\"Kafka request handler $id on broker $brokerId handling request $request\")\n-            apis.handle(request)\n+            apis.handle(request, requestLocal)\n           } catch {\n             case e: FatalExitError =>\n               shutdownComplete.countDown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a123daa92b6c61e7e17664b4106dbbfec6dc3b6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODM0MTQ4MA==", "bodyText": "Yes.", "url": "https://github.com/apache/kafka/pull/9229#discussion_r608341480", "createdAt": "2021-04-07T05:03:22Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -64,14 +65,14 @@ class KafkaRequestHandler(id: Int,\n       req match {\n         case RequestChannel.ShutdownRequest =>\n           debug(s\"Kafka request handler $id on broker $brokerId received shut down command\")\n-          shutdownComplete.countDown()\n+          completeShutdown()\n           return\n \n         case request: RequestChannel.Request =>\n           try {\n             request.requestDequeueTimeNanos = endTime\n             trace(s\"Kafka request handler $id on broker $brokerId handling request $request\")\n-            apis.handle(request)\n+            apis.handle(request, requestLocal)\n           } catch {\n             case e: FatalExitError =>\n               shutdownComplete.countDown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODMyMTU0Mw=="}, "originalCommit": {"oid": "2a123daa92b6c61e7e17664b4106dbbfec6dc3b6"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1967, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}