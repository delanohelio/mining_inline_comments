{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODczNzMz", "number": 8550, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMDo1N1rOD2PZjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoyMjowN1rOD4hCFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjAxOTk5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMDo1N1rOGL-XJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMDo1N1rOGL-XJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTI1NA==", "bodyText": "nit: validateCopartition", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209254", "createdAt": "2020-04-26T04:10:57Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjAyMzkyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMzoyMFrOGL-Yvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMzoyMFrOGL-Yvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTY2Mg==", "bodyText": "Let's try to be consistent to use copartition instead of coPartition", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209662", "createdAt": "2020-04-26T04:13:20Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjAyNjQ2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxNToxN1rOGL-Zzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoyNDowMlrOGPYymA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTkzNQ==", "bodyText": "One question, since we do verification in topology builder, is there any validation code in later stage that could be removed?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209935", "createdAt": "2020-04-26T04:15:17Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTQxMQ==", "bodyText": "I'm not sure if we can remove later stage validation code\n@mjsax @lkokhreidze Can you give some advice?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415335411", "createdAt": "2020-04-26T15:29:16Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTkzNQ=="}, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Nzk5Mg==", "bodyText": "I don't think so. Because the later verification that covers the case if the user specified all partitions, is the same code that verify co-partitioning depending on the input topic partition numbers. And we still need that check anyway.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787992", "createdAt": "2020-05-02T00:24:02Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTkzNQ=="}, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjAzMjAzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxOTowMFrOGL-cLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxOTowMFrOGL-cLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMDU0Mg==", "bodyText": "Since we are only going to verify number of partitions, I think we could just set value as integer", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415210542", "createdAt": "2020-04-26T04:19:00Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjA0NTE2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoyODo1MVrOGL-hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyNjoyNFrOGOG90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMTk3NA==", "bodyText": "Could you clarify why we need this equality check?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415211974", "createdAt": "2020-04-26T04:28:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (coPartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    coPartitionProperties.put(topic, prop);\n+                }\n+            });\n+            if (coPartition.size() == coPartitionProperties.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNDc1Nw==", "bodyText": "It's my pleasure.\nIt means that not all input topics have correspond internal topic if coPartition.size() != coPartitionProperties.size(), if not equal is true, we can just skip this validation. You can see the original validation in CopartitionedTopicsEnforcer#enforce\nif (copartitionGroup.equals(repartitionTopicConfigs.keySet())) {\n    ...\n    validateAndGetNumOfPartitions\n    ...\n}\n\nIf some of input topics don't have repartition operation, their internal topic partition number can be deducted by others which have repartition operation. You can see KStreamRepartitionIntegrationTest#shouldDeductNumberOfPartitionsFromRepartitionOperation for more details.\nSo we can skip this validation if coPartition.size() != coPartitionProperties.size()", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415334757", "createdAt": "2020-04-26T15:26:02Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (coPartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    coPartitionProperties.put(topic, prop);\n+                }\n+            });\n+            if (coPartition.size() == coPartitionProperties.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMTk3NA=="}, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NzM3OQ==", "bodyText": "I see the point, so do we need to cleanup the validations on the CopartitionedTopicsEnforcer to avoid duplicates? WDYT?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r417447379", "createdAt": "2020-04-29T16:26:24Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (coPartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    coPartitionProperties.put(topic, prop);\n+                }\n+            });\n+            if (coPartition.size() == coPartitionProperties.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMTk3NA=="}, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg1NTk4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamRepartitionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDowMDo1MlrOGPYjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMToyNToxNVrOGPaYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NDE4OQ==", "bodyText": "It's better to use:\nfinal TopologyException expected = assertThrows(\n  TopologyException.class,\n  () -> builder.build(props)\n);\n// put assertions here", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418784189", "createdAt": "2020-05-02T00:00:52Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamRepartitionTest.java", "diffHunk": "@@ -104,6 +114,54 @@ public void shouldInvokePartitionerWhenSet() {\n         verify(streamPartitionerMock);\n     }\n \n+    @Test\n+    public void shouldThrowAnExceptionWhenNumberOfPartitionsOfRepartitionOperationsDoNotMatchWhenJoining() {\n+        final String topicB = \"topic-b\";\n+        final String outputTopic = \"topic-output\";\n+        final String topicBRepartitionedName = \"topic-b-scale-up\";\n+        final String inputTopicRepartitionedName = \"input-topic-scale-up\";\n+        final int topicBNumberOfPartitions = 2;\n+        final int inputTopicNumberOfPartitions = 4;\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final Repartitioned<Integer, String> inputTopicRepartitioned = Repartitioned\n+                .<Integer, String>as(inputTopicRepartitionedName)\n+                .withNumberOfPartitions(inputTopicNumberOfPartitions);\n+\n+        final Repartitioned<Integer, String> topicBRepartitioned = Repartitioned\n+                .<Integer, String>as(topicBRepartitionedName)\n+                .withNumberOfPartitions(topicBNumberOfPartitions);\n+\n+        final KStream<Integer, String> topicBStream = builder\n+                .stream(topicB, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(topicBRepartitioned);\n+\n+        builder.stream(inputTopic, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(inputTopicRepartitioned)\n+                .join(topicBStream, (value1, value2) -> value2, JoinWindows.of(Duration.ofSeconds(10)))\n+                .to(outputTopic);\n+\n+        final Map<String, Integer> repartitionTopicsWithNumOfPartitions = Utils.mkMap(\n+                Utils.mkEntry(toRepartitionTopicName(topicBRepartitionedName), topicBNumberOfPartitions),\n+                Utils.mkEntry(toRepartitionTopicName(inputTopicRepartitionedName), inputTopicNumberOfPartitions)\n+        );\n+\n+        try {\n+            builder.build(props);\n+            Assert.fail();\n+        } catch (final TopologyException t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxMzk3NQ==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418813975", "createdAt": "2020-05-02T01:25:15Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamRepartitionTest.java", "diffHunk": "@@ -104,6 +114,54 @@ public void shouldInvokePartitionerWhenSet() {\n         verify(streamPartitionerMock);\n     }\n \n+    @Test\n+    public void shouldThrowAnExceptionWhenNumberOfPartitionsOfRepartitionOperationsDoNotMatchWhenJoining() {\n+        final String topicB = \"topic-b\";\n+        final String outputTopic = \"topic-output\";\n+        final String topicBRepartitionedName = \"topic-b-scale-up\";\n+        final String inputTopicRepartitionedName = \"input-topic-scale-up\";\n+        final int topicBNumberOfPartitions = 2;\n+        final int inputTopicNumberOfPartitions = 4;\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final Repartitioned<Integer, String> inputTopicRepartitioned = Repartitioned\n+                .<Integer, String>as(inputTopicRepartitionedName)\n+                .withNumberOfPartitions(inputTopicNumberOfPartitions);\n+\n+        final Repartitioned<Integer, String> topicBRepartitioned = Repartitioned\n+                .<Integer, String>as(topicBRepartitionedName)\n+                .withNumberOfPartitions(topicBNumberOfPartitions);\n+\n+        final KStream<Integer, String> topicBStream = builder\n+                .stream(topicB, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(topicBRepartitioned);\n+\n+        builder.stream(inputTopic, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(inputTopicRepartitioned)\n+                .join(topicBStream, (value1, value2) -> value2, JoinWindows.of(Duration.ofSeconds(10)))\n+                .to(outputTopic);\n+\n+        final Map<String, Integer> repartitionTopicsWithNumOfPartitions = Utils.mkMap(\n+                Utils.mkEntry(toRepartitionTopicName(topicBRepartitionedName), topicBNumberOfPartitions),\n+                Utils.mkEntry(toRepartitionTopicName(inputTopicRepartitionedName), inputTopicNumberOfPartitions)\n+        );\n+\n+        try {\n+            builder.build(props);\n+            Assert.fail();\n+        } catch (final TopologyException t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NDE4OQ=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg2OTcxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoxMjo0MFrOGPYreQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMToyNzozN1rOGPab3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjE2OQ==", "bodyText": "If I understand this code correct, copartitionGroups take the list of co-partitioned nodes (ie, processor names -> copartitionSourceGroups) and replaces each processor name (each processor should be a source-processor?) with the corresponding source topic name?\nIf yes, a comment might be helpful. Also, name rename copartitionGroups -> allCopartitionedSourceTopics ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786169", "createdAt": "2020-05-02T00:12:40Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNDk0Mw==", "bodyText": "Makes total sense. thanks for your advice.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418814943", "createdAt": "2020-05-02T01:27:37Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjE2OQ=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg3MDMwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoxMzoxMlrOGPYryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMToyODoyMFrOGPac8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjI1MQ==", "bodyText": "rename node -> sourceNodeName ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786251", "createdAt": "2020-05-02T00:13:12Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNTIxNw==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418815217", "createdAt": "2020-05-02T01:28:20Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjI1MQ=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg3NDcyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoxNjo0NlrOGPYuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMToyODo1OVrOGPaeAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Njg2OQ==", "bodyText": "What is topicPartNum? Please avoid abbreviation; make the code hard to read?\nShould this be numberOfPartitionsPerTopic ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786869", "createdAt": "2020-05-02T00:16:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNTQ5MA==", "bodyText": "Done and thanks for your advice.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418815490", "createdAt": "2020-05-02T01:28:59Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Njg2OQ=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg3NjExOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoxODozN1rOGPYvFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMTozMToxM1rOGPah1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzA5Mw==", "bodyText": "Why do we add all the partition numbers for all internal topics here? Seems redundant to the step from above?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787093", "createdAt": "2020-05-02T00:18:37Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNjQ3MA==", "bodyText": "Sorry, this is the side effects of unreasonable rebase operation.\nI have removed this redundant part", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418816470", "createdAt": "2020-05-02T01:31:13Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzA5Mw=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg4MDEwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoyMTo0N1rOGPYxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMTozMjo1NVrOGPakUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzYzNA==", "bodyText": "How can we be sure that partNums is not empty? If empty, next() would throw.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787634", "createdAt": "2020-05-02T00:21:47Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgxNzEwNQ==", "bodyText": "done", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418817105", "createdAt": "2020-05-02T01:32:55Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzYzNA=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTg4MDU0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoyMjowN1rOGPYxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMTo0MTozM1rOGPaxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzY4Nw==", "bodyText": "Should this be !partNum.equals(first) ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787687", "createdAt": "2020-05-02T00:22:07Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();\n+                for (final Integer partNum : partNums) {\n+                    if (partNum.equals(first)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODgyMDUwMA==", "bodyText": "Done. Sorry for this low-level mistake.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418820500", "createdAt": "2020-05-02T01:41:33Z", "author": {"login": "zhaohaidao"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();\n+                for (final Integer partNum : partNums) {\n+                    if (partNum.equals(first)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzY4Nw=="}, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2785, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}