{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDY0MTkz", "number": 8147, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1MTo0NVrODhvX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMDoxNzoyM1rODiHSTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA1Nzc3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1MTo0NlrOFspRyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1MTo0NlrOFspRyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1Nzk2Mg==", "bodyText": "This is just a side thing that's been bugging me. There actual changes contained in this PR are pretty small, and I'll point them all out specifically in the comments. But I can remove these method renamings if they create too much noise in the diff to review", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382357962", "createdAt": "2020-02-21T01:51:46Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -789,7 +789,10 @@ private int putNodeGroupName(final String nodeName,\n         return newNodeGroupId;\n     }\n \n-    public synchronized ProcessorTopology build() {\n+    /**\n+     * @return the full topology minus any global state\n+     */\n+    public synchronized ProcessorTopology buildTopology() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA2MTI1OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NDowNFrOFspUBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NDowNFrOFspUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODUzNQ==", "bodyText": "There was actually a bug in this condition: the storeToChangelogTopic map actually corresponds to the entire topology, not just this task's subtopology. See changes in ProcessorTopology above", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382358535", "createdAt": "2020-02-21T01:54:04Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -456,9 +456,9 @@ StandbyTask createTask(final Consumer<byte[], byte[]> consumer,\n             final String logPrefix = threadIdPrefix + String.format(\"%s [%s] \", \"standby-task\", taskId);\n             final LogContext logContext = new LogContext(logPrefix);\n \n-            final ProcessorTopology topology = builder.build(taskId.topicGroupId);\n+            final ProcessorTopology topology = builder.buildSubtopology(taskId.topicGroupId);\n \n-            if (!topology.stateStores().isEmpty() && !topology.storeToChangelogTopic().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA2MjgxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NToxMVrOFspU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NToxMVrOFspU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODc3Mw==", "bodyText": "This is the main change; only loop over the stateful and changelog-enabled tasks when assigning standbys", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382358773", "createdAt": "2020-02-21T01:55:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "diffHunk": "@@ -54,7 +60,7 @@ public void assign(final int numStandbyReplicas) {\n     }\n \n     private void assignStandby(final int numStandbyReplicas) {\n-        for (final TaskId taskId : taskIds) {\n+        for (final TaskId taskId : standbyTaskIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA2NzA5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NzozOVrOFspXaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMjozMjowNlrOFtJDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1OTQwMA==", "bodyText": "This is the one line I'd like some feedback on in particular; if I understand the TaskPairs class/purpose correctly, we should change the maxPairs to use the number of (distinct) standby tasks, which will always be smaller than the number of total tasks. ie there may be some \"unpaired\" active tasks, but that's fine since they won't have standbys to begin with", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382359400", "createdAt": "2020-02-21T01:57:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "diffHunk": "@@ -35,15 +35,21 @@\n \n     private static final Logger log = LoggerFactory.getLogger(StickyTaskAssignor.class);\n     private final Map<ID, ClientState> clients;\n-    private final Set<TaskId> taskIds;\n+    private final Set<TaskId> allTaskIds;\n+    private final Set<TaskId> standbyTaskIds;\n     private final Map<TaskId, ID> previousActiveTaskAssignment = new HashMap<>();\n     private final Map<TaskId, Set<ID>> previousStandbyTaskAssignment = new HashMap<>();\n     private final TaskPairs taskPairs;\n \n-    public StickyTaskAssignor(final Map<ID, ClientState> clients, final Set<TaskId> taskIds) {\n+    public StickyTaskAssignor(final Map<ID, ClientState> clients,\n+                              final Set<TaskId> allTaskIds,\n+                              final Set<TaskId> standbyTaskIds) {\n         this.clients = clients;\n-        this.taskIds = taskIds;\n-        taskPairs = new TaskPairs(taskIds.size() * (taskIds.size() - 1) / 2);\n+        this.allTaskIds = allTaskIds;\n+        this.standbyTaskIds = standbyTaskIds;\n+\n+        final int maxPairs = standbyTaskIds.size() * (standbyTaskIds.size() - 1) / 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MTIyNg==", "bodyText": "The taskPairs is just use as a heuristic to avoid having (active-1, standby-2) and (active-2, standby-1) since if these two instances failed at the same time we lose both tasks: having as large num.pairs as possible means that such case would not likely happen. So if an active task does not have a corresponding standby, it would still appear in some pairs, not sure if that means your new math is correct or not? E.g. let's say we have three tasks A, B, C and A does not have standby while others do have two (num.replicas == 2). An assignment of\n(active-A, standby-B, standby-C), (active-B, standby-C), (active-C, standby-B)\nwould still generates three pairs AB, AC, BC, right?\nIn any ways, the maxPairs is just used for initializing the hash-set and decide whether we can exit early, so I think setting it to larger values would not matter to much.", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382761226", "createdAt": "2020-02-21T19:21:42Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "diffHunk": "@@ -35,15 +35,21 @@\n \n     private static final Logger log = LoggerFactory.getLogger(StickyTaskAssignor.class);\n     private final Map<ID, ClientState> clients;\n-    private final Set<TaskId> taskIds;\n+    private final Set<TaskId> allTaskIds;\n+    private final Set<TaskId> standbyTaskIds;\n     private final Map<TaskId, ID> previousActiveTaskAssignment = new HashMap<>();\n     private final Map<TaskId, Set<ID>> previousStandbyTaskAssignment = new HashMap<>();\n     private final TaskPairs taskPairs;\n \n-    public StickyTaskAssignor(final Map<ID, ClientState> clients, final Set<TaskId> taskIds) {\n+    public StickyTaskAssignor(final Map<ID, ClientState> clients,\n+                              final Set<TaskId> allTaskIds,\n+                              final Set<TaskId> standbyTaskIds) {\n         this.clients = clients;\n-        this.taskIds = taskIds;\n-        taskPairs = new TaskPairs(taskIds.size() * (taskIds.size() - 1) / 2);\n+        this.allTaskIds = allTaskIds;\n+        this.standbyTaskIds = standbyTaskIds;\n+\n+        final int maxPairs = standbyTaskIds.size() * (standbyTaskIds.size() - 1) / 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1OTQwMA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODUwOA==", "bodyText": "Yeah, I think it should still be based off of allTasks.size() -- I thought only active-standby pairs count but it's actually any unique/new pair. I'll put it back", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382878508", "createdAt": "2020-02-22T02:32:06Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignor.java", "diffHunk": "@@ -35,15 +35,21 @@\n \n     private static final Logger log = LoggerFactory.getLogger(StickyTaskAssignor.class);\n     private final Map<ID, ClientState> clients;\n-    private final Set<TaskId> taskIds;\n+    private final Set<TaskId> allTaskIds;\n+    private final Set<TaskId> standbyTaskIds;\n     private final Map<TaskId, ID> previousActiveTaskAssignment = new HashMap<>();\n     private final Map<TaskId, Set<ID>> previousStandbyTaskAssignment = new HashMap<>();\n     private final TaskPairs taskPairs;\n \n-    public StickyTaskAssignor(final Map<ID, ClientState> clients, final Set<TaskId> taskIds) {\n+    public StickyTaskAssignor(final Map<ID, ClientState> clients,\n+                              final Set<TaskId> allTaskIds,\n+                              final Set<TaskId> standbyTaskIds) {\n         this.clients = clients;\n-        this.taskIds = taskIds;\n-        taskPairs = new TaskPairs(taskIds.size() * (taskIds.size() - 1) / 2);\n+        this.allTaskIds = allTaskIds;\n+        this.standbyTaskIds = standbyTaskIds;\n+\n+        final int maxPairs = standbyTaskIds.size() * (standbyTaskIds.size() - 1) / 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1OTQwMA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzI4ODMwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozMzo1MlrOFsraSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozMzo1MlrOFsraSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MjkwNw==", "bodyText": "We need to keep track of which tasks have optimized source tables, since they are marked as loggingDisabled", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382392907", "createdAt": "2020-02-21T04:33:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -113,6 +113,9 @@\n \n     private final QuickUnion<String> nodeGrouper = new QuickUnion<>();\n \n+    // state stores whose source topics are reused as their changelog\n+    private final Set<String> optimizedSourceTables = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxMDEzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MDozNFrOFsrnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1ODoxNlrOFtBP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjIxMw==", "bodyText": "This is a bit misleading, since it will (and should) return true for optimized source KTables, which are technically marked as loggingDisabled -- as always, improved naming suggestions are welcome", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382396213", "createdAt": "2020-02-21T04:50:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -94,6 +92,15 @@ boolean isRepartitionTopic(final String topic) {\n         return repartitionTopics.contains(topic);\n     }\n \n+    boolean hasStateWithLoggingEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MDcxNg==", "bodyText": "This is a good find. How about hasStateWithChangelogs?", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382750716", "createdAt": "2020-02-21T18:58:16Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -94,6 +92,15 @@ boolean isRepartitionTopic(final String topic) {\n         return repartitionTopics.contains(topic);\n     }\n \n+    boolean hasStateWithLoggingEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjIxMw=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU5NjYyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowOToxMlrOFtBjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMjoxMjoyOFrOFtI9eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTcyNw==", "bodyText": "I thought about an alternative idea here and just leave it to your call whether you like it or not: I think we can modify line 1047 above to only if (stateFactory.users().contains(node)), since the storeToChangelogTopic should contain the source-changelog topics already, so we can just add it to the stateChangelogTopics of the TopicsInfo.\nThen, in StreamsPartitionAssignor, before prepareTopic(changelogTopicMetadata); we only prepare the topics as changelog-topics minus source-topics. In this way we do not need this flag either.\nMy rationale is that this is more consistent with the name stateChangelogTopics (a source-changelog topic should be included in this map, as well as in source-topics, we just need to let the partition-assignor to be aware of the possible overlapping).", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382755727", "createdAt": "2020-02-21T19:09:12Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1038,6 +1053,9 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n                                 createChangelogTopicConfig(stateFactory, topicName);\n                             stateChangelogTopics.put(topicName, internalTopicConfig);\n                         }\n+                        hasStateToRestore = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MzY4MA==", "bodyText": "Nice idea, that lets us simplify the special handling for optimized source KTables", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382853680", "createdAt": "2020-02-21T23:32:46Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1038,6 +1053,9 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n                                 createChangelogTopicConfig(stateFactory, topicName);\n                             stateChangelogTopics.put(topicName, internalTopicConfig);\n                         }\n+                        hasStateToRestore = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTcyNw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2OTU4NA==", "bodyText": "Somehow one of my comment was lost... I also comment that hasStateWithChangelogs can then be implemented as ! stateChangelogTopics.empty().", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382869584", "createdAt": "2020-02-22T01:01:51Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1038,6 +1053,9 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n                                 createChangelogTopicConfig(stateFactory, topicName);\n                             stateChangelogTopics.put(topicName, internalTopicConfig);\n                         }\n+                        hasStateToRestore = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTcyNw=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3NzA0OA==", "bodyText": "No worries, I had the same idea and simplified the whole thing. Decided to add a public method to TopicsInfo to sift out any optimized source tables rather than add that logic directly to the StreamsPartitionAssignor (which is complicated enough as is)", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382877048", "createdAt": "2020-02-22T02:12:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1038,6 +1053,9 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n                                 createChangelogTopicConfig(stateFactory, topicName);\n                             stateChangelogTopics.put(topicName, internalTopicConfig);\n                         }\n+                        hasStateToRestore = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTcyNw=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk3NTUwOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwMDoxNzoyM1rOFtNh7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTo1NTo0MFrOFtt08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MTkxOA==", "bodyText": "nit: the 20 here means version 2.0, since we mistakenly made a compatible breaking change in 2.0 and this test is specifically for that. So let's just keep the suffix.", "url": "https://github.com/apache/kafka/pull/8147#discussion_r382951918", "createdAt": "2020-02-23T00:17:23Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -365,13 +365,13 @@ public void shouldNotMaterializeStoresIfNotRequired() {\n         builder.table(topic, Materialized.with(Serdes.Long(), Serdes.String()));\n \n         final ProcessorTopology topology =\n-            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n+            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n \n         assertThat(topology.stateStores().size(), equalTo(0));\n     }\n \n     @Test\n-    public void shouldReuseSourceTopicAsChangelogsWithOptimization20() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MTA3NQ==", "bodyText": "My bad, I thought it was a typo", "url": "https://github.com/apache/kafka/pull/8147#discussion_r383481075", "createdAt": "2020-02-24T19:55:40Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -365,13 +365,13 @@ public void shouldNotMaterializeStoresIfNotRequired() {\n         builder.table(topic, Materialized.with(Serdes.Long(), Serdes.String()));\n \n         final ProcessorTopology topology =\n-            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n+            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n \n         assertThat(topology.stateStores().size(), equalTo(0));\n     }\n \n     @Test\n-    public void shouldReuseSourceTopicAsChangelogsWithOptimization20() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MTkxOA=="}, "originalCommit": null, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4064, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}