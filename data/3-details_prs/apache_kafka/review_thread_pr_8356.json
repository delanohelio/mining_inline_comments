{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODg1NjU1", "number": 8356, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzowOFrODtQBEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzowOFrODtQBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc0OTMxOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzowOFrOF-kXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoxMDoyN1rOF-rZ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTg4Ng==", "bodyText": "req: Please keep this test and do only remove the following part (and of course the parts that become obsolete):\nStreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            TASK_LEVEL_GROUP,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );", "url": "https://github.com/apache/kafka/pull/8356#discussion_r401151886", "createdAt": "2020-03-31T19:13:08Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java", "diffHunk": "@@ -298,41 +297,4 @@ public void shouldGetSkipRecordSensor() {\n         assertThat(sensor, is(expectedSensor));\n     }\n \n-    @Test\n-    public void shouldGetCommitOverTasksSensor() {\n-        final String operation = \"commit\";\n-        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n-        final String totalDescription =\n-            \"The total number of calls to commit over all tasks assigned to one stream thread\";\n-        final String rateDescription =\n-            \"The average per-second number of calls to commit over all tasks assigned to one stream thread\";\n-        final String avgLatencyDescription =\n-            \"The average commit latency over all tasks assigned to one stream thread\";\n-        final String maxLatencyDescription =\n-            \"The maximum commit latency over all tasks assigned to one stream thread\";\n-        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.DEBUG)).andReturn(expectedSensor);\n-        expect(streamsMetrics.taskLevelTagMap(THREAD_ID, ROLLUP_VALUE)).andReturn(tagMap);\n-        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n-            expectedSensor,\n-            TASK_LEVEL_GROUP,\n-            tagMap,\n-            operation,\n-            rateDescription,\n-            totalDescription\n-        );\n-        StreamsMetricsImpl.addAvgAndMaxToSensor(\n-            expectedSensor,\n-            TASK_LEVEL_GROUP,\n-            tagMap,\n-            operationLatency,\n-            avgLatencyDescription,\n-            maxLatencyDescription\n-        );\n-        replay(StreamsMetricsImpl.class, streamsMetrics);\n-\n-        final Sensor sensor = ThreadMetrics.commitOverTasksSensor(THREAD_ID, streamsMetrics);\n-\n-        verify(StreamsMetricsImpl.class, streamsMetrics);\n-        assertThat(sensor, is(expectedSensor));\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b69f3abe847fd179e7bb203a7dd019f7e25effb6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2NzE2MA==", "bodyText": "Ack. Good call.", "url": "https://github.com/apache/kafka/pull/8356#discussion_r401267160", "createdAt": "2020-03-31T23:10:27Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java", "diffHunk": "@@ -298,41 +297,4 @@ public void shouldGetSkipRecordSensor() {\n         assertThat(sensor, is(expectedSensor));\n     }\n \n-    @Test\n-    public void shouldGetCommitOverTasksSensor() {\n-        final String operation = \"commit\";\n-        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n-        final String totalDescription =\n-            \"The total number of calls to commit over all tasks assigned to one stream thread\";\n-        final String rateDescription =\n-            \"The average per-second number of calls to commit over all tasks assigned to one stream thread\";\n-        final String avgLatencyDescription =\n-            \"The average commit latency over all tasks assigned to one stream thread\";\n-        final String maxLatencyDescription =\n-            \"The maximum commit latency over all tasks assigned to one stream thread\";\n-        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.DEBUG)).andReturn(expectedSensor);\n-        expect(streamsMetrics.taskLevelTagMap(THREAD_ID, ROLLUP_VALUE)).andReturn(tagMap);\n-        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n-            expectedSensor,\n-            TASK_LEVEL_GROUP,\n-            tagMap,\n-            operation,\n-            rateDescription,\n-            totalDescription\n-        );\n-        StreamsMetricsImpl.addAvgAndMaxToSensor(\n-            expectedSensor,\n-            TASK_LEVEL_GROUP,\n-            tagMap,\n-            operationLatency,\n-            avgLatencyDescription,\n-            maxLatencyDescription\n-        );\n-        replay(StreamsMetricsImpl.class, streamsMetrics);\n-\n-        final Sensor sensor = ThreadMetrics.commitOverTasksSensor(THREAD_ID, streamsMetrics);\n-\n-        verify(StreamsMetricsImpl.class, streamsMetrics);\n-        assertThat(sensor, is(expectedSensor));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTg4Ng=="}, "originalCommit": {"oid": "b69f3abe847fd179e7bb203a7dd019f7e25effb6"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3095, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}