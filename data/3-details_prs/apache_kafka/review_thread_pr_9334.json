{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjg5NDU3", "number": 9334, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowMzoyN1rOEnKI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODozMToxNlrOEnK0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDk2MDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowMzoyN1rOHXmgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOToxMzo1N1rOHX7pAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEyMQ==", "bodyText": "Couldn't we just use error(message, e)?", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494510121", "createdAt": "2020-09-24T18:03:27Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -69,16 +71,26 @@ object TopicCommand extends Logging {\n       else if (opts.hasDeleteOption)\n         topicService.deleteTopic(opts)\n     } catch {\n+      case e: ExecutionException =>\n+        if (e.getCause != null)\n+          printException(e.getCause)\n+        else\n+          printException(e)\n+        exitCode = 1\n       case e: Throwable =>\n-        println(\"Error while executing topic command : \" + e.getMessage)\n-        error(Utils.stackTrace(e))\n+        printException(e)\n         exitCode = 1\n     } finally {\n       topicService.close()\n       Exit.exit(exitCode)\n     }\n   }\n \n+  private def printException(e: Throwable): Unit = {\n+    println(\"Error while executing topic command : \" + e.getMessage)\n+    error(Utils.stackTrace(e))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxNTE2OA==", "bodyText": "Do you mean using error(message, e) to replace both println and error? I think that we are using 'printlnhere in order to print the message to stdout without any logger related stuff and regardless of how the logger is configured. Changing to usingerror(message, e)would break this and potentially break existing application due to introducing the logger related stuff for that message. I think that we should keepprintln` here.\nHowever, I wonder if using error is appropriate here as it basically prints a stacktrace for every errors. The UX does not look good. Would it make sense to use debug instead? The message of the exception is printed anyway and I don't think that the stacktrace provides much to regular users. WDYT?", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494815168", "createdAt": "2020-09-25T07:59:23Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -69,16 +71,26 @@ object TopicCommand extends Logging {\n       else if (opts.hasDeleteOption)\n         topicService.deleteTopic(opts)\n     } catch {\n+      case e: ExecutionException =>\n+        if (e.getCause != null)\n+          printException(e.getCause)\n+        else\n+          printException(e)\n+        exitCode = 1\n       case e: Throwable =>\n-        println(\"Error while executing topic command : \" + e.getMessage)\n-        error(Utils.stackTrace(e))\n+        printException(e)\n         exitCode = 1\n     } finally {\n       topicService.close()\n       Exit.exit(exitCode)\n     }\n   }\n \n+  private def printException(e: Throwable): Unit = {\n+    println(\"Error while executing topic command : \" + e.getMessage)\n+    error(Utils.stackTrace(e))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEyMQ=="}, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgzNzU1Ng==", "bodyText": "Sorry, I should have been more clear. I just meant, why do we call Utils.stackTrace(e)) when error(message, e) gives you a stack trace for free. In terms of changing from error to debug, I think we include stack track in other commands. But each command seems to use something different. ConfigCommand, for example, doesn't print stacktrace for config exceptions. It logs both the error message and stacktrace to stderr. AclCommand prints for everything to stdout. Let's just keep error for now and maybe open a JIRA to improve and make tools consistent later?", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494837556", "createdAt": "2020-09-25T08:40:20Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -69,16 +71,26 @@ object TopicCommand extends Logging {\n       else if (opts.hasDeleteOption)\n         topicService.deleteTopic(opts)\n     } catch {\n+      case e: ExecutionException =>\n+        if (e.getCause != null)\n+          printException(e.getCause)\n+        else\n+          printException(e)\n+        exitCode = 1\n       case e: Throwable =>\n-        println(\"Error while executing topic command : \" + e.getMessage)\n-        error(Utils.stackTrace(e))\n+        printException(e)\n         exitCode = 1\n     } finally {\n       topicService.close()\n       Exit.exit(exitCode)\n     }\n   }\n \n+  private def printException(e: Throwable): Unit = {\n+    println(\"Error while executing topic command : \" + e.getMessage)\n+    error(Utils.stackTrace(e))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEyMQ=="}, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1NjQ1MQ==", "bodyText": "That's a very good question. I guess that we did so in order to just print out the stacktrace without the message. Otherwise, we would have the error message printed out by the println, followed by the same message printed out by logger, followed by the stacktrace. Having the message twice is not necessary. I had a quick look at other commands and we do so everywhere.\nI will open a JIRA to make tools more consistent. Good idea.", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494856451", "createdAt": "2020-09-25T09:13:57Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -69,16 +71,26 @@ object TopicCommand extends Logging {\n       else if (opts.hasDeleteOption)\n         topicService.deleteTopic(opts)\n     } catch {\n+      case e: ExecutionException =>\n+        if (e.getCause != null)\n+          printException(e.getCause)\n+        else\n+          printException(e)\n+        exitCode = 1\n       case e: Throwable =>\n-        println(\"Error while executing topic command : \" + e.getMessage)\n-        error(Utils.stackTrace(e))\n+        printException(e)\n         exitCode = 1\n     } finally {\n       topicService.close()\n       Exit.exit(exitCode)\n     }\n   }\n \n+  private def printException(e: Throwable): Unit = {\n+    println(\"Error while executing topic command : \" + e.getMessage)\n+    error(Utils.stackTrace(e))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEyMQ=="}, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTA2NzkzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODozMDoyOFrOHXnkDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzo1MToxMlrOHX42kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNzUwMw==", "bodyText": "May be worth importing org.mockito.Mockito._ and  org.mockito.ArgumentMatchers._ to avoid repeating the class name everywhere.", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494527503", "createdAt": "2020-09-24T18:30:28Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -844,4 +851,72 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n     assertEquals(2, rows.size)\n     rows(0).startsWith(s\"Topic:$testTopicName\\tPartitionCount:1\")\n   }\n+\n+  @Test\n+  def testCreateTopicDoesNotRetryThrottlingQuotaExceededException(): Unit = {\n+    val adminClient = Mockito.mock(classOf[Admin])\n+    val topicService = AdminClientTopicService(adminClient)\n+\n+    val result = AdminClientTestUtils.createTopicsResult(testTopicName, Errors.THROTTLING_QUOTA_EXCEEDED.exception())\n+    Mockito.when(adminClient.createTopics(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMDc2OQ==", "bodyText": "That makes sense. I had to introduce an alias for ArgumentMatchers.eq to not conflict with eq. I went with eqThat to remain inline with argThat.", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494810769", "createdAt": "2020-09-25T07:51:12Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -844,4 +851,72 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n     assertEquals(2, rows.size)\n     rows(0).startsWith(s\"Topic:$testTopicName\\tPartitionCount:1\")\n   }\n+\n+  @Test\n+  def testCreateTopicDoesNotRetryThrottlingQuotaExceededException(): Unit = {\n+    val adminClient = Mockito.mock(classOf[Admin])\n+    val topicService = AdminClientTopicService(adminClient)\n+\n+    val result = AdminClientTestUtils.createTopicsResult(testTopicName, Errors.THROTTLING_QUOTA_EXCEEDED.exception())\n+    Mockito.when(adminClient.createTopics(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNzUwMw=="}, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTA3MzIwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODozMToxNlrOHXnnfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODozMToxNlrOHXnnfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyODM4MA==", "bodyText": "We could just use Optional.empty instead of creating in Scala and converting?", "url": "https://github.com/apache/kafka/pull/9334#discussion_r494528380", "createdAt": "2020-09-24T18:31:16Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -844,4 +851,72 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n     assertEquals(2, rows.size)\n     rows(0).startsWith(s\"Topic:$testTopicName\\tPartitionCount:1\")\n   }\n+\n+  @Test\n+  def testCreateTopicDoesNotRetryThrottlingQuotaExceededException(): Unit = {\n+    val adminClient = Mockito.mock(classOf[Admin])\n+    val topicService = AdminClientTopicService(adminClient)\n+\n+    val result = AdminClientTestUtils.createTopicsResult(testTopicName, Errors.THROTTLING_QUOTA_EXCEEDED.exception())\n+    Mockito.when(adminClient.createTopics(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(result)\n+\n+    assertThrows(classOf[ThrottlingQuotaExceededException],\n+      () => topicService.createTopic(new TopicCommandOptions(Array(\"--topic\", testTopicName))))\n+\n+    val expectedNewTopic = new NewTopic(testTopicName, Option.empty[Integer].asJava, Option.empty[java.lang.Short].asJava)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abefd506b997f414227fa57fe83a07bd557dfb46"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1864, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}