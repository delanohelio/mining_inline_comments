{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzMzOTgx", "number": 9566, "title": "KAFKA-10618: Update to Uuid class", "bodyText": "As decided in KIP-516, the UUID class has been named Uuid. This PR changes all instances of org.apache.kafka.common.UUID to org.apache.kafka.common.Uuid.\nIt also modifies the Uuid class so that it no longer wraps a java.util.UUID object. Now it simply stores two longs.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-11-05T20:56:44Z", "url": "https://github.com/apache/kafka/pull/9566", "merged": true, "mergeCommit": {"oid": "28c57b273a3620c18be0bba6d5f74f981d9ef47d"}, "closed": true, "closedAt": "2020-11-18T08:58:21Z", "author": {"login": "jolshan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZor9zAH2gAyNTE2MzMzOTgxOjEzMjhmNmU3Y2VhNWE0YWQzMWZhMGMwZTIwNjhkMzYzYzdjZjIzMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddPS5FgFqTUzMTk1NTM1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1328f6e7cea5a4ad31fa0c0e2068d363c7cf2312", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/1328f6e7cea5a4ad31fa0c0e2068d363c7cf2312", "committedDate": "2020-11-05T20:49:34Z", "message": "Updated Uuid class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/cbca0c17dc5e49918396dadb2797cdc7b4ceed3c", "committedDate": "2020-11-06T00:59:13Z", "message": "Fix checkstyle issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNTI2NDA5", "url": "https://github.com/apache/kafka/pull/9566#pullrequestreview-530526409", "createdAt": "2020-11-14T01:47:36Z", "commit": {"oid": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMTo0NzozNlrOHzF7kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMTo0ODo0MFrOHzF7-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjU5NQ==", "bodyText": "Should we update the method name too?", "url": "https://github.com/apache/kafka/pull/9566#discussion_r523336595", "createdAt": "2020-11-14T01:47:36Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Struct.java", "diffHunk": "@@ -266,12 +266,12 @@ public Long getLong(String name) {\n         return (Long) get(name);\n     }\n \n-    public UUID getUUID(BoundField field) {\n-        return (UUID) get(field);\n+    public Uuid getUUID(BoundField field) {\n+        return (Uuid) get(field);\n     }\n \n-    public UUID getUUID(String name) {\n-        return (UUID) get(name);\n+    public Uuid getUUID(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjY5OQ==", "bodyText": "Isn't it better to keep UUID in javadoc when we're referring to the concept?", "url": "https://github.com/apache/kafka/pull/9566#discussion_r523336699", "createdAt": "2020-11-14T01:48:40Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/Uuid.java", "diffHunk": "@@ -20,101 +20,100 @@\n import java.util.Base64;\n \n /**\n- * This class defines an immutable universally unique identifier (UUID). It represents a 128-bit value.\n- * More specifically, the random UUIDs generated by this class are variant 2 (Leach-Salz) version 4 UUIDs.\n- * This is the same type of UUID as the ones generated by java.util.UUID except that the toString() method prints\n+ * This class defines an immutable universally unique identifier (Uuid). It represents a 128-bit value.\n+ * More specifically, the random Uuids generated by this class are variant 2 (Leach-Salz) version 4 Uuids.\n+ * This is the same type of Uuid as the ones generated by java.util.UUID. The toString() method prints\n  * using the base64 string encoding. Likewise, the fromString method expects a base64 string encoding.\n  */\n-public class UUID {\n+public class Uuid {\n \n     private static final java.util.UUID SENTINEL_ID_INTERNAL = new java.util.UUID(0L, 1L);\n \n     /**\n-     * A UUID that represents a null or empty UUID. Will never be returned by the randomUUID method\n+     * A Uuid that represents a null or empty Uuid. Will never be returned by the randomUuid method.\n      */\n-    public static final UUID ZERO_UUID = new UUID(new java.util.UUID(0L, 0L));\n+    public static final Uuid ZERO_UUID = new Uuid(0L, 0L);\n     private static final java.util.UUID ZERO_ID_INTERNAL = new java.util.UUID(0L, 0L);\n \n-    private final java.util.UUID uuid;\n+    private final long mostSignificantBits;\n+    private final long leastSignificantBits;\n \n     /**\n-     * Constructs a 128-bit type 4 UUID where the first long represents the the most significant 64 bits\n+     * Constructs a 128-bit type 4 Uuid where the first long represents the the most significant 64 bits\n      * and the second long represents the least significant 64 bits.\n      */\n-    public UUID(long mostSigBits, long leastSigBits) {\n-        this.uuid = new java.util.UUID(mostSigBits, leastSigBits);\n-    }\n-\n-    private UUID(java.util.UUID uuid) {\n-        this.uuid = uuid;\n+    public Uuid(long mostSigBits, long leastSigBits) {\n+        this.mostSignificantBits = mostSigBits;\n+        this.leastSignificantBits = leastSigBits;\n     }\n \n     /**\n-     * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.\n+     * Static factory to retrieve a type 4 (pseudo randomly generated) Uuid.\n      */\n-    public static UUID randomUUID() {\n+    public static Uuid randomUuid() {\n         java.util.UUID uuid = java.util.UUID.randomUUID();\n         while (uuid.equals(SENTINEL_ID_INTERNAL) || uuid.equals(ZERO_ID_INTERNAL)) {\n             uuid = java.util.UUID.randomUUID();\n         }\n-        return new UUID(uuid);\n+        return new Uuid(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());\n     }\n \n     /**\n-     * Returns the most significant bits of the UUID's 128 value.\n+     * Returns the most significant bits of the Uuid's 128 value.\n      */\n     public long getMostSignificantBits() {\n-        return uuid.getMostSignificantBits();\n+        return this.mostSignificantBits;\n     }\n \n     /**\n-     * Returns the least significant bits of the UUID's 128 value.\n+     * Returns the least significant bits of the Uuid's 128 value.\n      */\n     public long getLeastSignificantBits() {\n-        return uuid.getLeastSignificantBits();\n+        return this.leastSignificantBits;\n     }\n \n     /**\n-     * Returns true iff obj is another UUID represented by the same two long values.\n+     * Returns true iff obj is another Uuid represented by the same two long values.\n      */\n     @Override\n     public boolean equals(Object obj) {\n         if ((null == obj) || (obj.getClass() != this.getClass()))\n             return false;\n-        UUID id = (UUID) obj;\n-        return this.getMostSignificantBits() == id.getMostSignificantBits() &&\n-                this.getLeastSignificantBits() == id.getLeastSignificantBits();\n+        Uuid id = (Uuid) obj;\n+        return this.mostSignificantBits == id.mostSignificantBits &&\n+                this.leastSignificantBits == id.leastSignificantBits;\n     }\n \n     /**\n-     * Returns a hash code for this UUID\n+     * Returns a hash code for this Uuid\n      */\n     @Override\n     public int hashCode() {\n-        return uuid.hashCode();\n+        long xor = mostSignificantBits ^ leastSignificantBits;\n+        return (int) (xor >> 32) ^ (int) xor;\n     }\n \n     /**\n-     * Returns a base64 string encoding of the UUID.\n+     * Returns a base64 string encoding of the Uuid.\n      */\n     @Override\n     public String toString() {\n-        return Base64.getUrlEncoder().withoutPadding().encodeToString(getBytesFromUuid(uuid));\n+        return Base64.getUrlEncoder().withoutPadding().encodeToString(getBytesFromUuid());\n     }\n \n     /**\n-     * Creates a UUID based on a base64 string encoding used in the toString() method.\n+     * Creates a Uuid based on a base64 string encoding used in the toString() method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbca0c17dc5e49918396dadb2797cdc7b4ceed3c"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57ebc29297e84f0158160b5c2c857ab2ca474d7", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/a57ebc29297e84f0158160b5c2c857ab2ca474d7", "committedDate": "2020-11-16T16:48:52Z", "message": "Updated javadocs, changed a few more methods from (get,read,write)UUID to (get,read,write)Uuid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792434a5532c4b7a474975787c6027df8b28ac1b", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/792434a5532c4b7a474975787c6027df8b28ac1b", "committedDate": "2020-11-16T16:53:27Z", "message": "Merge branch 'trunk' into KAFKA-10618"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxODg4NjEy", "url": "https://github.com/apache/kafka/pull/9566#pullrequestreview-531888612", "createdAt": "2020-11-16T23:08:31Z", "commit": {"oid": "792434a5532c4b7a474975787c6027df8b28ac1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzowODozMlrOH0agfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzowODozMlrOH0agfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcyMjMwMg==", "bodyText": "Can we add a test that verifies that the hashCode is the same for our Uuid and Java's UUID? Or do we have that already?", "url": "https://github.com/apache/kafka/pull/9566#discussion_r524722302", "createdAt": "2020-11-16T23:08:32Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/UuidTest.java", "diffHunk": "@@ -21,50 +21,50 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n \n-public class UUIDTest {\n+public class UuidTest {\n \n     @Test\n     public void testSignificantBits() {\n-        UUID id = new UUID(34L, 98L);\n+        Uuid id = new Uuid(34L, 98L);\n \n         assertEquals(id.getMostSignificantBits(), 34L);\n         assertEquals(id.getLeastSignificantBits(), 98L);\n     }\n \n     @Test\n-    public void testUUIDEquality() {\n-        UUID id1 = new UUID(12L, 13L);\n-        UUID id2 = new UUID(12L, 13L);\n-        UUID id3 = new UUID(24L, 38L);\n+    public void testUuidEquality() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792434a5532c4b7a474975787c6027df8b28ac1b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23cb2eb02e7a18c24f617678a33441cad64cc5de", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/23cb2eb02e7a18c24f617678a33441cad64cc5de", "committedDate": "2020-11-17T00:55:13Z", "message": "Added tests for hashCode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dc50dd3208abf424c6fc8645c73c2e5597f8ab", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/19dc50dd3208abf424c6fc8645c73c2e5597f8ab", "committedDate": "2020-11-17T00:58:21Z", "message": "Merge branch 'KAFKA-10618' of github.com:jolshan/kafka into KAFKA-10618"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTU1MzU1", "url": "https://github.com/apache/kafka/pull/9566#pullrequestreview-531955355", "createdAt": "2020-11-17T01:30:15Z", "commit": {"oid": "19dc50dd3208abf424c6fc8645c73c2e5597f8ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2709, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}