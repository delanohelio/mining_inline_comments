{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjA2NDg2", "number": 8048, "title": "KAFKA-9509: Fixing flakiness of MirrorConnectorsIntegrationTest.testReplication", "bodyText": "JIRA: https://issues.apache.org/jira/browse/KAFKA-9509\nAs the JIRA indicates, org.apache.kafka.connect.mirror.MirrorConnectorsIntegrationTest.testReplication has shown to be an increasingly flaky test recently. This PR aims to make this test more deterministic. Specifically, the flakiness was due to a timing issue between the tasks not starting up in time for the test to start running. This PR remediates that by introducing a status check after every connector is started up. These status checks include that the connector is found on the connect cluster as well as there are tasks created and up and running for that connector. These checks are introduced before the test starts running so that there is a confidence that the connectors and tasks are started up correctly before the test runs.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-05T21:59:24Z", "url": "https://github.com/apache/kafka/pull/8048", "merged": true, "mergeCommit": {"oid": "4d86b191c0ae39dcdd1e306c68ae0cdaedea1de5"}, "closed": true, "closedAt": "2020-02-07T21:58:23Z", "author": {"login": "skaundinya15"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBdZYzgH2gAyMzcxNjA2NDg2OjM1M2Y1NTAzNzdmZTc2ZjYwZWVjMWZhNTliOWQ0N2NkMDQ3N2I4ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCGnsXgFqTM1NTQ2MTE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/353f550377fe76f60eec1fa59b9d47cd0477b8d5", "committedDate": "2020-02-05T21:54:59Z", "message": "KAFKA-9509: Fixing flaky mm2 integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDgwMDc3", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354080077", "createdAt": "2020-02-05T22:16:42Z", "commit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjo0MlrOFmJGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyMDoxMVrOFmJLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTIyMA==", "bodyText": "Do we need to do these one at a time or could we start all these connectors together and then wait for them to come up? Does it matter?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375539220", "createdAt": "2020-02-05T22:16:42Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ==", "bodyText": "If we let this take a set of connector names, we could test them all at once.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375539801", "createdAt": "2020-02-05T22:18:06Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDAzMQ==", "bodyText": "Could we use TestUtils.waitForCondition? Similarly in waitForTasksToBeUp.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540031", "createdAt": "2020-02-05T22:18:37Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDQ4MQ==", "bodyText": "I think this could be shorter. We don't want to add unnecessarily to build time. maybe 100ms?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540481", "createdAt": "2020-02-05T22:19:40Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ==", "bodyText": "nit: waitForTasksToBeUp -> waitForTasksToStart?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540685", "createdAt": "2020-02-05T22:20:11Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDk4MTYz", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354098163", "createdAt": "2020-02-05T22:53:14Z", "commit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo1MzoxNVrOFmJ-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjo1MzoxNVrOFmJ-xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MzczNA==", "bodyText": "I'd suggest copying and using what we've been using elsewhere to assert that a connector and its tasks are up and running:\nhttps://github.com/apache/kafka/blob/trunk/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java#L324-L337\nIt works fine with the waitForCondition method that accepts a timeout.\nEventually (maybe soon) this type of assertion will go to EmbeddedConnectCluster and will be made available for every Connect integration test. However, I suggest we don't take on this refactoring now and we just copy the method from the test above.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375553734", "createdAt": "2020-02-05T22:53:15Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc207fb76b2479e861265a33a4fe3138e5582f5a", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/fc207fb76b2479e861265a33a4fe3138e5582f5a", "committedDate": "2020-02-05T23:59:15Z", "message": "condesning logic for clarity based on PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d3e754698340627c6882f96cfefb9589d473aa", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/a6d3e754698340627c6882f96cfefb9589d473aa", "committedDate": "2020-02-06T00:00:40Z", "message": "removing extra newline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTMwNDg0", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354130484", "createdAt": "2020-02-06T00:17:24Z", "commit": {"oid": "a6d3e754698340627c6882f96cfefb9589d473aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoxNzoyNFrOFmLn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoxNzoyNFrOFmLn1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MDYzMQ==", "bodyText": "If you need to assert that at least numTasks are running, probably it's safer to use >= here. If you are starting more than 1 tasks, these tasks might start fast enough and you might miss your assertion, e.g. the number will go from 0 to 4. Again assuming that your assertion is that at least the connector and 1 task are running.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375580631", "createdAt": "2020-02-06T00:17:24Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() == numTasks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6d3e754698340627c6882f96cfefb9589d473aa"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5cff8b1f15813712ae7670ad3a1d549a034ac445", "committedDate": "2020-02-06T00:26:39Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTM1MzAw", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354135300", "createdAt": "2020-02-06T00:32:24Z", "commit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDozMjoyNFrOFmL3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDozMjoyNFrOFmL3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg==", "bodyText": "One more comment that I missed.\nisPresent is not perfectly correct here. You'll need to use orElse(false)\nBasically the idea is that this is successful only if it returns true. But if it's Optional.empty() or false then the assertion is not ready yet.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375584652", "createdAt": "2020-02-06T00:32:24Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTM3ODMx", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354137831", "createdAt": "2020-02-06T00:40:23Z", "commit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTQwMjAy", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354140202", "createdAt": "2020-02-06T00:48:25Z", "commit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo0ODoyNVrOFmMHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo0OToyN1rOFmMI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4ODgxNA==", "bodyText": "Unless I'm missing something, we are not actually using the boolean value anywhere. All we do is check if the optional is present. Would it be simpler to just return the boolean directly?\nalso nit: having assert in the name is misleading since there are no assertions. I would suggest isConnectorAndTasksRunning or checkConnectorAndTasksRunning", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375588814", "createdAt": "2020-02-06T00:48:25Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4OTA4Mw==", "bodyText": "Yes, you have to check each task individually, but nothing prevents you from submitting them all at the same time. I am assuming that any overhead here is really associated with task startup time, so this allows for it to be parallelized.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375589083", "createdAt": "2020-02-06T00:49:27Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/4f120fc774ad03ac0463d7d2d737d6807a634d3f", "committedDate": "2020-02-06T01:17:05Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTQ5Nzg4", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354149788", "createdAt": "2020-02-06T01:19:04Z", "commit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d9431335c479054b4cd1b4b27658e32323e073", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/a2d9431335c479054b4cd1b4b27658e32323e073", "committedDate": "2020-02-06T01:27:50Z", "message": "Merge branch 'trunk' into KAFKA-9509"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTUxNTI4", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-354151528", "createdAt": "2020-02-06T01:25:03Z", "commit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNTowNFrOFmMtkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyODoyMlrOFmMwmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODQ4Mg==", "bodyText": "nit: can we make this debug level? Otherwise it will make this test a little spammy.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375598482", "createdAt": "2020-02-06T01:25:04Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() >= numTasks\n+                && info.connector().state().equals(AbstractStatus.State.RUNNING.toString())\n+                && info.tasks().stream().allMatch(s -> s.state().equals(AbstractStatus.State.RUNNING.toString()));\n+            log.info(\"Found connector and tasks running: {}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODg1OQ==", "bodyText": "nit: do we need the numTasks argument since the only caller is passing MIN_TASKS? Alternatively, we could replace info.tasks().size() >= numTasks with !info.tasks().isEmpty() and get rid of MIN_TASKS.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375598859", "createdAt": "2020-02-06T01:26:35Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTI1Ng==", "bodyText": "nit: unneeded newline", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375599256", "createdAt": "2020-02-06T01:28:22Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc23aae47230a82fbad0f00be5cf8ad1422a0edc", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/bc23aae47230a82fbad0f00be5cf8ad1422a0edc", "committedDate": "2020-02-06T01:37:51Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0d2f5409f3cfcfc9b819962150a0fc2213ce35", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/7f0d2f5409f3cfcfc9b819962150a0fc2213ce35", "committedDate": "2020-02-06T17:35:22Z", "message": "fixing checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDYxMTc3", "url": "https://github.com/apache/kafka/pull/8048#pullrequestreview-355461177", "createdAt": "2020-02-07T21:56:43Z", "commit": {"oid": "7f0d2f5409f3cfcfc9b819962150a0fc2213ce35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1753, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}