{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDAzOTg4", "number": 8989, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMDoxMVrOEL2XvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMToyN1rOEL2ZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODYwNjA1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMDoxMVrOGtnu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMDoxMVrOGtnu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDEwMA==", "bodyText": "nit: may as well fix alignment as well", "url": "https://github.com/apache/kafka/pull/8989#discussion_r450490100", "createdAt": "2020-07-06T21:30:11Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -933,7 +983,7 @@ private void verifyWriteRaisesNpe(short version, Message message) throws Excepti\n \n     private void verifyWriteRaisesUve(short version,\n                                       String problemText,\n-                                     Message message) throws Exception {\n+                                     Message message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c2eb6c279688a5e1bd7f57103165be493f7825"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODYwOTU3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMToyN1rOGtnxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjozNToyMFrOGtpNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDY0OQ==", "bodyText": "Should we test the expected behavior for all versions?", "url": "https://github.com/apache/kafka/pull/8989#discussion_r450490649", "createdAt": "2020-07-06T21:31:27Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -218,6 +220,59 @@ public void testOffsetCommitDefaultGroupInstanceId() throws Exception {\n         testAllMessageRoundTripsFromVersion((short) 7, request.get().setGroupInstanceId(instanceId));\n     }\n \n+    @Test\n+    public void testDescribeGroupsRequestVersions() throws Exception {\n+        testAllMessageRoundTrips(new DescribeGroupsRequestData()\n+                .setGroups(Collections.singletonList(\"group\"))\n+                .setIncludeAuthorizedOperations(false));\n+    }\n+\n+    @Test\n+    public void testDescribeGroupsResponseVersions() throws Exception {\n+        DescribedGroupMember baseMember = new DescribedGroupMember()\n+            .setMemberId(memberId);\n+\n+        DescribedGroup baseGroup = new DescribedGroup()\n+                                       .setGroupId(\"group\")\n+                                       .setGroupState(\"Stable\").setErrorCode(Errors.NONE.code())\n+                                       .setMembers(Collections.singletonList(baseMember))\n+                                       .setProtocolType(\"consumer\");\n+        DescribeGroupsResponseData baseResponse = new DescribeGroupsResponseData()\n+                                                  .setGroups(Collections.singletonList(baseGroup));\n+        testAllMessageRoundTrips(baseResponse);\n+\n+        testAllMessageRoundTripsFromVersion((short) 1, baseResponse.setThrottleTimeMs(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c2eb6c279688a5e1bd7f57103165be493f7825"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMDI1Nw==", "bodyText": "We would check for equality only with versions that already introduced the new fields IMHO?", "url": "https://github.com/apache/kafka/pull/8989#discussion_r450510257", "createdAt": "2020-07-06T22:23:00Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -218,6 +220,59 @@ public void testOffsetCommitDefaultGroupInstanceId() throws Exception {\n         testAllMessageRoundTripsFromVersion((short) 7, request.get().setGroupInstanceId(instanceId));\n     }\n \n+    @Test\n+    public void testDescribeGroupsRequestVersions() throws Exception {\n+        testAllMessageRoundTrips(new DescribeGroupsRequestData()\n+                .setGroups(Collections.singletonList(\"group\"))\n+                .setIncludeAuthorizedOperations(false));\n+    }\n+\n+    @Test\n+    public void testDescribeGroupsResponseVersions() throws Exception {\n+        DescribedGroupMember baseMember = new DescribedGroupMember()\n+            .setMemberId(memberId);\n+\n+        DescribedGroup baseGroup = new DescribedGroup()\n+                                       .setGroupId(\"group\")\n+                                       .setGroupState(\"Stable\").setErrorCode(Errors.NONE.code())\n+                                       .setMembers(Collections.singletonList(baseMember))\n+                                       .setProtocolType(\"consumer\");\n+        DescribeGroupsResponseData baseResponse = new DescribeGroupsResponseData()\n+                                                  .setGroups(Collections.singletonList(baseGroup));\n+        testAllMessageRoundTrips(baseResponse);\n+\n+        testAllMessageRoundTripsFromVersion((short) 1, baseResponse.setThrottleTimeMs(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDY0OQ=="}, "originalCommit": {"oid": "a9c2eb6c279688a5e1bd7f57103165be493f7825"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNDI4NQ==", "bodyText": "Then we wouldn't have caught this bug \ud83d\ude09 . The most dangerous aspect of the generated protocols is the down-conversion to older formats since it gets poor test coverage.", "url": "https://github.com/apache/kafka/pull/8989#discussion_r450514285", "createdAt": "2020-07-06T22:35:20Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -218,6 +220,59 @@ public void testOffsetCommitDefaultGroupInstanceId() throws Exception {\n         testAllMessageRoundTripsFromVersion((short) 7, request.get().setGroupInstanceId(instanceId));\n     }\n \n+    @Test\n+    public void testDescribeGroupsRequestVersions() throws Exception {\n+        testAllMessageRoundTrips(new DescribeGroupsRequestData()\n+                .setGroups(Collections.singletonList(\"group\"))\n+                .setIncludeAuthorizedOperations(false));\n+    }\n+\n+    @Test\n+    public void testDescribeGroupsResponseVersions() throws Exception {\n+        DescribedGroupMember baseMember = new DescribedGroupMember()\n+            .setMemberId(memberId);\n+\n+        DescribedGroup baseGroup = new DescribedGroup()\n+                                       .setGroupId(\"group\")\n+                                       .setGroupState(\"Stable\").setErrorCode(Errors.NONE.code())\n+                                       .setMembers(Collections.singletonList(baseMember))\n+                                       .setProtocolType(\"consumer\");\n+        DescribeGroupsResponseData baseResponse = new DescribeGroupsResponseData()\n+                                                  .setGroups(Collections.singletonList(baseGroup));\n+        testAllMessageRoundTrips(baseResponse);\n+\n+        testAllMessageRoundTripsFromVersion((short) 1, baseResponse.setThrottleTimeMs(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDY0OQ=="}, "originalCommit": {"oid": "a9c2eb6c279688a5e1bd7f57103165be493f7825"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}