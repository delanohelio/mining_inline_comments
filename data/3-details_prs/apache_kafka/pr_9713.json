{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjcwMDc2", "number": 9713, "title": "KAFKA-10825 ZK ISR manager", "bodyText": "In an effort to consolidate the ISR write paths, this PR adapts the ZK ISR update into the new AlterIsrManager trait. This will allow us minimize divergence in the ISR update code in Partition.scala.\nThis also removes PartitionStateStore and moves the ISR propagation code to the new ZK ISR manager class", "createdAt": "2020-12-08T19:23:07Z", "url": "https://github.com/apache/kafka/pull/9713", "merged": true, "mergeCommit": {"oid": "d3f19e4bb047338840d380d2253dc92cf56b0a0f"}, "closed": true, "closedAt": "2020-12-21T19:44:03Z", "author": {"login": "mumrah"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiTSRigH2gAyNTM0NjcwMDc2OjExNzZmM2QyY2YwZWQwNTAzNTZkYTcyOTNhZTk2MTYxNTJkMmNjNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoa_eQAH2gAyNTM0NjcwMDc2OjVlYTJjOTRkNzA3YTY1NzQ5ZjVmYTViNGVjZGRiMjBjOTY5YWU1MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1176f3d2cf0ed050356da7293ae9616152d2cc40", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/1176f3d2cf0ed050356da7293ae9616152d2cc40", "committedDate": "2020-12-02T18:58:49Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d089f453385eb4e31d619a70949a8c40c6d1cc", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/83d089f453385eb4e31d619a70949a8c40c6d1cc", "committedDate": "2020-12-02T18:59:13Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04341871df8a1a050dea344676db8c696249128c", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/04341871df8a1a050dea344676db8c696249128c", "committedDate": "2020-12-02T19:05:34Z", "message": "Create small abstraction for marking ISR changes.\n\nThis allows us to update the ISR metrics in ReplicaManager without introducing it\nas a dependency to Partition.\n\nAlso, this change includes updating these metrics for ISR changes done through\nAlterIsr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5e37926af224dce7f41b922da39ea82de365c2", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/7d5e37926af224dce7f41b922da39ea82de365c2", "committedDate": "2020-12-02T19:30:01Z", "message": "Add supporting test code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0851036daa7782ee00c30885707798fa3a4ba2d", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/f0851036daa7782ee00c30885707798fa3a4ba2d", "committedDate": "2020-12-02T20:04:43Z", "message": "fix exhaustive match"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb23eb5d73b5928a5bbdc8fff7300ff27706199", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/fdb23eb5d73b5928a5bbdc8fff7300ff27706199", "committedDate": "2020-12-02T21:59:30Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160f8e0e3035c48a94bbac3fd9a44094678aecf3", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/160f8e0e3035c48a94bbac3fd9a44094678aecf3", "committedDate": "2020-12-02T23:09:19Z", "message": "Don't update the isrChangeSet when using AlterIsr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f44ebed0116e8dae95c331a0475db129d4e4c60", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/8f44ebed0116e8dae95c331a0475db129d4e4c60", "committedDate": "2020-12-02T23:14:25Z", "message": "Revert renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ca2bb4844778ce4fc464612397a543303370d5", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/48ca2bb4844778ce4fc464612397a543303370d5", "committedDate": "2020-12-03T13:04:14Z", "message": "Mark the ISR failure meter on retries as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8693d582e6df3d37cfb6a15bc631ea06a3908157", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/8693d582e6df3d37cfb6a15bc631ea06a3908157", "committedDate": "2020-12-03T13:49:32Z", "message": "Merge branch 'KAFKA-10799-alter-isr-metrics' into tmp-zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ab405d19ad50182561200834e2260c9d1fcee3", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/09ab405d19ad50182561200834e2260c9d1fcee3", "committedDate": "2020-12-03T15:50:49Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cca3cc2ce607fa5a2e6ebb27e1903fd208fbc2a", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/7cca3cc2ce607fa5a2e6ebb27e1903fd208fbc2a", "committedDate": "2020-12-03T15:53:49Z", "message": "Should be IV2, not IV1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d778e83331c28f896c9ff2271e5d65b8fd5eb3", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/97d778e83331c28f896c9ff2271e5d65b8fd5eb3", "committedDate": "2020-12-03T16:06:45Z", "message": "Merge branch 'KAFKA-10799-alter-isr-metrics' into tmp-zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "319da829f8c1aa1ae548fd19d87e7f34aa770d76", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/319da829f8c1aa1ae548fd19d87e7f34aa770d76", "committedDate": "2020-12-03T16:29:46Z", "message": "Consolidate AlterIsr and ZK paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299f2652a1cd2045dc637a713074e8526a651e61", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/299f2652a1cd2045dc637a713074e8526a651e61", "committedDate": "2020-12-03T16:44:36Z", "message": "Clean up AlterIsrManager classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7c91364aeb77d2c68a55f2893c55329fd65481", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/1e7c91364aeb77d2c68a55f2893c55329fd65481", "committedDate": "2020-12-03T16:50:10Z", "message": "Add some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbe66f9f201932aeb151ea1064fbf38b3286982", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/cbbe66f9f201932aeb151ea1064fbf38b3286982", "committedDate": "2020-12-03T16:58:54Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07700bc5071a01490173c84f5fdc6f55a1c6e515", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/07700bc5071a01490173c84f5fdc6f55a1c6e515", "committedDate": "2020-12-03T17:06:58Z", "message": "unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b14919f54e3848890b4421135659446e6e2bbb", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/a1b14919f54e3848890b4421135659446e6e2bbb", "committedDate": "2020-12-03T18:00:28Z", "message": "Fix indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1535162604701fe09f0343dabc8a3dd240737bac", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/1535162604701fe09f0343dabc8a3dd240737bac", "committedDate": "2020-12-03T18:44:23Z", "message": "Merge branch 'KAFKA-10799-alter-isr-metrics' into tmp-zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c8b9c4fb8b7f95ffaadb3f0f5d4b78c044036e", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/62c8b9c4fb8b7f95ffaadb3f0f5d4b78c044036e", "committedDate": "2020-12-04T17:33:33Z", "message": "Add some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6142c655afc6f7a87ed4296f507b213ee63d0b2e", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/6142c655afc6f7a87ed4296f507b213ee63d0b2e", "committedDate": "2020-12-04T17:58:26Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f027eae9061307ee2e2cbe943291e82bcd09c63", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/9f027eae9061307ee2e2cbe943291e82bcd09c63", "committedDate": "2020-12-04T18:18:37Z", "message": "Fix compile error from trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1283c60f7d4f7f296d916177b23d8c4136ae297", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/a1283c60f7d4f7f296d916177b23d8c4136ae297", "committedDate": "2020-12-04T18:41:41Z", "message": "Make use of new MockAlterIsrManager methods in PartitionTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50f3c948e076d3f3547c765e58e21fed9a450550", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/50f3c948e076d3f3547c765e58e21fed9a450550", "committedDate": "2020-12-04T18:42:04Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60741cc2f9fa6655b47c793e449c023827b2ccb", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/e60741cc2f9fa6655b47c793e449c023827b2ccb", "committedDate": "2020-12-04T20:05:13Z", "message": "Remove PartitionStateStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6b93b77a199b03d570d00b277e4ecf14b41d50", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/0d6b93b77a199b03d570d00b277e4ecf14b41d50", "committedDate": "2020-12-07T18:59:09Z", "message": "Move ISR propagation thread to ZkIsrManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b5e0bd460ec2a7ff879db13258fc854abdb7ff2", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/3b5e0bd460ec2a7ff879db13258fc854abdb7ff2", "committedDate": "2020-12-07T19:16:38Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfce61e96c476e670c89bec1e3ce894edc1bc83b", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/cfce61e96c476e670c89bec1e3ce894edc1bc83b", "committedDate": "2020-12-07T22:01:46Z", "message": "Add trait for config provider so test mocking is possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2cda8d966386417e1036817bf8e7371bb176a1", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/1d2cda8d966386417e1036817bf8e7371bb176a1", "committedDate": "2020-12-07T22:02:29Z", "message": "Fix issue with callback in ZK code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd85ede8d2c51ccd69db0910d4fc88297ad59058", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/bd85ede8d2c51ccd69db0910d4fc88297ad59058", "committedDate": "2020-12-08T14:46:56Z", "message": "Fix issue with ZK callback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ca5c9eb4b61e39ea9ca778ae66f261904f7366", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/a1ca5c9eb4b61e39ea9ca778ae66f261904f7366", "committedDate": "2020-12-08T14:47:23Z", "message": "Move IsrChangePropagationConfig to ZkIsrManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9d13d525df06a32d133af61752b7c6ff8e184c", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/de9d13d525df06a32d133af61752b7c6ff8e184c", "committedDate": "2020-12-08T14:49:35Z", "message": "Merge remote-tracking branch 'mumrah/zk-alter-isr-manager' into zk-alter-isr-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd19d7f5ac9c68289cac6920446e3fd40c36cdb4", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/bd19d7f5ac9c68289cac6920446e3fd40c36cdb4", "committedDate": "2020-12-08T16:53:59Z", "message": "Add KafkaServer test for picking correct AlterIsrManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/ec56bd1fa835e34158c5a6ce70e692dee858c4d2", "committedDate": "2020-12-08T19:25:44Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into KAFKA-10825-zk-isr-manager\n\nConflicts:\n\tcore/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTc5MjAy", "url": "https://github.com/apache/kafka/pull/9713#pullrequestreview-547579202", "createdAt": "2020-12-08T19:54:08Z", "commit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1NDowOFrOIBzcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTowMDo0OFrOICpQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjI1Ng==", "bodyText": "We don't have to do it here, but I think the controller epoch is no longer needed. This was previously used as a sort of poor man's controller fencing, but now the controller has a stronger mechanism relying on conditional zk updates.\nBy the way, do we need the default value? Especially the fact that it is a sentinel seems dangerous.", "url": "https://github.com/apache/kafka/pull/9713#discussion_r538762256", "createdAt": "2020-12-08T19:54:08Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/AlterIsrManager.scala", "diffHunk": "@@ -46,13 +51,36 @@ trait AlterIsrManager {\n   def clearPending(topicPartition: TopicPartition): Unit\n }\n \n-case class AlterIsrItem(topicPartition: TopicPartition, leaderAndIsr: LeaderAndIsr, callback: Either[Errors, LeaderAndIsr] => Unit)\n+case class AlterIsrItem(topicPartition: TopicPartition,\n+                        leaderAndIsr: LeaderAndIsr,\n+                        callback: Either[Errors, LeaderAndIsr] => Unit,\n+                        controllerEpoch: Int = -1) // controllerEpoch needed for Zk impl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNjY0Mg==", "bodyText": "nit: I wonder if it might be better to use a verb like fetch which suggests some overhead involved", "url": "https://github.com/apache/kafka/pull/9713#discussion_r539636642", "createdAt": "2020-12-09T20:48:34Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -51,40 +51,8 @@ trait IsrChangeListener {\n   def markFailed(): Unit\n }\n \n-trait PartitionStateStore {\n-  def fetchTopicConfig(): Properties\n-  def shrinkIsr(controllerEpoch: Int, leaderAndIsr: LeaderAndIsr): Option[Int]\n-  def expandIsr(controllerEpoch: Int, leaderAndIsr: LeaderAndIsr): Option[Int]\n-}\n-\n-class ZkPartitionStateStore(topicPartition: TopicPartition,\n-                            zkClient: KafkaZkClient) extends PartitionStateStore {\n-\n-  override def fetchTopicConfig(): Properties = {\n-    val adminZkClient = new AdminZkClient(zkClient)\n-    adminZkClient.fetchEntityConfig(ConfigType.Topic, topicPartition.topic)\n-  }\n-\n-  override def shrinkIsr(controllerEpoch: Int, leaderAndIsr: LeaderAndIsr): Option[Int] = {\n-    val newVersionOpt = updateIsr(controllerEpoch, leaderAndIsr)\n-    newVersionOpt\n-  }\n-\n-  override def expandIsr(controllerEpoch: Int, leaderAndIsr: LeaderAndIsr): Option[Int] = {\n-    val newVersionOpt = updateIsr(controllerEpoch, leaderAndIsr)\n-    newVersionOpt\n-  }\n-\n-  private def updateIsr(controllerEpoch: Int, leaderAndIsr: LeaderAndIsr): Option[Int] = {\n-    val (updateSucceeded, newVersion) = ReplicationUtils.updateLeaderAndIsr(zkClient, topicPartition,\n-      leaderAndIsr, controllerEpoch)\n-\n-    if (updateSucceeded) {\n-      Some(newVersion)\n-    } else {\n-      None\n-    }\n-  }\n+trait TopicConfigProvider {\n+  def get(): Properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MDU5MA==", "bodyText": "The name \"enqueue\" suggests an asynchronous change. Wonder if there is another name we could use. Perhaps \"submit\" suggests less about the implementation?", "url": "https://github.com/apache/kafka/pull/9713#discussion_r539640590", "createdAt": "2020-12-09T20:55:04Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ZkIsrManager.scala", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package kafka.server\n+\n+import kafka.utils.{Logging, ReplicationUtils, Scheduler}\n+import kafka.zk.KafkaZkClient\n+import org.apache.kafka.common.TopicPartition\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.utils.Time\n+\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicLong\n+import scala.collection.mutable\n+\n+/**\n+ * @param checkIntervalMs How often to check for ISR\n+ * @param maxDelayMs  Maximum time that an ISR change may be delayed before sending the notification\n+ * @param lingerMs  Maximum time to await additional changes before sending the notification\n+ */\n+case class IsrChangePropagationConfig(checkIntervalMs: Long, maxDelayMs: Long, lingerMs: Long)\n+\n+object ZkIsrManager {\n+  // This field is mutable to allow overriding change notification behavior in test cases\n+  @volatile var DefaultIsrPropagationConfig: IsrChangePropagationConfig = IsrChangePropagationConfig(\n+    checkIntervalMs = 2500,\n+    lingerMs = 5000,\n+    maxDelayMs = 60000,\n+  )\n+}\n+\n+class ZkIsrManager(scheduler: Scheduler, time: Time, zkClient: KafkaZkClient) extends AlterIsrManager with Logging {\n+\n+  private val isrChangeNotificationConfig = ZkIsrManager.DefaultIsrPropagationConfig\n+  // Visible for testing\n+  private[server] val isrChangeSet: mutable.Set[TopicPartition] = new mutable.HashSet[TopicPartition]()\n+  private val lastIsrChangeMs = new AtomicLong(time.milliseconds())\n+  private val lastIsrPropagationMs = new AtomicLong(time.milliseconds())\n+\n+  override def start(): Unit = {\n+    scheduler.schedule(\"isr-change-propagation\", maybePropagateIsrChanges _,\n+      period = isrChangeNotificationConfig.checkIntervalMs, unit = TimeUnit.MILLISECONDS)\n+  }\n+\n+  override def clearPending(topicPartition: TopicPartition): Unit = {\n+    // Since we always immediately process ZK updates and never actually enqueue anything, there is nothing to\n+    // clear here so this is a no-op. Even if there are changes that have not been propagated, the write to ZK\n+    // has already happened, so we may as well send the notification to the controller.\n+  }\n+\n+  override def enqueue(alterIsrItem: AlterIsrItem): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0NDA4Nw==", "bodyText": "Hmm.. It feels a tad brittle to rely on locking assumptions like this. Perhaps we could let enqueue return a different response in the case that the change was applied immediately? For example, we could return Option[Int] to indicate that new version if the change was applied. Note that we can probably discard the boolean return type and let enqueue raise an illegal state exception directly since that is what Partition is already doing.", "url": "https://github.com/apache/kafka/pull/9713#discussion_r539644087", "createdAt": "2020-12-09T21:00:48Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ZkIsrManager.scala", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package kafka.server\n+\n+import kafka.utils.{Logging, ReplicationUtils, Scheduler}\n+import kafka.zk.KafkaZkClient\n+import org.apache.kafka.common.TopicPartition\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.utils.Time\n+\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicLong\n+import scala.collection.mutable\n+\n+/**\n+ * @param checkIntervalMs How often to check for ISR\n+ * @param maxDelayMs  Maximum time that an ISR change may be delayed before sending the notification\n+ * @param lingerMs  Maximum time to await additional changes before sending the notification\n+ */\n+case class IsrChangePropagationConfig(checkIntervalMs: Long, maxDelayMs: Long, lingerMs: Long)\n+\n+object ZkIsrManager {\n+  // This field is mutable to allow overriding change notification behavior in test cases\n+  @volatile var DefaultIsrPropagationConfig: IsrChangePropagationConfig = IsrChangePropagationConfig(\n+    checkIntervalMs = 2500,\n+    lingerMs = 5000,\n+    maxDelayMs = 60000,\n+  )\n+}\n+\n+class ZkIsrManager(scheduler: Scheduler, time: Time, zkClient: KafkaZkClient) extends AlterIsrManager with Logging {\n+\n+  private val isrChangeNotificationConfig = ZkIsrManager.DefaultIsrPropagationConfig\n+  // Visible for testing\n+  private[server] val isrChangeSet: mutable.Set[TopicPartition] = new mutable.HashSet[TopicPartition]()\n+  private val lastIsrChangeMs = new AtomicLong(time.milliseconds())\n+  private val lastIsrPropagationMs = new AtomicLong(time.milliseconds())\n+\n+  override def start(): Unit = {\n+    scheduler.schedule(\"isr-change-propagation\", maybePropagateIsrChanges _,\n+      period = isrChangeNotificationConfig.checkIntervalMs, unit = TimeUnit.MILLISECONDS)\n+  }\n+\n+  override def clearPending(topicPartition: TopicPartition): Unit = {\n+    // Since we always immediately process ZK updates and never actually enqueue anything, there is nothing to\n+    // clear here so this is a no-op. Even if there are changes that have not been propagated, the write to ZK\n+    // has already happened, so we may as well send the notification to the controller.\n+  }\n+\n+  override def enqueue(alterIsrItem: AlterIsrItem): Boolean = {\n+    debug(s\"Writing new ISR \" + alterIsrItem.leaderAndIsr.isr + \" to ZooKeeper with version \" +\n+      alterIsrItem.leaderAndIsr.zkVersion + \" for partition \" + alterIsrItem.topicPartition)\n+\n+    val (updateSucceeded, newVersion) = ReplicationUtils.updateLeaderAndIsr(zkClient, alterIsrItem.topicPartition,\n+      alterIsrItem.leaderAndIsr, alterIsrItem.controllerEpoch)\n+\n+    if (updateSucceeded) {\n+      // Track which partitions need to be propagated to the controller\n+      isrChangeSet synchronized {\n+        isrChangeSet += alterIsrItem.topicPartition\n+        lastIsrChangeMs.set(time.milliseconds())\n+      }\n+\n+      // We actually need to apply the callback in another thread since Partition#sendAlterIsrRequest will write", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec56bd1fa835e34158c5a6ce70e692dee858c4d2"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429f6e8192605e607318a31780fde5566f9acca5", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/429f6e8192605e607318a31780fde5566f9acca5", "committedDate": "2020-12-10T14:23:00Z", "message": "Use a callback instead of the thread+lock approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a4f6894e4586a6f619420ea7d65d1162e0a88f", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/64a4f6894e4586a6f619420ea7d65d1162e0a88f", "committedDate": "2020-12-11T13:17:08Z", "message": "Few small feedback items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76df120641830364cdf6cfca9376bc4662e3b31", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/e76df120641830364cdf6cfca9376bc4662e3b31", "committedDate": "2020-12-11T13:25:25Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into KAFKA-10825-zk-isr-manager\n\nConflicts:\n\tcore/src/test/scala/unit/kafka/utils/TestUtils.scala"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDM0NzM4", "url": "https://github.com/apache/kafka/pull/9713#pullrequestreview-554034738", "createdAt": "2020-12-16T19:55:33Z", "commit": {"oid": "e76df120641830364cdf6cfca9376bc4662e3b31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo1NTozM1rOIHWnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo1NTozM1rOIHWnyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4MTU3Ng==", "bodyText": "Could we solve the problem by moving this above the call to submit? Then the callback logic should work even if the change is made synchronously. In the case that the request fails to be submitted, then we can reset to the previous state. What do you think?", "url": "https://github.com/apache/kafka/pull/9713#discussion_r544581576", "createdAt": "2020-12-16T19:55:33Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1374,47 +1314,28 @@ class Partition(val topicPartition: TopicPartition,\n     }\n   }\n \n-  private def shrinkIsrWithZk(newIsr: Set[Int]): Unit = {\n-    val newLeaderAndIsr = new LeaderAndIsr(localBrokerId, leaderEpoch, newIsr.toList, zkVersion)\n-    val zkVersionOpt = stateStore.shrinkIsr(controllerEpoch, newLeaderAndIsr)\n-    if (zkVersionOpt.isDefined) {\n-      isrChangeListener.markShrink()\n-    }\n-    maybeUpdateIsrAndVersionWithZk(newIsr, zkVersionOpt)\n-  }\n-\n-  private def maybeUpdateIsrAndVersionWithZk(isr: Set[Int], zkVersionOpt: Option[Int]): Unit = {\n-    zkVersionOpt match {\n-      case Some(newVersion) =>\n-        isrState = CommittedIsr(isr)\n-        zkVersion = newVersion\n-        info(\"ISR updated to [%s] and zkVersion updated to [%d]\".format(isr.mkString(\",\"), zkVersion))\n-\n-      case None =>\n-        info(s\"Cached zkVersion $zkVersion not equal to that in zookeeper, skip updating ISR\")\n-        isrChangeListener.markFailed()\n-    }\n-  }\n-\n   private def sendAlterIsrRequest(proposedIsrState: IsrState): Unit = {\n     val isrToSend: Set[Int] = proposedIsrState match {\n       case PendingExpandIsr(isr, newInSyncReplicaId) => isr + newInSyncReplicaId\n       case PendingShrinkIsr(isr, outOfSyncReplicaIds) => isr -- outOfSyncReplicaIds\n       case state =>\n+        isrChangeListener.markFailed()\n         throw new IllegalStateException(s\"Invalid state $state for `AlterIsr` request for partition $topicPartition\")\n     }\n \n     val newLeaderAndIsr = new LeaderAndIsr(localBrokerId, leaderEpoch, isrToSend.toList, zkVersion)\n-    val alterIsrItem = AlterIsrItem(topicPartition, newLeaderAndIsr, handleAlterIsrResponse(proposedIsrState))\n+    val alterIsrItem = AlterIsrItem(topicPartition, newLeaderAndIsr, handleAlterIsrResponse(proposedIsrState), controllerEpoch)\n \n-    if (!alterIsrManager.enqueue(alterIsrItem)) {\n-      isrChangeListener.markFailed()\n-      throw new IllegalStateException(s\"Failed to enqueue `AlterIsr` request with state \" +\n-        s\"$newLeaderAndIsr for partition $topicPartition\")\n-    }\n-\n-    isrState = proposedIsrState\n-    debug(s\"Sent `AlterIsr` request to change state to $newLeaderAndIsr after transition to $proposedIsrState\")\n+    alterIsrManager.submit(alterIsrItem, (wasSubmitted: Boolean) => {\n+      if (wasSubmitted) {\n+        isrState = proposedIsrState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76df120641830364cdf6cfca9376bc4662e3b31"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9493e4ae53ebd7dca7037a7447dae937bc8595f0", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/9493e4ae53ebd7dca7037a7447dae937bc8595f0", "committedDate": "2020-12-18T16:19:44Z", "message": "Revert callback change\n\nThis reverts commit 429f6e8192605e607318a31780fde5566f9acca5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8016d4e1323d11385a2c4232ffcc376e392cba95", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/8016d4e1323d11385a2c4232ffcc376e392cba95", "committedDate": "2020-12-18T17:05:48Z", "message": "Missed a few things when reverting in the last commit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NzU2ODc4", "url": "https://github.com/apache/kafka/pull/9713#pullrequestreview-555756878", "createdAt": "2020-12-18T19:23:14Z", "commit": {"oid": "8016d4e1323d11385a2c4232ffcc376e392cba95"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOToyMzoxNFrOIIv7uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTo0MjoyNVrOIIwhzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0NDg1Nw==", "bodyText": "Should we generalize this log message as well? Also the couple IllegalStateException messages above.", "url": "https://github.com/apache/kafka/pull/9713#discussion_r546044857", "createdAt": "2020-12-18T19:23:14Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1374,46 +1314,29 @@ class Partition(val topicPartition: TopicPartition,\n     }\n   }\n \n-  private def shrinkIsrWithZk(newIsr: Set[Int]): Unit = {\n-    val newLeaderAndIsr = new LeaderAndIsr(localBrokerId, leaderEpoch, newIsr.toList, zkVersion)\n-    val zkVersionOpt = stateStore.shrinkIsr(controllerEpoch, newLeaderAndIsr)\n-    if (zkVersionOpt.isDefined) {\n-      isrChangeListener.markShrink()\n-    }\n-    maybeUpdateIsrAndVersionWithZk(newIsr, zkVersionOpt)\n-  }\n-\n-  private def maybeUpdateIsrAndVersionWithZk(isr: Set[Int], zkVersionOpt: Option[Int]): Unit = {\n-    zkVersionOpt match {\n-      case Some(newVersion) =>\n-        isrState = CommittedIsr(isr)\n-        zkVersion = newVersion\n-        info(\"ISR updated to [%s] and zkVersion updated to [%d]\".format(isr.mkString(\",\"), zkVersion))\n-\n-      case None =>\n-        info(s\"Cached zkVersion $zkVersion not equal to that in zookeeper, skip updating ISR\")\n-        isrChangeListener.markFailed()\n-    }\n-  }\n-\n   private def sendAlterIsrRequest(proposedIsrState: IsrState): Unit = {\n     val isrToSend: Set[Int] = proposedIsrState match {\n       case PendingExpandIsr(isr, newInSyncReplicaId) => isr + newInSyncReplicaId\n       case PendingShrinkIsr(isr, outOfSyncReplicaIds) => isr -- outOfSyncReplicaIds\n       case state =>\n+        isrChangeListener.markFailed()\n         throw new IllegalStateException(s\"Invalid state $state for `AlterIsr` request for partition $topicPartition\")\n     }\n \n     val newLeaderAndIsr = new LeaderAndIsr(localBrokerId, leaderEpoch, isrToSend.toList, zkVersion)\n-    val alterIsrItem = AlterIsrItem(topicPartition, newLeaderAndIsr, handleAlterIsrResponse(proposedIsrState))\n+    val alterIsrItem = AlterIsrItem(topicPartition, newLeaderAndIsr, handleAlterIsrResponse(proposedIsrState), controllerEpoch)\n \n-    if (!alterIsrManager.enqueue(alterIsrItem)) {\n+    val oldState = isrState\n+    isrState = proposedIsrState\n+\n+    if (!alterIsrManager.submit(alterIsrItem)) {\n+      // If the ISR manager did not accept our update, we need to revert back to previous state\n+      isrState = oldState\n       isrChangeListener.markFailed()\n       throw new IllegalStateException(s\"Failed to enqueue `AlterIsr` request with state \" +\n         s\"$newLeaderAndIsr for partition $topicPartition\")\n     }\n \n-    isrState = proposedIsrState\n     debug(s\"Sent `AlterIsr` request to change state to $newLeaderAndIsr after transition to $proposedIsrState\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8016d4e1323d11385a2c4232ffcc376e392cba95"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1NDYwNQ==", "bodyText": "nit: rewrite using $ substitutions?", "url": "https://github.com/apache/kafka/pull/9713#discussion_r546054605", "createdAt": "2020-12-18T19:42:25Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ZkIsrManager.scala", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package kafka.server\n+\n+import kafka.utils.{Logging, ReplicationUtils, Scheduler}\n+import kafka.zk.KafkaZkClient\n+import org.apache.kafka.common.TopicPartition\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.utils.Time\n+\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.atomic.AtomicLong\n+import scala.collection.mutable\n+\n+/**\n+ * @param checkIntervalMs How often to check for ISR\n+ * @param maxDelayMs  Maximum time that an ISR change may be delayed before sending the notification\n+ * @param lingerMs  Maximum time to await additional changes before sending the notification\n+ */\n+case class IsrChangePropagationConfig(checkIntervalMs: Long, maxDelayMs: Long, lingerMs: Long)\n+\n+object ZkIsrManager {\n+  // This field is mutable to allow overriding change notification behavior in test cases\n+  @volatile var DefaultIsrPropagationConfig: IsrChangePropagationConfig = IsrChangePropagationConfig(\n+    checkIntervalMs = 2500,\n+    lingerMs = 5000,\n+    maxDelayMs = 60000,\n+  )\n+}\n+\n+class ZkIsrManager(scheduler: Scheduler, time: Time, zkClient: KafkaZkClient) extends AlterIsrManager with Logging {\n+\n+  private val isrChangeNotificationConfig = ZkIsrManager.DefaultIsrPropagationConfig\n+  // Visible for testing\n+  private[server] val isrChangeSet: mutable.Set[TopicPartition] = new mutable.HashSet[TopicPartition]()\n+  private val lastIsrChangeMs = new AtomicLong(time.milliseconds())\n+  private val lastIsrPropagationMs = new AtomicLong(time.milliseconds())\n+\n+  override def start(): Unit = {\n+    scheduler.schedule(\"isr-change-propagation\", maybePropagateIsrChanges _,\n+      period = isrChangeNotificationConfig.checkIntervalMs, unit = TimeUnit.MILLISECONDS)\n+  }\n+\n+  override def clearPending(topicPartition: TopicPartition): Unit = {\n+    // Since we always immediately process ZK updates and never actually enqueue anything, there is nothing to\n+    // clear here so this is a no-op. Even if there are changes that have not been propagated, the write to ZK\n+    // has already happened, so we may as well send the notification to the controller.\n+  }\n+\n+  override def submit(alterIsrItem: AlterIsrItem): Boolean = {\n+    debug(s\"Writing new ISR \" + alterIsrItem.leaderAndIsr.isr + \" to ZooKeeper with version \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8016d4e1323d11385a2c4232ffcc376e392cba95"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58eb8fbd4fe4d7e543b85ce85e1eb6308bcbc5f", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/a58eb8fbd4fe4d7e543b85ce85e1eb6308bcbc5f", "committedDate": "2020-12-21T19:06:29Z", "message": "Minor nits from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ea2c94d707a65749f5fa5b4ecddb20c969ae524", "author": {"user": {"login": "mumrah", "name": "David Arthur"}}, "url": "https://github.com/apache/kafka/commit/5ea2c94d707a65749f5fa5b4ecddb20c969ae524", "committedDate": "2020-12-21T19:21:04Z", "message": "Merge remote-tracking branch 'apache-github/trunk' into KAFKA-10825-zk-isr-manager\n\nConflicts:\n\tcore/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2593, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}