{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzI1NDk4", "number": 7950, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo0NjoxN1rODX83Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyOTowOVrOD37LeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQwOTg3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo0NjoxN1rOFdh90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDowODozM1rOFdkURQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTUyMg==", "bodyText": "Why change the logic since the answer is always true?", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366509522", "createdAt": "2020-01-14T18:46:17Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNTI3NA==", "bodyText": "Astute observation.  So, technically speaking, it is possible to not return true.  Imagine the following code....\nList a = new ArrayList<>(Arrays.asList(\"A\"));\nIterator it = new CircularIterator(a);\nSystem.out.println(it.next());\na.clear();\nSystem.out.println(it.next());\n\nThe Iterator is re-created on the second call to next() so this is a legal option.  Now, not sure it would actually happen, but it's possible.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366535274", "createdAt": "2020-01-14T19:40:13Z", "author": {"login": "belugabehr"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTUyMg=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0ODAzNw==", "bodyText": "The constructor doesn't accept an empty list, but it doesn't copy it (or, better, if we were using persistent data structures... but alas no).  The class isn't thread-safe, and iterators that the code constructs and uses are potentially fail-safe or fail-fast if the collection is modified.  And the remove() method of this class throws UnsupportedOperationException.\nAll in all, I think the best thing is to clearly document that the class does not support modifications to the passed-in collection and always return true here (technically !isEmpty() covers all cases, but since the constructor doesn't accept an empty list the answer would always be true).", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366548037", "createdAt": "2020-01-14T20:08:33Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTUyMg=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQzMTY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MzoyN1rOFdiLvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MzoyN1rOFdiLvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzA4Nw==", "bodyText": "Should add that the class is not thread-safe.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366513087", "createdAt": "2020-01-14T18:53:27Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQzMTk3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MzozMlrOFdiL8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MzozMlrOFdiL8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzEzNg==", "bodyText": "Need to add a test with a collection containing null -- this logic will break.  Best to always have the peek value, initializing it in the constructor.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366513136", "createdAt": "2020-01-14T18:53:32Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {\n+            return true;\n+        }\n+        if (!this.iterator.hasNext()) {\n+            this.iterator = this.iterable.iterator();\n+        }\n+        return this.iterator.hasNext();\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n-        return next;\n+        final T nextValue;\n+        if (this.peek != null) {\n+            nextValue = this.peek;\n+            this.peek = null;\n+        } else {\n+            nextValue = this.iterator.next();\n+        }\n+        return nextValue;\n     }\n \n     public T peek() {\n-        return list.get(i);\n+        if (this.peek == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA3MTgzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MzowM1rOFdobtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MzowM1rOFdobtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTQ3Ng==", "bodyText": "Should simply return true here, right?  As written now it is adjusting internal state, and it is best to isolate state manipulation to as few places as possible.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366615476", "createdAt": "2020-01-14T22:53:03Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,94 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+    private boolean hasPeek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        this.hasPeek = false;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n+        if (this.hasPeek) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDgzNDM3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMzowOVrOFwryxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMzowOVrOFwryxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MzQ3OQ==", "bodyText": "Could combine these into a single testCycleCollection() method if you put a null value in the list (e.g. \"A\", null, \"C\") and for every one of the 4 positions (0-2 and cycling back to 0) you also check the peek() value.  I think it would be clearer compared to what you have currently since the last 2 methods you have now are a bit haphazard.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r386593479", "createdAt": "2020-03-02T19:13:09Z", "author": {"login": "rondagostino"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testNullCollection() {\n+        new CircularIterator<>(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testEmptyCollection() {\n+        new CircularIterator<>(Collections.emptyList());\n+    }\n+\n+    @Test()\n+    public void testCycleCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollectionNullValue() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", null, \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTY2NTQ5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyNToxOVrOGOc9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyNToxOVrOGOc9LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzY2MA==", "bodyText": "no need to use this. outside the constructor.\nHere and below", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807660", "createdAt": "2020-04-30T07:25:19Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTY2NzA1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyNTo0OFrOGOc-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyNTo0OFrOGOc-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzkxOA==", "bodyText": "same comment on this. as above.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807918", "createdAt": "2020-04-30T07:25:48Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;\n+        this.nextValue = advance();\n         return next;\n     }\n \n+    /**\n+     * Return the next value in the {@code Iterator}, restarting the\n+     * {@code Iterator} if necessary.\n+     *\n+     * @return The next value in the iterator\n+     */\n+    private T advance() {\n+        if (!this.iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTY3ODY0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyOTowOVrOGOdFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyOTowOVrOGOdFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwOTc3Mw==", "bodyText": "assertThrows is what we use for some time now, and it's available to the branches that this PR will be backported. (same below)", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417809773", "createdAt": "2020-04-30T07:29:09Z", "author": {"login": "kkonstantine"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4351, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}