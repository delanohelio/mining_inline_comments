{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzA5OTA5", "number": 9516, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozMDowNlrOE6nzqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowNjoyMlrOFDfp4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTA1MDY1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozMDowNlrOH1zZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozNToyMFrOH15wpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNA==", "bodyText": "I had tried making this change, but it turns out we still have places where we use GatheringByteChannel, so not sure it's worth it.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r526178614", "createdAt": "2020-11-18T15:30:06Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import org.apache.kafka.common.errors.AuthenticationException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import java.security.Principal;\n+\n+public final class TransportLayerUtils {\n+    private TransportLayerUtils() {\n+    }\n+\n+    /**\n+     * Create a TransportLayer based on GatheringByteChannel. This helper method is used by testing only and noted that\n+     * not all methods of TransportLayer are supported.\n+     * @param channel channel\n+     * @return a TransportLayer\n+     */\n+    public static TransportLayer toTransportLayer(GatheringByteChannel channel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE5NTgzMQ==", "bodyText": "The benefit, personally, is that the ugly casting is removed from production code. However, you are right - GatheringByteChannel still makes us leave a wrapper in test scope...", "url": "https://github.com/apache/kafka/pull/9516#discussion_r526195831", "createdAt": "2020-11-18T15:51:18Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import org.apache.kafka.common.errors.AuthenticationException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import java.security.Principal;\n+\n+public final class TransportLayerUtils {\n+    private TransportLayerUtils() {\n+    }\n+\n+    /**\n+     * Create a TransportLayer based on GatheringByteChannel. This helper method is used by testing only and noted that\n+     * not all methods of TransportLayer are supported.\n+     * @param channel channel\n+     * @return a TransportLayer\n+     */\n+    public static TransportLayer toTransportLayer(GatheringByteChannel channel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIwMzU4Ng==", "bodyText": "If we move the casting in FileRecords to TransportLayers, then it would be isolated in one class. Also, it's safe casting, not unsafe. That may be OK?", "url": "https://github.com/apache/kafka/pull/9516#discussion_r526203586", "createdAt": "2020-11-18T15:59:47Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import org.apache.kafka.common.errors.AuthenticationException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import java.security.Principal;\n+\n+public final class TransportLayerUtils {\n+    private TransportLayerUtils() {\n+    }\n+\n+    /**\n+     * Create a TransportLayer based on GatheringByteChannel. This helper method is used by testing only and noted that\n+     * not all methods of TransportLayer are supported.\n+     * @param channel channel\n+     * @return a TransportLayer\n+     */\n+    public static TransportLayer toTransportLayer(GatheringByteChannel channel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIzMzc1OA==", "bodyText": "if (destChannel instanceof TransportLayer) {\n            TransportLayer tl = (TransportLayer) destChannel;\n            bytesTransferred = tl.transferFrom(channel, position, count);\n        } else {\n            bytesTransferred = channel.transferTo(position, count, destChannel);\n        }\nDid you mean that we could move above code to TransportLayers. If so, it seems that we still don't replace GatheringByteChannel by TransportLayer in production code.\nMost usage of GatheringByteChannel implementation (in test scope) is ByteBufferChannel. We can rewrite ByteBufferChannel to ByteBufferTransportLayer so the toTransportLayer wrapper can be removed.\nAlso, the new ByteBufferTransportLayer  should be moved to test code as it is not used by production code.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r526233758", "createdAt": "2020-11-18T16:38:06Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import org.apache.kafka.common.errors.AuthenticationException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import java.security.Principal;\n+\n+public final class TransportLayerUtils {\n+    private TransportLayerUtils() {\n+    }\n+\n+    /**\n+     * Create a TransportLayer based on GatheringByteChannel. This helper method is used by testing only and noted that\n+     * not all methods of TransportLayer are supported.\n+     * @param channel channel\n+     * @return a TransportLayer\n+     */\n+    public static TransportLayer toTransportLayer(GatheringByteChannel channel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNA=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4MjkxOA==", "bodyText": "@ijuma please take a look at 9369c7a to see what I described if you have free cycle :)", "url": "https://github.com/apache/kafka/pull/9516#discussion_r526282918", "createdAt": "2020-11-18T17:35:20Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/network/TransportLayerUtils.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import org.apache.kafka.common.errors.AuthenticationException;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+import java.nio.channels.SelectionKey;\n+import java.nio.channels.SocketChannel;\n+import java.security.Principal;\n+\n+public final class TransportLayerUtils {\n+    private TransportLayerUtils() {\n+    }\n+\n+    /**\n+     * Create a TransportLayer based on GatheringByteChannel. This helper method is used by testing only and noted that\n+     * not all methods of TransportLayer are supported.\n+     * @param channel channel\n+     * @return a TransportLayer\n+     */\n+    public static TransportLayer toTransportLayer(GatheringByteChannel channel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODYxNA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzA5OTkzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMzo0NVrOICd9dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjozMzo0NVrOICd9dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1ODkzMg==", "bodyText": "Do we need to change this? It seems like what we had before was good enough.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539458932", "createdAt": "2020-12-09T16:33:45Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/network/NetworkReceive.java", "diffHunk": "@@ -89,7 +88,8 @@ public boolean complete() {\n         return !size.hasRemaining() && buffer != null && !buffer.hasRemaining();\n     }\n \n-    public long readFrom(ScatteringByteChannel channel) throws IOException {\n+    @Override\n+    public long readFrom(TransportLayer channel) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6c1f6b755b02047976188bbfb6be78a444ada1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTcyNzk0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0Njo1NlrOIC1WnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxMjoxN1rOIC12mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjIwNA==", "bodyText": "Maybe we should call it TransferableChannel since it adds a transferFrom method. And let's add some brief class javadoc explaining why we have this interface.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539842204", "createdAt": "2020-12-10T04:46:56Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+public interface WritableChannel extends GatheringByteChannel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b996ec11dcd30302ad352371df19ec0fcdd694"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1MDM5NA==", "bodyText": "will copy that", "url": "https://github.com/apache/kafka/pull/9516#discussion_r539850394", "createdAt": "2020-12-10T05:12:17Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/network/WritableChannel.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+public interface WritableChannel extends GatheringByteChannel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjIwNA=="}, "originalCommit": {"oid": "c2b996ec11dcd30302ad352371df19ec0fcdd694"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA2MzcyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowMToyN1rOIDKrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTowMjoxNlrOIDNm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MTY0Nw==", "bodyText": "I would replace this comment with:\n\nExtends GatheringByteChannel with the minimal set of methods required by the Send interface. Supporting TLS and efficient zero copy transfers are the main reasons for the additional methods.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540191647", "createdAt": "2020-12-10T14:01:27Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+/**\n+ * TransportLayer is a fat interface so it is a bit weird to use TransportLayer in write-only path.\n+ * Hence, we extract all write-related methods from TransportLayer to be a new interface - TransferableChannel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzOTU3Nw==", "bodyText": "will copy that.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540239577", "createdAt": "2020-12-10T15:02:16Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/network/TransferableChannel.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.network;\n+\n+import java.io.IOException;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.GatheringByteChannel;\n+\n+/**\n+ * TransportLayer is a fat interface so it is a bit weird to use TransportLayer in write-only path.\n+ * Hence, we extract all write-related methods from TransportLayer to be a new interface - TransferableChannel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MTY0Nw=="}, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA4Njc0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowNjoyMlrOIDK5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOTo0NTowMlrOIDaXKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA==", "bodyText": "I don't think you can use this as a general class as it stands. A previous PR changed it to be non general, it seems:\n    @Override\n    public long write(ByteBuffer[] srcs, int offset, int length) {\n        int position = buf.position();\n        for (int i = 0; i < length; i++) {\n            ByteBuffer src = srcs[i].duplicate();\n            if (i == 0) {\n                src.position(src.position() + offset);\n            }\n            buf.put(src);\n        }\n        return buf.position() - position;\n    }", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540195130", "createdAt": "2020-12-10T14:06:22Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NzI5MA==", "bodyText": "One more thing: why we are using a fully qualified name instead of relying on imports?", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540197290", "createdAt": "2020-12-10T14:09:19Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzOTQ0Mw==", "bodyText": "IIRC, the import rule obstructs me from importing the class. Will check it later.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540239443", "createdAt": "2020-12-10T15:02:07Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MjQwNw==", "bodyText": "We should fix the underlying case instead of working around it. :)", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540262407", "createdAt": "2020-12-10T15:29:36Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0ODU1NQ==", "bodyText": "@ijuma Thanks for your comments. I have fixed the method write and add more tests for it. Also, the disallowed package is removed.", "url": "https://github.com/apache/kafka/pull/9516#discussion_r540448555", "createdAt": "2020-12-10T19:45:02Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/record/LazyDownConversionRecordsTest.java", "diffHunk": "@@ -160,20 +161,21 @@ private static MemoryRecords convertRecords(MemoryRecords recordsToConvert, byte\n                     inputRecords, toMagic, 0L, Time.SYSTEM);\n             LazyDownConversionRecordsSend lazySend = lazyRecords.toSend();\n             File outputFile = tempFile();\n-            FileChannel channel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE);\n-\n-            int written = 0;\n-            while (written < bytesToConvert)\n-                written += lazySend.writeTo(channel, written, bytesToConvert - written);\n-\n-            FileRecords convertedRecords = FileRecords.open(outputFile, true, (int) channel.size(), false);\n-            ByteBuffer convertedRecordsBuffer = ByteBuffer.allocate(convertedRecords.sizeInBytes());\n-            convertedRecords.readInto(convertedRecordsBuffer, 0);\n-\n-            // cleanup\n-            convertedRecords.close();\n-            channel.close();\n-\n+            ByteBuffer convertedRecordsBuffer;\n+            try (FileChannel fileChannel = FileChannel.open(outputFile.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n+                ByteBuffer buf;\n+                try (org.apache.kafka.common.requests.ByteBufferChannel channel =\n+                             new org.apache.kafka.common.requests.ByteBufferChannel(bytesToConvert)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTEzMA=="}, "originalCommit": {"oid": "a15ce0eb865b01d61dd55b2f9e2fd357de8ffb1f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}