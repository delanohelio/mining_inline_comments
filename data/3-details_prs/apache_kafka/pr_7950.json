{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzI1NDk4", "number": 7950, "title": "KAFKA-9419: Integer Overflow Possible with CircularIterator", "bodyText": "The CircularIterator class uses a wrapping index-based approach to iterate over a list.  This can be a performance problem O(n^2) for a LinkedList.  Also, the index counter itself is never reset, a modulo is applied to it for every list access.  At some point, it may be possible that the index counter overflows to a negative value and therefore may cause a negative index read and an ArrayIndexOutOfBoundsException.\nI propose changing this implementation to avoid these two scenarios.  Use the Collection Iterator classes to avoid using an index counter and it avoids having to seek to the correct index every time, this avoiding the LinkedList performance issue.\nI have added unit tests to validate the new implementation.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-13T21:16:38Z", "url": "https://github.com/apache/kafka/pull/7950", "merged": true, "mergeCommit": {"oid": "074ab2ebf6856628219d4c4ee95d57ff69d29bf3"}, "closed": true, "closedAt": "2020-05-06T23:02:27Z", "author": {"login": "belugabehr"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Vo1sgFqTM0Mjc1NjQ0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcew2eIgFqTQwNzA0MzU0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzU2NDQy", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-342756442", "createdAt": "2020-01-14T18:46:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo0NjoxN1rOFdh90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MzozMlrOFdiL8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTUyMg==", "bodyText": "Why change the logic since the answer is always true?", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366509522", "createdAt": "2020-01-14T18:46:17Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzA4Nw==", "bodyText": "Should add that the class is not thread-safe.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366513087", "createdAt": "2020-01-14T18:53:27Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzEzNg==", "bodyText": "Need to add a test with a collection containing null -- this logic will break.  Best to always have the peek value, initializing it in the constructor.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366513136", "createdAt": "2020-01-14T18:53:32Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,69 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the Iterator of a Collection indefinitely.\n+ * Useful for tasks such as round-robin load balancing.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n     @Override\n     public boolean hasNext() {\n-        return true;\n+        if (this.peek != null) {\n+            return true;\n+        }\n+        if (!this.iterator.hasNext()) {\n+            this.iterator = this.iterable.iterator();\n+        }\n+        return this.iterator.hasNext();\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n-        return next;\n+        final T nextValue;\n+        if (this.peek != null) {\n+            nextValue = this.peek;\n+            this.peek = null;\n+        } else {\n+            nextValue = this.iterator.next();\n+        }\n+        return nextValue;\n     }\n \n     public T peek() {\n-        return list.get(i);\n+        if (this.peek == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODkyOTc1", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-342892975", "createdAt": "2020-01-14T22:53:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MzowM1rOFdobtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MzowM1rOFdobtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTQ3Ng==", "bodyText": "Should simply return true here, right?  As written now it is adjusting internal state, and it is best to isolate state manipulation to as few places as possible.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r366615476", "createdAt": "2020-01-14T22:53:03Z", "author": {"login": "rondagostino"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,94 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T peek;\n+    private boolean hasPeek;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        this.peek = null;\n+        this.hasPeek = false;\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n+        if (this.hasPeek) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf49fbbd6067d233fe84ef7574efe5b6dc6fcd64", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/bf49fbbd6067d233fe84ef7574efe5b6dc6fcd64", "committedDate": "2020-03-02T16:02:29Z", "message": "KAFKA-9419: Integer Overflow Possible with CircularIterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417ea8b6bb93d4e908200d9cd8fea40b99b765b5", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/417ea8b6bb93d4e908200d9cd8fea40b99b765b5", "committedDate": "2020-03-02T16:02:29Z", "message": "Added JavaDoc. Support null values in the underlying collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8998d2c3b03fab3dbc8cd19b579d1bcdb6dc5d6", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/f8998d2c3b03fab3dbc8cd19b579d1bcdb6dc5d6", "committedDate": "2020-03-02T16:02:29Z", "message": "Always return true for hasNext(). Add more JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/b2a23493bc3205d13035704bbb7edcdb020d9f75", "committedDate": "2020-03-02T16:37:43Z", "message": "Use an advance method to load next value and always return true in hasNext()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/b2a23493bc3205d13035704bbb7edcdb020d9f75", "committedDate": "2020-03-02T16:37:43Z", "message": "Use an advance method to load next value and always return true in hasNext()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDU1NDQy", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-367455442", "createdAt": "2020-03-02T19:13:08Z", "commit": {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMzowOVrOFwryxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxMzowOVrOFwryxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MzQ3OQ==", "bodyText": "Could combine these into a single testCycleCollection() method if you put a null value in the list (e.g. \"A\", null, \"C\") and for every one of the 4 positions (0-2 and cycling back to 0) you also check the peek() value.  I think it would be clearer compared to what you have currently since the last 2 methods you have now are a bit haphazard.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r386593479", "createdAt": "2020-03-02T19:13:09Z", "author": {"login": "rondagostino"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testNullCollection() {\n+        new CircularIterator<>(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testEmptyCollection() {\n+        new CircularIterator<>(Collections.emptyList());\n+    }\n+\n+    @Test()\n+    public void testCycleCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollectionNullValue() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", null, \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf", "author": {"user": {"login": "belugabehr", "name": null}}, "url": "https://github.com/apache/kafka/commit/4520f19ad54d9a792aa904edd67c7690c685bacf", "committedDate": "2020-03-03T19:00:07Z", "message": "Simplify test suite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mzc2NTcy", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-368376572", "createdAt": "2020-03-03T22:35:00Z", "commit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjY0OTY4", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-403264968", "createdAt": "2020-04-30T07:25:19Z", "commit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyNToxOVrOGOc9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNzoyOTowOVrOGOdFbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzY2MA==", "bodyText": "no need to use this. outside the constructor.\nHere and below", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807660", "createdAt": "2020-04-30T07:25:19Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzkxOA==", "bodyText": "same comment on this. as above.", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807918", "createdAt": "2020-04-30T07:25:48Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;\n+        this.nextValue = advance();\n         return next;\n     }\n \n+    /**\n+     * Return the next value in the {@code Iterator}, restarting the\n+     * {@code Iterator} if necessary.\n+     *\n+     * @return The next value in the iterator\n+     */\n+    private T advance() {\n+        if (!this.iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwOTc3Mw==", "bodyText": "assertThrows is what we use for some time now, and it's available to the branches that this PR will be backported. (same below)", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417809773", "createdAt": "2020-04-30T07:29:09Z", "author": {"login": "kkonstantine"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01eb7d185f13e143f27a3265b8a59d326c38ee75", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/01eb7d185f13e143f27a3265b8a59d326c38ee75", "committedDate": "2020-05-06T18:00:07Z", "message": "Use assertThrows in tests and remove redundant 'this' identifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDQzNTQy", "url": "https://github.com/apache/kafka/pull/7950#pullrequestreview-407043542", "createdAt": "2020-05-06T22:58:45Z", "commit": {"oid": "01eb7d185f13e143f27a3265b8a59d326c38ee75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1980, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}