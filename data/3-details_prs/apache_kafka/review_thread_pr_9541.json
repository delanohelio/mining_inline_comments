{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzcxMDk4", "number": 9541, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxNTozNDo0M1rOFf55SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOVQyMTo0NToxNVrOGUV5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4OTk4NzI5OnYy", "diffSide": "RIGHT", "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxNTozNDo0M1rOItuA9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMDo0MzoyMVrOIwlKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDgxMDc0Mg==", "bodyText": "Given that this is only used in one place, and the string that it creates is itself added to a formatted string, I think it'd be a bit more readable if we removed this method and inlined all the logic where it's being invoked right now.", "url": "https://github.com/apache/kafka/pull/9541#discussion_r584810742", "createdAt": "2021-03-01T15:34:43Z", "author": {"login": "C0urante"}, "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "diffHunk": "@@ -266,10 +261,19 @@ public static void validateValue(String name, Schema schema, Object value) {\n     private static List<Class> expectedClassesFor(Schema schema) {\n         List<Class> expectedClasses = LOGICAL_TYPE_CLASSES.get(schema.name());\n         if (expectedClasses == null)\n-            expectedClasses = SCHEMA_TYPE_CLASSES.get(schema.type());\n+            expectedClasses = SCHEMA_TYPE_CLASSES.getOrDefault(schema.type(), Collections.emptyList());\n         return expectedClasses;\n     }\n \n+    private static String buildSchemaInfo(Schema schema) {\n+        StringBuilder schemaInfo = new StringBuilder(\"schema\");\n+        if (schema.name() != null) {\n+            schemaInfo.append(\" \\\"\").append(schema.name()).append(\"\\\"\");\n+        }\n+        schemaInfo.append(\" with type \").append(schema.type());\n+        return schemaInfo.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b02708a04d0c290e700db722dc0b2f77cf0bbcd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzgxMTM2MA==", "bodyText": "Thanks for reviewing! Fixes were pushed", "url": "https://github.com/apache/kafka/pull/9541#discussion_r587811360", "createdAt": "2021-03-04T20:43:21Z", "author": {"login": "Iskuskov"}, "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "diffHunk": "@@ -266,10 +261,19 @@ public static void validateValue(String name, Schema schema, Object value) {\n     private static List<Class> expectedClassesFor(Schema schema) {\n         List<Class> expectedClasses = LOGICAL_TYPE_CLASSES.get(schema.name());\n         if (expectedClasses == null)\n-            expectedClasses = SCHEMA_TYPE_CLASSES.get(schema.type());\n+            expectedClasses = SCHEMA_TYPE_CLASSES.getOrDefault(schema.type(), Collections.emptyList());\n         return expectedClasses;\n     }\n \n+    private static String buildSchemaInfo(Schema schema) {\n+        StringBuilder schemaInfo = new StringBuilder(\"schema\");\n+        if (schema.name() != null) {\n+            schemaInfo.append(\" \\\"\").append(schema.name()).append(\"\\\"\");\n+        }\n+        schemaInfo.append(\" with type \").append(schema.type());\n+        return schemaInfo.toString();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDgxMDc0Mg=="}, "originalCommit": {"oid": "1b02708a04d0c290e700db722dc0b2f77cf0bbcd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg5Nzk5NzEwOnYy", "diffSide": "RIGHT", "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQxNTo1ODo1MVrOJLcJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMVQxMDo0NDo1MlrOJM0iXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTk3NTE4OA==", "bodyText": "Strictly speaking, this shouldn't be necessary as SCHEMA_TYPE_CLASSES should have a Schema instance for all Schema.Type literals. And with SchemaBuilder a connector or converter cannot create a schema instance with a null Schema.Type.\nHowever, it is possible to construct a ConnectSchema instance with a null Type reference (like what FakeSchema essentially does in the existing test), which of course without this change would result in this method returning a null list.\nSo +1 for this line change since it simplifies the error handling in the calling code.", "url": "https://github.com/apache/kafka/pull/9541#discussion_r615975188", "createdAt": "2021-04-19T15:58:51Z", "author": {"login": "rhauch"}, "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "diffHunk": "@@ -266,7 +267,7 @@ public static void validateValue(String name, Schema schema, Object value) {\n     private static List<Class> expectedClassesFor(Schema schema) {\n         List<Class> expectedClasses = LOGICAL_TYPE_CLASSES.get(schema.name());\n         if (expectedClasses == null)\n-            expectedClasses = SCHEMA_TYPE_CLASSES.get(schema.type());\n+            expectedClasses = SCHEMA_TYPE_CLASSES.getOrDefault(schema.type(), Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a361cf23bc1803402fc139c047db7c1fbdca07"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzQyMzQ1Mg==", "bodyText": "Thank you! Highly appreciate your comment", "url": "https://github.com/apache/kafka/pull/9541#discussion_r617423452", "createdAt": "2021-04-21T10:44:52Z", "author": {"login": "Iskuskov"}, "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "diffHunk": "@@ -266,7 +267,7 @@ public static void validateValue(String name, Schema schema, Object value) {\n     private static List<Class> expectedClassesFor(Schema schema) {\n         List<Class> expectedClasses = LOGICAL_TYPE_CLASSES.get(schema.name());\n         if (expectedClasses == null)\n-            expectedClasses = SCHEMA_TYPE_CLASSES.get(schema.type());\n+            expectedClasses = SCHEMA_TYPE_CLASSES.getOrDefault(schema.type(), Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTk3NTE4OA=="}, "originalCommit": {"oid": "c8a361cf23bc1803402fc139c047db7c1fbdca07"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIzOTgzNjEwOnYy", "diffSide": "RIGHT", "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOVQyMTo0NToxNVrOJ8UOgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wOVQyMTo0NToxNVrOJ8UOgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzIyNTczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Class> expectedClasses = expectedClassesFor(schema);\n          \n          \n            \n                    List<Class<?>> expectedClasses = expectedClassesFor(schema);", "url": "https://github.com/apache/kafka/pull/9541#discussion_r667225730", "createdAt": "2021-07-09T21:45:15Z", "author": {"login": "kkonstantine"}, "path": "connect/api/src/main/java/org/apache/kafka/connect/data/ConnectSchema.java", "diffHunk": "@@ -221,13 +221,7 @@ public static void validateValue(String name, Schema schema, Object value) {\n             return;\n         }\n \n-        List<Class<?>> expectedClasses = expectedClassesFor(schema);\n-\n-        if (expectedClasses == null)\n-            throw new DataException(\"Invalid Java object for schema type \" + schema.type()\n-                    + \": \" + value.getClass()\n-                    + \" for field: \\\"\" + name + \"\\\"\");\n-\n+        List<Class> expectedClasses = expectedClassesFor(schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c25fdfc7e74f56d36159a6aa8b2ce1f056348d1"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3774, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}