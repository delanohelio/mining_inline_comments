{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjQyODU0", "number": 8484, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNzoyN1rODxsMBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODowM1rODxsNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDMwNzg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNzoyN1rOGFTTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzoxMlrOGGBoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg==", "bodyText": "Avoids a partition lookup", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212372", "createdAt": "2020-04-14T15:07:27Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1154,9 +1152,9 @@ class ReplicaManager(val config: KafkaConfig,\n    *  To avoid ISR thrashing, we only throttle a replica on the leader if it's in the throttled replica list,\n    *  the quota is exceeded and the replica is not in sync.\n    */\n-  def shouldLeaderThrottle(quota: ReplicaQuota, topicPartition: TopicPartition, replicaId: Int): Boolean = {\n-    val isReplicaInSync = nonOfflinePartition(topicPartition).exists(_.inSyncReplicaIds.contains(replicaId))\n-    !isReplicaInSync && quota.isThrottled(topicPartition) && quota.isQuotaExceeded\n+  def shouldLeaderThrottle(quota: ReplicaQuota, partition: Partition, replicaId: Int): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDg3NQ==", "bodyText": "Are the semantics the same? Do we ensure that Partition is not offline? Or does that not matter here?", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408970875", "createdAt": "2020-04-15T16:22:24Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1154,9 +1152,9 @@ class ReplicaManager(val config: KafkaConfig,\n    *  To avoid ISR thrashing, we only throttle a replica on the leader if it's in the throttled replica list,\n    *  the quota is exceeded and the replica is not in sync.\n    */\n-  def shouldLeaderThrottle(quota: ReplicaQuota, topicPartition: TopicPartition, replicaId: Int): Boolean = {\n-    val isReplicaInSync = nonOfflinePartition(topicPartition).exists(_.inSyncReplicaIds.contains(replicaId))\n-    !isReplicaInSync && quota.isThrottled(topicPartition) && quota.isQuotaExceeded\n+  def shouldLeaderThrottle(quota: ReplicaQuota, partition: Partition, replicaId: Int): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg=="}, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTQyNw==", "bodyText": "On second thought, I think this doesn't matter.", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408971427", "createdAt": "2020-04-15T16:23:12Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1154,9 +1152,9 @@ class ReplicaManager(val config: KafkaConfig,\n    *  To avoid ISR thrashing, we only throttle a replica on the leader if it's in the throttled replica list,\n    *  the quota is exceeded and the replica is not in sync.\n    */\n-  def shouldLeaderThrottle(quota: ReplicaQuota, topicPartition: TopicPartition, replicaId: Int): Boolean = {\n-    val isReplicaInSync = nonOfflinePartition(topicPartition).exists(_.inSyncReplicaIds.contains(replicaId))\n-    !isReplicaInSync && quota.isThrottled(topicPartition) && quota.isQuotaExceeded\n+  def shouldLeaderThrottle(quota: ReplicaQuota, partition: Partition, replicaId: Int): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg=="}, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDMxMTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODowM1rOGFTVew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODowM1rOGFTVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjg1OQ==", "bodyText": "Partition is already accessible, there's no need to look it it up in findPreferredReadReplica.", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212859", "createdAt": "2020-04-14T15:08:03Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -987,7 +987,7 @@ class ReplicaManager(val config: KafkaConfig,\n \n         // If we are the leader, determine the preferred read-replica\n         val preferredReadReplica = clientMetadata.flatMap(\n-          metadata => findPreferredReadReplica(tp, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))\n+          metadata => findPreferredReadReplica(partition, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3000, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}