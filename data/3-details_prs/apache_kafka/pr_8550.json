{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODczNzMz", "number": 8550, "title": "KAFKA-9850 Move KStream#repartition operator validation during Topolo\u2026", "bodyText": "Tickets: KAFKA-9850\n\nAdd  repartition operator validation during topology.build()\nMove one repartition operator validation test from IntegrationTest to UnitTest", "createdAt": "2020-04-25T08:47:35Z", "url": "https://github.com/apache/kafka/pull/8550", "merged": true, "mergeCommit": {"oid": "43a9e39983bc3fc2363723b9c555e49b016c1ae2"}, "closed": true, "closedAt": "2020-05-14T00:35:57Z", "author": {"login": "zhaohaidao"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbCAUqAH2gAyNDA4ODczNzMzOjE4MTdlODc3NjllYTE2ZDY2MzVjZjcwNDVjYTk2ODBhZTlmMjI2YzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcerX7kAH2gAyNDA4ODczNzMzOmM5ZjBiNWZkODY4N2VkMTAxM2QwNDcxZjNhMTQ4ZTNmZDhiYmI1NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/1817e87769ea16d6635cf7045ca9680ae9f226c4", "committedDate": "2020-04-25T08:42:12Z", "message": "KAFKA-9850 Move KStream#repartition operator validation during Topology build process"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDU2MTIw", "url": "https://github.com/apache/kafka/pull/8550#pullrequestreview-400456120", "createdAt": "2020-04-26T04:10:57Z", "commit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoxMDo1N1rOGL-XJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNDoyODo1MVrOGL-hxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTI1NA==", "bodyText": "nit: validateCopartition", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209254", "createdAt": "2020-04-26T04:10:57Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTY2Mg==", "bodyText": "Let's try to be consistent to use copartition instead of coPartition", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209662", "createdAt": "2020-04-26T04:13:20Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTkzNQ==", "bodyText": "One question, since we do verification in topology builder, is there any validation code in later stage that could be removed?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415209935", "createdAt": "2020-04-26T04:15:17Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMDU0Mg==", "bodyText": "Since we are only going to verify number of partitions, I think we could just set value as integer", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415210542", "createdAt": "2020-04-26T04:19:00Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIxMTk3NA==", "bodyText": "Could you clarify why we need this equality check?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r415211974", "createdAt": "2020-04-26T04:28:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,45 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCoPartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> coPartition : copartitionGroups) {\n+            final Map<String, InternalTopicProperties> coPartitionProperties = new HashMap<>();\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (coPartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    coPartitionProperties.put(topic, prop);\n+                }\n+            });\n+            if (coPartition.size() == coPartitionProperties.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "934c0a2e237e246c0508c64812027076ad1b511f", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/934c0a2e237e246c0508c64812027076ad1b511f", "committedDate": "2020-04-26T15:07:28Z", "message": "change CoPartition/coPartition to Copartition/copartition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/d51217944133d168916ef224d19eeb3093991f6a", "committedDate": "2020-04-28T23:55:18Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDUyNTY3", "url": "https://github.com/apache/kafka/pull/8550#pullrequestreview-404452567", "createdAt": "2020-05-02T00:00:51Z", "commit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDowMDo1MlrOGPYjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMDoyNDowMlrOGPYymA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NDE4OQ==", "bodyText": "It's better to use:\nfinal TopologyException expected = assertThrows(\n  TopologyException.class,\n  () -> builder.build(props)\n);\n// put assertions here", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418784189", "createdAt": "2020-05-02T00:00:52Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamRepartitionTest.java", "diffHunk": "@@ -104,6 +114,54 @@ public void shouldInvokePartitionerWhenSet() {\n         verify(streamPartitionerMock);\n     }\n \n+    @Test\n+    public void shouldThrowAnExceptionWhenNumberOfPartitionsOfRepartitionOperationsDoNotMatchWhenJoining() {\n+        final String topicB = \"topic-b\";\n+        final String outputTopic = \"topic-output\";\n+        final String topicBRepartitionedName = \"topic-b-scale-up\";\n+        final String inputTopicRepartitionedName = \"input-topic-scale-up\";\n+        final int topicBNumberOfPartitions = 2;\n+        final int inputTopicNumberOfPartitions = 4;\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final Repartitioned<Integer, String> inputTopicRepartitioned = Repartitioned\n+                .<Integer, String>as(inputTopicRepartitionedName)\n+                .withNumberOfPartitions(inputTopicNumberOfPartitions);\n+\n+        final Repartitioned<Integer, String> topicBRepartitioned = Repartitioned\n+                .<Integer, String>as(topicBRepartitionedName)\n+                .withNumberOfPartitions(topicBNumberOfPartitions);\n+\n+        final KStream<Integer, String> topicBStream = builder\n+                .stream(topicB, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(topicBRepartitioned);\n+\n+        builder.stream(inputTopic, Consumed.with(Serdes.Integer(), Serdes.String()))\n+                .repartition(inputTopicRepartitioned)\n+                .join(topicBStream, (value1, value2) -> value2, JoinWindows.of(Duration.ofSeconds(10)))\n+                .to(outputTopic);\n+\n+        final Map<String, Integer> repartitionTopicsWithNumOfPartitions = Utils.mkMap(\n+                Utils.mkEntry(toRepartitionTopicName(topicBRepartitionedName), topicBNumberOfPartitions),\n+                Utils.mkEntry(toRepartitionTopicName(inputTopicRepartitionedName), inputTopicNumberOfPartitions)\n+        );\n+\n+        try {\n+            builder.build(props);\n+            Assert.fail();\n+        } catch (final TopologyException t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjE2OQ==", "bodyText": "If I understand this code correct, copartitionGroups take the list of co-partitioned nodes (ie, processor names -> copartitionSourceGroups) and replaces each processor name (each processor should be a source-processor?) with the corresponding source topic name?\nIf yes, a comment might be helpful. Also, name rename copartitionGroups -> allCopartitionedSourceTopics ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786169", "createdAt": "2020-05-02T00:12:40Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NjI1MQ==", "bodyText": "rename node -> sourceNodeName ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786251", "createdAt": "2020-05-02T00:13:12Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Njg2OQ==", "bodyText": "What is topicPartNum? Please avoid abbreviation; make the code hard to read?\nShould this be numberOfPartitionsPerTopic ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418786869", "createdAt": "2020-05-02T00:16:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzA5Mw==", "bodyText": "Why do we add all the partition numbers for all internal topics here? Seems redundant to the step from above?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787093", "createdAt": "2020-05-02T00:18:37Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzYzNA==", "bodyText": "How can we be sure that partNums is not empty? If empty, next() would throw.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787634", "createdAt": "2020-05-02T00:21:47Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4NzY4Nw==", "bodyText": "Should this be !partNum.equals(first) ?", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787687", "createdAt": "2020-05-02T00:22:07Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -633,6 +634,43 @@ public final void copartitionSources(final Collection<String> sourceNodes) {\n         copartitionSourceGroups.add(Collections.unmodifiableSet(new HashSet<>(sourceNodes)));\n     }\n \n+    public void validateCopartition() {\n+        final List<Set<String>> copartitionGroups =\n+                copartitionSourceGroups\n+                        .stream()\n+                        .map(sourceGroup -> sourceGroup\n+                                .stream()\n+                                .flatMap(node -> nodeToSourceTopics.get(node).stream())\n+                                .collect(Collectors.toSet())\n+                        ).collect(Collectors.toList());\n+        for (final Set<String> copartition : copartitionGroups) {\n+            final Map<String, Integer> topicPartNum = new HashMap<>();\n+            copartition.forEach(topic -> {\n+                final InternalTopicProperties prop = internalTopicNamesWithProperties.get(topic);\n+                if (prop != null && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            internalTopicNamesWithProperties.forEach((topic, prop) -> {\n+                if (copartition.contains(topic) && prop.getNumberOfPartitions().isPresent()) {\n+                    topicPartNum.put(topic, prop.getNumberOfPartitions().get());\n+                }\n+            });\n+            if (copartition.equals(topicPartNum.keySet())) {\n+                final Collection<Integer> partNums = topicPartNum.values();\n+                final Integer first = partNums.iterator().next();\n+                for (final Integer partNum : partNums) {\n+                    if (partNum.equals(first)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4Nzk5Mg==", "bodyText": "I don't think so. Because the later verification that covers the case if the user specified all partitions, is the same code that verify co-partitioning depending on the input topic partition numbers. And we still need that check anyway.", "url": "https://github.com/apache/kafka/pull/8550#discussion_r418787992", "createdAt": "2020-05-02T00:24:02Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -312,6 +312,7 @@ public void buildAndOptimizeTopology(final Properties props) {\n                 graphNodePriorityQueue.offer(graphNode);\n             }\n         }\n+        internalTopologyBuilder.validateCoPartition();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwOTkzNQ=="}, "originalCommit": {"oid": "1817e87769ea16d6635cf7045ca9680ae9f226c4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDc4NTIx", "url": "https://github.com/apache/kafka/pull/8550#pullrequestreview-404478521", "createdAt": "2020-05-02T00:25:00Z", "commit": {"oid": "d51217944133d168916ef224d19eeb3093991f6a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4029bffd4e5afb61db112482afdb4e65a781db50", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4029bffd4e5afb61db112482afdb4e65a781db50", "committedDate": "2020-05-02T01:22:15Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f0b5fd8687ed1013d0471f3a148e3fd8bbb544", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/c9f0b5fd8687ed1013d0471f3a148e3fd8bbb544", "committedDate": "2020-05-06T16:35:52Z", "message": "resolve failed test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}