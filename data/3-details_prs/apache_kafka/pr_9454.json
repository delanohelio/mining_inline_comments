{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTc5MjU3", "number": 9454, "title": "KAFKA-10618: Add UUID class, use in protocols", "bodyText": "In order to support topic IDs, we need to create a public UUID class. This class will be used in protocols. This PR creates the class, modifies code to use the class in the message protocol and changes the code surrounding the existing messages/json that used the old UUID class.\nSimpleExampleMessage was used only for testing, so all usages of UUID have been switched to the new class.\nSubscriptionInfoData uses UUID for processId extensively. It also utilizes java.util.UUID implementation of Comparable so that UUIDs can be ordered. I felt that this functionality was not necessary for the UUIDs used for topic IDs so I decided to convert to java.util.UUID on the boundary of SubscriptionInfoData. I was only able to find the sorting necessary for testing, though, so this still may be changed.\nI also added tests for the methods of the new UUID class. The existing SimpleExampleMessage tests should be sufficient for testing the new UUID class in message protocols.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-19T18:00:24Z", "url": "https://github.com/apache/kafka/pull/9454", "merged": true, "mergeCommit": {"oid": "67bc4f08feb50ac135a4d8e1d469747102aad3a6"}, "closed": true, "closedAt": "2020-10-21T09:17:13Z", "author": {"login": "jolshan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUHlwpAH2gAyNTA2MTc5MjU3Ojc2OTY0MjBjYWM2ZDY2NDVkODAxYWY3NjRiN2YwZmMxZjE4ZDQzMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUfAP9gH2gAyNTA2MTc5MjU3OmM1ODhiYjkwNWMzNzI4YjJkZTU5YTQ4MTE5NDJjNjU2MzU5M2Y1Zjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7696420cac6d6645d801af764b7f0fc1f18d4333", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/7696420cac6d6645d801af764b7f0fc1f18d4333", "committedDate": "2020-10-19T17:26:18Z", "message": "Updated so that protocol uses kafka version of UUID class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962aebb1d692236569cd50a660f90428d3b41009", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/962aebb1d692236569cd50a660f90428d3b41009", "committedDate": "2020-10-19T17:26:51Z", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516UUID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2695732807de685b135b1afd8751efd72eca5801", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/2695732807de685b135b1afd8751efd72eca5801", "committedDate": "2020-10-19T17:26:51Z", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516UUID"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTcwODM1", "url": "https://github.com/apache/kafka/pull/9454#pullrequestreview-512570835", "createdAt": "2020-10-20T10:42:03Z", "commit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MjowM1rOHk2CYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1MDozNlrOHk2Xmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NjEzMA==", "bodyText": "We have already imported UUID, do we need to qualify here? I can see it was this way before, but not sure why.", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508396130", "createdAt": "2020-10-20T10:42:03Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -331,14 +331,14 @@ public String documentation() {\n     public static final DocumentedType UUID = new DocumentedType() {\n         @Override\n         public void write(ByteBuffer buffer, Object o) {\n-            final java.util.UUID uuid = (java.util.UUID) o;\n+            final org.apache.kafka.common.UUID uuid = (org.apache.kafka.common.UUID) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NjQ2MQ==", "bodyText": "Same as before, why don't we just use UUID since package was imported?", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508396461", "createdAt": "2020-10-20T10:42:31Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -331,14 +331,14 @@ public String documentation() {\n     public static final DocumentedType UUID = new DocumentedType() {\n         @Override\n         public void write(ByteBuffer buffer, Object o) {\n-            final java.util.UUID uuid = (java.util.UUID) o;\n+            final org.apache.kafka.common.UUID uuid = (org.apache.kafka.common.UUID) o;\n             buffer.putLong(uuid.getMostSignificantBits());\n             buffer.putLong(uuid.getLeastSignificantBits());\n         }\n \n         @Override\n         public Object read(ByteBuffer buffer) {\n-            return new java.util.UUID(buffer.getLong(), buffer.getLong());\n+            return new org.apache.kafka.common.UUID(buffer.getLong(), buffer.getLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMTU2Mg==", "bodyText": "Should we have a separate unit test for UUID.randomUUID to verify it is not zero or the sentinel?", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508401562", "createdAt": "2020-10-20T10:50:36Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/common/UUIDTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class UUIDTest {\n+\n+    @Test\n+    public void testSignificantBits() {\n+        UUID id = new UUID(34L, 98L);\n+\n+        assertEquals(id.getMostSignificantBits(), 34L);\n+        assertEquals(id.getLeastSignificantBits(), 98L);\n+    }\n+\n+    @Test\n+    public void testUUIDEquality() {\n+        UUID id1 = new UUID(12L, 13L);\n+        UUID id2 = new UUID(12L, 13L);\n+        UUID id3 = new UUID(24L, 38L);\n+\n+        assertEquals(UUID.ZERO_UUID, UUID.ZERO_UUID);\n+        assertEquals(id1, id2);\n+        assertNotEquals(id1, id3);\n+\n+        assertEquals(UUID.ZERO_UUID.hashCode(), UUID.ZERO_UUID.hashCode());\n+        assertEquals(id1.hashCode(), id2.hashCode());\n+        assertNotEquals(id1.hashCode(), id3.hashCode());\n+    }\n+\n+    @Test\n+    public void testStringConversion() {\n+        UUID id = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18188086894f055cc0f623dfc0de92bf3b3f095e", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/18188086894f055cc0f623dfc0de92bf3b3f095e", "committedDate": "2020-10-20T16:06:43Z", "message": "Added test for random UUID, simplified UUID in Type.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDM1MTY5", "url": "https://github.com/apache/kafka/pull/9454#pullrequestreview-513035169", "createdAt": "2020-10-20T18:48:15Z", "commit": {"oid": "18188086894f055cc0f623dfc0de92bf3b3f095e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c588bb905c3728b2de59a4811942c6563593f5f8", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/c588bb905c3728b2de59a4811942c6563593f5f8", "committedDate": "2020-10-20T20:43:03Z", "message": "Updated class description comment to match formats of other classes in package."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 566, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}