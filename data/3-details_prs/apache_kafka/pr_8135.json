{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODQ1NTMx", "number": 8135, "title": "KAFKA-9570: Define SSL configs in all worker config classes, not just distributed", "bodyText": "Jira\nAll SSL-related configs are currently defined only in the DistributedConfig class, even though they are applicable for standalone mode as well (since standalone mode also supports the Connect REST API). Because of how these configs are parsed by the framework, it's currently impossible to configure Connect in standalone mode to use SSL for the REST API with a password-protected keystore, key, or truststore, and even if no password protection is required, SSL configs will not be picked up correctly by the worker if any of the worker configs start with the listeners.https. prefix.\nThese changes define the relevant SSL-related configs in the parent WorkerConfig class, which should fix how they are picked up in standalone mode.\nA new unit test is added to verify that the StandaloneConfig picks up these configs correctly.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-18T21:30:21Z", "url": "https://github.com/apache/kafka/pull/8135", "merged": true, "mergeCommit": {"oid": "2d9376c8bb129d1f880887169890149b914e3a32"}, "closed": true, "closedAt": "2020-06-05T21:02:17Z", "author": {"login": "C0urante"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFrGguAFqTM2MDc2MjEyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABck1YSPgBqjMzNzExMjcyMzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzYyMTI1", "url": "https://github.com/apache/kafka/pull/8135#pullrequestreview-360762125", "createdAt": "2020-02-19T00:07:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzowMlrOFrW6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzowMlrOFrW6QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODQ0OA==", "bodyText": "Is SASL support significantly different and only needed in distributed mode?", "url": "https://github.com/apache/kafka/pull/8135#discussion_r381008448", "createdAt": "2020-02-19T00:07:02Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java", "diffHunk": "@@ -257,7 +257,6 @@\n                     CommonClientConfigs.DEFAULT_SECURITY_PROTOCOL,\n                     ConfigDef.Importance.MEDIUM,\n                     CommonClientConfigs.SECURITY_PROTOCOL_DOC)\n-            .withClientSslSupport()\n             .withClientSaslSupport()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODY4NDAx", "url": "https://github.com/apache/kafka/pull/8135#pullrequestreview-360868401", "createdAt": "2020-02-19T06:31:47Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDE0OTEx", "url": "https://github.com/apache/kafka/pull/8135#pullrequestreview-364414911", "createdAt": "2020-02-25T20:10:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMDozOVrOFuTkbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NTozNlrOFuUlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5OTQzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n          \n          \n            \n                            put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foo\");", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384099439", "createdAt": "2020-02-25T20:10:39Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNTEzOQ==", "bodyText": "Did you mean for the value to be ssk_...?", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384105139", "createdAt": "2020-02-25T20:22:10Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjAzMg==", "bodyText": "Wouldn't it be simpler and easier to understand the differences between the tests by pulling out the common objects? The whole class would then be something like:\n    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n\n    private static final Map<String, Object> EXPECTED;\n    static {\n        Map<String, Object> settings = new HashMap<>();\n        settings.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n        settings.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n        settings.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, new Password(\"ssl_keystore_password\"));\n        settings.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n        settings.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, new Password(\"ssl_truststore_password\"));\n        EXPECTED = Collections.unmodifiableMap(settings);\n    }\n\n    private static final Map<String, String> STANDALONE;\n    static {\n        Map<String, String> settings = new HashMap<>();\n        settings.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n        settings.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n        settings.put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n        STANDALONE = Collections.unmodifiableMap(settings);\n    }\n\n    private static Map<String, String> withStringValues(Map<String, ?> inputs, String prefix) {\n        return inputs.entrySet().stream()\n                     .collect(Collectors.toMap(\n                              entry -> prefix + entry.getKey(),\n                              entry -> literalValue(entry.getValue())\n                      ));\n    }\n\n    private static String literalValue(Object value) {\n        return value instanceof Password ? ((Password)value).value() : value.toString();\n    }\n\n    @Test\n    public void testRestServerPrefixedSslConfigs() {\n        Map<String, String> props = new HashMap<>(STANDALONE);\n        props.putAll(withStringValues(EXPECTED, HTTPS_LISTENER_PREFIX));\n\n        StandaloneConfig config = new StandaloneConfig(props);\n        assertEquals(EXPECTED, config.valuesWithPrefixAllOrNothing(HTTPS_LISTENER_PREFIX));\n    }\n\n    @Test\n    public void testRestServerNonPrefixedSslConfigs() {\n        Map<String, String> props = new HashMap<>(STANDALONE);\n        props.putAll(withStringValues(EXPECTED, \"\"));\n\n        StandaloneConfig config = new StandaloneConfig(props);\n        Map<String, Object> actualProps = config.valuesWithPrefixAllOrNothing(HTTPS_LISTENER_PREFIX)\n                                                .entrySet().stream()\n                                                .filter(entry -> EXPECTED.containsKey(entry.getKey()))\n                                                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        assertEquals(EXPECTED, actualProps);\n    }", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384116032", "createdAt": "2020-02-25T20:45:36Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n+\n+                // Custom props for test\n+                putAll(httpsListenerProps);\n+            }\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjM0ODY0", "url": "https://github.com/apache/kafka/pull/8135#pullrequestreview-372234864", "createdAt": "2020-03-10T18:54:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTYyOTQx", "url": "https://github.com/apache/kafka/pull/8135#pullrequestreview-392562941", "createdAt": "2020-04-14T02:32:20Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "937650798ddc65fdef0c1fc3c087ad151e4ce561", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/937650798ddc65fdef0c1fc3c087ad151e4ce561", "committedDate": "2020-05-25T19:38:38Z", "message": "KAFKA-9570: Define SSL configs in all worker config classes, not just distributed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27c978d78f95b40fc324be662ddad6adffe9c435", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/27c978d78f95b40fc324be662ddad6adffe9c435", "committedDate": "2020-05-25T19:38:38Z", "message": "KAFKA-9570: Fix test filename\n\nCo-Authored-By: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf679d3622d2ee45441810be1122234a4dd3c008", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/cf679d3622d2ee45441810be1122234a4dd3c008", "committedDate": "2020-05-25T19:38:39Z", "message": "KAFKA-9570: Refactor unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cf679d3622d2ee45441810be1122234a4dd3c008", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/cf679d3622d2ee45441810be1122234a4dd3c008", "committedDate": "2020-05-25T19:38:39Z", "message": "KAFKA-9570: Refactor unit test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1484, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}