{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMTMwNzA5", "number": 9596, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1Njo0M1rOE5XXsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowOTowOVrOE6aZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTg3MTg3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1Njo0M1rOHzxrLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToxMzoxOVrOH1Lrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MzI5Mg==", "bodyText": "If the end user delete the log files Manually , the server cannot be stopped. and The cannot startup it again? so in this case ,how do they resolve it ?", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524053292", "createdAt": "2020-11-16T09:56:43Z", "author": {"login": "lqjack"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()\n+\n+    // We create two directories logDir1 and logDir2 to help effectively test error handling\n+    // during LogManager.shutdown().\n+    val logDir1 = TestUtils.tempDir()\n+    val logDir2 = TestUtils.tempDir()\n+    logManager = createLogManager(Seq(logDir1, logDir2))\n+    assertEquals(2, logManager.liveLogDirs.size)\n+    logManager.startup()\n+\n+    val log1 = logManager.getOrCreateLog(new TopicPartition(name, 0), () => logConfig)\n+    val log2 = logManager.getOrCreateLog(new TopicPartition(name, 1), () => logConfig)\n+\n+    val logFile1 = new File(logDir1, name + \"-0\")\n+    assertTrue(logFile1.exists)\n+    val logFile2 = new File(logDir2, name + \"-1\")\n+    assertTrue(logFile2.exists)\n+\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+    log1.takeProducerSnapshot()\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+    log2.takeProducerSnapshot()\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+\n+    // This should cause log1.close() to fail during LogManger shutdown sequence.\n+    FileUtils.deleteDirectory(logFile1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM0NTQ1OQ==", "bodyText": "Sorry I do not understand the question.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524345459", "createdAt": "2020-11-16T15:19:19Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()\n+\n+    // We create two directories logDir1 and logDir2 to help effectively test error handling\n+    // during LogManager.shutdown().\n+    val logDir1 = TestUtils.tempDir()\n+    val logDir2 = TestUtils.tempDir()\n+    logManager = createLogManager(Seq(logDir1, logDir2))\n+    assertEquals(2, logManager.liveLogDirs.size)\n+    logManager.startup()\n+\n+    val log1 = logManager.getOrCreateLog(new TopicPartition(name, 0), () => logConfig)\n+    val log2 = logManager.getOrCreateLog(new TopicPartition(name, 1), () => logConfig)\n+\n+    val logFile1 = new File(logDir1, name + \"-0\")\n+    assertTrue(logFile1.exists)\n+    val logFile2 = new File(logDir2, name + \"-1\")\n+    assertTrue(logFile2.exists)\n+\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+    log1.takeProducerSnapshot()\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+    log2.takeProducerSnapshot()\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+\n+    // This should cause log1.close() to fail during LogManger shutdown sequence.\n+    FileUtils.deleteDirectory(logFile1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MzI5Mg=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNzQ3MA==", "bodyText": "What if error occur during the shutdown of the broker ?  should we log the error info to the log or just throw the exception ?", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524907470", "createdAt": "2020-11-17T06:17:46Z", "author": {"login": "lqjack"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()\n+\n+    // We create two directories logDir1 and logDir2 to help effectively test error handling\n+    // during LogManager.shutdown().\n+    val logDir1 = TestUtils.tempDir()\n+    val logDir2 = TestUtils.tempDir()\n+    logManager = createLogManager(Seq(logDir1, logDir2))\n+    assertEquals(2, logManager.liveLogDirs.size)\n+    logManager.startup()\n+\n+    val log1 = logManager.getOrCreateLog(new TopicPartition(name, 0), () => logConfig)\n+    val log2 = logManager.getOrCreateLog(new TopicPartition(name, 1), () => logConfig)\n+\n+    val logFile1 = new File(logDir1, name + \"-0\")\n+    assertTrue(logFile1.exists)\n+    val logFile2 = new File(logDir2, name + \"-1\")\n+    assertTrue(logFile2.exists)\n+\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+    log1.takeProducerSnapshot()\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+    log2.takeProducerSnapshot()\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+\n+    // This should cause log1.close() to fail during LogManger shutdown sequence.\n+    FileUtils.deleteDirectory(logFile1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MzI5Mg=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyNzk4Mg==", "bodyText": "It depends on the kind of error, but we do log the error information to the log today from within KafkaServer.shutdown().", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525527982", "createdAt": "2020-11-17T21:13:19Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()\n+\n+    // We create two directories logDir1 and logDir2 to help effectively test error handling\n+    // during LogManager.shutdown().\n+    val logDir1 = TestUtils.tempDir()\n+    val logDir2 = TestUtils.tempDir()\n+    logManager = createLogManager(Seq(logDir1, logDir2))\n+    assertEquals(2, logManager.liveLogDirs.size)\n+    logManager.startup()\n+\n+    val log1 = logManager.getOrCreateLog(new TopicPartition(name, 0), () => logConfig)\n+    val log2 = logManager.getOrCreateLog(new TopicPartition(name, 1), () => logConfig)\n+\n+    val logFile1 = new File(logDir1, name + \"-0\")\n+    assertTrue(logFile1.exists)\n+    val logFile2 = new File(logDir2, name + \"-1\")\n+    assertTrue(logFile2.exists)\n+\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+    log1.takeProducerSnapshot()\n+    log1.appendAsLeader(TestUtils.singletonRecords(\"test1\".getBytes()), leaderEpoch = 0)\n+\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+    log2.takeProducerSnapshot()\n+    log2.appendAsLeader(TestUtils.singletonRecords(\"test2\".getBytes()), leaderEpoch = 0)\n+\n+    // This should cause log1.close() to fail during LogManger shutdown sequence.\n+    FileUtils.deleteDirectory(logFile1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MzI5Mg=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTY4ODU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyMjowNFrOH0XixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo0MDowN1rOH0iLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzczMg==", "bodyText": "Hmm, since we are about to shut down the JVM, should we just log a WARN here instead of throwing the exception?", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524673732", "createdAt": "2020-11-16T22:22:04Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -477,27 +477,41 @@ class LogManager(logDirs: Seq[File],\n       jobs(dir) = jobsForDir.map(pool.submit).toSeq\n     }\n \n+    var firstExceptionOpt: Option[Throwable] = Option.empty\n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val errorsForDirJobs = dirJobs.map {\n+          future =>\n+            try {\n+              future.get\n+              Option.empty\n+            } catch {\n+              case e: ExecutionException =>\n+                error(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n+                Some(e.getCause)\n+            }\n+        }.filter{ e => e.isDefined }.map{ e => e.get }\n+\n+        if (firstExceptionOpt.isEmpty) {\n+          firstExceptionOpt = errorsForDirJobs.headOption\n+        }\n \n-        val logs = logsInDir(localLogsByDir, dir)\n+        if (errorsForDirJobs.isEmpty) {\n+          val logs = logsInDir(localLogsByDir, dir)\n \n-        // update the last flush point\n-        debug(s\"Updating recovery points at $dir\")\n-        checkpointRecoveryOffsetsInDir(dir, logs)\n+          // update the last flush point\n+          debug(s\"Updating recovery points at $dir\")\n+          checkpointRecoveryOffsetsInDir(dir, logs)\n \n-        debug(s\"Updating log start offsets at $dir\")\n-        checkpointLogStartOffsetsInDir(dir, logs)\n+          debug(s\"Updating log start offsets at $dir\")\n+          checkpointLogStartOffsetsInDir(dir, logs)\n \n-        // mark that the shutdown was clean by creating marker file\n-        debug(s\"Writing clean shutdown marker at $dir\")\n-        CoreUtils.swallow(Files.createFile(new File(dir, Log.CleanShutdownFile).toPath), this)\n+          // mark that the shutdown was clean by creating marker file\n+          debug(s\"Writing clean shutdown marker at $dir\")\n+          CoreUtils.swallow(Files.createFile(new File(dir, Log.CleanShutdownFile).toPath), this)\n+        }\n       }\n-    } catch {\n-      case e: ExecutionException =>\n-        error(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n-        throw e.getCause\n+      firstExceptionOpt.foreach{ e => throw e}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Nzg4OA==", "bodyText": "Great point. I've changed the code to do the same.\nMy understanding is that the exception swallow safety net exists inside KafkaServer.shutdown() today, but it makes sense to also just log a warning here instead instead of relying on the safety net: \n  \n    \n      kafka/core/src/main/scala/kafka/server/KafkaServer.scala\n    \n    \n         Line 732\n      in\n      bb34c5c\n    \n    \n    \n    \n\n        \n          \n           CoreUtils.swallow(logManager.shutdown(), this) \n        \n    \n  \n\n.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524847888", "createdAt": "2020-11-17T02:40:07Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -477,27 +477,41 @@ class LogManager(logDirs: Seq[File],\n       jobs(dir) = jobsForDir.map(pool.submit).toSeq\n     }\n \n+    var firstExceptionOpt: Option[Throwable] = Option.empty\n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val errorsForDirJobs = dirJobs.map {\n+          future =>\n+            try {\n+              future.get\n+              Option.empty\n+            } catch {\n+              case e: ExecutionException =>\n+                error(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n+                Some(e.getCause)\n+            }\n+        }.filter{ e => e.isDefined }.map{ e => e.get }\n+\n+        if (firstExceptionOpt.isEmpty) {\n+          firstExceptionOpt = errorsForDirJobs.headOption\n+        }\n \n-        val logs = logsInDir(localLogsByDir, dir)\n+        if (errorsForDirJobs.isEmpty) {\n+          val logs = logsInDir(localLogsByDir, dir)\n \n-        // update the last flush point\n-        debug(s\"Updating recovery points at $dir\")\n-        checkpointRecoveryOffsetsInDir(dir, logs)\n+          // update the last flush point\n+          debug(s\"Updating recovery points at $dir\")\n+          checkpointRecoveryOffsetsInDir(dir, logs)\n \n-        debug(s\"Updating log start offsets at $dir\")\n-        checkpointLogStartOffsetsInDir(dir, logs)\n+          debug(s\"Updating log start offsets at $dir\")\n+          checkpointLogStartOffsetsInDir(dir, logs)\n \n-        // mark that the shutdown was clean by creating marker file\n-        debug(s\"Writing clean shutdown marker at $dir\")\n-        CoreUtils.swallow(Files.createFile(new File(dir, Log.CleanShutdownFile).toPath), this)\n+          // mark that the shutdown was clean by creating marker file\n+          debug(s\"Writing clean shutdown marker at $dir\")\n+          CoreUtils.swallow(Files.createFile(new File(dir, Log.CleanShutdownFile).toPath), this)\n+        }\n       }\n-    } catch {\n-      case e: ExecutionException =>\n-        error(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n-        throw e.getCause\n+      firstExceptionOpt.foreach{ e => throw e}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3MzczMg=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTY5Mzc2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyMjo0OVrOH0XmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMjo1ODoxOVrOH0if7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDYyOQ==", "bodyText": "Hmm, do we need this given that we do this in tearDown() already?", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524674629", "createdAt": "2020-11-16T22:22:49Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0ODU4NA==", "bodyText": "Yeah this explicit shutdown is needed to:\n\nRe-create a new LogManager instance with multiple logDirs for this test. This is different from the default one provided in setUp().\nHelp do some additional checks post shutdown (towards the end of this test).", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524848584", "createdAt": "2020-11-17T02:42:24Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDYyOQ=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg1MzIzMQ==", "bodyText": "Thinking about it again, you are right. I have eliminated the need for the shutdown() now by using a LogManager instance specific to the test.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r524853231", "createdAt": "2020-11-17T02:58:19Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -83,6 +87,51 @@ class LogManagerTest {\n     log.appendAsLeader(TestUtils.singletonRecords(\"test\".getBytes()), leaderEpoch = 0)\n   }\n \n+  /**\n+   * Tests that all internal futures are completed before LogManager.shutdown() returns to the\n+   * caller during error situations.\n+   */\n+  @Test\n+  def testHandlingExceptionsDuringShutdown(): Unit = {\n+    logManager.shutdown()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3NDYyOQ=="}, "originalCommit": {"oid": "3a36b54fe6f50e2538ff684be7ed626c3afe83f4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg1MDEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowNjo1N1rOH1ebLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1MDo1MlrOH1fV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTA1NA==", "bodyText": "Nit: this should be in the previous line.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525835054", "createdAt": "2020-11-18T06:06:57Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {\n+          future =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDA4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525850087", "createdAt": "2020-11-18T06:50:52Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {\n+          future =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTA1NA=="}, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg1MzA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowODoxNlrOH1ec5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1MDo0NVrOH1fVtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTQ5NQ==", "bodyText": "This looks wrong. exists short-circuits. I think you want map followed by exists.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525835495", "createdAt": "2020-11-18T06:08:16Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDAzNw==", "bodyText": "Thats a really good point. Done.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525850037", "createdAt": "2020-11-18T06:50:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTQ5NQ=="}, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Njg1NDgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjowOTowOVrOH1ed-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNjo1MTowMVrOH1fWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTc2OQ==", "bodyText": "You can use scala.util.Try to wrap the call and get a Success or Failure.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525835769", "createdAt": "2020-11-18T06:09:09Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {\n+          future =>\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1MDE1Ng==", "bodyText": "Good idea, done.", "url": "https://github.com/apache/kafka/pull/9596#discussion_r525850156", "createdAt": "2020-11-18T06:51:01Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,25 +479,33 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        dirJobs.foreach(_.get)\n+        val hasErrors = dirJobs.exists {\n+          future =>\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzNTc2OQ=="}, "originalCommit": {"oid": "f917f0c24cebbb0fb5eb7029ccb6676734b60b3e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}