{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDY1NDM5", "number": 9029, "title": "KAFKA-10255: Fix flaky testOneWayReplicationWithAutoOffsetSync test", "bodyText": "In the original test, we will sleep for static 5 seconds to ensure the automated group offset sync is complete. It sometimes synced fast (less than 1 sec), and sometimes slow (~ 20 seconds). I rewrite the sleep to wait for specific condition:\n\nconsumer.endOffsets to make sure the topic partition metadata is synced\nbackupClient.listConsumerGroupOffsets to make sure the consumerGroupOffset is also synced\n\nI've tested in my local environment a lot of times. It can make the test more stable.\nThanks.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-07-16T10:01:13Z", "url": "https://github.com/apache/kafka/pull/9029", "merged": true, "mergeCommit": {"oid": "43a8b4458d5b7f6d9a4b623cf88b2061843f360a"}, "closed": true, "closedAt": "2020-07-30T21:01:21Z", "author": {"login": "showuon"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1cF0dAH2gAyNDUwMDY1NDM5OjE2MWM2NWE2YzM0MzUwODUxZWM2ZGZlMDYwZGMzODBmNmQ4ODM5NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6CVi7AFqTQ1ODU3MTkzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "161c65a6c34350851ec6dfe060dc380f6d88394b", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/161c65a6c34350851ec6dfe060dc380f6d88394b", "committedDate": "2020-07-16T09:47:46Z", "message": "KAFKA-10255: fix flaky testOneWayReplicationWithAutorOffsetSync1 test by waiting the offset ready"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70dc72477c50be350542a73e42c822852aca184f", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/70dc72477c50be350542a73e42c822852aca184f", "committedDate": "2020-07-16T09:54:05Z", "message": "KAFKA-10255: fix check style issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzAyMTI1", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-449702125", "createdAt": "2020-07-16T10:02:04Z", "commit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowMjowNFrOGykBew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDowMjowNFrOGykBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3MjE4Nw==", "bodyText": "rename the typo test name", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455672187", "createdAt": "2020-07-16T10:02:04Z", "author": {"login": "showuon"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();\n+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream().mapToLong(metadata -> metadata.offset()).sum();\n+\n+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));\n+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();\n+\n+            // make sure the consumer group offsets are synced to expected number\n+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;\n+        }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n+    }\n \n     @Test\n-    public void testOneWayReplicationWithAutorOffsetSync1() throws InterruptedException {\n+    public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTk5MjEx", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-449999211", "createdAt": "2020-07-16T16:08:09Z", "commit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowODowOVrOGyyECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowODowOVrOGyyECQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjIxNw==", "bodyText": "could we have a more intuitive variable name for partitionInd? e.g. partitionId or partitionIndex?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455902217", "createdAt": "2020-07-16T16:08:09Z", "author": {"login": "ning2008wisc"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDAwMzY2", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-450000366", "createdAt": "2020-07-16T16:09:26Z", "commit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowOToyNlrOGyyHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowOToyNlrOGyyHjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMzExNg==", "bodyText": "could we consider to pass in the consumer group name as a input variable of waitForConsumerGroupOffsetSync, so that waitForConsumerGroupOffsetSync looks more generic?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r455903116", "createdAt": "2020-07-16T16:09:26Z", "author": {"login": "ning2008wisc"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(\n+            partitionInd -> {\n+                for (String topic: topics) {\n+                    tps.add(new TopicPartition(topic, partitionInd));\n+                }\n+            }\n+        );\n+        long expectedTotalOffsets = NUM_RECORDS_PRODUCED * topics.size();\n+\n+        waitForCondition(() -> {\n+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =\n+                backupClient.listConsumerGroupOffsets(\"consumer-group-1\").partitionsToOffsetAndMetadata().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70dc72477c50be350542a73e42c822852aca184f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88400bf350b60684db33828d690cfa238d056781", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/88400bf350b60684db33828d690cfa238d056781", "committedDate": "2020-07-17T05:31:12Z", "message": "KAFKA-10255: address reviewer's comment to rename variable and make the method looks more generic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTQ1NjQ1", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-454145645", "createdAt": "2020-07-23T13:46:02Z", "commit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0NjowM1rOG2LQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowMTowNVrOG2Orfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDYxNA==", "bodyText": "We can remove this field now that it's unused", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459460614", "createdAt": "2020-07-23T13:46:03Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -62,6 +65,7 @@\n     private static final int NUM_PARTITIONS = 10;\n     private static final int RECORD_TRANSFER_DURATION_MS = 20_000;\n     private static final int CHECKPOINT_DURATION_MS = 20_000;\n+    private static final int OFFSET_SYNC_DURATION_MS = 30_000;\n \n     private Time time = Time.SYSTEM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxNjc5OQ==", "bodyText": "I'm not sure this is much better than a simple for loop. WDYT?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r459516799", "createdAt": "2020-07-23T15:01:05Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -315,9 +319,34 @@ public void testReplication() throws InterruptedException {\n             backup.kafka().consume(NUM_RECORDS_PRODUCED, 2 * RECORD_TRANSFER_DURATION_MS, \"primary.test-topic-2\").count());\n     }\n \n+    private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, List<String> topics, String consumerGroupId)\n+            throws InterruptedException {\n+        Admin backupClient = backup.kafka().createAdminClient();\n+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());\n+        IntStream.range(0, NUM_PARTITIONS).forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88400bf350b60684db33828d690cfa238d056781"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/5345c6835ef42da973b794634d9b8d65f27ee80a", "committedDate": "2020-07-26T07:03:55Z", "message": "KAFKA-10255: remove unused variable and make the test more reliable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/5345c6835ef42da973b794634d9b8d65f27ee80a", "committedDate": "2020-07-26T07:03:55Z", "message": "KAFKA-10255: remove unused variable and make the test more reliable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzkxMTMz", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-458391133", "createdAt": "2020-07-30T13:18:37Z", "commit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxODozOFrOG5ingw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozMDowOFrOG5jE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTE4Nw==", "bodyText": "Can we add the types <byte[], byte[]> to ConsumerRecords?", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989187", "createdAt": "2020-07-30T13:18:38Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4OTU0Ng==", "bodyText": "replicaing -> replicating", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462989546", "createdAt": "2020-07-30T13:19:10Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");\n+    }\n+\n     @Test\n     public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {\n \n         // create consumers before starting the connectors so we don't need to wait for discovery\n-        Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-1\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-1\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MjY4Mw==", "bodyText": "nit: The sentence sounds slightly better if you remove the", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462992683", "createdAt": "2020-07-30T13:24:02Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();\n+            return NUM_RECORDS_PRODUCED == totalConsumedRecords.addAndGet(records.count());\n+        }, RECORD_CONSUME_DURATION_MS, \"Consumer cannot consume all the records in time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NTY0NA==", "bodyText": "We can move that line after the waitForCondition() block to just commit once all records have been consumed.", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462995644", "createdAt": "2020-07-30T13:28:33Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -345,15 +342,24 @@ private void waitForConsumerGroupOffsetSync(Consumer<byte[], byte[]> consumer, L\n         }, OFFSET_SYNC_DURATION_MS, \"Consumer group offset sync is not complete in time\");\n     }\n \n+    private void waitForConsumingAllRecords(Consumer<byte[], byte[]> consumer) throws InterruptedException {\n+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);\n+        waitForCondition(() -> {\n+            ConsumerRecords records = consumer.poll(Duration.ofMillis(500));\n+            consumer.commitSync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NjczMg==", "bodyText": "replicaing -> replicating", "url": "https://github.com/apache/kafka/pull/9029#discussion_r462996732", "createdAt": "2020-07-30T13:30:08Z", "author": {"login": "mimaison"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -387,11 +393,11 @@ public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedExceptio\n         }\n \n         // create a consumer at primary cluster to consume the new topic\n-        consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n-            \"group.id\", \"consumer-group-1\"), \"test-topic-2\");\n-        consumer1.poll(Duration.ofMillis(500));\n-        consumer1.commitSync();\n-        consumer1.close();\n+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(\n+            \"group.id\", \"consumer-group-1\"), \"test-topic-2\")) {\n+            // we need to wait for consuming all the records for MM2 replicaing the expected offsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5345c6835ef42da973b794634d9b8d65f27ee80a"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f", "committedDate": "2020-07-30T14:17:37Z", "message": "KAFKA-10255: address the reviewer's comments to refactor the code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTcxOTMx", "url": "https://github.com/apache/kafka/pull/9029#pullrequestreview-458571931", "createdAt": "2020-07-30T16:37:02Z", "commit": {"oid": "8bc4a543dda6ddd90d752f7e6a64c63d85a1de3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1308, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}