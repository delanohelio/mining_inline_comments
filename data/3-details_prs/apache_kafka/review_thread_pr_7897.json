{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5Mjc0NDA1", "number": 7897, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNDo1N1rODV0-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzowOVrODYBKkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0NzIwOnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNDo1N1rOFaQIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTo1MjoxMVrOFbk8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTYwOA==", "bodyText": "This is a clean-up as there is a duplicate struct in JoinGroupRequest already", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071608", "createdAt": "2020-01-05T06:04:57Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupResponse.java", "diffHunk": "@@ -31,7 +31,6 @@\n \n     public static final String UNKNOWN_PROTOCOL = \"\";\n     public static final int UNKNOWN_GENERATION_ID = -1;\n-    public static final String UNKNOWN_MEMBER_ID = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MTIyNw==", "bodyText": "Great!", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364461227", "createdAt": "2020-01-08T21:52:11Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupResponse.java", "diffHunk": "@@ -31,7 +31,6 @@\n \n     public static final String UNKNOWN_PROTOCOL = \"\";\n     public static final int UNKNOWN_GENERATION_ID = -1;\n-    public static final String UNKNOWN_MEMBER_ID = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTYwOA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0NzMzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNTozMlrOFaQIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNTozMlrOFaQIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTYyMw==", "bodyText": "This file only contains clean-ups.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071623", "createdAt": "2020-01-05T06:05:32Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -279,7 +279,7 @@ public void testGroupMaxSizeExceptionIsFatal() {\n         mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0NzU5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNjowN1rOFaQIpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNjowN1rOFaQIpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTY1Mw==", "bodyText": "We couldn't use JoinGroupRequest/Response defined structs here due to import control", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071653", "createdAt": "2020-01-05T06:06:07Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,16 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                requestData.setGroupInstanceId(null);\n+                requestData.setMemberId(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0ODEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNzozMFrOFaQI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNzozMFrOFaQI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTcxMg==", "bodyText": "The generation.id check needs to be put upfront before L734 as it treats txn commit same as assign mode consumer", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071712", "createdAt": "2020-01-05T06:07:30Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0ODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowOTo0OFrOFaQJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowOTo0OFrOFaQJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTc5Ng==", "bodyText": "It's debatable whether we should continue going to group state based for commit logic for transactional commit as well. We decide to leave it as it is for now, unless the group state becomes concerning factor.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071796", "createdAt": "2020-01-05T06:09:48Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (generationId < 0 && group.is(Empty) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0ODg1OnYy", "diffSide": "LEFT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjoxMDoxMlrOFaQJOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjoxMDoxMlrOFaQJOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTgwMA==", "bodyText": "clean-up for duplicate val.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071800", "createdAt": "2020-01-05T06:10:12Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -1169,7 +1172,6 @@ object GroupCoordinator {\n   val NoProtocol = \"\"\n   val NoLeader = \"\"\n   val NoGeneration = -1\n-  val NoMemberId = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0OTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjoxMToyNFrOFaQJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjowNjoxOFrOFblSRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTg1MA==", "bodyText": "Although it is possible to create a more condensed xx and (yy || zz) expression, I found current verbose version is more readable and understandable.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071850", "createdAt": "2020-01-05T06:11:24Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala", "diffHunk": "@@ -402,6 +404,15 @@ private[group] class GroupMetadata(val groupId: String, initialState: GroupState\n       false\n   }\n \n+  def isUnknownCommit(memberId: String,\n+                      producerId: Long): Boolean = {\n+    if (producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2Njc1Nw==", "bodyText": "prop: See my other comment: I think manual commit could not happen for txnal commit, and if yes we could make the caller logic more explicit -- it means a bit more LOC, but the logic is more readable.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364466757", "createdAt": "2020-01-08T22:06:18Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala", "diffHunk": "@@ -402,6 +404,15 @@ private[group] class GroupMetadata(val groupId: String, initialState: GroupState\n       false\n   }\n \n+  def isUnknownCommit(memberId: String,\n+                      producerId: Long): Boolean = {\n+    if (producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTg1MA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0OTk4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjoxNDowOFrOFaQJug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjoxNDowOFrOFaQJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTkzMA==", "bodyText": "By adding reset in the end of helper function, we reduced redundant replica manager reset.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r363071930", "createdAt": "2020-01-05T06:14:08Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -1222,6 +1200,7 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.NONE, followerSyncGroupResult._2)\n     assertTrue(getGroup(groupId).is(Stable))\n \n+    EasyMock.reset(replicaManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTA3ODc2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTo1MTo1N1rOFbk8Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzozNzo0NFrOFbs9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MTE1NA==", "bodyText": "qq: Hmm, why we can retry with UNKNOWN_MEMBER_ID?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364461154", "createdAt": "2020-01-08T21:51:57Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1465,15 +1465,14 @@ public void handleResponse(AbstractResponse response) {\n                         lookupCoordinator(FindCoordinatorRequest.CoordinatorType.GROUP, builder.data.groupId());\n                     }\n                 } else if (error == Errors.UNKNOWN_TOPIC_OR_PARTITION\n-                        || error == Errors.COORDINATOR_LOAD_IN_PROGRESS) {\n-                    // If the topic is unknown or the coordinator is loading, retry with the current coordinator\n+                        || error == Errors.COORDINATOR_LOAD_IN_PROGRESS\n+                        || error == Errors.UNKNOWN_MEMBER_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5MjQ4MA==", "bodyText": "This is to match the same behavior on the consumer side. After some thoughts I don't think this is actually correct behavior as we are using the additional information for fencing purposes.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364592480", "createdAt": "2020-01-09T07:37:44Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1465,15 +1465,14 @@ public void handleResponse(AbstractResponse response) {\n                         lookupCoordinator(FindCoordinatorRequest.CoordinatorType.GROUP, builder.data.groupId());\n                     }\n                 } else if (error == Errors.UNKNOWN_TOPIC_OR_PARTITION\n-                        || error == Errors.COORDINATOR_LOAD_IN_PROGRESS) {\n-                    // If the topic is unknown or the coordinator is loading, retry with the current coordinator\n+                        || error == Errors.COORDINATOR_LOAD_IN_PROGRESS\n+                        || error == Errors.UNKNOWN_MEMBER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MTE1NA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTA4NjQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTo1NTowMFrOFblBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMTo1NTowMFrOFblBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MjM0OA==", "bodyText": "qq: Why not setting the default to UNKNOWN_GENERATION_ID etc for those new fields? It seems above we treat them as sentinel values anyways -- i.e. if they are not set, then setting them to those \"unknown\" values is safe and we check that if they are not unknown then the version should be newer.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364462348", "createdAt": "2020-01-08T21:55:00Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "diffHunk": "@@ -31,8 +33,15 @@\n       \"about\": \"The current producer ID in use by the transactional ID.\" },\n     { \"name\": \"ProducerEpoch\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The current epoch associated with the producer ID.\" },\n+    { \"name\": \"GenerationId\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"-1\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTEwOTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjowNDoxOFrOFblPdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMzo0MTozMFrOFckJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NjAzOQ==", "bodyText": "prop: I'd propose we just make the producerId != NO_PRODUCER_ID condition in the first place to explicitly separate the checking logic for transactional / non-txnal commit starting at 732, e.g.:\nif (producerId != NO_PRODUCER_ID) {\n   // check if it is unknown\n} else {\n   // check if it is unknown, and\n   // check if it is manual\n}\n\nBecause if producer != NO_PRODUCER_ID it should never be manual, or am I wrong?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364466039", "createdAt": "2020-01-08T22:04:18Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId, generationId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (group.isManualCommit(generationId) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDk3Mg==", "bodyText": "I think the example with KIP-98 is actually doing assign mode, single writer producer.\nSo the answer is false, txn commit could be manual", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364924972", "createdAt": "2020-01-09T19:39:43Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId, generationId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (group.isManualCommit(generationId) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NjAzOQ=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NzE3NQ==", "bodyText": "What I'm thinking is mainly for debuggability, wondering if we explicitly separate the logic of txn / non-txn commit it is more readable -- currently the isUnknownCommit and isManualCommit are a bit mixed.\nThinking about this a bit more, how about the following within a single function (ordered):\n\n\nif generation id < 0 or state is Empty, we just bindly store offset (we can actually be stricter and check that member.id should always be UNKNOWN, but this is not there before so we do not really need to enforce it).\n\n\nelse, check memberId != JoinGroupRequest.UNKNOWN_MEMBER_ID && !has(memberId).\n\n\nFor both txn commit or consumer commit, 2) should be the case. So we do not need to really distinguish on producerId --- i.e. previously if the producerId is set we do not do the check of 2), now we always do it regardless. Is that correct?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r365477175", "createdAt": "2020-01-11T00:07:58Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId, generationId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (group.isManualCommit(generationId) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NjAzOQ=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MjgxOQ==", "bodyText": "I think this actually looks like a much simpler version, just to add up after case 2), we need two more cases:\n3. else if generationId >= 0 && generationId != group.generationId we return ILLEGAL_GENERATION\n4. else if producerId != NO_PRODUCER_ID we blindly store offsets\nThe case 3 is necessary for generation check on both txn and non-txn commits. The case 4) is necessary as we don't want txn commit fall into group case match, where we actually do a val member = group.get(memberId). The member.id could still be unknown at this moment with an older txn producer who doesn't pack in consumer metadata.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r365482819", "createdAt": "2020-01-11T00:44:37Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId, generationId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (group.isManualCommit(generationId) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NjAzOQ=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5NjY3Ng==", "bodyText": "If we refactor the logic in the proposed way, testCommitOffsetInCompletingRebalanceFromUnknownMemberId will fail as we are not able to catch the unknown member.id when the commit is non-txn.\nMy main argument is that the complexity we are handling here is under-estimated, in a sense that for txn commit we also need to worry about whether this producer is on the old version or new version. I would attempt a separation logic just as what we did for doJoinGroup and doUnknownJoinGroup which is able to separate the txn vs non-txn commits", "url": "https://github.com/apache/kafka/pull/7897#discussion_r365496676", "createdAt": "2020-01-11T03:41:30Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -723,14 +726,14 @@ class GroupCoordinator(val brokerId: Int,\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n       } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n         responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n-      } else if ((generationId < 0 && group.is(Empty)) || (producerId != NO_PRODUCER_ID)) {\n+      } else if (generationId >= 0 && generationId != group.generationId) {\n+        // Validate non-zero generation id for both transactional and non-transactional commits.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.ILLEGAL_GENERATION })\n+      } else if (group.isUnknownCommit(memberId, producerId, generationId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (group.isManualCommit(generationId) || producerId != NO_PRODUCER_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NjAzOQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTExNjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMjowNzoyM1rOFblT7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODozNjozMlrOFb_j4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NzE4MQ==", "bodyText": "nit: why UNKNOWN_GENERATION_ID and UNKNOWN_PROTOCOL belongs to response while UNKNOWN_MEMBER_ID belongs to request? If there's no real good reason let's put them in a single class.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364467181", "createdAt": "2020-01-08T22:07:23Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1410,10 +1410,10 @@ class KafkaApis(val requestChannel: RequestChannel,\n       // the group.instance.id field, so static members could accidentally become \"dynamic\", which leads to wrong states.\n       sendResponseCallback(JoinGroupResult(\n         List.empty,\n-        JoinGroupResponse.UNKNOWN_MEMBER_ID,\n+        JoinGroupRequest.UNKNOWN_MEMBER_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzI1MQ==", "bodyText": "I think it makes sense to move all the constant to request class.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r364897251", "createdAt": "2020-01-09T18:36:32Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1410,10 +1410,10 @@ class KafkaApis(val requestChannel: RequestChannel,\n       // the group.instance.id field, so static members could accidentally become \"dynamic\", which leads to wrong states.\n       sendResponseCallback(JoinGroupResult(\n         List.empty,\n-        JoinGroupResponse.UNKNOWN_MEMBER_ID,\n+        JoinGroupRequest.UNKNOWN_MEMBER_ID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2NzE4MQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU3OTQwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDowOTowNVrOFci98Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMzoyNDo1M1rOFckFzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NzM2MQ==", "bodyText": "Why reset the replica manager mock here?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r365477361", "createdAt": "2020-01-11T00:09:05Z", "author": {"login": "guozhangwang"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2443,6 +2422,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithIllegalGeneration(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5NTc1Nw==", "bodyText": "As we have used dynamicJoinGroup IIUC", "url": "https://github.com/apache/kafka/pull/7897#discussion_r365495757", "createdAt": "2020-01-11T03:24:53Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2443,6 +2422,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithIllegalGeneration(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NzM2MQ=="}, "originalCommit": null, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTUxODQ5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoxODo1OFrOFdGfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoxODo1OFrOFdGfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1OTI4OQ==", "bodyText": "Since TxnOffsetCommit has been converted to use the generated protocol and we are bumping it here, let's add flexible version support. I was going to do this in #7931, but we may as well just do one version bump instead of two.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366059289", "createdAt": "2020-01-13T22:18:58Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "diffHunk": "@@ -20,7 +20,9 @@\n   // Version 1 is the same as version 0.\n   //\n   // Version 2 adds the committed leader epoch.\n-  \"validVersions\": \"0-2\",\n+  //\n+  // Version 3 adds the member.id, group.instance.id and generation.id.\n+  \"validVersions\": \"0-3\",\n   \"flexibleVersions\": \"none\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk3Mjc1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyNzozNVrOFddtjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozMDo1NVrOFdfzyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTgyMg==", "bodyText": "If we make these fatal errors, then the user will have to close the producer and instantiate a new one. I think as long as the producer can still abort the transaction, they should be abortable errors.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366439822", "createdAt": "2020-01-14T16:27:35Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1497,4 +1495,13 @@ public void handleResponse(AbstractResponse response) {\n             }\n         }\n     }\n+\n+    private boolean isFatalException(Errors error) {\n+        return error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED\n+                || error == Errors.INVALID_PRODUCER_EPOCH\n+                || error == Errors.UNSUPPORTED_FOR_MESSAGE_FORMAT\n+                || error == Errors.FENCED_INSTANCE_ID\n+                || error == Errors.UNKNOWN_MEMBER_ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MTA2OQ==", "bodyText": "The purpose of throwing these exceptions should be catching user's attention IMO, as this indicates something going wrong on the consumer side. So if this is abortable error, how could we inform application(i.e consumer) level that sth is going wrong? Or we believe that as long as the consumer is in a bad state, it will get itself fenced eventually?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366471069", "createdAt": "2020-01-14T17:24:27Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1497,4 +1495,13 @@ public void handleResponse(AbstractResponse response) {\n             }\n         }\n     }\n+\n+    private boolean isFatalException(Errors error) {\n+        return error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED\n+                || error == Errors.INVALID_PRODUCER_EPOCH\n+                || error == Errors.UNSUPPORTED_FOR_MESSAGE_FORMAT\n+                || error == Errors.FENCED_INSTANCE_ID\n+                || error == Errors.UNKNOWN_MEMBER_ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTgyMg=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NDE4Ng==", "bodyText": "Abortable errors are still propagated to the user. But the user can abort the transaction and continue with the same producer. A fatal error on the other hand requires the user to close the producer.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366474186", "createdAt": "2020-01-14T17:30:55Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1497,4 +1495,13 @@ public void handleResponse(AbstractResponse response) {\n             }\n         }\n     }\n+\n+    private boolean isFatalException(Errors error) {\n+        return error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED\n+                || error == Errors.INVALID_PRODUCER_EPOCH\n+                || error == Errors.UNSUPPORTED_FOR_MESSAGE_FORMAT\n+                || error == Errors.FENCED_INSTANCE_ID\n+                || error == Errors.UNKNOWN_MEMBER_ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTgyMg=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk4MTA4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/TxnOffsetCommitResponse.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTo0MVrOFddylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyOTo0MVrOFddylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0MTExMA==", "bodyText": "Let's add flexible version support in the response also.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366441110", "createdAt": "2020-01-14T16:29:41Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/TxnOffsetCommitResponse.json", "diffHunk": "@@ -18,8 +18,11 @@\n   \"type\": \"response\",\n   \"name\": \"TxnOffsetCommitResponse\",\n   // Starting in version 1, on quota violation, brokers send out responses before throttling.\n+  //\n   // Version 2 is the same as version 1.\n-  \"validVersions\": \"0-2\",\n+  //\n+  // Version 3 adds illegal generation, fenced instance id, and unknown member id errors.\n+  \"validVersions\": \"0-3\",\n   \"flexibleVersions\": \"none\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDM0MjI4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyMzo1NFrOFdhT_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyMzo1NFrOFdhT_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5ODgxMg==", "bodyText": "Should we set the default to \"\"?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366498812", "createdAt": "2020-01-14T18:23:54Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "diffHunk": "@@ -31,8 +33,15 @@\n       \"about\": \"The current producer ID in use by the transactional ID.\" },\n     { \"name\": \"ProducerEpoch\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The current epoch associated with the producer ID.\" },\n+    { \"name\": \"GenerationId\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"-1\", \"ignorable\": true,\n+      \"about\": \"The generation of the consumer.\" },\n+    { \"name\": \"MemberId\", \"type\": \"string\", \"versions\": \"3+\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDM0NzkxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyNTo0N1rOFdhXgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyNTo0N1rOFdhXgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5OTcxNA==", "bodyText": "It's a bit inconsistent to set these as ignorable if the builder actually raises an exception. I would suggest making them non-ignorable and removing the checks inside the builder.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366499714", "createdAt": "2020-01-14T18:25:47Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/TxnOffsetCommitRequest.json", "diffHunk": "@@ -31,8 +33,15 @@\n       \"about\": \"The current producer ID in use by the transactional ID.\" },\n     { \"name\": \"ProducerEpoch\", \"type\": \"int16\", \"versions\": \"0+\",\n       \"about\": \"The current epoch associated with the producer ID.\" },\n+    { \"name\": \"GenerationId\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"-1\", \"ignorable\": true,\n+      \"about\": \"The generation of the consumer.\" },\n+    { \"name\": \"MemberId\", \"type\": \"string\", \"versions\": \"3+\", \"ignorable\": true,\n+      \"about\": \"The member ID assigned by the group coordinator.\" },\n+    { \"name\": \"GroupInstanceId\", \"type\": \"string\", \"versions\": \"3+\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDM2MDE4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoyOTo0M1rOFdhfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToxNzoxMFrOFdi27A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMTY2NA==", "bodyText": "These test cases are a bit odd. Why would we get a FENCED_INSTANCE_ID if we have not provided an instance id? I think it would make sense to do all of the client changes in a single PR and all the server changes in a separate PR. I'm ok doing them all at once also since this PR is not that big.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366501664", "createdAt": "2020-01-14T18:29:43Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -940,6 +943,99 @@ public void testUnsupportedForMessageFormatInTxnOffsetCommit() {\n         assertFatalError(UnsupportedForMessageFormatException.class);\n     }\n \n+    @Test\n+    public void testFencedInstanceIdInTxnOffsetCommit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNDE0MA==", "bodyText": "Cool, I will separate the PR to leave only server side changes", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366524140", "createdAt": "2020-01-14T19:17:10Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -940,6 +943,99 @@ public void testUnsupportedForMessageFormatInTxnOffsetCommit() {\n         assertFatalError(UnsupportedForMessageFormatException.class);\n     }\n \n+    @Test\n+    public void testFencedInstanceIdInTxnOffsetCommit() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMTY2NA=="}, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDM2NDU2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODozMToxMVrOFdhh2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1NDoyOFrOFdiNzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMjM2Mw==", "bodyText": "nit: I think it would be a little cleaner to rely on the defaults from the schema. So if we don't have a GroupMetadata object, then we don't set anything.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366502363", "createdAt": "2020-01-14T18:31:11Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupRequest.java", "diffHunk": "@@ -120,10 +122,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return new JoinGroupResponse(new JoinGroupResponseData()\n                 .setThrottleTimeMs(throttleTimeMs)\n                 .setErrorCode(Errors.forException(e).code())\n-                .setGenerationId(JoinGroupResponse.UNKNOWN_GENERATION_ID)\n-                .setProtocolName(JoinGroupResponse.UNKNOWN_PROTOCOL)\n-                .setLeader(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n-                .setMemberId(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n+                .setGenerationId(UNKNOWN_GENERATION_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzYxMw==", "bodyText": "Sorry, wrong request type here. Please ignore.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366513613", "createdAt": "2020-01-14T18:54:28Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupRequest.java", "diffHunk": "@@ -120,10 +122,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return new JoinGroupResponse(new JoinGroupResponseData()\n                 .setThrottleTimeMs(throttleTimeMs)\n                 .setErrorCode(Errors.forException(e).code())\n-                .setGenerationId(JoinGroupResponse.UNKNOWN_GENERATION_ID)\n-                .setProtocolName(JoinGroupResponse.UNKNOWN_PROTOCOL)\n-                .setLeader(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n-                .setMemberId(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n+                .setGenerationId(UNKNOWN_GENERATION_ID)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMjM2Mw=="}, "originalCommit": {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAxNTM5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyODozMVrOFdn49g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjowNjo0M1rOFdrfYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg==", "bodyText": "It's confusing that we call testAllMessageRoundTripsFromVersion here, because it will fail for the first version we pass in (ie, the internal for loop is not required. It would be easier to understand the test if we call testEquivalentMessageRoundTrip instead.\nApplies to there places too -- also to PR you do in parallel IIRC.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366606582", "createdAt": "2020-01-14T22:28:31Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODYxOQ==", "bodyText": "Also, we actually want to test that, if any of the three new fields is set on a lower version we get UnsupportedVersionException -- hence, for each case, we should set two fields to null IMHO. Atm, the test logic is somewhat confusing.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366608619", "createdAt": "2020-01-14T22:34:09Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NTU2OQ==", "bodyText": "Yep, this is correct observation!", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366665569", "createdAt": "2020-01-15T02:06:43Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAyMjMzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozMTo1MVrOFdn9kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozMTo1MVrOFdn9kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNzc2MQ==", "bodyText": "Same here -- we actually loop through the version in the outer loop, so why do we need to loop through them again? Effectively, we run tests for smaller versions multiple times?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366607761", "createdAt": "2020-01-14T22:31:51Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setGroupInstanceId(null);\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setMemberId(\"\");\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setGenerationId(-1);\n+            }\n+\n             testAllMessageRoundTripsFromVersion(version, requestData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAzNjYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNzo0OFrOFdoGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozMTo1OVrOFdrzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwOTk3MA==", "bodyText": "Why do we need to check generationId >= 0 ?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366609970", "createdAt": "2020-01-14T22:37:48Z", "author": {"login": "mjsax"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -706,12 +706,39 @@ class GroupCoordinator(val brokerId: Int,\n     groupManager.scheduleHandleTxnCompletion(producerId, offsetsPartitions.map(_.partition).toSet, isCommit)\n   }\n \n+  private def doTxnCommitOffsets(group: GroupMetadata,\n+                                 memberId: String,\n+                                 groupInstanceId: Option[String],\n+                                 generationId: Int,\n+                                 producerId: Long,\n+                                 producerEpoch: Short,\n+                                 offsetMetadata: immutable.Map[TopicPartition, OffsetAndMetadata],\n+                                 responseCallback: immutable.Map[TopicPartition, Errors] => Unit): Unit = {\n+    group.inLock {\n+      if (group.is(Dead)) {\n+        // if the group is marked as dead, it means some other thread has just removed the group\n+        // from the coordinator metadata; it is likely that the group has migrated to some other\n+        // coordinator OR the group is in a transient unstable phase. Let the member retry\n+        // finding the correct coordinator and rejoin.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n+      } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n+      } else if (memberId != JoinGroupRequest.UNKNOWN_MEMBER_ID && !group.has(memberId)) {\n+        // Enforce member id when it is set.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (generationId >= 0 && generationId != group.generationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MDY4Ng==", "bodyText": "This is a validation on whether the generationId is set in the txn commit, as we only do the check when the request actually sets that field.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366670686", "createdAt": "2020-01-15T02:31:59Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -706,12 +706,39 @@ class GroupCoordinator(val brokerId: Int,\n     groupManager.scheduleHandleTxnCompletion(producerId, offsetsPartitions.map(_.partition).toSet, isCommit)\n   }\n \n+  private def doTxnCommitOffsets(group: GroupMetadata,\n+                                 memberId: String,\n+                                 groupInstanceId: Option[String],\n+                                 generationId: Int,\n+                                 producerId: Long,\n+                                 producerEpoch: Short,\n+                                 offsetMetadata: immutable.Map[TopicPartition, OffsetAndMetadata],\n+                                 responseCallback: immutable.Map[TopicPartition, Errors] => Unit): Unit = {\n+    group.inLock {\n+      if (group.is(Dead)) {\n+        // if the group is marked as dead, it means some other thread has just removed the group\n+        // from the coordinator metadata; it is likely that the group has migrated to some other\n+        // coordinator OR the group is in a transient unstable phase. Let the member retry\n+        // finding the correct coordinator and rejoin.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.COORDINATOR_NOT_AVAILABLE })\n+      } else if (group.isStaticMemberFenced(memberId, groupInstanceId)) {\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.FENCED_INSTANCE_ID })\n+      } else if (memberId != JoinGroupRequest.UNKNOWN_MEMBER_ID && !group.has(memberId)) {\n+        // Enforce member id when it is set.\n+        responseCallback(offsetMetadata.map { case (k, _) => k -> Errors.UNKNOWN_MEMBER_ID })\n+      } else if (generationId >= 0 && generationId != group.generationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwOTk3MA=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTEwMTE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowNjozOFrOFdotrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozNTo0NlrOFdr2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDA3Ng==", "bodyText": "I am not sure if I understand this test. (1) why do we test with a static member? Fencing could also happen for non-static members now? (2) Why does the member get fenced at all (it seems that staticMembersJoinAndRebalance should successfully add two members to the consumer group?) (3) Why do we no pass a groupInstanceId into commitTransactionalOffsets() on the first call, as we use static group membership?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366620076", "createdAt": "2020-01-14T23:06:38Z", "author": {"login": "mjsax"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MTUxOQ==", "bodyText": "I will make this test more explicit by adding the definition for member.id. It basically tries to test out that static membership fencing is working properly, as the leader instance is already registered, and the txn commit call with leader.instance.id is not actually using a correct member.id: either empty or invalid", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366671519", "createdAt": "2020-01-15T02:35:46Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDA3Ng=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTEwNjE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowODo1NFrOFdownA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzozOTo1MlrOFdsl9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDgyOA==", "bodyText": "Why do we pass Option.empty -- isn't this the default anyway?", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366620828", "createdAt": "2020-01-14T23:08:54Z", "author": {"login": "mjsax"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4MzYzNw==", "bodyText": "No, we don't need to, will address that.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366683637", "createdAt": "2020-01-15T03:39:52Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDgyOA=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExMDY5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMDo1NFrOFdozdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzo0MToyOVrOFdsnJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTU1Nw==", "bodyText": "This should be it's own test -- it test backward compatibility for older clients if I read it correctly.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366621557", "createdAt": "2020-01-14T23:10:54Z", "author": {"login": "mjsax"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4Mzk0MA==", "bodyText": "Actually I think this is safe to be removed, as other test cases who don't use member.id is covering this case.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366683940", "createdAt": "2020-01-15T03:41:29Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTU1Nw=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExMjg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMTo1M1rOFdo0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzo0MjoxOFrOFdsnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTg4MA==", "bodyText": "This should be it's own test -- the test name says WithUnknownMemberId but this test passes a known memberId", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366621880", "createdAt": "2020-01-14T23:11:53Z", "author": {"login": "mjsax"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4NDA5MA==", "bodyText": "Will do", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366684090", "createdAt": "2020-01-15T03:42:18Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTg4MA=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTExNTA2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzoxMzowOVrOFdo2MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMzo0Mjo0MlrOFdsoBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjI1Ng==", "bodyText": "The test name says WithIllegalGeneration -- but this is a positive test using the correct generationId -- should be two tests.", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366622256", "createdAt": "2020-01-14T23:13:09Z", "author": {"login": "mjsax"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithIllegalGeneration(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val initialGenerationId = joinGroupResult.generationId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty, initialGenerationId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY4NDE2NQ==", "bodyText": "Will do", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366684165", "createdAt": "2020-01-15T03:42:42Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -2500,6 +2479,74 @@ class GroupCoordinatorTest {\n     assertEquals(Errors.ILLEGAL_GENERATION, commitOffsetResult(tp))\n   }\n \n+  @Test\n+  def testTxnCommitOffsetWithFencedInstanceId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val rebalanceResult = staticMembersJoinAndRebalance(leaderInstanceId, followerInstanceId)\n+\n+    val leaderNoMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), groupInstanceId = leaderInstanceId)\n+    assertEquals(Errors.FENCED_INSTANCE_ID, leaderNoMemberIdCommitOffsetResult (tp))\n+\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), rebalanceResult.leaderId, leaderInstanceId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithUnknownMemberId(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+    val invalidIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), \"invalid-member\", Option.empty)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, invalidIdCommitOffsetResult (tp))\n+\n+    val unknownMemberIdCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), JoinGroupRequest.UNKNOWN_MEMBER_ID, Option.empty)\n+    assertEquals(Errors.NONE, unknownMemberIdCommitOffsetResult (tp))\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))\n+  }\n+\n+  @Test\n+  def testTxnCommitOffsetWithIllegalGeneration(): Unit = {\n+    val tp = new TopicPartition(\"topic\", 0)\n+    val offset = offsetAndMetadata(0)\n+    val producerId = 1000L\n+    val producerEpoch : Short = 2\n+\n+    val joinGroupResult = dynamicJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType, protocols)\n+    val joinGroupError = joinGroupResult.error\n+    assertEquals(Errors.NONE, joinGroupError)\n+\n+    EasyMock.reset(replicaManager)\n+\n+    val assignedConsumerId = joinGroupResult.memberId\n+    val initialGenerationId = joinGroupResult.generationId\n+    val leaderCommitOffsetResult = commitTransactionalOffsets(groupId, producerId, producerEpoch,\n+      Map(tp -> offset), assignedConsumerId, Option.empty, initialGenerationId)\n+    assertEquals(Errors.NONE, leaderCommitOffsetResult (tp))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjI1Ng=="}, "originalCommit": {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8"}, "originalPosition": 251}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4453, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}