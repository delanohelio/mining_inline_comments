{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODY5Mjg5", "number": 9319, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0ODoyOVrOEoTGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoxMzo1NVrOFVhIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkxNDI5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0ODoyOVrOHZTg9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNToyMjoxMVrOHjUzSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjE4Mg==", "bodyText": "Can you please make this log message more readable?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496296182", "createdAt": "2020-09-28T23:48:29Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assgn post lb calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgwMzAxNw==", "bodyText": "I have updated the message.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r506803017", "createdAt": "2020-10-17T05:22:11Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assgn post lb calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjE4Mg=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkyMTMwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1MjowNlrOHZTk5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1MjowNlrOHZTk5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NzE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n          \n          \n            \n                            log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n          \n          \n            \n                                    candidateWorkerLoad.size(),\n          \n          \n            \n                                    candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496297191", "createdAt": "2020-09-28T23:52:06Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkyNzk2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1NTo0OVrOHZTo3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1NTo0OVrOHZTo3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a string to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298206", "createdAt": "2020-09-28T23:55:49Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkyOTAwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1NjoyN1rOHZTpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1NjoyN1rOHZTpgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODM3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned task id {} to member {}\", task, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a ConnectorTaskId to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298370", "createdAt": "2020-09-28T23:56:27Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n+                }\n+                candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (ConnectorTaskId task : lostAssignments.tasks()) {\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning task id {} to member {}\", task, worker.worker());\n+                    worker.assign(task);\n+                    log.debug(\"Assigned task id {} to member {}\", task, worker.worker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkzNDgzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1OTozN1rOHZTs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1OTozN1rOHZTs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTI0OA==", "bodyText": "What do you think about combining these log messages?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor={}, ceiling={}\", floorTasks, ceilTasks);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496299248", "createdAt": "2020-09-28T23:59:37Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -559,6 +576,8 @@ private void resetDelay() {\n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n         log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk0NDI0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDoxNVrOHZTyZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0OToyOVrOHpLuDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng==", "bodyText": "Isn't it possible that numToRevoke might be negative?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300646", "createdAt": "2020-09-29T00:04:15Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgwMTY3OQ==", "bodyText": "yes it can be and it is captured under the next for loop condition.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r506801679", "createdAt": "2020-10-17T05:18:43Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NzI1MQ==", "bodyText": "Can you explain a bit what you aim to achieve with this change here?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512497251", "createdAt": "2020-10-27T08:29:37Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMDE1OQ==", "bodyText": "Also, we apply this logic in tasks only. But why not in the connectors too, if it helps?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512500159", "createdAt": "2020-10-27T08:34:26Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk0NTY3Nw==", "bodyText": "@kkonstantine  we are trying to revoke the additional tasks assigned [if any] to a worker so that in the next stage the revoked tasks can be re assigned to the new workers that get added to the group.  Yes we need to apply this to connectors as well, I will update the PR for the changes .", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512945677", "createdAt": "2020-10-27T18:49:29Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk0NDYwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDoyM1rOHZTylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDoyM1rOHZTylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"revoke number of tasks per worker {}\", numToRevoke);\n          \n          \n            \n                        log.debug(\"Tasks on worker {} is higher than ceiling, so revoking {} tasks\", existing, numToRevoke);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300694", "createdAt": "2020-09-29T00:04:23Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;\n+            log.debug(\"revoke number of tasks per worker {}\", numToRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTAyMDg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoxMjowMlrOHovufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNToyNzoxMVrOHzotAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4NzAzNg==", "bodyText": "Why do we print the assignment again here. They don't seem to change since we log them in line 249", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512487036", "createdAt": "2020-10-27T08:12:02Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwNjMwNw==", "bodyText": "This is resolved.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r523906307", "createdAt": "2020-11-16T05:27:11Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4NzAzNg=="}, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTA1NzAxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyMTo1MlrOHowEKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozODoxMlrOHpLSfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MjU4Nw==", "bodyText": "So we balance the lost tasks among the new workers now. That balances the tasks but only among the new workers. Have you checked how this works with task revocation called right after?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512492587", "createdAt": "2020-10-27T08:21:52Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODYyMw==", "bodyText": "It not only balances the tasks for new workers it also does revocation if there is any overloaded worker.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512938623", "createdAt": "2020-10-27T18:38:12Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MjU4Nw=="}, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTA2NDA0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyMzo1MFrOHowIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNToyNzoyNFrOHzotNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA==", "bodyText": "This assignment is unused now.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512493684", "createdAt": "2020-10-27T08:23:50Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +595,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODAwNQ==", "bodyText": "yes , I will remove the same", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512938005", "createdAt": "2020-10-27T18:37:04Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +595,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA=="}, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkwNjM1Ng==", "bodyText": "this is resolved", "url": "https://github.com/apache/kafka/pull/9319#discussion_r523906356", "createdAt": "2020-11-16T05:27:24Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +595,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA=="}, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTAyNzUxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNTo1NDowMVrOIeAtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNTo1NDowMVrOIeAtKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODMzOTc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n          \n          \n            \n                    log.debug(\"New average number of connectors per worker rounded down (floor) {} and rounded up (ceil) {}\", floorConnectors, ceilConnectors);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568339754", "createdAt": "2021-02-02T05:54:01Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTAyOTM0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNTo1NDo1NlrOIeAuPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNTo1NDo1NlrOIeAuPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0MDAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker rounded down (floor) {} and rounded up (ceil) {}\", floorTasks, ceilTasks);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568340029", "createdAt": "2021-02-02T05:54:56Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTA2MTg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjowODo1OVrOIeBAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjowODo1OVrOIeBAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDcyNQ==", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344725", "createdAt": "2021-02-02T06:08:59Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTA2MzU3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjowOTo0N1rOIeBBlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjowOTo0N1rOIeBBlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDk4MA==", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n          \n          \n            \n                    int ceilConnectors = floorConnectors + ((totalActiveConnectorsNum % totalWorkersNum == 0) ? 0 : 1);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344980", "createdAt": "2021-02-02T06:09:47Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTA2NDczOnYy", "diffSide": "LEFT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoxMDoxMVrOIeBCLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoyNzoyOVrOIeBZaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NTEzMg==", "bodyText": "nit: unneeded change", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568345132", "createdAt": "2021-02-02T06:10:11Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,6 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1MTA4MQ==", "bodyText": "thanks resolved it", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568351081", "createdAt": "2021-02-02T06:27:29Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,6 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NTEzMg=="}, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTA3MjQ3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoxMzo1NVrOIeBGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoyNToxMVrOIeBWPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NjI4Mw==", "bodyText": "we should remove the if branch on the numToRevoke here too, right?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568346283", "createdAt": "2021-02-02T06:13:55Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n+        int numToRevoke;\n \n-        int numToRevoke = floorConnectors;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<String> connectors = existing.connectors().iterator();\n+            numToRevoke = existing.connectorsSize() - ceilConnectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM1MDI2OQ==", "bodyText": "removed the if block , thanks for pointing out.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568350269", "createdAt": "2021-02-02T06:25:11Z", "author": {"login": "ramesh-muthusamy"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n+        int numToRevoke;\n \n-        int numToRevoke = floorConnectors;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<String> connectors = existing.connectors().iterator();\n+            numToRevoke = existing.connectorsSize() - ceilConnectors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NjI4Mw=="}, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1857, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}