{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDEyNzI2", "number": 8230, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0ODo0N1rODlhY3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDozOFrODlinvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjcwOTQzOnYy", "diffSide": "RIGHT", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0ODo0N1rOFydoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToyODozMVrOFy8yQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA==", "bodyText": "what about exposing a JsonNodeFactory as an argument to make this more extensible?", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388458564", "createdAt": "2020-03-05T17:48:47Z", "author": {"login": "agavra"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NTM0Ng==", "bodyText": "Can do, but is there any point for a package local constructor? We can change as we need to anyway, right?", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388475346", "createdAt": "2020-03-05T18:19:51Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NTkyNQ==", "bodyText": "\ud83d\ude08 I \"have a friend\" who sometimes puts new classes in the same package so that they can use package private methods. This friend understands that such code is brittle.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388485925", "createdAt": "2020-03-05T18:40:03Z", "author": {"login": "agavra"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2OTAyNw==", "bodyText": "lol. I don't know what you're talking about!\nChanged...", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388969027", "createdAt": "2020-03-06T15:28:31Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjczNjI5OnYy", "diffSide": "RIGHT", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1Njo1MFrOFyd5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTozOTo0MlrOFy9Ldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg==", "bodyText": "Why is false (inexact decimals) the default for the no-arg constructor? If this is an attempt to maintain backward compatibility, we should consider whether this bug, when fixed, compatible. Seems like it would be, since having the deserializer use the trailing zeros would be fine/better than not using them.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388462912", "createdAt": "2020-03-05T17:56:50Z", "author": {"login": "rhauch"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2MzEyNg==", "bodyText": "Happy to flip it.\nDo we want to make the other constructor public so that others can control these things?", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388963126", "createdAt": "2020-03-06T15:19:37Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NTQ3OQ==", "bodyText": "Flipped", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388975479", "createdAt": "2020-03-06T15:39:42Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjkxMTM0OnYy", "diffSide": "RIGHT", "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDozOFrOFyfo2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1ODowM1rOFzl60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA==", "bodyText": "Passing in a JsonNodeFactory instance might be better here, because then the JsonConverter instances and JsonDeserializer in each converter will all use the same JsonNodeFactory.\nAs it currently stands, the JsonDeserializer has it's own instance of the JsonNodeFactory, and it's possible that they could be set up differently in the future and not caught.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388491480", "createdAt": "2020-03-05T18:50:38Z", "author": {"login": "rhauch"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2MzE4Ng==", "bodyText": "On it...", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388963186", "createdAt": "2020-03-06T15:19:45Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2Nzc1MQ==", "bodyText": "What do you think about also enabling SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN?\nThis would mean serialiser won't write numbers using scientific notation, e.g. 100 , to 1E+2.  Both are valid JSON, and the later takes up less space, but can confuse some users and maybe some downstream systems.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388967751", "createdAt": "2020-03-06T15:26:27Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0Mjk2MQ==", "bodyText": "Discussion offline - not going with none SN as this woudl require a KIP", "url": "https://github.com/apache/kafka/pull/8230#discussion_r389642961", "createdAt": "2020-03-09T12:58:03Z", "author": {"login": "big-andy-coates"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA=="}, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3434, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}