{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODkzMDI5", "number": 8357, "title": "KAFKA-9767: Add logging to basic auth rest extension", "bodyText": "Jira\nThe changes here are strictly targeted towards improving logging for the basic auth rest extension. However, in several sections, some refactoring is also performed in order to reduce nesting especially with the else halves of if/else statements.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-26T00:27:48Z", "url": "https://github.com/apache/kafka/pull/8357", "merged": true, "mergeCommit": {"oid": "85ed123ac65d7459df5049b75178cf7bcc9c9e79"}, "closed": true, "closedAt": "2020-05-24T14:09:41Z", "author": {"login": "C0urante"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRQ6augH2gAyMzkzODkzMDI5OjNmOTVjMzQ0MWRkNmY1M2Q2NWZlMTRjNDg5ZDFkZTJkZjIzYjBmNGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjjQB2gFqTQxNjQ0NzY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/3f95c3441dd6f53d65fe14c489d1de2df23b0f4d", "committedDate": "2020-03-26T00:25:05Z", "message": "KAFKA-9767: Add logging to basic auth rest extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Njg1ODU4", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-388685858", "createdAt": "2020-04-06T23:24:56Z", "commit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzoyNDo1NlrOGBtgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzoyODoyM1rOGBtkxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ==", "bodyText": "This log is likely a duplicate of the one that we have in the initialize. Should we log this for every login?", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404447329", "createdAt": "2020-04-06T23:24:56Z", "author": {"login": "mageshn"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n         String username = ((NameCallback) callbacks[0]).getName();\n         char[] passwordChars = ((PasswordCallback) callbacks[1]).getPassword();\n         String password = passwordChars != null ? new String(passwordChars) : null;\n         Properties credentialProperties = credentialPropertiesMap.get(fileName);\n-        authenticated = credentialProperties.isEmpty() ||\n-                        (password != null && password.equals(credentialProperties.get(username)));\n+\n+        if (credentialProperties.isEmpty()) {\n+            log.trace(\"Not validating credentials for user '{}' as credential properties file '{}' is empty\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODAwMg==", "bodyText": "do we really need that we matched it? Can't we do all all of this is a single log statement? We can include size of credentials map and authenticated boolean. This will help keep the old structure.", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404448002", "createdAt": "2020-04-06T23:26:53Z", "author": {"login": "mageshn"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n         String username = ((NameCallback) callbacks[0]).getName();\n         char[] passwordChars = ((PasswordCallback) callbacks[1]).getPassword();\n         String password = passwordChars != null ? new String(passwordChars) : null;\n         Properties credentialProperties = credentialPropertiesMap.get(fileName);\n-        authenticated = credentialProperties.isEmpty() ||\n-                        (password != null && password.equals(credentialProperties.get(username)));\n+\n+        if (credentialProperties.isEmpty()) {\n+            log.trace(\"Not validating credentials for user '{}' as credential properties file '{}' is empty\",\n+                username,\n+                fileName);\n+            authenticated = true;\n+        } else if (password != null && password.equals(credentialProperties.get(username))) {\n+            log.trace(\"Credentials provided for user '{}' match those present in the credential properties file '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0ODQ1Mw==", "bodyText": "Any reason why we want to iterate all the call backs and then throw an exception?", "url": "https://github.com/apache/kafka/pull/8357#discussion_r404448453", "createdAt": "2020-04-06T23:28:23Z", "author": {"login": "mageshn"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",\n+                        callback,\n+                        callback.getClass()\n+                    );\n+                    if (unsupportedCallback == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjExOTI2", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-390211926", "createdAt": "2020-04-08T18:08:44Z", "commit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowODo0NFrOGC68-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxMjozNFrOGC7F8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjIxNw==", "bodyText": "Should this be warn. Its likely an incorrect set up that can potentially cause this and might be useful to know it by default.", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405716217", "createdAt": "2020-04-08T18:08:44Z", "author": {"login": "mageshn"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODUxMw==", "bodyText": "Typically, most users push logs to something like elastic/splunk and should be able to lookup the logs from the archive. I'm not too concerned about this since properties file based credentials store shouldn't typically be used in a production environment. So,I'm fine leaving the log statement in here. But let's see what the committers have to say fro this :).", "url": "https://github.com/apache/kafka/pull/8357#discussion_r405718513", "createdAt": "2020-04-08T18:12:34Z", "author": {"login": "mageshn"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.trace(\"Authentication failed while invoking JAAS login callbacks\");\n             throw new LoginException(e.getMessage());\n         }\n \n         String username = ((NameCallback) callbacks[0]).getName();\n         char[] passwordChars = ((PasswordCallback) callbacks[1]).getPassword();\n         String password = passwordChars != null ? new String(passwordChars) : null;\n         Properties credentialProperties = credentialPropertiesMap.get(fileName);\n-        authenticated = credentialProperties.isEmpty() ||\n-                        (password != null && password.equals(credentialProperties.get(username)));\n+\n+        if (credentialProperties.isEmpty()) {\n+            log.trace(\"Not validating credentials for user '{}' as credential properties file '{}' is empty\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0NzMyOQ=="}, "originalCommit": {"oid": "3f95c3441dd6f53d65fe14c489d1de2df23b0f4d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785", "committedDate": "2020-04-08T19:29:03Z", "message": "Bump authentication failure log level to WARN"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTgzOTc2", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-391183976", "createdAt": "2020-04-09T22:59:06Z", "commit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODkzMTMw", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-407893130", "createdAt": "2020-05-07T23:00:06Z", "commit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzowMDowNlrOGSTLRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0MzozNVrOGSUB2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MTczMg==", "bodyText": "Would it help to actually list the method that was used, in case somebody thought they were using basic?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.trace(\"Request credentials did not use basic authentication; ignoring\");\n          \n          \n            \n                            log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", BASIC, method);", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421841732", "createdAt": "2020-05-07T23:00:06Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MzE0Nw==", "bodyText": "The comment above says:\n\nand it is likely that the worker will need to be reconfigured and restarted\n\nShould the log message say this? Something more like:\n\nUnsupported callback '{}' of type {}; request authentication will fail. This indicates the Connect worker was configured incorrectly, and will need to be corrected and restarted.\n\nThe more specific we could be about what might have been misconfigured, the better.", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421843147", "createdAt": "2020-05-07T23:04:35Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTIwNA==", "bodyText": "Here we're only reporting the last of potentially multiple unsupported callbacks, right? Should we be generating a list of unsupported callbacks here if we're waiting to throw the exception?", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421855204", "createdAt": "2020-05-07T23:41:49Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +84,61 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials did not use basic authentication; ignoring\");\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            Callback unsupportedCallback = null;\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n                     ((PasswordCallback) callback).setPassword(password.toCharArray());\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    // Log at WARN level here as this indicates incompatibility between the Connect basic auth\n+                    // extension and the JAAS login module that the user has configured and it is likely that the\n+                    // worker will need to be reconfigured and restarted\n+                    log.warn(\n+                        \"Asked to handle unsupported callback '{}' of type {}; request authentication will fail\",\n+                        callback,\n+                        callback.getClass()\n+                    );\n+                    if (unsupportedCallback == null)\n+                        unsupportedCallback = callback;\n                 }\n             }\n+            if (unsupportedCallback != null)\n+                throw new UnsupportedCallbackException(\n+                    unsupportedCallback,\n+                    \"Supports only NameCallback and PasswordCallback\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NTcwNA==", "bodyText": "Doesn't this catch handle all exceptions, including authentication failures? Do we really want to log all of those auth failures at WARN?", "url": "https://github.com/apache/kafka/pull/8357#discussion_r421855704", "createdAt": "2020-05-07T23:43:35Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/PropertyFileLoginModule.java", "diffHunk": "@@ -62,35 +62,63 @@ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<Str\n         if (fileName == null || fileName.trim().isEmpty()) {\n             throw new ConfigException(\"Property Credentials file must be specified\");\n         }\n+\n         if (!credentialPropertiesMap.containsKey(fileName)) {\n+            log.trace(\"Opening credential properties file '{}'\", fileName);\n             Properties credentialProperties = new Properties();\n             try {\n                 try (InputStream inputStream = Files.newInputStream(Paths.get(fileName))) {\n+                    log.trace(\"Parsing credential properties file '{}'\", fileName);\n                     credentialProperties.load(inputStream);\n                 }\n                 credentialPropertiesMap.putIfAbsent(fileName, credentialProperties);\n+                if (credentialProperties.isEmpty())\n+                    log.warn(\"Credential properties file '{}' is empty; all requests will be permitted\",\n+                        fileName);\n             } catch (IOException e) {\n                 log.error(\"Error loading credentials file \", e);\n                 throw new ConfigException(\"Error loading Property Credentials file\");\n             }\n+        } else {\n+            log.trace(\n+                \"Credential properties file '{}' has already been opened and parsed; will read from cached, in-memory store\",\n+                fileName);\n         }\n     }\n \n     @Override\n     public boolean login() throws LoginException {\n         Callback[] callbacks = configureCallbacks();\n         try {\n+            log.trace(\"Authenticating user; invoking JAAS login callbacks\");\n             callbackHandler.handle(callbacks);\n         } catch (Exception e) {\n+            log.warn(\"Authentication failed while invoking JAAS login callbacks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdd8a266a3d3713ddb3ecc7ef4eb3a4ce5f7785"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7728d3ca1862b836b22fee4b1c73d6566a7becb6", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/7728d3ca1862b836b22fee4b1c73d6566a7becb6", "committedDate": "2020-05-08T00:20:04Z", "message": "KAFKA-9767: Apply suggestions from code review\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDkxMzk5", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-415491399", "createdAt": "2020-05-20T16:06:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjowNjowMFrOGYTG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyNDozNVrOGYT2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMjA2NQ==", "bodyText": "Isn't it true that most of the time this method will get only supported Callback implementations? In those cases, we'll never need the unsupportedCallbacks.\nI originally thought it might be worth making this more efficient, but I don't think it's worth it since the default constructor for ArrayList is pretty efficient in recent JVMs (with lazy allocation of the underlying array when the first element is added to the list).", "url": "https://github.com/apache/kafka/pull/8357#discussion_r428132065", "createdAt": "2020-05-20T16:06:00Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +87,60 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", method, BASIC);\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            List<Callback> unsupportedCallbacks = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NDI5Mw==", "bodyText": "Do we have a unit test that exercises this code path? If not, what do you think about adding new unit tests for BasicAuthCallBackHandler?", "url": "https://github.com/apache/kafka/pull/8357#discussion_r428144293", "createdAt": "2020-05-20T16:24:35Z", "author": {"login": "rhauch"}, "path": "connect/basic-auth-extension/src/main/java/org/apache/kafka/connect/rest/basic/auth/extension/JaasBasicAuthFilter.java", "diffHunk": "@@ -67,36 +87,60 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n         private String password;\n \n         public BasicAuthCallBackHandler(String credentials) {\n-            if (credentials != null) {\n-                int space = credentials.indexOf(SPACE);\n-                if (space > 0) {\n-                    String method = credentials.substring(0, space);\n-                    if (BASIC.equalsIgnoreCase(method)) {\n-                        credentials = credentials.substring(space + 1);\n-                        credentials = new String(Base64.getDecoder().decode(credentials),\n-                                                 StandardCharsets.UTF_8);\n-                        int i = credentials.indexOf(COLON);\n-                        if (i > 0) {\n-                            username = credentials.substring(0, i);\n-                            password = credentials.substring(i + 1);\n-                        }\n-                    }\n-                }\n+            if (credentials == null) {\n+                log.trace(\"No credentials were provided with the request\");\n+                return;\n             }\n+\n+            int space = credentials.indexOf(SPACE);\n+            if (space <= 0) {\n+                log.trace(\"Request credentials were malformed; no space present in value for authorization header\");\n+                return;\n+            }\n+\n+            String method = credentials.substring(0, space);\n+            if (!BASIC.equalsIgnoreCase(method)) {\n+                log.trace(\"Request credentials used {} authentication, but only {} supported; ignoring\", method, BASIC);\n+                return;\n+            }\n+\n+            credentials = credentials.substring(space + 1);\n+            credentials = new String(Base64.getDecoder().decode(credentials),\n+                                     StandardCharsets.UTF_8);\n+            int i = credentials.indexOf(COLON);\n+            if (i <= 0) {\n+                log.trace(\"Request credentials were malformed; no colon present between username and password\");\n+                return;\n+            }\n+\n+            username = credentials.substring(0, i);\n+            password = credentials.substring(i + 1);\n         }\n \n         @Override\n         public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\n+            List<Callback> unsupportedCallbacks = new ArrayList<>();\n             for (Callback callback : callbacks) {\n                 if (callback instanceof NameCallback) {\n                     ((NameCallback) callback).setName(username);\n                 } else if (callback instanceof PasswordCallback) {\n-                    ((PasswordCallback) callback).setPassword(password.toCharArray());\n+                    ((PasswordCallback) callback).setPassword(password != null\n+                        ? password.toCharArray()\n+                        : null\n+                    );\n                 } else {\n-                    throw new UnsupportedCallbackException(callback, \"Supports only NameCallback \"\n-                                                                     + \"and PasswordCallback\");\n+                    unsupportedCallbacks.add(callback);\n                 }\n             }\n+            if (!unsupportedCallbacks.isEmpty())\n+                throw new ConnectException(String.format(\n+                    \"Unsupported callbacks %s; request authentication will fail. \"\n+                        + \"This indicates the Connect worker was configured with a JAAS \"\n+                        + \"LoginModule that is incompatible with the %s, and will need to be \"\n+                        + \"corrected and restarted.\",\n+                    unsupportedCallbacks,\n+                    BasicAuthSecurityRestExtension.class.getSimpleName()\n+                ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1303f8eec1e7ae53f341e24711b9168234c4ebe1", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/1303f8eec1e7ae53f341e24711b9168234c4ebe1", "committedDate": "2020-05-20T19:35:12Z", "message": "KAFKA-9767: Address review comments, remove unnecessary logging when credentials are malformed or not provided"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1303f8eec1e7ae53f341e24711b9168234c4ebe1", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/1303f8eec1e7ae53f341e24711b9168234c4ebe1", "committedDate": "2020-05-20T19:35:12Z", "message": "KAFKA-9767: Address review comments, remove unnecessary logging when credentials are malformed or not provided"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDQ3NjU2", "url": "https://github.com/apache/kafka/pull/8357#pullrequestreview-416447656", "createdAt": "2020-05-21T19:57:37Z", "commit": {"oid": "1303f8eec1e7ae53f341e24711b9168234c4ebe1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1673, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}