{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDcwMjQz", "number": 8841, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoyNjozNFrOEELCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo1NjoyMVrOEGb1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODEwNTA3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoyNjozNFrOGhoGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjowODo0N1rOGjJkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMzIwOA==", "bodyText": "As it produced a bug, could you add some comment for this method?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r437913208", "createdAt": "2020-06-10T07:26:34Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034ca938e91dc6f81440b39733e29028a1729bca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0Njg3MQ==", "bodyText": "It's a bit weird to add a comment here and not elsewhere. It looks like a clear bug since hasValidPosition returns false. Generally, comments are useful when it's not obvious. What kind of clarification would you like to see?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438346871", "createdAt": "2020-06-10T19:05:33Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMzIwOA=="}, "originalCommit": {"oid": "034ca938e91dc6f81440b39733e29028a1729bca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMDEyMQ==", "bodyText": "I added some javadoc to the interface", "url": "https://github.com/apache/kafka/pull/8841#discussion_r439510121", "createdAt": "2020-06-12T16:08:47Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMzIwOA=="}, "originalCommit": {"oid": "034ca938e91dc6f81440b39733e29028a1729bca"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODEzOTAzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzozNjozN1rOGhobkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0NDo1MVrOGlOOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxODYxMA==", "bodyText": "nit: newPosition can be created lazy.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r437918610", "createdAt": "2020-06-10T07:36:37Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -799,6 +806,21 @@ private boolean maybeValidatePosition(Metadata.LeaderAndEpoch currentLeaderAndEp\n             return this.fetchState.equals(FetchStates.AWAIT_VALIDATION);\n         }\n \n+        /**\n+         * For older versions of the API, we cannot perform offset validation so we simply transition directly to FETCHING\n+         *\n+         * @param currentLeaderAndEpoch\n+         */\n+        private void updatePositionLeaderNoValidation(Metadata.LeaderAndEpoch currentLeaderAndEpoch) {\n+            if (position != null && !position.currentLeader.equals(currentLeaderAndEpoch)) {\n+                FetchPosition newPosition = new FetchPosition(position.offset, position.offsetEpoch, currentLeaderAndEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034ca938e91dc6f81440b39733e29028a1729bca"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MzY1Mg==", "bodyText": "+1. Moving this into the transition function below seems reasonable.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441683652", "createdAt": "2020-06-17T16:44:51Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -799,6 +806,21 @@ private boolean maybeValidatePosition(Metadata.LeaderAndEpoch currentLeaderAndEp\n             return this.fetchState.equals(FetchStates.AWAIT_VALIDATION);\n         }\n \n+        /**\n+         * For older versions of the API, we cannot perform offset validation so we simply transition directly to FETCHING\n+         *\n+         * @param currentLeaderAndEpoch\n+         */\n+        private void updatePositionLeaderNoValidation(Metadata.LeaderAndEpoch currentLeaderAndEpoch) {\n+            if (position != null && !position.currentLeader.equals(currentLeaderAndEpoch)) {\n+                FetchPosition newPosition = new FetchPosition(position.offset, position.offsetEpoch, currentLeaderAndEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxODYxMA=="}, "originalCommit": {"oid": "034ca938e91dc6f81440b39733e29028a1729bca"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDg1MDc0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTozNjo0OFrOGiDjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDoxNjowOVrOGjFpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2Mjg5NQ==", "bodyText": "Would it make sense to move hasPosition to TopicPartitionState? Then we could just turn this into a null check on position.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438362895", "createdAt": "2020-06-10T19:36:48Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MDQ1Mg==", "bodyText": "I thought about this too, but if i recall, the whole point of adding the state enum was to not rely on the instance variables to deduce the state. I think another solution here would be to have some kind of empty position monad to avoid the null in the first place.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438870452", "createdAt": "2020-06-11T15:27:59Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2Mjg5NQ=="}, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwOTA5NA==", "bodyText": "Sure, but that led to the opposite problem, in which the enum was inconsistent with the state. In regard to position, I think we should handle this at transition time as mentioned below. If we ensure that position is not null in the fetching and validating states, then I don't see a problem changing hasPosition to check it directly.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r439009094", "createdAt": "2020-06-11T19:07:57Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2Mjg5NQ=="}, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0NTg0MQ==", "bodyText": "Ok, sounds good", "url": "https://github.com/apache/kafka/pull/8841#discussion_r439445841", "createdAt": "2020-06-12T14:16:09Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -978,7 +1000,7 @@ public boolean hasValidPosition() {\n \n             @Override\n             public boolean hasPosition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2Mjg5NQ=="}, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDg4NzgwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0ODoxMVrOGiD6tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNDoyN1rOGiiWTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODk0OQ==", "bodyText": "I think the invariant that we try to maintain is that we should have a position if we are in the FETCHING state. I'd suggest we detect this in transitionState and raise the exception at that point. Otherwise, we could reach an illegal state and the consumer would just stop fetching the partition. Failing fast is probably preferable. What I have in mind is just something like this:\n        private void transitionState(FetchState newState, Runnable runIfTransitioned) {\n            FetchState nextState = this.fetchState.transitionTo(newState);\n            if (nextState.equals(newState)) {\n                if (position == null && (nextState == FETCHING || nextState == AWAIT_VALIDATION))\n                   throw new IllegalStateException();\n                this.fetchState = nextState;\n                runIfTransitioned.run();\n            }\n        }", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438368949", "createdAt": "2020-06-10T19:48:11Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3OTI0Nw==", "bodyText": "Yea, I see what you mean. It's probably a good idea to add a check here.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438379247", "createdAt": "2020-06-10T20:08:10Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODk0OQ=="}, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NzUzNQ==", "bodyText": "I think we need the check in transition since we set the position in the runnable sometimes. E.g.,\n    private void transitionState(FetchState newState, Runnable runIfTransitioned) {\n            FetchState nextState = this.fetchState.transitionTo(newState);\n            if (nextState.equals(newState)) {\n                this.fetchState = nextState;\n                runIfTransitioned.run();\n                if (this.position == null && nextState.hasPosition()) {\n                    throw new IllegalStateException(\"Transitioned subscription state to \" + nextState + \", but position is null\");\n                }\n            }\n        }", "url": "https://github.com/apache/kafka/pull/8841#discussion_r438867535", "createdAt": "2020-06-11T15:24:27Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2ODk0OQ=="}, "originalCommit": {"oid": "e07605c5ff441814fb44acee4d630cca92c886f8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQ0NzMyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyOToyMVrOGkjkgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo1NDo1NVrOGkmwVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDcwNQ==", "bodyText": "This comment applies to a few of the added null checks where we have already validated that the partition is \"fetchable.\" I am wondering if it would be more consistent to raise an exception.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r440984705", "createdAt": "2020-06-16T16:29:21Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {\n+                if (completedFetch.nextFetchOffset == position.offset) {\n+                    List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n+\n+                    log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n+                            partRecords.size(), position, completedFetch.partition);\n+\n+                    if (completedFetch.nextFetchOffset > position.offset) {\n+                        FetchPosition nextPosition = new FetchPosition(\n+                                completedFetch.nextFetchOffset,\n+                                completedFetch.lastEpoch,\n+                                position.currentLeader);\n+                        log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n+                        subscriptions.position(completedFetch.partition, nextPosition);\n+                    }\n \n-                Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n-                if (partitionLag != null)\n-                    this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n+                    Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n+                    if (partitionLag != null)\n+                        this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n \n-                Long lead = subscriptions.partitionLead(completedFetch.partition);\n-                if (lead != null) {\n-                    this.sensors.recordPartitionLead(completedFetch.partition, lead);\n-                }\n+                    Long lead = subscriptions.partitionLead(completedFetch.partition);\n+                    if (lead != null) {\n+                        this.sensors.recordPartitionLead(completedFetch.partition, lead);\n+                    }\n \n-                return partRecords;\n+                    return partRecords;\n+                } else {\n+                    // these records aren't next in line based on the last consumed position, ignore them\n+                    // they must be from an obsolete request\n+                    log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n+                            completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                }\n             } else {\n-                // these records aren't next in line based on the last consumed position, ignore them\n-                // they must be from an obsolete request\n-                log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n-                        completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                log.warn(\"Ignoring fetched records for {} at offset {} since the current position is undefined\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNzEzMQ==", "bodyText": "Would IllegalStateException make sense here (since we just checked that the partition was fetchable)?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441007131", "createdAt": "2020-06-16T17:04:15Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {\n+                if (completedFetch.nextFetchOffset == position.offset) {\n+                    List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n+\n+                    log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n+                            partRecords.size(), position, completedFetch.partition);\n+\n+                    if (completedFetch.nextFetchOffset > position.offset) {\n+                        FetchPosition nextPosition = new FetchPosition(\n+                                completedFetch.nextFetchOffset,\n+                                completedFetch.lastEpoch,\n+                                position.currentLeader);\n+                        log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n+                        subscriptions.position(completedFetch.partition, nextPosition);\n+                    }\n \n-                Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n-                if (partitionLag != null)\n-                    this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n+                    Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n+                    if (partitionLag != null)\n+                        this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n \n-                Long lead = subscriptions.partitionLead(completedFetch.partition);\n-                if (lead != null) {\n-                    this.sensors.recordPartitionLead(completedFetch.partition, lead);\n-                }\n+                    Long lead = subscriptions.partitionLead(completedFetch.partition);\n+                    if (lead != null) {\n+                        this.sensors.recordPartitionLead(completedFetch.partition, lead);\n+                    }\n \n-                return partRecords;\n+                    return partRecords;\n+                } else {\n+                    // these records aren't next in line based on the last consumed position, ignore them\n+                    // they must be from an obsolete request\n+                    log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n+                            completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                }\n             } else {\n-                // these records aren't next in line based on the last consumed position, ignore them\n-                // they must be from an obsolete request\n-                log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n-                        completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                log.warn(\"Ignoring fetched records for {} at offset {} since the current position is undefined\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDcwNQ=="}, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNjg4Ng==", "bodyText": "Sounds fine to me.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441036886", "createdAt": "2020-06-16T17:54:55Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,41 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {\n+                if (completedFetch.nextFetchOffset == position.offset) {\n+                    List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n+\n+                    log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n+                            partRecords.size(), position, completedFetch.partition);\n+\n+                    if (completedFetch.nextFetchOffset > position.offset) {\n+                        FetchPosition nextPosition = new FetchPosition(\n+                                completedFetch.nextFetchOffset,\n+                                completedFetch.lastEpoch,\n+                                position.currentLeader);\n+                        log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n+                        subscriptions.position(completedFetch.partition, nextPosition);\n+                    }\n \n-                Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n-                if (partitionLag != null)\n-                    this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n+                    Long partitionLag = subscriptions.partitionLag(completedFetch.partition, isolationLevel);\n+                    if (partitionLag != null)\n+                        this.sensors.recordPartitionLag(completedFetch.partition, partitionLag);\n \n-                Long lead = subscriptions.partitionLead(completedFetch.partition);\n-                if (lead != null) {\n-                    this.sensors.recordPartitionLead(completedFetch.partition, lead);\n-                }\n+                    Long lead = subscriptions.partitionLead(completedFetch.partition);\n+                    if (lead != null) {\n+                        this.sensors.recordPartitionLead(completedFetch.partition, lead);\n+                    }\n \n-                return partRecords;\n+                    return partRecords;\n+                } else {\n+                    // these records aren't next in line based on the last consumed position, ignore them\n+                    // they must be from an obsolete request\n+                    log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n+                            completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                }\n             } else {\n-                // these records aren't next in line based on the last consumed position, ignore them\n-                // they must be from an obsolete request\n-                log.debug(\"Ignoring fetched records for {} at offset {} since the current position is {}\",\n-                        completedFetch.partition, completedFetch.nextFetchOffset, position);\n+                log.warn(\"Ignoring fetched records for {} at offset {} since the current position is undefined\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDcwNQ=="}, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQ4MjY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjozNzowMVrOGkj6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjozNzowMVrOGkj6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MDM0Mw==", "bodyText": "Should we change the name of this method to something like resetInitializingPositions?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r440990343", "createdAt": "2020-06-16T16:37:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -647,7 +647,7 @@ public synchronized void resetMissingPositions() {\n         assignment.stream().forEach(state -> {\n             TopicPartition tp = state.topicPartition();\n             TopicPartitionState partitionState = state.value();\n-            if (!partitionState.hasPosition()) {\n+            if (partitionState.fetchState.equals(FetchStates.INITIALIZING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzUwMzgwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MjoxOFrOGkkH9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MjoxOFrOGkkH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mzc4MA==", "bodyText": "Since the usage is a bit different, maybe we could change the name to requiresPosition. Then this check seems a little more intuitive:\n                if (this.position == null && nextState.requiresPosition()) {\n                    throw new IllegalStateException(\"Transitioned subscription state to \" + nextState + \", but position is null\");\n                }", "url": "https://github.com/apache/kafka/pull/8841#discussion_r440993780", "createdAt": "2020-06-16T16:42:18Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -924,10 +949,19 @@ default FetchState transitionTo(FetchState newState) {\n             }\n         }\n \n+        /**\n+         * Return the valid states which this state can transition to\n+         */\n         Collection<FetchState> validTransitions();\n \n+        /**\n+         * Test if this state has a position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzUyMDczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0Njo1NlrOGkkS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDowMzowNlrOGkrLlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjYwMw==", "bodyText": "Would it make sense to set position explicitly to null if the FetchState does not expect to have it. For example, it seems currently when we reset the offset, we leave position at whatever value it had previously. If we were initializing, then it would be null. If we had an offset out of range, it would be non-null. It might be easier to reason about the logic if it is always null in the AWAIT_RESET state.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r440996603", "createdAt": "2020-06-16T16:46:56Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -745,6 +745,9 @@ private void transitionState(FetchState newState, Runnable runIfTransitioned) {\n             if (nextState.equals(newState)) {\n                 this.fetchState = nextState;\n                 runIfTransitioned.run();\n+                if (this.position == null && nextState.hasPosition()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwOTM5OA==", "bodyText": "Yea, sounds good \ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441109398", "createdAt": "2020-06-16T20:03:06Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -745,6 +745,9 @@ private void transitionState(FetchState newState, Runnable runIfTransitioned) {\n             if (nextState.equals(newState)) {\n                 this.fetchState = nextState;\n                 runIfTransitioned.run();\n+                if (this.position == null && nextState.hasPosition()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjYwMw=="}, "originalCommit": {"oid": "63c1b14a4c251ed5c2ff76e0d735ca95df3f9f93"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODI0NjU5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNjo0NFrOGkrlRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxNjo0NFrOGkrlRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTk3Mw==", "bodyText": "nit: maybe we could check for null first so that we avoid the nesting below (and reduce the diff)\nif (position == null)\n  throw new IllegalStateException(\"Missing position for fetchable partition \" + completedFetch.partition);\n\nif (completedFetch.nextFetchOffset == position.offset) {\n...", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441115973", "createdAt": "2020-06-16T20:16:44Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -675,36 +676,40 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n                     completedFetch.partition);\n         } else {\n             FetchPosition position = subscriptions.position(completedFetch.partition);\n-            if (completedFetch.nextFetchOffset == position.offset) {\n-                List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n-\n-                log.trace(\"Returning {} fetched records at offset {} for assigned partition {}\",\n-                        partRecords.size(), position, completedFetch.partition);\n-\n-                if (completedFetch.nextFetchOffset > position.offset) {\n-                    FetchPosition nextPosition = new FetchPosition(\n-                            completedFetch.nextFetchOffset,\n-                            completedFetch.lastEpoch,\n-                            position.currentLeader);\n-                    log.trace(\"Update fetching position to {} for partition {}\", nextPosition, completedFetch.partition);\n-                    subscriptions.position(completedFetch.partition, nextPosition);\n-                }\n+            if (position != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e12d62f270f029de1f9ee995f04fb24f2329bce2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTcyOTQxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyOToxMlrOGlNpUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjoyODoxOVrOGlddOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDA2Ng==", "bodyText": "Hmm, if the position is null, we raise out of range?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441674066", "createdAt": "2020-06-17T16:29:12Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1281,11 +1291,12 @@ private CompletedFetch initializeCompletedFetch(CompletedFetch nextCompletedFetc\n                 Optional<Integer> clearedReplicaId = subscriptions.clearPreferredReadReplica(tp);\n                 if (!clearedReplicaId.isPresent()) {\n                     // If there's no preferred replica to clear, we're fetching from the leader so handle this error normally\n-                    if (fetchOffset != subscriptions.position(tp).offset) {\n+                    FetchPosition position = subscriptions.position(tp);\n+                    if (position != null && fetchOffset != position.offset) {\n                         log.debug(\"Discarding stale fetch response for partition {} since the fetched offset {} \" +\n-                                \"does not match the current offset {}\", tp, fetchOffset, subscriptions.position(tp));\n+                                \"does not match the current offset {}\", tp, fetchOffset, position);\n                     } else {\n-                        handleOffsetOutOfRange(subscriptions.position(tp), tp, \"error response in offset fetch\");\n+                        handleOffsetOutOfRange(position, tp, \"error response in offset fetch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjkwMQ==", "bodyText": "What should we do here for null position? This can happen if we get OOOR while we're in the middle of a reset. Maybe we should just log a warning? Or maybe just change the condition to\nif (position == null || fetchOffset != position.offset)", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441742901", "createdAt": "2020-06-17T18:25:08Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1281,11 +1291,12 @@ private CompletedFetch initializeCompletedFetch(CompletedFetch nextCompletedFetc\n                 Optional<Integer> clearedReplicaId = subscriptions.clearPreferredReadReplica(tp);\n                 if (!clearedReplicaId.isPresent()) {\n                     // If there's no preferred replica to clear, we're fetching from the leader so handle this error normally\n-                    if (fetchOffset != subscriptions.position(tp).offset) {\n+                    FetchPosition position = subscriptions.position(tp);\n+                    if (position != null && fetchOffset != position.offset) {\n                         log.debug(\"Discarding stale fetch response for partition {} since the fetched offset {} \" +\n-                                \"does not match the current offset {}\", tp, fetchOffset, subscriptions.position(tp));\n+                                \"does not match the current offset {}\", tp, fetchOffset, position);\n                     } else {\n-                        handleOffsetOutOfRange(subscriptions.position(tp), tp, \"error response in offset fetch\");\n+                        handleOffsetOutOfRange(position, tp, \"error response in offset fetch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDA2Ng=="}, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjIzNQ==", "bodyText": "Since we have the check for hasValidPosition at the start of this method, we could raise an exception. However, in the success case, we currently just ignore the response if the position is null. I'm ok with either option.", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441776235", "createdAt": "2020-06-17T19:15:07Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1281,11 +1291,12 @@ private CompletedFetch initializeCompletedFetch(CompletedFetch nextCompletedFetc\n                 Optional<Integer> clearedReplicaId = subscriptions.clearPreferredReadReplica(tp);\n                 if (!clearedReplicaId.isPresent()) {\n                     // If there's no preferred replica to clear, we're fetching from the leader so handle this error normally\n-                    if (fetchOffset != subscriptions.position(tp).offset) {\n+                    FetchPosition position = subscriptions.position(tp);\n+                    if (position != null && fetchOffset != position.offset) {\n                         log.debug(\"Discarding stale fetch response for partition {} since the fetched offset {} \" +\n-                                \"does not match the current offset {}\", tp, fetchOffset, subscriptions.position(tp));\n+                                \"does not match the current offset {}\", tp, fetchOffset, position);\n                     } else {\n-                        handleOffsetOutOfRange(subscriptions.position(tp), tp, \"error response in offset fetch\");\n+                        handleOffsetOutOfRange(position, tp, \"error response in offset fetch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDA2Ng=="}, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMzExMw==", "bodyText": "I'm inclined to keep the same behavior as we previously did and just warn (not that we expect this case to get hit anymore)", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441933113", "createdAt": "2020-06-18T02:28:19Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1281,11 +1291,12 @@ private CompletedFetch initializeCompletedFetch(CompletedFetch nextCompletedFetc\n                 Optional<Integer> clearedReplicaId = subscriptions.clearPreferredReadReplica(tp);\n                 if (!clearedReplicaId.isPresent()) {\n                     // If there's no preferred replica to clear, we're fetching from the leader so handle this error normally\n-                    if (fetchOffset != subscriptions.position(tp).offset) {\n+                    FetchPosition position = subscriptions.position(tp);\n+                    if (position != null && fetchOffset != position.offset) {\n                         log.debug(\"Discarding stale fetch response for partition {} since the fetched offset {} \" +\n-                                \"does not match the current offset {}\", tp, fetchOffset, subscriptions.position(tp));\n+                                \"does not match the current offset {}\", tp, fetchOffset, position);\n                     } else {\n-                        handleOffsetOutOfRange(subscriptions.position(tp), tp, \"error response in offset fetch\");\n+                        handleOffsetOutOfRange(position, tp, \"error response in offset fetch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDA2Ng=="}, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTczMzQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDoyM1rOGlNsEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozMDoyM1rOGlNsEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDc2OA==", "bodyText": "nit: rename variable as well?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441674768", "createdAt": "2020-06-17T16:30:23Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -783,7 +783,7 @@ public boolean rejoinNeededOrPending() {\n      * @return true iff the operation completed within the timeout\n      */\n     public boolean refreshCommittedOffsetsIfNeeded(Timer timer) {\n-        final Set<TopicPartition> missingFetchPositions = subscriptions.missingFetchPositions();\n+        final Set<TopicPartition> missingFetchPositions = subscriptions.initializingPartitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTc2OTM1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0MDowN1rOGlOC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0MDowN1rOGlOC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MDYxOA==", "bodyText": "nit: document return", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441680618", "createdAt": "2020-06-17T16:40:07Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -782,6 +787,13 @@ private void reset(OffsetResetStrategy strategy) {\n             });\n         }\n \n+        /**\n+         * Check if the position exists and needs to be validated. If so, enter the AWAIT_VALIDATION state. This method\n+         * also will update the position with the current leader and epoch.\n+         *\n+         * @param currentLeaderAndEpoch leader and epoch to compare the offset with\n+         * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTc4OTgyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0NTozMFrOGlOQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0NTozMFrOGlOQXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4NDA2Mw==", "bodyText": "nit: fix doc", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441684063", "createdAt": "2020-06-17T16:45:30Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -924,10 +951,19 @@ default FetchState transitionTo(FetchState newState) {\n             }\n         }\n \n+        /**\n+         * Return the valid states which this state can transition to\n+         */\n         Collection<FetchState> validTransitions();\n \n-        boolean hasPosition();\n+        /**\n+         * Test if this state has a position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTgzMDI2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/SubscriptionStateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo1NjoyMVrOGlOrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozNDoxNlrOGlSJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MDkzNA==", "bodyText": "This test would might be more interesting if we did a seek which required validation. Could we provide an epoch in the fetch position? Maybe both cases should be covered?", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441690934", "createdAt": "2020-06-17T16:56:21Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/SubscriptionStateTest.java", "diffHunk": "@@ -673,4 +673,37 @@ public void onPartitionsRevoked(Collection<TopicPartition> partitions) {\n \n     }\n \n+    @Test\n+    public void resetOffsetNoValidation() {\n+        // Check that offset reset works when we can't validate offsets (older brokers)\n+\n+        Node broker1 = new Node(1, \"localhost\", 9092);\n+        state.assignFromUser(Collections.singleton(tp0));\n+\n+        // Reset offsets\n+        state.requestOffsetReset(tp0, OffsetResetStrategy.EARLIEST);\n+\n+        // Attempt to validate with older API version, should do nothing\n+        ApiVersions oldApis = new ApiVersions();\n+        oldApis.update(\"1\", NodeApiVersions.create(ApiKeys.OFFSET_FOR_LEADER_EPOCH.id, (short) 0, (short) 2));\n+        assertFalse(state.maybeValidatePositionForCurrentLeader(oldApis, tp0, new Metadata.LeaderAndEpoch(\n+                Optional.of(broker1), Optional.empty())));\n+        assertFalse(state.hasValidPosition(tp0));\n+        assertFalse(state.awaitingValidation(tp0));\n+        assertTrue(state.isOffsetResetNeeded(tp0));\n+\n+        // Complete the reset via unvalidated seek\n+        state.seekUnvalidated(tp0, new SubscriptionState.FetchPosition(10L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzkzNQ==", "bodyText": "Sure, I'll add another case", "url": "https://github.com/apache/kafka/pull/8841#discussion_r441747935", "createdAt": "2020-06-17T18:34:16Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/SubscriptionStateTest.java", "diffHunk": "@@ -673,4 +673,37 @@ public void onPartitionsRevoked(Collection<TopicPartition> partitions) {\n \n     }\n \n+    @Test\n+    public void resetOffsetNoValidation() {\n+        // Check that offset reset works when we can't validate offsets (older brokers)\n+\n+        Node broker1 = new Node(1, \"localhost\", 9092);\n+        state.assignFromUser(Collections.singleton(tp0));\n+\n+        // Reset offsets\n+        state.requestOffsetReset(tp0, OffsetResetStrategy.EARLIEST);\n+\n+        // Attempt to validate with older API version, should do nothing\n+        ApiVersions oldApis = new ApiVersions();\n+        oldApis.update(\"1\", NodeApiVersions.create(ApiKeys.OFFSET_FOR_LEADER_EPOCH.id, (short) 0, (short) 2));\n+        assertFalse(state.maybeValidatePositionForCurrentLeader(oldApis, tp0, new Metadata.LeaderAndEpoch(\n+                Optional.of(broker1), Optional.empty())));\n+        assertFalse(state.hasValidPosition(tp0));\n+        assertFalse(state.awaitingValidation(tp0));\n+        assertTrue(state.isOffsetResetNeeded(tp0));\n+\n+        // Complete the reset via unvalidated seek\n+        state.seekUnvalidated(tp0, new SubscriptionState.FetchPosition(10L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MDkzNA=="}, "originalCommit": {"oid": "10f1e90d0288747c579dd760701e6c0f29052ba4"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2349, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}