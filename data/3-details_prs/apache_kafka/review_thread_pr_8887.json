{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NzY5NTQw", "number": 8887, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMToxNDozOVrOEGTiQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzo1ODo0M1rOEGlyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDQ2OTc3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMToxNDozOVrOGlBHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTozMTowOVrOGnRtjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA==", "bodyText": "At first thought, the not clean case normally just do some logs. with only the log string different,  I would like to still use the executeAndMaybeSwallow  in Task.scala, but since callers may need different log levels or they may want do more than just a log, so just pass a more generic argument actionIfNotClean.\nAnd yeah, java.util.function.Consumer looks ugly but I am not aware of some elegant way for import alias...", "url": "https://github.com/apache/kafka/pull/8887#discussion_r441468868", "createdAt": "2020-06-17T11:14:39Z", "author": {"login": "feyman2016"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NDI0NQ==", "bodyText": "It seems not possible in Java", "url": "https://github.com/apache/kafka/pull/8887#discussion_r441954245", "createdAt": "2020-06-18T03:56:06Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NDU3NA==", "bodyText": "I am wondering if adding this method to TaskManager is the best choice (cf https://issues.apache.org/jira/browse/KAFKA-10055). Thoughts?", "url": "https://github.com/apache/kafka/pull/8887#discussion_r442574574", "createdAt": "2020-06-19T00:49:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NjQwMg==", "bodyText": "@abbccdda :(\n@mjsax\nI have similar thoughts when doing this, but I don't know enough context to decide whether this method is general enough to be extracted out to a utility class. If there are more similar static methods in other places, then I think we should put it in the utility class.", "url": "https://github.com/apache/kafka/pull/8887#discussion_r443096402", "createdAt": "2020-06-20T03:17:39Z", "author": {"login": "feyman2016"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2ODU3MQ==", "bodyText": "I am also fine to just merge this as-is, and refactor via KAFKA-10055.\n\\cc @abbccdda WDYT?", "url": "https://github.com/apache/kafka/pull/8887#discussion_r443768571", "createdAt": "2020-06-22T19:08:34Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNzgzNw==", "bodyText": "I'm fine as well, will make a reference to 10055 of this PR", "url": "https://github.com/apache/kafka/pull/8887#discussion_r443837837", "createdAt": "2020-06-22T21:31:09Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -1048,4 +1042,28 @@ public String toString(final String indent) {\n     Set<TaskId> lockedTaskDirectories() {\n         return Collections.unmodifiableSet(lockedTaskDirectories);\n     }\n+\n+    public static void executeAndMaybeSwallow(final boolean clean,\n+                                              final Runnable runnable,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfClean,\n+                                              final java.util.function.Consumer<RuntimeException> actionIfNotClean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODg2OA=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzQ1OTg3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzo1ODo0M1rOGleyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowNTo1M1rOGmoVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NDgyOQ==", "bodyText": "could be replaced by lambda.", "url": "https://github.com/apache/kafka/pull/8887#discussion_r441954829", "createdAt": "2020-06-18T03:58:43Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -741,29 +741,23 @@ void shutdown(final boolean clean) {\n \n         for (final Task task : tasks.values()) {\n             if (task.isActive()) {\n-                try {\n-                    activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id());\n-                } catch (final RuntimeException e) {\n-                    if (clean) {\n-                        firstException.compareAndSet(null, e);\n-                    } else {\n-                        log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e);\n-                    }\n-                }\n+                executeAndMaybeSwallow(\n+                    clean,\n+                    () -> activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id()),\n+                    e -> firstException.compareAndSet(null, e),\n+                    e -> log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e)\n+                );\n             }\n         }\n \n         tasks.clear();\n \n-        try {\n-            activeTaskCreator.closeThreadProducerIfNeeded();\n-        } catch (final RuntimeException e) {\n-            if (clean) {\n-                firstException.compareAndSet(null, e);\n-            } else {\n-                log.warn(\"Ignoring an exception while closing thread producer.\", e);\n-            }\n-        }\n+        executeAndMaybeSwallow(\n+            clean,\n+            () -> activeTaskCreator.closeThreadProducerIfNeeded(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NDExMw==", "bodyText": "This is a lambda. Do you mean method reference?", "url": "https://github.com/apache/kafka/pull/8887#discussion_r442574113", "createdAt": "2020-06-19T00:47:06Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -741,29 +741,23 @@ void shutdown(final boolean clean) {\n \n         for (final Task task : tasks.values()) {\n             if (task.isActive()) {\n-                try {\n-                    activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id());\n-                } catch (final RuntimeException e) {\n-                    if (clean) {\n-                        firstException.compareAndSet(null, e);\n-                    } else {\n-                        log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e);\n-                    }\n-                }\n+                executeAndMaybeSwallow(\n+                    clean,\n+                    () -> activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id()),\n+                    e -> firstException.compareAndSet(null, e),\n+                    e -> log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e)\n+                );\n             }\n         }\n \n         tasks.clear();\n \n-        try {\n-            activeTaskCreator.closeThreadProducerIfNeeded();\n-        } catch (final RuntimeException e) {\n-            if (clean) {\n-                firstException.compareAndSet(null, e);\n-            } else {\n-                log.warn(\"Ignoring an exception while closing thread producer.\", e);\n-            }\n-        }\n+        executeAndMaybeSwallow(\n+            clean,\n+            () -> activeTaskCreator.closeThreadProducerIfNeeded(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NDgyOQ=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEwNTgyMg==", "bodyText": "Updated with method reference, thanks!", "url": "https://github.com/apache/kafka/pull/8887#discussion_r443105822", "createdAt": "2020-06-20T06:16:08Z", "author": {"login": "feyman2016"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -741,29 +741,23 @@ void shutdown(final boolean clean) {\n \n         for (final Task task : tasks.values()) {\n             if (task.isActive()) {\n-                try {\n-                    activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id());\n-                } catch (final RuntimeException e) {\n-                    if (clean) {\n-                        firstException.compareAndSet(null, e);\n-                    } else {\n-                        log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e);\n-                    }\n-                }\n+                executeAndMaybeSwallow(\n+                    clean,\n+                    () -> activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id()),\n+                    e -> firstException.compareAndSet(null, e),\n+                    e -> log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e)\n+                );\n             }\n         }\n \n         tasks.clear();\n \n-        try {\n-            activeTaskCreator.closeThreadProducerIfNeeded();\n-        } catch (final RuntimeException e) {\n-            if (clean) {\n-                firstException.compareAndSet(null, e);\n-            } else {\n-                log.warn(\"Ignoring an exception while closing thread producer.\", e);\n-            }\n-        }\n+        executeAndMaybeSwallow(\n+            clean,\n+            () -> activeTaskCreator.closeThreadProducerIfNeeded(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NDgyOQ=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTk2Nw==", "bodyText": "Oh yea! @mjsax", "url": "https://github.com/apache/kafka/pull/8887#discussion_r443159967", "createdAt": "2020-06-20T21:05:53Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -741,29 +741,23 @@ void shutdown(final boolean clean) {\n \n         for (final Task task : tasks.values()) {\n             if (task.isActive()) {\n-                try {\n-                    activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id());\n-                } catch (final RuntimeException e) {\n-                    if (clean) {\n-                        firstException.compareAndSet(null, e);\n-                    } else {\n-                        log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e);\n-                    }\n-                }\n+                executeAndMaybeSwallow(\n+                    clean,\n+                    () -> activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(task.id()),\n+                    e -> firstException.compareAndSet(null, e),\n+                    e -> log.warn(\"Ignoring an exception while closing task \" + task.id() + \" producer.\", e)\n+                );\n             }\n         }\n \n         tasks.clear();\n \n-        try {\n-            activeTaskCreator.closeThreadProducerIfNeeded();\n-        } catch (final RuntimeException e) {\n-            if (clean) {\n-                firstException.compareAndSet(null, e);\n-            } else {\n-                log.warn(\"Ignoring an exception while closing thread producer.\", e);\n-            }\n-        }\n+        executeAndMaybeSwallow(\n+            clean,\n+            () -> activeTaskCreator.closeThreadProducerIfNeeded(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1NDgyOQ=="}, "originalCommit": {"oid": "4f8360aff1b0fb964515ad87ef37d7f2d1e4e446"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2393, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}