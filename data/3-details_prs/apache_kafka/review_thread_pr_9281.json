{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTMzNTI4", "number": 9281, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0Nzo1OFrOElqsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTozMToyMlrOEpZIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTMyMzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0Nzo1OFrOHVQ4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0OToxNlrOHXwTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1ODY4Nw==", "bodyText": "I would suggest to use named parameter or an enum for the booleans to improve readability.", "url": "https://github.com/apache/kafka/pull/9281#discussion_r492058687", "createdAt": "2020-09-21T13:47:58Z", "author": {"login": "viktorsomogyi"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -1686,9 +1686,9 @@ class KafkaConfig(val props: java.util.Map[_, _], doLog: Boolean, dynamicConfigO\n   def advertisedListeners: Seq[EndPoint] = {\n     val advertisedListenersProp = getString(KafkaConfig.AdvertisedListenersProp)\n     if (advertisedListenersProp != null)\n-      CoreUtils.listenerListToEndPoints(advertisedListenersProp, listenerSecurityProtocolMap)\n+      CoreUtils.listenerListToEndPoints(advertisedListenersProp, listenerSecurityProtocolMap, false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MDcxNA==", "bodyText": "Updated", "url": "https://github.com/apache/kafka/pull/9281#discussion_r494670714", "createdAt": "2020-09-24T23:49:16Z", "author": {"login": "asdaraujo"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -1686,9 +1686,9 @@ class KafkaConfig(val props: java.util.Map[_, _], doLog: Boolean, dynamicConfigO\n   def advertisedListeners: Seq[EndPoint] = {\n     val advertisedListenersProp = getString(KafkaConfig.AdvertisedListenersProp)\n     if (advertisedListenersProp != null)\n-      CoreUtils.listenerListToEndPoints(advertisedListenersProp, listenerSecurityProtocolMap)\n+      CoreUtils.listenerListToEndPoints(advertisedListenersProp, listenerSecurityProtocolMap, false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1ODY4Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODM4NzI2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTozMToyMlrOHbCLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyMjoxNFrOHbUElQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwOTI2MQ==", "bodyText": "Can we use something like:\nassertTrue(caught.getMessage.contains(\"Each listener must have a different port\"))\n\nThat way we don't need to import hamcrest and only use junit.\nThis can be applied to all assertThat() added in this PR", "url": "https://github.com/apache/kafka/pull/9281#discussion_r498109261", "createdAt": "2020-10-01T09:31:22Z", "author": {"login": "mimaison"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -218,16 +220,26 @@ class KafkaConfigTest {\n     props.put(KafkaConfig.ZkConnectProp, \"localhost:2181\")\n \n     // listeners with duplicate port\n-    props.put(KafkaConfig.ListenersProp, \"PLAINTEXT://localhost:9091,TRACE://localhost:9091\")\n-    assertFalse(isValidKafkaConfig(props))\n+    props.put(KafkaConfig.ListenersProp, \"PLAINTEXT://localhost:9091,SSL://localhost:9091\")\n+    var caught = intercept[IllegalArgumentException] { KafkaConfig.fromProps(props) }\n+    assertThat(caught.getMessage(), containsString(\"Each listener must have a different port\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMjQ1Mw==", "bodyText": "Nice. I'll change that.", "url": "https://github.com/apache/kafka/pull/9281#discussion_r498402453", "createdAt": "2020-10-01T17:22:14Z", "author": {"login": "asdaraujo"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -218,16 +220,26 @@ class KafkaConfigTest {\n     props.put(KafkaConfig.ZkConnectProp, \"localhost:2181\")\n \n     // listeners with duplicate port\n-    props.put(KafkaConfig.ListenersProp, \"PLAINTEXT://localhost:9091,TRACE://localhost:9091\")\n-    assertFalse(isValidKafkaConfig(props))\n+    props.put(KafkaConfig.ListenersProp, \"PLAINTEXT://localhost:9091,SSL://localhost:9091\")\n+    var caught = intercept[IllegalArgumentException] { KafkaConfig.fromProps(props) }\n+    assertThat(caught.getMessage(), containsString(\"Each listener must have a different port\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwOTI2MQ=="}, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1827, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}