{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTcxOTU1", "number": 9354, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0OTo1MFrOEo9ITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxNDoxMlrOEpTIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzgwMDQ2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo0OTo1MFrOHaV4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDo0NjowMFrOHber-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw==", "bodyText": "@dajac I feel this patch can fix https://issues.apache.org/jira/browse/KAFKA-8266\nThe test case in https://issues.apache.org/jira/browse/KAFKA-8266 restarts all brokers to activate new configs. However, the data of group (__consumer_offsets) may get lost if all brokers are killed too quick (the log folder is changed when restarting broker so the restarting broker has to fetch data from other brokers). The heartbeat of running consumer will encounter UNKNOWN_MEMBER_ID in sending heartbeat request since the group data is gone. Without this patch, the heartbeat thread is disabled and the state is in UNJOINED but the rejoinNeeded is still false. In short, the consumer is not going to rejoin group so we can't see expected error.", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497383527", "createdAt": "2020-09-30T09:49:50Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY5OTY1Mw==", "bodyText": "Nice find! I analyzed the logs and I was actually trying to find out why the consumer was not rejoining. The logs coincides with what you described. It may be due to this as you pointed out.", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497699653", "createdAt": "2020-09-30T17:58:40Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwOTU1MA==", "bodyText": "@chia7712 @dajac I think this bug is only introduced recently in this PR: #8834. If your tests is executed before it then maybe there are other issues yet to be discovered.", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497709550", "createdAt": "2020-09-30T18:16:28Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMTk1MA==", "bodyText": "That test became flaky quite recently. Time wise, that could coincides. I will try to run the test without #8834 to check tomorrow.", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497721950", "createdAt": "2020-09-30T18:38:53Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2MTgxNg==", "bodyText": "It seems that we would rejoin on FENCED_INSTANCE_ID as well, is that intentional? \n  \n    \n      kafka/clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java\n    \n    \n         Line 1106\n      in\n      bd462df\n    \n    \n    \n    \n\n        \n          \n           error == Errors.FENCED_INSTANCE_ID) {", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497961816", "createdAt": "2020-10-01T03:19:24Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NjM3OA==", "bodyText": "That is fine since in the outer caller FENCED_INSTANCE_ID would be treated as fatal, in line 1386.", "url": "https://github.com/apache/kafka/pull/9354#discussion_r498576378", "createdAt": "2020-10-02T00:46:00Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -948,7 +948,7 @@ private synchronized void resetStateAndRejoin() {\n     synchronized void resetGenerationOnResponseError(ApiKeys api, Errors error) {\n         log.debug(\"Resetting generation after encountering {} from {} response and requesting re-join\", error, api);\n \n-        resetState();\n+        resetStateAndRejoin();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MzUyNw=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzQwNTE4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxMzo1MFrOHa5Gmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxMzo1MFrOHa5Gmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2MDYwMw==", "bodyText": "Could we remove this print statement?", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497960603", "createdAt": "2020-10-01T03:13:50Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -1934,12 +1933,20 @@ public void testReturnRecordsDuringRebalance() {\n         fetches1.put(tp0, new FetchInfo(3, 1));\n         client.respondFrom(fetchResponse(fetches1), node);\n \n-        records = consumer.poll(Duration.ZERO);\n+        // now complete teh rebalance\n+        client.respondFrom(syncGroupResponse(Arrays.asList(tp0, t3p0), Errors.NONE), coordinator);\n+\n+        AtomicInteger count = new AtomicInteger(0);\n+        TestUtils.waitForCondition(() -> {\n+            ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(100L));\n+            System.out.println(\"count \" + count.addAndGet(recs.count()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzQwNTI2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxMzo1OFrOHa5Gqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxMzo1OFrOHa5Gqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2MDYxOA==", "bodyText": "s/teh/the", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497960618", "createdAt": "2020-10-01T03:13:58Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -1934,12 +1933,20 @@ public void testReturnRecordsDuringRebalance() {\n         fetches1.put(tp0, new FetchInfo(3, 1));\n         client.respondFrom(fetchResponse(fetches1), node);\n \n-        records = consumer.poll(Duration.ZERO);\n+        // now complete teh rebalance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzQwNTU3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzoxNDoxMlrOHa5G2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMDo0NjoyNlrOHbesUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2MDY2Ng==", "bodyText": "Same here", "url": "https://github.com/apache/kafka/pull/9354#discussion_r497960666", "createdAt": "2020-10-01T03:14:12Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -1948,10 +1955,14 @@ public void testReturnRecordsDuringRebalance() {\n         fetches1.put(t3p0, new FetchInfo(0, 100));\n         client.respondFrom(fetchResponse(fetches1), node);\n \n-        records = consumer.poll(Duration.ZERO);\n+        count.set(0);\n+        TestUtils.waitForCondition(() -> {\n+            ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(100L));\n+            System.out.println(\"count2 \" + count.addAndGet(recs.count()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU3NjQ2NQ==", "bodyText": "Ah, thanks!", "url": "https://github.com/apache/kafka/pull/9354#discussion_r498576465", "createdAt": "2020-10-02T00:46:26Z", "author": {"login": "guozhangwang"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -1948,10 +1955,14 @@ public void testReturnRecordsDuringRebalance() {\n         fetches1.put(t3p0, new FetchInfo(0, 100));\n         client.respondFrom(fetchResponse(fetches1), node);\n \n-        records = consumer.poll(Duration.ZERO);\n+        count.set(0);\n+        TestUtils.waitForCondition(() -> {\n+            ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(100L));\n+            System.out.println(\"count2 \" + count.addAndGet(recs.count()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2MDY2Ng=="}, "originalCommit": {"oid": "52a2029211ee6395140064f4db1403c6084cdb7b"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1886, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}