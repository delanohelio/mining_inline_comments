{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODQzMjgx", "number": 8549, "title": "KAFKA-9911: Add new PRODUCER_FENCED error code", "bodyText": "Add a separate error code as PRODUCER_FENCED to differentiate INVALID_PRODUCER_EPOCH.\nOn broker side, we should replace INVALID_PRODUCER_EPOCH with PRODUCER_FENCED when the request version is the latest, while still returning INVALID_PRODUCER_EPOCH to older clients.\nOn client side, simply handling INVALID_PRODUCER_EPOCH the same as PRODUCER_FENCED if from txn coordinator APIs.\nThe TRANSACTION_TIMED_OUT code will be implemented in a subsequent PR.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-04-25T03:56:52Z", "url": "https://github.com/apache/kafka/pull/8549", "merged": true, "mergeCommit": {"oid": "b937ec75677f8af13bf6fda686f07e9c62cdd20f"}, "closed": true, "closedAt": "2020-08-12T15:54:02Z", "author": {"login": "abbccdda"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbQSQ2ABqjMyNzI0MzI3ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Dgl1AH2gAyNDA4ODQzMjgxOjgxNzQ0NTk5MGIzOTdiZWJjZGVkYzQzMGQ0MGYxNmU2YjFiZDRlZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjI1NjE4", "url": "https://github.com/apache/kafka/pull/8549#pullrequestreview-401225618", "createdAt": "2020-04-27T18:40:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDoxN1rOGMyJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDoxN1rOGMyJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzcxMg==", "bodyText": "Side improvement for shouldReplaceCoordinatorNotAvailableWithLoadInProcessInTxnOffsetCommitWithOlderClient", "url": "https://github.com/apache/kafka/pull/8549#discussion_r416057712", "createdAt": "2020-04-27T18:40:17Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -297,46 +298,271 @@ class KafkaApisTest {\n     val topic = \"topic\"\n     setupBasicMetadataCache(topic, numPartitions = 2)\n \n-    EasyMock.reset(replicaManager, clientRequestQuotaManager, requestChannel, groupCoordinator)\n+    for (version <- ApiKeys.TXN_OFFSET_COMMIT.oldestVersion to ApiKeys.TXN_OFFSET_COMMIT.latestVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/9bd99a6ae054a21e186ad452edb4842950783be1", "committedDate": "2020-05-06T16:36:56Z", "message": "add init pid bump"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODMwNjM2", "url": "https://github.com/apache/kafka/pull/8549#pullrequestreview-417830636", "createdAt": "2020-05-25T18:00:51Z", "commit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODowMDo1MlrOGaHQGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODoxMToyNVrOGaHa3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNDk3MQ==", "bodyText": "nit: For older versions.. -> we could still receive INVALID_PRODUCER_EPOCH from old versioned transaction coordinator...", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430034971", "createdAt": "2020-05-25T18:00:52Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1415,8 +1419,10 @@ public void handleResponse(AbstractResponse response) {\n                 } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.UNKNOWN_TOPIC_OR_PARTITION) {\n                     reenqueue();\n                     return;\n-                } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                    fatalError(error.exception());\n+                } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                    // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTMwMQ==", "bodyText": "nit: ditto here, We could still receive INVALID_PRODUCER_EPOCH from old versioned transaction coordinator.", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035301", "createdAt": "2020-05-25T18:02:21Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1364,6 +1364,10 @@ public void handleResponse(AbstractResponse response) {\n             } else if (error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED ||\n                     error == Errors.CLUSTER_AUTHORIZATION_FAILED) {\n                 fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTQzNg==", "bodyText": "Ditto here.", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035436", "createdAt": "2020-05-25T18:02:54Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1573,8 +1579,10 @@ public void handleResponse(AbstractResponse response) {\n                 reenqueue();\n             } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.CONCURRENT_TRANSACTIONS) {\n                 reenqueue();\n-            } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTQ1MA==", "bodyText": "Ditto here.", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035450", "createdAt": "2020-05-25T18:02:58Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1630,8 +1638,10 @@ public void handleResponse(AbstractResponse response) {\n                 reenqueue();\n             } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING) {\n                 abortableErrorIfPossible(error.exception());\n-            } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNjQyMw==", "bodyText": "If my understanding is correct this exception would never be thrown out to the caller? If that's the case do we need to put it as a public class, or could we put it as part of o.a.k.clients.internals?", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430036423", "createdAt": "2020-05-25T18:05:38Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/errors/InvalidProducerEpochException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.errors;\n+\n+/**\n+ * This exception indicates that the produce request sent to the partition leader\n+ * contains a non-matching producer epoch. When encountering this exception, the ongoing transaction\n+ * will be aborted and can be retried.\n+ */\n+public class InvalidProducerEpochException extends RetriableException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNzcyNQ==", "bodyText": "Could we also verify that the producer did retry by sending initPid to the txn coordinator?", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430037725", "createdAt": "2020-05-25T18:11:25Z", "author": {"login": "guozhangwang"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -1571,6 +1637,54 @@ public void testProducerFencedException() throws InterruptedException {\n             Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n     }\n \n+    @Test\n+    public void testInvalidProducerEpochConvertToProducerFencedInEndTxn() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+        TransactionalRequestResult commitResult = transactionManager.beginCommit();\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+        prepareEndTxnResponse(Errors.INVALID_PRODUCER_EPOCH, TransactionResult.COMMIT, producerId, epoch);\n+\n+        runUntil(commitResult::isCompleted);\n+        runUntil(responseFuture::isDone);\n+\n+        // make sure the exception was thrown directly from the follow-up calls.\n+        assertThrows(KafkaException.class, () -> transactionManager.beginTransaction());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginCommit());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginAbort());\n+        assertThrows(KafkaException.class, () -> transactionManager.sendOffsetsToTransaction(\n+            Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n+    }\n+\n+    @Test\n+    public void testInvalidProducerEpochFromProduce() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.INVALID_PRODUCER_EPOCH, producerId, epoch);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+\n+        sender.runOnce();\n+\n+        runUntil(responseFuture::isDone);\n+        assertFalse(transactionManager.hasError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 165}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/9bd99a6ae054a21e186ad452edb4842950783be1", "committedDate": "2020-05-06T16:36:56Z", "message": "add init pid bump"}, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "294a2bf8fa66dcbb5a4a132fc7b28b7c0cfa6b57", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/294a2bf8fa66dcbb5a4a132fc7b28b7c0cfa6b57", "committedDate": "2020-08-11T03:12:48Z", "message": "add producer fenced error code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b9264f7480509d483e9bb030284cfa8e7ed8c3", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/b7b9264f7480509d483e9bb030284cfa8e7ed8c3", "committedDate": "2020-08-11T03:12:48Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "912dbfe4da89b723dfd87cc2d0b2b90664adfbee", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/912dbfe4da89b723dfd87cc2d0b2b90664adfbee", "committedDate": "2020-08-11T03:12:48Z", "message": "add init pid bump"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9268669b7817a8041a3ffed8522c69c4ce95385", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/c9268669b7817a8041a3ffed8522c69c4ce95385", "committedDate": "2020-08-11T03:12:48Z", "message": "address Guozhang's comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "committedDate": "2020-08-11T03:12:48Z", "message": "invalid producer epoch recoverable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "committedDate": "2020-08-11T03:12:48Z", "message": "invalid producer epoch recoverable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzQ5ODY2", "url": "https://github.com/apache/kafka/pull/8549#pullrequestreview-464749866", "createdAt": "2020-08-11T05:03:19Z", "commit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTowMzoxOVrOG-od8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyMToyN1rOG-owDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyNzkyMA==", "bodyText": "Good catch.", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468327920", "createdAt": "2020-08-11T05:03:19Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1366,6 +1366,10 @@ public void handleResponse(AbstractResponse response) {\n             } else if (error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED ||\n                     error == Errors.CLUSTER_AUTHORIZATION_FAILED) {\n                 fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // We could still receive INVALID_PRODUCER_EPOCH from transaction coordinator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyODQ3OQ==", "bodyText": "nit: \".. old versioned transaction coordinator\", ditto below.", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468328479", "createdAt": "2020-08-11T05:05:27Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1417,8 +1421,10 @@ public void handleResponse(AbstractResponse response) {\n                 } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.UNKNOWN_TOPIC_OR_PARTITION) {\n                     reenqueue();\n                     return;\n-                } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                    fatalError(error.exception());\n+                } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMDE4NQ==", "bodyText": "Why not put this internal exception in org.apache.kafka.clients.producer.internals?", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468330185", "createdAt": "2020-08-11T05:12:10Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/internals/InvalidProducerEpochException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMDcyMg==", "bodyText": "Thanks for adding the coverage!", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468330722", "createdAt": "2020-08-11T05:14:26Z", "author": {"login": "guozhangwang"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -1571,6 +1637,54 @@ public void testProducerFencedException() throws InterruptedException {\n             Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n     }\n \n+    @Test\n+    public void testInvalidProducerEpochConvertToProducerFencedInEndTxn() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+        TransactionalRequestResult commitResult = transactionManager.beginCommit();\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+        prepareEndTxnResponse(Errors.INVALID_PRODUCER_EPOCH, TransactionResult.COMMIT, producerId, epoch);\n+\n+        runUntil(commitResult::isCompleted);\n+        runUntil(responseFuture::isDone);\n+\n+        // make sure the exception was thrown directly from the follow-up calls.\n+        assertThrows(KafkaException.class, () -> transactionManager.beginTransaction());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginCommit());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginAbort());\n+        assertThrows(KafkaException.class, () -> transactionManager.sendOffsetsToTransaction(\n+            Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n+    }\n+\n+    @Test\n+    public void testInvalidProducerEpochFromProduce() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.INVALID_PRODUCER_EPOCH, producerId, epoch);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+\n+        sender.runOnce();\n+\n+        runUntil(responseFuture::isDone);\n+        assertFalse(transactionManager.hasError());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNzcyNQ=="}, "originalCommit": {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMjU1OQ==", "bodyText": "In the new broker version, when do we still return INVALID_PRODUCER_EPOCH then? Or would we never return it any more?", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468332559", "createdAt": "2020-08-11T05:21:27Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala", "diffHunk": "@@ -539,7 +539,7 @@ class TransactionCoordinator(brokerId: Int,\n           s\"${txnIdAndPidEpoch.transactionalId} due to timeout\")\n \n       case error@(Errors.INVALID_PRODUCER_ID_MAPPING |\n-                  Errors.INVALID_PRODUCER_EPOCH |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b5affee19c24e8d46bc99d5b15ccae873ca311", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/a9b5affee19c24e8d46bc99d5b15ccae873ca311", "committedDate": "2020-08-11T16:10:53Z", "message": "address Guozhang comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4379dac808d7f56e93ac0cad8420a41c0647e310", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/4379dac808d7f56e93ac0cad8420a41c0647e310", "committedDate": "2020-08-11T18:30:37Z", "message": "fix error code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "817445990b397bebcdedc430d40f16e6b1bd4ed2", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/817445990b397bebcdedc430d40f16e6b1bd4ed2", "committedDate": "2020-08-12T04:14:42Z", "message": "move back error"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1211, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}