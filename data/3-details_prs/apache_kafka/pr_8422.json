{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDM0OTA0", "number": 8422, "title": "KAFKA-9820: validateMessagesAndAssignOffsetsCompressed allocates unused iterator", "bodyText": "3e9d1c1 introduced skipKeyValueIterator(s) which were intended to be used, but in this case were created but were not used in offset validation.\nA subset of the benchmark results follow. Looks like a 20% improvement in validation performance and a 40% reduction in garbage allocation for 1-2 batch sizes.\n# Parameters: (bufferSupplierStr = NO_CACHING, bytes = RANDOM, compressionType = LZ4, maxBatchSize = 1, messageSize = 1000, messageVersion = 2)\nBefore:\nResult \"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation\":\n64851.837 \u00b1(99.9%) 944.248 ops/s [Average]\n(min, avg, max) = (64505.317, 64851.837, 65114.359), stdev = 245.218\nCI (99.9%): [63907.589, 65796.084] (assumes normal distribution)\n\"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation:\u00b7gc.alloc.rate.norm\":\n164088.003 \u00b1(99.9%) 0.004 B/op [Average]\n(min, avg, max) = (164088.001, 164088.003, 164088.004), stdev = 0.001\nCI (99.9%): [164087.998, 164088.007] (assumes normal distribution)\nAfter:\nResult \"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation\":\n78910.273 \u00b1(99.9%) 707.024 ops/s [Average]\n(min, avg, max) = (78785.486, 78910.273, 79234.007), stdev = 183.612\nCI (99.9%): [78203.249, 79617.297] (assumes normal distribution)\n\"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation:\u00b7gc.alloc.rate.norm\":\n96440.002 \u00b1(99.9%) 0.001 B/op [Average]\n(min, avg, max) = (96440.002, 96440.002, 96440.002), stdev = 0.001\nCI (99.9%): [96440.002, 96440.003] (assumes normal distribution)\n# Parameters: (bufferSupplierStr = NO_CACHING, bytes = RANDOM, compressionType = LZ4, maxBatchSize = 2, messageSize = 1000, messageVersion = 2)\nBefore:\nResult \"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation\":\n64815.364 \u00b1(99.9%) 639.309 ops/s [Average]\n(min, avg, max) = (64594.545, 64815.364, 64983.305), stdev = 166.026\nCI (99.9%): [64176.056, 65454.673] (assumes normal distribution)\n\"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation:\u00b7gc.alloc.rate.norm\":\n163944.003 \u00b1(99.9%) 0.001 B/op [Average]\n(min, avg, max) = (163944.002, 163944.003, 163944.003), stdev = 0.001\nCI (99.9%): [163944.002, 163944.004] (assumes normal distribution)\nAfter:\nResult \"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation\":\n77075.096 \u00b1(99.9%) 201.092 ops/s [Average]\n(min, avg, max) = (77021.537, 77075.096, 77129.693), stdev = 52.223\nCI (99.9%): [76874.003, 77276.188] (assumes normal distribution)\n\"org.apache.kafka.jmh.record.RecordBatchIterationBenchmark.measureValidation:\u00b7gc.alloc.rate.norm\":\n96504.002 \u00b1(99.9%) 0.003 B/op [Average]\n(min, avg, max) = (96504.001, 96504.002, 96504.003), stdev = 0.001\nCI (99.9%): [96503.999, 96504.005] (assumes normal distribution)", "createdAt": "2020-04-04T00:06:35Z", "url": "https://github.com/apache/kafka/pull/8422", "merged": true, "mergeCommit": {"oid": "46540eb5e0a7abb32a159250564d42137bd8b99f"}, "closed": true, "closedAt": "2020-04-04T17:05:52Z", "author": {"login": "lbradstreet"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUJ_zOAH2gAyMzk4NDM0OTA0OmM4OWVjYTYwNjBkZWZhNDgwODQzYjZlOTNhODExZjFmMGI1N2FkM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUYlwqAFqTM4NzcxNjUzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/c89eca6060defa480843b6e93a811f1f0b57ad3d", "committedDate": "2020-04-04T00:03:24Z", "message": "KAFKA-9820: validateMessagesAndAssignOffsetsCompressed allocates batch iterator which is not used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQxMzI2", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387641326", "createdAt": "2020-04-04T00:07:51Z", "commit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowNzo1MlrOGAtDQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowNzo1MlrOGAtDQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MTI5OA==", "bodyText": "FIXME", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403391298", "createdAt": "2020-04-04T00:07:52Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -57,13 +65,13 @@\n         RANDOM, ONES\n     }\n \n-    @Param(value = {\"10\", \"50\", \"200\", \"500\"})\n+    @Param(value = {\"1\", \"2\", \"10\", \"50\", \"200\", \"500\"})\n     private int maxBatchSize = 200;\n \n     @Param(value = {\"LZ4\", \"SNAPPY\", \"GZIP\", \"ZSTD\", \"NONE\"})\n     private CompressionType compressionType = CompressionType.NONE;\n \n-    @Param(value = {\"1\", \"2\"})\n+    @Param(value = {\"2\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQxNTk1", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387641595", "createdAt": "2020-04-04T00:09:15Z", "commit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowOToxNVrOGAtEbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowOToxNVrOGAtEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MTU5OA==", "bodyText": "This should use the correct compression type", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403391598", "createdAt": "2020-04-04T00:09:15Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -122,6 +144,19 @@ private ByteBuffer createBatch(int batchSize) {\n         return builder.build().buffer();\n     }\n \n+    @Benchmark\n+    public void measureValidation(Blackhole bh) throws IOException {\n+        MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n+        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+                new LongRef(startingOffset), Time.SYSTEM, System.currentTimeMillis(),\n+                CompressionCodec.getCompressionCodec(\"GZIP\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321fa61d69c02da7fd72314ee4c32d12bb64275f", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/321fa61d69c02da7fd72314ee4c32d12bb64275f", "committedDate": "2020-04-04T00:10:02Z", "message": "Benchmark fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQyMTgy", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387642182", "createdAt": "2020-04-04T00:12:20Z", "commit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoxMjoyMFrOGAtGlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoxMjoyMFrOGAtGlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjE1MQ==", "bodyText": "Are we using the while loop to try and avoid the tuple allocation or something? Seems like that would be noise compared to the other allocations, no?", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403392151", "createdAt": "2020-04-04T00:12:20Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,9 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        while (recordsIterator.hasNext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daba7286f7dbe24f998dee3aeb86f0b34f497a0f", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/daba7286f7dbe24f998dee3aeb86f0b34f497a0f", "committedDate": "2020-04-04T00:17:56Z", "message": "Use scala for rather than iterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/47498014aefffd280aedad9596754bce86d01cb4", "committedDate": "2020-04-04T00:43:27Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzA2NTA5", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387706509", "createdAt": "2020-04-04T14:58:49Z", "commit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo1ODo0OVrOGAybkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo1ODo0OVrOGAybkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg==", "bodyText": "Why do we want the starting offset to be 0 for message version 2?", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403479442", "createdAt": "2020-04-04T14:58:49Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzA5MjM4", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387709238", "createdAt": "2020-04-04T15:31:50Z", "commit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNTozMTo1MFrOGAyozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNTozMTo1MFrOGAyozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4MjgyOA==", "bodyText": "why not using zipWithIndex?\n        recordsIterator.asScala.zipWithIndex.foreach {\n          case (record, batchIndex) =>\nThe zipWithIndex on scala iterator is a wrap so it should not cause performance regression too much.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403482828", "createdAt": "2020-04-04T15:31:50Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,8 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        for (record <- recordsIterator.asScala) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "826c302b0aa43881eda4d1ec434cde86e9129388", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/826c302b0aa43881eda4d1ec434cde86e9129388", "committedDate": "2020-04-04T16:13:04Z", "message": "Adjust the comment to describe v2 batches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2745f6310090d5b327bc88fe9837ab8c415f651e", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/2745f6310090d5b327bc88fe9837ab8c415f651e", "committedDate": "2020-04-04T16:49:51Z", "message": "Improve comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921fa1c48f0815f971ce40b7280133150d867c6e", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/921fa1c48f0815f971ce40b7280133150d867c6e", "committedDate": "2020-04-04T16:50:33Z", "message": "Drop oxford comma"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NzE2NTM1", "url": "https://github.com/apache/kafka/pull/8422#pullrequestreview-387716535", "createdAt": "2020-04-04T17:03:32Z", "commit": {"oid": "921fa1c48f0815f971ce40b7280133150d867c6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 92, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}