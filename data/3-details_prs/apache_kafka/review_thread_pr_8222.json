{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzA1MTYx", "number": 8222, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNDo0MlrODygThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODoyMFrODygaZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjg0Njc4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNDo0MlrOGGliyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToxNzoxNFrOGIPgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTc1Mg==", "bodyText": "The prefix for kilo, is lowercase k", "url": "https://github.com/apache/kafka/pull/8222#discussion_r409559752", "createdAt": "2020-04-16T13:34:42Z", "author": {"login": "mimaison"}, "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "diffHunk": "@@ -1179,6 +1186,50 @@ protected String getConfigValue(ConfigKey key, String headerName) {\n         }\n     }\n \n+    private static String niceMemoryUnits(ConfigKey key) {\n+        final long defaultValueBytes = ((Number) key.defaultValue).longValue();\n+        long defaultValue = defaultValueBytes;\n+        int i = 0;\n+        while (i < 5) {\n+            if (defaultValue % 1024 != 0) {\n+                break;\n+            }\n+            defaultValue /= 1024;\n+            i++;\n+        }\n+        switch (i) {\n+            case 1:\n+                return \" (=\" + defaultValue + \"KiB)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5NTgxNQ==", "bodyText": "You're right, but in this case we're dealing with kibibytes, not kilobyes, and it seems in this case KiB is the standard abbreviation.", "url": "https://github.com/apache/kafka/pull/8222#discussion_r411295815", "createdAt": "2020-04-20T11:17:14Z", "author": {"login": "tombentley"}, "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "diffHunk": "@@ -1179,6 +1186,50 @@ protected String getConfigValue(ConfigKey key, String headerName) {\n         }\n     }\n \n+    private static String niceMemoryUnits(ConfigKey key) {\n+        final long defaultValueBytes = ((Number) key.defaultValue).longValue();\n+        long defaultValue = defaultValueBytes;\n+        int i = 0;\n+        while (i < 5) {\n+            if (defaultValue % 1024 != 0) {\n+                break;\n+            }\n+            defaultValue /= 1024;\n+            i++;\n+        }\n+        switch (i) {\n+            case 1:\n+                return \" (=\" + defaultValue + \"KiB)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTc1Mg=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjg0OTcwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNToyOFrOGGlktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNToyOFrOGGlktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDI0Nw==", "bodyText": "Do we need this extra variable? It seems like defaultValueBytes is not used", "url": "https://github.com/apache/kafka/pull/8222#discussion_r409560247", "createdAt": "2020-04-16T13:35:28Z", "author": {"login": "mimaison"}, "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "diffHunk": "@@ -1179,6 +1186,50 @@ protected String getConfigValue(ConfigKey key, String headerName) {\n         }\n     }\n \n+    private static String niceMemoryUnits(ConfigKey key) {\n+        final long defaultValueBytes = ((Number) key.defaultValue).longValue();\n+        long defaultValue = defaultValueBytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjg2NDM2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODoyMFrOGGlt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODoyMFrOGGlt7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjYwNw==", "bodyText": "I wonder if using Durations would make this more readable. For example Duration.ofDays(1).toMillis() instead of 1000L * 60 * 60 * 24. WDYT?", "url": "https://github.com/apache/kafka/pull/8222#discussion_r409562607", "createdAt": "2020-04-16T13:38:20Z", "author": {"login": "mimaison"}, "path": "clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java", "diffHunk": "@@ -1179,6 +1186,50 @@ protected String getConfigValue(ConfigKey key, String headerName) {\n         }\n     }\n \n+    private static String niceMemoryUnits(ConfigKey key) {\n+        final long defaultValueBytes = ((Number) key.defaultValue).longValue();\n+        long defaultValue = defaultValueBytes;\n+        int i = 0;\n+        while (i < 5) {\n+            if (defaultValue % 1024 != 0) {\n+                break;\n+            }\n+            defaultValue /= 1024;\n+            i++;\n+        }\n+        switch (i) {\n+            case 1:\n+                return \" (=\" + defaultValue + \"KiB)\";\n+            case 2:\n+                return \" (=\" + defaultValue + \"MiB)\";\n+            case 3:\n+                return \" (=\" + defaultValue + \"GiB)\";\n+            case 4:\n+                return \" (=\" + defaultValue + \"TiB)\";\n+            default:\n+                return \"\";\n+        }\n+    }\n+\n+    private static String niceTimeUnits(ConfigKey key) {\n+        final long defaultValueBytes = ((Number) key.defaultValue).longValue();\n+        long defaultValue = defaultValueBytes;\n+        if (defaultValueBytes % 1000L * 60 * 60 * 24 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3419, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}