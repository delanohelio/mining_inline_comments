{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjgwMjQw", "number": 8236, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToxMzo1M1rODl1Ong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozOTowMlrODnqOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTk1OTk4OnYy", "diffSide": "LEFT", "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNToxMzo1M1rOFy8OOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0OToyMlrOFzuWvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1OTgwMw==", "bodyText": "Should we remove MetadataResponse.TopicMetadata altogether or does it add value?", "url": "https://github.com/apache/kafka/pull/8236#discussion_r388959803", "createdAt": "2020-03-06T15:13:53Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -150,11 +165,15 @@ class MetadataCache(brokerId: Int) extends Logging {\n   def getTopicMetadata(topics: Set[String],\n                        listenerName: ListenerName,\n                        errorUnavailableEndpoints: Boolean = false,\n-                       errorUnavailableListeners: Boolean = false): Seq[MetadataResponse.TopicMetadata] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MTE4MA==", "bodyText": "I think, we can continue to use MetadataResponse.TopicMetadata in some of the internal classes and tests. But I open to update/remove the classes the code required.", "url": "https://github.com/apache/kafka/pull/8236#discussion_r389781180", "createdAt": "2020-03-09T15:49:22Z", "author": {"login": "omkreddy"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -150,11 +165,15 @@ class MetadataCache(brokerId: Int) extends Logging {\n   def getTopicMetadata(topics: Set[String],\n                        listenerName: ListenerName,\n                        errorUnavailableEndpoints: Boolean = false,\n-                       errorUnavailableListeners: Boolean = false): Seq[MetadataResponse.TopicMetadata] = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1OTgwMw=="}, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg2OTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyOToxNVrOF1wDHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyOToxNVrOF1wDHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNjA3Ng==", "bodyText": "nit: I'd suggest changing this to accept Errors so that we don't need all the annoying .code() calls.", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391906076", "createdAt": "2020-03-12T21:29:15Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1000,24 +1002,30 @@ class KafkaApis(val requestChannel: RequestChannel,\n   private def createTopic(topic: String,\n                           numPartitions: Int,\n                           replicationFactor: Int,\n-                          properties: util.Properties = new util.Properties()): MetadataResponse.TopicMetadata = {\n+                          properties: util.Properties = new util.Properties()): MetadataResponseTopic = {\n     try {\n       adminZkClient.createTopic(topic, numPartitions, replicationFactor, properties, RackAwareMode.Safe)\n       info(\"Auto creation of topic %s with %d partitions and replication factor %d is successful\"\n         .format(topic, numPartitions, replicationFactor))\n-      new MetadataResponse.TopicMetadata(Errors.LEADER_NOT_AVAILABLE, topic, isInternal(topic),\n-        util.Collections.emptyList())\n+      metadataResponseTopic(Errors.LEADER_NOT_AVAILABLE.code(), topic, isInternal(topic), util.Collections.emptyList())\n     } catch {\n       case _: TopicExistsException => // let it go, possibly another broker created this topic\n-        new MetadataResponse.TopicMetadata(Errors.LEADER_NOT_AVAILABLE, topic, isInternal(topic),\n-          util.Collections.emptyList())\n+        metadataResponseTopic(Errors.LEADER_NOT_AVAILABLE.code(), topic, isInternal(topic), util.Collections.emptyList())\n       case ex: Throwable  => // Catch all to prevent unhandled errors\n-        new MetadataResponse.TopicMetadata(Errors.forException(ex), topic, isInternal(topic),\n-          util.Collections.emptyList())\n+        metadataResponseTopic(Errors.forException(ex).code(), topic, isInternal(topic), util.Collections.emptyList())\n     }\n   }\n \n-  private def createInternalTopic(topic: String): MetadataResponse.TopicMetadata = {\n+  private def metadataResponseTopic(errorCode: Short, topic: String, isInternal: Boolean,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTEyNjQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozODoyMVrOF1yRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozODoyMVrOF1yRSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjQ3NA==", "bodyText": "nit: for ra bunch of these accessors, we can drop parenthesis.", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391942474", "createdAt": "2020-03-12T22:38:21Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1285,13 +1293,13 @@ class KafkaApis(val requestChannel: RequestChannel,\n                 .setPort(node.port)\n                 .setThrottleTimeMs(requestThrottleMs))\n         }\n-        val responseBody = if (topicMetadata.error != Errors.NONE) {\n+        val responseBody = if (topicMetadata.errorCode() != Errors.NONE.code()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTEyODExOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozOTowMlrOF1ySRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjozOTowMlrOF1ySRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0MjcyNA==", "bodyText": "nit: this looks misaligned", "url": "https://github.com/apache/kafka/pull/8236#discussion_r391942724", "createdAt": "2020-03-12T22:39:02Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -78,9 +80,9 @@ class MetadataCache(brokerId: Int) extends Logging {\n   // If errorUnavailableListeners=true, return LISTENER_NOT_FOUND if listener is missing on the broker.\n   // Otherwise, return LEADER_NOT_AVAILABLE for broker unavailable and missing listener (Metadata response v5 and below).\n   private def getPartitionMetadata(snapshot: MetadataSnapshot, topic: String, listenerName: ListenerName, errorUnavailableEndpoints: Boolean,\n-                                   errorUnavailableListeners: Boolean): Option[Iterable[MetadataResponse.PartitionMetadata]] = {\n+                                   errorUnavailableListeners: Boolean): Option[Iterable[MetadataResponsePartition]] = {\n     snapshot.partitionStates.get(topic).map { partitions =>\n-      partitions.map { case (partitionId, partitionState) =>\n+        partitions.map { case (partitionId, partitionState) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3225, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}