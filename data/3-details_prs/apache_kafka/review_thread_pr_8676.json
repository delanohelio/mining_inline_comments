{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzcwNzY5", "number": 8676, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mjo1M1rOD8_qnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDo0MVrOEDivnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0MjUyOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/test/MockStateRestoreListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mjo1M1rOGWRrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mjo1M1rOGWRrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTU3OA==", "bodyText": "This field is not used anywhere in tests.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426011578", "createdAt": "2020-05-15T19:42:53Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/test/MockStateRestoreListener.java", "diffHunk": "@@ -18,19 +18,15 @@\n package org.apache.kafka.test;\n \n import org.apache.kafka.common.TopicPartition;\n-import org.apache.kafka.streams.KeyValue;\n-import org.apache.kafka.streams.processor.AbstractNotifyingRestoreCallback;\n+import org.apache.kafka.streams.processor.StateRestoreListener;\n \n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-public class MockStateRestoreListener extends AbstractNotifyingRestoreCallback {\n+public class MockStateRestoreListener implements StateRestoreListener {\n \n     // verifies store name called for each state\n     public final Map<String, String> storeNameCalledStates = new HashMap<>();\n-    public final List<KeyValue<byte[], byte[]>> restored = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0NDgxOnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mzo0M1rOGWRtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDowNzo1M1rOGgASHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTk2OQ==", "bodyText": "This class is actually not used anywhere except unit tests: it is only a by-product of the coupling.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426011969", "createdAt": "2020-05-15T19:43:43Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java", "diffHunk": "@@ -1,116 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMjI1Mw==", "bodyText": "awesome", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436212253", "createdAt": "2020-06-06T00:07:53Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java", "diffHunk": "@@ -1,116 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTk2OQ=="}, "originalCommit": {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0NjY0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/BatchingStateRestoreCallback.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NDoyOFrOGWRubQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NDoyOFrOGWRubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjI2OQ==", "bodyText": "Minor improvement such that any impls of the batching interface do not have to restore the per-entry restore func.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426012269", "createdAt": "2020-05-15T19:44:28Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/BatchingStateRestoreCallback.java", "diffHunk": "@@ -38,4 +38,8 @@\n      */\n     void restoreAll(Collection<KeyValue<byte[], byte[]>> records);\n \n+    @Override\n+    default void restore(byte[] key, byte[] value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg1MDMxOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/test/MockBatchingStateRestoreListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NTo0MlrOGWRwvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NTo0MlrOGWRwvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjg2MA==", "bodyText": "This mock can now be replaced by other existing ones.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r426012860", "createdAt": "2020-05-15T19:45:42Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/test/MockBatchingStateRestoreListener.java", "diffHunk": "@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.kafka.test;\n-\n-import org.apache.kafka.streams.KeyValue;\n-import org.apache.kafka.streams.processor.BatchingStateRestoreCallback;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-public class MockBatchingStateRestoreListener extends MockStateRestoreListener implements BatchingStateRestoreCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6876a9ac58a7cb35a59c4e88b8a1112a515fd9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzE0MTc1OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDowNjowNFrOGgARBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTozNjoxMFrOGgCBFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMTk3Mw==", "bodyText": "weird that the import became unused, even though there were no other code changes...", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436211973", "createdAt": "2020-06-06T00:06:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -38,7 +38,6 @@\n import org.apache.kafka.streams.processor.internals.ProcessorNode;\n import org.apache.kafka.streams.processor.internals.SourceNode;\n import org.apache.kafka.streams.state.KeyValueStore;\n-import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDY2Mg==", "bodyText": "They are used but only in javadocs; when I rebase from trunk checkstyle failed complaining about them, but when I rebased again it stopped complaining, so I guess there's some rules changed here. I will revert them back.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436240662", "createdAt": "2020-06-06T05:36:10Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -38,7 +38,6 @@\n import org.apache.kafka.streams.processor.internals.ProcessorNode;\n import org.apache.kafka.streams.processor.internals.SourceNode;\n import org.apache.kafka.streams.state.KeyValueStore;\n-import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMTk3Mw=="}, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzE0OTA4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDoxMzoxMFrOGgAVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNDo0M1rOGghgMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA==", "bodyText": "It doesn't look like this was related to the bulk loading, but I'm guessing it was.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436213050", "createdAt": "2020-06-06T00:13:10Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java", "diffHunk": "@@ -210,30 +207,6 @@ public void shouldFindSingleStoreForChangelog() {\n         );\n     }\n \n-    @Test\n-    public void shouldRestoreStoreWithRestoreCallback() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjE1Nw==", "bodyText": "Ah good catch, I should not remove this test; instead I'd just replace the removed MockBatchingStateRestoreListener with MockStateStoreCallback.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242157", "createdAt": "2020-06-06T06:02:43Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java", "diffHunk": "@@ -210,30 +207,6 @@ public void shouldFindSingleStoreForChangelog() {\n         );\n     }\n \n-    @Test\n-    public void shouldRestoreStoreWithRestoreCallback() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA=="}, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjUzMA==", "bodyText": "Thanks!", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436756530", "createdAt": "2020-06-08T14:34:43Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java", "diffHunk": "@@ -210,30 +207,6 @@ public void shouldFindSingleStoreForChangelog() {\n         );\n     }\n \n-    @Test\n-    public void shouldRestoreStoreWithRestoreCallback() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzA1MA=="}, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzE1MTk4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDoxNTo0OVrOGgAW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozMjo1M1rOGghbhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg==", "bodyText": "Were the bulk loading options a public interface? It doesn't seem like ignoring them would be a \"breakage\", so I don't think it hinders the removal, but it does seem worth documenting, and maybe trying to detect and warn?", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436213472", "createdAt": "2020-06-06T00:15:49Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java", "diffHunk": "@@ -237,25 +236,6 @@ public void shouldNotRemoveStatisticsFromInjectedMetricsRecorderOnCloseWhenUserP\n         verify(metricsRecorder);\n     }\n \n-    @Test\n-    public void shouldRespectBulkloadOptionsDuringInit() {\n-        rocksDBStore.init(context, rocksDBStore);\n-\n-        final StateRestoreListener restoreListener = context.getRestoreListener(rocksDBStore.name());\n-\n-        restoreListener.onRestoreStart(null, rocksDBStore.name(), 0L, 0L);\n-\n-        assertThat(rocksDBStore.getOptions().level0FileNumCompactionTrigger(), equalTo(1 << 30));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MTQ5OA==", "bodyText": "Bulk loading was not a public interface, however we did have documents before about compounding listener and callback. Thinking about this, I will add a warn when detected that the registered callback is also a listener.", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436241498", "createdAt": "2020-06-06T05:51:18Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java", "diffHunk": "@@ -237,25 +236,6 @@ public void shouldNotRemoveStatisticsFromInjectedMetricsRecorderOnCloseWhenUserP\n         verify(metricsRecorder);\n     }\n \n-    @Test\n-    public void shouldRespectBulkloadOptionsDuringInit() {\n-        rocksDBStore.init(context, rocksDBStore);\n-\n-        final StateRestoreListener restoreListener = context.getRestoreListener(rocksDBStore.name());\n-\n-        restoreListener.onRestoreStart(null, rocksDBStore.name(), 0L, 0L);\n-\n-        assertThat(rocksDBStore.getOptions().level0FileNumCompactionTrigger(), equalTo(1 << 30));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg=="}, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTMzMg==", "bodyText": "Sounds good. I was thrown off by userSpecifiedOptions.prepareForBulkLoad() because it looks like the user could have specified some bulk loading options, but I took another look, and I see that that's just the variable name. The actual method is internal, and there's no way to configure bulk-loading options specifically as a user. So, I'm satisfied. Thanks!", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436755332", "createdAt": "2020-06-08T14:32:53Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java", "diffHunk": "@@ -237,25 +236,6 @@ public void shouldNotRemoveStatisticsFromInjectedMetricsRecorderOnCloseWhenUserP\n         verify(metricsRecorder);\n     }\n \n-    @Test\n-    public void shouldRespectBulkloadOptionsDuringInit() {\n-        rocksDBStore.init(context, rocksDBStore);\n-\n-        final StateRestoreListener restoreListener = context.getRestoreListener(rocksDBStore.name());\n-\n-        restoreListener.onRestoreStart(null, rocksDBStore.name(), 0L, 0L);\n-\n-        assertThat(rocksDBStore.getOptions().level0FileNumCompactionTrigger(), equalTo(1 << 30));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxMzQ3Mg=="}, "originalCommit": {"oid": "54a527b4a07e0b71cb254aba1ba9ad0e68c584fd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM2MjQyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjowNTo0MFrOGgCHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNDowN1rOGghenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjMxNQ==", "bodyText": "Updated the javadoc to emphasize one should not compound the two interfaces, cc @vvcephei .", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242315", "createdAt": "2020-06-06T06:05:40Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java", "diffHunk": "@@ -29,9 +29,12 @@\n  * Users desiring stateful operations will need to provide synchronization internally in\n  * the {@code StateRestorerListener} implementation.\n  *\n- * When used for monitoring a single {@link StateStore} using either {@link AbstractNotifyingRestoreCallback} or\n- * {@link AbstractNotifyingBatchingRestoreCallback} no synchronization is necessary\n- * as each StreamThread has its own StateStore instance.\n+ * Note that this listener is only registered at the per-client level and users can base on the {@code storeName}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dccc0f15bd970fc0650181e5341dace13ff327a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjEyNw==", "bodyText": "Thanks!", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436756127", "createdAt": "2020-06-08T14:34:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java", "diffHunk": "@@ -29,9 +29,12 @@\n  * Users desiring stateful operations will need to provide synchronization internally in\n  * the {@code StateRestorerListener} implementation.\n  *\n- * When used for monitoring a single {@link StateStore} using either {@link AbstractNotifyingRestoreCallback} or\n- * {@link AbstractNotifyingBatchingRestoreCallback} no synchronization is necessary\n- * as each StreamThread has its own StateStore instance.\n+ * Note that this listener is only registered at the per-client level and users can base on the {@code storeName}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjMxNQ=="}, "originalCommit": {"oid": "7dccc0f15bd970fc0650181e5341dace13ff327a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM2MjY4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorStateManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjowNjowNVrOGgCHqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjowNjowNVrOGgCHqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MjM0Ng==", "bodyText": "This is the warn log I added, lmk wdyt @vvcephei", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436242346", "createdAt": "2020-06-06T06:06:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorStateManager.java", "diffHunk": "@@ -303,6 +300,11 @@ public void registerStore(final StateStore store, final StateRestoreCallback sta\n             throw new IllegalArgumentException(format(\"%sStore %s has already been registered.\", logPrefix, storeName));\n         }\n \n+        if (stateRestoreCallback instanceof StateRestoreListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dccc0f15bd970fc0650181e5341dace13ff327a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTUwNDI4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ChangelogRegister.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDo0MVrOGgnwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDo0MVrOGgnwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODkxNg==", "bodyText": "Nice, this was kind of an ugly hack to being with so I'm happy to see it go", "url": "https://github.com/apache/kafka/pull/8676#discussion_r436858916", "createdAt": "2020-06-08T17:04:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ChangelogRegister.java", "diffHunk": "@@ -34,7 +34,6 @@\n     /**\n      * Unregisters and removes the passed in partitions from the set of changelogs\n      * @param removedPartitions the set of partitions to remove\n-     * @param triggerOnRestoreEnd whether to trigger the onRestoreEnd callback\n      */\n-    void unregister(final Collection<TopicPartition> removedPartitions, final boolean triggerOnRestoreEnd);\n+    void unregister(final Collection<TopicPartition> removedPartitions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dccc0f15bd970fc0650181e5341dace13ff327a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2631, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}