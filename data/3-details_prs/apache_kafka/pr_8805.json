{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjYwNTM5", "number": 8805, "title": "KAFKA-9848: Avoid triggering scheduled rebalance delay when task assignment fails but Connect workers remain in the group", "bodyText": "In the first version of the incremental cooperative protocol, in the presence of a failed sync request by the leader, the assignor was designed to treat the unapplied assignments as lost and trigger a rebalance delay.\nThis commit applies optimizations in these cases to avoid the unnecessary activation of the rebalancing delay. First, if the worker that loses the sync group request or response is the leader, then it detects this failure by checking the what is the expected generation when it performs task assignments. If it's not the expected one, it resets its view of the previous assignment because it wasn't successfully applied and it doesn't represent a correct state. Furthermore, if the worker that has missed the assignment sync is an ordinary worker, then the leader is able to detect that there are lost assignments and instead of triggering a rebalance delay among the same members of the group, it treats the lost tasks as new tasks and reassigns them immediately. If the lost assignment included revocations that were not applied, the leader reapplies these revocations again.\nExisting unit tests and integration tests are adapted to test the proposed optimizations.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-05T06:58:28Z", "url": "https://github.com/apache/kafka/pull/8805", "merged": true, "mergeCommit": {"oid": "09b22e7e67e3ddfa319b723e00105fb0af2bd48b"}, "closed": true, "closedAt": "2020-06-09T16:41:12Z", "author": {"login": "kkonstantine"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcocFc8gH2gAyNDI4MjYwNTM5OjQzY2Q3MGM0ODUyYTNhMDA5ZDVmMzI2OTA0ZWJhMWRkOGRkYjA4ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcplidNAFqTQyNzE4MTc0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43cd70c4852a3a009d5f326904eba1dd8ddb0886", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/43cd70c4852a3a009d5f326904eba1dd8ddb0886", "committedDate": "2020-06-06T00:26:21Z", "message": "KAFKA-9848: Avoid triggering scheduled rebalance delay when task assignment fails but Connect workers remain in the group"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "43cd70c4852a3a009d5f326904eba1dd8ddb0886", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/43cd70c4852a3a009d5f326904eba1dd8ddb0886", "committedDate": "2020-06-06T00:26:21Z", "message": "KAFKA-9848: Avoid triggering scheduled rebalance delay when task assignment fails but Connect workers remain in the group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cfd4d8e8ef672894e7c4cdf6cf8fe3722c7c992", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/2cfd4d8e8ef672894e7c4cdf6cf8fe3722c7c992", "committedDate": "2020-06-07T01:57:06Z", "message": "KAFKA-9848: Treat lost assignments as new only if a delay is not already in effect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a32fba0b9f51c137567480a53d01c08464df5f9", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/3a32fba0b9f51c137567480a53d01c08464df5f9", "committedDate": "2020-06-07T01:57:52Z", "message": "KAFKA-9848: Fix unit tests for IncrementalCooperativeAssignor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ba43141dc4c991401c71d62ffda62dab7f30fae", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/5ba43141dc4c991401c71d62ffda62dab7f30fae", "committedDate": "2020-06-07T04:35:09Z", "message": "KAFKA-9848: Test assignment failure outside the assignor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/a0332e53309181c37b56f3a58da1434dee99945a", "committedDate": "2020-06-08T02:01:05Z", "message": "KAFKA-9848: Fix additional comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTMxNDQ3", "url": "https://github.com/apache/kafka/pull/8805#pullrequestreview-426531447", "createdAt": "2020-06-08T18:59:18Z", "commit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo1OToxOVrOGgrzgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTowMDo1OVrOGgr4CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNTMxNQ==", "bodyText": "Can we make this a little easier to understand for most users? I think it might be sufficient to add some combination of:\n\nwhat this means (e.g., the worker was partitioned and missed at least one rebalance rounds, likely due to a network issue), and\nwhat resulted (e.g., the workers gave up its tasks in case the cluster had reassigned them to another worker).\n\nAnd, should this be debug or info or warn? Warn seems wrong, since the user shouldn't do anything, but excessive #s of these could signal the need for additional tuning. WDYT?", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436925315", "createdAt": "2020-06-08T18:59:19Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -159,6 +163,13 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Base set: The previous assignment of connectors-and-tasks is a standalone snapshot that\n         // can be used to calculate derived sets\n         log.debug(\"Previous assignments: {}\", previousAssignment);\n+        int lastCompletedGenerationId = coordinator.lastCompletedGenerationId();\n+        if (previousGenerationId != lastCompletedGenerationId) {\n+            log.debug(\"Emptying previous assignments due to generation mismatch between previous \"\n+                    + \"generation ID {} and last completed generation ID {} since the last assignment: {}\",\n+                    previousGenerationId, lastCompletedGenerationId, previousAssignment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNjQ3Mg==", "bodyText": "Similar comment to that above.", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436926472", "createdAt": "2020-06-08T19:00:59Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -361,6 +369,14 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         log.debug(\"Found the following connectors and tasks missing from previous assignments: \"\n                 + lostAssignments);\n \n+        if (previousMembers.size() == memberConfigs.size() && scheduledRebalance <= 0) {\n+            log.debug(\"Group size is same between rebalances. Lost assignments are probably due to lost SyncGroup \"\n+                    + \"responses. Treating lost tasks as new tasks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTU1NTc5", "url": "https://github.com/apache/kafka/pull/8805#pullrequestreview-426555579", "createdAt": "2020-06-08T19:29:24Z", "commit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyOToyNFrOGgtVIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNTo1M1rOGgtiww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MDMwNQ==", "bodyText": "This is related to the leader's internal bookkeeping when it calculates a new assignment. It's not related to the tasks that a worker (even the leader) is actually running.\nEmptying/clearing the previous assignment might result in some tasks shuffling around, because the leader will calculate an assignment from scratch, but it doesn't affect running tasks. The new computed assignment will send assignment and/or revocations as needed based on a) what tasks each worker has reported running in this round and which tasks are configured in the config topic. Another way to say this is that the leader won't bother detecting lost tasks in this round. Every unassigned task will be treated as a new task.\nYou are right on the log message not conveying that meaning exactly. How about:\nlog.debug(\"Clearing the view of previous assignments due to generation mismatch between \"\n                    + \"previous generation ID {} and last completed generation ID {}. \",\n                    previousGenerationId, lastCompletedGenerationId);\nlog.debug(\"This can happen if the leader fails to sync the assignment within a \" \n                    + \"rebalancing round. The following view of previous assignments might be \"\n                    + \"outdated and will be ignored by the leader in the current computation of \" \n                    + \"new assignments. Possibly outdated previous assignments: {}\", previousAssignment);", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436950305", "createdAt": "2020-06-08T19:29:24Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -159,6 +163,13 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Base set: The previous assignment of connectors-and-tasks is a standalone snapshot that\n         // can be used to calculate derived sets\n         log.debug(\"Previous assignments: {}\", previousAssignment);\n+        int lastCompletedGenerationId = coordinator.lastCompletedGenerationId();\n+        if (previousGenerationId != lastCompletedGenerationId) {\n+            log.debug(\"Emptying previous assignments due to generation mismatch between previous \"\n+                    + \"generation ID {} and last completed generation ID {} since the last assignment: {}\",\n+                    previousGenerationId, lastCompletedGenerationId, previousAssignment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNTMxNQ=="}, "originalCommit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1MTQ3NQ==", "bodyText": "Also, given that the previous assignments are printed in debug, I think it makes sense to keep these log messages in debug as well.", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436951475", "createdAt": "2020-06-08T19:31:33Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -159,6 +163,13 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Base set: The previous assignment of connectors-and-tasks is a standalone snapshot that\n         // can be used to calculate derived sets\n         log.debug(\"Previous assignments: {}\", previousAssignment);\n+        int lastCompletedGenerationId = coordinator.lastCompletedGenerationId();\n+        if (previousGenerationId != lastCompletedGenerationId) {\n+            log.debug(\"Emptying previous assignments due to generation mismatch between previous \"\n+                    + \"generation ID {} and last completed generation ID {} since the last assignment: {}\",\n+                    previousGenerationId, lastCompletedGenerationId, previousAssignment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNTMxNQ=="}, "originalCommit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1Mzc5NQ==", "bodyText": "How about:\nlog.debug(\"The number of workers remained the same between rebalances. The missing \" \n                    + \"assignments that the leader is detecting are probably due to some workers \" \n                    + \"failing to receive the new assignments in the previous rebalance. Will \"\n                    + \"reassign missing tasks as new tasks\");", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436953795", "createdAt": "2020-06-08T19:35:53Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -361,6 +369,14 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         log.debug(\"Found the following connectors and tasks missing from previous assignments: \"\n                 + lostAssignments);\n \n+        if (previousMembers.size() == memberConfigs.size() && scheduledRebalance <= 0) {\n+            log.debug(\"Group size is same between rebalances. Lost assignments are probably due to lost SyncGroup \"\n+                    + \"responses. Treating lost tasks as new tasks\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyNjQ3Mg=="}, "originalCommit": {"oid": "a0332e53309181c37b56f3a58da1434dee99945a"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6de42a49e746e520493cd5ac08fc5b3e61f43b11", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/6de42a49e746e520493cd5ac08fc5b3e61f43b11", "committedDate": "2020-06-08T20:25:11Z", "message": "KAFKA-9848: Improve log messages during task assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjE3ODE5", "url": "https://github.com/apache/kafka/pull/8805#pullrequestreview-426617819", "createdAt": "2020-06-08T21:01:19Z", "commit": {"oid": "6de42a49e746e520493cd5ac08fc5b3e61f43b11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTowMToxOVrOGgwQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTowMToxOVrOGgwQ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5ODM5Ng==", "bodyText": "Is it enough to trust that the # of workers has not changed, or should we compare the members, via something like:\nif (previousMembers.equals(memberConfigs.keySet()) && scheduledRebalance <= 0) {\n\nIOW, what happens if one worker disappeared about the same time that an operator added a new worker?\nIIUC from the integration tests, this logic actually doesn't care which of these is the case -- all of the task assignments that were lost will be reassigned anyway, so it doesn't matter if the worker that gets those new assignments is the old worker that came back or a new worker. Is that right?", "url": "https://github.com/apache/kafka/pull/8805#discussion_r436998396", "createdAt": "2020-06-08T21:01:19Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -361,6 +373,16 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         log.debug(\"Found the following connectors and tasks missing from previous assignments: \"\n                 + lostAssignments);\n \n+        if (previousMembers.size() == memberConfigs.size() && scheduledRebalance <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de42a49e746e520493cd5ac08fc5b3e61f43b11"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5dfaf435e3f06293953b2b1f73e68b8bab414de", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/f5dfaf435e3f06293953b2b1f73e68b8bab414de", "committedDate": "2020-06-08T21:21:56Z", "message": "KAFKA-9848: Compare actual member IDs when deciding to reassign missing tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46567beb2515d632471441685af29f1e684565c2", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/46567beb2515d632471441685af29f1e684565c2", "committedDate": "2020-06-08T21:49:39Z", "message": "KAFKA-9848: Confirm that all the previous workers remain in the group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8a6619ea3bce0221b5efebee76f9810a8a5a7b", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/8d8a6619ea3bce0221b5efebee76f9810a8a5a7b", "committedDate": "2020-06-09T01:43:41Z", "message": "KAFKA-9848: Add a MethodLength checkstyle suppression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1210d0b2e404f620f16295ca60a104df96e3007b", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/1210d0b2e404f620f16295ca60a104df96e3007b", "committedDate": "2020-06-09T06:00:39Z", "message": "KAFKA-9848: Extend tests on lost assignments to consider previous members"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTgxNzQ1", "url": "https://github.com/apache/kafka/pull/8805#pullrequestreview-427181745", "createdAt": "2020-06-09T14:01:06Z", "commit": {"oid": "1210d0b2e404f620f16295ca60a104df96e3007b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 865, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}