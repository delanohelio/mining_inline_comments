{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDQxMjI5", "number": 7969, "title": "KAFKA-7317: Use collections subscription for main consumer to reduce metadata", "bodyText": "Also addresses KAFKA-8821\nNote that we still have to fall back to using pattern subscription if the user has added any regex-based source nodes to the topology. Includes some minor cleanup on the side", "createdAt": "2020-01-16T03:45:28Z", "url": "https://github.com/apache/kafka/pull/7969", "merged": true, "mergeCommit": {"oid": "57b2f6807d332f4e6de4dc4ad18aa24686d304de"}, "closed": true, "closedAt": "2020-01-24T19:30:48Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6x2VdAFqTM0MzY1OTQzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9nP0SgFqTM0ODI3MDY5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjU5NDM0", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343659434", "createdAt": "2020-01-16T03:47:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0NzoxNFrOFeNQEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0NzoxNFrOFeNQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODcwNQ==", "bodyText": "This is just moved since it's only used by a single class", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367218705", "createdAt": "2020-01-16T03:47:14Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -87,10 +85,6 @@\n     // map from sink processor names to sink topic (without application-id prefix for internal topics)\n     private final Map<String, String> nodeToSinkTopic = new HashMap<>();\n \n-    // map from topics to their matched regex patterns, this is to ensure one topic is passed through on source node\n-    // even if it can be matched by multiple regex patterns\n-    private final Map<String, Pattern> topicToPatterns = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjU5NjMx", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343659631", "createdAt": "2020-01-16T03:48:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0ODowN1rOFeNQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0ODowN1rOFeNQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODkwNw==", "bodyText": "Also update sourceTopicNames to keep in sync with nodeToSourceTopics", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367218907", "createdAt": "2020-01-16T03:48:07Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1048,24 +1047,23 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n     }\n \n     private void setRegexMatchedTopicsToSourceNodes() {\n-        if (subscriptionUpdates.hasUpdates()) {\n-            for (final Map.Entry<String, Pattern> stringPatternEntry : nodeToSourcePatterns.entrySet()) {\n-                final SourceNodeFactory sourceNode =\n-                    (SourceNodeFactory) nodeFactories.get(stringPatternEntry.getKey());\n-                //need to update nodeToSourceTopics with topics matched from given regex\n-                nodeToSourceTopics.put(\n-                    stringPatternEntry.getKey(),\n-                    sourceNode.getTopics(subscriptionUpdates.getUpdates()));\n-                log.debug(\"nodeToSourceTopics {}\", nodeToSourceTopics);\n+        if (hasSubscriptionUpdates()) {\n+            for (final String nodeName : nodeToSourcePatterns.keySet()) {\n+                //need to update nodeToSourceTopics and sourceTopicNames with topics matched from given regex\n+                final List<String> sourceTopics = ((SourceNodeFactory) nodeFactories.get(nodeName))\n+                                                      .getTopics(subscriptionUpdates);\n+                nodeToSourceTopics.put(nodeName, sourceTopics);\n+                sourceTopicNames.addAll(sourceTopics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjU5OTUx", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343659951", "createdAt": "2020-01-16T03:49:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0OTozOVrOFeNR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo0OTozOVrOFeNR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxOTE3Mw==", "bodyText": "This can be simplified by just using sourceTopicNames, which is identical to nodeToSourceTopics.values() but without the global topics, which we remove", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367219173", "createdAt": "2020-01-16T03:49:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1200,37 +1198,28 @@ private String decorateTopic(final String topic) {\n         return applicationId + \"-\" + topic;\n     }\n \n-    SubscriptionUpdates subscriptionUpdates() {\n-        return subscriptionUpdates;\n+    boolean usesPatternSubscription() {\n+        return (!nodeToSourcePatterns.isEmpty());\n+    }\n+\n+    synchronized Collection<String> sourceTopicCollection() {\n+        log.debug(\"No source topics using pattern subscription found, using regular subscription for the main consumer.\");\n+\n+        return sourceTopicNames;\n     }\n \n     synchronized Pattern sourceTopicPattern() {\n+        log.debug(\"Found pattern subscribed source topics, falling back to pattern subscription for the main consumer.\");\n+\n         if (topicPattern == null) {\n-            final List<String> allSourceTopics = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjYwNjc3", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343660677", "createdAt": "2020-01-16T03:53:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1MzoxN1rOFeNUnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1MzoxN1rOFeNUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxOTg2OA==", "bodyText": "The SubscriptionUpdates class and various updateXXX methods were unnecessarily complex given they all boiled down to just the 4 lines of actual actions below", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367219868", "createdAt": "2020-01-16T03:53:17Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1856,42 +1845,25 @@ private static String nodeNames(final Set<TopologyDescription.Node> nodes) {\n         return sb.toString();\n     }\n \n-    /**\n-     * Used to capture subscribed topic via Patterns discovered during the\n-     * partition assignment process.\n-     */\n-    public static class SubscriptionUpdates {\n-\n-        private final Set<String> updatedTopicSubscriptions = new HashSet<>();\n-\n-        private void updateTopics(final Collection<String> topicNames) {\n-            updatedTopicSubscriptions.clear();\n-            updatedTopicSubscriptions.addAll(topicNames);\n-        }\n-\n-        public Collection<String> getUpdates() {\n-            return Collections.unmodifiableSet(updatedTopicSubscriptions);\n-        }\n-\n-        boolean hasUpdates() {\n-            return !updatedTopicSubscriptions.isEmpty();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return String.format(\"SubscriptionUpdates{updatedTopicSubscriptions=%s}\", updatedTopicSubscriptions);\n-        }\n+    Collection<String> subscriptionUpdates() {\n+        return Collections.unmodifiableSet(subscriptionUpdates);\n     }\n \n-    void updateSubscribedTopics(final Set<String> topics,\n-                                final String logPrefix) {\n-        final SubscriptionUpdates subscriptionUpdates = new SubscriptionUpdates();\n-        log.debug(\"{}found {} topics possibly matching regex\", logPrefix, topics);\n-        // update the topic groups with the returned subscription set for regex pattern subscriptions\n-        subscriptionUpdates.updateTopics(topics);\n-        updateSubscriptions(subscriptionUpdates, logPrefix);\n+    boolean hasSubscriptionUpdates() {\n+        return !subscriptionUpdates.isEmpty();\n     }\n \n+    synchronized void updateSubscribedTopics(final Set<String> topics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 196}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjYwOTY2", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343660966", "createdAt": "2020-01-16T03:54:43Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1NDo0NFrOFeNVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMzo1NDo0NFrOFeNVmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyMDEyMQ==", "bodyText": "This is the actual fix; if the user has not themselves added pattern source topics we will go back to using regular subscription (having safely disabled auto topic creation)", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367220121", "createdAt": "2020-01-16T03:54:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -717,7 +717,15 @@ private void runLoop() {\n \n     private void enforceRebalance() {\n         consumer.unsubscribe();\n-        consumer.subscribe(builder.sourceTopicPattern(), rebalanceListener);\n+        subscribeConsumer();\n+    }\n+\n+    private void subscribeConsumer() {\n+        if (builder.usesPatternSubscription()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzOTc1Mjgx", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-343975281", "createdAt": "2020-01-16T14:59:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1OToyOFrOFecTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1OToyOFrOFecTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NTM3OQ==", "bodyText": "qq - what does this mean for users that have enabled auto topic creation? Although it's not a best practice, this seems it could lead to unexpected behavior.", "url": "https://github.com/apache/kafka/pull/7969#discussion_r367465379", "createdAt": "2020-01-16T14:59:28Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -1064,6 +1064,9 @@ private void checkIfUnexpectedUserSpecifiedConsumerConfig(final Map<String, Obje\n         consumerProps.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, StreamsPartitionAssignor.class.getName());\n         consumerProps.put(WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, getLong(WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n \n+        // disable auto topic creation\n+        consumerProps.put(ConsumerConfig.ALLOW_AUTO_CREATE_TOPICS_CONFIG, \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzUwNjQw", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-346750640", "createdAt": "2020-01-22T17:01:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowMTowM1rOFgjwqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo0NTowNVrOFglJ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NDY0OA==", "bodyText": "Nice to get rid of the use of reflection in the tests here and below", "url": "https://github.com/apache/kafka/pull/7969#discussion_r369684648", "createdAt": "2020-01-22T17:01:03Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -667,30 +680,25 @@ public void shouldAddInternalTopicConfigForRepartitionTopics() {\n \n     @SuppressWarnings(\"unchecked\")\n     @Test\n-    public void shouldSetCorrectSourceNodesWithRegexUpdatedTopics() throws Exception {\n+    public void shouldSetCorrectSourceNodesWithRegexUpdatedTopics() {\n         builder.addSource(null, \"source-1\", null, null, null, \"topic-foo\");\n         builder.addSource(null, \"source-2\", null, null, null, Pattern.compile(\"topic-[A-C]\"));\n         builder.addSource(null, \"source-3\", null, null, null, Pattern.compile(\"topic-\\\\d\"));\n \n-        final InternalTopologyBuilder.SubscriptionUpdates subscriptionUpdates = new InternalTopologyBuilder.SubscriptionUpdates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5NTg4OQ==", "bodyText": "I think in a previous commit this was static and I had concerns that it wouldn't work, so I'm glad to see you changed this.", "url": "https://github.com/apache/kafka/pull/7969#discussion_r369695889", "createdAt": "2020-01-22T17:22:09Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -215,6 +212,10 @@ Processor describe() {\n         }\n     }\n \n+    // Map from topics to their matched regex patterns, this is to ensure one topic is passed through on source node\n+    // even if it can be matched by multiple regex patterns. Only used by SourceNodeFactory\n+    private final Map<String, Pattern> topicToPatterns = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwMjQyMQ==", "bodyText": "nit: I understand the change here for compactness, but I find it a little hard to follow.  This is subjective however so feel free to keep as is.", "url": "https://github.com/apache/kafka/pull/7969#discussion_r369702421", "createdAt": "2020-01-22T17:35:13Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1048,24 +1049,23 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n     }\n \n     private void setRegexMatchedTopicsToSourceNodes() {\n-        if (subscriptionUpdates.hasUpdates()) {\n-            for (final Map.Entry<String, Pattern> stringPatternEntry : nodeToSourcePatterns.entrySet()) {\n-                final SourceNodeFactory sourceNode =\n-                    (SourceNodeFactory) nodeFactories.get(stringPatternEntry.getKey());\n-                //need to update nodeToSourceTopics with topics matched from given regex\n-                nodeToSourceTopics.put(\n-                    stringPatternEntry.getKey(),\n-                    sourceNode.getTopics(subscriptionUpdates.getUpdates()));\n-                log.debug(\"nodeToSourceTopics {}\", nodeToSourceTopics);\n+        if (hasSubscriptionUpdates()) {\n+            for (final String nodeName : nodeToSourcePatterns.keySet()) {\n+                //need to update nodeToSourceTopics and sourceTopicNames with topics matched from given regex\n+                final List<String> sourceTopics = ((SourceNodeFactory) nodeFactories.get(nodeName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwNzQ5MA==", "bodyText": "Do we need to do this at this point?  I guess so at it makes sense to have sourceTopicNames match what's in nodeToSourceTopics.  I'm only asking as we never had this before and I'm curious as to why.", "url": "https://github.com/apache/kafka/pull/7969#discussion_r369707490", "createdAt": "2020-01-22T17:45:05Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1048,24 +1047,23 @@ private void buildProcessorNode(final Map<String, ProcessorNode> processorMap,\n     }\n \n     private void setRegexMatchedTopicsToSourceNodes() {\n-        if (subscriptionUpdates.hasUpdates()) {\n-            for (final Map.Entry<String, Pattern> stringPatternEntry : nodeToSourcePatterns.entrySet()) {\n-                final SourceNodeFactory sourceNode =\n-                    (SourceNodeFactory) nodeFactories.get(stringPatternEntry.getKey());\n-                //need to update nodeToSourceTopics with topics matched from given regex\n-                nodeToSourceTopics.put(\n-                    stringPatternEntry.getKey(),\n-                    sourceNode.getTopics(subscriptionUpdates.getUpdates()));\n-                log.debug(\"nodeToSourceTopics {}\", nodeToSourceTopics);\n+        if (hasSubscriptionUpdates()) {\n+            for (final String nodeName : nodeToSourcePatterns.keySet()) {\n+                //need to update nodeToSourceTopics and sourceTopicNames with topics matched from given regex\n+                final List<String> sourceTopics = ((SourceNodeFactory) nodeFactories.get(nodeName))\n+                                                      .getTopics(subscriptionUpdates);\n+                nodeToSourceTopics.put(nodeName, sourceTopics);\n+                sourceTopicNames.addAll(sourceTopics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODkwNw=="}, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75d3027fca883b4ec4e482656655d080282202a", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c75d3027fca883b4ec4e482656655d080282202a", "committedDate": "2020-01-23T22:13:16Z", "message": "add consumer config and change subscription type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbab82fa3fc19d86e7ba46731007d0fbe857eda", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/4bbab82fa3fc19d86e7ba46731007d0fbe857eda", "committedDate": "2020-01-23T22:13:16Z", "message": "side cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad55ffc923b0f87f51277519cfebe9ff602a1927", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/ad55ffc923b0f87f51277519cfebe9ff602a1927", "committedDate": "2020-01-23T22:13:16Z", "message": "replace null check in other classes with added method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9567353de535ee72e9eb82f91e5a47acb0e95a7", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/a9567353de535ee72e9eb82f91e5a47acb0e95a7", "committedDate": "2020-01-23T22:13:16Z", "message": "fix up tests, add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b52129691c1ced9c1e44656e8df8f7934039890", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/3b52129691c1ced9c1e44656e8df8f7934039890", "committedDate": "2020-01-23T22:13:16Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/9ba3ee4e5849cae6c81d5b229846e0507630647f", "committedDate": "2020-01-23T22:13:16Z", "message": "github comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/9ba3ee4e5849cae6c81d5b229846e0507630647f", "committedDate": "2020-01-23T22:13:16Z", "message": "github comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjcwNjk4", "url": "https://github.com/apache/kafka/pull/7969#pullrequestreview-348270698", "createdAt": "2020-01-24T22:59:16Z", "commit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo1OToxNlrOFhsoyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzowNjoxOVrOFhsvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3ODY2Ng==", "bodyText": "nit: missing space between logPrefix and 'found'", "url": "https://github.com/apache/kafka/pull/7969#discussion_r370878666", "createdAt": "2020-01-24T22:59:16Z", "author": {"login": "tedyu"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1865,42 +1861,25 @@ private static String nodeNames(final Set<TopologyDescription.Node> nodes) {\n         return sb.toString();\n     }\n \n-    /**\n-     * Used to capture subscribed topic via Patterns discovered during the\n-     * partition assignment process.\n-     */\n-    public static class SubscriptionUpdates {\n-\n-        private final Set<String> updatedTopicSubscriptions = new HashSet<>();\n-\n-        private void updateTopics(final Collection<String> topicNames) {\n-            updatedTopicSubscriptions.clear();\n-            updatedTopicSubscriptions.addAll(topicNames);\n-        }\n-\n-        public Collection<String> getUpdates() {\n-            return Collections.unmodifiableSet(updatedTopicSubscriptions);\n-        }\n-\n-        boolean hasUpdates() {\n-            return !updatedTopicSubscriptions.isEmpty();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return String.format(\"SubscriptionUpdates{updatedTopicSubscriptions=%s}\", updatedTopicSubscriptions);\n-        }\n+    Set<String> subscriptionUpdates() {\n+        return Collections.unmodifiableSet(subscriptionUpdates);\n     }\n \n-    void updateSubscribedTopics(final Set<String> topics,\n-                                final String logPrefix) {\n-        final SubscriptionUpdates subscriptionUpdates = new SubscriptionUpdates();\n-        log.debug(\"{}found {} topics possibly matching regex\", logPrefix, topics);\n-        // update the topic groups with the returned subscription set for regex pattern subscriptions\n-        subscriptionUpdates.updateTopics(topics);\n-        updateSubscriptions(subscriptionUpdates, logPrefix);\n+    boolean hasSubscriptionUpdates() {\n+        return !subscriptionUpdates.isEmpty();\n     }\n \n+    synchronized void updateSubscribedTopics(final Set<String> topics,\n+                                             final String logPrefix) {\n+        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MDI5OQ==", "bodyText": "topics is a Set.\nWhat's your intention for the second parameter ?\nIf you want the number of topics logged, you should use topics.size().", "url": "https://github.com/apache/kafka/pull/7969#discussion_r370880299", "createdAt": "2020-01-24T23:06:02Z", "author": {"login": "tedyu"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1865,42 +1861,25 @@ private static String nodeNames(final Set<TopologyDescription.Node> nodes) {\n         return sb.toString();\n     }\n \n-    /**\n-     * Used to capture subscribed topic via Patterns discovered during the\n-     * partition assignment process.\n-     */\n-    public static class SubscriptionUpdates {\n-\n-        private final Set<String> updatedTopicSubscriptions = new HashSet<>();\n-\n-        private void updateTopics(final Collection<String> topicNames) {\n-            updatedTopicSubscriptions.clear();\n-            updatedTopicSubscriptions.addAll(topicNames);\n-        }\n-\n-        public Collection<String> getUpdates() {\n-            return Collections.unmodifiableSet(updatedTopicSubscriptions);\n-        }\n-\n-        boolean hasUpdates() {\n-            return !updatedTopicSubscriptions.isEmpty();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return String.format(\"SubscriptionUpdates{updatedTopicSubscriptions=%s}\", updatedTopicSubscriptions);\n-        }\n+    Set<String> subscriptionUpdates() {\n+        return Collections.unmodifiableSet(subscriptionUpdates);\n     }\n \n-    void updateSubscribedTopics(final Set<String> topics,\n-                                final String logPrefix) {\n-        final SubscriptionUpdates subscriptionUpdates = new SubscriptionUpdates();\n-        log.debug(\"{}found {} topics possibly matching regex\", logPrefix, topics);\n-        // update the topic groups with the returned subscription set for regex pattern subscriptions\n-        subscriptionUpdates.updateTopics(topics);\n-        updateSubscriptions(subscriptionUpdates, logPrefix);\n+    boolean hasSubscriptionUpdates() {\n+        return !subscriptionUpdates.isEmpty();\n     }\n \n+    synchronized void updateSubscribedTopics(final Set<String> topics,\n+                                             final String logPrefix) {\n+        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3ODY2Ng=="}, "originalCommit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MDM1MA==", "bodyText": "Similar comment as above two.", "url": "https://github.com/apache/kafka/pull/7969#discussion_r370880350", "createdAt": "2020-01-24T23:06:19Z", "author": {"login": "tedyu"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1865,42 +1861,25 @@ private static String nodeNames(final Set<TopologyDescription.Node> nodes) {\n         return sb.toString();\n     }\n \n-    /**\n-     * Used to capture subscribed topic via Patterns discovered during the\n-     * partition assignment process.\n-     */\n-    public static class SubscriptionUpdates {\n-\n-        private final Set<String> updatedTopicSubscriptions = new HashSet<>();\n-\n-        private void updateTopics(final Collection<String> topicNames) {\n-            updatedTopicSubscriptions.clear();\n-            updatedTopicSubscriptions.addAll(topicNames);\n-        }\n-\n-        public Collection<String> getUpdates() {\n-            return Collections.unmodifiableSet(updatedTopicSubscriptions);\n-        }\n-\n-        boolean hasUpdates() {\n-            return !updatedTopicSubscriptions.isEmpty();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return String.format(\"SubscriptionUpdates{updatedTopicSubscriptions=%s}\", updatedTopicSubscriptions);\n-        }\n+    Set<String> subscriptionUpdates() {\n+        return Collections.unmodifiableSet(subscriptionUpdates);\n     }\n \n-    void updateSubscribedTopics(final Set<String> topics,\n-                                final String logPrefix) {\n-        final SubscriptionUpdates subscriptionUpdates = new SubscriptionUpdates();\n-        log.debug(\"{}found {} topics possibly matching regex\", logPrefix, topics);\n-        // update the topic groups with the returned subscription set for regex pattern subscriptions\n-        subscriptionUpdates.updateTopics(topics);\n-        updateSubscriptions(subscriptionUpdates, logPrefix);\n+    boolean hasSubscriptionUpdates() {\n+        return !subscriptionUpdates.isEmpty();\n     }\n \n+    synchronized void updateSubscribedTopics(final Set<String> topics,\n+                                             final String logPrefix) {\n+        log.debug(\"{}found {} topics possibly matching subscription\", logPrefix, topics);\n+        subscriptionUpdates.clear();\n+        subscriptionUpdates.addAll(topics);\n+\n+        log.debug(\"{}updating builder with {} topic(s) with possible matching regex subscription(s)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba3ee4e5849cae6c81d5b229846e0507630647f"}, "originalPosition": 214}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2026, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}