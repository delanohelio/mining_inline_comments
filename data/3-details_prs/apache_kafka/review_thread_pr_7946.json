{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTQ4OTQ3", "number": 7946, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMDoyNFrODZjmVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDo1NFrODadGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTI0MjQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/utils/Exit.scala", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMDoyNFrOFgAiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjowNDo0NVrOFgKVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ==", "bodyText": "Should we use a by-name parameter instead?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369107519", "createdAt": "2020-01-21T16:30:24Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjg0OQ==", "bodyText": "I don't think so because the runnable is dereferenced once, immediately, and the code passes it to the underlying Java implementation org.apache.kafka.common.utils.Exit", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369122849", "createdAt": "2020-01-21T16:56:03Z", "author": {"login": "rondagostino"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzNDE3NQ==", "bodyText": "I don't understand why any of that disqualifies a by name parameter. The benefit of using a by-name is that the caller code becomes cleaner (no need for () => ...).", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369134175", "createdAt": "2020-01-21T17:16:57Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTAyOA==", "bodyText": "I got it working with a by-name parameter, and the below test passes.  Is this what you were thinking?  If so, I can add a new commit with the changes for a better look.\n  @Test\n  def shouldNotInvokeShutdownHookImmediately(): Unit = {\n    val value = \"value\"\n    val array:Array[Any] = Array(value)\n\n    def sideEffect(): Unit = {\n      // mutate the first element\n      array(0) = array(0).toString + array(0).toString\n    }\n    Exit.addShutdownHook(sideEffect) // by-name parameter, not invoked\n    // make sure the first element wasn't mutated\n    assertEquals(value, array(0))\n    Exit.addShutdownHook(sideEffect()) // by-name parameter, not invoked\n    // again make sure the first element wasn't mutated\n    assertEquals(value, array(0))\n    Exit.addShutdownHook(sideEffect, Some(\"message\")) // by-name parameter, not invoked\n    // make sure the first element still isn't mutated\n    assertEquals(value, array(0))\n  }", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369261028", "createdAt": "2020-01-21T21:48:32Z", "author": {"login": "rondagostino"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2ODA2OA==", "bodyText": "@rondagostino yeah", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369268068", "createdAt": "2020-01-21T22:04:45Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU0MjAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/utils/Exit.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMToyNlrOFgNJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxNTowMFrOFgkN8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng==", "bodyText": "Scala is an expression oriented language, there are no statements. This could be simply f or shutdownHook. Also, I think name should not be optional and should be the first parameter.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369314256", "createdAt": "2020-01-22T00:21:26Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,8 +34,8 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n-  def addShutdownHook(code: => Unit, name: Option[String] = None): Unit = {\n-    JExit.addShutdownHook(() => code, name.orNull)\n+  def addShutdownHook(statementByName: => Unit, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDE3Mg==", "bodyText": "there are no statements\nThis could be simply f or shutdownHook\n\nI was under the impression that statements were expressions that return no value (i.e. :Unit), but I could see how this may be technically incorrect.  I'll rename it shutdownHook.\n\nI think name should not be optional and should be the first parameter.\n\nThere are places where currently a name is not given, and the Thread class auto-generates a name when it is not supplied, but I don't see a problem with making it a mandatory first parameter and supplying a thread name in the places where one is not yet supplied to the shutdown hook thread; I will do that.  I will switch the order in the Java Exit class as well (name first, Runnable second).", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369340172", "createdAt": "2020-01-22T02:11:40Z", "author": {"login": "rondagostino"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,8 +34,8 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n-  def addShutdownHook(code: => Unit, name: Option[String] = None): Unit = {\n-    JExit.addShutdownHook(() => code, name.orNull)\n+  def addShutdownHook(statementByName: => Unit, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng=="}, "originalCommit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjE0NQ==", "bodyText": "Yeah, Unit in Scala is actually a type and () a value. So, no statements. :)\nWith regards to names, I personally think it's very useful to give names to threads and we should require it. I think you've done that for the Scala code. Can we do it for the Java code too?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369692145", "createdAt": "2020-01-22T17:15:00Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,8 +34,8 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n-  def addShutdownHook(code: => Unit, name: Option[String] = None): Unit = {\n-    JExit.addShutdownHook(() => code, name.orNull)\n+  def addShutdownHook(statementByName: => Unit, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng=="}, "originalCommit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYwMjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OToxNlrOFhaEjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OToxNlrOFhaEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ3OA==", "bodyText": "Hmm, odd formatting change. Can we revert this?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574478", "createdAt": "2020-01-24T10:49:16Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYwMjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OToxN1rOFhaEkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OToxN1rOFhaEkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ4Mg==", "bodyText": "Hmm, odd formatting change. Can we revert this?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574482", "createdAt": "2020-01-24T10:49:17Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYwMzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OTozM1rOFhaFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OTozM1rOFhaFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDU5NA==", "bodyText": "unrelated to the PR, perhaps revert?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574594", "createdAt": "2020-01-24T10:49:33Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -536,17 +532,15 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       producer = new MirrorMakerProducer(sync, producerProps)\n \n       // Create consumers\n-      val customRebalanceListener: Option[ConsumerRebalanceListener] = {\n+      val customRebalanceListener = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY1NDU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/utils/Exit.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMDo0OVrOFhak0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMDo0OVrOFhak0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjczOA==", "bodyText": "Couldn't we do something like:\nJExit.setShutdownHookAdder((name, runnable) => shutdownHookAdder(name, runnable.run()))\n\ninstead of a separate  functionToShutdownHookAdder method?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370582738", "createdAt": "2020-01-24T11:10:49Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(name: String, shutdownHook: => Unit): Unit = {\n+    JExit.addShutdownHook(name, () => shutdownHook)\n+  }\n+\n   def setExitProcedure(exitProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setExitProcedure(functionToProcedure(exitProcedure))\n \n   def setHaltProcedure(haltProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setHaltProcedure(functionToProcedure(haltProcedure))\n \n+  def setShutdownHookAdder(shutdownHookAdder: (String, => Unit) => Unit): Unit = {\n+    JExit.setShutdownHookAdder(functionToShutdownHookAdder(shutdownHookAdder))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY1Njk4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/kafka/security/minikdc/MinikdcTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMTo1NFrOFhamfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMTo1NFrOFhamfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzE2Ng==", "bodyText": "Since the implementation class is MiniKdc with upper-case K, we should perhaps rename this file and class to be MiniKdcTest.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583166", "createdAt": "2020-01-24T11:11:54Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/security/minikdc/MinikdcTest.scala", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.security.minikdc\n+\n+import java.util.Properties\n+\n+import kafka.utils.TestUtils\n+import org.junit.Test\n+import org.junit.Assert._\n+\n+class MinikdcTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY2MTk0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDoxM1rOFhaprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDoxM1rOFhaprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4Mzk4Mg==", "bodyText": "we could use intercept[Exception]. It will simplify the code and check that Exception was thrown.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583982", "createdAt": "2020-01-24T11:14:13Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()\n+    }\n+    Exit.setHaltProcedure(haltProcedure)\n+    val statusCode = 0\n+    val message = Some(\"message\")\n+    try {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY2MzQwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDo1NFrOFhaqlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDo1NFrOFhaqlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDIxNA==", "bodyText": "Perhaps use a more specific Exception class since we want to catch this specific one later?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370584214", "createdAt": "2020-01-24T11:14:54Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}