{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDM0OTA0", "number": 8422, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowNzo1MlrODuoRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNTozMTo1MFrODus0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjIwOTc0OnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowNzo1MlrOGAtDQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowNzo1MlrOGAtDQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MTI5OA==", "bodyText": "FIXME", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403391298", "createdAt": "2020-04-04T00:07:52Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -57,13 +65,13 @@\n         RANDOM, ONES\n     }\n \n-    @Param(value = {\"10\", \"50\", \"200\", \"500\"})\n+    @Param(value = {\"1\", \"2\", \"10\", \"50\", \"200\", \"500\"})\n     private int maxBatchSize = 200;\n \n     @Param(value = {\"LZ4\", \"SNAPPY\", \"GZIP\", \"ZSTD\", \"NONE\"})\n     private CompressionType compressionType = CompressionType.NONE;\n \n-    @Param(value = {\"1\", \"2\"})\n+    @Param(value = {\"2\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjIxMTg4OnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowOToxNVrOGAtEbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowOToxNVrOGAtEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MTU5OA==", "bodyText": "This should use the correct compression type", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403391598", "createdAt": "2020-04-04T00:09:15Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -122,6 +144,19 @@ private ByteBuffer createBatch(int batchSize) {\n         return builder.build().buffer();\n     }\n \n+    @Benchmark\n+    public void measureValidation(Blackhole bh) throws IOException {\n+        MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n+        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+                new LongRef(startingOffset), Time.SYSTEM, System.currentTimeMillis(),\n+                CompressionCodec.getCompressionCodec(\"GZIP\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjIxNTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogValidator.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoxMjoyMFrOGAtGlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoyOTowMVrOGAtTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjE1MQ==", "bodyText": "Are we using the while loop to try and avoid the tuple allocation or something? Seems like that would be noise compared to the other allocations, no?", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403392151", "createdAt": "2020-04-04T00:12:20Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,9 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        while (recordsIterator.hasNext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MzI3Ng==", "bodyText": "recordsIterator is not an iterable like batches is, so I couldn't figure out how to zip it. I should change this to a scala for at very least.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403393276", "createdAt": "2020-04-04T00:17:37Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,9 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        while (recordsIterator.hasNext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjE1MQ=="}, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NDYzNg==", "bodyText": "Yeah, asScala.zip.... Anyway, your update seems fine.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403394636", "createdAt": "2020-04-04T00:24:23Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,9 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        while (recordsIterator.hasNext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjE1MQ=="}, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NTQ5NA==", "bodyText": "huh, I was trying that but intellij wasn't autocompleting. Not sure what happened.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403395494", "createdAt": "2020-04-04T00:29:01Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,9 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        while (recordsIterator.hasNext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MjE1MQ=="}, "originalCommit": {"oid": "c89eca6060defa480843b6e93a811f1f0b57ad3d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjkyNzE0OnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNDo1ODo0OVrOGAybkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNjo1MDoxNlrOGAzH1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg==", "bodyText": "Why do we want the starting offset to be 0 for message version 2?", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403479442", "createdAt": "2020-04-04T14:58:49Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4MzE4NQ==", "bodyText": "That's a good question which I should have discussed. v2 batches should be created with relative offsets/baseOffset 0, and then they should be stamped in validateMessagesAndAssignOffsetsCompressed. If we use a startingOffset of 42 we generate a batch that will not pass validation as the relative offset of its first message is 42. A better solution is to have a startingOffset of 42 in the stamping phase and a starting  offset of 0 as the baseOffset for the builder (all of the LogTest code uses 0 for multiple batches).", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403483185", "createdAt": "2020-04-04T15:35:02Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg=="}, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzI2Mg==", "bodyText": "I adjusted the comment as the benchmark will mutate the batch and causing failures in later iterations. Starting with baseOffset 0 solves this problem in a way which does not require @Setup(Level.Invocation) which has numerous gotchas with respect to accurate measurements.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403487262", "createdAt": "2020-04-04T16:15:30Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg=="}, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4ODY1OQ==", "bodyText": "Did we miss a as after 0?", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403488659", "createdAt": "2020-04-04T16:30:15Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg=="}, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MDc3NQ==", "bodyText": "Fixed", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403490775", "createdAt": "2020-04-04T16:50:16Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -83,9 +94,20 @@\n     private int[] batchSizes;\n     private BufferSupplier bufferSupplier;\n \n+\n+\n     @Setup\n     public void init() {\n-        bufferSupplier = BufferSupplier.create();\n+        // zero starting offset is much faster for v1 batches, but that will almost never happen\n+        startingOffset = messageVersion == 2 ? 0 : 42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3OTQ0Mg=="}, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjk1MzYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogValidator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNTozMTo1MFrOGAyozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxNTozMTo1MFrOGAyozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4MjgyOA==", "bodyText": "why not using zipWithIndex?\n        recordsIterator.asScala.zipWithIndex.foreach {\n          case (record, batchIndex) =>\nThe zipWithIndex on scala iterator is a wrap so it should not cause performance regression too much.", "url": "https://github.com/apache/kafka/pull/8422#discussion_r403482828", "createdAt": "2020-04-04T15:31:50Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogValidator.scala", "diffHunk": "@@ -414,7 +414,8 @@ private[log] object LogValidator extends Logging {\n \n       try {\n         val recordErrors = new ArrayBuffer[ApiRecordError](0)\n-        for ((record, batchIndex) <- batch.asScala.view.zipWithIndex) {\n+        var batchIndex = 0\n+        for (record <- recordsIterator.asScala) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47498014aefffd280aedad9596754bce86d01cb4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3207, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}