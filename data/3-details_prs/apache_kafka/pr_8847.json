{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzc1NTM2", "number": 8847, "title": "KAFKA-7833: Add missing test", "bodyText": "Quick follow up to #8825\nCall for review @guozhangwang @vvcephei", "createdAt": "2020-06-11T00:42:45Z", "url": "https://github.com/apache/kafka/pull/8847", "merged": true, "mergeCommit": {"oid": "eef5d494329a4526783c16e7b5711b04bfbd01b2"}, "closed": true, "closedAt": "2020-06-11T03:05:11Z", "author": {"login": "mjsax"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqDShjgH2gAyNDMyNzc1NTM2OjQyMDEzMzI2ZmE3NTA2OGYwNDUyODEzZTA3MjcyOWQ5ZjBhMGFiMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqEsv-AFqTQyODU0ODExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/42013326fa75068f0452813e072729d9f0a0ab19", "committedDate": "2020-06-11T00:40:51Z", "message": "KAFKA-7833: Add missing test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5MjE3", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519217", "createdAt": "2020-06-11T00:43:08Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0MzowOVrOGiK0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0MzowOVrOGiK0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MTkzMg==", "bodyText": "Minor improvement for the error message", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438481932", "createdAt": "2020-06-11T00:43:09Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -680,8 +680,11 @@ private void validateGlobalStoreArguments(final String sourceName,\n         if (nodeFactories.containsKey(processorName)) {\n             throw new TopologyException(\"Processor \" + processorName + \" is already added.\");\n         }\n-        if (stateFactories.containsKey(storeName) || globalStateBuilders.containsKey(storeName)) {\n-            throw new TopologyException(\"StateStore \" + storeName + \" is already added.\");\n+        if (stateFactories.containsKey(storeName)) {\n+            throw new TopologyException(\"A different StateStore has already been added with the name \" + storeName);\n+        }\n+        if (globalStateBuilders.containsKey(storeName)) {\n+            throw new TopologyException(\"A different GlobalStateStore has already been added with the name \" + storeName);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5MzMw", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519330", "createdAt": "2020-06-11T00:43:32Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0MzozMlrOGiK0aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0MzozMlrOGiK0aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MjAyNA==", "bodyText": "Just renaming the store to make the error message in the tests easier to read.", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438482024", "createdAt": "2020-06-11T00:43:32Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -62,7 +63,7 @@\n \n     private final Serde<String> stringSerde = Serdes.String();\n     private final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n-    private final StoreBuilder<?> storeBuilder = new MockKeyValueStoreBuilder(\"store\", false);\n+    private final StoreBuilder<?> storeBuilder = new MockKeyValueStoreBuilder(\"testStore\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5NTQ1", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519545", "createdAt": "2020-06-11T00:44:18Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NDoxOFrOGiK1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NDoxOFrOGiK1DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MjE4OA==", "bodyText": "Just refactoring:\n\nadd missing generic types\nuse assertThrows\nadd check for error message", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438482188", "createdAt": "2020-06-11T00:44:18Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -372,48 +373,112 @@ public void testAddStateStoreWithSink() {\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameName() {\n+        final StoreBuilder<KeyValueStore<Object, Object>> otherBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5NTk3", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519597", "createdAt": "2020-06-11T00:44:30Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NDozMFrOGiK1OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NDozMFrOGiK1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MjIzMg==", "bodyText": "As above", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438482232", "createdAt": "2020-06-11T00:44:30Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -372,48 +373,112 @@ public void testAddStateStoreWithSink() {\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameName() {\n+        final StoreBuilder<KeyValueStore<Object, Object>> otherBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false);\n+\n         builder.addStateStore(storeBuilder);\n-        final StoreBuilder otherBuilder = new MockKeyValueStoreBuilder(\"store\", false);\n-        try {\n-            builder.addStateStore(otherBuilder);\n-            fail(\"Should throw TopologyException with store name conflict\");\n-        } catch (final TopologyException expected) { /* ok */ }\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addStateStore(otherBuilder)\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different StateStore has already been added with the name testStore\")\n+        );\n     }\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameNameWhenFirstStoreIsGlobal() {\n-        final StoreBuilder storeBuilder = new MockKeyValueStoreBuilder(\"store\", false).withLoggingDisabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5Nzc3", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519777", "createdAt": "2020-06-11T00:45:07Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NTowOFrOGiK17w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NTowOFrOGiK17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MjQxNQ==", "bodyText": "As above (the diff is just weird... this is an existing test; cf. below)", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438482415", "createdAt": "2020-06-11T00:45:08Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -372,48 +373,112 @@ public void testAddStateStoreWithSink() {\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameName() {\n+        final StoreBuilder<KeyValueStore<Object, Object>> otherBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false);\n+\n         builder.addStateStore(storeBuilder);\n-        final StoreBuilder otherBuilder = new MockKeyValueStoreBuilder(\"store\", false);\n-        try {\n-            builder.addStateStore(otherBuilder);\n-            fail(\"Should throw TopologyException with store name conflict\");\n-        } catch (final TopologyException expected) { /* ok */ }\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addStateStore(otherBuilder)\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different StateStore has already been added with the name testStore\")\n+        );\n     }\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameNameWhenFirstStoreIsGlobal() {\n-        final StoreBuilder storeBuilder = new MockKeyValueStoreBuilder(\"store\", false).withLoggingDisabled();\n+        final StoreBuilder<KeyValueStore<Object, Object>> globalBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false).withLoggingDisabled();\n+\n         builder.addGlobalStore(\n-                storeBuilder,\n+            globalBuilder,\n+            \"global-store\",\n+            null,\n+            null,\n+            null,\n+            \"global-topic\",\n+            \"global-processor\",\n+            new MockProcessorSupplier<>()\n+        );\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addStateStore(storeBuilder)\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different GlobalStateStore has already been added with the name testStore\")\n+        );\n+    }\n+\n+    @Test\n+    public void shouldNotAllowToAddStoresWithSameNameWhenSecondStoreIsGlobal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTE5ODkw", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428519890", "createdAt": "2020-06-11T00:45:28Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NToyOFrOGiK2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDo0NToyOFrOGiK2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MjUxMg==", "bodyText": "This is the missing test case.", "url": "https://github.com/apache/kafka/pull/8847#discussion_r438482512", "createdAt": "2020-06-11T00:45:28Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -372,48 +373,112 @@ public void testAddStateStoreWithSink() {\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameName() {\n+        final StoreBuilder<KeyValueStore<Object, Object>> otherBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false);\n+\n         builder.addStateStore(storeBuilder);\n-        final StoreBuilder otherBuilder = new MockKeyValueStoreBuilder(\"store\", false);\n-        try {\n-            builder.addStateStore(otherBuilder);\n-            fail(\"Should throw TopologyException with store name conflict\");\n-        } catch (final TopologyException expected) { /* ok */ }\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addStateStore(otherBuilder)\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different StateStore has already been added with the name testStore\")\n+        );\n     }\n \n     @Test\n     public void shouldNotAllowToAddStoresWithSameNameWhenFirstStoreIsGlobal() {\n-        final StoreBuilder storeBuilder = new MockKeyValueStoreBuilder(\"store\", false).withLoggingDisabled();\n+        final StoreBuilder<KeyValueStore<Object, Object>> globalBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false).withLoggingDisabled();\n+\n         builder.addGlobalStore(\n-                storeBuilder,\n+            globalBuilder,\n+            \"global-store\",\n+            null,\n+            null,\n+            null,\n+            \"global-topic\",\n+            \"global-processor\",\n+            new MockProcessorSupplier<>()\n+        );\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addStateStore(storeBuilder)\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different GlobalStateStore has already been added with the name testStore\")\n+        );\n+    }\n+\n+    @Test\n+    public void shouldNotAllowToAddStoresWithSameNameWhenSecondStoreIsGlobal() {\n+        final StoreBuilder<KeyValueStore<Object, Object>> globalBuilder =\n+            new MockKeyValueStoreBuilder(\"testStore\", false).withLoggingDisabled();\n+\n+        builder.addStateStore(storeBuilder);\n+\n+        final TopologyException exception = assertThrows(\n+            TopologyException.class,\n+            () -> builder.addGlobalStore(\n+                globalBuilder,\n                 \"global-store\",\n                 null,\n                 null,\n                 null,\n                 \"global-topic\",\n                 \"global-processor\",\n-                new MockProcessorSupplier<>());\n-        try {\n-            builder.addStateStore(storeBuilder);\n-            fail(\"Should throw TopologyException with store name conflict\");\n-        } catch (final TopologyException expected) { /* ok */ }\n+                new MockProcessorSupplier<>()\n+            )\n+        );\n+\n+        assertThat(\n+            exception.getMessage(),\n+            equalTo(\"Invalid topology: A different StateStore has already been added with the name testStore\")\n+        );\n     }\n \n     @Test\n-    public void shouldNotAllowToAddStoresWithSameNameWhenSecondStoreIsGlobal() {\n-        final StoreBuilder storeBuilder = new MockKeyValueStoreBuilder(\"store\", false).withLoggingDisabled();\n-        builder.addStateStore(storeBuilder);\n-        try {\n-            builder.addGlobalStore(\n-                    storeBuilder,\n-                    \"global-store\",\n-                    null,\n-                    null,\n-                    null,\n-                    \"global-topic\",\n-                    \"global-processor\",\n-                    new MockProcessorSupplier<>());\n-            fail(\"Should throw TopologyException with store name conflict\");\n-        } catch (final TopologyException expected) { /* ok */ }\n+    public void shouldNotAllowToAddGlobalStoresWithSameName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTI0MDM5", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428524039", "createdAt": "2020-06-11T00:59:34Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ4MTE3", "url": "https://github.com/apache/kafka/pull/8847#pullrequestreview-428548117", "createdAt": "2020-06-11T02:19:24Z", "commit": {"oid": "42013326fa75068f0452813e072729d9f0a0ab19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 582, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}