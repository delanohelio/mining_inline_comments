{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTE2NjQ1", "number": 9779, "title": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache", "bodyText": "The test cases for ThreaCache didn't have the corresponding unit tests for all, reverseAll and reverseRange methods. This PR aims to add the same.", "createdAt": "2020-12-22T13:15:39Z", "url": "https://github.com/apache/kafka/pull/9779", "merged": true, "mergeCommit": {"oid": "9a71468cb0e5fc9faeba39b56f36d0c93ca73c59"}, "closed": true, "closedAt": "2021-05-05T10:26:52Z", "author": {"login": "vamossagar12"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABd7pGjdABqjQzNTE5MjEwMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeIJZ6hAFqTYyNDAxMDY0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f82bf47ba879cc7019d9ffc2decaa65c57c97d62", "author": {"user": {"login": "vamossagar12", "name": null}}, "url": "https://github.com/apache/kafka/commit/f82bf47ba879cc7019d9ffc2decaa65c57c97d62", "committedDate": "2020-12-22T13:13:47Z", "message": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache"}, "afterCommit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa", "author": {"user": {"login": "vamossagar12", "name": null}}, "url": "https://github.com/apache/kafka/commit/98b708e45f9a81fe597febf2cba9ca97d3feceaa", "committedDate": "2021-02-19T12:31:14Z", "message": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE1MjIxMDU2", "url": "https://github.com/apache/kafka/pull/9779#pullrequestreview-615221056", "createdAt": "2021-03-18T10:45:31Z", "commit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQxMDo0NTozMVrOI5GMTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQxMTowNjo0NlrOI5HFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njc0MTE5OQ==", "bodyText": "nit: Could you please use assertThat(iterator.peekNextKey(), is(the Byte)) here?", "url": "https://github.com/apache/kafka/pull/9779#discussion_r596741199", "createdAt": "2021-03-18T10:45:31Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java", "diffHunk": "@@ -243,6 +243,16 @@ public void shouldPeekNextKey() {\n         assertEquals(theByte, iterator.peekNextKey());\n     }\n \n+    @Test\n+    public void shouldPeekNextKeyReverseRange() {\n+        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n+        final Bytes theByte = Bytes.wrap(new byte[]{1});\n+        cache.put(namespace, theByte, dirtyEntry(theByte.get()));\n+        final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), theByte);\n+        assertEquals(theByte, iterator.peekNextKey());\n+        assertEquals(theByte, iterator.peekNextKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njc0MTU5Mg==", "bodyText": "nit: see my comment about assertThat() above.", "url": "https://github.com/apache/kafka/pull/9779#discussion_r596741592", "createdAt": "2021-03-18T10:46:05Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java", "diffHunk": "@@ -252,20 +262,43 @@ public void shouldGetSameKeyAsPeekNext() {\n         assertEquals(iterator.peekNextKey(), iterator.next().key);\n     }\n \n+    @Test\n+    public void shouldGetSameKeyAsPeekNextReverseRange() {\n+        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n+        final Bytes theByte = Bytes.wrap(new byte[]{1});\n+        cache.put(namespace, theByte, dirtyEntry(theByte.get()));\n+        final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), theByte);\n+        assertEquals(iterator.peekNextKey(), iterator.next().key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njc1NTcxNw==", "bodyText": "nit: could you try to deduplicate code here and in the other unit tests? Here for example, you could have one method like this:\n    private void shouldThrowIfNoPeekNextKey(final Supplier<MemoryLRUCacheBytesIterator> methodUnderTest) {\n        final ThreadCache.MemoryLRUCacheBytesIterator iterator = methodUnderTest.get();\n        assertThrows(NoSuchElementException.class, iterator::peekNextKey);\n    }\n\nand then two public tests\n    @Test\n    public void shouldThrowIfNoPeekNextKeyRange() {\n        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n        shouldThrowIfNoPeekNextKey(() -> cache.range(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{1})));\n    }\n\n    @Test\n    public void shouldThrowIfNoPeekNextKeyReverseRange() {\n        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n        shouldThrowIfNoPeekNextKey(() -> cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{1})));\n    }\n\nAdmittedly, in this specific case, we would not win much but for other unit tests in this test class it may be worth. Try and then decide if it is worth or not.", "url": "https://github.com/apache/kafka/pull/9779#discussion_r596755717", "createdAt": "2021-03-18T11:06:46Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java", "diffHunk": "@@ -252,20 +262,43 @@ public void shouldGetSameKeyAsPeekNext() {\n         assertEquals(iterator.peekNextKey(), iterator.next().key);\n     }\n \n+    @Test\n+    public void shouldGetSameKeyAsPeekNextReverseRange() {\n+        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n+        final Bytes theByte = Bytes.wrap(new byte[]{1});\n+        cache.put(namespace, theByte, dirtyEntry(theByte.get()));\n+        final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), theByte);\n+        assertEquals(iterator.peekNextKey(), iterator.next().key);\n+    }\n+\n     @Test\n     public void shouldThrowIfNoPeekNextKey() {\n         final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n         final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.range(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{1}));\n         assertThrows(NoSuchElementException.class, iterator::peekNextKey);\n     }\n \n+    @Test\n+    public void shouldThrowIfNoPeekNextKeyReverseRange() {\n+        final ThreadCache cache = new ThreadCache(logContext, 10000L, new MockStreamsMetrics(new Metrics()));\n+        final ThreadCache.MemoryLRUCacheBytesIterator iterator = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{1}));\n+        assertThrows(NoSuchElementException.class, iterator::peekNextKey);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f39cbf17ae2d301c6d8c083b00a52b83b2264774", "author": {"user": {"login": "vamossagar12", "name": null}}, "url": "https://github.com/apache/kafka/commit/f39cbf17ae2d301c6d8c083b00a52b83b2264774", "committedDate": "2021-03-19T11:51:29Z", "message": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98b708e45f9a81fe597febf2cba9ca97d3feceaa", "author": {"user": {"login": "vamossagar12", "name": null}}, "url": "https://github.com/apache/kafka/commit/98b708e45f9a81fe597febf2cba9ca97d3feceaa", "committedDate": "2021-02-19T12:31:14Z", "message": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache"}, "afterCommit": {"oid": "f39cbf17ae2d301c6d8c083b00a52b83b2264774", "author": {"user": {"login": "vamossagar12", "name": null}}, "url": "https://github.com/apache/kafka/commit/f39cbf17ae2d301c6d8c083b00a52b83b2264774", "committedDate": "2021-03-19T11:51:29Z", "message": "KAFKA-10767: Adding test cases for all, reverseAll and reverseRange for ThreadCache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI0MDEwNjQ3", "url": "https://github.com/apache/kafka/pull/9779#pullrequestreview-624010647", "createdAt": "2021-03-30T08:57:14Z", "commit": {"oid": "f39cbf17ae2d301c6d8c083b00a52b83b2264774"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2374, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}