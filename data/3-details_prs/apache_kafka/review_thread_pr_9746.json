{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDA1NTI4", "number": 9746, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDo1NjoyNVrOFLvhVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNTowNzo1N1rOFQO-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3ODU3MjM4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDo1NjoyNVrOIPFZmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNTo0Nzo0NFrOIPIFzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg==", "bodyText": "Should we rename the generated class to have a more concise name? It seems unnecessarily verbose.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552688026", "createdAt": "2021-01-06T14:56:25Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d90e4647535f6a70717608013430fccfa70588"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY5MTA2Mw==", "bodyText": "How about renaming ApiVersionsResponseKey to ApiVersion?", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552691063", "createdAt": "2021-01-06T15:00:00Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, "originalCommit": {"oid": "a2d90e4647535f6a70717608013430fccfa70588"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcwNTMzNg==", "bodyText": "Using ApiVersion sounds reasonable to me.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552705336", "createdAt": "2021-01-06T15:17:11Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, "originalCommit": {"oid": "a2d90e4647535f6a70717608013430fccfa70588"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcyOTk4MA==", "bodyText": "Sounds good if there are no name conflicts as a result of that change.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552729980", "createdAt": "2021-01-06T15:45:16Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, "originalCommit": {"oid": "a2d90e4647535f6a70717608013430fccfa70588"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjczMjEwOA==", "bodyText": "I have renamed it in the latest commit.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r552732108", "createdAt": "2021-01-06T15:47:44Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -37,18 +36,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseKey> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4ODAyNg=="}, "originalCommit": {"oid": "a2d90e4647535f6a70717608013430fccfa70588"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNTIyODc3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMDo1ODowNlrOIV6wHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMDo1ODowNlrOIV6wHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzU5Nw==", "bodyText": "Can we import ApiVersion directly? I don't think ApiVersionsResponseData adds any value here and other similar places.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853597", "createdAt": "2021-01-19T00:58:06Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -39,18 +38,18 @@\n public class NodeApiVersions {\n \n     // A map of the usable versions of each API, keyed by the ApiKeys instance\n-    private final Map<ApiKeys, ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);\n+    private final Map<ApiKeys, ApiVersionsResponseData.ApiVersion> supportedVersions = new EnumMap<>(ApiKeys.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNTIzMDIyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMDo1ODo1OVrOIV6w7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMDo1ODo1OVrOIV6w7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1MzgwNQ==", "bodyText": "It would be good to have a helper method somewhere that converts ApiKeys to ApiVersion.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559853805", "createdAt": "2021-01-19T00:58:59Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -60,18 +59,21 @@ public static NodeApiVersions create() {\n      *                  value.\n      * @return A new NodeApiVersions object.\n      */\n-    public static NodeApiVersions create(Collection<ApiVersion> overrides) {\n-        List<ApiVersion> apiVersions = new LinkedList<>(overrides);\n+    public static NodeApiVersions create(Collection<ApiVersionsResponseData.ApiVersion> overrides) {\n+        List<ApiVersionsResponseData.ApiVersion> apiVersions = new LinkedList<>(overrides);\n         for (ApiKeys apiKey : ApiKeys.enabledApis()) {\n             boolean exists = false;\n-            for (ApiVersion apiVersion : apiVersions) {\n-                if (apiVersion.apiKey == apiKey.id) {\n+            for (ApiVersionsResponseData.ApiVersion apiVersion : apiVersions) {\n+                if (apiVersion.apiKey() == apiKey.id) {\n                     exists = true;\n                     break;\n                 }\n             }\n             if (!exists) {\n-                apiVersions.add(new ApiVersion(apiKey));\n+                apiVersions.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNTIzNTM5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMTowMjoyOVrOIV6zzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNToyMzo1MVrOIV-27w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg==", "bodyText": "It's a bit weird that we only check if other is null. Do we need this check at all?", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854542", "createdAt": "2021-01-19T01:02:29Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxMjc1Mg==", "bodyText": "From the usage of this method, only other can be null. So current check is enough.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559912752", "createdAt": "2021-01-19T04:52:34Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxNjU3MA==", "bodyText": "That's not a good way to design apis, right? This kind of thing should be symmetric. Why is other sometimes null?", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559916570", "createdAt": "2021-01-19T05:07:15Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkyMDg3OQ==", "bodyText": "Why is other sometimes null?\n\nThe api key is supported by client-side but Controller doesn't.\n\nThat's not a good way to design apis, right? This kind of thing should be symmetric.\n\nmake sense. will address it and add unit tests.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559920879", "createdAt": "2021-01-19T05:23:51Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -220,4 +217,16 @@ private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n \n         return converted;\n     }\n+\n+    public static Optional<ApiVersionsResponseData.ApiVersion> intersect(ApiVersionsResponseData.ApiVersion thisVersion,\n+                                                                         ApiVersionsResponseData.ApiVersion other) {\n+        if (other == null) return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDU0Mg=="}, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNTIzNjMxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMTowMzowOVrOIV60TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwMTowMzowOVrOIV60TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg1NDY2OA==", "bodyText": "We can use the helper that converts from ApiKey to ApiVersion here too.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559854668", "createdAt": "2021-01-19T01:03:09Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java", "diffHunk": "@@ -56,12 +54,18 @@ public void testUnknownApiVersionsToString() {\n \n     @Test\n     public void testVersionsToString() {\n-        List<ApiVersion> versionList = new ArrayList<>();\n+        List<ApiVersionsResponseData.ApiVersion> versionList = new ArrayList<>();\n         for (ApiKeys apiKey : ApiKeys.values()) {\n             if (apiKey == ApiKeys.DELETE_TOPICS) {\n-                versionList.add(new ApiVersion(apiKey.id, (short) 10000, (short) 10001));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion((short) 10000)\n+                        .setMaxVersion((short) 10001));\n             } else {\n-                versionList.add(new ApiVersion(apiKey));\n+                versionList.add(new ApiVersionsResponseData.ApiVersion()\n+                        .setApiKey(apiKey.id)\n+                        .setMinVersion(apiKey.oldestVersion())\n+                        .setMaxVersion(apiKey.latestVersion()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2cd983d263746fa57731b5cfab6d5de40a75ae2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNTY2OTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/AbstractApiVersionsRequestTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNTowNzo1N1rOIV-m3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNTowNzo1N1rOIV-m3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTkxNjc2NA==", "bodyText": "Indent change here seems unintentional.", "url": "https://github.com/apache/kafka/pull/9746#discussion_r559916764", "createdAt": "2021-01-19T05:07:57Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/server/AbstractApiVersionsRequestTest.scala", "diffHunk": "@@ -52,9 +52,9 @@ abstract class AbstractApiVersionsRequestTest extends BaseRequestTest {\n     if (listenerName == controlPlaneListenerName) {\n       expectedApis.add(ApiKeys.ENVELOPE)\n     }\n-    assertEquals(\"API keys in ApiVersionsResponse must match API keys supported by broker.\",\n-      expectedApis.size(), apiVersionsResponse.data.apiKeys().size())\n-    for (expectedApiVersion: ApiVersionsResponseData.ApiVersion <- ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE.data.apiKeys().asScala) {\n+    assertEquals(expectedApis.size(), apiVersionsResponse.data.apiKeys().size(),\n+      \"API keys in ApiVersionsResponse must match API keys supported by broker.\")\n+      for (expectedApiVersion: ApiVersionsResponseData.ApiVersion <- ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE.data.apiKeys().asScala) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da8093e7f5fade3707f3349789d3bbad4c76689"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}