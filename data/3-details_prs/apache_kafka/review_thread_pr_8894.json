{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MzI3ODI0", "number": 8894, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyODo1M1rOEGzXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToxNDowMFrOEG4Svw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTY4NTI0OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyODo1M1rOGl0rjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyODo1M1rOGl0rjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzYxNA==", "bodyText": "fwiw this doesn't adhere to kafka style guide (looks like Kafka Streams to me)", "url": "https://github.com/apache/kafka/pull/8894#discussion_r442313614", "createdAt": "2020-06-18T15:28:53Z", "author": {"login": "ryannedolan"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -207,23 +212,45 @@ public void close() {\n         backup.stop();\n     }\n \n+    // throw exception after 3 retries, and print expected error messages\n+    private void assertEqualsWithConsumeRetries(final String errorMsg,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559549e83adae1c4f1f5d362b0c176a694fea4b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTY5MTcyOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozMDozMFrOGl0vww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozMDozMFrOGl0vww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNDY5MQ==", "bodyText": "these are really strange side-effects to have in an assert statement. I see what you are trying to do, but this is probably not the way to do it.", "url": "https://github.com/apache/kafka/pull/8894#discussion_r442314691", "createdAt": "2020-06-18T15:30:30Z", "author": {"login": "ryannedolan"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -207,23 +212,45 @@ public void close() {\n         backup.stop();\n     }\n \n+    // throw exception after 3 retries, and print expected error messages\n+    private void assertEqualsWithConsumeRetries(final String errorMsg,\n+                                                final int numRecordsProduces,\n+                                                final int timeout,\n+                                                final ClusterType clusterType,\n+                                                final String... topics) throws InterruptedException {\n+        int retries = 3;\n+        while (retries-- > 0) {\n+            try {\n+                int actualNum = clusterType == ClusterType.PRIMARY ?\n+                        primary.kafka().consume(numRecordsProduces, timeout, topics).count() :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559549e83adae1c4f1f5d362b0c176a694fea4b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ5MjE1OnYy", "diffSide": "LEFT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToxNDowMFrOGl8voA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToxNDowMFrOGl8voA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0NTcyOA==", "bodyText": "I'd agree with @ryannedolan here. We could use the waitForCondition in TestUtils.java instead to wait for the condition necessary instead. More details on that is here: \n  \n    \n      kafka/clients/src/test/java/org/apache/kafka/test/TestUtils.java\n    \n    \n        Lines 370 to 371\n      in\n      d8cc6fe\n    \n    \n    \n    \n\n        \n          \n           public static void waitForCondition(final TestCondition testCondition, final String conditionDetails) throws InterruptedException { \n        \n\n        \n          \n               waitForCondition(testCondition, DEFAULT_MAX_WAIT_MS, () -> conditionDetails);", "url": "https://github.com/apache/kafka/pull/8894#discussion_r442445728", "createdAt": "2020-06-18T19:14:00Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -207,23 +212,45 @@ public void close() {\n         backup.stop();\n     }\n \n+    // throw exception after 3 retries, and print expected error messages\n+    private void assertEqualsWithConsumeRetries(final String errorMsg,\n+                                                final int numRecordsProduces,\n+                                                final int timeout,\n+                                                final ClusterType clusterType,\n+                                                final String... topics) throws InterruptedException {\n+        int retries = 3;\n+        while (retries-- > 0) {\n+            try {\n+                int actualNum = clusterType == ClusterType.PRIMARY ?\n+                        primary.kafka().consume(numRecordsProduces, timeout, topics).count() :\n+                        backup.kafka().consume(numRecordsProduces, timeout, topics).count();\n+                if (numRecordsProduces == actualNum)\n+                    return;\n+            } catch (Throwable e) {\n+                log.error(\"Could not find enough records with {} retries left\", retries, e);\n+            }\n+        }\n+        throw new InterruptedException(errorMsg);\n+    }\n+\n     @Test\n     public void testReplication() throws InterruptedException {\n         MirrorClient primaryClient = new MirrorClient(mm2Config.clientConfig(\"primary\"));\n         MirrorClient backupClient = new MirrorClient(mm2Config.clientConfig(\"backup\"));\n \n-        assertEquals(\"Records were not produced to primary cluster.\", NUM_RECORDS_PRODUCED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559549e83adae1c4f1f5d362b0c176a694fea4b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}