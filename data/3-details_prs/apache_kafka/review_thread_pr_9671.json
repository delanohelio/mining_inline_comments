{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzAyNDA4", "number": 9671, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMDozMFrOE_vxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjo0OVrOFTUsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc4MzY0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMDozMFrOH9n0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTowMDozMVrOICkj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NzY3Ng==", "bodyText": "nit: I think it's better to just print the e.message in a single line.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534377676", "createdAt": "2020-12-02T18:10:30Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -853,7 +844,7 @@ public void onSuccess(ClientResponse resp, RequestFuture<Void> future) {\n \n         @Override\n         public void onFailure(RuntimeException e, RequestFuture<Void> future) {\n-            clearFindCoordinatorFuture();\n+            log.debug(\"FindCoordinator request failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NjQ4Ng==", "bodyText": "You mean like\nlog.debug(\"FindCoordinator request failed due to {}\", e.getMessage());\n\n?", "url": "https://github.com/apache/kafka/pull/9671#discussion_r537986486", "createdAt": "2020-12-08T02:33:13Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -853,7 +844,7 @@ public void onSuccess(ClientResponse resp, RequestFuture<Void> future) {\n \n         @Override\n         public void onFailure(RuntimeException e, RequestFuture<Void> future) {\n-            clearFindCoordinatorFuture();\n+            log.debug(\"FindCoordinator request failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NzY3Ng=="}, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2NzA5OA==", "bodyText": "if you just have\nlog.debug(\"FindCoordinator request failed due to {}\", e)\n\nThen e.toString would be called which would usually be e.name(): e.getMessage().", "url": "https://github.com/apache/kafka/pull/9671#discussion_r539567098", "createdAt": "2020-12-09T19:00:31Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -853,7 +844,7 @@ public void onSuccess(ClientResponse resp, RequestFuture<Void> future) {\n \n         @Override\n         public void onFailure(RuntimeException e, RequestFuture<Void> future) {\n-            clearFindCoordinatorFuture();\n+            log.debug(\"FindCoordinator request failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NzY3Ng=="}, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjgyMDY3OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxOToyOFrOH9oLSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjo0Nzo1NlrOIBEbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzQzNA==", "bodyText": "The main reason for https://github.com/apache/kafka/pull/7312/files#diff-15efe9b844f78b686393b6c2e2ad61306c3473225742caed05c7edab9a138832R230-R234 is the following:\n\ninside ensureCoordinatorReady called by the main thread, we may break out of the loop at line 248 below, without knowing what's the final state of the future.\nand that future could be completed by the other thread (hb) later, and replaced by a new future object.\n\nIn that case, when the main thread calls ensureCoordinatorReady again, it will \"miss\" the previous future's contained fatal error.\nSo thinking about it again, I think we would still want to maintain the exception but only if it is a fatal one inside the handler (i.e. we do not probably need to register another listener just to bookkeep that exception, but just piggy-back this logic inside the handler listener directly), and then inside the while loop, we check if a previous future already gets a fatal exception and if yes, throw it to fail the whole client.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534383434", "createdAt": "2020-12-02T18:19:28Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -235,11 +235,6 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n             return true;\n \n         do {\n-            if (findCoordinatorException != null && !(findCoordinatorException instanceof RetriableException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MjAxMg==", "bodyText": "Ok yeah that makes sense. Thanks", "url": "https://github.com/apache/kafka/pull/9671#discussion_r537992012", "createdAt": "2020-12-08T02:47:56Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -235,11 +235,6 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n             return true;\n \n         do {\n-            if (findCoordinatorException != null && !(findCoordinatorException instanceof RetriableException)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzQzNA=="}, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjgyMTQ5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxOTozOVrOH9oLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxOTozOVrOH9oLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzU2Mw==", "bodyText": "nit: extra space.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534383563", "createdAt": "2020-12-02T18:19:39Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjg0MDA0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyNDoyNVrOH9oXag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTowMjoyMlrOICko-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NjUzOA==", "bodyText": "I think this is a better approach, but we need to be careful about the callee inside hb thread:\nif (findCoordinatorFuture != null || lookupCoordinator().failed())\n\ni.e. a hb thread sending a discover-coordinator request would also cause a future to be assigned, but that future would only be cleared by the main thread caller. Thinking about that for a sec I think this is okay, but maybe worth having a second pair of eyes over it.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534386538", "createdAt": "2020-12-02T18:24:25Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);\n+                    fatalException = future.exception();\n+                }\n             } else if (coordinator != null && client.isUnavailable(coordinator)) {\n                 // we found the coordinator, but the connection has failed, so mark\n                 // it dead and backoff before retrying discovery\n                 markCoordinatorUnknown();\n                 timer.sleep(rebalanceConfig.retryBackoffMs);\n             }\n+\n+            clearFindCoordinatorFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5MDczMQ==", "bodyText": "Ah, good point...actually I think that's probably not ok for it to only ever be cleared in the main thread, since eg the main thread might be stuck in long processing while the hb threads should not be blocked from looking up the coordinator.\nSo, maybe we should also call clearFindCoordinatorFuture inside the hb thread in the if (findCoordinatorFuture != null || lookupCoordinator().failed()) block (if it did indeed finish and has failed) -- WDYT?", "url": "https://github.com/apache/kafka/pull/9671#discussion_r537990731", "createdAt": "2020-12-08T02:44:39Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);\n+                    fatalException = future.exception();\n+                }\n             } else if (coordinator != null && client.isUnavailable(coordinator)) {\n                 // we found the coordinator, but the connection has failed, so mark\n                 // it dead and backoff before retrying discovery\n                 markCoordinatorUnknown();\n                 timer.sleep(rebalanceConfig.retryBackoffMs);\n             }\n+\n+            clearFindCoordinatorFuture();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NjUzOA=="}, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2ODM3OA==", "bodyText": "That makes sense, we can clearFindCoordinatorFuture inside the hb thread as well.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r539568378", "createdAt": "2020-12-09T19:02:22Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);\n+                    fatalException = future.exception();\n+                }\n             } else if (coordinator != null && client.isUnavailable(coordinator)) {\n                 // we found the coordinator, but the connection has failed, so mark\n                 // it dead and backoff before retrying discovery\n                 markCoordinatorUnknown();\n                 timer.sleep(rebalanceConfig.retryBackoffMs);\n             }\n+\n+            clearFindCoordinatorFuture();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NjUzOA=="}, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNjkzMzM0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMjoyMzo1NlrOIUvsRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMDo1Mzo0M1rOIWoUDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYyMzgxNQ==", "bodyText": "The nested condition is a bit awkward, how about this:\nif (findCoordinatorFuture != null) {\n    // if it has failed, clear it so that hb thread can try discover again in the next loop in case main thread is busy\n    if (findCoordinatorFuture.failed()) {\n        clearFindCoordinatorFuture();\n    } \n\n    // backoff properly\n    AbstractCoordinator.this.wait(rebalanceConfig.retryBackoffMs);\n} else {\n    lookupCoordinator();\n}", "url": "https://github.com/apache/kafka/pull/9671#discussion_r558623815", "createdAt": "2021-01-15T22:23:56Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1342,10 +1351,17 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n+                            if (findCoordinatorFuture != null || lookupCoordinator().failed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef5f05b6daf001b68920a5480ac8ddf9ca68f8c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMDA3OA==", "bodyText": "Sure yeah that's much better", "url": "https://github.com/apache/kafka/pull/9671#discussion_r560600078", "createdAt": "2021-01-20T00:53:43Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1342,10 +1351,17 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n+                            if (findCoordinatorFuture != null || lookupCoordinator().failed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYyMzgxNQ=="}, "originalCommit": {"oid": "5ef5f05b6daf001b68920a5480ac8ddf9ca68f8c"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1ODA2MjM1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjo0OVrOIauvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzoxMzo1M1rOIau7wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTc3Ng==", "bodyText": "I think the issue is spot-on! The logic here becomes a bit hard to understand for other readers now and I'd suggest update the cmment as:\n\"Clear the future so that after the backoff in the next iteration, if hb still sees coordinator unknown it will try re-discover the coordinator in case the main thread cannot\"\nOtherwise, LGTM.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r564899776", "createdAt": "2021-01-26T23:06:49Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1359,10 +1368,15 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n-                                // the immediate future check ensures that we backoff properly in the case that no\n-                                // brokers are available to connect to.\n+                            if (findCoordinatorFuture != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92777103e0c4637a0aac4cf1165ff4d71814091b"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwMjg0OA==", "bodyText": "SG", "url": "https://github.com/apache/kafka/pull/9671#discussion_r564902848", "createdAt": "2021-01-26T23:13:53Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1359,10 +1368,15 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n-                                // the immediate future check ensures that we backoff properly in the case that no\n-                                // brokers are available to connect to.\n+                            if (findCoordinatorFuture != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTc3Ng=="}, "originalCommit": {"oid": "92777103e0c4637a0aac4cf1165ff4d71814091b"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3645, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}