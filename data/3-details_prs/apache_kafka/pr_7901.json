{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5OTE5ODM5", "number": 7901, "title": "KAFKA-9375 Add thread names to kafka connect", "bodyText": "More detailed description of your change,\nif necessary. The PR title and PR message become\nthe squashed commit message, so use a separate\ncomment to ping reviewers.\nSummary of testing strategy (including rationale)\nfor the feature or bug fix. Unit and/or integration\ntests are expected for any behaviour change and\nsystem tests should be considered for larger changes.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-07T10:16:35Z", "url": "https://github.com/apache/kafka/pull/7901", "merged": true, "mergeCommit": {"oid": "c8d97c6d51bf8872eb5c0e5a123a8ee0ba6cfd6b"}, "closed": true, "closedAt": "2020-01-31T18:21:22Z", "author": {"login": "cryptoe"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5DTy8gFqTM0MTM1OTk3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_xOG9gFqTM1MTU5ODc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMzU5OTc0", "url": "https://github.com/apache/kafka/pull/7901#pullrequestreview-341359974", "createdAt": "2020-01-10T18:59:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1OTo1N1rOFcdNUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1OTo1N1rOFcdNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4Mjk5NQ==", "bodyText": "Are you sure this is going to work? I don't see Guava in dependencies.gradle and can't find any com.google packages anywhere in the code.", "url": "https://github.com/apache/kafka/pull/7901#discussion_r365382995", "createdAt": "2020-01-10T18:59:57Z", "author": {"login": "gcsaba2"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "diffHunk": "@@ -16,6 +16,7 @@\n  */\n package org.apache.kafka.connect.runtime.distributed;\n \n+import com.google.common.util.concurrent.Runnables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "author": {"user": {"login": "cryptoe", "name": "Karan Kumar"}}, "url": "https://github.com/apache/kafka/commit/afd9beb05ed5f818da5e50c3aad380c5343786ac", "committedDate": "2020-01-13T08:39:22Z", "message": "KAFKA-9375 Add thread names to kafka connect"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac", "author": {"user": {"login": "cryptoe", "name": "Karan Kumar"}}, "url": "https://github.com/apache/kafka/commit/afd9beb05ed5f818da5e50c3aad380c5343786ac", "committedDate": "2020-01-13T08:39:22Z", "message": "KAFKA-9375 Add thread names to kafka connect"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Nzk3Njcz", "url": "https://github.com/apache/kafka/pull/7901#pullrequestreview-348797673", "createdAt": "2020-01-27T16:26:53Z", "commit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjoyNjo1M1rOFiI_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjozNzozNVrOFiJYtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzIwMQ==", "bodyText": "In all assert method, the first argument is the \"expected\" value while the second one is the \"actual\" value. Can you swap them in this file to match that definition?", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371343201", "createdAt": "2020-01-27T16:26:53Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzYzNw==", "bodyText": "Maybe we don't need to print the stack trace if we can ignore it", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371343637", "createdAt": "2020-01-27T16:27:34Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).\n+                newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME);\n+    }\n+\n+    @Test\n+    public void testThreadNameWithoutNumberDemon() {\n+        Thread daemonThread = ThreadUtils.createThreadFactory(THREAD_NAME, true).newThread(EMPTY_RUNNABLE);\n+        try {\n+            Assert.assertEquals(daemonThread.getName(), THREAD_NAME);\n+            Assert.assertTrue(daemonThread.isDaemon());\n+        } finally {\n+            try {\n+                daemonThread.join();\n+            } catch (InterruptedException e) {\n+                // can be ignored\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NDEyMg==", "bodyText": "Do we need daemonThread2 in this test?", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371344122", "createdAt": "2020-01-27T16:28:20Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/ThreadUtilsTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class ThreadUtilsTest {\n+\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {\n+        @Override\n+        public void run() {\n+        }\n+    };\n+    private static final String THREAD_NAME = \"ThreadName\";\n+    private static final String THREAD_NAME_WITH_NUMBER = THREAD_NAME + \"%d\";\n+\n+\n+    @Test\n+    public void testThreadNameWithoutNumberNoDemon() {\n+        Assert.assertEquals(ThreadUtils.createThreadFactory(THREAD_NAME, false).\n+                newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME);\n+    }\n+\n+    @Test\n+    public void testThreadNameWithoutNumberDemon() {\n+        Thread daemonThread = ThreadUtils.createThreadFactory(THREAD_NAME, true).newThread(EMPTY_RUNNABLE);\n+        try {\n+            Assert.assertEquals(daemonThread.getName(), THREAD_NAME);\n+            Assert.assertTrue(daemonThread.isDaemon());\n+        } finally {\n+            try {\n+                daemonThread.join();\n+            } catch (InterruptedException e) {\n+                // can be ignored\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testThreadNameWithNumberNoDemon() {\n+        ThreadFactory localThreadFactory = ThreadUtils.createThreadFactory(THREAD_NAME_WITH_NUMBER, false);\n+        Assert.assertEquals(localThreadFactory.newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME + \"1\");\n+        Assert.assertEquals(localThreadFactory.newThread(EMPTY_RUNNABLE).getName(), THREAD_NAME + \"2\");\n+    }\n+\n+    @Test\n+    public void testThreadNameWithNumberDemon() {\n+        ThreadFactory localThreadFactory = ThreadUtils.createThreadFactory(THREAD_NAME_WITH_NUMBER, true);\n+        Thread daemonThread1 = localThreadFactory.newThread(EMPTY_RUNNABLE);\n+        Thread daemonThread2 = localThreadFactory.newThread(EMPTY_RUNNABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0ODQ0MA==", "bodyText": "Can we import static like assertEquals?", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371348440", "createdAt": "2020-01-27T16:35:32Z", "author": {"login": "mimaison"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java", "diffHunk": "@@ -20,6 +20,7 @@\n import org.apache.kafka.connect.util.Callback;\n import org.easymock.EasyMock;\n import org.junit.After;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0OTY4NA==", "bodyText": "I believe you can use the Java 8 syntax: Runnable runnable = () -> {};. This also appears in another file", "url": "https://github.com/apache/kafka/pull/7901#discussion_r371349684", "createdAt": "2020-01-27T16:37:35Z", "author": {"login": "mimaison"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/FileOffsetBackingStoreTest.java", "diffHunk": "@@ -41,6 +43,11 @@\n     File tempFile;\n \n     private static Map<ByteBuffer, ByteBuffer> firstSet = new HashMap<>();\n+    private static final Runnable EMPTY_RUNNABLE = new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd9beb05ed5f818da5e50c3aad380c5343786ac"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "author": {"user": {"login": "cryptoe", "name": "Karan Kumar"}}, "url": "https://github.com/apache/kafka/commit/54b80f3ae15a2bd3ed92b5fb1d5b6b68938a1657", "committedDate": "2020-01-30T14:09:44Z", "message": "KAFKA-9375: review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87a3815d121bed3bc85168fc9619d2f5acf1621e", "author": {"user": {"login": "cryptoe", "name": "Karan Kumar"}}, "url": "https://github.com/apache/kafka/commit/87a3815d121bed3bc85168fc9619d2f5acf1621e", "committedDate": "2020-01-30T14:10:24Z", "message": "Merge branch 'trunk' of github.com:apache/kafka into apache/trunk2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDM1Njg1", "url": "https://github.com/apache/kafka/pull/7901#pullrequestreview-351035685", "createdAt": "2020-01-30T18:13:55Z", "commit": {"oid": "87a3815d121bed3bc85168fc9619d2f5acf1621e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTk4Nzk0", "url": "https://github.com/apache/kafka/pull/7901#pullrequestreview-351598794", "createdAt": "2020-01-31T15:52:55Z", "commit": {"oid": "87a3815d121bed3bc85168fc9619d2f5acf1621e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2198, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}