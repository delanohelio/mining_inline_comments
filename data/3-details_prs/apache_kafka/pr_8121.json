{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NjQ0MjY5", "number": 8121, "title": "KAFKA-6145: Pt 1. Bump protocol version and encode task lag map", "bodyText": "\"First\" PR for KIP-441: implement the protocol change so we can encode the task lag info in the subscription", "createdAt": "2020-02-15T01:58:49Z", "url": "https://github.com/apache/kafka/pull/8121", "merged": true, "mergeCommit": {"oid": "674360f5b3a7e5e05b626fd55c277f7c03f27b9e"}, "closed": true, "closedAt": "2020-03-06T15:19:05Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFvE94AFqTM2MDg0MDAxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK0QccgH2gAyMzc1NjQ0MjY5OjljMTg0OWMwYzE1MDZjM2RiMjJhMTZkMDk1NGZhZjc2MTM1Yjg5ZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODQwMDEy", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-360840012", "createdAt": "2020-02-19T04:46:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDo0NjozOVrOFra_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDo0NjozOVrOFra_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3NTM3Nw==", "bodyText": "This plus the tech debt cleanup allows for the subscription handling to be greatly simplified, here and below in #assign", "url": "https://github.com/apache/kafka/pull/8121#discussion_r381075377", "createdAt": "2020-02-19T04:46:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -217,49 +217,17 @@ public String name() {\n     public ByteBuffer subscriptionUserData(final Set<String> topics) {\n         // Adds the following information to subscription\n         // 1. Client UUID (a unique id assigned to an instance of KafkaStreams)\n-        // 2. Task ids of previously running tasks\n-        // 3. Task ids of valid local states on the client's state directory.\n-        final Set<TaskId> standbyTasks = taskManager.tasksOnLocalStorage();\n-        final Set<TaskId> activeTasks = prepareForSubscription(taskManager,\n-            topics,\n-            standbyTasks,\n-            rebalanceProtocol);\n+        // 2. Map from task id to its overall lag", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODg0Nzc3", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-360884777", "createdAt": "2020-02-19T07:18:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoxODoyNVrOFrdRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzoxODoyNVrOFrdRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMjY3NQ==", "bodyText": "This was only ever used to encode the subscription info, which is now all handled by getTaskLags", "url": "https://github.com/apache/kafka/pull/8121#discussion_r381112675", "createdAt": "2020-02-19T07:18:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -300,11 +303,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskLags() {\n+        final Map<TaskId, Integer> taskLags = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskLags.put(id, ACTIVE_TASK_SENTINEL_LAG);\n+            } else {\n+                taskLags.put(id, 0);\n+            }\n+        }\n+        return taskLags;\n+    }\n+\n     /**\n      * Returns ids of tasks whose states are kept on the local storage. This includes active, standby, and previously\n      * assigned but not yet cleaned up tasks\n      */\n-    public Set<TaskId> tasksOnLocalStorage() {\n+    Set<TaskId> tasksOnLocalStorage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDY4ODky", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-362468892", "createdAt": "2020-02-21T08:37:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODozNzoxMFrOFsvOLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjo0NzozNlrOFs1zEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1NTM0MA==", "bodyText": "req: I understand why you called this a pair. However, it seems odd that this pair consists of three fields. Could you call it TaskLagTriple?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382455340", "createdAt": "2020-02-21T08:37:10Z", "author": {"login": "cadonna"}, "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1OTg0Nw==", "bodyText": "Q: Shouldn't that be 7+? Same question for the other two fields.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382459847", "createdAt": "2020-02-21T08:47:59Z", "author": {"login": "cadonna"}, "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",\n+      \"versions\": \"7+\",\n+      \"fields\": [\n+        {\n+          \"name\": \"topicGroupId\",\n+          \"versions\": \"1+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NDI5OQ==", "bodyText": "Q: Is it not possible to use the struct TaskId here? If not, the versions field of TaskId (and of all nested fields?) should be set to 1-6, shouldn't they? TaskId is only used for the fields that are removed in version 7.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382464299", "createdAt": "2020-02-21T08:58:20Z", "author": {"login": "cadonna"}, "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",\n+      \"versions\": \"7+\",\n+      \"fields\": [\n+        {\n+          \"name\": \"topicGroupId\",\n+          \"versions\": \"1+\",\n+          \"type\": \"int32\"\n+        },\n+        {\n+          \"name\": \"partition\",\n+          \"versions\": \"1+\",\n+          \"type\": \"int32\"\n+        },", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzgyMA==", "bodyText": "req: Is it possible to use a defined constant (e.g. ACTIVE_TASK_SENTINEL_LAG) here and also use it in TaskManager? I think it would be good to have this constant defined here and then use it in TaskManager.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382483820", "createdAt": "2020-02-21T09:39:46Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +87,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskLagDataFromTaskLagMap(data, taskLags);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskLagMap(data, taskLags);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskLagDataFromTaskLagMap(final SubscriptionInfoData data,\n+                                                     final Map<TaskId, Integer> taskLags) {\n+        data.setTaskLags(taskLags.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskLagPair taskLagPair = new SubscriptionInfoData.TaskLagPair();\n+            taskLagPair.setTopicGroupId(t.getKey().topicGroupId);\n+            taskLagPair.setPartition(t.getKey().partition);\n+            taskLagPair.setLag(t.getValue());\n+            return taskLagPair;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskLagMap(final SubscriptionInfoData data,\n+                                                                  final Map<TaskId, Integer> taskLags) {\n+        final Set<TaskId> prevTasks = new HashSet<>();\n+        final Set<TaskId> standbyTasks = new HashSet<>();\n+\n+        for (final Map.Entry<TaskId, Integer> taskLagEntry : taskLags.entrySet()) {\n+            if (taskLagEntry.getValue() == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTEyNw==", "bodyText": "req: Due to this deletion, line 327 becomes a no-op. Please remove it, too.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382515127", "createdAt": "2020-02-21T10:45:45Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -314,7 +282,6 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         // keep track of any future consumers in a \"dummy\" Client since we can't decipher their subscription\n         final UUID futureId = randomUUID();\n         final ClientMetadata futureClient = new ClientMetadata(null);\n-        clientMetadataMap.put(futureId, futureClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTg3NA==", "bodyText": "req: subscription -> subscription info", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382521874", "createdAt": "2020-02-21T11:00:42Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -581,12 +551,13 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Map<UUID, ClientState> states = new HashMap<>();\n         for (final Map.Entry<UUID, ClientMetadata> entry : clientMetadataMap.entrySet()) {\n+            final UUID uuid = entry.getKey();\n             final ClientState state = entry.getValue().state;\n-            states.put(entry.getKey(), state);\n+            states.put(uuid, state);\n \n-            // Either the active tasks (eager) OR the owned partitions (cooperative) were encoded in the subscription\n-            // according to the rebalancing protocol, so convert any partitions in a client to tasks where necessary\n-            if (!state.ownedPartitions().isEmpty()) {\n+            // this is an optimization: we can't decode the future subscription's prev tasks, but we can figure them", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMzcxNg==", "bodyText": "See my comment the constant in SubscriptionInfo.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382523716", "createdAt": "2020-02-21T11:05:00Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -50,6 +50,8 @@\n import static org.apache.kafka.streams.processor.internals.Task.State.RESTORING;\n \n public class TaskManager {\n+    static final int ACTIVE_TASK_SENTINEL_LAG = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ==", "bodyText": "prop: Instead of making this method public in the production code, you could add an accessor class in the same package as this class but in the test code, i.e., streams->src->test, that has a public method that calls this package-private method. Have a look into SensorAccessor for an example.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382528681", "createdAt": "2020-02-21T11:17:25Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -103,7 +105,8 @@ InternalTopologyBuilder builder() {\n         return builder;\n     }\n \n-    void handleRebalanceStart(final Set<String> subscribedTopics) {\n+    // visible for testing\n+    public void handleRebalanceStart(final Set<String> subscribedTopics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0NTAyMA==", "bodyText": "prop: Just a proposal\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<TaskId, Integer> TASK_LAGS = new HashMap<>();\n          \n          \n            \n                private static final Map<TaskId, Integer> TASK_LAGS = mkMap(\n          \n          \n            \n                    mkEntry(new TaskId(0, 0), -1),\n          \n          \n            \n                    mkEntry(new TaskId(0, 1), -1),\n          \n          \n            \n                    mkEntry(new TaskId(1, 0), -1),\n          \n          \n            \n                    mkEntry(new TaskId(1, 1), 0),\n          \n          \n            \n                    mkEntry(new TaskId(2, 0), 10)\n          \n          \n            \n                );", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382545020", "createdAt": "2020-02-21T12:00:47Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -31,13 +33,21 @@\n \n public class SubscriptionInfoTest {\n     private final UUID processId = UUID.randomUUID();\n-    private final Set<TaskId> activeTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> ACTIVE_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(0, 0),\n         new TaskId(0, 1),\n         new TaskId(1, 0)));\n-    private final Set<TaskId> standbyTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> STANDBY_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(1, 1),\n         new TaskId(2, 0)));\n+    private static final Map<TaskId, Integer> TASK_LAGS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDE0NQ==", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382550145", "createdAt": "2020-02-21T12:13:38Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -90,40 +97,39 @@ public void generatedVersion1ShouldBeDecodableByLegacyLogic() {\n             1,\n             1234,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"ignoreme\"\n+            \"ignoreme\",\n+            TASK_LAGS\n         );\n         final ByteBuffer buffer = info.encode();\n \n         final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n         assertEquals(1, decoded.version());\n         assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n         assertEquals(processId, decoded.processId());\n-        assertEquals(activeTasks, decoded.prevTasks());\n-        assertEquals(standbyTasks, decoded.standbyTasks());\n+        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n+        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n         assertNull(decoded.userEndPoint());\n     }\n \n-\n     @Test\n     public void generatedVersion1ShouldDecodeLegacyFormat() {\n         final LegacySubscriptionInfoSerde info = new LegacySubscriptionInfoSerde(\n             1,\n             LATEST_SUPPORTED_VERSION,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"localhost:80\"\n+            ACTIVE_TASKS,\n+            STANDBY_TASKS,\n+            \"localhost:80\",\n+            null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ==", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382550271", "createdAt": "2020-02-21T12:14:01Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -173,18 +177,19 @@ public void generatedVersion2ShouldDecodeLegacyFormat() {\n             2,\n             LATEST_SUPPORTED_VERSION,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"localhost:80\"\n+            ACTIVE_TASKS,\n+            STANDBY_TASKS,\n+            \"localhost:80\",\n+            null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MTU0NA==", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382551544", "createdAt": "2020-02-21T12:17:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -239,9 +242,10 @@ public void generatedVersion3To6ShouldDecodeLegacyFormat() {\n                 version,\n                 LATEST_SUPPORTED_VERSION,\n                 processId,\n-                activeTasks,\n-                standbyTasks,\n-                \"localhost:80\"\n+                ACTIVE_TASKS,\n+                STANDBY_TASKS,\n+                \"localhost:80\",\n+                null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MzQ5OA==", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info, SubscriptionInfo.decode(info.encode()));\n          \n          \n            \n                    assertThat(SubscriptionInfo.decode(info.encode()), is(info));", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382553498", "createdAt": "2020-02-21T12:22:56Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NDE3NA==", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info.prevTasks(), ACTIVE_TASKS);\n          \n          \n            \n                    assertThat(info.prevTasks(), is(ACTIVE_TASKS));", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382554174", "createdAt": "2020-02-21T12:24:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskLagMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info = new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info.prevTasks(), ACTIVE_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NDMxMg==", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info.standbyTasks(), STANDBY_TASKS);\n          \n          \n            \n                    assertThat(info.standbyTasks(), is(STANDBY_TASKS));", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382554312", "createdAt": "2020-02-21T12:25:02Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskLagMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info = new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info.prevTasks(), ACTIVE_TASKS);\n+        assertEquals(info.standbyTasks(), STANDBY_TASKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MTM4MQ==", "bodyText": "req: After this deletion, REBALANCE_PROTOCOL defined on line 66 is not used anymore and can be deleted, too.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382561381", "createdAt": "2020-02-21T12:43:26Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -146,30 +146,22 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n             // 2. Task ids of previously running tasks\n             // 3. Task ids of valid local states on the client's state directory.\n             final TaskManager taskManager = taskManger();\n-\n-            final Set<TaskId> standbyTasks = taskManager.tasksOnLocalStorage();\n-            final Set<TaskId> activeTasks = prepareForSubscription(taskManager,\n-                                                                   topics,\n-                                                                   standbyTasks,\n-                                                                   REBALANCE_PROTOCOL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzA5MA==", "bodyText": "The KIP still states that we bump from 4 to 5. Could you please change that as well?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382563090", "createdAt": "2020-02-21T12:47:36Z", "author": {"login": "cadonna"}, "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -15,7 +15,7 @@\n \n {\n   \"name\": \"SubscriptionInfo\",\n-  \"validVersions\": \"1-6\",\n+  \"validVersions\": \"1-7\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzQwNTQ0", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-366740544", "createdAt": "2020-02-28T23:21:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoyMTozOVrOFwFgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzo0MjoyNVrOFwFzUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NjI1NA==", "bodyText": "Just to be clear, does this mean we're certain that for non-future members (current or older-versioned ones), the encoded \"prevTasks\" actually contains all the previous tasks?\nI gather this is true from the SubscriptionInfo protcol:\n    {\n      \"name\": \"prevTasks\",\n      \"versions\": \"1-6\",\n      \"type\": \"[]TaskId\"\n    }\n\nBut then, I'm a little mystified by the prior comment... why would \"active tasks\" not have been encoded with the cooperative protocol?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385966254", "createdAt": "2020-02-28T23:21:39Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -581,12 +550,13 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Map<UUID, ClientState> states = new HashMap<>();\n         for (final Map.Entry<UUID, ClientMetadata> entry : clientMetadataMap.entrySet()) {\n+            final UUID uuid = entry.getKey();\n             final ClientState state = entry.getValue().state;\n-            states.put(entry.getKey(), state);\n+            states.put(uuid, state);\n \n-            // Either the active tasks (eager) OR the owned partitions (cooperative) were encoded in the subscription\n-            // according to the rebalancing protocol, so convert any partitions in a client to tasks where necessary\n-            if (!state.ownedPartitions().isEmpty()) {\n+            // this is an optimization: we can't decode the future subscription info's prev tasks, but we can figure\n+            // them out from the encoded ownedPartitions\n+            if (uuid == futureId && !state.ownedPartitions().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2ODUzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            taskLags.put(id, 0);\n          \n          \n            \n                            taskLags.put(id, STANDBY_TASK_SENTINEL_LAG);\n          \n      \n    \n    \n  \n\nEither that, or my preference would actually be to inline both sentinel lags (with a comment explaining why that choice of sentinels).", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385968530", "createdAt": "2020-02-28T23:31:19Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -307,11 +309,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskLags() {\n+        final Map<TaskId, Integer> taskLags = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskLags.put(id, ACTIVE_TASK_SENTINEL_LAG);\n+            } else {\n+                taskLags.put(id, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2ODc3NQ==", "bodyText": "To be honest, this also bugs me :)\nWhat if we move org.apache.kafka.streams.tests.StreamsUpgradeTest.FutureStreamsPartitionAssignor into package org.apache.kafka.streams.processor.internals? Then package-private would continue to work fine.\nMy personal bias is that anytime you see // visible for testing, you're looking at a potential bug, because nothing prevents that comment from becoming false, and in fact, I have found such comments in our code base that were already false. Either this method is part of the public contract of the class, or it's not.\nThat said, if you really prefer it this way, we can keep it (although, I might ask you to review a clean-up PR later ;) )", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385968775", "createdAt": "2020-02-28T23:32:26Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -103,7 +105,8 @@ InternalTopologyBuilder builder() {\n         return builder;\n     }\n \n-    void handleRebalanceStart(final Set<String> subscribedTopics) {\n+    // visible for testing\n+    public void handleRebalanceStart(final Set<String> subscribedTopics) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2OTkxOQ==", "bodyText": "This method could actually become private, except for a single test. I'm wondering if we can port that test to use getTaskLags instead. Aside from letting us make this private, that would probably improve our testing coverage, since I suppose that test was intended to unit test this class, meaning it should be testing this class's public API, not internal methods.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385969919", "createdAt": "2020-02-28T23:37:26Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -300,11 +303,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskLags() {\n+        final Map<TaskId, Integer> taskLags = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskLags.put(id, ACTIVE_TASK_SENTINEL_LAG);\n+            } else {\n+                taskLags.put(id, 0);\n+            }\n+        }\n+        return taskLags;\n+    }\n+\n     /**\n      * Returns ids of tasks whose states are kept on the local storage. This includes active, standby, and previously\n      * assigned but not yet cleaned up tasks\n      */\n-    public Set<TaskId> tasksOnLocalStorage() {\n+    Set<TaskId> tasksOnLocalStorage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMjY3NQ=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MDUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            taskOffsetSums.put(id, ACTIVE_TASK_SENTINEL_OFFSET);\n          \n          \n            \n                            taskOffsetSums.put(id, -1);\n          \n      \n    \n    \n  \n\nNo need for a constant, and it's more readable inline. Although, it could use a comment explaining the choice of sentinel values.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385970514", "createdAt": "2020-02-28T23:40:02Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -354,11 +356,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskOffsetSums() {\n+        final Map<TaskId, Integer> taskOffsetSums = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskOffsetSums.put(id, ACTIVE_TASK_SENTINEL_OFFSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MTAyNg==", "bodyText": "Oh, actually, here's the reason a constant sentinel is nice, but we didn't actually use it!", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385971026", "createdAt": "2020-02-28T23:42:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +89,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskOffsetSumDataFromTaskOffsetSumMap(data, taskOffsetSums);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskOffsetSumMap(data, taskOffsetSums);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskOffsetSumDataFromTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                 final Map<TaskId, Integer> taskOffsetSums) {\n+        data.setTaskOffsetSums(taskOffsetSums.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskOffsetSum taskOffsetSum = new SubscriptionInfoData.TaskOffsetSum();\n+            taskOffsetSum.setTopicGroupId(t.getKey().topicGroupId);\n+            taskOffsetSum.setPartition(t.getKey().partition);\n+            taskOffsetSum.setOffsetSum(t.getValue());\n+            return taskOffsetSum;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                        final Map<TaskId, Integer> taskOffsetSums) {\n+        final Set<TaskId> prevTasks = new HashSet<>();\n+        final Set<TaskId> standbyTasks = new HashSet<>();\n+\n+        for (final Map.Entry<TaskId, Integer> taskOffsetSum : taskOffsetSums.entrySet()) {\n+            if (taskOffsetSum.getValue() == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzI0NTcx", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-367324571", "createdAt": "2020-03-02T16:10:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxMDozM1rOFwleTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0OTozMlrOFwuvUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTkzNA==", "bodyText": "Since we invoke this method from a number of places, should we add a flag and make sure it only sets the state once?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386489934", "createdAt": "2020-03-02T16:10:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +90,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskOffsetSumDataFromTaskOffsetSumMap(data, taskOffsetSums);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskOffsetSumMap(data, taskOffsetSums);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskOffsetSumDataFromTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                 final Map<TaskId, Integer> taskOffsetSums) {\n+        data.setTaskOffsetSums(taskOffsetSums.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskOffsetSum taskOffsetSum = new SubscriptionInfoData.TaskOffsetSum();\n+            taskOffsetSum.setTopicGroupId(t.getKey().topicGroupId);\n+            taskOffsetSum.setPartition(t.getKey().partition);\n+            taskOffsetSum.setOffsetSum(t.getValue());\n+            return taskOffsetSum;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskOffsetSumMap(final SubscriptionInfoData data,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzODQxMQ==", "bodyText": "I'm probably missing the point here, but I think the idea of this class is that it should not change in response to changes in SubscriptionInfo. I think it's supposed to be a stand-in for the behavior of older Streams versions when the cluster has old and new members running at the same time. Maybe it doesn't really work that way, though, in which case, I might doubt the utility of this class at all, and instead recommend relying on the system tests. Can you comment?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386638411", "createdAt": "2020-03-02T20:42:35Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/LegacySubscriptionInfoSerde.java", "diffHunk": "@@ -41,13 +45,15 @@\n     private final Set<TaskId> prevTasks;\n     private final Set<TaskId> standbyTasks;\n     private final String userEndPoint;\n+    private final Map<TaskId, Integer> taskLags;\n \n     public LegacySubscriptionInfoSerde(final int version,\n                                        final int latestSupportedVersion,\n                                        final UUID processId,\n                                        final Set<TaskId> prevTasks,\n                                        final Set<TaskId> standbyTasks,\n-                                       final String userEndPoint) {\n+                                       final String userEndPoint,\n+                                       final Map<TaskId, Integer> taskLags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzOTA3MQ==", "bodyText": "What's up with the pre-loaded map followed by a static block adding the same contents to it? (Looks like maybe a refactoring artifact).", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386639071", "createdAt": "2020-03-02T20:44:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -25,19 +26,37 @@\n import java.util.Set;\n import java.util.UUID;\n \n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n import static org.apache.kafka.streams.processor.internals.assignment.StreamsAssignmentProtocolVersions.LATEST_SUPPORTED_VERSION;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n \n public class SubscriptionInfoTest {\n     private final UUID processId = UUID.randomUUID();\n-    private final Set<TaskId> activeTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> ACTIVE_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(0, 0),\n         new TaskId(0, 1),\n         new TaskId(1, 0)));\n-    private final Set<TaskId> standbyTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> STANDBY_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(1, 1),\n         new TaskId(2, 0)));\n+    private static final Map<TaskId, Integer> TASK_OFFSET_SUMS = mkMap(\n+        mkEntry(new TaskId(0, 0), -1),\n+        mkEntry(new TaskId(0, 1), -1),\n+        mkEntry(new TaskId(1, 0), -1),\n+        mkEntry(new TaskId(1, 1), 0),\n+        mkEntry(new TaskId(2, 0), 10)\n+    );\n+    static {\n+        TASK_OFFSET_SUMS.put(new TaskId(0, 0), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(0, 1), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(1, 0), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(1, 1), 0);\n+        TASK_OFFSET_SUMS.put(new TaskId(2, 0), 10);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzOTY2Ng==", "bodyText": "Yes, it should... I asked a question about this on that class itself. It seems like you shouldn't have had to modify it at all.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386639666", "createdAt": "2020-03-02T20:45:14Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -173,18 +177,19 @@ public void generatedVersion2ShouldDecodeLegacyFormat() {\n             2,\n             LATEST_SUPPORTED_VERSION,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"localhost:80\"\n+            ACTIVE_TASKS,\n+            STANDBY_TASKS,\n+            \"localhost:80\",\n+            null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ=="}, "originalCommit": null, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MDUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            info.userEndPoint(), taskManager().getTaskOffsetSums())\n          \n          \n            \n                                            info.userEndPoint(),\n          \n          \n            \n                                            taskManager().getTaskOffsetSums())", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386640500", "createdAt": "2020-03-02T20:47:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -258,9 +248,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n                                 LATEST_SUPPORTED_VERSION,\n                                 LATEST_SUPPORTED_VERSION,\n                                 info.processId(),\n-                                info.prevTasks(),\n-                                info.standbyTasks(),\n-                                info.userEndPoint())\n+                                info.userEndPoint(), taskManager().getTaskOffsetSums())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTc0Ng==", "bodyText": "I'm not sure this should be necessary either. IIUC, the \"future\" subscription info isn't supposed to really be a descendant of the current protocol, just a stand-in for some protocol version bigger than ours, in which case all that really matters is the version number. Its role is just to join the cluster and get downgraded to the \"latest\" version, in which case it should be able to defer to SubscriptionInfo.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386641746", "createdAt": "2020-03-02T20:49:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -291,21 +279,18 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n     private static class FutureSubscriptionInfo {\n         private final int version;\n         private final UUID processId;\n-        private final Set<TaskId> prevTasks;\n-        private final Set<TaskId> standbyTasks;\n         private final String userEndPoint;\n+        private final Map<TaskId, Integer> taskLags;\n \n         // for testing only; don't apply version checks\n         FutureSubscriptionInfo(final int version,\n                                final UUID processId,\n-                               final Set<TaskId> prevTasks,\n-                               final Set<TaskId> standbyTasks,\n-                               final String userEndPoint) {\n+                               final String userEndPoint,\n+                               final Map<TaskId, Integer> taskLags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a67b592c6947c20f07f116037cc1ed159a06d50", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/5a67b592c6947c20f07f116037cc1ed159a06d50", "committedDate": "2020-03-04T20:25:22Z", "message": "use taskLags to infer prev/standby tasks if necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b45f78aee5bcb3fa49830e1256ed2121fdd28be", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/8b45f78aee5bcb3fa49830e1256ed2121fdd28be", "committedDate": "2020-03-04T20:25:22Z", "message": "fixing up tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4d91a85a7eabbfdf2e0ebfa59d3e411302e7a88", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/b4d91a85a7eabbfdf2e0ebfa59d3e411302e7a88", "committedDate": "2020-03-04T20:25:22Z", "message": "cleaned up task manager and subscription code, compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aabf29def59f348ce2abdb60771d8d60878e220", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/2aabf29def59f348ce2abdb60771d8d60878e220", "committedDate": "2020-03-04T20:25:23Z", "message": "bump assignment version handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f510057179581229975f58666352c20077571f68", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f510057179581229975f58666352c20077571f68", "committedDate": "2020-03-04T20:25:23Z", "message": "add subscription info tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c063dc42a6412815367fbb0dd6557c2e20cae05b", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c063dc42a6412815367fbb0dd6557c2e20cae05b", "committedDate": "2020-03-04T20:25:23Z", "message": "fix assignmentinfo test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "424af9ae596cd2bb74869a577168a55f0254db72", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/424af9ae596cd2bb74869a577168a55f0254db72", "committedDate": "2020-03-04T20:25:23Z", "message": "fixing up tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac1f396386ecdba75930bff372ce18c8c05abda", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/cac1f396386ecdba75930bff372ce18c8c05abda", "committedDate": "2020-03-04T20:25:23Z", "message": "null check task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ecf580c005deb312828bde7567f96b170663f2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/72ecf580c005deb312828bde7567f96b170663f2", "committedDate": "2020-03-04T20:25:23Z", "message": "github reivew: main code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2da9f7cd5088a3c7f78f6ab77c522a0fc4163d1", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c2da9f7cd5088a3c7f78f6ab77c522a0fc4163d1", "committedDate": "2020-03-04T20:25:23Z", "message": "remove 'paior' from name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a37a8eb48cf12223d052c23319965ca96d6dba9a", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/a37a8eb48cf12223d052c23319965ca96d6dba9a", "committedDate": "2020-03-04T20:25:23Z", "message": "Github suggestions\n\nCo-Authored-By: Bruno Cadonna <bruno@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e20e352f46b7be84058c9859004a0106592eef", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/40e20e352f46b7be84058c9859004a0106592eef", "committedDate": "2020-03-04T20:25:23Z", "message": "use offset sum instead of lag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d8bdc21fa4f36c01f54884f8bd2fada0b135da2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/7d8bdc21fa4f36c01f54884f8bd2fada0b135da2", "committedDate": "2020-03-04T20:25:23Z", "message": "fix names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e941f8dacb35590b9ff247a0eed9bf8a54a28d", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/e4e941f8dacb35590b9ff247a0eed9bf8a54a28d", "committedDate": "2020-03-04T20:25:23Z", "message": "github review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe088a5e16694ba008c4f16f4face445bda28b6", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/0fe088a5e16694ba008c4f16f4face445bda28b6", "committedDate": "2020-03-04T20:25:23Z", "message": "bump version in VP system test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361e4496245017a7301d481934d6a8aafc8f0d80", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/361e4496245017a7301d481934d6a8aafc8f0d80", "committedDate": "2020-03-04T20:25:23Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "951c245be7fbbe3a43c96b7f4f21956593ef0613", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/951c245be7fbbe3a43c96b7f4f21956593ef0613", "committedDate": "2020-03-04T20:25:23Z", "message": "checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "951c245be7fbbe3a43c96b7f4f21956593ef0613", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/951c245be7fbbe3a43c96b7f4f21956593ef0613", "committedDate": "2020-03-04T20:25:23Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d70a24b09f6c500ab0db780ec723a5b5003c1f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/41d70a24b09f6c500ab0db780ec723a5b5003c1f", "committedDate": "2020-03-04T20:35:34Z", "message": "only encode RUNNING active tasks as -1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeebfa8b60f7d99c36cd0b3854ae3700bd25f5d3", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/aeebfa8b60f7d99c36cd0b3854ae3700bd25f5d3", "committedDate": "2020-03-04T20:39:00Z", "message": "fix javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/16be04627aec19705a439a75b20a2a68ea08ded6", "committedDate": "2020-03-04T21:49:46Z", "message": "reuse existing Task.LATEST_OFFSET for active running task sentinel offset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODkyNjQ0", "url": "https://github.com/apache/kafka/pull/8121#pullrequestreview-369892644", "createdAt": "2020-03-05T20:32:28Z", "commit": {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozMjoyOFrOFyjFlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1NDoxMVrOFyjyyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0Nzk4OQ==", "bodyText": "bump", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388547989", "createdAt": "2020-03-05T20:32:28Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +90,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskOffsetSumDataFromTaskOffsetSumMap(data, taskOffsetSums);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskOffsetSumMap(data, taskOffsetSums);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskOffsetSumDataFromTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                 final Map<TaskId, Integer> taskOffsetSums) {\n+        data.setTaskOffsetSums(taskOffsetSums.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskOffsetSum taskOffsetSum = new SubscriptionInfoData.TaskOffsetSum();\n+            taskOffsetSum.setTopicGroupId(t.getKey().topicGroupId);\n+            taskOffsetSum.setPartition(t.getKey().partition);\n+            taskOffsetSum.setOffsetSum(t.getValue());\n+            return taskOffsetSum;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskOffsetSumMap(final SubscriptionInfoData data,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTkzNA=="}, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MTI2NQ==", "bodyText": "Do we want to try for a slightly more efficient encoding here, of Map[topicGroupId -> Map[partition -> offsetSum]], or do you think this is fine for now?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388551265", "createdAt": "2020-03-05T20:38:16Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -35,18 +35,23 @@\n     },\n     {\n       \"name\": \"prevTasks\",\n-      \"versions\": \"1+\",\n+      \"versions\": \"1-6\",\n       \"type\": \"[]TaskId\"\n     },\n     {\n       \"name\": \"standbyTasks\",\n-      \"versions\": \"1+\",\n+      \"versions\": \"1-6\",\n       \"type\": \"[]TaskId\"\n     },\n     {\n       \"name\": \"userEndPoint\",\n       \"versions\": \"2+\",\n       \"type\": \"bytes\"\n+    },\n+    {\n+      \"name\": \"taskOffsetSums\",\n+      \"versions\": \"7+\",\n+      \"type\": \"[]TaskOffsetSum\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NzQ1Nw==", "bodyText": "looks like maybe we have duelling code formatters. Not sure which choice makes more sense.", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388557457", "createdAt": "2020-03-05T20:50:15Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,14 +279,31 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        assertThat(info, is(SubscriptionInfo.decode(info.encode())));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskOffsetSumMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        assertThat(info.prevTasks(), is(ACTIVE_TASKS));\n+        assertThat(info.standbyTasks(), is(STANDBY_TASKS));\n+    }\n+\n     private static ByteBuffer encodeFutureVersion() {\n         final ByteBuffer buf = ByteBuffer.allocate(4 /* used version */\n-                                                       + 4 /* supported version */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTU2Mg==", "bodyText": "I'm just a tiny bit uncomfortable with re-using that sentinel, because the correctness of our logic depends on the active sentinel being less than the standby sentinel, so it must be less than zero. Do we have a reason to believe that Task.LATEST_OFFSET would never change to a number that would spoil us here, such as zero?", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388559562", "createdAt": "2020-03-05T20:54:11Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -354,11 +355,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to its total offset summed across all state stores\n+     */\n+    public Map<TaskId, Long> getTaskOffsetSums() {\n+        final Map<TaskId, Long> taskOffsetSums = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isRunning(id)) {\n+                taskOffsetSums.put(id, Task.LATEST_OFFSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce68476ac15ff67bc5db4a49945170f73da076f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/cce68476ac15ff67bc5db4a49945170f73da076f", "committedDate": "2020-03-05T22:24:49Z", "message": "github review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36b94cc2d87783c943f3189965ad25fb88ae7748", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/36b94cc2d87783c943f3189965ad25fb88ae7748", "committedDate": "2020-03-05T23:03:25Z", "message": "encode task id offset mapcompactly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f20224659759d920218cf9be2ac91a6dc3d6ae", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f0f20224659759d920218cf9be2ac91a6dc3d6ae", "committedDate": "2020-03-05T23:09:54Z", "message": "fx NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c1849c0c1506c3db22a16d0954faf76135b89e2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/9c1849c0c1506c3db22a16d0954faf76135b89e2", "committedDate": "2020-03-05T23:38:21Z", "message": "fix VP upgrade test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1456, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}