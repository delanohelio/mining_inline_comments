{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTM5ODM0", "number": 9669, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMTowMlrOE_YUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTozMFrOE_yQzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk0MjAwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMTowMlrOH9D4XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoyMTowMlrOH9D4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // can happy reliably if it's started in the PAUSED state), we don't have to invoke stop on it\n          \n          \n            \n                    // can happen reliably if it's started in the PAUSED state), we don't have to invoke stop on it", "url": "https://github.com/apache/kafka/pull/9669#discussion_r533788764", "createdAt": "2020-12-01T23:21:02Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -206,16 +203,13 @@ public void cancel() {\n     public void stop() {\n         super.stop();\n         stopRequestedLatch.countDown();\n-        synchronized (this) {\n-            if (finishedStart)\n-                tryStop();\n-            else\n-                startedShutdownBeforeStartCompleted = true;\n-        }\n     }\n \n-    private synchronized void tryStop() {\n-        if (!stopped) {\n+    // Note: This method is not thread-safe\n+    private void tryStop() {\n+        // If the task is scheduled for shutdown before we invoke initialize or start on it (which\n+        // can happy reliably if it's started in the PAUSED state), we don't have to invoke stop on it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be183ef36640deae7b9a75166639e72ee1d7929"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzA1MTc4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToxNzoyNlrOH9qYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToyMTowNlrOH9unzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxOTY1NQ==", "bodyText": "Maybe a nit, but this comment seems a bit misleading. It sounds as if the method need be called from a thread safe point, but otherwise there are no restrictions on how it's used.\nStrictly speaking, this method need not be thread safe because it should only be called from within close(), which is called from the task's own thread and therefore is thread safe. Perhaps this design assumption should be mentioned here.", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534419655", "createdAt": "2020-12-02T19:17:26Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -206,16 +203,13 @@ public void cancel() {\n     public void stop() {\n         super.stop();\n         stopRequestedLatch.countDown();\n-        synchronized (this) {\n-            if (finishedStart)\n-                tryStop();\n-            else\n-                startedShutdownBeforeStartCompleted = true;\n-        }\n     }\n \n-    private synchronized void tryStop() {\n-        if (!stopped) {\n+    // Note: This method is not thread-safe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1MzIwNg==", "bodyText": "This is a fair point. TBH I don't think this method deserves to exist anymore at all and can just be folded into close where a bunch of similar blocks already exist. There's also no need to track stopped since close is only ever invoked once. I'll refactor and remove the comment entirely since everything should be more readable after that change even without commenting.", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534453206", "createdAt": "2020-12-02T20:15:38Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -206,16 +203,13 @@ public void cancel() {\n     public void stop() {\n         super.stop();\n         stopRequestedLatch.countDown();\n-        synchronized (this) {\n-            if (finishedStart)\n-                tryStop();\n-            else\n-                startedShutdownBeforeStartCompleted = true;\n-        }\n     }\n \n-    private synchronized void tryStop() {\n-        if (!stopped) {\n+    // Note: This method is not thread-safe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxOTY1NQ=="}, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4OTAzNw==", "bodyText": "Yeah, it's unclear whether to keep the tryStop() method to minimize deltas, or remove it to simplify things. +1 for simplifying things by moving the logic into close().", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534489037", "createdAt": "2020-12-02T21:21:06Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -206,16 +203,13 @@ public void cancel() {\n     public void stop() {\n         super.stop();\n         stopRequestedLatch.countDown();\n-        synchronized (this) {\n-            if (finishedStart)\n-                tryStop();\n-            else\n-                startedShutdownBeforeStartCompleted = true;\n-        }\n     }\n \n-    private synchronized void tryStop() {\n-        if (!stopped) {\n+    // Note: This method is not thread-safe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxOTY1NQ=="}, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzEwMTk1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozMDo0NlrOH9q3kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozMDo0NlrOH9q3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyNzUzOQ==", "bodyText": "Minor suggestions to improve wording and to be a bit more explicit about expectations for Task implementations:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // If we try to start the task at all (by invoking initialize and possibly start), we count this as\n          \n          \n            \n                        // \"started\" in order to properly clean up any resources allocated by those invocations when the task is\n          \n          \n            \n                        // shut down by calling stop. If the task throws an exception during startup, it should still be able to\n          \n          \n            \n                        // clean up any allocated resources when stop is called, and if it isn't able to or even throws another\n          \n          \n            \n                        // exception during stop, the worst thing that happens is another exception gets logged for an already-\n          \n          \n            \n                        // failed task\n          \n          \n            \n                        // If we try to start the task at all by invoking initialize, then count this as\n          \n          \n            \n                        // \"started\" and expect a subsequent call to the task's stop() method\n          \n          \n            \n                        // to properly clean up any resources allocated by its initialize() or \n          \n          \n            \n                        // start() methods. If the task throws an exception during stop(),\n          \n          \n            \n                        // the worst thing that happens is another exception gets logged for an already-\n          \n          \n            \n                        // failed task", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534427539", "createdAt": "2020-12-02T19:30:46Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -228,17 +222,16 @@ private synchronized void tryStop() {\n     @Override\n     public void execute() {\n         try {\n+            // If we try to start the task at all (by invoking initialize and possibly start), we count this as\n+            // \"started\" in order to properly clean up any resources allocated by those invocations when the task is\n+            // shut down by calling stop. If the task throws an exception during startup, it should still be able to\n+            // clean up any allocated resources when stop is called, and if it isn't able to or even throws another\n+            // exception during stop, the worst thing that happens is another exception gets logged for an already-\n+            // failed task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzE5MjQ3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTozMFrOH9rvow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoxOTo0M1rOH9yR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5MQ==", "bodyText": "How does this static field initialization work within a blocking connector that also has a blocking task instance? Aren't both constructors called, resulting in the task constructor re-initializing the static blockLatch instance? Does it work because the tests don't block both a connector method and a task method? If so, doesn't that make it somewhat brittle if people want to add more tests but don't infer that limitation?\nWould it be better to store a static list of all Block latches, have the constructor simply create a block latch and add it to that static list, and then have the resetBlockLatch() method remove each of the Block latches and call countDown() on them? (This still doesn't bode well for running the tests in parallel, but ATM that's not an issue.)", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534441891", "createdAt": "2020-12-02T19:55:30Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "diffHunk": "@@ -263,145 +332,153 @@ private void verifyNormalConnector() throws InterruptedException {\n         normalConnectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n     }\n \n-    public static class BlockingConnector extends SourceConnector {\n-\n+    private static class Block {\n         private static CountDownLatch blockLatch;\n \n-        private String block;\n+        private final String block;\n \n         public static final String BLOCK_CONFIG = \"block\";\n \n-        public static final String INITIALIZE = \"initialize\";\n-        public static final String INITIALIZE_WITH_TASK_CONFIGS = \"initializeWithTaskConfigs\";\n-        public static final String START = \"start\";\n-        public static final String RECONFIGURE = \"reconfigure\";\n-        public static final String TASK_CLASS = \"taskClass\";\n-        public static final String TASK_CONFIGS = \"taskConfigs\";\n-        public static final String STOP = \"stop\";\n-        public static final String VALIDATE = \"validate\";\n-        public static final String CONFIG = \"config\";\n-        public static final String VERSION = \"version\";\n-\n-        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n-            .define(\n-                BLOCK_CONFIG,\n-                ConfigDef.Type.STRING,\n-                \"\",\n-                ConfigDef.Importance.MEDIUM,\n-                \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n-            );\n-\n-        // No-args constructor required by the framework\n-        public BlockingConnector() {\n-            this(null);\n-        }\n-\n-        protected BlockingConnector(String block) {\n-            this.block = block;\n-            synchronized (BlockingConnector.class) {\n-                if (blockLatch != null) {\n-                    blockLatch.countDown();\n-                }\n-                blockLatch = new CountDownLatch(1);\n-            }\n+        private static ConfigDef config() {\n+            return new ConfigDef()\n+                .define(\n+                    BLOCK_CONFIG,\n+                    ConfigDef.Type.STRING,\n+                    \"\",\n+                    ConfigDef.Importance.MEDIUM,\n+                    \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n+                );\n         }\n \n         public static void waitForBlock() throws InterruptedException {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch == null) {\n                     throw new IllegalArgumentException(\"No connector has been created yet\");\n                 }\n             }\n-            \n+\n             log.debug(\"Waiting for connector to block\");\n             blockLatch.await();\n             log.debug(\"Connector should now be blocked\");\n         }\n \n         public static void resetBlockLatch() {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch != null) {\n                     blockLatch.countDown();\n                     blockLatch = null;\n                 }\n             }\n         }\n \n+        public Block(Map<String, String> props) {\n+            this(new AbstractConfig(config(), props).getString(BLOCK_CONFIG));\n+        }\n+\n+        public Block(String block) {\n+            this.block = block;\n+            synchronized (Block.class) {\n+                if (blockLatch != null) {\n+                    blockLatch.countDown();\n+                }\n+                blockLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NTU0Mw==", "bodyText": "Does it work because the tests don't block both a connector method and a task method?\n\nYep, that's exactly it. Actually, it's even broader--it works because no test involves blocking in more than one method.\n\nIf so, doesn't that make it somewhat brittle if people want to add more tests but don't infer that limitation?\n\nIt does make it brittle for that case, although since connectors and tasks are completely decoupled w/r/t allocation in a Connect cluster (they frequently exist on separate workers, for example), I'm a little skeptical of the need for a test that touches on a connector that blocks in its Connector and Task classes, either now or in the future.\n\nWould it be better to store a static list of all Block latches, have the constructor simply create a block latch and add it to that static list, and then have the resetBlockLatch() method remove each of the Block latches and call countDown() on them?\n\nI'm happy to leave a comment on the limitations of the current test setup and how it could be expanded to cover more ground in the future, but it seems a bit premature to put in the necessary infrastructure for that when there aren't any identified cases yet that would require it, especially since the PR already greatly expands on the capabilities for testing blocks in connectors and tasks but only uses a portion of it. Is that fair?", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534465543", "createdAt": "2020-12-02T20:38:11Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "diffHunk": "@@ -263,145 +332,153 @@ private void verifyNormalConnector() throws InterruptedException {\n         normalConnectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n     }\n \n-    public static class BlockingConnector extends SourceConnector {\n-\n+    private static class Block {\n         private static CountDownLatch blockLatch;\n \n-        private String block;\n+        private final String block;\n \n         public static final String BLOCK_CONFIG = \"block\";\n \n-        public static final String INITIALIZE = \"initialize\";\n-        public static final String INITIALIZE_WITH_TASK_CONFIGS = \"initializeWithTaskConfigs\";\n-        public static final String START = \"start\";\n-        public static final String RECONFIGURE = \"reconfigure\";\n-        public static final String TASK_CLASS = \"taskClass\";\n-        public static final String TASK_CONFIGS = \"taskConfigs\";\n-        public static final String STOP = \"stop\";\n-        public static final String VALIDATE = \"validate\";\n-        public static final String CONFIG = \"config\";\n-        public static final String VERSION = \"version\";\n-\n-        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n-            .define(\n-                BLOCK_CONFIG,\n-                ConfigDef.Type.STRING,\n-                \"\",\n-                ConfigDef.Importance.MEDIUM,\n-                \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n-            );\n-\n-        // No-args constructor required by the framework\n-        public BlockingConnector() {\n-            this(null);\n-        }\n-\n-        protected BlockingConnector(String block) {\n-            this.block = block;\n-            synchronized (BlockingConnector.class) {\n-                if (blockLatch != null) {\n-                    blockLatch.countDown();\n-                }\n-                blockLatch = new CountDownLatch(1);\n-            }\n+        private static ConfigDef config() {\n+            return new ConfigDef()\n+                .define(\n+                    BLOCK_CONFIG,\n+                    ConfigDef.Type.STRING,\n+                    \"\",\n+                    ConfigDef.Importance.MEDIUM,\n+                    \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n+                );\n         }\n \n         public static void waitForBlock() throws InterruptedException {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch == null) {\n                     throw new IllegalArgumentException(\"No connector has been created yet\");\n                 }\n             }\n-            \n+\n             log.debug(\"Waiting for connector to block\");\n             blockLatch.await();\n             log.debug(\"Connector should now be blocked\");\n         }\n \n         public static void resetBlockLatch() {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch != null) {\n                     blockLatch.countDown();\n                     blockLatch = null;\n                 }\n             }\n         }\n \n+        public Block(Map<String, String> props) {\n+            this(new AbstractConfig(config(), props).getString(BLOCK_CONFIG));\n+        }\n+\n+        public Block(String block) {\n+            this.block = block;\n+            synchronized (Block.class) {\n+                if (blockLatch != null) {\n+                    blockLatch.countDown();\n+                }\n+                blockLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5MQ=="}, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4OTY3OA==", "bodyText": "Yeah, maybe the simplest fix is to add a comment on the resetBlockLatch() method mentioning the limitation.", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534489678", "createdAt": "2020-12-02T21:22:23Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "diffHunk": "@@ -263,145 +332,153 @@ private void verifyNormalConnector() throws InterruptedException {\n         normalConnectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n     }\n \n-    public static class BlockingConnector extends SourceConnector {\n-\n+    private static class Block {\n         private static CountDownLatch blockLatch;\n \n-        private String block;\n+        private final String block;\n \n         public static final String BLOCK_CONFIG = \"block\";\n \n-        public static final String INITIALIZE = \"initialize\";\n-        public static final String INITIALIZE_WITH_TASK_CONFIGS = \"initializeWithTaskConfigs\";\n-        public static final String START = \"start\";\n-        public static final String RECONFIGURE = \"reconfigure\";\n-        public static final String TASK_CLASS = \"taskClass\";\n-        public static final String TASK_CONFIGS = \"taskConfigs\";\n-        public static final String STOP = \"stop\";\n-        public static final String VALIDATE = \"validate\";\n-        public static final String CONFIG = \"config\";\n-        public static final String VERSION = \"version\";\n-\n-        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n-            .define(\n-                BLOCK_CONFIG,\n-                ConfigDef.Type.STRING,\n-                \"\",\n-                ConfigDef.Importance.MEDIUM,\n-                \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n-            );\n-\n-        // No-args constructor required by the framework\n-        public BlockingConnector() {\n-            this(null);\n-        }\n-\n-        protected BlockingConnector(String block) {\n-            this.block = block;\n-            synchronized (BlockingConnector.class) {\n-                if (blockLatch != null) {\n-                    blockLatch.countDown();\n-                }\n-                blockLatch = new CountDownLatch(1);\n-            }\n+        private static ConfigDef config() {\n+            return new ConfigDef()\n+                .define(\n+                    BLOCK_CONFIG,\n+                    ConfigDef.Type.STRING,\n+                    \"\",\n+                    ConfigDef.Importance.MEDIUM,\n+                    \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n+                );\n         }\n \n         public static void waitForBlock() throws InterruptedException {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch == null) {\n                     throw new IllegalArgumentException(\"No connector has been created yet\");\n                 }\n             }\n-            \n+\n             log.debug(\"Waiting for connector to block\");\n             blockLatch.await();\n             log.debug(\"Connector should now be blocked\");\n         }\n \n         public static void resetBlockLatch() {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch != null) {\n                     blockLatch.countDown();\n                     blockLatch = null;\n                 }\n             }\n         }\n \n+        public Block(Map<String, String> props) {\n+            this(new AbstractConfig(config(), props).getString(BLOCK_CONFIG));\n+        }\n+\n+        public Block(String block) {\n+            this.block = block;\n+            synchronized (Block.class) {\n+                if (blockLatch != null) {\n+                    blockLatch.countDown();\n+                }\n+                blockLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5MQ=="}, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0ODk3Mw==", "bodyText": "Ack, added a comment. LMKWYT", "url": "https://github.com/apache/kafka/pull/9669#discussion_r534548973", "createdAt": "2020-12-02T23:19:43Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/BlockingConnectorTest.java", "diffHunk": "@@ -263,145 +332,153 @@ private void verifyNormalConnector() throws InterruptedException {\n         normalConnectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);\n     }\n \n-    public static class BlockingConnector extends SourceConnector {\n-\n+    private static class Block {\n         private static CountDownLatch blockLatch;\n \n-        private String block;\n+        private final String block;\n \n         public static final String BLOCK_CONFIG = \"block\";\n \n-        public static final String INITIALIZE = \"initialize\";\n-        public static final String INITIALIZE_WITH_TASK_CONFIGS = \"initializeWithTaskConfigs\";\n-        public static final String START = \"start\";\n-        public static final String RECONFIGURE = \"reconfigure\";\n-        public static final String TASK_CLASS = \"taskClass\";\n-        public static final String TASK_CONFIGS = \"taskConfigs\";\n-        public static final String STOP = \"stop\";\n-        public static final String VALIDATE = \"validate\";\n-        public static final String CONFIG = \"config\";\n-        public static final String VERSION = \"version\";\n-\n-        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n-            .define(\n-                BLOCK_CONFIG,\n-                ConfigDef.Type.STRING,\n-                \"\",\n-                ConfigDef.Importance.MEDIUM,\n-                \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n-            );\n-\n-        // No-args constructor required by the framework\n-        public BlockingConnector() {\n-            this(null);\n-        }\n-\n-        protected BlockingConnector(String block) {\n-            this.block = block;\n-            synchronized (BlockingConnector.class) {\n-                if (blockLatch != null) {\n-                    blockLatch.countDown();\n-                }\n-                blockLatch = new CountDownLatch(1);\n-            }\n+        private static ConfigDef config() {\n+            return new ConfigDef()\n+                .define(\n+                    BLOCK_CONFIG,\n+                    ConfigDef.Type.STRING,\n+                    \"\",\n+                    ConfigDef.Importance.MEDIUM,\n+                    \"Where to block indefinitely, e.g., 'start', 'initialize', 'taskConfigs', 'version'\"\n+                );\n         }\n \n         public static void waitForBlock() throws InterruptedException {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch == null) {\n                     throw new IllegalArgumentException(\"No connector has been created yet\");\n                 }\n             }\n-            \n+\n             log.debug(\"Waiting for connector to block\");\n             blockLatch.await();\n             log.debug(\"Connector should now be blocked\");\n         }\n \n         public static void resetBlockLatch() {\n-            synchronized (BlockingConnector.class) {\n+            synchronized (Block.class) {\n                 if (blockLatch != null) {\n                     blockLatch.countDown();\n                     blockLatch = null;\n                 }\n             }\n         }\n \n+        public Block(Map<String, String> props) {\n+            this(new AbstractConfig(config(), props).getString(BLOCK_CONFIG));\n+        }\n+\n+        public Block(String block) {\n+            this.block = block;\n+            synchronized (Block.class) {\n+                if (blockLatch != null) {\n+                    blockLatch.countDown();\n+                }\n+                blockLatch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5MQ=="}, "originalCommit": {"oid": "50b0792cd1300a3ff783bfa0411fed140fdfade6"}, "originalPosition": 367}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3641, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}