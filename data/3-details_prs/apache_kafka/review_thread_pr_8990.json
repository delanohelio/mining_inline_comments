{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1Mjk5ODkx", "number": 8990, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMjo0M1rOEMAk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyNDozM1rOEMMWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDI3ODI3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMjo0M1rOGt3stQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxMjowN1rOGt4AQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MTY2OQ==", "bodyText": "We can use connectingNodes.stream().filter?", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450751669", "createdAt": "2020-07-07T10:02:43Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -440,6 +441,20 @@ public boolean isConnectionSetupTimeout(String id, long now) {\n         return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);\n     }\n \n+    /**\n+     * Return the Set of nodes whose connection setup has timed out.\n+     * @param now the current time in ms\n+     */\n+    public Set<String> nodesWithConnectionSetupTimeout(long now) {\n+        Set<String> nodes = new HashSet<>();\n+        for (String nodeId : connectingNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NjY3Mg==", "bodyText": "Sure thing.", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450756672", "createdAt": "2020-07-07T10:12:07Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -440,6 +441,20 @@ public boolean isConnectionSetupTimeout(String id, long now) {\n         return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);\n     }\n \n+    /**\n+     * Return the Set of nodes whose connection setup has timed out.\n+     * @param now the current time in ms\n+     */\n+    public Set<String> nodesWithConnectionSetupTimeout(long now) {\n+        Set<String> nodes = new HashSet<>();\n+        for (String nodeId : connectingNodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MTY2OQ=="}, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDI4MDQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzoyNFrOGt3uFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzoyNFrOGt3uFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjAyMQ==", "bodyText": "nit: connections => connection", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752021", "createdAt": "2020-07-07T10:03:24Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDI4MTY4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzo1MFrOGt3u2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzo1MFrOGt3u2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjIxOA==", "bodyText": "typo: for for", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752218", "createdAt": "2020-07-07T10:03:50Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections\n+        connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.\n+        Set<String> timedOutConnections = connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds());\n+        assertEquals(2, timedOutConnections.size());\n+        assertTrue(timedOutConnections.contains(nodeId1));\n+        assertTrue(timedOutConnections.contains(nodeId2));\n+\n+        // Disconnect the first two connections\n+        connectionStates.disconnected(nodeId1, time.milliseconds());\n+        connectionStates.disconnected(nodeId2, time.milliseconds());\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for for the third connections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDI4MjIwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzo1OFrOGt3vJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowMzo1OFrOGt3vJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1MjI5NQ==", "bodyText": "one?", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752295", "createdAt": "2020-07-07T10:03:58Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());\n+\n+        // Advance time by half of the connection setup timeout\n+        time.sleep(connectionSetupTimeoutMs / 2);\n+\n+        // Initiate a third connections\n+        connectionStates.connecting(nodeId3, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for the first two connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.\n+        Set<String> timedOutConnections = connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds());\n+        assertEquals(2, timedOutConnections.size());\n+        assertTrue(timedOutConnections.contains(nodeId1));\n+        assertTrue(timedOutConnections.contains(nodeId2));\n+\n+        // Disconnect the first two connections\n+        connectionStates.disconnected(nodeId1, time.milliseconds());\n+        connectionStates.disconnected(nodeId2, time.milliseconds());\n+\n+        // Advance time beyond the connection setup timeout (+ max jitter) for for the third connections\n+        time.sleep((long) (connectionSetupTimeoutMs / 2 + connectionSetupTimeoutMs * connectionSetupTimeoutJitter));\n+\n+        // Expect two timed out connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDI4NTcyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNDo1OFrOGt3xVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNDo1OFrOGt3xVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1Mjg1Mg==", "bodyText": "nit: assertEquals(0, ...) may be better here so we know how many in the case of failure?", "url": "https://github.com/apache/kafka/pull/8990#discussion_r450752852", "createdAt": "2020-07-07T10:04:58Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -365,4 +367,48 @@ public void testExponentialConnectionSetupTimeout() {\n                 connectionSetupTimeoutMs * connectionSetupTimeoutJitter);\n         assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n     }\n+\n+    @Test\n+    public void testTimedOutConnections() {\n+        // Initiate two connections\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        connectionStates.connecting(nodeId2, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+\n+        // Expect no timed out connections\n+        assertTrue(connectionStates.nodesWithConnectionSetupTimeout(time.milliseconds()).isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479a681be259332804dde4d65082b56c531be4d1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjIwNjM3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyNDozM1rOGuKgpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyNDozM1rOGuKgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1OTg3Ng==", "bodyText": "Do we need a Set here? Not sure we need to pay the cost of creating the HashSet, etc.", "url": "https://github.com/apache/kafka/pull/8990#discussion_r451059876", "createdAt": "2020-07-07T18:24:33Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -440,6 +442,16 @@ public boolean isConnectionSetupTimeout(String id, long now) {\n         return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);\n     }\n \n+    /**\n+     * Return the Set of nodes whose connection setup has timed out.\n+     * @param now the current time in ms\n+     */\n+    public Set<String> nodesWithConnectionSetupTimeout(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e7b165894495282f0fa1decd7239ea42a6f7ec"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2182, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}