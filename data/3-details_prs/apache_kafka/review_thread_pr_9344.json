{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDc1NTg3", "number": 9344, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxMToyNVrOEoOQJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTozNjozMlrOEod3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjEyMDA2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxMToyNlrOHZMCWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoxMjozM1rOHZd8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MzY1OQ==", "bodyText": "Do we want to return quota exceeded in all cases? Apart from timeouts, it seems like we should propagate failures rather an earlier quota exceeded exception?  That is, if we were throttled for 5 millis and then see a failure, the failure is more useful than the fact that we were throttled for 5 millis?", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496173659", "createdAt": "2020-09-28T19:11:26Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1554,6 +1575,11 @@ private ConfigEntry configEntry(CreatableTopicConfigs config) {\n \n             @Override\n             void handleFailure(Throwable throwable) {\n+                // If there were any topics retries due to a quota exceeded exception, we propagate\n+                // the initial error back to the caller.\n+                completeQuotaExceededException(futures, quotaExceededExceptions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f8717f674680b0749ec36c84093aff247ffae74"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NzA1Ng==", "bodyText": "Definitely. I meant to do it for TimeoutException only but I have forgotten it while implementing it :(. Let me correct this.", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496467056", "createdAt": "2020-09-29T07:12:33Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1554,6 +1575,11 @@ private ConfigEntry configEntry(CreatableTopicConfigs config) {\n \n             @Override\n             void handleFailure(Throwable throwable) {\n+                // If there were any topics retries due to a quota exceeded exception, we propagate\n+                // the initial error back to the caller.\n+                completeQuotaExceededException(futures, quotaExceededExceptions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3MzY1OQ=="}, "originalCommit": {"oid": "0f8717f674680b0749ec36c84093aff247ffae74"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjEzODMyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxNjo1OVrOHZMNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoyMzo0NlrOHZeUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NjQ3Mg==", "bodyText": "I can see why we return the delta, but this looks odd when it says throttled with a time of zero.", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496176472", "createdAt": "2020-09-28T19:16:59Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -733,7 +733,9 @@ public void testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeO\n             time.sleep(defaultApiTimeout + 1);\n \n             assertNull(result.values().get(\"topic1\").get());\n-            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n+            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n+                ThrottlingQuotaExceededException.class);\n+            assertEquals(0, e.throttleTimeMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f8717f674680b0749ec36c84093aff247ffae74"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MzI3MA==", "bodyText": "Yeah, I do agree but this could happen even if this should be rare. This test case is a bit stretched to verify that throttle time does not go below zero.\nThe reasoning of doing this is that a client could be throttled for longer than default.api.timeout.ms. When this happens, I believe that we should return an adjusted throttle time such that the client does not have to re-wait for the time that it has already waited for.", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496473270", "createdAt": "2020-09-29T07:23:46Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -733,7 +733,9 @@ public void testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeO\n             time.sleep(defaultApiTimeout + 1);\n \n             assertNull(result.values().get(\"topic1\").get());\n-            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n+            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n+                ThrottlingQuotaExceededException.class);\n+            assertEquals(0, e.throttleTimeMs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NjQ3Mg=="}, "originalCommit": {"oid": "0f8717f674680b0749ec36c84093aff247ffae74"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODY3NzgyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTozNjozMlrOHZkxuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMTozNToxN1rOHZo13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3OTAwMw==", "bodyText": "Perhaps we could make this maybeCompleteQuotaExceededException and pass in the throwable, so that we can do the check for TimeoutException in that helper method rather than in every handleFailure?", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496579003", "createdAt": "2020-09-29T09:36:32Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1554,6 +1575,13 @@ private ConfigEntry configEntry(CreatableTopicConfigs config) {\n \n             @Override\n             void handleFailure(Throwable throwable) {\n+                // If there were any topics retries due to a quota exceeded exception, we propagate\n+                // the initial error back to the caller if the request timed out.\n+                if (options.shouldRetryOnQuotaViolation() && throwable instanceof TimeoutException) {\n+                    completeQuotaExceededException(futures, quotaExceededExceptions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af778cebd3094bd154e466ba9c2a5e05ec4297fb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0NTU5OA==", "bodyText": "That's a very good suggestion, thanks.", "url": "https://github.com/apache/kafka/pull/9344#discussion_r496645598", "createdAt": "2020-09-29T11:35:17Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1554,6 +1575,13 @@ private ConfigEntry configEntry(CreatableTopicConfigs config) {\n \n             @Override\n             void handleFailure(Throwable throwable) {\n+                // If there were any topics retries due to a quota exceeded exception, we propagate\n+                // the initial error back to the caller if the request timed out.\n+                if (options.shouldRetryOnQuotaViolation() && throwable instanceof TimeoutException) {\n+                    completeQuotaExceededException(futures, quotaExceededExceptions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3OTAwMw=="}, "originalCommit": {"oid": "af778cebd3094bd154e466ba9c2a5e05ec4297fb"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}