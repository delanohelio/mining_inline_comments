{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODQ1NTMx", "number": 8135, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzowMlrODg5cHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NTozNlrODi2IJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIyMTEwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzowMlrOFrW6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjoyOTozNlrOFrcasA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODQ0OA==", "bodyText": "Is SASL support significantly different and only needed in distributed mode?", "url": "https://github.com/apache/kafka/pull/8135#discussion_r381008448", "createdAt": "2020-02-19T00:07:02Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java", "diffHunk": "@@ -257,7 +257,6 @@\n                     CommonClientConfigs.DEFAULT_SECURITY_PROTOCOL,\n                     ConfigDef.Importance.MEDIUM,\n                     CommonClientConfigs.SECURITY_PROTOCOL_DOC)\n-            .withClientSslSupport()\n             .withClientSaslSupport()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMzk3OQ==", "bodyText": "Good question. SASL support is different in that it's only useful for connecting to Kafka, as opposed to SSL, which can also be used for performing authentication at the REST API level. But both types of worker should support all SASL-related configs since they both do connect to Kafka.\nHowever, as far as I can tell, the lack of definition for SASL-related configs in the StandaloneConfig class isn't causing any bugs at the moment, so in order to be conservative with the changes here I opted to just move the SSL-related configs into the parent config class.\nI think there's a lot of configs that are defined in the DistributedConfig class that would make more sense in the WorkerConfig class, and possibly some configs in the WorkerConfig class that are really only relevant for distributed mode (rest.advertised.* seems strange, given that standalone workers don't have any other workers to advertise their URLs to...). We can address all of that here if there are other issues caused by them, but if it's more of a stylistic thing and it's alright with you, I think a follow-up ticket for cleaning up where we define these configs might be a better way to handle the non-urgent work and get in this somewhat-more-urgent fix now. WDYT?", "url": "https://github.com/apache/kafka/pull/8135#discussion_r381023979", "createdAt": "2020-02-19T01:03:04Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java", "diffHunk": "@@ -257,7 +257,6 @@\n                     CommonClientConfigs.DEFAULT_SECURITY_PROTOCOL,\n                     ConfigDef.Importance.MEDIUM,\n                     CommonClientConfigs.SECURITY_PROTOCOL_DOC)\n-            .withClientSslSupport()\n             .withClientSaslSupport()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODQ0OA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA5ODY3Mg==", "bodyText": "I think that makes sense.", "url": "https://github.com/apache/kafka/pull/8135#discussion_r381098672", "createdAt": "2020-02-19T06:29:36Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java", "diffHunk": "@@ -257,7 +257,6 @@\n                     CommonClientConfigs.DEFAULT_SECURITY_PROTOCOL,\n                     ConfigDef.Importance.MEDIUM,\n                     CommonClientConfigs.SECURITY_PROTOCOL_DOC)\n-            .withClientSslSupport()\n             .withClientSaslSupport()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODQ0OA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU0NDg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMDozOVrOFuTkbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoxMDozOVrOFuTkbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5OTQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n          \n          \n            \n                            put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foo\");", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384099439", "createdAt": "2020-02-25T20:10:39Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU4MTUyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoyMjoxMFrOFuT6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0Mzo1NlrOFx5Ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNTEzOQ==", "bodyText": "Did you mean for the value to be ssk_...?", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384105139", "createdAt": "2020-02-25T20:22:10Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MDYwNg==", "bodyText": "Oops, nope. Will fix.", "url": "https://github.com/apache/kafka/pull/8135#discussion_r387860606", "createdAt": "2020-03-04T18:43:56Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNTEzOQ=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0OTk4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NTozNlrOFuUlQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyNjozNFrOFx6ivg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjAzMg==", "bodyText": "Wouldn't it be simpler and easier to understand the differences between the tests by pulling out the common objects? The whole class would then be something like:\n    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n\n    private static final Map<String, Object> EXPECTED;\n    static {\n        Map<String, Object> settings = new HashMap<>();\n        settings.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n        settings.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n        settings.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, new Password(\"ssl_keystore_password\"));\n        settings.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n        settings.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, new Password(\"ssl_truststore_password\"));\n        EXPECTED = Collections.unmodifiableMap(settings);\n    }\n\n    private static final Map<String, String> STANDALONE;\n    static {\n        Map<String, String> settings = new HashMap<>();\n        settings.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n        settings.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n        settings.put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n        STANDALONE = Collections.unmodifiableMap(settings);\n    }\n\n    private static Map<String, String> withStringValues(Map<String, ?> inputs, String prefix) {\n        return inputs.entrySet().stream()\n                     .collect(Collectors.toMap(\n                              entry -> prefix + entry.getKey(),\n                              entry -> literalValue(entry.getValue())\n                      ));\n    }\n\n    private static String literalValue(Object value) {\n        return value instanceof Password ? ((Password)value).value() : value.toString();\n    }\n\n    @Test\n    public void testRestServerPrefixedSslConfigs() {\n        Map<String, String> props = new HashMap<>(STANDALONE);\n        props.putAll(withStringValues(EXPECTED, HTTPS_LISTENER_PREFIX));\n\n        StandaloneConfig config = new StandaloneConfig(props);\n        assertEquals(EXPECTED, config.valuesWithPrefixAllOrNothing(HTTPS_LISTENER_PREFIX));\n    }\n\n    @Test\n    public void testRestServerNonPrefixedSslConfigs() {\n        Map<String, String> props = new HashMap<>(STANDALONE);\n        props.putAll(withStringValues(EXPECTED, \"\"));\n\n        StandaloneConfig config = new StandaloneConfig(props);\n        Map<String, Object> actualProps = config.valuesWithPrefixAllOrNothing(HTTPS_LISTENER_PREFIX)\n                                                .entrySet().stream()\n                                                .filter(entry -> EXPECTED.containsKey(entry.getKey()))\n                                                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        assertEquals(EXPECTED, actualProps);\n    }", "url": "https://github.com/apache/kafka/pull/8135#discussion_r384116032", "createdAt": "2020-02-25T20:45:36Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n+\n+                // Custom props for test\n+                putAll(httpsListenerProps);\n+            }\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MDgyNQ==", "bodyText": "I like a lot of this and will incorporate it. I'd rather not declare constants like STANDALONE and EXPECTED just because they seem pretty specific to these two tests and may not be applicable to other tests that get added to this class, but pretty much everything else (especially the handling of Password-type configs) is great.", "url": "https://github.com/apache/kafka/pull/8135#discussion_r387880825", "createdAt": "2020-03-04T19:21:18Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n+\n+                // Custom props for test\n+                putAll(httpsListenerProps);\n+            }\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjAzMg=="}, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MzcxMA==", "bodyText": "Actually, it looks like the ConfigDef class already has some logic to convert parsed types (including Passwords) into strings: \n  \n    \n      kafka/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java\n    \n    \n        Lines 761 to 783\n      in\n      f35e649\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Converts a map of config (key, value) pairs to a map of strings where each value \n        \n\n        \n          \n                * is converted to a string. This method should be used with care since it stores \n        \n\n        \n          \n                * actual password values to String. Values from this map should never be used in log entries. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public static  Map<String, String> convertToStringMapWithPasswordValues(Map<String, ?> configs) { \n        \n\n        \n          \n                   Map<String, String> result = new HashMap<>(); \n        \n\n        \n          \n                   for (Map.Entry<String, ?> entry : configs.entrySet()) { \n        \n\n        \n          \n                       Object value = entry.getValue(); \n        \n\n        \n          \n                       String strValue; \n        \n\n        \n          \n                       if (value instanceof Password) \n        \n\n        \n          \n                           strValue = ((Password) value).value(); \n        \n\n        \n          \n                       else if (value instanceof List) \n        \n\n        \n          \n                           strValue = convertToString(value, Type.LIST); \n        \n\n        \n          \n                       else if (value instanceof Class) \n        \n\n        \n          \n                           strValue = convertToString(value, Type.CLASS); \n        \n\n        \n          \n                       else \n        \n\n        \n          \n                           strValue = convertToString(value, null); \n        \n\n        \n          \n                       if (strValue != null) \n        \n\n        \n          \n                           result.put(entry.getKey(), strValue); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   return result; \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nSo we can even just use that and remove the literalValue method", "url": "https://github.com/apache/kafka/pull/8135#discussion_r387883710", "createdAt": "2020-03-04T19:26:34Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneConfigTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime.standalone;\n+\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.common.config.types.Password;\n+import org.apache.kafka.connect.runtime.WorkerConfig;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class StandaloneConfigTest {\n+\n+    private static final String HTTPS_LISTENER_PREFIX = \"listeners.https.\";\n+\n+    @Test\n+    public void testRestServerPrefixedSslConfigs() {\n+        Map<String, String> httpsListenerProps = new HashMap<String, String>() {\n+            {\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEY_PASSWORD_CONFIG, \"ssl_key_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, \"ssl_keystore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, \"ssk_keystore_password\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, \"ssl_truststore\");\n+                put(HTTPS_LISTENER_PREFIX + SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, \"ssl_truststore_password\");\n+            }\n+        };\n+\n+        Set<String> passwordConfigs = Stream.of(\n+            SslConfigs.SSL_KEY_PASSWORD_CONFIG,\n+            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,\n+            SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG\n+        ).map(key -> HTTPS_LISTENER_PREFIX + key)\n+            .collect(Collectors.toSet());\n+\n+        Map<String, Object> expectedListenerProps = httpsListenerProps.entrySet().stream()\n+            .collect(Collectors.toMap(\n+                entry -> entry.getKey().substring(HTTPS_LISTENER_PREFIX.length()),\n+                entry -> passwordConfigs.contains(entry.getKey())\n+                        ? new Password(entry.getValue())\n+                        : entry.getValue()\n+            ));\n+\n+        Map<String, String> props = new HashMap<String, String>() {\n+            {\n+                // Base props required for standalone mode\n+                put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, \"org.apache.kafka.connect.json.JsonConverter\");\n+                put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"/tmp/foad\");\n+\n+                // Custom props for test\n+                putAll(httpsListenerProps);\n+            }\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjAzMg=="}, "originalCommit": null, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}