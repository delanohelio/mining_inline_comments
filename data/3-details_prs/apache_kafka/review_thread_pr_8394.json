{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDA3OTE2", "number": 8394, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0NTozNlrODtZaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNTo1M1rODvkH8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTI4ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0NTozNlrOF-y25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjoxNDo0N1rOGAS2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng==", "bodyText": "Why do we use Long.MaxValue here and Int.MaxValue in the base class?", "url": "https://github.com/apache/kafka/pull/8394#discussion_r401389286", "createdAt": "2020-04-01T06:45:36Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwMjE0MQ==", "bodyText": "When the quota limit does not exist, Long.MaxValue is returned by default: https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/ClientQuotaManager.scala#L329. As ClientIdQuotaTest does not set the request quota at all, Long.MaxValue is the expected value. This is the default quota when not defined.\nWhereas, the other tests relying on the base class uses Int.MaxValue as a default. It is an arbitrary value here. Any other values which are high enough would work as well.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r401402141", "createdAt": "2020-04-01T07:15:59Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng=="}, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNDg0Ng==", "bodyText": "The PR description only mentions the wait for quota change. It would be good to explain the reason for this change there too.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r401404846", "createdAt": "2020-04-01T07:21:36Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng=="}, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyODc4NQ==", "bodyText": "I have complemented the description.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r401728785", "createdAt": "2020-04-01T16:00:59Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng=="}, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzMDg5NQ==", "bodyText": "I don't think val defaultRequestQuota = Int.MaxValue in BaseQuotaTest is supposed to be some special value which is different from unlimited quota. It would not be in any case, even if other tests explicitly set request quota to this value.  I think we should change  val defaultRequestQuota = Int.MaxValue in BaseQuotaTest to be Long.MaxValue as well and not have this override in ClientIdQuotaTest. Otherwise, we are making it even more confusing and harder to debug later.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r401930895", "createdAt": "2020-04-01T21:49:53Z", "author": {"login": "apovzner"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng=="}, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2MjExNg==", "bodyText": "if Int.MaxValue wasn't used for a specific reason, it is indeed better to use Long.MaxValue in all cases.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r402962116", "createdAt": "2020-04-03T12:14:47Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala", "diffHunk": "@@ -26,6 +26,10 @@ class ClientIdQuotaTest extends BaseQuotaTest {\n   override def producerClientId = \"QuotasTestProducer-!@#$%^&*()\"\n   override def consumerClientId = \"QuotasTestConsumer-!@#$%^&*()\"\n \n+  // The test does not setup a default request limit and thus default to Long.MaxValue\n+  // which is the default value used when a quota does not exist.\n+  override def defaultRequestQuota: Double = Long.MaxValue\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTI4Ng=="}, "originalCommit": {"oid": "d9ffed64e1b51316ace6e630b4ccb608d39f7eda"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAxNTIzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNTo1M1rOGCD3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNDo0M1rOGCJgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzcyMw==", "bodyText": "Can you please add a toDouble call here? This silent conversion triggers a warning in Scala 2.13.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r404813723", "createdAt": "2020-04-07T13:35:53Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "diffHunk": "@@ -57,9 +57,9 @@ abstract class BaseQuotaTest extends IntegrationTestHarness {\n   this.consumerConfig.setProperty(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, \"0\")\n \n   // Low enough quota that a producer sending a small payload in a tight loop should get throttled\n-  val defaultProducerQuota = 8000\n-  val defaultConsumerQuota = 2500\n-  val defaultRequestQuota = Int.MaxValue\n+  val defaultProducerQuota: Long = 8000\n+  val defaultConsumerQuota: Long = 2500\n+  val defaultRequestQuota: Double = Long.MaxValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b044647ab82055a61520c33f43b11057f030fc7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTE0OA==", "bodyText": "Same for other cases where we are passing a Long when a Double is expected.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r404815148", "createdAt": "2020-04-07T13:37:54Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "diffHunk": "@@ -57,9 +57,9 @@ abstract class BaseQuotaTest extends IntegrationTestHarness {\n   this.consumerConfig.setProperty(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, \"0\")\n \n   // Low enough quota that a producer sending a small payload in a tight loop should get throttled\n-  val defaultProducerQuota = 8000\n-  val defaultConsumerQuota = 2500\n-  val defaultRequestQuota = Int.MaxValue\n+  val defaultProducerQuota: Long = 8000\n+  val defaultConsumerQuota: Long = 2500\n+  val defaultRequestQuota: Double = Long.MaxValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzcyMw=="}, "originalCommit": {"oid": "5b044647ab82055a61520c33f43b11057f030fc7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNjAwNg==", "bodyText": "Sure, done.", "url": "https://github.com/apache/kafka/pull/8394#discussion_r404906006", "createdAt": "2020-04-07T15:34:43Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "diffHunk": "@@ -57,9 +57,9 @@ abstract class BaseQuotaTest extends IntegrationTestHarness {\n   this.consumerConfig.setProperty(ConsumerConfig.FETCH_MAX_WAIT_MS_CONFIG, \"0\")\n \n   // Low enough quota that a producer sending a small payload in a tight loop should get throttled\n-  val defaultProducerQuota = 8000\n-  val defaultConsumerQuota = 2500\n-  val defaultRequestQuota = Int.MaxValue\n+  val defaultProducerQuota: Long = 8000\n+  val defaultConsumerQuota: Long = 2500\n+  val defaultRequestQuota: Double = Long.MaxValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzcyMw=="}, "originalCommit": {"oid": "5b044647ab82055a61520c33f43b11057f030fc7"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3158, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}