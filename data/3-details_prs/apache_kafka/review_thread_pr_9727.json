{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDU1MzI1", "number": 9727, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxNzo0OVrOFDw5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxNToxOVrOFFMtfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDkxMTA2OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxNzo0OVrOIDkveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyMjowNFrOIEAAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA==", "bodyText": "I believe PassThrough is only used for the cogroup but now I think you can remove it completely.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540618618", "createdAt": "2020-12-11T01:17:49Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +219,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNjY1NQ==", "bodyText": "It's still used for some of the kstream ksteam internals so I think it's gotta stay for now", "url": "https://github.com/apache/kafka/pull/9727#discussion_r541026655", "createdAt": "2020-12-11T15:26:36Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +219,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA=="}, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2NTMyMw==", "bodyText": "Ok. then LGTM", "url": "https://github.com/apache/kafka/pull/9727#discussion_r541065323", "createdAt": "2020-12-11T16:22:04Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +219,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxODYxOA=="}, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDkxNTU2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxOTowOFrOIDkxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToxOTowOFrOIDkxvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxOTE5OA==", "bodyText": "I think these lines are too long. The ones in the other methods too", "url": "https://github.com/apache/kafka/pull/9727#discussion_r540619198", "createdAt": "2020-12-11T01:19:08Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -115,24 +124,28 @@\n                                 final Merger<? super K, VOut> sessionMerger) {\n         processRepartitions(groupPatterns, storeBuilder);\n         final Collection<GraphNode> processors = new ArrayList<>();\n+        final Collection<KStreamAggProcessorSupplier> parentProcessors = new ArrayList<>();\n         boolean stateCreated = false;\n         int counter = 0;\n         for (final Entry<KGroupedStreamImpl<K, ?>, Aggregator<? super K, Object, VOut>> kGroupedStream : groupPatterns.entrySet()) {\n+            final KStreamAggProcessorSupplier<K, K, ?, ?> parentProcessor = (KStreamAggProcessorSupplier<K, K, ?, ?>) new KStreamSessionWindowAggregate<K, K, VOut>(sessionWindows, storeBuilder.name(), initializer, kGroupedStream.getValue(), sessionMerger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fee1fd79eb5df5d0b63d7619a815351eb5165eb"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTkyNDMxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxMTowMlrOIFleuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxMTowMlrOIFleuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcyNzg2NQ==", "bodyText": "It looks like the parameter is ignored. Is that correct? If so, it might be nice to add an explanatory comment.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542727865", "createdAt": "2020-12-14T20:11:02Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTablePassThrough.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+\n+import java.util.Collection;\n+\n+public class KTablePassThrough<K, V> implements KTableProcessorSupplier<K, V, V> {\n+    private final Collection<KStreamAggProcessorSupplier> parents;\n+    private final String storeName;\n+\n+\n+    KTablePassThrough(final Collection<KStreamAggProcessorSupplier> parents, final String storeName) {\n+        this.parents = parents;\n+        this.storeName = storeName;\n+    }\n+\n+    @Override\n+    public Processor<K, Change<V>> get() {\n+        return new KTablePassThroughProcessor();\n+    }\n+\n+    @Override\n+    public boolean enableSendingOldValues(final boolean forceMaterialization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTk0NzY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxNDoxOFrOIFltjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNDo0N1rOIGRCwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg==", "bodyText": "I noticed that queryableName is a different parameter than the one we actually build the parent processors with (storeBuilder.name()). It wouldn't surprise me if there's a subtle difference between them.", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542731662", "createdAt": "2020-12-14T20:14:18Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +236,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMjI3Mw==", "bodyText": "Looks like they're the same when cogroup is materialized, but if it's not the storeBuilder.name() is auto generated and queryableName is null. With that said, it seems sto me that it would be better to pass storeBuilder.name() to the passThrough, to be safe. WDYT?", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543432273", "createdAt": "2020-12-15T15:14:16Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +236,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MTYwMg==", "bodyText": "Yes, that sounds like the right thing to do. Thanks!", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543441602", "createdAt": "2020-12-15T15:24:47Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedStreamAggregateBuilder.java", "diffHunk": "@@ -201,9 +236,10 @@ private void processRepartitions(final Map<KGroupedStreamImpl<K, ?>, Aggregator<\n             \"-cogroup-merge\",\n             builder,\n             CogroupedKStreamImpl.MERGE_NAME);\n-        final ProcessorSupplier<K, VOut> passThrough = new PassThrough<>();\n+        final KTableProcessorSupplier<K, VOut, VOut> passThrough = new KTablePassThrough<>(parentProcessors, queryableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMTY2Mg=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTk1MTYyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxNDo1MVrOIFlv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNjowN1rOIGRHgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ==", "bodyText": "Just checking: does this fail on trunk?", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732269", "createdAt": "2020-12-14T20:14:51Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "diffHunk": "@@ -1202,6 +1204,46 @@ public void testCogroupWithThreeGroupedStreams() {\n         }\n     }\n \n+    @Test\n+    public void testCogroupWithKTableKTableInnerJoin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg2MDEyNQ==", "bodyText": "It does", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542860125", "createdAt": "2020-12-14T22:15:26Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "diffHunk": "@@ -1202,6 +1204,46 @@ public void testCogroupWithThreeGroupedStreams() {\n         }\n     }\n \n+    @Test\n+    public void testCogroupWithKTableKTableInnerJoin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MjgxOQ==", "bodyText": "Thank you!", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543442819", "createdAt": "2020-12-15T15:26:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImplTest.java", "diffHunk": "@@ -1202,6 +1204,46 @@ public void testCogroupWithThreeGroupedStreams() {\n         }\n     }\n \n+    @Test\n+    public void testCogroupWithKTableKTableInnerJoin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjI2OQ=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTk1NDU0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoxNToxOVrOIFlxpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToyNjoxMVrOIGRH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ==", "bodyText": "And this one too?", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542732711", "createdAt": "2020-12-14T20:15:19Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -803,6 +808,18 @@ public void shouldWorkBeforeJoinLeft() {\n \n     }\n \n+    @Test\n+    public void shouldWorkWithCogrouped() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg2MDIwMg==", "bodyText": "Also fails (:", "url": "https://github.com/apache/kafka/pull/9727#discussion_r542860202", "createdAt": "2020-12-14T22:15:31Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -803,6 +808,18 @@ public void shouldWorkBeforeJoinLeft() {\n \n     }\n \n+    @Test\n+    public void shouldWorkWithCogrouped() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0Mjg5OQ==", "bodyText": "Thank you!", "url": "https://github.com/apache/kafka/pull/9727#discussion_r543442899", "createdAt": "2020-12-15T15:26:11Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -803,6 +808,18 @@ public void shouldWorkBeforeJoinLeft() {\n \n     }\n \n+    @Test\n+    public void shouldWorkWithCogrouped() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjczMjcxMQ=="}, "originalCommit": {"oid": "dfc1dad96d83e4d4e153b1191e800fbb99dcd47f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3449, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}