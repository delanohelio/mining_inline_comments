{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDM5MDQy", "number": 8981, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxNzo0OFrOEL0B0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyNzo1N1rOEMQ8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIyMjI3OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/kafka/kafka.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxNzo0OFrOGtkCVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxNzo0OFrOGtkCVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyOTUyNA==", "bodyText": "transaction_timeout => transaction_cleanup_interval?", "url": "https://github.com/apache/kafka/pull/8981#discussion_r450429524", "createdAt": "2020-07-06T19:17:48Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/services/kafka/kafka.py", "diffHunk": "@@ -101,7 +101,7 @@ def __init__(self, context, num_nodes, zk, security_protocol=SecurityConfig.PLAI\n                  jmx_attributes=None, zk_connect_timeout=5000, zk_session_timeout=6000, server_prop_overides=None, zk_chroot=None,\n                  zk_client_secure=False,\n                  listener_security_config=ListenerSecurityConfig(), per_node_server_prop_overrides=None,\n-                 extra_kafka_opts=\"\", tls_version=None):\n+                 extra_kafka_opts=\"\", tls_version=None, transaction_timeout=10000):", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIyMzEwOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/core/transactions_test.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxODowMVrOGtkC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxODowMVrOGtkC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyOTY1Mg==", "bodyText": "This is reducing the transaction cleanup interval.", "url": "https://github.com/apache/kafka/pull/8981#discussion_r450429652", "createdAt": "2020-07-06T19:18:01Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -53,7 +53,11 @@ def __init__(self, test_context):\n         self.zk = ZookeeperService(test_context, num_nodes=1)\n         self.kafka = KafkaService(test_context,\n                                   num_nodes=self.num_brokers,\n-                                  zk=self.zk)\n+                                  zk=self.zk,\n+                                  # Reducing timeout of transaction can quickly cleanup the unstable offsets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIyOTQxOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/core/transactions_test.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyMDowM1rOGtkGjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDoxMzo1OVrOGtugyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDYwNA==", "bodyText": "The default transaction.abort.timed.out.transaction.cleanup.interval.ms is 10 secs. In the jira, the consumer seems to have failed without making progress for 30 secs. So, will reducing this timeout help?", "url": "https://github.com/apache/kafka/pull/8981#discussion_r450430604", "createdAt": "2020-07-06T19:20:03Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -53,7 +53,11 @@ def __init__(self, test_context):\n         self.zk = ZookeeperService(test_context, num_nodes=1)\n         self.kafka = KafkaService(test_context,\n                                   num_nodes=self.num_brokers,\n-                                  zk=self.zk)\n+                                  zk=self.zk,\n+                                  # Reducing timeout of transaction can quickly cleanup the unstable offsets.\n+                                  # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+                                  # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+                                  transaction_timeout=2000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMTE2MA==", "bodyText": "@junrao thanks for your great reviews!!! This approach is not correct. The \"number\" which should be reduced is \"transaction timeout\" rather than \"cleanup interval\".", "url": "https://github.com/apache/kafka/pull/8981#discussion_r450601160", "createdAt": "2020-07-07T04:13:59Z", "author": {"login": "chia7712"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -53,7 +53,11 @@ def __init__(self, test_context):\n         self.zk = ZookeeperService(test_context, num_nodes=1)\n         self.kafka = KafkaService(test_context,\n                                   num_nodes=self.num_brokers,\n-                                  zk=self.zk)\n+                                  zk=self.zk,\n+                                  # Reducing timeout of transaction can quickly cleanup the unstable offsets.\n+                                  # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+                                  # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+                                  transaction_timeout=2000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDYwNA=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjg4MDg3OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/core/transactions_test.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1NzowN1rOGuRDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1NzowN1rOGuRDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NzA4Ng==", "bodyText": "broker => broken", "url": "https://github.com/apache/kafka/pull/8981#discussion_r451167086", "createdAt": "2020-07-07T21:57:07Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -47,7 +47,10 @@ def __init__(self, test_context):\n         self.num_output_partitions = 3\n         self.num_seed_messages = 100000\n         self.transaction_size = 750\n-        self.transaction_timeout = 40000\n+        # This is reducing the transaction cleanup interval.\n+        # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjk2MDUzOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/core/transactions_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyNzo1N1rOGuRzbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozNToxMVrOGu9taw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTM3NA==", "bodyText": "Hmm, still not sure about this. In a hard bounce, the broker failure will be detected after ZK session expiration, with a default of 18 sec. After that, new leaders will be elected and the client should recover. So, the transactional producer should be unblocked after 18 secs, even with a 40 sec transaction_timeout?", "url": "https://github.com/apache/kafka/pull/8981#discussion_r451179374", "createdAt": "2020-07-07T22:27:57Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -47,7 +47,10 @@ def __init__(self, test_context):\n         self.num_output_partitions = 3\n         self.num_seed_messages = 100000\n         self.transaction_size = 750\n-        self.transaction_timeout = 40000\n+        # This is reducing the transaction cleanup interval.\n+        # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+        # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+        self.transaction_timeout = 5000", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxOTIwMQ==", "bodyText": "the broker failure will be detected after ZK session expiration\n\nIt is unrelate to broker. The root cause is client (TransactionMessageCopier) is ungracefully closed in hard_bounce mode. The transactional message sent by client is not correctly completed so there are pending transaction (unstable offset) stored by broker. When the client is restarting, it fails to get offsets of partition due to unstable offset (TransactionMessageCopier needs to get position of partition to calculate remaining messages after restarting).\nThe timeout of transaction is higher than the timeout of verification so this test fails if any transaction is not correctly abort.", "url": "https://github.com/apache/kafka/pull/8981#discussion_r451219201", "createdAt": "2020-07-08T00:41:49Z", "author": {"login": "chia7712"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -47,7 +47,10 @@ def __init__(self, test_context):\n         self.num_output_partitions = 3\n         self.num_seed_messages = 100000\n         self.transaction_size = 750\n-        self.transaction_timeout = 40000\n+        # This is reducing the transaction cleanup interval.\n+        # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+        # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+        self.transaction_timeout = 5000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTM3NA=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNDkwOA==", "bodyText": "@chia7712 : Thanks for the reply. That makes sense. Perhaps we can adjust the comment to make it clear that the hard bounce is for the client.", "url": "https://github.com/apache/kafka/pull/8981#discussion_r451224908", "createdAt": "2020-07-08T01:04:29Z", "author": {"login": "junrao"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -47,7 +47,10 @@ def __init__(self, test_context):\n         self.num_output_partitions = 3\n         self.num_seed_messages = 100000\n         self.transaction_size = 750\n-        self.transaction_timeout = 40000\n+        # This is reducing the transaction cleanup interval.\n+        # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+        # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+        self.transaction_timeout = 5000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTM3NA=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODczMQ==", "bodyText": "we can adjust the comment to make it clear that the hard bounce is for the client.\n\ndone", "url": "https://github.com/apache/kafka/pull/8981#discussion_r451898731", "createdAt": "2020-07-09T00:35:11Z", "author": {"login": "chia7712"}, "path": "tests/kafkatest/tests/core/transactions_test.py", "diffHunk": "@@ -47,7 +47,10 @@ def __init__(self, test_context):\n         self.num_output_partitions = 3\n         self.num_seed_messages = 100000\n         self.transaction_size = 750\n-        self.transaction_timeout = 40000\n+        # This is reducing the transaction cleanup interval.\n+        # IN hard_bounce mode, transaction is broke ungracefully. Hence, it produces unstable\n+        # offsets which obstructs TransactionalMessageCopier from receiving position of group.\n+        self.transaction_timeout = 5000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTM3NA=="}, "originalCommit": null, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2172, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}