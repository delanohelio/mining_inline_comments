{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjA0MzM0", "number": 8063, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozODoxN1rODeKImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozODoxN1rODeKImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQ5OTEyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozODoxN1rOFnLCWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0ODo0NFrOFnLRmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTYwOQ==", "bodyText": "Did you mean to remove this println?", "url": "https://github.com/apache/kafka/pull/8063#discussion_r376619609", "createdAt": "2020-02-07T21:38:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2935,29 +2935,32 @@ public void shouldSupportTriggerMaterializedWithKTableFromKStream() {\n             inputTopic.pipeInput(\"C\", \"yellow\", 15L);\n             inputTopic.pipeInput(\"D\", \"green\", 11L);\n \n-            final Map<String, Integer> expectedStore = new HashMap<>();\n-            expectedStore.putIfAbsent(\"A\", 1);\n-            expectedStore.putIfAbsent(\"B\", 6);\n-            expectedStore.putIfAbsent(\"C\", 24);\n-            expectedStore.putIfAbsent(\"D\", 6);\n+            final Map<String, String> expectedStore = new HashMap<>();\n+            expectedStore.putIfAbsent(\"A\", \"1\");\n+            expectedStore.putIfAbsent(\"B\", \"6\");\n+            expectedStore.putIfAbsent(\"C\", \"24\");\n+            expectedStore.putIfAbsent(\"D\", \"6\");\n \n             assertEquals(expectedStore, asMap(store));\n \n             assertEquals(\n                 asList(\n-                    new TestRecord<>(\"A\", 6, Instant.ofEpochMilli(10)),\n-                    new TestRecord<>(\"B\", 6, Instant.ofEpochMilli(9)),\n-                    new TestRecord<>(\"A\", 1, Instant.ofEpochMilli(12)),\n-                    new TestRecord<>(\"C\", 24, Instant.ofEpochMilli(15)),\n-                    new TestRecord<>(\"D\", 6, Instant.ofEpochMilli(11))),\n+                    new TestRecord<>(\"A\", \"6\", Instant.ofEpochMilli(10)),\n+                    new TestRecord<>(\"B\", \"6\", Instant.ofEpochMilli(9)),\n+                    new TestRecord<>(\"A\", \"1\", Instant.ofEpochMilli(12)),\n+                    new TestRecord<>(\"C\", \"24\", Instant.ofEpochMilli(15)),\n+                    new TestRecord<>(\"D\", \"6\", Instant.ofEpochMilli(11))),\n                 outputTopic.readRecordsToList());\n \n         }\n     }\n \n     private static Map<String, String> asMap(final KeyValueStore<String, String> store) {\n         final HashMap<String, String> result = new HashMap<>();\n-        store.all().forEachRemaining(kv -> result.put(kv.key, kv.value));\n+        store.all().forEachRemaining(kv -> {\n+            System.out.println(kv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12724dc650bd53fea3f985fc819cf93a4012ffcc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMzUxMg==", "bodyText": "Ah yes! thanks.", "url": "https://github.com/apache/kafka/pull/8063#discussion_r376623512", "createdAt": "2020-02-07T21:48:44Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2935,29 +2935,32 @@ public void shouldSupportTriggerMaterializedWithKTableFromKStream() {\n             inputTopic.pipeInput(\"C\", \"yellow\", 15L);\n             inputTopic.pipeInput(\"D\", \"green\", 11L);\n \n-            final Map<String, Integer> expectedStore = new HashMap<>();\n-            expectedStore.putIfAbsent(\"A\", 1);\n-            expectedStore.putIfAbsent(\"B\", 6);\n-            expectedStore.putIfAbsent(\"C\", 24);\n-            expectedStore.putIfAbsent(\"D\", 6);\n+            final Map<String, String> expectedStore = new HashMap<>();\n+            expectedStore.putIfAbsent(\"A\", \"1\");\n+            expectedStore.putIfAbsent(\"B\", \"6\");\n+            expectedStore.putIfAbsent(\"C\", \"24\");\n+            expectedStore.putIfAbsent(\"D\", \"6\");\n \n             assertEquals(expectedStore, asMap(store));\n \n             assertEquals(\n                 asList(\n-                    new TestRecord<>(\"A\", 6, Instant.ofEpochMilli(10)),\n-                    new TestRecord<>(\"B\", 6, Instant.ofEpochMilli(9)),\n-                    new TestRecord<>(\"A\", 1, Instant.ofEpochMilli(12)),\n-                    new TestRecord<>(\"C\", 24, Instant.ofEpochMilli(15)),\n-                    new TestRecord<>(\"D\", 6, Instant.ofEpochMilli(11))),\n+                    new TestRecord<>(\"A\", \"6\", Instant.ofEpochMilli(10)),\n+                    new TestRecord<>(\"B\", \"6\", Instant.ofEpochMilli(9)),\n+                    new TestRecord<>(\"A\", \"1\", Instant.ofEpochMilli(12)),\n+                    new TestRecord<>(\"C\", \"24\", Instant.ofEpochMilli(15)),\n+                    new TestRecord<>(\"D\", \"6\", Instant.ofEpochMilli(11))),\n                 outputTopic.readRecordsToList());\n \n         }\n     }\n \n     private static Map<String, String> asMap(final KeyValueStore<String, String> store) {\n         final HashMap<String, String> result = new HashMap<>();\n-        store.all().forEachRemaining(kv -> result.put(kv.key, kv.value));\n+        store.all().forEachRemaining(kv -> {\n+            System.out.println(kv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTYwOQ=="}, "originalCommit": {"oid": "12724dc650bd53fea3f985fc819cf93a4012ffcc"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4235, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}