{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDUxNzU0", "number": 8923, "title": "KAFKA-6435: KIP-623 Add internal topics option to streamResetter", "bodyText": "This allows users to specify which internal-topics the tool will attempt to delete instead of inferring it.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-24T20:04:27Z", "url": "https://github.com/apache/kafka/pull/8923", "merged": true, "mergeCommit": {"oid": "0ea440b2af07fe0d6465f76afc948b28509606b5"}, "closed": true, "closedAt": "2021-04-27T22:44:53Z", "author": {"login": "JoelWee"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvVdWLgBqjM0ODg4Njk3MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeRWAdjgFqTY0NjQzNDU3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTY1Nzk4", "url": "https://github.com/apache/kafka/pull/8923#pullrequestreview-462165798", "createdAt": "2020-08-06T03:41:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo0MToyM1rOG8iIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyMDoyMFrOG8iuZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNzA1Mw==", "bodyText": "We could refactor out a helper function here.", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466127053", "createdAt": "2020-08-06T03:41:23Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -646,22 +655,68 @@ private boolean isIntermediateTopic(final String topic) {\n         return options.valuesOf(intermediateTopicsOption).contains(topic);\n     }\n \n-    private void maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n-        System.out.println(\"Deleting all internal/auto-created topics for application \" + options.valueOf(applicationIdOption));\n+    private int maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        if (!options.valuesOf(internalTopicsOption).isEmpty()) {\n+            return maybeDeleteSpecifiedInternalTopics(adminClient, dryRun);\n+        } else {\n+            return maybeDeleteInferredInternalTopics(adminClient, dryRun);\n+        }\n+    }\n+\n+    private int maybeDeleteSpecifiedInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        final List<String> internalTopics = options.valuesOf(internalTopicsOption);\n+        int topicNotFound = EXIT_CODE_SUCCESS;\n+\n+        final List<String> topicsToDelete = new ArrayList<>();\n+        final List<String> notFoundInternalTopics = new ArrayList<>();\n+\n+        System.out.println(\"Deleting specified internal/auto-created topics \" + internalTopics);\n+        for (final String topic : internalTopics) {\n+            if (allTopics.contains(topic) && isInferredInternalTopic(topic)) {\n+                topicsToDelete.add(topic);\n+            } else {\n+                notFoundInternalTopics.add(topic);\n+            }\n+        }\n+\n+        if (!notFoundInternalTopics.isEmpty()) {\n+            System.out.println(\"Following topics were not detected as internal, skipping them\");\n+            for (final String topic : notFoundInternalTopics) {\n+                System.out.println(\"Topic: \" + topic);\n+            }\n+            topicNotFound = EXIT_CODE_ERROR;\n+        }\n+\n+        System.out.println(\"Following internal topics will be deleted for application \" + options.valueOf(applicationIdOption));\n+        for (final String topic : topicsToDelete) {\n+            System.out.println(\"Topic: \" + topic);\n+        }\n+\n+        if (!dryRun) {\n+            doDelete(topicsToDelete, adminClient);\n+        }\n+        System.out.println(\"Done.\");\n+        return topicNotFound;\n+    }\n+\n+    private int maybeDeleteInferredInternalTopics(final Admin adminClient, final boolean dryRun) {\n         final List<String> topicsToDelete = new ArrayList<>();\n         for (final String listing : allTopics) {\n-            if (isInternalTopic(listing)) {\n-                if (!dryRun) {\n-                    topicsToDelete.add(listing);\n-                } else {\n-                    System.out.println(\"Topic: \" + listing);\n-                }\n+            if (isInferredInternalTopic(listing)) {\n+                topicsToDelete.add(listing);\n             }\n         }\n+\n+        System.out.println(\"Following inferred internal/auto-created topics will be deleted for application \" + options.valueOf(applicationIdOption));\n+        for (final String topic : topicsToDelete) {\n+            System.out.println(\"Topic: \" + topic);\n+        }\n+\n         if (!dryRun) {\n             doDelete(topicsToDelete, adminClient);\n         }\n         System.out.println(\"Done.\");\n+        return EXIT_CODE_SUCCESS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTk3OA==", "bodyText": "for html changes, it is recommended to include a screenshot of the built website. Please refer to https://cwiki.apache.org/confluence/display/KAFKA/Setup+Kafka+Website+on+Local+Apache+Server", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466129978", "createdAt": "2020-08-06T03:53:04Z", "author": {"login": "abbccdda"}, "path": "docs/streams/developer-guide/app-reset-tool.html", "diffHunk": "@@ -77,6 +77,7 @@\n         <div class=\"section\" id=\"step-1-run-the-application-reset-tool\">\n             <h2>Step 1: Run the application reset tool<a class=\"headerlink\" href=\"#step-1-run-the-application-reset-tool\" title=\"Permalink to this headline\"></a></h2>\n             <p>Invoke the application reset tool from the command line</p>\n+            <p>Warning! This tool makes irreversible changes to your application. It is strongly recommended that you run this once with --dry-run to preview your changes before making them.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMzg5MA==", "bodyText": "could use assertFalse", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466133890", "createdAt": "2020-08-06T04:08:39Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -262,6 +263,52 @@ public void shouldNotAllowToResetWhenIntermediateTopicAbsent() throws Exception\n         Assert.assertEquals(1, exitCode);\n     }\n \n+    void shouldNotAllowToResetWhenSpecifiedInternalTopicAbsent() throws Exception {\n+        appID = testId + \"-not-reset-without-intermediate-topic\";\n+        final String[] parameters = new String[]{\n+            \"--application-id\", appID,\n+            \"--bootstrap-servers\", cluster.bootstrapServers(),\n+            \"--internal-topics\", NON_EXISTING_TOPIC,\n+            \"--execute\"\n+        };\n+        final Properties cleanUpConfig = new Properties();\n+        cleanUpConfig.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 100);\n+        cleanUpConfig.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, \"\" + CLEANUP_CONSUMER_TIMEOUT);\n+\n+        final int exitCode = new StreamsResetter().run(parameters, cleanUpConfig);\n+        Assert.assertEquals(1, exitCode);\n+    }\n+\n+    void testResetWhenInternalTopicsAreSpecified() throws Exception {\n+        final boolean useRepartitioned = true;\n+\n+        appID = testId + \"-with-internal-topics-option\";\n+        streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n+\n+        // RUN\n+        streams = new KafkaStreams(setupTopologyWithIntermediateTopic(useRepartitioned, OUTPUT_TOPIC_2), streamsConfig);\n+        streams.start();\n+        IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(resultConsumerConfig, OUTPUT_TOPIC, 10);\n+\n+        streams.close();\n+        waitForEmptyConsumerGroup(adminClient, appID, TIMEOUT_MULTIPLIER * STREAMS_CONSUMER_TIMEOUT);\n+\n+        // RESET\n+        streams.cleanUp();\n+\n+        final List<String> internalTopics = cluster.getAllTopicsInCluster().stream()\n+                .filter(topic -> topic.startsWith(appID + \"-\"))\n+                .collect(Collectors.toList());\n+        final boolean cleanResult = tryCleanGlobal(!useRepartitioned,\n+                \"--internal-topics\",\n+                String.join(\",\", internalTopics.subList(1, internalTopics.size())) + \",\" + OUTPUT_TOPIC);\n+        Assert.assertEquals(false, cleanResult); // Reset will give error code since output topic is not a valid internal topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDAyOA==", "bodyText": "Could just use false", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466134028", "createdAt": "2020-08-06T04:09:19Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -262,6 +263,52 @@ public void shouldNotAllowToResetWhenIntermediateTopicAbsent() throws Exception\n         Assert.assertEquals(1, exitCode);\n     }\n \n+    void shouldNotAllowToResetWhenSpecifiedInternalTopicAbsent() throws Exception {\n+        appID = testId + \"-not-reset-without-intermediate-topic\";\n+        final String[] parameters = new String[]{\n+            \"--application-id\", appID,\n+            \"--bootstrap-servers\", cluster.bootstrapServers(),\n+            \"--internal-topics\", NON_EXISTING_TOPIC,\n+            \"--execute\"\n+        };\n+        final Properties cleanUpConfig = new Properties();\n+        cleanUpConfig.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 100);\n+        cleanUpConfig.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, \"\" + CLEANUP_CONSUMER_TIMEOUT);\n+\n+        final int exitCode = new StreamsResetter().run(parameters, cleanUpConfig);\n+        Assert.assertEquals(1, exitCode);\n+    }\n+\n+    void testResetWhenInternalTopicsAreSpecified() throws Exception {\n+        final boolean useRepartitioned = true;\n+\n+        appID = testId + \"-with-internal-topics-option\";\n+        streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n+\n+        // RUN\n+        streams = new KafkaStreams(setupTopologyWithIntermediateTopic(useRepartitioned, OUTPUT_TOPIC_2), streamsConfig);\n+        streams.start();\n+        IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(resultConsumerConfig, OUTPUT_TOPIC, 10);\n+\n+        streams.close();\n+        waitForEmptyConsumerGroup(adminClient, appID, TIMEOUT_MULTIPLIER * STREAMS_CONSUMER_TIMEOUT);\n+\n+        // RESET\n+        streams.cleanUp();\n+\n+        final List<String> internalTopics = cluster.getAllTopicsInCluster().stream()\n+                .filter(topic -> topic.startsWith(appID + \"-\"))\n+                .collect(Collectors.toList());\n+        final boolean cleanResult = tryCleanGlobal(!useRepartitioned,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNTI4NA==", "bodyText": "Could we print all topics in one line, instead of multiple?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466135284", "createdAt": "2020-08-06T04:14:23Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -646,22 +655,68 @@ private boolean isIntermediateTopic(final String topic) {\n         return options.valuesOf(intermediateTopicsOption).contains(topic);\n     }\n \n-    private void maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n-        System.out.println(\"Deleting all internal/auto-created topics for application \" + options.valueOf(applicationIdOption));\n+    private int maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        if (!options.valuesOf(internalTopicsOption).isEmpty()) {\n+            return maybeDeleteSpecifiedInternalTopics(adminClient, dryRun);\n+        } else {\n+            return maybeDeleteInferredInternalTopics(adminClient, dryRun);\n+        }\n+    }\n+\n+    private int maybeDeleteSpecifiedInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        final List<String> internalTopics = options.valuesOf(internalTopicsOption);\n+        int topicNotFound = EXIT_CODE_SUCCESS;\n+\n+        final List<String> topicsToDelete = new ArrayList<>();\n+        final List<String> notFoundInternalTopics = new ArrayList<>();\n+\n+        System.out.println(\"Deleting specified internal/auto-created topics \" + internalTopics);\n+        for (final String topic : internalTopics) {\n+            if (allTopics.contains(topic) && isInferredInternalTopic(topic)) {\n+                topicsToDelete.add(topic);\n+            } else {\n+                notFoundInternalTopics.add(topic);\n+            }\n+        }\n+\n+        if (!notFoundInternalTopics.isEmpty()) {\n+            System.out.println(\"Following topics were not detected as internal, skipping them\");\n+            for (final String topic : notFoundInternalTopics) {\n+                System.out.println(\"Topic: \" + topic);\n+            }\n+            topicNotFound = EXIT_CODE_ERROR;\n+        }\n+\n+        System.out.println(\"Following internal topics will be deleted for application \" + options.valueOf(applicationIdOption));\n+        for (final String topic : topicsToDelete) {\n+            System.out.println(\"Topic: \" + topic);\n+        }\n+\n+        if (!dryRun) {\n+            doDelete(topicsToDelete, adminClient);\n+        }\n+        System.out.println(\"Done.\");\n+        return topicNotFound;\n+    }\n+\n+    private int maybeDeleteInferredInternalTopics(final Admin adminClient, final boolean dryRun) {\n         final List<String> topicsToDelete = new ArrayList<>();\n         for (final String listing : allTopics) {\n-            if (isInternalTopic(listing)) {\n-                if (!dryRun) {\n-                    topicsToDelete.add(listing);\n-                } else {\n-                    System.out.println(\"Topic: \" + listing);\n-                }\n+            if (isInferredInternalTopic(listing)) {\n+                topicsToDelete.add(listing);\n             }\n         }\n+\n+        System.out.println(\"Following inferred internal/auto-created topics will be deleted for application \" + options.valueOf(applicationIdOption));\n+        for (final String topic : topicsToDelete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNjI1NA==", "bodyText": "Should we throw exception here to stop the run or just skip the not found topics?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466136254", "createdAt": "2020-08-06T04:18:31Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -646,22 +655,68 @@ private boolean isIntermediateTopic(final String topic) {\n         return options.valuesOf(intermediateTopicsOption).contains(topic);\n     }\n \n-    private void maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n-        System.out.println(\"Deleting all internal/auto-created topics for application \" + options.valueOf(applicationIdOption));\n+    private int maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        if (!options.valuesOf(internalTopicsOption).isEmpty()) {\n+            return maybeDeleteSpecifiedInternalTopics(adminClient, dryRun);\n+        } else {\n+            return maybeDeleteInferredInternalTopics(adminClient, dryRun);\n+        }\n+    }\n+\n+    private int maybeDeleteSpecifiedInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        final List<String> internalTopics = options.valuesOf(internalTopicsOption);\n+        int topicNotFound = EXIT_CODE_SUCCESS;\n+\n+        final List<String> topicsToDelete = new ArrayList<>();\n+        final List<String> notFoundInternalTopics = new ArrayList<>();\n+\n+        System.out.println(\"Deleting specified internal/auto-created topics \" + internalTopics);\n+        for (final String topic : internalTopics) {\n+            if (allTopics.contains(topic) && isInferredInternalTopic(topic)) {\n+                topicsToDelete.add(topic);\n+            } else {\n+                notFoundInternalTopics.add(topic);\n+            }\n+        }\n+\n+        if (!notFoundInternalTopics.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNjY3Nw==", "bodyText": "should we do check both exit codes and decide whether to return 0 or 1?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r466136677", "createdAt": "2020-08-06T04:20:20Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -167,7 +171,7 @@ public int run(final String[] args,\n             final HashMap<Object, Object> consumerConfig = new HashMap<>(config);\n             consumerConfig.putAll(properties);\n             exitCode = maybeResetInputAndSeekToEndIntermediateTopicOffsets(consumerConfig, dryRun);\n-            maybeDeleteInternalTopics(adminClient, dryRun);\n+            exitCode |= maybeDeleteInternalTopics(adminClient, dryRun);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTY4MTAy", "url": "https://github.com/apache/kafka/pull/8923#pullrequestreview-436968102", "createdAt": "2020-06-24T20:07:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoyMzoxNFrOG_9l9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNjoyNDo1MVrOG_9ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMjYxMw==", "bodyText": "\ud83d\udc4d  here's a screenshot for this portion:", "url": "https://github.com/apache/kafka/pull/8923#discussion_r469722613", "createdAt": "2020-08-13T06:23:14Z", "author": {"login": "JoelWee"}, "path": "docs/streams/developer-guide/app-reset-tool.html", "diffHunk": "@@ -77,6 +77,7 @@\n         <div class=\"section\" id=\"step-1-run-the-application-reset-tool\">\n             <h2>Step 1: Run the application reset tool<a class=\"headerlink\" href=\"#step-1-run-the-application-reset-tool\" title=\"Permalink to this headline\"></a></h2>\n             <p>Invoke the application reset tool from the command line</p>\n+            <p>Warning! This tool makes irreversible changes to your application. It is strongly recommended that you run this once with --dry-run to preview your changes before making them.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTk3OA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMjYzOQ==", "bodyText": "screenshot of this portion:", "url": "https://github.com/apache/kafka/pull/8923#discussion_r469722639", "createdAt": "2020-08-13T06:23:19Z", "author": {"login": "JoelWee"}, "path": "docs/streams/developer-guide/app-reset-tool.html", "diffHunk": "@@ -106,6 +107,11 @@ <h2>Step 1: Run the application reset tool<a class=\"headerlink\" href=\"#step-1-ru\n                                         topics <span class=\"o\">(</span>topics used in the through<span class=\"o\">()</span>\n                                         method<span class=\"o\">)</span>. For these topics, the tool\n                                         will skip to the end.\n+--internal-topics &lt;String: list&gt;      Comma-separated list of internal topics\n+                                        to delete. Must be a subset of the\n+                                        internal topics marked for deletion by\n+                                        the default behaviour (do a dry-run without\n+                                        this option to view these topics).", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMzI1MQ==", "bodyText": "Yep. Currently it returns 1 if either exitCode is 1, and 0 otherwise. Or should we do something else?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r469723251", "createdAt": "2020-08-13T06:24:51Z", "author": {"login": "JoelWee"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -167,7 +171,7 @@ public int run(final String[] args,\n             final HashMap<Object, Object> consumerConfig = new HashMap<>(config);\n             consumerConfig.putAll(properties);\n             exitCode = maybeResetInputAndSeekToEndIntermediateTopicOffsets(consumerConfig, dryRun);\n-            maybeDeleteInternalTopics(adminClient, dryRun);\n+            exitCode |= maybeDeleteInternalTopics(adminClient, dryRun);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNjY3Nw=="}, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "265838480db8e0fdc1f6c25c5829dc2bfe12414e", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/265838480db8e0fdc1f6c25c5829dc2bfe12414e", "committedDate": "2020-08-16T08:22:20Z", "message": "KAFKA-6435: Add internal topics option to streamResetter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2ODIwOTkz", "url": "https://github.com/apache/kafka/pull/8923#pullrequestreview-636820993", "createdAt": "2021-04-15T15:22:26Z", "commit": {"oid": "265838480db8e0fdc1f6c25c5829dc2bfe12414e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQxNToyMjoyNlrOJJtxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNVQxNTozMjowNVrOJJuQnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NjgwMg==", "bodyText": "unnecessary whitespace change", "url": "https://github.com/apache/kafka/pull/8923#discussion_r614166802", "createdAt": "2021-04-15T15:22:26Z", "author": {"login": "wcarlson5"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -248,7 +257,7 @@ private void parseArguments(final String[] args) {\n             .ofType(String.class)\n             .describedAs(\"file name\");\n         forceOption = optionParser.accepts(\"force\", \"Force the removal of members of the consumer group (intended to remove stopped members if a long session timeout was used). \" +\n-                \"Make sure to shut down all stream applications when this option is specified to avoid unexpected rebalances.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265838480db8e0fdc1f6c25c5829dc2bfe12414e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NzA0MA==", "bodyText": "line is too long", "url": "https://github.com/apache/kafka/pull/8923#discussion_r614167040", "createdAt": "2021-04-15T15:22:45Z", "author": {"login": "wcarlson5"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -225,6 +229,11 @@ private void parseArguments(final String[] args) {\n             .ofType(String.class)\n             .withValuesSeparatedBy(',')\n             .describedAs(\"list\");\n+        internalTopicsOption = optionParser.accepts(\"internal-topics\", \"Comma-separated list of internal topics to delete. Must be a subset of the internal topics marked for deletion by the default behaviour (do a dry-run without this option to view these topics).\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265838480db8e0fdc1f6c25c5829dc2bfe12414e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE3NDg3Ng==", "bodyText": "something like inferredInternalTopics.containsAll(specifiedInternalTopics) might be easier to understand here", "url": "https://github.com/apache/kafka/pull/8923#discussion_r614174876", "createdAt": "2021-04-15T15:32:05Z", "author": {"login": "wcarlson5"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -642,22 +651,38 @@ private boolean isIntermediateTopic(final String topic) {\n         return options.valuesOf(intermediateTopicsOption).contains(topic);\n     }\n \n-    private void maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n-        System.out.println(\"Deleting all internal/auto-created topics for application \" + options.valueOf(applicationIdOption));\n-        final List<String> topicsToDelete = new ArrayList<>();\n-        for (final String listing : allTopics) {\n-            if (isInternalTopic(listing)) {\n-                if (!dryRun) {\n-                    topicsToDelete.add(listing);\n-                } else {\n-                    System.out.println(\"Topic: \" + listing);\n-                }\n+    private int maybeDeleteInternalTopics(final Admin adminClient, final boolean dryRun) {\n+        final List<String> inferredInternalTopics = allTopics.stream()\n+                .filter(this::isInferredInternalTopic)\n+                .collect(Collectors.toList());\n+        final List<String> specifiedInternalTopics = options.valuesOf(internalTopicsOption);\n+        final List<String> topicsToDelete;\n+\n+        if (!specifiedInternalTopics.isEmpty()) {\n+            final List<String> notFoundInternalTopics = specifiedInternalTopics.stream()\n+                    .filter(topic -> !inferredInternalTopics.contains(topic))\n+                    .collect(Collectors.toList());\n+            if (!notFoundInternalTopics.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265838480db8e0fdc1f6c25c5829dc2bfe12414e"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd03999cf1dd5631ccb43934b3f2a6379b5b402d", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/dd03999cf1dd5631ccb43934b3f2a6379b5b402d", "committedDate": "2021-04-22T09:59:26Z", "message": "KAFK-6435: Tidy up code"}, "afterCommit": {"oid": "f0ec0b82f87b9546eb5b28588d6820cfb7eab3a6", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/f0ec0b82f87b9546eb5b28588d6820cfb7eab3a6", "committedDate": "2021-04-22T10:44:53Z", "message": "KAFKA-6435: Add internal topics option to streamResetter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/a673068e75e78c714bf6effd0ea2f8d87b8a59f6", "committedDate": "2021-04-22T11:06:26Z", "message": "KAFKA-6435: Add internal topics option to streamResetter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0ec0b82f87b9546eb5b28588d6820cfb7eab3a6", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/f0ec0b82f87b9546eb5b28588d6820cfb7eab3a6", "committedDate": "2021-04-22T10:44:53Z", "message": "KAFKA-6435: Add internal topics option to streamResetter"}, "afterCommit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/a673068e75e78c714bf6effd0ea2f8d87b8a59f6", "committedDate": "2021-04-22T11:06:26Z", "message": "KAFKA-6435: Add internal topics option to streamResetter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ1MTAwNDkx", "url": "https://github.com/apache/kafka/pull/8923#pullrequestreview-645100491", "createdAt": "2021-04-26T20:45:08Z", "commit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMDo0NTowOFrOJP4mhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQyMTowNDo0OFrOJP5YOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYzNTc4Mw==", "bodyText": "You don't need to repeat this line, it's just printing an example of running the app reset tool for the line above (Invoke the application reset tool from the command line)", "url": "https://github.com/apache/kafka/pull/8923#discussion_r620635783", "createdAt": "2021-04-26T20:45:08Z", "author": {"login": "ableegoldman"}, "path": "docs/streams/developer-guide/app-reset-tool.html", "diffHunk": "@@ -78,6 +78,9 @@\n             <h2>Step 1: Run the application reset tool<a class=\"headerlink\" href=\"#step-1-run-the-application-reset-tool\" title=\"Permalink to this headline\"></a></h2>\n             <p>Invoke the application reset tool from the command line</p>\n             <div class=\"highlight-bash\"><div class=\"highlight\"><pre><span></span><code>&lt;path-to-kafka&gt;/bin/kafka-streams-application-reset</code></pre></div>\n+            <p>Warning! This tool makes irreversible changes to your application. It is strongly recommended that you run this once with <code class=\"docutils literal\"><span class=\"pre\">--dry-run</span></code> to preview your changes before making them.</p>\n+            <div class=\"highlight-bash\"><div class=\"highlight\"><pre><span></span>&lt;path-to-kafka&gt;/bin/kafka-streams-application-reset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDYzOTQ4Nw==", "bodyText": "nit: we should also filter for internal topics specifically, like what's done in StreamsResetter#matchesInternalTopicFormat. Actually you can probably just invoke that method directly for the filter here (it can be made static if necessary)", "url": "https://github.com/apache/kafka/pull/8923#discussion_r620639487", "createdAt": "2021-04-26T20:50:51Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -205,6 +206,34 @@ private void add10InputElements() {\n         }\n     }\n \n+    @Test\n+    public void testResetWhenInternalTopicsAreSpecified() throws Exception {\n+        final String appID = IntegrationTestUtils.safeUniqueTestName(getClass(), testName);\n+        streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n+\n+        // RUN\n+        streams = new KafkaStreams(setupTopologyWithIntermediateTopic(true, OUTPUT_TOPIC_2), streamsConfig);\n+        streams.start();\n+        IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(resultConsumerConfig, OUTPUT_TOPIC, 10);\n+\n+        streams.close();\n+        waitForEmptyConsumerGroup(adminClient, appID, TIMEOUT_MULTIPLIER * STREAMS_CONSUMER_TIMEOUT);\n+\n+        // RESET\n+        streams.cleanUp();\n+\n+        final List<String> internalTopics = cluster.getAllTopicsInCluster().stream()\n+                .filter(topic -> topic.startsWith(appID + \"-\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY0NTg2NQ==", "bodyText": "Just wondering, why put this test here instead of in AbstractResetIntegrationTest?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r620645865", "createdAt": "2021-04-26T21:00:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationTest.java", "diffHunk": "@@ -151,6 +151,22 @@ public void shouldNotAllowToResetWhenIntermediateTopicAbsent() {\n         Assert.assertEquals(1, exitCode);\n     }\n \n+    @Test\n+    public void shouldNotAllowToResetWhenSpecifiedInternalTopicAbsent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY0ODUwNw==", "bodyText": "Also, can we add a test like this but for the case where the topic does exist but just isn't a subset of inferred internal topics?", "url": "https://github.com/apache/kafka/pull/8923#discussion_r620648507", "createdAt": "2021-04-26T21:04:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationTest.java", "diffHunk": "@@ -151,6 +151,22 @@ public void shouldNotAllowToResetWhenIntermediateTopicAbsent() {\n         Assert.assertEquals(1, exitCode);\n     }\n \n+    @Test\n+    public void shouldNotAllowToResetWhenSpecifiedInternalTopicAbsent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDY0NTg2NQ=="}, "originalCommit": {"oid": "a673068e75e78c714bf6effd0ea2f8d87b8a59f6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7479f201610e7e5d41a5e246a80a94aa9cbf7737", "author": {"user": {"login": "JoelWee", "name": null}}, "url": "https://github.com/apache/kafka/commit/7479f201610e7e5d41a5e246a80a94aa9cbf7737", "committedDate": "2021-04-27T19:27:58Z", "message": "KAFKA-6435: Clean up code and improve tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2NDM0NTc4", "url": "https://github.com/apache/kafka/pull/8923#pullrequestreview-646434578", "createdAt": "2021-04-27T22:43:31Z", "commit": {"oid": "7479f201610e7e5d41a5e246a80a94aa9cbf7737"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 723, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}