{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzY1MTUy", "number": 7993, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzo1Mjo1MlrODbOi8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0Mjo0NlrODbdVYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODc2NDY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzo1Mjo1MlrOFiltVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzo1Mjo1MlrOFiltVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxMzcxNw==", "bodyText": "I don't think the type adds much for cases where a literal is used.", "url": "https://github.com/apache/kafka/pull/7993#discussion_r371813717", "createdAt": "2020-01-28T13:52:52Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -76,11 +76,11 @@ object RequestChannel extends Logging {\n                 metrics: RequestChannel.Metrics) extends BaseRequest {\n     // These need to be volatile because the readers are in the network thread and the writers are in the request\n     // handler threads or the purgatory threads\n-    @volatile var requestDequeueTimeNanos = -1L\n-    @volatile var apiLocalCompleteTimeNanos = -1L\n-    @volatile var responseCompleteTimeNanos = -1L\n-    @volatile var responseDequeueTimeNanos = -1L\n-    @volatile var apiRemoteCompleteTimeNanos = -1L\n+    @volatile var requestDequeueTimeNanos: Long = -1L\n+    @volatile var apiLocalCompleteTimeNanos: Long = -1L\n+    @volatile var responseCompleteTimeNanos: Long = -1L\n+    @volatile var responseDequeueTimeNanos: Long = -1L\n+    @volatile var apiRemoteCompleteTimeNanos: Long = -1L", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE4NzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/metrics/KafkaMetricsConfig.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0Mjo0N1rOFi9L0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0Mjo0N1rOFi9L0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODM1NA==", "bodyText": "The Scala 2.13 build failed due to this change. To make it work, you need to add import scala.collection.Seq.", "url": "https://github.com/apache/kafka/pull/7993#discussion_r372198354", "createdAt": "2020-01-29T05:42:47Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/metrics/KafkaMetricsConfig.scala", "diffHunk": "@@ -29,12 +29,12 @@ class KafkaMetricsConfig(props: VerifiableProperties) {\n    * Comma-separated list of reporter types. These classes should be on the\n    * classpath and will be instantiated at run-time.\n    */\n-  val reporters = CoreUtils.parseCsvList(props.getString(KafkaConfig.KafkaMetricsReporterClassesProp,\n+  val reporters: Seq[String] = CoreUtils.parseCsvList(props.getString(KafkaConfig.KafkaMetricsReporterClassesProp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4405, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}