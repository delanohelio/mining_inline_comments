{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjU3Njg4", "number": 8319, "title": "KAFKA-9734: Fix IllegalState in Streams transit to standby", "bodyText": "Consolidate ChangelogReader state management inside of StreamThread to avoid having to reason about all execution paths in both StreamThread and TaskManager.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-19T21:58:55Z", "url": "https://github.com/apache/kafka/pull/8319", "merged": true, "mergeCommit": {"oid": "960b2162903dd7d07f20c162aa536b1e67b6477e"}, "closed": true, "closedAt": "2020-03-20T15:17:52Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPOWALgH2gAyMzkxMjU3Njg4OjM5NzgzNDE0YTEyZGNmY2VjOTZlNjIxMDkyODY3OWEzZDdkMjM5YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPXobJgH2gAyMzkxMjU3Njg4OjY1ZTZiNmFlZDAxNDM1YWVmMWJjYWM1MzRlOTk5MmI5ZTk1NzlmMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39783414a12dcfcec96e6210928679a3d7d239ac", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/39783414a12dcfcec96e6210928679a3d7d239ac", "committedDate": "2020-03-19T16:17:39Z", "message": "KAFKA-9734: Fix IllegalState in Streams transit to standby"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab51c45b7d6895a34c7822f5d201d368c3d547e6", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/ab51c45b7d6895a34c7822f5d201d368c3d547e6", "committedDate": "2020-03-19T21:09:58Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "committedDate": "2020-03-19T21:57:13Z", "message": "remove unnecessary expectation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTIzNjg2", "url": "https://github.com/apache/kafka/pull/8319#pullrequestreview-378123686", "createdAt": "2020-03-19T22:00:10Z", "commit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjowMDoxMFrOF5B3CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxNTowNFrOF5COYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzYyNQ==", "bodyText": "I moved this inside the block because we should only need to do it if we are transitioning from restoring standbys. I wanted to make the idempotent call slightly more efficient, since we now call this method every time in StreamThread#runOnce.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395343625", "createdAt": "2020-03-19T22:00:10Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -279,13 +279,13 @@ private boolean hasRestoredToEnd(final ChangelogMetadata metadata) {\n     // NOTE: even if the newly created tasks do not need any restoring, we still first transit to this state and then\n     // immediately transit back -- there's no overhead of transiting back and forth but simplifies the logic a lot.\n     @Override\n-    public void transitToRestoreActive() {\n+    public void enforceRestoreActive() {\n         if (state != ChangelogReaderState.ACTIVE_RESTORING) {\n             log.debug(\"Transiting to restore active tasks: {}\", changelogs);\n-        }\n \n-        // pause all partitions that are for standby tasks from the restore consumer\n-        pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());\n+            // pause all partitions that are for standby tasks from the restore consumer\n+            pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDA3Nw==", "bodyText": "This might be a bit redundant, but it wasted a bit of my time to find out that if it wasn't in active_restoring, it must have been in restoring standbys because that's the only other state. I figure it doesn't hurt to just be explicit.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344077", "createdAt": "2020-03-19T22:01:14Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -300,8 +300,10 @@ public void transitToRestoreActive() {\n     @Override\n     public void transitToUpdateStandby() {\n         if (state != ChangelogReaderState.ACTIVE_RESTORING) {\n-            throw new IllegalStateException(\"The changelog reader is not restoring active tasks while trying to \" +\n-                \"transit to update standby tasks: \" + changelogs);\n+            throw new IllegalStateException(\n+                \"The changelog reader is not restoring active tasks (is \" + state + \") while trying to \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDM2NQ==", "bodyText": "Rearranged this so we can include the exception itself. The stacktrace is useful for tracking down the reason for the exception.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344365", "createdAt": "2020-03-19T22:01:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -501,14 +501,14 @@ private void runLoop() {\n                     mainConsumer.enforceRebalance();\n                 }\n             } catch (final TaskCorruptedException e) {\n-                log.warn(\"Detected the states of tasks {} are corrupted. \" +\n-                    \"Will close the task as dirty and re-create and bootstrap from scratch.\", e.corruptedTaskWithChangelogs());\n+                log.warn(\"Detected the states of tasks \" + e.corruptedTaskWithChangelogs() + \" are corrupted. \" +\n+                             \"Will close the task as dirty and re-create and bootstrap from scratch.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDQxOA==", "bodyText": "Also, here.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344418", "createdAt": "2020-03-19T22:02:01Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -501,14 +501,14 @@ private void runLoop() {\n                     mainConsumer.enforceRebalance();\n                 }\n             } catch (final TaskCorruptedException e) {\n-                log.warn(\"Detected the states of tasks {} are corrupted. \" +\n-                    \"Will close the task as dirty and re-create and bootstrap from scratch.\", e.corruptedTaskWithChangelogs());\n+                log.warn(\"Detected the states of tasks \" + e.corruptedTaskWithChangelogs() + \" are corrupted. \" +\n+                             \"Will close the task as dirty and re-create and bootstrap from scratch.\", e);\n \n                 taskManager.handleCorruption(e.corruptedTaskWithChangelogs());\n             } catch (final TaskMigratedException e) {\n                 log.warn(\"Detected that the thread is being fenced. \" +\n-                    \"This implies that this thread missed a rebalance and dropped out of the consumer group. \" +\n-                    \"Will close out all assigned tasks and rejoin the consumer group.\");\n+                             \"This implies that this thread missed a rebalance and dropped out of the consumer group. \" +\n+                             \"Will close out all assigned tasks and rejoin the consumer group.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Njc3MA==", "bodyText": "This is the primary fix. Instead of relying (hoping) on TaskManager to put the changelog reader into restoring_active, we just idempotently make sure it's in that state any time we're in partitions_assigned.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395346770", "createdAt": "2020-03-19T22:07:55Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -578,13 +578,13 @@ void runOnce() {\n         // only try to initialize the assigned tasks\n         // if the state is still in PARTITION_ASSIGNED after the poll call\n         if (state == State.PARTITIONS_ASSIGNED) {\n+            // transit to restore active is idempotent so we can call it multiple times\n+            changelogReader.enforceRestoreActive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODg3Mw==", "bodyText": "Renamed this method to make it clear we aren't necessarily \"transitioning\", we actually call it all the time now any time we want to \"be in restoreActive\".", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395348873", "createdAt": "2020-03-19T22:13:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -279,13 +279,13 @@ private boolean hasRestoredToEnd(final ChangelogMetadata metadata) {\n     // NOTE: even if the newly created tasks do not need any restoring, we still first transit to this state and then\n     // immediately transit back -- there's no overhead of transiting back and forth but simplifies the logic a lot.\n     @Override\n-    public void transitToRestoreActive() {\n+    public void enforceRestoreActive() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0OTYwMA==", "bodyText": "This is a strict mock, so we have to remove this expectation, since the TaskManager no longer calls it.", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395349600", "createdAt": "2020-03-19T22:15:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java", "diffHunk": "@@ -677,8 +677,6 @@ public void closeClean() {\n         };\n \n         resetToStrict(changeLogReader);\n-        changeLogReader.transitToRestoreActive();\n-        expectLastCall();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTU0NTU0", "url": "https://github.com/apache/kafka/pull/8319#pullrequestreview-378154554", "createdAt": "2020-03-19T23:12:09Z", "commit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxMjowOVrOF5DdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxMjowOVrOF5DdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2OTc4MA==", "bodyText": "We can move the line 290 inside as well?", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395369780", "createdAt": "2020-03-19T23:12:09Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -279,13 +279,13 @@ private boolean hasRestoredToEnd(final ChangelogMetadata metadata) {\n     // NOTE: even if the newly created tasks do not need any restoring, we still first transit to this state and then\n     // immediately transit back -- there's no overhead of transiting back and forth but simplifies the logic a lot.\n     @Override\n-    public void transitToRestoreActive() {\n+    public void enforceRestoreActive() {\n         if (state != ChangelogReaderState.ACTIVE_RESTORING) {\n             log.debug(\"Transiting to restore active tasks: {}\", changelogs);\n-        }\n \n-        // pause all partitions that are for standby tasks from the restore consumer\n-        pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());\n+            // pause all partitions that are for standby tasks from the restore consumer\n+            pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzYyNQ=="}, "originalCommit": {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e6b6aed01435aef1bcac534e9992b9e9579f18", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/65e6b6aed01435aef1bcac534e9992b9e9579f18", "committedDate": "2020-03-20T03:06:55Z", "message": "cr feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 326, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}