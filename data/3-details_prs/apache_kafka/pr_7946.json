{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTQ4OTQ3", "number": 7946, "title": "MINOR: MiniKdc JVM shutdown hook fix", "bodyText": "When started as a separate process (which happens only in system tests), the shutdown hook for MiniKdc was running immediately, which causes tests that depend on it for Kerberos to fail.  The system tests in zookeeper_security_upgrade_test.py, for example, fail because ZooKeeper is unable to contact the KDC.\nI ran the above system test locally and confirmed it failed prior to the fix and succeeded after the fix:\nWITHOUT FIX:\n$ ducktape tests/kafkatest/tests/core/zookeeper_security_upgrade_test.py\n[INFO  - 2020-01-13 09:19:04,249 - runner_client - log - lineno:240]: RunnerClient: kafkatest.tests.core.zookeeper_security_upgrade_test.ZooKeeperSecurityUpgradeTest.test_zk_security_upgrade.security_protocol=PLAINTEXT: Summary: Zookeeper node failed to start\nTraceback (most recent call last):\n...\ntest_id:    kafkatest.tests.core.zookeeper_security_upgrade_test.ZooKeeperSecurityUpgradeTest.test_zk_security_upgrade.security_protocol=PLAINTEXT\nstatus:     FAIL\n\nWITH FIX:\n$ ducktape tests/kafkatest/tests/core/zookeeper_security_upgrade_test.py\n[INFO:2020-01-13 09:24:08,072]: RunnerClient: kafkatest.tests.core.zookeeper_security_upgrade_test.ZooKeeperSecurityUpgradeTest.test_zk_security_upgrade.security_protocol=PLAINTEXT: PASS\n...\ntest_id:    kafkatest.tests.core.zookeeper_security_upgrade_test.ZooKeeperSecurityUpgradeTest.test_zk_security_upgrade.security_protocol=PLAINTEXT\nstatus:     PASS", "createdAt": "2020-01-13T14:32:27Z", "url": "https://github.com/apache/kafka/pull/7946", "merged": true, "mergeCommit": {"oid": "a3509c0870230bcc1af4efbfafcf9f69d7cf55fd"}, "closed": true, "closedAt": "2020-01-24T22:21:12Z", "author": {"login": "rondagostino"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb59AdBgH2gAyMzYyMTQ4OTQ3OjM3MWNiMDNhOGVmZGQ2OTRiZDA3ZTVhYzEyZDFiMDA1MTA1MWY1ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9f9WxgH2gAyMzYyMTQ4OTQ3Ojc4YTBkOWVkNmVlMDk5OTAwOGMzMjYxYmM5YjM1NmM0ZmRlZjgwZjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "371cb03a8efdd694bd07e5ac12d1b0051051f583", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/371cb03a8efdd694bd07e5ac12d1b0051051f583", "committedDate": "2020-01-13T14:13:19Z", "message": "MINOR: MiniKdc JVM shutdown hook fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxODg1ODQy", "url": "https://github.com/apache/kafka/pull/7946#pullrequestreview-341885842", "createdAt": "2020-01-13T14:34:31Z", "commit": {"oid": "371cb03a8efdd694bd07e5ac12d1b0051051f583"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a878154cf632e7e5b959244ccbbe4fecc584c0f1", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/a878154cf632e7e5b959244ccbbe4fecc584c0f1", "committedDate": "2020-01-17T02:57:15Z", "message": "Scala changes for kafka.utils.Exit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/114737b3323fce4d1d2d847757c86716677cfdcd", "committedDate": "2020-01-17T02:59:51Z", "message": "Java changes for o.a.k.common.utils.Exit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDE2NDYy", "url": "https://github.com/apache/kafka/pull/7946#pullrequestreview-346016462", "createdAt": "2020-01-21T16:30:23Z", "commit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMDoyNFrOFgAiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMDoyNFrOFgAiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ==", "bodyText": "Should we use a by-name parameter instead?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369107519", "createdAt": "2020-01-21T16:30:24Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473b31b24bb6dcd89b8f4c6bd781f420f155c22b", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/473b31b24bb6dcd89b8f4c6bd781f420f155c22b", "committedDate": "2020-01-21T22:07:59Z", "message": "Use by-name parameter for cleaner Scala code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/f14afa8292b98346929689a4563e6614c0a58b83", "committedDate": "2020-01-21T22:20:24Z", "message": "minor fixes for clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mjc5ODIy", "url": "https://github.com/apache/kafka/pull/7946#pullrequestreview-346279822", "createdAt": "2020-01-22T00:21:25Z", "commit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMToyNlrOFgNJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDoyMToyNlrOFgNJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng==", "bodyText": "Scala is an expression oriented language, there are no statements. This could be simply f or shutdownHook. Also, I think name should not be optional and should be the first parameter.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369314256", "createdAt": "2020-01-22T00:21:26Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,8 +34,8 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n-  def addShutdownHook(code: => Unit, name: Option[String] = None): Unit = {\n-    JExit.addShutdownHook(() => code, name.orNull)\n+  def addShutdownHook(statementByName: => Unit, name: Option[String] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14afa8292b98346929689a4563e6614c0a58b83"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd54dfa6b3b7cd1685c6fb228205d46f335ed9b", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/2dd54dfa6b3b7cd1685c6fb228205d46f335ed9b", "committedDate": "2020-01-22T02:42:59Z", "message": "name required as first parameter, then shutdownHook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "committedDate": "2020-01-23T22:29:59Z", "message": "Always provide a shutdown hook thread name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODc2MTQ0", "url": "https://github.com/apache/kafka/pull/7946#pullrequestreview-347876144", "createdAt": "2020-01-24T10:49:16Z", "commit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDo0OToxNlrOFhaEjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDo1NFrOFhaqlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ3OA==", "bodyText": "Hmm, odd formatting change. Can we revert this?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574478", "createdAt": "2020-01-24T10:49:16Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ4Mg==", "bodyText": "Hmm, odd formatting change. Can we revert this?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574482", "createdAt": "2020-01-24T10:49:17Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDU5NA==", "bodyText": "unrelated to the PR, perhaps revert?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574594", "createdAt": "2020-01-24T10:49:33Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -536,17 +532,15 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       producer = new MirrorMakerProducer(sync, producerProps)\n \n       // Create consumers\n-      val customRebalanceListener: Option[ConsumerRebalanceListener] = {\n+      val customRebalanceListener = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjczOA==", "bodyText": "Couldn't we do something like:\nJExit.setShutdownHookAdder((name, runnable) => shutdownHookAdder(name, runnable.run()))\n\ninstead of a separate  functionToShutdownHookAdder method?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370582738", "createdAt": "2020-01-24T11:10:49Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(name: String, shutdownHook: => Unit): Unit = {\n+    JExit.addShutdownHook(name, () => shutdownHook)\n+  }\n+\n   def setExitProcedure(exitProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setExitProcedure(functionToProcedure(exitProcedure))\n \n   def setHaltProcedure(haltProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setHaltProcedure(functionToProcedure(haltProcedure))\n \n+  def setShutdownHookAdder(shutdownHookAdder: (String, => Unit) => Unit): Unit = {\n+    JExit.setShutdownHookAdder(functionToShutdownHookAdder(shutdownHookAdder))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzE2Ng==", "bodyText": "Since the implementation class is MiniKdc with upper-case K, we should perhaps rename this file and class to be MiniKdcTest.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583166", "createdAt": "2020-01-24T11:11:54Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/security/minikdc/MinikdcTest.scala", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.security.minikdc\n+\n+import java.util.Properties\n+\n+import kafka.utils.TestUtils\n+import org.junit.Test\n+import org.junit.Assert._\n+\n+class MinikdcTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4Mzk4Mg==", "bodyText": "we could use intercept[Exception]. It will simplify the code and check that Exception was thrown.", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583982", "createdAt": "2020-01-24T11:14:13Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()\n+    }\n+    Exit.setHaltProcedure(haltProcedure)\n+    val statusCode = 0\n+    val message = Some(\"message\")\n+    try {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDIxNA==", "bodyText": "Perhaps use a more specific Exception class since we want to catch this specific one later?", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370584214", "createdAt": "2020-01-24T11:14:54Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a0d9ed6ee0999008c3261bc9b356c4fdef80f2", "author": {"user": {"login": "rondagostino", "name": "Ron Dagostino"}}, "url": "https://github.com/apache/kafka/commit/78a0d9ed6ee0999008c3261bc9b356c4fdef80f2", "committedDate": "2020-01-24T14:38:23Z", "message": "address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}