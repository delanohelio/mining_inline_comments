{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NDYzODkx", "number": 9627, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjozMzozOVrOF1EZ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzo0NDowOFrOF1f8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxMTkxMDI0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjozMzozOVrOJNe28g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNzo0Mjo1OVrOJNhbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODExNjg1MA==", "bodyText": "It seems the shouldWarn is always true in production. Maybe we can remove the input argument from this method?", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618116850", "createdAt": "2021-04-22T06:33:39Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "diffHunk": "@@ -203,8 +203,8 @@ public void requestRejoin() {\n         coordinator.requestRejoin();\n     }\n \n-    public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason);\n+    public void maybeLeaveGroup(String leaveReason, boolean shouldWarn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE1ODkyMQ==", "bodyText": "Nice suggestion!", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618158921", "createdAt": "2021-04-22T07:42:59Z", "author": {"login": "showuon"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "diffHunk": "@@ -203,8 +203,8 @@ public void requestRejoin() {\n         coordinator.requestRejoin();\n     }\n \n-    public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason);\n+    public void maybeLeaveGroup(String leaveReason, boolean shouldWarn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODExNjg1MA=="}, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxMTk0MzEwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjo0MzozOFrOJNfKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjo0MzozOFrOJNfKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyMTg0Nw==", "bodyText": "'final' is unnecessary here :)", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618121847", "createdAt": "2021-04-22T06:43:38Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1013,8 +1018,13 @@ protected void close(Timer timer) {\n             state != MemberState.UNJOINED && generation.hasMemberId()) {\n             // this is a minimal effort attempt to leave the group. we do not\n             // attempt any resending if the request fails or times out.\n-            log.info(\"Member {} sending LeaveGroup request to coordinator {} due to {}\",\n+            final String logMessage = String.format(\"Member %s sending LeaveGroup request to coordinator %s due to %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxMTk1MDc2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjo0NTo1NFrOJNfPNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjo0NTo1NFrOJNfPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyMzA2Mw==", "bodyText": "Did you revise the content? Or it is just about decoration?", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618123063", "createdAt": "2021-04-22T06:45:54Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1353,12 +1363,13 @@ public void run() {\n                         } else if (heartbeat.pollTimeoutExpired(now)) {\n                             // the poll timeout has expired, which means that the foreground thread has stalled\n                             // in between calls to poll().\n-                            String leaveReason = \"consumer poll timeout has expired. This means the time between subsequent calls to poll() \" +\n-                                                    \"was longer than the configured max.poll.interval.ms, which typically implies that \" +\n+                            final String leaveReason = \"consumer poll timeout has expired. This means the time between \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxMTk2NjI4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNjo1MDoyMFrOJNfYjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQwNzo0NDoxNlrOJNhe0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyNTQ1NA==", "bodyText": "Most cases pass false so an override method  maybeLeaveGroup(String) can reduce the code changes. Also, maybeLeaveGroup(String, boolean) can be declared as a protected method. WDYT?", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618125454", "createdAt": "2021-04-22T06:50:20Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1001,9 +1001,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leave the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE1OTgyNw==", "bodyText": "Cool! And, it cannot change to protected method since we used this method in KafkaConsumer, which is in different package.", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618159827", "createdAt": "2021-04-22T07:44:16Z", "author": {"login": "showuon"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1001,9 +1001,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leave the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODEyNTQ1NA=="}, "originalCommit": {"oid": "d4247e13798b3e56f0e2838ce1f9870de74c44cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxNDQ4NTAwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQxNTo0Njo1OVrOJN3k4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yM1QwMjoxOTo1M1rOJOOSog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMTgyNQ==", "bodyText": "KafkaException is a runtime exception and therefore should only be included in the javadoc. In the method signature we include checked exceptions.", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618521825", "createdAt": "2021-04-22T15:46:59Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1023,9 +1023,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg5Mzk4Ng==", "bodyText": "Thanks, updated.", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618893986", "createdAt": "2021-04-23T02:19:53Z", "author": {"login": "showuon"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1023,9 +1023,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n+     *\n+     * @param leaveReason the reason to leave the group for logging\n+     * @param shouldWarn should log as WARN level or INFO\n      * @throws KafkaException if the rebalance callback throws exception\n      */\n-    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) {\n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason, boolean shouldWarn) throws KafkaException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMTgyNQ=="}, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxNDQ5NzM0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQxNTo0OTowOVrOJN3sSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQxNTo0OTowOVrOJN3sSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyMzcyMA==", "bodyText": "same here", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618523720", "createdAt": "2021-04-22T15:49:09Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1051,6 +1061,10 @@ protected void close(Timer timer) {\n         return future;\n     }\n \n+    public synchronized RequestFuture<Void> maybeLeaveGroup(String leaveReason) throws KafkaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxNjQwMDcwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzozNTowMVrOJOJqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzozNTowMVrOJOJqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxODA1OQ==", "bodyText": "I think it may be more useful to describe the cases where it will not send a LeaveGroup and describe what this actually means (also it should have been 'and' not 'or' in the original):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n          \n          \n            \n                 * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.\n          \n          \n            \n                 * Sends LeaveGroupRequest and logs the {@code leaveReason}, unless this member is using \n          \n          \n            \n                 * static  membership or is already not part of the group (ie does not have a valid member id, \n          \n          \n            \n                 * is in the UNJOINED state, or the coordinator is unknown).", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618818059", "createdAt": "2021-04-22T23:35:01Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1023,9 +1023,14 @@ protected void close(Timer timer) {\n     }\n \n     /**\n+     * Leaving the group. This method also sends LeaveGroupRequest and log {@code leaveReason} if this is dynamic members\n+     * or unknown coordinator or state is not UNJOINED or this generation has a valid member id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxNjQxNzMwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzo0MjowNlrOJOJzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yM1QwMjoyMDo0OVrOJOOT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMDQyNA==", "bodyText": "I think it would be simpler to just log the current leaveReason right here at the warn level, and then pass in a more brief description to maybeLeaveGroup rather than add a flag to that method just for this one case", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618820424", "createdAt": "2021-04-22T23:42:06Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1386,7 +1400,7 @@ public void run() {\n                                                     \"the poll loop is spending too much time processing messages. \" +\n                                                     \"You can address this either by increasing max.poll.interval.ms or by reducing \" +\n                                                     \"the maximum size of batches returned in poll() with max.poll.records.\";\n-                            maybeLeaveGroup(leaveReason);\n+                            maybeLeaveGroup(leaveReason, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg5NDMwMg==", "bodyText": "Good suggestion!", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618894302", "createdAt": "2021-04-23T02:20:49Z", "author": {"login": "showuon"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1386,7 +1400,7 @@ public void run() {\n                                                     \"the poll loop is spending too much time processing messages. \" +\n                                                     \"You can address this either by increasing max.poll.interval.ms or by reducing \" +\n                                                     \"the maximum size of batches returned in poll() with max.poll.records.\";\n-                            maybeLeaveGroup(leaveReason);\n+                            maybeLeaveGroup(leaveReason, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMDQyNA=="}, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkxNjQyMTc0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzo0NDowOFrOJOJ11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMlQyMzo0NDowOFrOJOJ11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyMTA3OQ==", "bodyText": "The only invocation of WorkerGroupMember#maybeLeaveGroup in fact already does log a warning as to why instead of relying on maybeLeaveGroup to do so. Imo we should do something similar for the \"consumer poll timeout has expired\" case", "url": "https://github.com/apache/kafka/pull/9627#discussion_r618821079", "createdAt": "2021-04-22T23:44:08Z", "author": {"login": "ableegoldman"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/WorkerGroupMember.java", "diffHunk": "@@ -202,7 +202,7 @@ public void requestRejoin() {\n     }\n \n     public void maybeLeaveGroup(String leaveReason) {\n-        coordinator.maybeLeaveGroup(leaveReason);\n+        coordinator.maybeLeaveGroup(leaveReason, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69cb98ff76f94f851e6a1ecd56bc927c27b4bda"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3584, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}