{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODMwMDA2", "number": 8609, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTowMDo1OVrOD5KcbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMzoyOVrOD5estg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjY2NTQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTowMDo1OVrOGQSBHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODozMzoxMlrOGQff-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNTU5OQ==", "bodyText": "It seems like we could keep the response callback creation method in the previous PR if we passed in partitionStates to the callback builder, or alternately create a map of the partitions that you expect to be deleted. I think this would save the code duplication in creating nearly the same callback which I believe is being done to deal with the differences in the deletePartition schemas i.e. all partitions in request vs specific partitions.", "url": "https://github.com/apache/kafka/pull/8609#discussion_r419725599", "createdAt": "2020-05-04T21:00:59Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -590,7 +569,26 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n \n           stateChangeLog.info(s\"Sending StopReplica request for ${partitionStates.size} \" +\n             s\"replicas to broker $brokerId\")\n-          sendStopReplicaRequest(brokerId, brokerEpoch, false, stopReplicaTopicState)\n+          val stopReplicaRequestBuilder = new StopReplicaRequest.Builder(\n+            stopReplicaRequestVersion, controllerId, controllerEpoch, brokerEpoch,\n+            false, stopReplicaTopicState.values.toBuffer.asJava)\n+\n+          sendRequest(brokerId, stopReplicaRequestBuilder, (r: AbstractResponse) => {\n+            val stopReplicaResponse = r.asInstanceOf[StopReplicaResponse]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2797e2ef8e7de309e54c7712c054eaa41ff567a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwMzExOQ==", "bodyText": "I agree the duplication is a tad vexing. Perhaps we could pass a function TopicPartition -> Boolean to the callback which tells whether deletion was requested. For the old version, we would return true blindly.", "url": "https://github.com/apache/kafka/pull/8609#discussion_r419803119", "createdAt": "2020-05-05T00:23:22Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -590,7 +569,26 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n \n           stateChangeLog.info(s\"Sending StopReplica request for ${partitionStates.size} \" +\n             s\"replicas to broker $brokerId\")\n-          sendStopReplicaRequest(brokerId, brokerEpoch, false, stopReplicaTopicState)\n+          val stopReplicaRequestBuilder = new StopReplicaRequest.Builder(\n+            stopReplicaRequestVersion, controllerId, controllerEpoch, brokerEpoch,\n+            false, stopReplicaTopicState.values.toBuffer.asJava)\n+\n+          sendRequest(brokerId, stopReplicaRequestBuilder, (r: AbstractResponse) => {\n+            val stopReplicaResponse = r.asInstanceOf[StopReplicaResponse]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNTU5OQ=="}, "originalCommit": {"oid": "e2797e2ef8e7de309e54c7712c054eaa41ff567a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0NjQ5MQ==", "bodyText": "I agree as well. Passing a function is a really good idea. I should have thought about it.", "url": "https://github.com/apache/kafka/pull/8609#discussion_r419946491", "createdAt": "2020-05-05T08:33:12Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -590,7 +569,26 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n \n           stateChangeLog.info(s\"Sending StopReplica request for ${partitionStates.size} \" +\n             s\"replicas to broker $brokerId\")\n-          sendStopReplicaRequest(brokerId, brokerEpoch, false, stopReplicaTopicState)\n+          val stopReplicaRequestBuilder = new StopReplicaRequest.Builder(\n+            stopReplicaRequestVersion, controllerId, controllerEpoch, brokerEpoch,\n+            false, stopReplicaTopicState.values.toBuffer.asJava)\n+\n+          sendRequest(brokerId, stopReplicaRequestBuilder, (r: AbstractResponse) => {\n+            val stopReplicaResponse = r.asInstanceOf[StopReplicaResponse]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNTU5OQ=="}, "originalCommit": {"oid": "e2797e2ef8e7de309e54c7712c054eaa41ff567a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzE2NTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoxODowNVrOGQWqKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoxODowNVrOGQWqKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwMTY0MA==", "bodyText": "nit: could we align with the controllerContext?", "url": "https://github.com/apache/kafka/pull/8609#discussion_r419801640", "createdAt": "2020-05-05T00:18:05Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -590,7 +569,26 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n \n           stateChangeLog.info(s\"Sending StopReplica request for ${partitionStates.size} \" +\n             s\"replicas to broker $brokerId\")\n-          sendStopReplicaRequest(brokerId, brokerEpoch, false, stopReplicaTopicState)\n+          val stopReplicaRequestBuilder = new StopReplicaRequest.Builder(\n+            stopReplicaRequestVersion, controllerId, controllerEpoch, brokerEpoch,\n+            false, stopReplicaTopicState.values.toBuffer.asJava)\n+\n+          sendRequest(brokerId, stopReplicaRequestBuilder, (r: AbstractResponse) => {\n+            val stopReplicaResponse = r.asInstanceOf[StopReplicaResponse]\n+            val partitionErrorsForDeletingTopics = mutable.Map.empty[TopicPartition, Errors]\n+            stopReplicaResponse.partitionErrors.asScala.foreach { pe =>\n+              val tp = new TopicPartition(pe.topicName, pe.partitionIndex)\n+              // Verify that the topic deletion is in progress and\n+              // that the request deleted the replica\n+              if (controllerContext.isTopicDeletionInProgress(pe.topicName) &&\n+                partitionStates.get(tp).exists(_.deletePartition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2797e2ef8e7de309e54c7712c054eaa41ff567a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTk4MzkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMzoyOVrOGQxWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyODo1MVrOGQ2Q4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzODg5MQ==", "bodyText": "nit: partitionErrorsForDeletingTopics seems a bit ambiguous and makes it sound like it only includes partitions for which StopReplicaRequest failed. Perhaps something like partitionToError is better?", "url": "https://github.com/apache/kafka/pull/8609#discussion_r420238891", "createdAt": "2020-05-05T16:23:29Z", "author": {"login": "dhruvilshah3"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -550,6 +550,22 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n       else if (config.interBrokerProtocolVersion >= KAFKA_2_2_IV0) 1\n       else 0\n \n+    def responseCallback(brokerId: Int, isPartitionDeleted: TopicPartition => Boolean)\n+                        (response: AbstractResponse): Unit = {\n+      val stopReplicaResponse = response.asInstanceOf[StopReplicaResponse]\n+      val partitionErrorsForDeletingTopics = mutable.Map.empty[TopicPartition, Errors]\n+      stopReplicaResponse.partitionErrors.asScala.foreach { pe =>\n+        val tp = new TopicPartition(pe.topicName, pe.partitionIndex)\n+        if (controllerContext.isTopicDeletionInProgress(pe.topicName) &&\n+            isPartitionDeleted(tp)) {\n+          partitionErrorsForDeletingTopics += tp -> Errors.forCode(pe.errorCode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272e333c8787f39ab625ad632db9d31b13a642d0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTQ1OQ==", "bodyText": "I think the name seems ok. To me it means that the map includes the errors of all topic being deleted. It might be nice if it could reflect that this is only covering partitions which were also requested to be deleted in the StopReplica request, but that name probably becomes unwieldy.", "url": "https://github.com/apache/kafka/pull/8609#discussion_r420319459", "createdAt": "2020-05-05T18:28:51Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/controller/ControllerChannelManager.scala", "diffHunk": "@@ -550,6 +550,22 @@ abstract class AbstractControllerBrokerRequestBatch(config: KafkaConfig,\n       else if (config.interBrokerProtocolVersion >= KAFKA_2_2_IV0) 1\n       else 0\n \n+    def responseCallback(brokerId: Int, isPartitionDeleted: TopicPartition => Boolean)\n+                        (response: AbstractResponse): Unit = {\n+      val stopReplicaResponse = response.asInstanceOf[StopReplicaResponse]\n+      val partitionErrorsForDeletingTopics = mutable.Map.empty[TopicPartition, Errors]\n+      stopReplicaResponse.partitionErrors.asScala.foreach { pe =>\n+        val tp = new TopicPartition(pe.topicName, pe.partitionIndex)\n+        if (controllerContext.isTopicDeletionInProgress(pe.topicName) &&\n+            isPartitionDeleted(tp)) {\n+          partitionErrorsForDeletingTopics += tp -> Errors.forCode(pe.errorCode)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzODg5MQ=="}, "originalCommit": {"oid": "272e333c8787f39ab625ad632db9d31b13a642d0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2873, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}