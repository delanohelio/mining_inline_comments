{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjE1MjY1", "number": 8844, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzoyMjo0OVrOEHaqLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNjowNDo0M1rOFrsc8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEyMjY5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzoyMjo0OVrOGmw34A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowOToyMlrOGm2ILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5OTgwOA==", "bodyText": "Nit: the name here is a bit verbose. The type signature of the parameter here already tells us that this is for a connector status listener; do you think wrapStatusListener or even just statusListener might convey the necessary information?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443299808", "createdAt": "2020-06-22T03:22:49Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NTkwMQ==", "bodyText": "Yep, that sounds fair. I'll rename it (pending the discussion on direction overall)", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443385901", "createdAt": "2020-06-22T08:09:22Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5OTgwOA=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEyMzI3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzoyMzoxN1rOGmw4PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODowOToyOVrOGm2Icg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5OTkwMA==", "bodyText": "Same comment here w/r/t naming; I think wrapStatusListener or statusListener may be warranted.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443299900", "createdAt": "2020-06-22T03:23:17Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NTk3MA==", "bodyText": "Yep, that sounds fair. I'll rename it (pending the discussion on direction overall)", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443385970", "createdAt": "2020-06-22T08:09:29Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5OTkwMA=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEyNDMxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzoyNDoxNFrOGmw45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoxMDoyMVrOGm2KMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMDA2OA==", "bodyText": "Another nit (sorry!): given that this is already an inner class for the WorkerMetricsGroup class, the WorkerMetricsGroup prefix seems redundant. What do you think about just ConnectorStatusListener?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443300068", "createdAt": "2020-06-22T03:24:14Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupTaskStatusListener(delegateListener);\n+    }\n+\n+    class WorkerMetricsGroupConnectorStatusListener implements ConnectorStatus.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NjQxOA==", "bodyText": "It was a little close to ConnectorStatus.Listener for me originally, but yeah i agree the name is cumbersome. I'm happy to rename it.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443386418", "createdAt": "2020-06-22T08:10:21Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupTaskStatusListener(delegateListener);\n+    }\n+\n+    class WorkerMetricsGroupConnectorStatusListener implements ConnectorStatus.Listener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMDA2OA=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjEyNDgyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzoyNDo0MVrOGmw5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwODoxMDozNlrOGm2Ktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMDE0Mg==", "bodyText": "Same (nitty) comment here: maybe just TaskStatusListener?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443300142", "createdAt": "2020-06-22T03:24:41Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupTaskStatusListener(delegateListener);\n+    }\n+\n+    class WorkerMetricsGroupConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;\n+\n+        WorkerMetricsGroupConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+            this.delegateListener = delegateListener;\n+        }\n+\n+        @Override\n+        public void onShutdown(final String connector) {\n+            delegateListener.onShutdown(connector);\n+        }\n+\n+        @Override\n+        public void onFailure(final String connector, final Throwable cause) {\n+            if (!startupSucceeded) {\n+                recordConnectorStartupFailure();\n+            }\n+            delegateListener.onFailure(connector, cause);\n+        }\n+\n+        @Override\n+        public void onPause(final String connector) {\n+            delegateListener.onPause(connector);\n+        }\n+\n+        @Override\n+        public void onResume(final String connector) {\n+            delegateListener.onResume(connector);\n+        }\n+\n+        @Override\n+        public void onStartup(final String connector) {\n+            delegateListener.onStartup(connector);\n+            startupSucceeded = true;\n+            recordConnectorStartupSuccess();\n+        }\n+\n+        @Override\n+        public void onDeletion(final String connector) {\n+            delegateListener.onDeletion(connector);\n+        }\n+    }\n+\n+    class WorkerMetricsGroupTaskStatusListener implements TaskStatus.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NjU1MQ==", "bodyText": "It was a little close to TaskStatus.Listener for me originally, but yeah i agree the name is cumbersome. I'm happy to rename it.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443386551", "createdAt": "2020-06-22T08:10:36Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapTaskStatusListener(TaskStatus.Listener delegateListener) {\n+        return new WorkerMetricsGroupTaskStatusListener(delegateListener);\n+    }\n+\n+    class WorkerMetricsGroupConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;\n+\n+        WorkerMetricsGroupConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+            this.delegateListener = delegateListener;\n+        }\n+\n+        @Override\n+        public void onShutdown(final String connector) {\n+            delegateListener.onShutdown(connector);\n+        }\n+\n+        @Override\n+        public void onFailure(final String connector, final Throwable cause) {\n+            if (!startupSucceeded) {\n+                recordConnectorStartupFailure();\n+            }\n+            delegateListener.onFailure(connector, cause);\n+        }\n+\n+        @Override\n+        public void onPause(final String connector) {\n+            delegateListener.onPause(connector);\n+        }\n+\n+        @Override\n+        public void onResume(final String connector) {\n+            delegateListener.onResume(connector);\n+        }\n+\n+        @Override\n+        public void onStartup(final String connector) {\n+            delegateListener.onStartup(connector);\n+            startupSucceeded = true;\n+            recordConnectorStartupSuccess();\n+        }\n+\n+        @Override\n+        public void onDeletion(final String connector) {\n+            delegateListener.onDeletion(connector);\n+        }\n+    }\n+\n+    class WorkerMetricsGroupTaskStatusListener implements TaskStatus.Listener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMDE0Mg=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE3ODg3OnYy", "diffSide": "LEFT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDowOToxM1rOGmxYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoxNzoyM1rOGnL64w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODE3NQ==", "bodyText": "I think we might want to keep this line here in case we fail somehow before even creating the WorkerConnector instance.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443308175", "createdAt": "2020-06-22T04:09:13Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -289,7 +285,6 @@ public void startConnector(\n                 // Can't be put in a finally block because it needs to be swapped before the call on\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n-                workerMetricsGroup.recordConnectorStartupFailure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NTQ5MQ==", "bodyText": "Good point. I believe we could achieve the same effect by wrapping the statusListener earlier in the method and using the wrapped listener in the exception handler. That way the only way we could fail without recording a metric would be if the wrapping itself failed (which is a dead simple constructor, so seems unlikely)", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443385491", "createdAt": "2020-06-22T08:08:32Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -289,7 +285,6 @@ public void startConnector(\n                 // Can't be put in a finally block because it needs to be swapped before the call on\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n-                workerMetricsGroup.recordConnectorStartupFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODE3NQ=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0Mjk0Nw==", "bodyText": "Oooh, yeah that's neat. \ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443742947", "createdAt": "2020-06-22T18:17:23Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -289,7 +285,6 @@ public void startConnector(\n                 // Can't be put in a finally block because it needs to be swapped before the call on\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n-                workerMetricsGroup.recordConnectorStartupFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODE3NQ=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE4Mzg1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDoxMzoxNlrOGmxbdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNDoyNFrOGnXpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODkxNw==", "bodyText": "It seems a little unclean to start calling the statusListener from the subclass when it's been used exclusively by the WorkerTask abstract class up to this point. Not the end of the world but I think we might be able to do this more cleanly by decomposing the existing execute method into separate initializeAndStart (name obviously subject to change) and execute methods, with the call to statusListener::onStartup in between them. This way, we can avoid worrying about the status listener in the subclasses and can  encapsulate some shared logic in the abstract superclass. What are your thoughts?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443308917", "createdAt": "2020-06-22T04:13:16Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private static final String THREAD_NAME_PREFIX = \"task-thread-\";\n \n     protected final ConnectorTaskId id;\n-    private final TaskStatus.Listener statusListener;\n+    protected final TaskStatus.Listener statusListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NzM2OA==", "bodyText": "Yes, I had the same thought and initially started going down that road. The source of the problem as it appeared to me was that the failure methods inside the WorkerConnector/WorkerTasks were catching any failure and not propagating any exception back up to Worker where it would be able to record metrics. Simply allowing the exception to filter back up seemed the way to go, but since I needed to differentiate between a failure in startup and a failure during regular execution, separating those methods seemed a good way to do it.  This worked very well for the connector at the time, but got a bit more difficult for the tasks because they were being sent to an executor service, so there wan\u2019t an obvious exception handler in the Worker class to handle problems. (I\u2019ve noticed that since I looked at this, you\u2019ve committed a change that makes the connectors use an executor service too, so this probably now applies to connectors as well as tasks). I wasn\u2019t entirely certain whether it was important or not that the startup code run on the same thread as the regular execution, but assumed that it was, so started putting in a chain of CompletableFutures where I could check for exceptions in the other thread and only go on to submit the execute stage if the initialiseAndStart stage completed successfully. But this required there to be two different entry points for execution into the WorkerConnector/WorkerTasks which kind of defeated the point of them implementing the Runnable interface, and the exception checking was a bit ugly anyway. It was at this point that I discovered the statusListener and thought that might be a cleaner way to go. Not the only way of course, but it seemed to me to be a smaller change. Separating those methods would be more easily achieved if the startup phase could run on the same thread as the Worker, but that seems to me like more of a significant change?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443387368", "createdAt": "2020-06-22T08:12:19Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private static final String THREAD_NAME_PREFIX = \"task-thread-\";\n \n     protected final ConnectorTaskId id;\n-    private final TaskStatus.Listener statusListener;\n+    protected final TaskStatus.Listener statusListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODkxNw=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NjQyNA==", "bodyText": "Yeah, we definitely don't want to run connector or task code on the same thread as the Worker (or really, the Herder that's calling the Worker). I don't think it's that bad if the startup and recording of metrics happens asynchronously from the call to Worker::startConnector or Worker::startTask; the only potential downside I can think of is that someone might believe they've started a connector/task but the startup metrics for the worker might not yet be incremented if the connector/task is taking a while (or just completely hung) during startup.\nI was just suggesting a small refactoring though, not anything that would affect the actual behavior of the framework. Just something to make the code a little cleaner.\nIn case it helps, I was thinking WorkerTask might look like this:\nabstract class WorkerTask {\n    private final TaskStatus.Listener statusListener;\n\n    protected abstract void initializeAndStart();\n\n    protected abstract void execute();\n\n        private void doRun() throws InterruptedException {\n        try {\n            synchronized (this) {\n                if (stopping)\n                    return;\n\n                if (targetState == TargetState.PAUSED) {\n                    onPause();\n                    if (!awaitUnpause()) return;\n                }\n            }\n\n            // These three lines replace the single call to execute() that's in the WorkerTask class right now\n            initializeAndStart();\n            statusListener.onStartup();\n            execute();\n        } catch (Throwable t) {\n            log.error(\"{} Task threw an uncaught and unrecoverable exception\", this, t);\n            log.error(\"{} Task is being killed and will not recover until manually restarted\", this);\n            throw t;\n        } finally {\n            doClose();\n        }\n    }\n}\n\nWorkerSinkTask might look like this:\nclass WorkerSinkTask extends WorkerTask {\n\n    // This is already a method in the WorkerSinkTask class, but now it overrides an abstract method in the WorkerTask superclass\n    @Override\n    protected void initializeAndStart() {\n        SinkConnectorConfig.validate(taskConfig);\n\n        if (SinkConnectorConfig.hasTopicsConfig(taskConfig)) {\n            List<String> topics = SinkConnectorConfig.parseTopicsList(taskConfig);\n            consumer.subscribe(topics, new HandleRebalance());\n            log.debug(\"{} Initializing and starting task for topics {}\", this, Utils.join(topics, \", \"));\n        } else {\n            String topicsRegexStr = taskConfig.get(SinkTask.TOPICS_REGEX_CONFIG);\n            Pattern pattern = Pattern.compile(topicsRegexStr);\n            consumer.subscribe(pattern, new HandleRebalance());\n            log.debug(\"{} Initializing and starting task for topics regex {}\", this, topicsRegexStr);\n        }\n\n        task.initialize(context);\n        task.start(taskConfig);\n        log.info(\"{} Sink task finished initialization and start\", this);\n    }\n\n    // Remove the call to initializeAndStart() and statusListener.onStartup() here; they'll be called automatically by the superclass\n    @Override\n    public void execute() {\n        // Make sure any uncommitted data has been committed and the task has\n        // a chance to clean up its state\n        try (UncheckedCloseable suppressible = this::closePartitions) {\n            while (!isStopping())\n                iteration();\n        }\n    }\n}\nAnd WorkerSourceTask might look like this:\nclass WorkerSourceTask extends WorkerTask {\n\n    // Technically a new method, but all code has just been cut+pasted from the existing execute() method\n    @Override\n    protected void initializeAndStart() {\n        task.initialize(new WorkerSourceTaskContext(offsetReader, this, configState));\n        task.start(taskConfig);\n        log.info(\"{} Source task finished initialization and start\", this);\n    }\n \n    // Same as the existing execute() method, except for the code removed for initializeAndStart() and the call to statusListener.onStartup\n    @Override\n    public void execute() {\n        synchronized (this) {\n            if (startedShutdownBeforeStartCompleted) {\n                tryStop();\n                return;\n            }\n            finishedStart = true;\n        }\n\n        try {\n            while (!isStopping()) {\n                if (shouldPause()) {\n                    onPause();\n                    if (awaitUnpause()) {\n                        onResume();\n                    }\n                    continue;\n                }\n\n                maybeThrowProducerSendException();\n\n                if (toSend == null) {\n                    log.trace(\"{} Nothing to send to Kafka. Polling source for additional records\", this);\n                    long start = time.milliseconds();\n                    toSend = poll();\n                    if (toSend != null) {\n                        recordPollReturned(toSend.size(), time.milliseconds() - start);\n                    }\n                }\n                if (toSend == null)\n                    continue;\n                log.trace(\"{} About to send {} records to Kafka\", this, toSend.size());\n                if (!sendRecords())\n                    stopRequestedLatch.await(SEND_FAILED_BACKOFF_MS, TimeUnit.MILLISECONDS);\n            }\n        } catch (InterruptedException e) {\n            // Ignore and allow to exit.\n        } finally {\n            // It should still be safe to commit offsets since any exception would have\n            // simply resulted in not getting more records but all the existing records should be ok to flush\n            // and commit offsets. Worst case, task.flush() will also throw an exception causing the offset commit\n            // to fail.\n            commitOffsets();\n        }\n    }\n}", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443756424", "createdAt": "2020-06-22T18:44:20Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private static final String THREAD_NAME_PREFIX = \"task-thread-\";\n \n     protected final ConnectorTaskId id;\n-    private final TaskStatus.Listener statusListener;\n+    protected final TaskStatus.Listener statusListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODkxNw=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNTE2MQ==", "bodyText": "Ah, of course! Yes that seems better, I'll do that.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443935161", "createdAt": "2020-06-23T03:04:24Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -56,7 +56,7 @@\n     private static final String THREAD_NAME_PREFIX = \"task-thread-\";\n \n     protected final ConnectorTaskId id;\n-    private final TaskStatus.Listener statusListener;\n+    protected final TaskStatus.Listener statusListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODkxNw=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE5MDIzOnYy", "diffSide": "LEFT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNDoxODo1M1rOGmxfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0NDozMlrOGnMv8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwOTkwNg==", "bodyText": "I think we might want to keep this line here in case we fail somehow before even creating the WorkerTask instance. This can happen if a Converter, Transformation, etc. throws an exception during startup.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443309906", "createdAt": "2020-06-22T04:18:53Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -562,7 +556,6 @@ public boolean startTask(\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n                 connectorStatusMetricsGroup.recordTaskRemoved(id);\n-                workerMetricsGroup.recordTaskFailure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NTYzOQ==", "bodyText": "Good point. I believe we could achieve the same effect by wrapping the statusListener earlier in the method and using the wrapped listener in the exception handler. That way the only way we could fail without recording a metric would be if the wrapping itself failed (which is a dead simple constructor, so seems unlikely)", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443385639", "createdAt": "2020-06-22T08:08:49Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -562,7 +556,6 @@ public boolean startTask(\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n                 connectorStatusMetricsGroup.recordTaskRemoved(id);\n-                workerMetricsGroup.recordTaskFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwOTkwNg=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NjUyOQ==", "bodyText": "Sounds good!", "url": "https://github.com/apache/kafka/pull/8844#discussion_r443756529", "createdAt": "2020-06-22T18:44:32Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -562,7 +556,6 @@ public boolean startTask(\n                 // statusListener\n                 Plugins.compareAndSwapLoaders(savedLoader);\n                 connectorStatusMetricsGroup.recordTaskRemoved(id);\n-                workerMetricsGroup.recordTaskFailure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwOTkwNg=="}, "originalCommit": {"oid": "45bb0cef1e6396ab198e3dd3b3be6be13339358e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIyMjM5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MjowN1rOGn2THQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMToyNlrOGoHQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzI3Nw==", "bodyText": "This is going to be modified and accessed on potentially different threads, right? If so, we should add the volatile modifier here.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444437277", "createdAt": "2020-06-23T18:52:07Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;\n+\n+        ConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+            this.delegateListener = delegateListener;\n+        }\n+\n+        @Override\n+        public void onShutdown(final String connector) {\n+            delegateListener.onShutdown(connector);\n+        }\n+\n+        @Override\n+        public void onFailure(final String connector, final Throwable cause) {\n+            if (!startupSucceeded) {\n+                recordConnectorStartupFailure();\n+            }\n+            delegateListener.onFailure(connector, cause);\n+        }\n+\n+        @Override\n+        public void onPause(final String connector) {\n+            delegateListener.onPause(connector);\n+        }\n+\n+        @Override\n+        public void onResume(final String connector) {\n+            delegateListener.onResume(connector);\n+        }\n+\n+        @Override\n+        public void onStartup(final String connector) {\n+            delegateListener.onStartup(connector);\n+            startupSucceeded = true;\n+            recordConnectorStartupSuccess();\n+        }\n+\n+        @Override\n+        public void onDeletion(final String connector) {\n+            delegateListener.onDeletion(connector);\n+        }\n+    }\n+\n+    class TaskStatusListener implements TaskStatus.Listener {\n+        private final TaskStatus.Listener delegatedListener;\n+        private boolean startupSucceeded = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNTE0OQ==", "bodyText": "Yep, I think there is a possibility of calling this from different threads. I'll add that in.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444715149", "createdAt": "2020-06-24T08:01:26Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;\n+\n+        ConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+            this.delegateListener = delegateListener;\n+        }\n+\n+        @Override\n+        public void onShutdown(final String connector) {\n+            delegateListener.onShutdown(connector);\n+        }\n+\n+        @Override\n+        public void onFailure(final String connector, final Throwable cause) {\n+            if (!startupSucceeded) {\n+                recordConnectorStartupFailure();\n+            }\n+            delegateListener.onFailure(connector, cause);\n+        }\n+\n+        @Override\n+        public void onPause(final String connector) {\n+            delegateListener.onPause(connector);\n+        }\n+\n+        @Override\n+        public void onResume(final String connector) {\n+            delegateListener.onResume(connector);\n+        }\n+\n+        @Override\n+        public void onStartup(final String connector) {\n+            delegateListener.onStartup(connector);\n+            startupSucceeded = true;\n+            recordConnectorStartupSuccess();\n+        }\n+\n+        @Override\n+        public void onDeletion(final String connector) {\n+            delegateListener.onDeletion(connector);\n+        }\n+    }\n+\n+    class TaskStatusListener implements TaskStatus.Listener {\n+        private final TaskStatus.Listener delegatedListener;\n+        private boolean startupSucceeded = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzI3Nw=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIyMjYwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MjoxM1rOGn2TRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMTozNFrOGoHQxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzMxOQ==", "bodyText": "This is going to be modified and accessed on potentially different threads, right? If so, we should add the volatile modifier here.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444437319", "createdAt": "2020-06-23T18:52:13Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNTIwNA==", "bodyText": "Yep, I think there is a possibility of calling this from different threads. I'll add that in.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444715204", "createdAt": "2020-06-24T08:01:34Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private boolean startupSucceeded = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNzMxOQ=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTI3MDkwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTowNTo1NlrOGn2xjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMzowOFrOGoHT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NTA2OQ==", "bodyText": "It's a little strange that we're mocking the class that we're testing here. Could we test on a real WorkerMetricsGroup object and mock its dependencies (specifically, the ConnectMetrics object that it takes in its constructor) instead? Might be a bit more work but would give us stronger guarantees about the accuracy and coverage of these tests.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444445069", "createdAt": "2020-06-23T19:05:56Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNTk5OA==", "bodyText": "Yeah I started doing that. It got very messy as the constructor for WorkerMetricsGroup has a lot of dependencies. I'm happy to give it another go though.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444715998", "createdAt": "2020-06-24T08:03:08Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NTA2OQ=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTI3ODk0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTowODoxNVrOGn22hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowMzo1OFrOGoHVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjM0MA==", "bodyText": "Nit: can probably just use the @Mock annotation and make these instance instead of local variables so that we don't have to repeat this code at the beginning of each test.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444446340", "createdAt": "2020-06-23T19:08:15Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDQ2Ng==", "bodyText": "Ahh, I see--we construct a connector status listener for some and a task status listener for others. Honestly, I think it's probably fine if we just make both available as instance variables and @Mock them.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444454466", "createdAt": "2020-06-23T19:23:46Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjM0MA=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNjQxMA==", "bodyText": "Yeah, I think it should be fine to do it with annotated class level variables", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444716410", "createdAt": "2020-06-24T08:03:58Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjM0MA=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTMwNTExOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToxNjozMlrOGn3HvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowNDoxMVrOGoHV6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDc0OQ==", "bodyText": "Nit: looks like similar calls use eq(connector) instead of connector. I think they both work but we should stick to one or the other.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444450749", "createdAt": "2020-06-23T19:16:32Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNjUyMg==", "bodyText": "Good point. Will fix.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444716522", "createdAt": "2020-06-24T08:04:11Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDc0OQ=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTMxMTg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToxODo0NVrOGn3MGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODowNDoyOVrOGoHWiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MTg2Nw==", "bodyText": "Nit: I think it might make more sense if the expectations are set in chronological order instead of grouping by which mocked instance is having expectations set. So in this case, this line would be moved after the expectation for delegate::onStartup and before the one for delegate::onFailure. But not a big deal, if you think this is more readable feel free to leave as-is.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444451867", "createdAt": "2020-06-23T19:18:45Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(connector);\n+        expectLastCall();\n+\n+        mockWorkerMetricsGroup.recordConnectorStartupSuccess();\n+        expectLastCall();\n+\n+        PowerMock.replayAll();\n+\n+        connectorListener.onStartup(connector);\n+\n+        PowerMock.verifyAll();\n+    }\n+\n+    @Test\n+    public void testConnectorFailureAfterStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(eq(connector));\n+        expectLastCall();\n+\n+        delegate.onFailure(eq(connector), eq(exception));\n+        expectLastCall();\n+\n+        mockWorkerMetricsGroup.recordConnectorStartupSuccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNjY4Mw==", "bodyText": "No argument from me. I'll change it.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444716683", "createdAt": "2020-06-24T08:04:29Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerMetricsGroupTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.easymock.EasyMock.eq;\n+import static org.powermock.api.easymock.PowerMock.createStrictMock;\n+import static org.powermock.api.easymock.PowerMock.expectLastCall;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Sensor.class})\n+public class WorkerMetricsGroupTest {\n+    private final String connector = \"org.FakeConnector\";\n+    private final ConnectorTaskId task = new ConnectorTaskId(connector, 0);\n+    private final RuntimeException exception = new RuntimeException();\n+\n+    @Test\n+    public void testConnectorStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(connector);\n+        expectLastCall();\n+\n+        mockWorkerMetricsGroup.recordConnectorStartupSuccess();\n+        expectLastCall();\n+\n+        PowerMock.replayAll();\n+\n+        connectorListener.onStartup(connector);\n+\n+        PowerMock.verifyAll();\n+    }\n+\n+    @Test\n+    public void testConnectorFailureAfterStartupRecordedMetrics() {\n+        final WorkerMetricsGroup mockWorkerMetricsGroup = createStrictMock(WorkerMetricsGroup.class);\n+        final ConnectorStatus.Listener delegate = createStrictMock(ConnectorStatus.Listener.class);\n+        final WorkerMetricsGroup.ConnectorStatusListener connectorListener = mockWorkerMetricsGroup.new ConnectorStatusListener(delegate);\n+\n+        delegate.onStartup(eq(connector));\n+        expectLastCall();\n+\n+        delegate.onFailure(eq(connector), eq(exception));\n+        expectLastCall();\n+\n+        mockWorkerMetricsGroup.recordConnectorStartupSuccess();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MTg2Nw=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTMyNDUyOnYy", "diffSide": "LEFT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyMjo1NlrOGn3UoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNjo0MzoyNVrOI_fnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDA0OA==", "bodyText": "It's unfortunate that we're losing test coverage here, especially since it makes issues like the one that necessitates this PR more likely as we can't prevent regressions. Is there a way we can keep some of this testing logic, either through modifying the WorkerTest or by relocating it to the WorkerMetricsGroupTest?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444454048", "createdAt": "2020-06-23T19:22:56Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java", "diffHunk": "@@ -336,14 +336,11 @@ public void testStartConnectorFailure() throws Exception {\n             assertEquals(exception, e.getCause());\n         }\n \n-        assertStartupStatistics(worker, 1, 1, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxODgwMw==", "bodyText": "Yes, I understand where you're coming from. I suppose the thing is that it's no longer the Worker's responsibility to record these metrics, so checking for them in the Worker Unit Test doesn't seem the right spot. The WorkerMetricsGroupTest tests the operation of the recording through the new tests. So I think what we're missing is something that checks that the Worker calls the wrapped status listener when we expect it to. I'll have a think about it  some more.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r444718803", "createdAt": "2020-06-24T08:08:22Z", "author": {"login": "michael-carter-instaclustr"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java", "diffHunk": "@@ -336,14 +336,11 @@ public void testStartConnectorFailure() throws Exception {\n             assertEquals(exception, e.getCause());\n         }\n \n-        assertStartupStatistics(worker, 1, 1, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDA0OA=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQ0OTI4NQ==", "bodyText": "Both of you raise good points. But I tend to agree with @C0urante that it's better to keep these checks. @michael-carter-instaclustr is right that the new WorkerMetricsGroupTest is where we should validate that WorkerMetricsGroup works correctly. These assertions, however, serve to verify that the Worker is calling the WorkerMetricsGroup correctly, and they serve to help detect regressions. Besides, there still are lots of places within WorkerTest where the assertStartupStatistics(...) method is still called, so why keep only some of these rather than keep them all?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603449285", "createdAt": "2021-03-29T16:43:25Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java", "diffHunk": "@@ -336,14 +336,11 @@ public void testStartConnectorFailure() throws Exception {\n             assertEquals(exception, e.getCause());\n         }\n \n-        assertStartupStatistics(worker, 1, 1, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDA0OA=="}, "originalCommit": {"oid": "70b2db9a68ba0c9a86455779344cece99e221ae9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1OTYxNzQyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNToxNDo0M1rOI3sSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNlQxNToxNDo0M1rOI3sSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTI2ODI5Ng==", "bodyText": "Let's avoid unnecessary changes.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r595268296", "createdAt": "2021-03-16T15:14:43Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -191,9 +191,9 @@ public void transitionTo(TargetState state) {\n         consumer.wakeup();\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzQ3ODQ4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTozODowOVrOI_coHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTozODowOVrOI_coHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQwMDIyMQ==", "bodyText": "Nit: the methods of the ConnectorStatusListener and TaskStatusListener classes are in very different orders. It would help readability to have them in the same order. IMO, the order of the TaskStatusListener methods is nice because it follows the lifecycle.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603400221", "createdAt": "2021-03-29T15:38:09Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzQ5MzYzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0MToxNFrOI_cxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0MToxNFrOI_cxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQwMjYwNw==", "bodyText": "Why is the order of these methods different than in ConnectorStatusListener?\nAlso, the TaskStatusListener methods always forward the method to the delegate last, whereas the methods of the ConnectorStatusListener use a mixture. Let's make them consistent.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603402607", "createdAt": "2021-03-29T15:41:14Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerMetricsGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.CumulativeSum;\n+import org.apache.kafka.common.metrics.stats.Frequencies;\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+import java.util.Map;\n+\n+class WorkerMetricsGroup {\n+    private final ConnectMetrics.MetricGroup metricGroup;\n+    private final Sensor connectorStartupAttempts;\n+    private final Sensor connectorStartupSuccesses;\n+    private final Sensor connectorStartupFailures;\n+    private final Sensor connectorStartupResults;\n+    private final Sensor taskStartupAttempts;\n+    private final Sensor taskStartupSuccesses;\n+    private final Sensor taskStartupFailures;\n+    private final Sensor taskStartupResults;\n+\n+    public WorkerMetricsGroup(final Map<String, WorkerConnector> connectors, Map<ConnectorTaskId, WorkerTask> tasks, ConnectMetrics connectMetrics) {\n+        ConnectMetricsRegistry registry = connectMetrics.registry();\n+        metricGroup = connectMetrics.group(registry.workerGroupName());\n+\n+        metricGroup.addValueMetric(registry.connectorCount, now -> (double) connectors.size());\n+        metricGroup.addValueMetric(registry.taskCount, now -> (double) tasks.size());\n+\n+        MetricName connectorFailurePct = metricGroup.metricName(registry.connectorStartupFailurePercentage);\n+        MetricName connectorSuccessPct = metricGroup.metricName(registry.connectorStartupSuccessPercentage);\n+        Frequencies connectorStartupResultFrequencies = Frequencies.forBooleanValues(connectorFailurePct, connectorSuccessPct);\n+        connectorStartupResults = metricGroup.sensor(\"connector-startup-results\");\n+        connectorStartupResults.add(connectorStartupResultFrequencies);\n+\n+        connectorStartupAttempts = metricGroup.sensor(\"connector-startup-attempts\");\n+        connectorStartupAttempts.add(metricGroup.metricName(registry.connectorStartupAttemptsTotal), new CumulativeSum());\n+\n+        connectorStartupSuccesses = metricGroup.sensor(\"connector-startup-successes\");\n+        connectorStartupSuccesses.add(metricGroup.metricName(registry.connectorStartupSuccessTotal), new CumulativeSum());\n+\n+        connectorStartupFailures = metricGroup.sensor(\"connector-startup-failures\");\n+        connectorStartupFailures.add(metricGroup.metricName(registry.connectorStartupFailureTotal), new CumulativeSum());\n+\n+        MetricName taskFailurePct = metricGroup.metricName(registry.taskStartupFailurePercentage);\n+        MetricName taskSuccessPct = metricGroup.metricName(registry.taskStartupSuccessPercentage);\n+        Frequencies taskStartupResultFrequencies = Frequencies.forBooleanValues(taskFailurePct, taskSuccessPct);\n+        taskStartupResults = metricGroup.sensor(\"task-startup-results\");\n+        taskStartupResults.add(taskStartupResultFrequencies);\n+\n+        taskStartupAttempts = metricGroup.sensor(\"task-startup-attempts\");\n+        taskStartupAttempts.add(metricGroup.metricName(registry.taskStartupAttemptsTotal), new CumulativeSum());\n+\n+        taskStartupSuccesses = metricGroup.sensor(\"task-startup-successes\");\n+        taskStartupSuccesses.add(metricGroup.metricName(registry.taskStartupSuccessTotal), new CumulativeSum());\n+\n+        taskStartupFailures = metricGroup.sensor(\"task-startup-failures\");\n+        taskStartupFailures.add(metricGroup.metricName(registry.taskStartupFailureTotal), new CumulativeSum());\n+    }\n+\n+    void close() {\n+        metricGroup.close();\n+    }\n+\n+    void recordConnectorStartupFailure() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupFailures.record(1.0);\n+        connectorStartupResults.record(0.0);\n+    }\n+\n+    void recordConnectorStartupSuccess() {\n+        connectorStartupAttempts.record(1.0);\n+        connectorStartupSuccesses.record(1.0);\n+        connectorStartupResults.record(1.0);\n+    }\n+\n+    void recordTaskFailure() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupFailures.record(1.0);\n+        taskStartupResults.record(0.0);\n+    }\n+\n+    void recordTaskSuccess() {\n+        taskStartupAttempts.record(1.0);\n+        taskStartupSuccesses.record(1.0);\n+        taskStartupResults.record(1.0);\n+    }\n+\n+    protected ConnectMetrics.MetricGroup metricGroup() {\n+        return metricGroup;\n+    }\n+\n+    ConnectorStatus.Listener wrapStatusListener(ConnectorStatus.Listener delegateListener) {\n+        return new ConnectorStatusListener(delegateListener);\n+    }\n+\n+    TaskStatus.Listener wrapStatusListener(TaskStatus.Listener delegateListener) {\n+        return new TaskStatusListener(delegateListener);\n+    }\n+\n+    class ConnectorStatusListener implements ConnectorStatus.Listener {\n+        private final ConnectorStatus.Listener delegateListener;\n+        private volatile boolean startupSucceeded = false;\n+\n+        ConnectorStatusListener(ConnectorStatus.Listener delegateListener) {\n+            this.delegateListener = delegateListener;\n+        }\n+\n+        @Override\n+        public void onShutdown(final String connector) {\n+            delegateListener.onShutdown(connector);\n+        }\n+\n+        @Override\n+        public void onFailure(final String connector, final Throwable cause) {\n+            if (!startupSucceeded) {\n+                recordConnectorStartupFailure();\n+            }\n+            delegateListener.onFailure(connector, cause);\n+        }\n+\n+        @Override\n+        public void onPause(final String connector) {\n+            delegateListener.onPause(connector);\n+        }\n+\n+        @Override\n+        public void onResume(final String connector) {\n+            delegateListener.onResume(connector);\n+        }\n+\n+        @Override\n+        public void onStartup(final String connector) {\n+            delegateListener.onStartup(connector);\n+            startupSucceeded = true;\n+            recordConnectorStartupSuccess();\n+        }\n+\n+        @Override\n+        public void onDeletion(final String connector) {\n+            delegateListener.onDeletion(connector);\n+        }\n+    }\n+\n+    class TaskStatusListener implements TaskStatus.Listener {\n+        private final TaskStatus.Listener delegatedListener;\n+        private volatile boolean startupSucceeded = false;\n+\n+        TaskStatusListener(TaskStatus.Listener delegatedListener) {\n+            this.delegatedListener = delegatedListener;\n+        }\n+\n+        @Override\n+        public void onStartup(final ConnectorTaskId id) {\n+            recordTaskSuccess();\n+            startupSucceeded = true;\n+            delegatedListener.onStartup(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzUxMTcxOnYy", "diffSide": "LEFT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0NDo0NFrOI_c8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0NDo0NFrOI_c8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQwNTM0MQ==", "bodyText": "We're removing the INFO-level log message here, which we use to help identify that the worker task entered this method. It might be good to keep an INFO-level log message here, but use something like `{} Executing source task\". WDYT?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603405341", "createdAt": "2021-03-29T15:44:44Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -225,12 +225,16 @@ private synchronized void tryStop() {\n         }\n     }\n \n+    @Override\n+    protected void initializeAndStart() {\n+        task.initialize(new WorkerSourceTaskContext(offsetReader, this, configState));\n+        task.start(taskConfig);\n+        log.info(\"{} Source task finished initialization and start\", this);\n+    }\n+\n     @Override\n     public void execute() {\n         try {\n-            task.initialize(new WorkerSourceTaskContext(offsetReader, this, configState));\n-            task.start(taskConfig);\n-            log.info(\"{} Source task finished initialization and start\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzUzNzQ5OnYy", "diffSide": "LEFT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0OTozNVrOI_dLvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNTo0OTozNVrOI_dLvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQwOTM0Mg==", "bodyText": "We never really had an INFO-level log message here (unlike WorkerSourceTask.execute(), though we could always tell by the INFO-level log message in initializeAndStart(). Since the latter now does a bit more work, it probably is better to have an INFO-level log message here at the start of execute(). What do you think about adding an INFO-level log message here, using something like {} Executing sink task\" (similar to WorkerSourceTask.execute()`)?", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603409342", "createdAt": "2021-03-29T15:49:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -191,9 +191,9 @@ public void transitionTo(TargetState state) {\n         consumer.wakeup();\n     }\n \n+\n     @Override\n     public void execute() {\n-        initializeAndStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzgxMzYxMzkyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNjowNDo0M1rOI_d6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yOVQxNjowNDo0M1rOI_d6nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzQyMTM0Mw==", "bodyText": "I see how you've just pulled the WorkerSinkTask.initializeAndStart() method up to this abstract class (per @C0urante's suggestion. That is a nice clean way to encapsulate that logic into the base class and keep the metrics behavior hidden from the subclasses. Nicely done.\nIt is a tiny bit unfortunate that the tests need to do something like:\n        workerSourceTask.initialize(TASK_CONFIG);   // This just sets the config on the worker task\n        workerSourceTask.initializeAndStart();            // This calls task.initialize(...) and task.start(...)\n        workerSourceTask.execute();\n\nBut the initializeAndStart() method in the WorkerSinkTask has been around since the beginning, and it's probably not worth changing here. After all, using initializeAndStart() still makes sense within the WorkerSinkTask and now also the WorkerTask and WorkerSourceTask classes. So I'm fine with enlisting that method name as-is.", "url": "https://github.com/apache/kafka/pull/8844#discussion_r603421343", "createdAt": "2021-03-29T16:04:43Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -151,6 +151,8 @@ public void removeMetrics() {\n         taskMetricsGroup.close();\n     }\n \n+    protected abstract void initializeAndStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "730eb2fb70642ad81f4d30a5bd88c55f1a735be5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2355, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}