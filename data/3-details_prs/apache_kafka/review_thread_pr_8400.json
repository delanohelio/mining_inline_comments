{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njg1NDM1", "number": 8400, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrODth6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrODth6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDY4MTQyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrOF_AYkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrOF_AYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMDg5OQ==", "bodyText": "This is the fix", "url": "https://github.com/apache/kafka/pull/8400#discussion_r401610899", "createdAt": "2020-04-01T13:23:24Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -399,11 +399,13 @@ private void maybeUpdateKeyChangingRepartitionNodeMap() {\n         final Set<StreamsGraphNode> mergeNodeKeyChangingParentsToRemove = new HashSet<>();\n         for (final StreamsGraphNode mergeNode : mergeNodes) {\n             mergeNodesToKeyChangers.put(mergeNode, new LinkedHashSet<>());\n-            final Collection<StreamsGraphNode> keys = keyChangingOperationsToOptimizableRepartitionNodes.keySet();\n-            for (final StreamsGraphNode key : keys) {\n-                final StreamsGraphNode maybeParentKey = findParentNodeMatching(mergeNode, node -> node.parentNodes().contains(key));\n-                if (maybeParentKey != null) {\n-                    mergeNodesToKeyChangers.get(mergeNode).add(key);\n+            final Set<Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>>> entrySet = keyChangingOperationsToOptimizableRepartitionNodes.entrySet();\n+            for (final Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>> entry : entrySet) {\n+                if (mergeNodeHasRepartitionChildren(mergeNode, entry.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3166, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}