{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODgwMTMz", "number": 7891, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxODoxNjo1NVrODXVzKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxODoxNjo1NVrODXVzKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODAxMDAwOnYy", "diffSide": "RIGHT", "path": "docs/ops.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxODoxNjo1NVrOFcmeRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjoxMDoxOVrOFq2DTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzNDc5MQ==", "bodyText": "nit: as long as we are in here\n\nrestore leadership to the preferred replicas", "url": "https://github.com/apache/kafka/pull/7891#discussion_r365534791", "createdAt": "2020-01-11T18:16:55Z", "author": {"login": "hachikuji"}, "path": "docs/ops.html", "diffHunk": "@@ -87,7 +87,7 @@ <h4><a id=\"basic_ops_leader_balancing\" href=\"#basic_ops_leader_balancing\">Balanc\n \n   Whenever a broker stops or crashes, leadership for that broker's partitions transfers to other replicas. When the broker is restarted it will only be a follower for all its partitions, meaning it will not be used for client reads and writes.\n   <p>\n-  To avoid this imbalance, Kafka has a notion of preferred replicas. If the list of replicas for a partition is 1,5,9 then node 1 is preferred as the leader to either node 5 or 9 because it is earlier in the replica list. By default the Kafka cluster will try to restore leadership to the restored replicas.  This behaviour is configured with:\n+  To avoid this imbalance, Kafka has a notion of preferred replicas. If the list of replicas for a partition is 1,5,9 then node 1 is preferred as the leader to either node 5 or 9 because it is earlier in the replica list. By default the Kafka cluster will try to restore leadership to the restored replicas. This behaviour is configured with:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MDA5NQ==", "bodyText": "Applied. As you can see, I also found another one.", "url": "https://github.com/apache/kafka/pull/7891#discussion_r380470095", "createdAt": "2020-02-18T06:10:19Z", "author": {"login": "dongjinleekr"}, "path": "docs/ops.html", "diffHunk": "@@ -87,7 +87,7 @@ <h4><a id=\"basic_ops_leader_balancing\" href=\"#basic_ops_leader_balancing\">Balanc\n \n   Whenever a broker stops or crashes, leadership for that broker's partitions transfers to other replicas. When the broker is restarted it will only be a follower for all its partitions, meaning it will not be used for client reads and writes.\n   <p>\n-  To avoid this imbalance, Kafka has a notion of preferred replicas. If the list of replicas for a partition is 1,5,9 then node 1 is preferred as the leader to either node 5 or 9 because it is earlier in the replica list. By default the Kafka cluster will try to restore leadership to the restored replicas.  This behaviour is configured with:\n+  To avoid this imbalance, Kafka has a notion of preferred replicas. If the list of replicas for a partition is 1,5,9 then node 1 is preferred as the leader to either node 5 or 9 because it is earlier in the replica list. By default the Kafka cluster will try to restore leadership to the restored replicas. This behaviour is configured with:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzNDc5MQ=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4450, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}