{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODIxNDA3", "number": 9697, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxOToyMVrOFBANMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNjozOFrOFD70vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk2MjczOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxOToyMVrOH_kTvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxOToyMVrOH_kTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzIxMg==", "bodyText": "We need to throw the error or the task gets lost and we drop records", "url": "https://github.com/apache/kafka/pull/9697#discussion_r536417212", "createdAt": "2020-12-04T22:19:21Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();\n+                if (throwable instanceof RuntimeException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d87670e997a9c0a114615fb3e713a9a19f2d7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk2NjYxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyMDo0MVrOH_kV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo0NzozM1rOICoxKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg==", "bodyText": "removing from the thread list does 2 things\n\nkeeps DEAD threads out of the list as kip-663 dictates\nensures the next thread has the same name", "url": "https://github.com/apache/kafka/pull/9697#discussion_r536417752", "createdAt": "2020-12-04T22:20:41Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608d87670e997a9c0a114615fb3e713a9a19f2d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4NDM3MQ==", "bodyText": "To ensure #2 holds, do we need to have a mutex on thread creation? Or does it not matter?", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539584371", "createdAt": "2020-12-09T19:27:10Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg=="}, "originalCommit": {"oid": "608d87670e997a9c0a114615fb3e713a9a19f2d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNjAxMQ==", "bodyText": "It won't matter. Ensures is too strong of a word. IF there has been other threads removed before this it may have a different name. However this ensures that the replacement thread will never have a thread index larger than the number of threads", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539636011", "createdAt": "2020-12-09T20:47:33Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,18 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];\n+                threads.remove(deadThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzc1Mg=="}, "originalCommit": {"oid": "608d87670e997a9c0a114615fb3e713a9a19f2d7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjczOTI1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMjo1N1rOIA-xdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMjo1N1rOIA-xdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTM4Mw==", "bodyText": "nit: \"can not\" -> \"cannot\", same below", "url": "https://github.com/apache/kafka/pull/9697#discussion_r537899383", "createdAt": "2020-12-07T23:02:57Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,27 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                log.warn(\"The global thread can not be replaced. Reverting to shutting down the client.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc157ebc253d32831424a43f13b614f41a54d36"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzkyMTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToyNTo1NVrOIClkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NzowMFrOICrWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzUzOA==", "bodyText": "Is this equivalent to Thread.currentThead()?", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539583538", "createdAt": "2020-12-09T19:25:55Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODM0Ng==", "bodyText": "Yep, it is now :)", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539678346", "createdAt": "2020-12-09T21:57:00Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) threads.stream().filter(n -> n.getName().equals(Thread.currentThread().getName())).toArray()[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzUzOA=="}, "originalCommit": {"oid": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODEzNTgwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDoxNjoxM1rOICnhvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NzowN1rOICrWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYxNTY3OA==", "bodyText": "It's not obvious to me how this verifies that the thread actually got replaced. Maybe an explanatory comment is in order?", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539615678", "createdAt": "2020-12-09T20:16:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,28 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODQwNQ==", "bodyText": "good idea", "url": "https://github.com/apache/kafka/pull/9697#discussion_r539678405", "createdAt": "2020-12-09T21:57:07Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,28 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYxNTY3OA=="}, "originalCommit": {"oid": "060a0a494a89fd97feb6f3c0ee0c9ccf23770707"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQzNDc5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxMjo1MVrOIDOJGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNTo1NFrOIDR1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM0Nw==", "bodyText": "Do we need to shutdown the dead stream thread? completeShutDown() will be called anyways.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540248347", "createdAt": "2020-12-10T15:12:51Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwODc1Mg==", "bodyText": "I don't think it matters, it just set the thread state earlier, but we can delete it", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540308752", "createdAt": "2020-12-10T16:25:54Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0ODM0Nw=="}, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjQ0MTc2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNToxNDoxNVrOIDONeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyODoyNlrOIDR_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTQ2NQ==", "bodyText": "I think it would be cleaner to extract this code to a separate method.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540249465", "createdAt": "2020-12-10T15:14:15Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();\n+                if (throwable instanceof RuntimeException) {\n+                    throw (RuntimeException) throwable;\n+                } else if (throwable instanceof Error) {\n+                    throw (Error) throwable;\n+                } else {\n+                    throw new RuntimeException(\"Unexpected checked exception caught in the uncaught exception handler\", throwable);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMTQzNw==", "bodyText": "we can do that", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540311437", "createdAt": "2020-12-10T16:28:26Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -444,6 +444,25 @@ private void handleStreamsUncaughtException(final Throwable throwable,\n                     \"The old handler will be ignored as long as a new handler is set.\");\n         }\n         switch (action) {\n+            case REPLACE_THREAD:\n+                if (globalStreamThread != null && Thread.currentThread().getName().equals(globalStreamThread.getName())) {\n+                    log.warn(\"The global thread cannot be replaced. Reverting to shutting down the client.\");\n+                    log.error(\"Encountered the following exception during processing \" +\n+                            \"and the registered exception handler opted to \" + action + \".\" +\n+                            \" The streams client is going to shut down now. \", throwable);\n+                    close(Duration.ZERO);\n+                }\n+                final StreamThread deadThread = (StreamThread) Thread.currentThread();\n+                threads.remove(deadThread);\n+                addStreamThread();\n+                deadThread.shutdown();\n+                if (throwable instanceof RuntimeException) {\n+                    throw (RuntimeException) throwable;\n+                } else if (throwable instanceof Error) {\n+                    throw (Error) throwable;\n+                } else {\n+                    throw new RuntimeException(\"Unexpected checked exception caught in the uncaught exception handler\", throwable);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0OTQ2NQ=="}, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjYxNzI3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo0NjoyNlrOIDP27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozNzowMFrOIDScIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NjQ2MQ==", "bodyText": "Could you please be a bit clearer in the explanatory comment? BTW, we execute this test also once with just one stream thread so the 2 stream threads in the comment are not correct. Also, wouldn't it be better to explain the verification in the call to assertThat() instead of in a comment? You can pass a reason to the method.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540276461", "createdAt": "2020-12-10T15:46:26Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxODc1NA==", "bodyText": "I edited the test to be based on the number of thread instead of hard coding. And gave a reason", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540318754", "createdAt": "2020-12-10T16:37:00Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NjQ2MQ=="}, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjYyNjEzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo0ODowM1rOIDP8Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzoyMToyM1rOIDnXUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NzgxOQ==", "bodyText": "A test is missing for a global stream thread that calls the uncaught exception handler.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540277819", "createdAt": "2020-12-10T15:48:03Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+        }\n+    }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY2MTU4NQ==", "bodyText": "added", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540661585", "createdAt": "2020-12-11T03:21:23Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+\n+            produceMessages(0L, inputTopic, \"A\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+\n+            assertThat(processorValueCollector.size(), equalTo(3));\n+            //because we only have 2 threads at the start and each record kills a thread we must have replaced threads\n+        }\n+    }\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NzgxOQ=="}, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjY1NjIxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNTo1Mzo1OFrOIDQO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1MjowM1rOIDTOcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4MjYwMA==", "bodyText": "I think it would be better to have a test that shows that a new thread that replaced a failed one, actually is able to process records. So, I would let the new thread process some records and then shutdown the client with a normal close.\nMaybe similar applies to the shutdown tests. First let the client/application process some records and then throw an exception that shuts down the client/application. I guess, this last paragraph is something for a separate PR.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540282600", "createdAt": "2020-12-10T15:53:58Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMTYzMg==", "bodyText": "We can change the test so that we verify the replaced threads can process records.\nI am not sure that is necessary for the shutdown as testing if streams can process some records once started should be tested elsewhere, but in any case I think that the PR is not the place for this discussion", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540331632", "createdAt": "2020-12-10T16:52:03Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -202,6 +213,29 @@ private void testShutdownApplication(final int numThreads) throws InterruptedExc\n             assertThat(processorValueCollector.size(), equalTo(1));\n         }\n     }\n+\n+    private void testReplaceThreads(final int numThreads) throws InterruptedException {\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, numThreads);\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+\n+            final AtomicInteger count = new AtomicInteger();\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> {\n+                count.getAndIncrement();\n+                if (count.get() > 2) {\n+                    return SHUTDOWN_CLIENT;\n+                }\n+                return REPLACE_THREAD;\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4MjYwMA=="}, "originalCommit": {"oid": "d211da9b3a4ec6983586e3d3d9323db24b88cc18"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY3NDAwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1OTo0MVrOIDzyEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1OTo0MVrOIDzyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NTA0Mw==", "bodyText": "Please rename to replaceStreamThread().", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540865043", "createdAt": "2020-12-11T10:59:41Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -436,6 +436,26 @@ private void defaultStreamsUncaughtExceptionHandler(final Throwable throwable) {\n         }\n     }\n \n+    private void replaceThreadHelper(final Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY4OTg0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowMzozOFrOIDz69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozMTowNVrOIEAYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NzMxNg==", "bodyText": "The point of this test should be that a global stream thread is not replaced but the client is shutdown instead. Hence, the uncaught exception handler should return REPLACE_THREAD, not SHUTDOWN_CLIENT.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540867316", "createdAt": "2020-12-11T11:03:38Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -155,16 +171,46 @@ public void shouldShutdownSingleThreadApplication() throws InterruptedException\n         testShutdownApplication(1);\n     }\n \n+    @Test\n+    public void testGlobalThreadException() throws InterruptedException {\n+        builder  = new StreamsBuilder();\n+        builder.addGlobalStore(\n+            new KeyValueStoreBuilder<>(\n+                Stores.persistentKeyValueStore(\"globalStore\"),\n+                Serdes.String(),\n+                Serdes.String(),\n+                CLUSTER.time\n+            ),\n+            inputTopic,\n+            Consumed.with(Serdes.String(), Serdes.String()),\n+            () -> new ShutdownProcessor(processorValueCollector)\n+        );\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 0);\n+\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> SHUTDOWN_CLIENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MTUxNQ==", "bodyText": "I guess we can test that here at the same time", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541071515", "createdAt": "2020-12-11T16:31:05Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -155,16 +171,46 @@ public void shouldShutdownSingleThreadApplication() throws InterruptedException\n         testShutdownApplication(1);\n     }\n \n+    @Test\n+    public void testGlobalThreadException() throws InterruptedException {\n+        builder  = new StreamsBuilder();\n+        builder.addGlobalStore(\n+            new KeyValueStoreBuilder<>(\n+                Stores.persistentKeyValueStore(\"globalStore\"),\n+                Serdes.String(),\n+                Serdes.String(),\n+                CLUSTER.time\n+            ),\n+            inputTopic,\n+            Consumed.with(Serdes.String(), Serdes.String()),\n+            () -> new ShutdownProcessor(processorValueCollector)\n+        );\n+        properties.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 0);\n+\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n+            kafkaStreams.setUncaughtExceptionHandler(exception -> SHUTDOWN_CLIENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NzMxNg=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjY5ODg0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNTo1M1rOID0ANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNTo1M1rOID0ANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2ODY2MA==", "bodyText": "Please rename to something like shouldShutDownClientIfGlobalStreamThreadWantsToReplaceThread().", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540868660", "createdAt": "2020-12-11T11:05:53Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -155,16 +171,46 @@ public void shouldShutdownSingleThreadApplication() throws InterruptedException\n         testShutdownApplication(1);\n     }\n \n+    @Test\n+    public void testGlobalThreadException() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjcwMjA3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowNjozOFrOID0B-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0NjozNlrOIEDUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ==", "bodyText": "I would rename it to REPLACE_STREAM_THREAD.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r540869115", "createdAt": "2020-12-11T11:06:38Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODM1NQ==", "bodyText": "Oh, good catch.\nJust a quick question: did we misname this option in the KIP? A StreamThread is a specific kind of thread. What I mean is that a GlobalStreamThread is not a StreamThread. Perhaps REPLACE_THREAD and SHUTDOWN_THREAD would have been better, more general names, for these. If you agree, I think we can just amend the KIP and fix it in this PR.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541028355", "createdAt": "2020-12-11T15:28:59Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MDUyNw==", "bodyText": "It should be the string is REPLACE_THREAD. Ill just fix that, its just left over from a period of time where we thought of calling it REPLACE_STREAM_THREAD", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541070527", "createdAt": "2020-12-11T16:29:38Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5OTU0Nw==", "bodyText": "I actually would be in favor of calling the enum value REPLACE_STREAM_THREAD. A stream thread is a stream thread and a global stream thread is a global stream thread. I am aware that the KIP calls the enum value differently, but we also have a config that is called 'NUM_STREAM_THREADS_CONFIG' and we have also 'addStreamThread()' and removeStreamThread(). So I guess, the name to the outside of this is stream thread and not thread. We have also other threads in Kafka Streams like the state directory cleaner thread and the RocksDB metrics recording thread.", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541099547", "createdAt": "2020-12-11T17:13:38Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNDYwOQ==", "bodyText": "What if we add an option to replace the global thread?", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541114609", "createdAt": "2020-12-11T17:38:26Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExOTY3MQ==", "bodyText": "Ah, now I got it! Sorry! Makes sense! In that case we can reuse REPLACE_THREAD also for the global stream thread. Forgot about that!", "url": "https://github.com/apache/kafka/pull/9697#discussion_r541119671", "createdAt": "2020-12-11T17:46:36Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/errors/StreamsUncaughtExceptionHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n      * Enumeration that describes the response from the exception handler.\n      */\n     enum StreamThreadExceptionResponse {\n+        REPLACE_THREAD(0, \"REPLACE_STREAM_THREAD\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2OTExNQ=="}, "originalCommit": {"oid": "d5b170ca0c3d7f06ffcda1483ce6fad3cb485de5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3695, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}