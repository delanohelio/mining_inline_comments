{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTIwODg2", "number": 7928, "title": "KAFKA-9152; Improve Sensor Retrieval", "bodyText": "This ticket shall improve two aspects of the retrieval of sensors:\nhttps://issues.apache.org/jira/browse/KAFKA-9152\n\n\nCurrently, when a sensor is retrieved with *Metrics.*Sensor() (e.g. ThreadMetrics.createTaskSensor()) after it was created with the same method *Metrics.*Sensor(), the sensor is added again to the corresponding queue in Sensors (e.g. threadLevelSensors) in StreamsMetricsImpl. Those queues are used to remove the sensors when removeAllLevelSensors() is called. Having multiple times the same sensors in this queue is not an issue from a correctness point of view. However, it would reduce the footprint to only store a sensor once in those queues.\n\n\nWhen a sensor is retrieved, the current code attempts to create a new sensor and to add to it again the corresponding metrics. This could be avoided.\n\n\nBoth aspects could be improved by checking whether a sensor already exists by calling getSensor() on the Metrics object and checking the return value.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-10T16:13:44Z", "url": "https://github.com/apache/kafka/pull/7928", "merged": true, "mergeCommit": {"oid": "2e351e06b3557ed63a54946f33fd1c0f0f136b50"}, "closed": true, "closedAt": "2020-01-24T21:55:51Z", "author": {"login": "highluck"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8WJS7gFqTM0NTU3OTkyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9mK5KAFqTM0ODI0NTkyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTc5OTI4", "url": "https://github.com/apache/kafka/pull/7928#pullrequestreview-345579928", "createdAt": "2020-01-21T00:17:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMDoxNzoxN1rOFfrnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMDozODoxOVrOFfrzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2NDgxOA==", "bodyText": "Although, you simplified this code, you did not apply all simplifications I proposed in PR #7914. I think you can even simplify this code further as shown here:\nreturn Optional.ofNullable(metrics.getSensor(fullSensorName)).orElseGet(() -> {\n    threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);\n    return metrics.sensor(fullSensorName, recordingLevel, parents);\n});\n\nThis simplification can be applied also to the other methods below.\nIf you have any concerns about this simplifications please share your thoughts.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r368764818", "createdAt": "2020-01-21T00:17:17Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -210,11 +211,13 @@ public final Sensor threadLevelSensor(final String threadId,\n                                           final Sensor... parents) {\n         final String key = threadSensorPrefix(threadId);\n         synchronized (threadLevelSensors) {\n-            threadLevelSensors.putIfAbsent(key, new LinkedList<>());\n             final String fullSensorName = key + SENSOR_NAME_DELIMITER + sensorName;\n-            final Sensor sensor = metrics.sensor(fullSensorName, recordingLevel, parents);\n-            threadLevelSensors.get(key).push(fullSensorName);\n-            return sensor;\n+            return Optional.ofNullable(metrics.getSensor(fullSensorName))\n+                    .orElseGet(() -> {\n+                        threadLevelSensors.putIfAbsent(key, new LinkedList<>());\n+                        threadLevelSensors.get(key).push(fullSensorName);\n+                        return metrics.sensor(fullSensorName, recordingLevel, parents);\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc2Nzg1Mg==", "bodyText": "There several issues with this test:\n\nFirst of all the test fails.\nAccording to the name of the test you want to verify threadLevelSensor(), but you call taskLevelSensor().\nSince the Metrics mock always returns the same sensor, it does not make sense to compare the sensors that are returned by the different calls to threadLevelSensor(). Such a verification will always be true. You should rather verify if method sensor() is not called on the Metrics mock. For example, the following two setups could replace setupGetSensorTest():\n\n    private void setupGetNewSensorTest(final Metrics metrics,\n                                       final String level,\n                                       final RecordingLevel recordingLevel) {\n        final String fullSensorName = fullSensorName(level);\n        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n        final Sensor[] parents = {};\n        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n        replay(metrics);\n    }\n\n    private void setupGetExistingSensorTest(final Metrics metrics,\n                                            final String level,\n                                            final RecordingLevel recordingLevel) {\n        final String fullSensorName = fullSensorName(level);\n        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n        replay(metrics);\n    }\n\nand the following two tests would replace shouldGetTaskLevelSensor():\n    @Test\n    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n\n    @Test\n    public void shouldGetExistingThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetExistingSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n\nSimilar is true for the other tests below.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r368767852", "createdAt": "2020-01-21T00:38:19Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +204,78 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+    @Test\n+    public void shouldGetSameThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetSensorTest(metrics, THREAD_ID, recordingLevel);\n+\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor preSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID, sensorName1, recordingLevel);\n+        final Sensor afterSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID, sensorName1, recordingLevel);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+        assertThat(preSensor, is(equalToObject(afterSensor)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDM1Mzc5", "url": "https://github.com/apache/kafka/pull/7928#pullrequestreview-346035379", "createdAt": "2020-01-21T16:55:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1NTowM1rOFgBbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0NTozNFrOFgDAsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjIzMA==", "bodyText": "Please use 4 spaces instead of 8 for indentation. Same applies to the changes below.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369122230", "createdAt": "2020-01-21T16:55:03Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -210,11 +211,12 @@ public final Sensor threadLevelSensor(final String threadId,\n                                           final Sensor... parents) {\n         final String key = threadSensorPrefix(threadId);\n         synchronized (threadLevelSensors) {\n-            threadLevelSensors.putIfAbsent(key, new LinkedList<>());\n             final String fullSensorName = key + SENSOR_NAME_DELIMITER + sensorName;\n-            final Sensor sensor = metrics.sensor(fullSensorName, recordingLevel, parents);\n-            threadLevelSensors.get(key).push(fullSensorName);\n-            return sensor;\n+            return Optional.ofNullable(metrics.getSensor(fullSensorName))\n+                    .orElseGet(() -> {\n+                        threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);\n+                        return metrics.sensor(fullSensorName, recordingLevel, parents);\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNzA0OQ==", "bodyText": "If a line is too long, either move right hand side of assignment to a new line. If it is still too long put each argument and the closing parenthesis on its own line. Examples are:\nfinal Sensor actualSensor = \n    streamsMetrics.storeLevelSensor(THREAD_ID, storeName, TASK_ID, sensorName1, recordingLevel);\n\nand\nfinal Sensor actualSensor = streamsMetrics.storeLevelSensor(\n    THREAD_ID, \n    storeName, \n    TASK_ID, \n    sensorName1, \n    recordingLevel\n);\n\nIn this case please use the former.\nPlease check also the other changes for too long lines.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369127049", "createdAt": "2020-01-21T17:02:59Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,171 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n+        final Sensor[] parents = {};\n+        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID,  sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewStoreLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + storeName + SENSOR_PREFIX_DELIMITER\n+            + storeName + SENSOR_PREFIX_DELIMITER + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.storeLevelSensor(THREAD_ID, storeName, TASK_ID,\n+            sensorName1, recordingLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNzUyOA==", "bodyText": "This line is too long. Please move streamsMetrics.storeLevelSensor() to new line.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369127528", "createdAt": "2020-01-21T17:03:52Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,171 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n+        final Sensor[] parents = {};\n+        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID, sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(THREAD_ID, TASK_ID,  sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewStoreLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + storeName + SENSOR_PREFIX_DELIMITER\n+            + storeName + SENSOR_PREFIX_DELIMITER + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.storeLevelSensor(THREAD_ID, storeName, TASK_ID,\n+            sensorName1, recordingLevel);\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingStoreLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID + \".task.\" + storeName + SENSOR_PREFIX_DELIMITER\n+            + storeName + SENSOR_PREFIX_DELIMITER + TASK_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.storeLevelSensor(THREAD_ID, storeName, TASK_ID,  sensorName1, recordingLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0Njk0OQ==", "bodyText": "Please extract this to its own method since the same code is also used on line 220.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369146949", "createdAt": "2020-01-21T17:43:15Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,171 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0ODA4MQ==", "bodyText": "This test replaces shouldGetThreadLevelSensor(). Thus, you can safely remove shouldGetThreadLevelSensor().", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369148081", "createdAt": "2020-01-21T17:45:34Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,171 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n+        final Sensor[] parents = {};\n+        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName =\n+            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzAwMTcw", "url": "https://github.com/apache/kafka/pull/7928#pullrequestreview-346300170", "createdAt": "2020-01-22T01:31:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTozMTo1M1rOFgONDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjowNzoxNFrOFgOq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMTQ3MQ==", "bodyText": "This should be private not public.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369331471", "createdAt": "2020-01-22T01:31:53Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,221 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n+        final Sensor[] parents = {};\n+        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    public String fullSensorName(String level) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzOTEzNQ==", "bodyText": "Please reformat as follows:\nsetupGetNewSensorTest(\n    metrics, \n    THREAD_ID + \".task.\" + storeName + SENSOR_PREFIX_DELIMITER + storeName + SENSOR_PREFIX_DELIMITER \n    + TASK_ID, \n    recordingLevel\n);\n\nThis applies also to the other locations where the second argument is too long for the line, i.e., lines 322, 343, 364, 385, 406.\nSorry if I missed that in my previous review.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369339135", "createdAt": "2020-01-22T02:07:14Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -203,6 +203,221 @@ private void setupGetSensorTest(final Metrics metrics,\n         replay(metrics);\n     }\n \n+\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n+        final Sensor[] parents = {};\n+        expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    public String fullSensorName(String level) {\n+        return INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(\n+            THREAD_ID,\n+            TASK_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(\n+            THREAD_ID,\n+            TASK_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewStoreLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + storeName + SENSOR_PREFIX_DELIMITER\n+            + storeName + SENSOR_PREFIX_DELIMITER + TASK_ID, recordingLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODk4MTMy", "url": "https://github.com/apache/kafka/pull/7928#pullrequestreview-346898132", "createdAt": "2020-01-22T20:59:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1OToyNVrOFgqyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToyNToyOFrOFgrhEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTY4Ng==", "bodyText": "Should be final here.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369799686", "createdAt": "2020-01-22T20:59:25Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -193,16 +193,235 @@ private void addSensorsOnAllLevels(final Metrics metrics, final StreamsMetricsIm\n         streamsMetrics.storeLevelSensor(THREAD_ID, TASK_ID, storeName, sensorName2, RecordingLevel.INFO);\n     }\n \n-    private void setupGetSensorTest(final Metrics metrics,\n-                                    final String level,\n-                                    final RecordingLevel recordingLevel) {\n-        final String fullSensorName =\n-            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n         final Sensor[] parents = {};\n         expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n         replay(metrics);\n     }\n \n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private String fullSensorName(String level) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTU1OQ==", "bodyText": "Why is(equalToObject(sensor))) and not just is(sensor)?", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369811559", "createdAt": "2020-01-22T21:25:09Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -193,16 +193,235 @@ private void addSensorsOnAllLevels(final Metrics metrics, final StreamsMetricsIm\n         streamsMetrics.storeLevelSensor(THREAD_ID, TASK_ID, storeName, sensorName2, RecordingLevel.INFO);\n     }\n \n-    private void setupGetSensorTest(final Metrics metrics,\n-                                    final String level,\n-                                    final RecordingLevel recordingLevel) {\n-        final String fullSensorName =\n-            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n         final Sensor[] parents = {};\n         expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n         replay(metrics);\n     }\n \n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private String fullSensorName(String level) {\n+        return INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTYzMA==", "bodyText": "same here", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369811630", "createdAt": "2020-01-22T21:25:18Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -193,16 +193,235 @@ private void addSensorsOnAllLevels(final Metrics metrics, final StreamsMetricsIm\n         streamsMetrics.storeLevelSensor(THREAD_ID, TASK_ID, storeName, sensorName2, RecordingLevel.INFO);\n     }\n \n-    private void setupGetSensorTest(final Metrics metrics,\n-                                    final String level,\n-                                    final RecordingLevel recordingLevel) {\n-        final String fullSensorName =\n-            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n         final Sensor[] parents = {};\n         expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n         replay(metrics);\n     }\n \n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private String fullSensorName(String level) {\n+        return INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTcyOQ==", "bodyText": "ditto and same for tests below, I won't repeat this comment.", "url": "https://github.com/apache/kafka/pull/7928#discussion_r369811729", "createdAt": "2020-01-22T21:25:28Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java", "diffHunk": "@@ -193,16 +193,235 @@ private void addSensorsOnAllLevels(final Metrics metrics, final StreamsMetricsIm\n         streamsMetrics.storeLevelSensor(THREAD_ID, TASK_ID, storeName, sensorName2, RecordingLevel.INFO);\n     }\n \n-    private void setupGetSensorTest(final Metrics metrics,\n-                                    final String level,\n-                                    final RecordingLevel recordingLevel) {\n-        final String fullSensorName =\n-            INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    private void setupGetNewSensorTest(final Metrics metrics,\n+                                       final String level,\n+                                       final RecordingLevel recordingLevel) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(null);\n         final Sensor[] parents = {};\n         expect(metrics.sensor(fullSensorName, recordingLevel, parents)).andReturn(sensor);\n         replay(metrics);\n     }\n \n+    private void setupGetExistingSensorTest(final Metrics metrics,\n+                                            final String level) {\n+        final String fullSensorName = fullSensorName(level);\n+        expect(metrics.getSensor(fullSensorName)).andStubReturn(sensor);\n+        replay(metrics);\n+    }\n+\n+    private String fullSensorName(String level) {\n+        return INTERNAL_PREFIX + SENSOR_PREFIX_DELIMITER + level + SENSOR_NAME_DELIMITER + sensorName1;\n+    }\n+\n+    @Test\n+    public void shouldGetNewThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetExistingThreadLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetExistingSensorTest(metrics, THREAD_ID);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n+            THREAD_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));\n+    }\n+\n+    @Test\n+    public void shouldGetNewTaskLevelSensor() {\n+        final Metrics metrics = mock(Metrics.class);\n+        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n+        setupGetNewSensorTest(metrics, THREAD_ID + \".task.\" + TASK_ID, recordingLevel);\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n+\n+        final Sensor actualSensor = streamsMetrics.taskLevelSensor(\n+            THREAD_ID,\n+            TASK_ID,\n+            sensorName1,\n+            recordingLevel\n+        );\n+\n+        verify(metrics);\n+        assertThat(actualSensor, is(equalToObject(sensor)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55a741929fa33f80b0a4bfe2bbc34942be8bb84", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/e55a741929fa33f80b0a4bfe2bbc34942be8bb84", "committedDate": "2020-01-22T23:42:31Z", "message": "KAFKA-9152; Improve Sensor Retrieval"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e55a741929fa33f80b0a4bfe2bbc34942be8bb84", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/e55a741929fa33f80b0a4bfe2bbc34942be8bb84", "committedDate": "2020-01-22T23:42:31Z", "message": "KAFKA-9152; Improve Sensor Retrieval"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjQ1OTI2", "url": "https://github.com/apache/kafka/pull/7928#pullrequestreview-348245926", "createdAt": "2020-01-24T21:52:36Z", "commit": {"oid": "e55a741929fa33f80b0a4bfe2bbc34942be8bb84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1938, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}