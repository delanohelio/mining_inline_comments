{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzQ4MDQy", "number": 9299, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyOToyNlrOEkmJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzowMDoyNVrOElpZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA5MjQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/GetOffsetShell.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyOToyNlrOHToPVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyOToyNlrOHToPVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NDI3Ng==", "bodyText": "Unrelated clean-up I noticed.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r490344276", "createdAt": "2020-09-17T15:29:26Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/tools/GetOffsetShell.scala", "diffHunk": "@@ -133,7 +133,7 @@ object GetOffsetShell {\n         }\n     }\n \n-    partitionOffsets.toSeq.sortBy { case (tp, _) => tp.partition }.foreach { case (tp, offset) =>\n+    partitionOffsets.toArray.sortBy { case (tp, _) => tp.partition }.foreach { case (tp, offset) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTYxMzY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/utils/Implicits.scala", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjowMToxN1rOHT3B8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTozOToxMlrOHVjWLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA==", "bodyText": "The name reads a tad awkwardly. I wonder if foreachKeyValue would be too verbose. Or maybe foreachMapEntry?", "url": "https://github.com/apache/kafka/pull/9299#discussion_r490586608", "createdAt": "2020-09-17T22:01:17Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODU3Nw==", "bodyText": "Or foreachPair.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r491078577", "createdAt": "2020-09-18T17:01:12Z", "author": {"login": "jsancio"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0OTY0Nw==", "bodyText": "Thanks for the feedback. I agree that the name could be improved. I was hoping for something concise and descriptive. foreachPair is not bad, but you'd expect to get a pair (tuple) and this is to avoid that. How about forKeyValue?", "url": "https://github.com/apache/kafka/pull/9299#discussion_r491149647", "createdAt": "2020-09-18T19:28:52Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0OTc5OA==", "bodyText": "Also, note that this will go away once we drop support for Scala 2.12.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r491149798", "createdAt": "2020-09-18T19:29:11Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTIzMg==", "bodyText": "forKeyValue LGTM since for is the language's keyword for foreach or map.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r491151232", "createdAt": "2020-09-18T19:32:21Z", "author": {"login": "jsancio"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2MzU5Mg==", "bodyText": "That was the motivation indeed. Great, I'll change it.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r491163592", "createdAt": "2020-09-18T20:02:02Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MTI2Mg==", "bodyText": "Checked with @hachikuji and he's fine with this change.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r492361262", "createdAt": "2020-09-21T21:39:12Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/utils/Implicits.scala", "diffHunk": "@@ -46,4 +47,21 @@ object Implicits {\n \n   }\n \n+  /**\n+   * Exposes `foreachKv` which maps to `foreachEntry` in Scala 2.13 and `foreach` in Scala 2.12\n+   * (with the help of scala.collection.compat). `foreachEntry` avoids the tuple allocation and\n+   * is more efficient.\n+   *\n+   * This was not named `foreachEntry` to avoid `unused import` warnings in Scala 2.13 (the implicit\n+   * would not be triggered in Scala 2.13 since `Map.foreachEntry` would have precedence).\n+   */\n+  @nowarn(\"cat=unused-imports\")\n+  implicit class MapExtensionMethods[K, V](private val self: scala.collection.Map[K, V]) extends AnyVal {\n+    import scala.collection.compat._\n+    def foreachKv[U](f: (K, V) => U): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NjYwOA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTExMDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzowMDoyNVrOHVO4Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMjoyN1rOHVSC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyNTg2Mw==", "bodyText": "Could we replace such asScala.forKeyValue by java Map.forEach ? We don't need to convert it to scala collection actually.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r492025863", "createdAt": "2020-09-21T13:00:25Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala", "diffHunk": "@@ -128,7 +129,7 @@ object ZkSecurityMigrator extends Logging {\n     // Now override any set system properties with explicitly-provided values from the config file\n     // Emit INFO logs due to camel-case property names encouraging mistakes -- help people see mistakes they make\n     info(s\"Found ${zkTlsConfigFileProps.size()} ZooKeeper client configuration properties in file $filename\")\n-    zkTlsConfigFileProps.asScala.foreach { case (key, value) =>\n+    zkTlsConfigFileProps.asScala.forKeyValue { (key, value) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NzgxNA==", "bodyText": "See 847ff8f for an explanation why asScala still makes sense when dealing with Properties.", "url": "https://github.com/apache/kafka/pull/9299#discussion_r492077814", "createdAt": "2020-09-21T14:12:27Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala", "diffHunk": "@@ -128,7 +129,7 @@ object ZkSecurityMigrator extends Logging {\n     // Now override any set system properties with explicitly-provided values from the config file\n     // Emit INFO logs due to camel-case property names encouraging mistakes -- help people see mistakes they make\n     info(s\"Found ${zkTlsConfigFileProps.size()} ZooKeeper client configuration properties in file $filename\")\n-    zkTlsConfigFileProps.asScala.foreach { case (key, value) =>\n+    zkTlsConfigFileProps.asScala.forKeyValue { (key, value) =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAyNTg2Mw=="}, "originalCommit": null, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1839, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}