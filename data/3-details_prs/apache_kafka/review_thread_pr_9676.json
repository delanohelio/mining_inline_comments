{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTA5NjEz", "number": 9676, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0NTo1MlrOE_0pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozNDoxOVrOFLX5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzU4Mjk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/Log.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0NTo1MlrOH9vbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0NTo1MlrOH9vbig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwMjI4Mg==", "bodyText": "Perhaps we could move this to somewhere near the top? I don't think we get much benefit by delaying the check since duplicates would be a rare case. We probably don't want to have to trust the producer state anyway after an append failure.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r534502282", "createdAt": "2020-12-02T21:45:52Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1219,6 +1219,9 @@ class Log(@volatile private var _dir: File,\n               appendInfo.logAppendTime = duplicate.timestamp\n               appendInfo.logStartOffset = logStartOffset\n             case None =>\n+              if (logDirFailureChannel.logDirIsFailed(parentDir)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6fbc4204350546883e5c664ed6ffd771327a3e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzU4NDM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/LogDirFailureChannel.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0NjoxN1rOH9vcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0NjoxN1rOH9vcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwMjQ4Mg==", "bodyText": "Maybe isOffline or hasFailed?", "url": "https://github.com/apache/kafka/pull/9676#discussion_r534502482", "createdAt": "2020-12-02T21:46:17Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/LogDirFailureChannel.scala", "diffHunk": "@@ -49,6 +49,13 @@ class LogDirFailureChannel(logDirNum: Int) extends Logging {\n       offlineLogDirQueue.add(logDir)\n   }\n \n+  /*\n+   * Return whether the given log dir is offline.\n+   */\n+  def logDirIsFailed(logDir: String): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6fbc4204350546883e5c664ed6ffd771327a3e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzU4NjM4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0Njo1M1rOH9vdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo0Njo1M1rOH9vdhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwMjc5MQ==", "bodyText": "nit: we can use assertThrows or intercept", "url": "https://github.com/apache/kafka/pull/9676#discussion_r534502791", "createdAt": "2020-12-02T21:46:53Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/log/LogTest.scala", "diffHunk": "@@ -2818,6 +2818,21 @@ class LogTest {\n       new SimpleRecord(RecordBatch.NO_TIMESTAMP, \"key\".getBytes, \"value\".getBytes)), leaderEpoch = 0)\n   }\n \n+  @Test\n+  def testAppendToLogInFailedLogDir(): Unit = {\n+    val log = createLog(logDir, LogConfig())\n+    log.appendAsLeader(TestUtils.singletonRecords(value = null), leaderEpoch = 0)\n+    assertEquals(0, readLog(log, 0, 4096).records.records.iterator.next().offset)\n+    log.logDirFailureChannel.maybeAddOfflineLogDir(logDir.getParent, \"Simulating failed log dir\", new IOException(\"Test failure\"))\n+    try {\n+      log.appendAsLeader(TestUtils.singletonRecords(value = null), leaderEpoch = 0)\n+      fail()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6fbc4204350546883e5c664ed6ffd771327a3e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDk2MjcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/Log.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjozMDo0NFrOH-3_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTo1MTowN1rOH_JLhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MTEwNw==", "bodyText": "Maybe we can leave a more informative error message here? Sth like \"... dir has failed due to a previous IO exception\", just indicating it is not failed because of the current calling trace.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r535691107", "createdAt": "2020-12-03T22:30:44Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1219,6 +1219,9 @@ class Log(@volatile private var _dir: File,\n               appendInfo.logAppendTime = duplicate.timestamp\n               appendInfo.logStartOffset = logStartOffset\n             case None =>\n+              if (logDirFailureChannel.logDirIsOffline(parentDir)) {\n+                throw new KafkaStorageException(s\"The log dir $parentDir has failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9a63fac523f7f97828d20afb0ab88f79812606"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3Mjc0MA==", "bodyText": "@guozhangwang good point. I also changed the language to 'offline' rather than 'failed', since this is more consistent with other usage.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r535972740", "createdAt": "2020-12-04T09:51:07Z", "author": {"login": "tombentley"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1219,6 +1219,9 @@ class Log(@volatile private var _dir: File,\n               appendInfo.logAppendTime = duplicate.timestamp\n               appendInfo.logStartOffset = logStartOffset\n             case None =>\n+              if (logDirFailureChannel.logDirIsOffline(parentDir)) {\n+                throw new KafkaStorageException(s\"The log dir $parentDir has failed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MTEwNw=="}, "originalCommit": {"oid": "8f9a63fac523f7f97828d20afb0ab88f79812606"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTg2MTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/Log.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxNTo0NlrOIBur4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxNTo0NlrOIBur4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4NDM4Ng==", "bodyText": "Hmm.. In case there is an IOException on an append, we will release the lock and fail the log dir in maybeHandleIOException. There is a window for another append to sneak by. It looks like it should be possible to pull maybeHandleIOException into the locked section here since analyzeAndValidateRecords does not do any IO.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r538684386", "createdAt": "2020-12-08T18:15:46Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1106,6 +1106,13 @@ class Log(@volatile private var _dir: File,\n         // they are valid, insert them in the log\n         lock synchronized {\n           checkIfMemoryMappedBufferClosed()\n+\n+          // check for offline log dir in case a retry following an IOException happens before the log dir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b7aa8964323d5cf278b8ed690043f464098354"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTg3NjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/LogDirFailureChannel.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxODowNlrOIBu1QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoxODowNlrOIBu1QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4Njc4NA==", "bodyText": "I am not sure if it is really necessary, but since offline dirs are a rare situation, I'm wondering if makes sense to optimize for the common case to avoid the lookup. For example, maybe we could leave offlineLogDirs uninitialized until the first log dir failure.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r538686784", "createdAt": "2020-12-08T18:18:06Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/LogDirFailureChannel.scala", "diffHunk": "@@ -49,6 +49,13 @@ class LogDirFailureChannel(logDirNum: Int) extends Logging {\n       offlineLogDirQueue.add(logDir)\n   }\n \n+  /*\n+   * Return whether the given log dir is offline.\n+   */\n+  def logDirIsOffline(logDir: String): Boolean = {\n+    offlineLogDirs.containsKey(logDir)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b7aa8964323d5cf278b8ed690043f464098354"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjQ0MTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/Log.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDo0NjoyM1rOIHYb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NToxN1rOIH49Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMTI4NQ==", "bodyText": "Seems more intuitive to move this check before the segment read. I don't think we can totally avoid race conditions with a failure in append since we don't have the lock here. Perhaps we could even move this check to maybeHandleIOException so that we handle all cases?", "url": "https://github.com/apache/kafka/pull/9676#discussion_r544611285", "createdAt": "2020-12-16T20:46:23Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1556,6 +1572,8 @@ class Log(@volatile private var _dir: File,\n           done = fetchDataInfo != null || segmentEntry == null\n         }\n \n+        checkForLogDirFailure()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d7c7974a3249064b63991278403677ff8ba470b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NDEzNA==", "bodyText": "Yeah, I wondered about putting it in maybeHandleIOException too, and I've made this change. There are a few places where changing the order in which we do maybeHandleIOException with respect to lock synchronized would seem to avoid some possible races with no side effects other than increasing the duration the lock is held (for the try and the volatile read). I'm thinking specifically maybeIncrementLogStartOffset, roll, delete, truncateFullyAndStartAt and perhaps even truncateTo. But given that there will always exist some races maybe it's not worth it, WDYT?", "url": "https://github.com/apache/kafka/pull/9676#discussion_r545144134", "createdAt": "2020-12-17T14:45:17Z", "author": {"login": "tombentley"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1556,6 +1572,8 @@ class Log(@volatile private var _dir: File,\n           done = fetchDataInfo != null || segmentEntry == null\n         }\n \n+        checkForLogDirFailure()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMTI4NQ=="}, "originalCommit": {"oid": "8d7c7974a3249064b63991278403677ff8ba470b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjQ1MjUwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDo0OToxNVrOIHYiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDo0NjoyMVrOIH5ArQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMjkxNw==", "bodyText": "Another way to trigger an IO exception is to rename the log file. This trick is used in testAppendToTransactionIndexFailure. Then we don't need to expose maybeHandleIOException for testing.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r544612917", "createdAt": "2020-12-16T20:49:15Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/log/LogTest.scala", "diffHunk": "@@ -2818,6 +2818,22 @@ class LogTest {\n       new SimpleRecord(RecordBatch.NO_TIMESTAMP, \"key\".getBytes, \"value\".getBytes)), leaderEpoch = 0)\n   }\n \n+  @Test\n+  def testAppendToOrReadFromLogInFailedLogDir(): Unit = {\n+    val log = createLog(logDir, LogConfig())\n+    log.appendAsLeader(TestUtils.singletonRecords(value = null), leaderEpoch = 0)\n+    assertEquals(0, readLog(log, 0, 4096).records.records.iterator.next().offset)\n+    try {\n+      log.maybeHandleIOException(\"Simulating failed log dir\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d7c7974a3249064b63991278403677ff8ba470b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NTAwNQ==", "bodyText": "That only seems to work when writing to the transaction index (because the file opening is deferred so that it's only at the point where we try to append some transaction markers that the index file open is attempted and the path found to be a directory, which means that the exception propagates through Log). Renaming the segment file, on the other hand, doesn't propagate through Log, because the rename throws immediately and propagates directly from FileRecords to the test. Obviously when the exception doesn't propagate via Log the logDirOffline doesn't get set.\nMaking this change kind-of mixes transactional appends into a test for something with is orthogonal to transactional logs. In any case, I've done as you suggest, I just thought it worth mentioning.", "url": "https://github.com/apache/kafka/pull/9676#discussion_r545145005", "createdAt": "2020-12-17T14:46:21Z", "author": {"login": "tombentley"}, "path": "core/src/test/scala/unit/kafka/log/LogTest.scala", "diffHunk": "@@ -2818,6 +2818,22 @@ class LogTest {\n       new SimpleRecord(RecordBatch.NO_TIMESTAMP, \"key\".getBytes, \"value\".getBytes)), leaderEpoch = 0)\n   }\n \n+  @Test\n+  def testAppendToOrReadFromLogInFailedLogDir(): Unit = {\n+    val log = createLog(logDir, LogConfig())\n+    log.appendAsLeader(TestUtils.singletonRecords(value = null), leaderEpoch = 0)\n+    assertEquals(0, readLog(log, 0, 4096).records.records.iterator.next().offset)\n+    try {\n+      log.maybeHandleIOException(\"Simulating failed log dir\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMjkxNw=="}, "originalCommit": {"oid": "8d7c7974a3249064b63991278403677ff8ba470b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDcwMTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/Log.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozNDoxOVrOIOgjXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozNDoxOVrOIOgjXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4NDMxOQ==", "bodyText": "Do we still need this since this check is in maybeHandleIOException?", "url": "https://github.com/apache/kafka/pull/9676#discussion_r552084319", "createdAt": "2021-01-05T17:34:19Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1093,19 +1097,25 @@ class Log(@volatile private var _dir: File,\n                      assignOffsets: Boolean,\n                      leaderEpoch: Int,\n                      ignoreRecordSize: Boolean): LogAppendInfo = {\n-    maybeHandleIOException(s\"Error while appending records to $topicPartition in dir ${dir.getParent}\") {\n-      val appendInfo = analyzeAndValidateRecords(records, origin, ignoreRecordSize)\n \n-      // return if we have no valid messages or if this is a duplicate of the last appended entry\n-      if (appendInfo.shallowCount == 0) appendInfo\n-      else {\n+    val appendInfo = analyzeAndValidateRecords(records, origin, ignoreRecordSize)\n \n-        // trim any invalid bytes or partial messages before appending it to the on-disk log\n-        var validRecords = trimInvalidBytes(records, appendInfo)\n+    // return if we have no valid messages or if this is a duplicate of the last appended entry\n+    if (appendInfo.shallowCount == 0) appendInfo\n+    else {\n \n-        // they are valid, insert them in the log\n-        lock synchronized {\n+      // trim any invalid bytes or partial messages before appending it to the on-disk log\n+      var validRecords = trimInvalidBytes(records, appendInfo)\n+\n+      // they are valid, insert them in the log\n+      lock synchronized {\n+        maybeHandleIOException(s\"Error while appending records to $topicPartition in dir ${dir.getParent}\") {\n           checkIfMemoryMappedBufferClosed()\n+\n+          // check for offline log dir in case a retry following an IOException happens before the log dir\n+          // is taken offline, which would result in inconsistent producer state\n+          checkForLogDirFailure()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f0f5a4a99e7d0be4a7fa843b40bb71002457a1"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3651, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}