{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzUyMjU1", "number": 8265, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNzo1MVrODm6FZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1OTo0NFrODnSwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI0MTMzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNzo1MVrOF0mI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTowNzo1MVrOF0mI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTEyNQ==", "bodyText": "nit: we should prefix with internal.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r390695125", "createdAt": "2020-03-11T01:07:51Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -259,6 +259,19 @@\n      */\n     static final String LEAVE_GROUP_ON_CLOSE_CONFIG = \"internal.leave.group.on.close\";\n \n+    /**\n+     * <code>throw.on.stable.flag.unsupported</code>\n+     * Whether or not the consumer throw when the new stable flag is supported. If set to <code>true</code>\n+     * then the client shall crash upon hitting it. The purpose of this flag is to prevent unexpected broker\n+     * downgrade which makes the offset fetch protection against pending commit invalid. The safest approach\n+     * is to fail fast to avoid introducing correctness issue.\n+     *\n+     * <p>\n+     * Note: this is an internal configuration and could be changed in the future in a backward incompatible way\n+     *\n+     */\n+    static final String THROW_ON_STABLE_FLAG_UNSUPPORTED = \"throw.on.stable.flag.unsupported\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI0NTQ1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMDoyN1rOF0mLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMDoyN1rOF0mLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTczMw==", "bodyText": "nit: move false to it's own line", "url": "https://github.com/apache/kafka/pull/8265#discussion_r390695733", "createdAt": "2020-03-11T01:10:27Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2211,7 +2211,7 @@ private FetchResponse fetchResponse(TopicPartition partition, long fetchOffset,\n                                                                           time,\n                                                                           autoCommitEnabled,\n                                                                           autoCommitIntervalMs,\n-                                                                          interceptors);\n+                                                                          interceptors, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI0NTY0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMDozNlrOF0mLUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMDozNlrOF0mLUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTc2Mg==", "bodyText": "as above", "url": "https://github.com/apache/kafka/pull/8265#discussion_r390695762", "createdAt": "2020-03-11T01:10:36Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "diffHunk": "@@ -2715,7 +2715,7 @@ private ConsumerCoordinator buildCoordinator(final GroupRebalanceConfig rebalanc\n                 time,\n                 autoCommitEnabled,\n                 autoCommitIntervalMs,\n-                null);\n+                null, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI1MDkyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxNDowMlrOF0mOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoyMzowMVrOF0-pVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NjYwOA==", "bodyText": "Why not use THROW_ON_STABLE_FLAG_UNSUPPORTED instead of hard-coded string", "url": "https://github.com/apache/kafka/pull/8265#discussion_r390696608", "createdAt": "2020-03-11T01:14:02Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -787,7 +787,8 @@ private KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, De\n                         this.time,\n                         enableAutoCommit,\n                         config.getInt(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG),\n-                        this.interceptors);\n+                        this.interceptors,\n+                        config.getBoolean(\"throw.on.stable.flag.unsupported\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5NjY2Mw==", "bodyText": "Good idea", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391096663", "createdAt": "2020-03-11T16:23:01Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -787,7 +787,8 @@ private KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, De\n                         this.time,\n                         enableAutoCommit,\n                         config.getInt(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG),\n-                        this.interceptors);\n+                        this.interceptors,\n+                        config.getBoolean(\"throw.on.stable.flag.unsupported\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NjYwOA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDcxNjk5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMTo1NlrOF1Hxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMTo1NlrOF1Hxog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjI0Mg==", "bodyText": "side cleanup", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391246242", "createdAt": "2020-03-11T20:21:56Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -1666,12 +1665,8 @@ public void run() {\n             if (interrupt) {\n                 assertTrue(\"Close terminated prematurely\", future.cancel(true));\n \n-                TestUtils.waitForCondition(new TestCondition() {\n-                    @Override\n-                    public boolean conditionMet() {\n-                        return closeException.get() != null;\n-                    }\n-                }, \"InterruptException did not occur within timeout.\");\n+                TestUtils.waitForCondition(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDcxODAwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjoxOVrOF1HyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjoxOVrOF1HyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjQyOA==", "bodyText": "Mostly side-cleanup for consolidating consumerId.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391246428", "createdAt": "2020-03-11T20:22:19Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "diffHunk": "@@ -139,6 +140,8 @@\n     private final ThrowOnAssignmentAssignor throwFatalErrorOnAssignmentAssignor;\n     private final List<ConsumerPartitionAssignor> assignors;\n     private final Map<String, MockPartitionAssignor> assignorMap;\n+    private final String consumerId = \"consumer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDcxODczOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjozNFrOF1Hy2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjozNFrOF1Hy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjU1Mg==", "bodyText": "Side cleanups for lambda.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391246552", "createdAt": "2020-03-11T20:22:34Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "diffHunk": "@@ -879,13 +883,10 @@ public void testMetadataRefreshDuringRebalance() {\n             metadata.rewind();\n             return subscription.topics().containsAll(updatedSubscription);\n         }, joinGroupLeaderResponse(2, consumerId, updatedSubscriptions, Errors.NONE));\n-        client.prepareResponse(new MockClient.RequestMatcher() {\n-            // update the metadata again back to topic1\n-            @Override\n-            public boolean matches(AbstractRequest body) {\n-                client.updateMetadata(TestUtils.metadataUpdateWith(1, singletonMap(topic1, 1)));\n-                return true;\n-            }\n+        // update the metadata again back to topic1", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDcyMTUyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMzoyNFrOF1H0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMzoyNFrOF1H0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NzAyNQ==", "bodyText": "These two are the new tests to make sure when the flag is turned on, the behavior will be safe for supported version and panic when unsupported.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391247025", "createdAt": "2020-03-11T20:23:24Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "diffHunk": "@@ -2589,6 +2557,54 @@ public void testConsumerRejoinAfterRebalance() {\n         }\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 421}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE2MzAwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/OffsetFetchRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1ODoyN1rOF1MGdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNTozNlrOF1jbKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzExMQ==", "bodyText": "nit: if {} else {log.trace()}.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391317111", "createdAt": "2020-03-11T22:58:27Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/OffsetFetchRequest.java", "diffHunk": "@@ -83,6 +86,10 @@ public OffsetFetchRequest build(short version) {\n             }\n \n             if (data.requireStable() && version < 7) {\n+                if (throwOnStableFlagNotSupported) {\n+                    throw new UnsupportedVersionException(\"Broker unexpectedly doesn't support requireStable flag \" +\n+                        \"on version \" + version);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODU1Mw==", "bodyText": "Could you double check if the UnsupportedVersionException would be thrown all the way up to consumer.committed, un-wrapped?\nAlso besides consumer.committed it would be thrown to other consumer calls, e.g. consumer.poll could be possibly sending offset fetch request as part of rebalance as well. We need to make sure all consumer APIs that may get this exception updated their javadocs.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391348553", "createdAt": "2020-03-12T00:50:11Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/OffsetFetchRequest.java", "diffHunk": "@@ -83,6 +86,10 @@ public OffsetFetchRequest build(short version) {\n             }\n \n             if (data.requireStable() && version < 7) {\n+                if (throwOnStableFlagNotSupported) {\n+                    throw new UnsupportedVersionException(\"Broker unexpectedly doesn't support requireStable flag \" +\n+                        \"on version \" + version);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzExMQ=="}, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5OTI0MQ==", "bodyText": "Addressed", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391699241", "createdAt": "2020-03-12T15:25:36Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/OffsetFetchRequest.java", "diffHunk": "@@ -83,6 +86,10 @@ public OffsetFetchRequest build(short version) {\n             }\n \n             if (data.requireStable() && version < 7) {\n+                if (throwOnStableFlagNotSupported) {\n+                    throw new UnsupportedVersionException(\"Broker unexpectedly doesn't support requireStable flag \" +\n+                        \"on version \" + version);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzExMQ=="}, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE2NTc4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1OTo1MlrOF1MIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoxNDoyOVrOF1p5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzU2Ng==", "bodyText": "nit: throw.on.fetch.stable.offsets.unsupported.", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391317566", "createdAt": "2020-03-11T22:59:52Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -263,6 +263,19 @@\n      */\n     static final String LEAVE_GROUP_ON_CLOSE_CONFIG = \"internal.leave.group.on.close\";\n \n+    /**\n+     * <code>internal.throw.on.stable.flag.unsupported</code>\n+     * Whether or not the consumer should throw when the new stable flag is supported. If set to <code>true</code>\n+     * then the client shall crash upon hitting it. The purpose of this flag is to prevent unexpected broker\n+     * downgrade which makes the offset fetch protection against pending commit invalid. The safest approach\n+     * is to fail fast to avoid introducing correctness issue.\n+     *\n+     * <p>\n+     * Note: this is an internal configuration and could be changed in the future in a backward incompatible way\n+     *\n+     */\n+    static final String THROW_ON_STABLE_FLAG_UNSUPPORTED = \"internal.throw.on.stable.flag.unsupported\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTM3NQ==", "bodyText": "In a previous comment I requested to add the internal. prefix to align to\nLEAVE_GROUP_ON_CLOSE_CONFIG = \"internal.leave.group.on.close\";", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391805375", "createdAt": "2020-03-12T18:14:29Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -263,6 +263,19 @@\n      */\n     static final String LEAVE_GROUP_ON_CLOSE_CONFIG = \"internal.leave.group.on.close\";\n \n+    /**\n+     * <code>internal.throw.on.stable.flag.unsupported</code>\n+     * Whether or not the consumer should throw when the new stable flag is supported. If set to <code>true</code>\n+     * then the client shall crash upon hitting it. The purpose of this flag is to prevent unexpected broker\n+     * downgrade which makes the offset fetch protection against pending commit invalid. The safest approach\n+     * is to fail fast to avoid introducing correctness issue.\n+     *\n+     * <p>\n+     * Note: this is an internal configuration and could be changed in the future in a backward incompatible way\n+     *\n+     */\n+    static final String THROW_ON_STABLE_FLAG_UNSUPPORTED = \"internal.throw.on.stable.flag.unsupported\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzU2Ng=="}, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI4MjU3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1OTo0NFrOF1NPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1OTo0NFrOF1NPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNTcwMA==", "bodyText": "nit: shouldThrow -> expectThrows ?", "url": "https://github.com/apache/kafka/pull/8265#discussion_r391335700", "createdAt": "2020-03-11T23:59:44Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java", "diffHunk": "@@ -2589,6 +2557,54 @@ public void testConsumerRejoinAfterRebalance() {\n         }\n     }\n \n+    @Test\n+    public void testThrowOnUnsupportedStableFlag() {\n+        supportStableFlag((short) 6, true);\n+    }\n+\n+    @Test\n+    public void testNoThrowWhenStableFlagIsSupported() {\n+        supportStableFlag((short) 7, false);\n+    }\n+\n+    private void supportStableFlag(final short upperVersion, final boolean shouldThrow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a24baa94eb583ebf92736a4a85d3e6724fd3e3e"}, "originalPosition": 431}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}