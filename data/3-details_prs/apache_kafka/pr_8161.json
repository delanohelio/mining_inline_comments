{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjMyNTAw", "number": 8161, "title": "KAFKA-9047: Making AdminClient group operations respect retries and backoff", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-9047\nPreviously, AdminClient group operations did not respect a Call's number of configured tries and retry backoff. This could lead to tight retry loops that put a lot of pressure on the broker. This PR introduces fixes that ensures for all group operations the AdminClient respects the number of tries and the backoff a given Call has.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-24T21:10:22Z", "url": "https://github.com/apache/kafka/pull/8161", "merged": true, "mergeCommit": {"oid": "34a7ba56a161c066aeacaf88c1ead6109a111d8a"}, "closed": true, "closedAt": "2020-03-18T19:19:41Z", "author": {"login": "skaundinya15"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEFMR3gH2gAyMzc5MjMyNTAwOjQ0MzdmNzU0NjQzYjllNzM0MGYzY2M2NzAxZWQxMThmMzdiNDQ2MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOqXf1AFqTM3NjQ0NjEzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4437f754643b9e7340f3cc6701ed118f37b44631", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/4437f754643b9e7340f3cc6701ed118f37b44631", "committedDate": "2020-02-14T01:24:43Z", "message": "added new constructor with optional arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e83d27427ef9d22cc10cc50823113f913a10452", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/8e83d27427ef9d22cc10cc50823113f913a10452", "committedDate": "2020-02-14T17:16:12Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d52a8982b2540cc56d9b2c62a734feb01b5633c", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/6d52a8982b2540cc56d9b2c62a734feb01b5633c", "committedDate": "2020-02-15T01:17:24Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a5f9d01de29e464f8d716de31abfafad0bf345", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/44a5f9d01de29e464f8d716de31abfafad0bf345", "committedDate": "2020-02-15T03:16:47Z", "message": "wrote initial test to test retrybackoff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b34e14ee3bbd23eea55b58de424553cad786519", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5b34e14ee3bbd23eea55b58de424553cad786519", "committedDate": "2020-02-15T03:17:26Z", "message": "made changes to get retry ms logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dee84f2d2cea1d654f9fec53bfc099aa03bb974", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/2dee84f2d2cea1d654f9fec53bfc099aa03bb974", "committedDate": "2020-02-15T03:21:14Z", "message": "made changes to deadline logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f21e78f56c7a50b32d46fc36bcbc08a0fd92be", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/c9f21e78f56c7a50b32d46fc36bcbc08a0fd92be", "committedDate": "2020-02-15T03:22:31Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef4de60a1c87407aba2f291240e401e2e70184a4", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/ef4de60a1c87407aba2f291240e401e2e70184a4", "committedDate": "2020-02-15T03:53:02Z", "message": "added another condition to retry backoff for offset commit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64154dda901189d094deccfd73543df177821775", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/64154dda901189d094deccfd73543df177821775", "committedDate": "2020-02-15T07:54:21Z", "message": "initial version of retry test and logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c72165a242783a4248f0cfe0c58d39500035cab", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5c72165a242783a4248f0cfe0c58d39500035cab", "committedDate": "2020-02-15T08:03:21Z", "message": "better placement of num retry logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "032617676afc3f34f6b849248aa92087824f05b1", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/032617676afc3f34f6b849248aa92087824f05b1", "committedDate": "2020-02-15T08:11:50Z", "message": "adding updated logic to other calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d62866793e9d2c82646419503d20ddba098dcb", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/a4d62866793e9d2c82646419503d20ddba098dcb", "committedDate": "2020-02-15T08:41:36Z", "message": "added tests for DescribeConsumerGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b9f0d867c82e61dbe26cd45d58288990362816", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/35b9f0d867c82e61dbe26cd45d58288990362816", "committedDate": "2020-02-15T08:53:12Z", "message": "small tweak to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d494c12b456117e74f08411913ef42c15412c1", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/46d494c12b456117e74f08411913ef42c15412c1", "committedDate": "2020-02-15T09:14:16Z", "message": "added tests for ListConsumerGroupOffsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883461c41f9cb0c95449b341a25444d766de5dab", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/883461c41f9cb0c95449b341a25444d766de5dab", "committedDate": "2020-02-15T23:57:22Z", "message": "fixing testOffsetCommitRetryBackoff test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5c2d81fa1155fb3c5d4a8adca2ef1d20d694eb", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/0a5c2d81fa1155fb3c5d4a8adca2ef1d20d694eb", "committedDate": "2020-02-16T00:02:52Z", "message": "fixing testDescribeConsumerGroupRetryBackoff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1387a9f7289b979ea9053c35ff08c41eb4e8ad", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/2e1387a9f7289b979ea9053c35ff08c41eb4e8ad", "committedDate": "2020-02-16T00:06:00Z", "message": "fixing ListConsumerGroupOffsetsRetryBackoff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d033e4fe8adcf7e718986154d8e4b5e62ea946", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/b5d033e4fe8adcf7e718986154d8e4b5e62ea946", "committedDate": "2020-02-16T00:10:34Z", "message": "fixing testDeleteConsumerGroupsRetryBackoff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591f5234490d0d6488cfb68de60bcf46186ea18e", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/591f5234490d0d6488cfb68de60bcf46186ea18e", "committedDate": "2020-02-16T01:37:38Z", "message": "adding tests for DeleteConsumerGroupOffsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b7641a17593bfb3341d9414b38cd5eccbdc3aba", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/4b7641a17593bfb3341d9414b38cd5eccbdc3aba", "committedDate": "2020-02-16T03:15:20Z", "message": "adding tests for RemoveMembersFromGroupRetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deecd5137807e0ed79d57439eeae9cf46ab54a0d", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/deecd5137807e0ed79d57439eeae9cf46ab54a0d", "committedDate": "2020-02-16T05:27:21Z", "message": "removed changes for listOffsets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f37c8144321a33455620d7982dc715f9c2319bc1", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/f37c8144321a33455620d7982dc715f9c2319bc1", "committedDate": "2020-02-16T05:33:01Z", "message": "added new max retries reached exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2bbd7900fb6ec5300f61529cc589a3e96c23cc2", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/d2bbd7900fb6ec5300f61529cc589a3e96c23cc2", "committedDate": "2020-02-16T09:12:08Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a01b18e8441e82a82ac83c785d535e54f3a8a3", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/b5a01b18e8441e82a82ac83c785d535e54f3a8a3", "committedDate": "2020-02-19T06:34:24Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a1512dbc4181f75281cc84e96e1aa48d270b272", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5a1512dbc4181f75281cc84e96e1aa48d270b272", "committedDate": "2020-02-19T18:18:03Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a150d8fc8841a546e6099865f4be4ddf1e2a3549", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/a150d8fc8841a546e6099865f4be4ddf1e2a3549", "committedDate": "2020-02-24T20:30:05Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac825b58b5d9406dfe3040cf127c3b109b7830a9", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/ac825b58b5d9406dfe3040cf127c3b109b7830a9", "committedDate": "2020-02-24T20:38:04Z", "message": "changed naming error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d96bb55568492bac861b8a584b5ab3bdaf7570d", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/3d96bb55568492bac861b8a584b5ab3bdaf7570d", "committedDate": "2020-02-24T20:41:46Z", "message": "removed stray comma"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52b1346e5fd7ab53cb4c0d698f90e6e2f8686b99", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/52b1346e5fd7ab53cb4c0d698f90e6e2f8686b99", "committedDate": "2020-02-24T21:03:15Z", "message": "fixed misnaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97258b1de3e1b9dcdeed97f454dbd9f7700e1e45", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/97258b1de3e1b9dcdeed97f454dbd9f7700e1e45", "committedDate": "2020-02-24T21:07:19Z", "message": "fixed misnaming"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzA0Njc2", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-363704676", "createdAt": "2020-02-24T21:13:57Z", "commit": {"oid": "97258b1de3e1b9dcdeed97f454dbd9f7700e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMzo1N1rOFtwD_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMzo1N1rOFtwD_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzY5NQ==", "bodyText": "I think we can just use TimeoutException. We would need a KIP to expose a new exception type.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r383517695", "createdAt": "2020-02-24T21:13:57Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/errors/MaxRetriesReachedException.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.errors;\n+\n+import org.apache.kafka.common.KafkaException;\n+/**\n+ * Indicates that a request has reached the maximum number of tries.\n+ */\n+public class MaxRetriesReachedException extends KafkaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97258b1de3e1b9dcdeed97f454dbd9f7700e1e45"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a445c7e561ac717d4b39382b98acc40bc0766b", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/48a445c7e561ac717d4b39382b98acc40bc0766b", "committedDate": "2020-02-25T01:12:18Z", "message": "removed exception and fixed checkstlye issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/93d9dadd50d9b51414301001b7ce9be42a83b738", "committedDate": "2020-03-01T04:33:42Z", "message": "fixing checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzA5OTI2", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-367309926", "createdAt": "2020-03-02T15:53:36Z", "commit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MzozNlrOFwkxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MzozNlrOFwkxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODUwMA==", "bodyText": "I'm just curious if we can call Call::fail to push the call instance into the queue again?", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386478500", "createdAt": "2020-03-02T15:53:36Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2813,7 +2838,10 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    rescheduleFindCoordinatorTask(context, () -> getDescribeConsumerGroupsCall(context));\n+                    long nextAllowedTryMs = calculateNextAllowedRetryMs(this.nextAllowedTryMs());\n+                    Call call = getDescribeConsumerGroupsCall(context, Optional.of(this.tries() + 1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTQ3MDQ2", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-367547046", "createdAt": "2020-03-02T21:38:39Z", "commit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozODo0MFrOFwwN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjozNTo1MFrOFwx3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTk2OQ==", "bodyText": "nit: add some sanity check on these numbers (like should be non-negative etc).\nAlso update toString method to include this information.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386665969", "createdAt": "2020-03-02T21:38:40Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,13 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            this(false, callName, deadlineMs, nodeProvider);\n+            this.tries = numTries.orElse(0);\n+            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2ODM0MA==", "bodyText": "nit: Maybe update the message to \"Max retries maxRetries for  reached.\"", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386668340", "createdAt": "2020-03-02T21:43:16Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2698,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries() > maxRetries) {\n+            log.debug(\"Max retries for {} reached\", call);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4OTM0NQ==", "bodyText": "Not sure if we need to make these Optional. 0 seems to be a good default value for these.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386689345", "createdAt": "2020-03-02T22:27:28Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,13 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5Mjk3NQ==", "bodyText": "To keep this logic same as one in Call::fail method, lets set the new time as:\n\nnextAllowedTryMs = now + retryBackoffMs", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386692975", "createdAt": "2020-03-02T22:35:50Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3535,6 +3576,12 @@ void handleFailure(Throwable throwable) {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n+    private long calculateNextAllowedRetryMs(long currNextAllowedRetryMs) {\n+        return (currNextAllowedRetryMs == 0) ?\n+            time.milliseconds() + retryBackoffMs :\n+            currNextAllowedRetryMs + retryBackoffMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9dadd50d9b51414301001b7ce9be42a83b738"}, "originalPosition": 186}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df244bc71c445cd59e679362c12932c82a16e930", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/df244bc71c445cd59e679362c12932c82a16e930", "committedDate": "2020-03-02T23:23:52Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/bbc4321e249169c1668357de528a422da44a4c8b", "committedDate": "2020-03-02T23:44:41Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjIxMTA0", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-367621104", "createdAt": "2020-03-03T00:11:20Z", "commit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxMToyMFrOFwz-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNTowNVrOFw0DUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzYxOA==", "bodyText": "I am not sure we enable java asserts when running Kafka server. Lets check the condition and throw IllegalArgumentException instead.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386727618", "createdAt": "2020-03-03T00:11:20Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -691,10 +691,12 @@ public Node provide() {\n         }\n \n         Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n-            Optional<Integer> numTries, Optional<Long> nextAllowedTryMs) {\n+            int numTries, long nextAllowedTryMs) {\n             this(false, callName, deadlineMs, nodeProvider);\n-            this.tries = numTries.orElse(0);\n-            this.nextAllowedTryMs = nextAllowedTryMs.orElse(0L);\n+            assert numTries >= 0;\n+            assert nextAllowedTryMs >= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODc4Ng==", "bodyText": "nit: As we always pass same value to this method, we can drop the parameter and use time.milliseconds within this method.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386728786", "createdAt": "2020-03-03T00:15:05Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3576,10 +3574,8 @@ void handleFailure(Throwable throwable) {\n         return new ListPartitionReassignmentsResult(partitionReassignmentsFuture);\n     }\n \n-    private long calculateNextAllowedRetryMs(long currNextAllowedRetryMs) {\n-        return (currNextAllowedRetryMs == 0) ?\n-            time.milliseconds() + retryBackoffMs :\n-            currNextAllowedRetryMs + retryBackoffMs;\n+    private long calculateNextAllowedRetryMs(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/981cf4cde67b7636a42efcf4f0f0c3cd64bcbd05", "committedDate": "2020-03-03T00:32:33Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c32a005a007f2950cffcf8366d68eef13c7486", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/24c32a005a007f2950cffcf8366d68eef13c7486", "committedDate": "2020-03-03T00:42:33Z", "message": "fixing type of exception thrown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTkyOTM4", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-368192938", "createdAt": "2020-03-03T17:48:49Z", "commit": {"oid": "24c32a005a007f2950cffcf8366d68eef13c7486"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODo0OVrOFxQJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0ODo0OVrOFxQJtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4OTE3NQ==", "bodyText": "Is it possible to move the check to the AdminClientRunnable::call / enqueue to make this code pieces reusable?", "url": "https://github.com/apache/kafka/pull/8161#discussion_r387189175", "createdAt": "2020-03-03T17:48:49Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2702,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries() > maxRetries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c32a005a007f2950cffcf8366d68eef13c7486"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed478dc4934e96583b25cbf03956ffc9cb60490", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5ed478dc4934e96583b25cbf03956ffc9cb60490", "committedDate": "2020-03-10T02:00:13Z", "message": "Merge branch 'trunk' into KAFKA-9047"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjE2ODc0", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-367616874", "createdAt": "2020-03-03T00:00:13Z", "commit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDowMDoxM1rOFwzv4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo0MDo0OFrOF0mmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMzgwOQ==", "bodyText": "nit: this alignment is a little weird. Typically we would align with the arg above", "url": "https://github.com/apache/kafka/pull/8161#discussion_r386723809", "createdAt": "2020-03-03T00:00:13Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,15 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            int numTries, long nextAllowedTryMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc4321e249169c1668357de528a422da44a4c8b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTA0MQ==", "bodyText": "nit: I feel like a jerk for saying this, but can we avoid the exclamation points? The enthusiasm can be a bit vexing for an operator who hits this error.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390695041", "createdAt": "2020-03-11T01:07:26Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,20 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,\n+            int numTries, long nextAllowedTryMs) {\n+            this(false, callName, deadlineMs, nodeProvider);\n+            if (numTries < 0) {\n+                throw new IllegalArgumentException(\"Number of tries for a call cannot be negative!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed478dc4934e96583b25cbf03956ffc9cb60490"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5OTk3MA==", "bodyText": "nit: I think technically we don't need this. For internal classes, I tend to favor accessing fields directly when the class is nested. I don't feel strongly, so up to you.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390699970", "createdAt": "2020-03-11T01:28:44Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -799,12 +813,17 @@ boolean handleUnsupportedVersionException(UnsupportedVersionException exception)\n \n         @Override\n         public String toString() {\n-            return \"Call(callName=\" + callName + \", deadlineMs=\" + deadlineMs + \")\";\n+            return \"Call(callName=\" + callName + \", deadlineMs=\" + deadlineMs +\n+                \", tries=\" + tries + \", nextAllowedTryMs=\" + nextAllowedTryMs + \")\";\n         }\n \n         public boolean isInternal() {\n             return internal;\n         }\n+\n+        public int tries() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed478dc4934e96583b25cbf03956ffc9cb60490"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwMjcxMQ==", "bodyText": "One of the annoying aspects of the code below is that we have a lot of redundant logic for constructing a call in the context of a previously failed call. I wonder if it would simplify the logic if we added a constructor which accepts the failed call as an argument and then adjusts tries etc accordingly.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r390702711", "createdAt": "2020-03-11T01:40:48Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -690,6 +690,20 @@ public Node provide() {\n             this(false, callName, deadlineMs, nodeProvider);\n         }\n \n+        Call(String callName, long deadlineMs, NodeProvider nodeProvider,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed478dc4934e96583b25cbf03956ffc9cb60490"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a17d56fca676c70579222b1fbe5d1dd501c9297", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/5a17d56fca676c70579222b1fbe5d1dd501c9297", "committedDate": "2020-03-17T18:10:43Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzQxMTUw", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-376341150", "createdAt": "2020-03-17T19:29:09Z", "commit": {"oid": "5a17d56fca676c70579222b1fbe5d1dd501c9297"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyOTowOVrOF3q6NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTo0ODoyOVrOF3rhHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxOTAyOQ==", "bodyText": "I missed this on the first pass, but would there be any harm moving this call to enqueue? That way we do not need to repeat this check for other scenarios involving chaining or partial failures. (For example, I assume we'd end up doing the same thing in rescheduleMetadataTask).\nWe should probably also try to reuse failWithTimeout for a consistent exception message.", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393919029", "createdAt": "2020-03-17T19:29:09Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2683,6 +2702,14 @@ private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> c\n                 context.node().orElse(null));\n         // Requeue the task so that we can try with new coordinator\n         context.setNode(null);\n+\n+        Call call = nextCall.get();\n+\n+        if (call.tries > maxRetries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a17d56fca676c70579222b1fbe5d1dd501c9297"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyODk5MA==", "bodyText": "I think there's a reasonable way to consolidate the bookkeeping in rescheduleFindCoordinatorTask. If we add the failed call to the argument list, then we can do something like this:\n    private void rescheduleFindCoordinatorTask(ConsumerGroupOperationContext<?, ?> context,\n                                               Call failedCall,\n                                               Supplier<Call> nextCall) {\n        log.info(\"Node {} is no longer the Coordinator. Retrying with new coordinator.\",\n                context.node().orElse(null));\n        // Requeue the task so that we can try with new coordinator\n        context.setNode(null);\n\n        Call call = nextCall.get();\n        call.tries = failedCall.tries + 1;\n        call.nextAllowedTryMs = calculateNextAllowedRetryMs();\n\n        if (call.tries > maxRetries) {\n            log.debug(\"Max retries {} for {} reached\", maxRetries, call);\n            call.fail(time.milliseconds(), new TimeoutException());\n            return;\n        }\n        Call findCoordinatorCall = getFindCoordinatorCall(context, nextCall);\n        runnable.call(findCoordinatorCall, time.milliseconds());\n    }\nThen the caller changes to this (for example):\n                    Call call = getDescribeConsumerGroupsCall(context);\n                    rescheduleFindCoordinatorTask(context, this, () -> call);\nWhat do you think?", "url": "https://github.com/apache/kafka/pull/8161#discussion_r393928990", "createdAt": "2020-03-17T19:48:29Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3584,7 +3633,10 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                 // If coordinator changed since we fetched it, retry\n                 if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {\n-                    rescheduleFindCoordinatorTask(context, () -> getRemoveMembersFromGroupCall(context));\n+                    long nextAllowedTryMs = calculateNextAllowedRetryMs();\n+                    Call call = getRemoveMembersFromGroupCall(context, this.tries() + 1,\n+                        nextAllowedTryMs);\n+                    rescheduleFindCoordinatorTask(context, () -> call);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a17d56fca676c70579222b1fbe5d1dd501c9297"}, "originalPosition": 229}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec933bceff4143bb73495353ee656545819a66e3", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/ec933bceff4143bb73495353ee656545819a66e3", "committedDate": "2020-03-17T20:49:19Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44260508da1ddbeebff4e389ee5ba84d8c506fa5", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/44260508da1ddbeebff4e389ee5ba84d8c506fa5", "committedDate": "2020-03-17T20:50:30Z", "message": "removing unnecessary code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ2MTMz", "url": "https://github.com/apache/kafka/pull/8161#pullrequestreview-376446133", "createdAt": "2020-03-17T22:22:42Z", "commit": {"oid": "44260508da1ddbeebff4e389ee5ba84d8c506fa5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1558, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}