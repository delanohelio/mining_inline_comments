{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODE2NTU4", "number": 8448, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0NFrODxrCtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1NDowNVrODycsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEyMDIxOnYy", "diffSide": "LEFT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0NFrOGFRcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1MjoxNVrOGFt7ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgzMA==", "bodyText": "These two lines are still true, but removed from the comment?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181830", "createdAt": "2020-04-14T14:29:44Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODU0OA==", "bodyText": "Partially. The acceptors are not started but start to listen. Let me rework the comment to include the part about the bound port though.", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408648548", "createdAt": "2020-04-15T07:52:15Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgzMA=="}, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEyMDMyOnYy", "diffSide": "LEFT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0NVrOGFRcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0NVrOGFRcUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTg0Mw==", "bodyText": "These two lines are still true, but removed from the comment?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181843", "createdAt": "2020-04-14T14:29:45Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEyNjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozMTowM1rOGFRgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1NDowM1rOGFt_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4Mjg4MQ==", "bodyText": "this is not just data-plane processors?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408182881", "createdAt": "2020-04-14T14:31:03Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTYyNA==", "bodyText": "Correct. Let me rework the comment.", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408649624", "createdAt": "2020-04-15T07:54:03Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4Mjg4MQ=="}, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEzMDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozMTo0NlrOGFRipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozMTo0NlrOGFRipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MzQ2MQ==", "bodyText": "Add a description?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408183461", "createdAt": "2020-04-14T14:31:46Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with\n+   * `startProcessingRequests=false`.\n    *\n    * Before starting processors for each endpoint, we ensure that authorizer has all the metadata\n-   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker listener\n-   * before other listeners. This allows authorization metadata for other listeners to be stored in Kafka topics\n-   * in this cluster.\n+   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker\n+   * listener before other listeners. This allows authorization metadata for other listeners to be\n+   * stored in Kafka topics in this cluster.\n+   *\n+   * @param authorizerFutures", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDIyMDI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1MDoxNFrOGFScXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxMjowMVrOGFum5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODIzNg==", "bodyText": "The blocked acceptor would then add another connection to this list right? Do we close that one?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408198236", "createdAt": "2020-04-14T14:50:14Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1093,9 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    // Clear to unblock blocked acceptors\n+    newConnections.asScala.foreach(_.close())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTY4Nw==", "bodyText": "No, we don't close that one. Let me rework this.", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408659687", "createdAt": "2020-04-15T08:12:01Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1093,9 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    // Clear to unblock blocked acceptors\n+    newConnections.asScala.foreach(_.close())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODIzNg=="}, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 327}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDIzMzQyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1Mjo1NlrOGFSkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMToyMlrOGFu8ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDM1Mg==", "bodyText": "Why? If it for the failure case, then perhaps it should be in a catch block?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408200352", "createdAt": "2020-04-14T14:52:56Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTI0Ng==", "bodyText": "This is not needed. It is a left over from my debugging. Let me remove it.", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408665246", "createdAt": "2020-04-15T08:21:22Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDM1Mg=="}, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI0ODg3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1NTo0MVrOGFSuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0NDowNVrOGFvyZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMjc5Ng==", "bodyText": "Can we replace sleep with some condition?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408202796", "createdAt": "2020-04-14T14:55:41Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)\n       executor.shutdownNow()\n       shutdownServerAndMetrics(testableServer)\n     }\n   }\n \n+  @Test\n+  def testStagedListenerShutdownWhenConnectionQueueIsFull(): Unit = {\n+    val testProps = new Properties\n+    testProps ++= props\n+    testProps.put(\"listeners\", \"EXTERNAL://localhost:0,INTERNAL://localhost:0,CONTROLLER://localhost:0\")\n+    testProps.put(\"listener.security.protocol.map\", \"EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT\")\n+    testProps.put(\"control.plane.listener.name\", \"CONTROLLER\")\n+    testProps.put(\"inter.broker.listener.name\", \"INTERNAL\")\n+    val config = KafkaConfig.fromProps(testProps)\n+    val connectionQueueSize = 1\n+    val testableServer = new TestableSocketServer(config, connectionQueueSize)\n+    testableServer.startup(startProcessingRequests = false)\n+\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+\n+    // Wait to let the acceptor accepts the connections\n+    Thread.sleep(100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3OTAxMg==", "bodyText": "I have reworked this test. It still consistently fails without this patch and it does not have the sleep any more.", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408679012", "createdAt": "2020-04-15T08:44:05Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)\n       executor.shutdownNow()\n       shutdownServerAndMetrics(testableServer)\n     }\n   }\n \n+  @Test\n+  def testStagedListenerShutdownWhenConnectionQueueIsFull(): Unit = {\n+    val testProps = new Properties\n+    testProps ++= props\n+    testProps.put(\"listeners\", \"EXTERNAL://localhost:0,INTERNAL://localhost:0,CONTROLLER://localhost:0\")\n+    testProps.put(\"listener.security.protocol.map\", \"EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT\")\n+    testProps.put(\"control.plane.listener.name\", \"CONTROLLER\")\n+    testProps.put(\"inter.broker.listener.name\", \"INTERNAL\")\n+    val config = KafkaConfig.fromProps(testProps)\n+    val connectionQueueSize = 1\n+    val testableServer = new TestableSocketServer(config, connectionQueueSize)\n+    testableServer.startup(startProcessingRequests = false)\n+\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+\n+    // Wait to let the acceptor accepts the connections\n+    Thread.sleep(100)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMjc5Ng=="}, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjI0NTY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1MTo1MFrOGGfslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1MTo1MFrOGGfslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2Mzk1OA==", "bodyText": "Should we rename this method to be initiateShutdown() to be consistent with kafka.utils.ShutdownableThread?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409463958", "createdAt": "2020-04-16T10:51:50Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -422,14 +461,23 @@ private[kafka] abstract class AbstractServerThread(connectionQuotas: ConnectionQ\n   def wakeup(): Unit\n \n   /**\n-   * Initiates a graceful shutdown by signaling to stop and waiting for the shutdown to complete\n+   * Initiates a graceful shutdown by signaling to stop\n    */\n   def shutdown(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjI1NDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1NDowNVrOGGfxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1NDowNVrOGGfxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NTI3Nw==", "bodyText": "clear() is unnecessary since we would expect the loop to clear (i.e. we shouldn't have code that clears without closing).", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409465277", "createdAt": "2020-04-16T10:54:05Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1094,10 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    while (!newConnections.isEmpty) {\n+      newConnections.poll().close()\n+    }\n+    newConnections.clear()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f"}, "originalPosition": 330}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}