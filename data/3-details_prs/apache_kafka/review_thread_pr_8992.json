{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTc0MTQy", "number": 8992, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozNzoyN1rOEM0cfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozNzoyN1rOEM0cfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODc3NjMwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozNzoyN1rOGvJhFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowNjowOVrOGvKh8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MjE4MA==", "bodyText": "@akatona84 Thanks for the PR.  Normally producer/consumer instances created in the test are closed in IntegrationTestHarness.tearDown . many core tests extends IntegrationTestHarness class.\nDo we know, which tests were failed?", "url": "https://github.com/apache/kafka/pull/8992#discussion_r452092180", "createdAt": "2020-07-09T09:37:27Z", "author": {"login": "omkreddy"}, "path": "core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala", "diffHunk": "@@ -74,48 +75,58 @@ class SaslClientsWithInvalidCredentialsTest extends IntegrationTestHarness with\n   @Test\n   def testProducerWithAuthenticationFailure(): Unit = {\n     val producer = createProducer()\n-    verifyAuthenticationException(sendOneRecord(producer, maxWaitMs = 10000))\n-    verifyAuthenticationException(producer.partitionsFor(topic))\n+    try {\n+      verifyAuthenticationException(sendOneRecord(producer, maxWaitMs = 10000))\n+      verifyAuthenticationException(producer.partitionsFor(topic))\n \n-    createClientCredential()\n-    verifyWithRetry(sendOneRecord(producer))\n+      createClientCredential()\n+      verifyWithRetry(sendOneRecord(producer))\n+    } finally producer.close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwODc4Ng==", "bodyText": "Oh, right, it was suspicious that I did not see consumer thread on the failed .classMethod cases :) Thanks.\ntestConsumerGroupServiceWithAuthenticationSuccess failed and left adminclient threads for later ones:\n\njava.lang.AssertionError: Found unexpected threads during @AfterClass, allThreads=Set(Test worker, metrics-meter-tick-thread-2, main, Signal Dispatcher, Reference Handler, Finalizer, /0:0:0:0:0:0:0:1:55620 to /0:0:0:0:0:0:0:1:33045 workers Thread 2, kafka-admin-client-thread | adminclient-45, /0:0:0:0:0:0:0:1:55620 to /0:0:0:0:0:0:0:1:33045 workers Thread 3, metrics-meter-tick-thread-1), unexpected=Set(kafka-admin-client-thread | adminclient-45)", "url": "https://github.com/apache/kafka/pull/8992#discussion_r452108786", "createdAt": "2020-07-09T10:06:09Z", "author": {"login": "akatona84"}, "path": "core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala", "diffHunk": "@@ -74,48 +75,58 @@ class SaslClientsWithInvalidCredentialsTest extends IntegrationTestHarness with\n   @Test\n   def testProducerWithAuthenticationFailure(): Unit = {\n     val producer = createProducer()\n-    verifyAuthenticationException(sendOneRecord(producer, maxWaitMs = 10000))\n-    verifyAuthenticationException(producer.partitionsFor(topic))\n+    try {\n+      verifyAuthenticationException(sendOneRecord(producer, maxWaitMs = 10000))\n+      verifyAuthenticationException(producer.partitionsFor(topic))\n \n-    createClientCredential()\n-    verifyWithRetry(sendOneRecord(producer))\n+      createClientCredential()\n+      verifyWithRetry(sendOneRecord(producer))\n+    } finally producer.close()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MjE4MA=="}, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}