{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzE0Njgx", "number": 8905, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxNDo1NFrOEHP7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozMTo1OVrOEJOkCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM2NTU3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxNDo1NFrOGmiZQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxNDo1NFrOGmiZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MjU5NA==", "bodyText": "On the side, I realized we can consolidate this check and perform it first, rather than after we're already written bad data into the buffer.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443062594", "createdAt": "2020-06-19T22:14:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -286,6 +289,15 @@ private void logTombstone(final Bytes key) {\n \n     private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch) {\n         for (final ConsumerRecord<byte[], byte[]> record : batch) {\n+            if (record.partition() != partition) {\n+                throw new IllegalStateException(\n+                    String.format(\n+                        \"record partition [%d] is being restored by the wrong suppress partition [%d]\",\n+                        record.partition(),\n+                        partition\n+                    )\n+                );\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDM2ODI0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxNjoyNFrOGmiauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMjoxNjoyNFrOGmiauw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2Mjk3MQ==", "bodyText": "This is the fix (although it was probably fine before). The implementation of Header.equals is not specified by any contract, so it's safer to perform a direct comparison on the header values. Just as before, I'm comparing byte arrays to avoid deserializing the value.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443062971", "createdAt": "2020-06-19T22:16:24Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -339,7 +341,7 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                             recordContext\n                         )\n                     );\n-                } else if (V_1_CHANGELOG_HEADERS.lastHeader(\"v\").equals(record.headers().lastHeader(\"v\"))) {\n+                } else if (Arrays.equals(record.headers().lastHeader(\"v\").value(), V_1_CHANGELOG_HEADER_VALUE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDkxOTA2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNTowNzoxOFrOGmm-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQyMDoyNDoyMlrOGmuEAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzcxOQ==", "bodyText": "my IDEA says this variable is never used.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443137719", "createdAt": "2020-06-20T15:07:18Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -58,10 +59,12 @@\n public final class InMemoryTimeOrderedKeyValueBuffer<K, V> implements TimeOrderedKeyValueBuffer<K, V> {\n     private static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n     private static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n+    private static final byte[] V_1_CHANGELOG_HEADER_VALUE = {(byte) 1};\n     private static final RecordHeaders V_1_CHANGELOG_HEADERS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4MDc0MA==", "bodyText": "I saw it is used in line 342.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443180740", "createdAt": "2020-06-21T04:33:01Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -58,10 +59,12 @@\n public final class InMemoryTimeOrderedKeyValueBuffer<K, V> implements TimeOrderedKeyValueBuffer<K, V> {\n     private static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n     private static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n+    private static final byte[] V_1_CHANGELOG_HEADER_VALUE = {(byte) 1};\n     private static final RecordHeaders V_1_CHANGELOG_HEADERS =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzcxOQ=="}, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDAyOQ==", "bodyText": "my bad. The unused variable is V_1_CHANGELOG_HEADERS rather than V_1_CHANGELOG_HEADER_VALUE", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443184029", "createdAt": "2020-06-21T05:41:18Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -58,10 +59,12 @@\n public final class InMemoryTimeOrderedKeyValueBuffer<K, V> implements TimeOrderedKeyValueBuffer<K, V> {\n     private static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n     private static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n+    private static final byte[] V_1_CHANGELOG_HEADER_VALUE = {(byte) 1};\n     private static final RecordHeaders V_1_CHANGELOG_HEADERS =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzcxOQ=="}, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI1Mzc2MA==", "bodyText": "Ah, right. My mistake. Thanks for pointing it out.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443253760", "createdAt": "2020-06-21T20:24:22Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -58,10 +59,12 @@\n public final class InMemoryTimeOrderedKeyValueBuffer<K, V> implements TimeOrderedKeyValueBuffer<K, V> {\n     private static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n     private static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n+    private static final byte[] V_1_CHANGELOG_HEADER_VALUE = {(byte) 1};\n     private static final RecordHeaders V_1_CHANGELOG_HEADERS =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzcxOQ=="}, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDkyMDY2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNToxMDozMVrOGmm_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQyMDoyNDo1NVrOGmuEJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzk0NQ==", "bodyText": "nit:\nWe seek the last header many times. Could we reuse the return value?", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443137945", "createdAt": "2020-06-20T15:10:31Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -299,16 +311,6 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                         minTimestamp = sortedMap.isEmpty() ? Long.MAX_VALUE : sortedMap.firstKey().time();\n                     }\n                 }\n-\n-                if (record.partition() != partition) {\n-                    throw new IllegalStateException(\n-                        String.format(\n-                            \"record partition [%d] is being restored by the wrong suppress partition [%d]\",\n-                            record.partition(),\n-                            partition\n-                        )\n-                    );\n-                }\n             } else {\n                 if (record.headers().lastHeader(\"v\") == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI1Mzc5Ng==", "bodyText": "Sure!", "url": "https://github.com/apache/kafka/pull/8905#discussion_r443253796", "createdAt": "2020-06-21T20:24:55Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -299,16 +311,6 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                         minTimestamp = sortedMap.isEmpty() ? Long.MAX_VALUE : sortedMap.firstKey().time();\n                     }\n                 }\n-\n-                if (record.partition() != partition) {\n-                    throw new IllegalStateException(\n-                        String.format(\n-                            \"record partition [%d] is being restored by the wrong suppress partition [%d]\",\n-                            record.partition(),\n-                            partition\n-                        )\n-                    );\n-                }\n             } else {\n                 if (record.headers().lastHeader(\"v\") == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzk0NQ=="}, "originalCommit": {"oid": "4c393332ac179d055d2e06a8f34170ed3d4ae628"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYxODY5OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo0OTozNVrOGpl41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTowNTowOFrOGpurkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTU1OQ==", "bodyText": "@ijuma , you'll probably want to know about this.\nI have no idea why, but one of the new tests in this PR was failing with:\n    java.lang.OutOfMemoryError: Java heap space\n        at org.apache.kafka.streams.kstream.internals.FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(FullChangeSerde.java:82)\n        at org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferChangelogDeserializationHelper.deserializeV2(TimeOrderedKeyValueBufferChangelogDeserializationHelper.java:90)\n        at org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferChangelogDeserializationHelper.duckTypeV2(TimeOrderedKeyValueBufferChangelogDeserializationHelper.java:61)\n        at org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBuffer.restoreBatch(InMemoryTimeOrderedKeyValueBuffer.java:369)\n        at org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBuffer$$Lambda$284/0x00000001002cb440.restoreBatch(Unknown Source)\n        at org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest.shouldRestoreV3FormatWithV2Header(TimeOrderedKeyValueBufferTest.java:742)\n\nI captured a flight recording and a heap dump on exit, but everything looked fine, and the heap was only a few megs at the time of the crash. I noticed first that if I just overrode all the jvm args, the test would pass, and through trial and error, I identified this one as the \"cause\".\nI get an OOMe every time with -XX:+UseParallelGC and I've never gotten it without the flag. WDYT about dropping it?", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446265559", "createdAt": "2020-06-26T15:49:35Z", "author": {"login": "vvcephei"}, "path": "build.gradle", "diffHunk": "@@ -97,7 +97,7 @@ ext {\n   buildVersionFileName = \"kafka-version.properties\"\n \n   defaultMaxHeapSize = \"2g\"\n-  defaultJvmArgs = [\"-Xss4m\", \"-XX:+UseParallelGC\"]\n+  defaultJvmArgs = [\"-Xss4m\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwOTYxOQ==", "bodyText": "Aha! I figured it out. There actually was a bug in the test. While duck-typing, the code was trying to allocate an array of 1.8GB. It's funny that disabling this flag made this test pass on java 11 and 14. Maybe the flag partitions the heap on those versions or something, so the test didn't actually have the full 2GB available. Anyway, I'm about to push a fix and put the flag back.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446409619", "createdAt": "2020-06-26T21:05:08Z", "author": {"login": "vvcephei"}, "path": "build.gradle", "diffHunk": "@@ -97,7 +97,7 @@ ext {\n   buildVersionFileName = \"kafka-version.properties\"\n \n   defaultMaxHeapSize = \"2g\"\n-  defaultJvmArgs = [\"-Xss4m\", \"-XX:+UseParallelGC\"]\n+  defaultJvmArgs = [\"-Xss4m\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTU1OQ=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYyMDI1OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/FullChangeSerde.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MDowMVrOGpl5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MDowMVrOGpl5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NTgwNg==", "bodyText": "Only used in the test now, so I moved it.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446265806", "createdAt": "2020-06-26T15:50:01Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/FullChangeSerde.java", "diffHunk": "@@ -68,33 +68,6 @@ private FullChangeSerde(final Serde<T> inner) {\n         return new Change<>(newValue, oldValue);\n     }\n \n-    /**\n-     * We used to serialize a Change into a single byte[]. Now, we don't anymore, but we still keep this logic here\n-     * so that we can produce the legacy format to test that we can still deserialize it.\n-     */\n-    public static byte[] mergeChangeArraysIntoSingleLegacyFormattedArray(final Change<byte[]> serialChange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYyNTU1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/BufferValue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MTozNFrOGpl9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MTozNFrOGpl9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NjY1Nw==", "bodyText": "This was correct before, since we check equality and enforce identity in the constructor, but Arrays.equals is extremely cheap when the arrays are identical, so explicitly doing an identity check instead of equality was a micro-optimization.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446266657", "createdAt": "2020-06-26T15:51:34Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/BufferValue.java", "diffHunk": "@@ -120,7 +120,7 @@ ByteBuffer serialize(final int endPadding) {\n \n         if (oldValue == null) {\n             buffer.putInt(NULL_VALUE_SENTINEL);\n-        } else if (priorValue == oldValue) {\n+        } else if (Arrays.equals(priorValue, oldValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYyOTkwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MjozNlrOGpl_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MjozNlrOGpl_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2NzI5MQ==", "bodyText": "We don't need to store the whole RecordHeaders for the old versions, just the actual version flag.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446267291", "createdAt": "2020-06-26T15:52:36Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -54,14 +56,17 @@\n import java.util.function.Supplier;\n \n import static java.util.Objects.requireNonNull;\n+import static org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferChangelogDeserializationHelper.deserializeV3;\n+import static org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferChangelogDeserializationHelper.duckTypeV2;\n \n public final class InMemoryTimeOrderedKeyValueBuffer<K, V> implements TimeOrderedKeyValueBuffer<K, V> {\n     private static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n     private static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n-    private static final RecordHeaders V_1_CHANGELOG_HEADERS =\n-        new RecordHeaders(new Header[] {new RecordHeader(\"v\", new byte[] {(byte) 1})});\n-    private static final RecordHeaders V_2_CHANGELOG_HEADERS =\n-        new RecordHeaders(new Header[] {new RecordHeader(\"v\", new byte[] {(byte) 2})});\n+    private static final byte[] V_1_CHANGELOG_HEADER_VALUE = {(byte) 1};\n+    private static final byte[] V_2_CHANGELOG_HEADER_VALUE = {(byte) 2};\n+    private static final byte[] V_3_CHANGELOG_HEADER_VALUE = {(byte) 3};\n+    static final RecordHeaders CHANGELOG_HEADERS =\n+        new RecordHeaders(new Header[] {new RecordHeader(\"v\", V_3_CHANGELOG_HEADER_VALUE)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY0MTc5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1NTo1MFrOGpmGyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMjo0OVrOGpr4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2OTEzMA==", "bodyText": "See the comment on this method for why we need to duck-type version 2. I pulled these deserializations into a helper class because all the extra branches pushed our cyclomatic complexity over the limit.\nBut I kept the first two branches here because they aren't pure functions. They perform a lookup in the buffer itself as part of converting the old format.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446269130", "createdAt": "2020-06-26T15:55:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -361,26 +366,20 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                             contextualRecord.recordContext()\n                         )\n                     );\n-                } else if (V_2_CHANGELOG_HEADERS.lastHeader(\"v\").equals(record.headers().lastHeader(\"v\"))) {\n-                    // in this case, the changelog value is a serialized BufferValue\n+                } else if (Arrays.equals(versionHeader.value(), V_2_CHANGELOG_HEADER_VALUE)) {\n+\n+                    final DeserializationResult deserializationResult = duckTypeV2(record, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzODMxOA==", "bodyText": "Could you clarify which comment are you referring to? I did not see any comments for the \"restoreBatch\" method..", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446338318", "createdAt": "2020-06-26T18:15:08Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -361,26 +366,20 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                             contextualRecord.recordContext()\n                         )\n                     );\n-                } else if (V_2_CHANGELOG_HEADERS.lastHeader(\"v\").equals(record.headers().lastHeader(\"v\"))) {\n-                    // in this case, the changelog value is a serialized BufferValue\n+                } else if (Arrays.equals(versionHeader.value(), V_2_CHANGELOG_HEADER_VALUE)) {\n+\n+                    final DeserializationResult deserializationResult = duckTypeV2(record, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2OTEzMA=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2Mzc5OA==", "bodyText": "Sorry, the comments in duckTypeV2.\nBasically, because we released three versions that would write data in the \"v3\" format, but with the \"v2\" flag, when we see the v2 flag, the data might be in v2 format or v3 format. The only way to tell is to just try to deserialize it in v2 format, and if we get an exception, then to try with v3 format.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446363798", "createdAt": "2020-06-26T19:12:49Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -361,26 +366,20 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                             contextualRecord.recordContext()\n                         )\n                     );\n-                } else if (V_2_CHANGELOG_HEADERS.lastHeader(\"v\").equals(record.headers().lastHeader(\"v\"))) {\n-                    // in this case, the changelog value is a serialized BufferValue\n+                } else if (Arrays.equals(versionHeader.value(), V_2_CHANGELOG_HEADER_VALUE)) {\n+\n+                    final DeserializationResult deserializationResult = duckTypeV2(record, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2OTEzMA=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY1MDE2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1ODowOVrOGpmL8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1ODowOVrOGpmL8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3MDQ1MA==", "bodyText": "If you look a few lines up, you'll see that we just serialized the \"old value\", so we don't need to serialize it again here.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446270450", "createdAt": "2020-06-26T15:58:09Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -481,8 +480,7 @@ public void put(final long time,\n         final BufferValue buffered = getBuffered(serializedKey);\n         final byte[] serializedPriorValue;\n         if (buffered == null) {\n-            final V priorValue = value.oldValue;\n-            serializedPriorValue = (priorValue == null) ? null : valueSerde.innerSerde().serializer().serialize(changelogTopic, priorValue);\n+            serializedPriorValue = serialChange.oldValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY2MTM1OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/SmokeTestDriverIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMToxM1rOGpmTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMToxM1rOGpmTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3MjI3MA==", "bodyText": "Don't need this anymore because start blocks until it's \"started\" now.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446272270", "createdAt": "2020-06-26T16:01:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/SmokeTestDriverIntegrationTest.java", "diffHunk": "@@ -104,10 +104,6 @@ public void shouldWorkWithRebalance() throws InterruptedException {\n             clients.add(smokeTestClient);\n             smokeTestClient.start(props);\n \n-            while (!clients.get(clients.size() - 1).started()) {\n-                Thread.sleep(100);\n-            }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY2NDIzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMjowOVrOGpmU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMjowOVrOGpmU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3MjczNg==", "bodyText": "Moved from FullChangeSerde because it is only used in this test.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446272736", "createdAt": "2020-06-26T16:02:09Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java", "diffHunk": "@@ -19,17 +19,46 @@\n import org.apache.kafka.common.serialization.Serdes;\n import org.junit.Test;\n \n+import java.nio.ByteBuffer;\n+\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n \n public class FullChangeSerdeTest {\n     private final FullChangeSerde<String> serde = FullChangeSerde.wrap(Serdes.String());\n \n+    /**\n+     * We used to serialize a Change into a single byte[]. Now, we don't anymore, but we still keep this logic here\n+     * so that we can produce the legacy format to test that we can still deserialize it.\n+     */\n+    private static byte[] mergeChangeArraysIntoSingleLegacyFormattedArray(final Change<byte[]> serialChange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY2NzI5OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMzowOVrOGpmW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowMzowOVrOGpmW0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3MzIzMw==", "bodyText": "imported the headers from the production code, so that it'll stay current.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446273233", "createdAt": "2020-06-26T16:03:09Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferTest.java", "diffHunk": "@@ -56,14 +55,13 @@\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBuffer.CHANGELOG_HEADERS;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.fail;\n \n @RunWith(Parameterized.class)\n public class TimeOrderedKeyValueBufferTest<B extends TimeOrderedKeyValueBuffer<String, String>> {\n-    private static final RecordHeaders V_2_CHANGELOG_HEADERS =\n-        new RecordHeaders(new Header[] {new RecordHeader(\"v\", new byte[] {(byte) 2})});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY3OTM0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowNjo0MVrOGpmeeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowNjo0MVrOGpmeeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3NTE5Mw==", "bodyText": "This was one of my major findings in KAFKA-10173. Because the test was serializing the \"old versions\" using code shared with the current logic, we could not detect when we accidentally changed the current serialization logic without bumping the version number.\nBy instead testing against fixed pre-serialized data, we should be a lot safer.\nI took inspiration from the way that Karsten reported the observed serialized data in the bug report. Hex-encoding the binary data makes the tests more readable than a long array of byte literals.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446275193", "createdAt": "2020-06-26T16:06:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferTest.java", "diffHunk": "@@ -372,12 +370,14 @@ public void shouldRestoreOldFormat() {\n \n         context.setRecordContext(new ProcessorRecordContext(0, 0, 0, \"\", null));\n \n-        final FullChangeSerde<String> serializer = FullChangeSerde.wrap(Serdes.String());\n+        // These serialized formats were captured by running version 2.1 code.\n+        // They verify that an upgrade from 2.1 will work.\n+        // Do not change them.\n+        final String toDeleteBinaryValue = \"0000000000000000FFFFFFFF00000006646F6F6D6564\";\n+        final String asdfBinaryValue = \"0000000000000002FFFFFFFF0000000471776572\";\n+        final String zxcvBinaryValue1 = \"00000000000000010000000870726576696F757300000005656F34696D\";\n+        final String zxcvBinaryValue2 = \"000000000000000100000005656F34696D000000046E657874\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY4Mzg4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowODowNVrOGpmhXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowODowNVrOGpmhXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3NTkzNQ==", "bodyText": "This is the version bump we should have done in 2.4.0. I'll backport this fix to the 2.4 branch.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446275935", "createdAt": "2020-06-26T16:08:05Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -361,26 +366,20 @@ private void restoreBatch(final Collection<ConsumerRecord<byte[], byte[]>> batch\n                             contextualRecord.recordContext()\n                         )\n                     );\n-                } else if (V_2_CHANGELOG_HEADERS.lastHeader(\"v\").equals(record.headers().lastHeader(\"v\"))) {\n-                    // in this case, the changelog value is a serialized BufferValue\n+                } else if (Arrays.equals(versionHeader.value(), V_2_CHANGELOG_HEADER_VALUE)) {\n+\n+                    final DeserializationResult deserializationResult = duckTypeV2(record, key);\n+                    cleanPut(deserializationResult.time(), deserializationResult.key(), deserializationResult.bufferValue());\n+\n+                } else if (Arrays.equals(versionHeader.value(), V_3_CHANGELOG_HEADER_VALUE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY4ODQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowOTozNFrOGpmkVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjowOTozNFrOGpmkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3NjY5Mg==", "bodyText": "I inlined these utilities to make this class more \"portable\". I.e., so that we can copy-paste it into the upgrade-test modules without dragging in a bunch of extra dependencies.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446276692", "createdAt": "2020-06-26T16:09:34Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDY5ODU2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMjo0MlrOGpmqtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMjo0MlrOGpmqtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3ODMyNw==", "bodyText": "This was another bug I happened to notice while scrutinizing this system test. createKafkaStreams was registering a state listener and exception handler. But the next line here was overriding the exception handler, so the one registered in createKafkaStreams was getting ignored. I noticed it because I registered a state listener here, which also caused the one registered in createKafkaStreams to get ignored.\nInlining solves this problem, and since createKafkaStreams had only one usage, it was needless anyway.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446278327", "createdAt": "2020-06-26T16:12:42Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {\n+        if (name != null) {\n+            Runtime.getRuntime().addShutdownHook(KafkaThread.nonDaemon(name, runnable));\n+        } else {\n+            Runtime.getRuntime().addShutdownHook(new Thread(runnable));\n+        }\n     }\n \n-    public boolean started() {\n-        return started;\n+    private static File tempDirectory() {\n+        final String prefix = \"kafka-\";\n+        final File file;\n+        try {\n+            file = Files.createTempDirectory(prefix).toFile();\n+        } catch (final IOException ex) {\n+            throw new RuntimeException(\"Failed to create a temp dir\", ex);\n+        }\n+        file.deleteOnExit();\n+\n+        addShutdownHook(\"delete-temp-file-shutdown-hook\", () -> {\n+            try {\n+                Utils.delete(file);\n+            } catch (final IOException e) {\n+                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n+                e.printStackTrace(System.out);\n+            }\n+        });\n+\n+        return file;\n+    }\n+\n+    public SmokeTestClient(final String name) {\n+        this.name = name;\n     }\n \n     public boolean closed() {\n         return closed;\n     }\n \n     public void start(final Properties streamsProperties) {\n-        streams = createKafkaStreams(streamsProperties);\n+        final Topology build = getTopology();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwMTAwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMzozMFrOGpmsQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxMzozMFrOGpmsQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3ODcyMA==", "bodyText": "A new message we can look for to wait until the instance has completed joining the group.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446278720", "createdAt": "2020-06-26T16:13:30Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {\n+        if (name != null) {\n+            Runtime.getRuntime().addShutdownHook(KafkaThread.nonDaemon(name, runnable));\n+        } else {\n+            Runtime.getRuntime().addShutdownHook(new Thread(runnable));\n+        }\n     }\n \n-    public boolean started() {\n-        return started;\n+    private static File tempDirectory() {\n+        final String prefix = \"kafka-\";\n+        final File file;\n+        try {\n+            file = Files.createTempDirectory(prefix).toFile();\n+        } catch (final IOException ex) {\n+            throw new RuntimeException(\"Failed to create a temp dir\", ex);\n+        }\n+        file.deleteOnExit();\n+\n+        addShutdownHook(\"delete-temp-file-shutdown-hook\", () -> {\n+            try {\n+                Utils.delete(file);\n+            } catch (final IOException e) {\n+                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n+                e.printStackTrace(System.out);\n+            }\n+        });\n+\n+        return file;\n+    }\n+\n+    public SmokeTestClient(final String name) {\n+        this.name = name;\n     }\n \n     public boolean closed() {\n         return closed;\n     }\n \n     public void start(final Properties streamsProperties) {\n-        streams = createKafkaStreams(streamsProperties);\n+        final Topology build = getTopology();\n+        streams = new KafkaStreams(build, getStreamsConfig(streamsProperties));\n+\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+        streams.setStateListener((newState, oldState) -> {\n+            System.out.printf(\"%s %s: %s -> %s%n\", name, Instant.now(), oldState, newState);\n+            if (oldState == KafkaStreams.State.REBALANCING && newState == KafkaStreams.State.RUNNING) {\n+                countDownLatch.countDown();\n+            }\n+\n+            if (newState == KafkaStreams.State.NOT_RUNNING) {\n+                closed = true;\n+            }\n+        });\n+\n         streams.setUncaughtExceptionHandler((t, e) -> {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n+            System.out.println(name + \": FATAL: An unexpected exception is encountered on thread \" + t + \": \" + e);\n+            e.printStackTrace(System.out);\n             uncaughtException = true;\n-            e.printStackTrace();\n+            streams.close(Duration.ofSeconds(30));\n         });\n \n-        Exit.addShutdownHook(\"streams-shutdown-hook\", () -> close());\n+        addShutdownHook(\"streams-shutdown-hook\", this::close);\n \n-        thread = new Thread(() -> streams.start());\n-        thread.start();\n+        streams.start();\n+        try {\n+            if (!countDownLatch.await(1, TimeUnit.MINUTES)) {\n+                System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't start in one minute\");\n+            }\n+        } catch (final InterruptedException e) {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: \" + e);\n+            e.printStackTrace(System.out);\n+        }\n+        System.out.println(name + \": SMOKE-TEST-CLIENT-STARTED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwNTI3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNDo1MlrOGpmu8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNDo1MlrOGpmu8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTQxMQ==", "bodyText": "Found a missed condition, if the close timed out, there wouldn't be an exception, just a false return value.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446279411", "createdAt": "2020-06-26T16:14:52Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {\n+        if (name != null) {\n+            Runtime.getRuntime().addShutdownHook(KafkaThread.nonDaemon(name, runnable));\n+        } else {\n+            Runtime.getRuntime().addShutdownHook(new Thread(runnable));\n+        }\n     }\n \n-    public boolean started() {\n-        return started;\n+    private static File tempDirectory() {\n+        final String prefix = \"kafka-\";\n+        final File file;\n+        try {\n+            file = Files.createTempDirectory(prefix).toFile();\n+        } catch (final IOException ex) {\n+            throw new RuntimeException(\"Failed to create a temp dir\", ex);\n+        }\n+        file.deleteOnExit();\n+\n+        addShutdownHook(\"delete-temp-file-shutdown-hook\", () -> {\n+            try {\n+                Utils.delete(file);\n+            } catch (final IOException e) {\n+                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n+                e.printStackTrace(System.out);\n+            }\n+        });\n+\n+        return file;\n+    }\n+\n+    public SmokeTestClient(final String name) {\n+        this.name = name;\n     }\n \n     public boolean closed() {\n         return closed;\n     }\n \n     public void start(final Properties streamsProperties) {\n-        streams = createKafkaStreams(streamsProperties);\n+        final Topology build = getTopology();\n+        streams = new KafkaStreams(build, getStreamsConfig(streamsProperties));\n+\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+        streams.setStateListener((newState, oldState) -> {\n+            System.out.printf(\"%s %s: %s -> %s%n\", name, Instant.now(), oldState, newState);\n+            if (oldState == KafkaStreams.State.REBALANCING && newState == KafkaStreams.State.RUNNING) {\n+                countDownLatch.countDown();\n+            }\n+\n+            if (newState == KafkaStreams.State.NOT_RUNNING) {\n+                closed = true;\n+            }\n+        });\n+\n         streams.setUncaughtExceptionHandler((t, e) -> {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n+            System.out.println(name + \": FATAL: An unexpected exception is encountered on thread \" + t + \": \" + e);\n+            e.printStackTrace(System.out);\n             uncaughtException = true;\n-            e.printStackTrace();\n+            streams.close(Duration.ofSeconds(30));\n         });\n \n-        Exit.addShutdownHook(\"streams-shutdown-hook\", () -> close());\n+        addShutdownHook(\"streams-shutdown-hook\", this::close);\n \n-        thread = new Thread(() -> streams.start());\n-        thread.start();\n+        streams.start();\n+        try {\n+            if (!countDownLatch.await(1, TimeUnit.MINUTES)) {\n+                System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't start in one minute\");\n+            }\n+        } catch (final InterruptedException e) {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: \" + e);\n+            e.printStackTrace(System.out);\n+        }\n+        System.out.println(name + \": SMOKE-TEST-CLIENT-STARTED\");\n+        System.out.println(name + \" started at \" + Instant.now());\n     }\n \n     public void closeAsync() {\n         streams.close(Duration.ZERO);\n     }\n \n     public void close() {\n-        streams.close(Duration.ofSeconds(5));\n-        // do not remove these printouts since they are needed for health scripts\n-        if (!uncaughtException) {\n+        final boolean wasClosed = streams.close(Duration.ofMinutes(1));\n+\n+        if (wasClosed && !uncaughtException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwNzIzOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNToyOVrOGpmwOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNToyOVrOGpmwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTczNw==", "bodyText": "I moved all these to the system test propFile() definition.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446279737", "createdAt": "2020-06-26T16:15:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {\n+        if (name != null) {\n+            Runtime.getRuntime().addShutdownHook(KafkaThread.nonDaemon(name, runnable));\n+        } else {\n+            Runtime.getRuntime().addShutdownHook(new Thread(runnable));\n+        }\n     }\n \n-    public boolean started() {\n-        return started;\n+    private static File tempDirectory() {\n+        final String prefix = \"kafka-\";\n+        final File file;\n+        try {\n+            file = Files.createTempDirectory(prefix).toFile();\n+        } catch (final IOException ex) {\n+            throw new RuntimeException(\"Failed to create a temp dir\", ex);\n+        }\n+        file.deleteOnExit();\n+\n+        addShutdownHook(\"delete-temp-file-shutdown-hook\", () -> {\n+            try {\n+                Utils.delete(file);\n+            } catch (final IOException e) {\n+                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n+                e.printStackTrace(System.out);\n+            }\n+        });\n+\n+        return file;\n+    }\n+\n+    public SmokeTestClient(final String name) {\n+        this.name = name;\n     }\n \n     public boolean closed() {\n         return closed;\n     }\n \n     public void start(final Properties streamsProperties) {\n-        streams = createKafkaStreams(streamsProperties);\n+        final Topology build = getTopology();\n+        streams = new KafkaStreams(build, getStreamsConfig(streamsProperties));\n+\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+        streams.setStateListener((newState, oldState) -> {\n+            System.out.printf(\"%s %s: %s -> %s%n\", name, Instant.now(), oldState, newState);\n+            if (oldState == KafkaStreams.State.REBALANCING && newState == KafkaStreams.State.RUNNING) {\n+                countDownLatch.countDown();\n+            }\n+\n+            if (newState == KafkaStreams.State.NOT_RUNNING) {\n+                closed = true;\n+            }\n+        });\n+\n         streams.setUncaughtExceptionHandler((t, e) -> {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n+            System.out.println(name + \": FATAL: An unexpected exception is encountered on thread \" + t + \": \" + e);\n+            e.printStackTrace(System.out);\n             uncaughtException = true;\n-            e.printStackTrace();\n+            streams.close(Duration.ofSeconds(30));\n         });\n \n-        Exit.addShutdownHook(\"streams-shutdown-hook\", () -> close());\n+        addShutdownHook(\"streams-shutdown-hook\", this::close);\n \n-        thread = new Thread(() -> streams.start());\n-        thread.start();\n+        streams.start();\n+        try {\n+            if (!countDownLatch.await(1, TimeUnit.MINUTES)) {\n+                System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't start in one minute\");\n+            }\n+        } catch (final InterruptedException e) {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: \" + e);\n+            e.printStackTrace(System.out);\n+        }\n+        System.out.println(name + \": SMOKE-TEST-CLIENT-STARTED\");\n+        System.out.println(name + \" started at \" + Instant.now());\n     }\n \n     public void closeAsync() {\n         streams.close(Duration.ZERO);\n     }\n \n     public void close() {\n-        streams.close(Duration.ofSeconds(5));\n-        // do not remove these printouts since they are needed for health scripts\n-        if (!uncaughtException) {\n+        final boolean wasClosed = streams.close(Duration.ofMinutes(1));\n+\n+        if (wasClosed && !uncaughtException) {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-CLOSED\");\n-        }\n-        try {\n-            thread.join();\n-        } catch (final Exception ex) {\n-            // do not remove these printouts since they are needed for health scripts\n+        } else if (wasClosed) {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n-            // ignore\n+        } else {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't close\");\n         }\n     }\n \n     private Properties getStreamsConfig(final Properties props) {\n         final Properties fullProps = new Properties(props);\n         fullProps.put(StreamsConfig.APPLICATION_ID_CONFIG, \"SmokeTest\");\n         fullProps.put(StreamsConfig.CLIENT_ID_CONFIG, \"SmokeTest-\" + name);\n-        fullProps.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 3);\n-        fullProps.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 2);\n-        fullProps.put(StreamsConfig.BUFFERED_RECORDS_PER_PARTITION_CONFIG, 100);\n-        fullProps.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n-        fullProps.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 3);\n-        fullProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n-        fullProps.put(ProducerConfig.ACKS_CONFIG, \"all\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwNzk3OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNTo0NFrOGpmwsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNTo0NFrOGpmwsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTg1Nw==", "bodyText": "inlined above.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446279857", "createdAt": "2020-06-26T16:15:44Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -38,107 +37,128 @@\n import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.state.Stores;\n import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.test.TestUtils;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n \n public class SmokeTestClient extends SmokeTestUtil {\n \n     private final String name;\n \n-    private Thread thread;\n     private KafkaStreams streams;\n     private boolean uncaughtException = false;\n-    private boolean started;\n-    private boolean closed;\n+    private volatile boolean closed;\n \n-    public SmokeTestClient(final String name) {\n-        super();\n-        this.name = name;\n+    private static void addShutdownHook(final String name, final Runnable runnable) {\n+        if (name != null) {\n+            Runtime.getRuntime().addShutdownHook(KafkaThread.nonDaemon(name, runnable));\n+        } else {\n+            Runtime.getRuntime().addShutdownHook(new Thread(runnable));\n+        }\n     }\n \n-    public boolean started() {\n-        return started;\n+    private static File tempDirectory() {\n+        final String prefix = \"kafka-\";\n+        final File file;\n+        try {\n+            file = Files.createTempDirectory(prefix).toFile();\n+        } catch (final IOException ex) {\n+            throw new RuntimeException(\"Failed to create a temp dir\", ex);\n+        }\n+        file.deleteOnExit();\n+\n+        addShutdownHook(\"delete-temp-file-shutdown-hook\", () -> {\n+            try {\n+                Utils.delete(file);\n+            } catch (final IOException e) {\n+                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n+                e.printStackTrace(System.out);\n+            }\n+        });\n+\n+        return file;\n+    }\n+\n+    public SmokeTestClient(final String name) {\n+        this.name = name;\n     }\n \n     public boolean closed() {\n         return closed;\n     }\n \n     public void start(final Properties streamsProperties) {\n-        streams = createKafkaStreams(streamsProperties);\n+        final Topology build = getTopology();\n+        streams = new KafkaStreams(build, getStreamsConfig(streamsProperties));\n+\n+        final CountDownLatch countDownLatch = new CountDownLatch(1);\n+        streams.setStateListener((newState, oldState) -> {\n+            System.out.printf(\"%s %s: %s -> %s%n\", name, Instant.now(), oldState, newState);\n+            if (oldState == KafkaStreams.State.REBALANCING && newState == KafkaStreams.State.RUNNING) {\n+                countDownLatch.countDown();\n+            }\n+\n+            if (newState == KafkaStreams.State.NOT_RUNNING) {\n+                closed = true;\n+            }\n+        });\n+\n         streams.setUncaughtExceptionHandler((t, e) -> {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n+            System.out.println(name + \": FATAL: An unexpected exception is encountered on thread \" + t + \": \" + e);\n+            e.printStackTrace(System.out);\n             uncaughtException = true;\n-            e.printStackTrace();\n+            streams.close(Duration.ofSeconds(30));\n         });\n \n-        Exit.addShutdownHook(\"streams-shutdown-hook\", () -> close());\n+        addShutdownHook(\"streams-shutdown-hook\", this::close);\n \n-        thread = new Thread(() -> streams.start());\n-        thread.start();\n+        streams.start();\n+        try {\n+            if (!countDownLatch.await(1, TimeUnit.MINUTES)) {\n+                System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't start in one minute\");\n+            }\n+        } catch (final InterruptedException e) {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: \" + e);\n+            e.printStackTrace(System.out);\n+        }\n+        System.out.println(name + \": SMOKE-TEST-CLIENT-STARTED\");\n+        System.out.println(name + \" started at \" + Instant.now());\n     }\n \n     public void closeAsync() {\n         streams.close(Duration.ZERO);\n     }\n \n     public void close() {\n-        streams.close(Duration.ofSeconds(5));\n-        // do not remove these printouts since they are needed for health scripts\n-        if (!uncaughtException) {\n+        final boolean wasClosed = streams.close(Duration.ofMinutes(1));\n+\n+        if (wasClosed && !uncaughtException) {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-CLOSED\");\n-        }\n-        try {\n-            thread.join();\n-        } catch (final Exception ex) {\n-            // do not remove these printouts since they are needed for health scripts\n+        } else if (wasClosed) {\n             System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION\");\n-            // ignore\n+        } else {\n+            System.out.println(name + \": SMOKE-TEST-CLIENT-EXCEPTION: Didn't close\");\n         }\n     }\n \n     private Properties getStreamsConfig(final Properties props) {\n         final Properties fullProps = new Properties(props);\n         fullProps.put(StreamsConfig.APPLICATION_ID_CONFIG, \"SmokeTest\");\n         fullProps.put(StreamsConfig.CLIENT_ID_CONFIG, \"SmokeTest-\" + name);\n-        fullProps.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 3);\n-        fullProps.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 2);\n-        fullProps.put(StreamsConfig.BUFFERED_RECORDS_PER_PARTITION_CONFIG, 100);\n-        fullProps.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n-        fullProps.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 3);\n-        fullProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n-        fullProps.put(ProducerConfig.ACKS_CONFIG, \"all\");\n-        fullProps.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getAbsolutePath());\n+        fullProps.put(StreamsConfig.STATE_DIR_CONFIG, tempDirectory().getAbsolutePath());\n         fullProps.putAll(props);\n         return fullProps;\n     }\n \n-    private KafkaStreams createKafkaStreams(final Properties props) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxMDY5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNjozOFrOGpmygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNjozOFrOGpmygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDMyMw==", "bodyText": "Oops! I noticed the lack of a newline in the output. It didn't matter for the tests because the greps aren't bounded by line.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446280323", "createdAt": "2020-06-26T16:16:38Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/SmokeTestUtil.java", "diffHunk": "@@ -75,7 +75,7 @@ public void process(final Object key, final Object value) {\n \n                     @Override\n                     public void close() {\n-                        System.out.printf(\"Close processor for task %s\", context().taskId());\n+                        System.out.printf(\"Close processor for task %s%n\", context().taskId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxMzk5OnYy", "diffSide": "RIGHT", "path": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNzo0MFrOGpm0mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNzo0MFrOGpm0mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDg1Ng==", "bodyText": "All of these are just copy-pasted from the main module.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446280856", "createdAt": "2020-06-26T16:17:40Z", "author": {"login": "vvcephei"}, "path": "streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.tests;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.common.utils.KafkaThread;\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.kstream.Consumed;\n+import org.apache.kafka.streams.kstream.Grouped;\n+import org.apache.kafka.streams.kstream.KGroupedStream;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Suppressed.BufferConfig;\n+import org.apache.kafka.streams.kstream.TimeWindows;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.state.Stores;\n+import org.apache.kafka.streams.state.WindowStore;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.kafka.streams.kstream.Suppressed.untilWindowCloses;\n+\n+public class SmokeTestClient extends SmokeTestUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxNjQ0OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/streams.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxODoyOVrOGpm2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxODoyOVrOGpm2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MTIzNw==", "bodyText": "Adding a param so that we can get away with just one broker in the upgrade test.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446281237", "createdAt": "2020-06-26T16:18:29Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/services/streams.py", "diffHunk": "@@ -305,23 +305,62 @@ def start_node(self, node):\n class StreamsSmokeTestBaseService(StreamsTestBaseService):\n     \"\"\"Base class for Streams Smoke Test services providing some common settings and functionality\"\"\"\n \n-    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3):\n+    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3, replication_factor = 3):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxNzc1OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/streams.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxODo1M1rOGpm28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxODo1M1rOGpm28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MTQ1Ng==", "bodyText": "Added for the upgrade test.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446281456", "createdAt": "2020-06-26T16:18:53Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/services/streams.py", "diffHunk": "@@ -305,23 +305,62 @@ def start_node(self, node):\n class StreamsSmokeTestBaseService(StreamsTestBaseService):\n     \"\"\"Base class for Streams Smoke Test services providing some common settings and functionality\"\"\"\n \n-    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3):\n+    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3, replication_factor = 3):\n         super(StreamsSmokeTestBaseService, self).__init__(test_context,\n                                                           kafka,\n                                                           \"org.apache.kafka.streams.tests.StreamsSmokeTest\",\n                                                           command)\n         self.NUM_THREADS = num_threads\n         self.PROCESSING_GUARANTEE = processing_guarantee\n+        self.KAFKA_STREAMS_VERSION = \"\"\n+        self.UPGRADE_FROM = None\n+        self.REPLICATION_FACTOR = replication_factor\n+\n+    def set_version(self, kafka_streams_version):\n+        self.KAFKA_STREAMS_VERSION = kafka_streams_version\n+\n+    def set_upgrade_from(self, upgrade_from):\n+        self.UPGRADE_FROM = upgrade_from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxOTU4OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/services/streams.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxOTozMlrOGpm4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxOTozMlrOGpm4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MTc2Nw==", "bodyText": "Moved from the java code so that all the configs can be defined together.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446281767", "createdAt": "2020-06-26T16:19:32Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/services/streams.py", "diffHunk": "@@ -305,23 +305,62 @@ def start_node(self, node):\n class StreamsSmokeTestBaseService(StreamsTestBaseService):\n     \"\"\"Base class for Streams Smoke Test services providing some common settings and functionality\"\"\"\n \n-    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3):\n+    def __init__(self, test_context, kafka, command, processing_guarantee = 'at_least_once', num_threads = 3, replication_factor = 3):\n         super(StreamsSmokeTestBaseService, self).__init__(test_context,\n                                                           kafka,\n                                                           \"org.apache.kafka.streams.tests.StreamsSmokeTest\",\n                                                           command)\n         self.NUM_THREADS = num_threads\n         self.PROCESSING_GUARANTEE = processing_guarantee\n+        self.KAFKA_STREAMS_VERSION = \"\"\n+        self.UPGRADE_FROM = None\n+        self.REPLICATION_FACTOR = replication_factor\n+\n+    def set_version(self, kafka_streams_version):\n+        self.KAFKA_STREAMS_VERSION = kafka_streams_version\n+\n+    def set_upgrade_from(self, upgrade_from):\n+        self.UPGRADE_FROM = upgrade_from\n \n     def prop_file(self):\n         properties = {streams_property.STATE_DIR: self.PERSISTENT_ROOT,\n                       streams_property.KAFKA_SERVERS: self.kafka.bootstrap_servers(),\n                       streams_property.PROCESSING_GUARANTEE: self.PROCESSING_GUARANTEE,\n-                      streams_property.NUM_THREADS: self.NUM_THREADS}\n+                      streams_property.NUM_THREADS: self.NUM_THREADS,\n+                      \"replication.factor\": self.REPLICATION_FACTOR,\n+                      \"num.standby.replicas\": 2,\n+                      \"buffered.records.per.partition\": 100,\n+                      \"commit.interval.ms\": 1000,\n+                      \"auto.offset.reset\": \"earliest\",\n+                      \"acks\": \"all\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcyMjQ1OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMDozMlrOGpm6Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMDozMlrOGpm6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MjI2Mg==", "bodyText": "See KAFKA-10203 for why I couldn't go past 2.2", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446282262", "createdAt": "2020-06-26T16:20:32Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -37,6 +37,9 @@\n # can be replaced with metadata_2_versions\n backward_compatible_metadata_2_versions = [str(LATEST_0_10_2), str(LATEST_0_11_0), str(LATEST_1_0), str(LATEST_1_1)]\n metadata_3_or_higher_versions = [str(LATEST_2_0), str(LATEST_2_1), str(LATEST_2_2), str(LATEST_2_3), str(LATEST_2_4), str(LATEST_2_5), str(DEV_VERSION)]\n+smoke_test_versions = [str(LATEST_2_2), str(LATEST_2_3), str(LATEST_2_4), str(LATEST_2_5)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcyNjU0OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMTo0OVrOGpm8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyNjo1MlrOGpqpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MjkxNA==", "bodyText": "We were previously not testing 2.0+ at all. After rewriting this as a smoke test, it only applies to 2.2+. I also figured it makes more sense just to test upgrades to the current branch, rather than testing cross-upgrades between every pair of versions.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446282914", "createdAt": "2020-06-26T16:21:49Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -189,8 +192,8 @@ def test_upgrade_downgrade_brokers(self, from_version, to_version):\n         processor.stop()\n         processor.node.account.ssh_capture(\"grep SMOKE-TEST-CLIENT-CLOSED %s\" % processor.STDOUT_FILE, allow_fail=False)\n \n-    @matrix(from_version=metadata_2_versions, to_version=metadata_2_versions)\n-    def test_simple_upgrade_downgrade(self, from_version, to_version):\n+    @matrix(from_version=smoke_test_versions, to_version=dev_version)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MzU0MQ==", "bodyText": "+1, I think this is a great find.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446343541", "createdAt": "2020-06-26T18:26:52Z", "author": {"login": "guozhangwang"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -189,8 +192,8 @@ def test_upgrade_downgrade_brokers(self, from_version, to_version):\n         processor.stop()\n         processor.node.account.ssh_capture(\"grep SMOKE-TEST-CLIENT-CLOSED %s\" % processor.STDOUT_FILE, allow_fail=False)\n \n-    @matrix(from_version=metadata_2_versions, to_version=metadata_2_versions)\n-    def test_simple_upgrade_downgrade(self, from_version, to_version):\n+    @matrix(from_version=smoke_test_versions, to_version=dev_version)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MjkxNA=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcyODMxOnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMjoyOFrOGpm91A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMjoyOFrOGpm91A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MzIyMA==", "bodyText": "A lot of these changes are part of adapting the test to the smoke test app.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446283220", "createdAt": "2020-06-26T16:22:28Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -201,14 +204,29 @@ def test_simple_upgrade_downgrade(self, from_version, to_version):\n         self.zk = ZookeeperService(self.test_context, num_nodes=1)\n         self.zk.start()\n \n-        self.kafka = KafkaService(self.test_context, num_nodes=1, zk=self.zk, topics=self.topics)\n+        self.kafka = KafkaService(self.test_context, num_nodes=1, zk=self.zk, topics={", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDczMTI2OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMzoyNFrOGpm_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMzoyNFrOGpm_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MzY3Mw==", "bodyText": "I refactored this method to start all the nodes concurrently, rather than one at a time. We still do a rolling upgrade, but there's no need to do a rolling startup.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446283673", "createdAt": "2020-06-26T16:23:24Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -349,56 +370,42 @@ def get_version_string(self, version):\n     def start_all_nodes_with(self, version):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTA4MjE2OnYy", "diffSide": "RIGHT", "path": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyMDoyMVrOGpqekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxMzozNlrOGpr6JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDc1NQ==", "bodyText": "I'm assuming 22..25 client / drive code are all copy-pastes here so I skipped reviewing them. LMK if they aren't.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446340755", "createdAt": "2020-06-26T18:20:21Z", "author": {"login": "guozhangwang"}, "path": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.tests;\n+\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.streams.StreamsConfig;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import static org.apache.kafka.streams.tests.SmokeTestDriver.generate;\n+import static org.apache.kafka.streams.tests.SmokeTestDriver.generatePerpetually;\n+\n+public class StreamsSmokeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NDE5Ng==", "bodyText": "That's correct.", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446364196", "createdAt": "2020-06-26T19:13:36Z", "author": {"login": "vvcephei"}, "path": "streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.tests;\n+\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.streams.StreamsConfig;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import static org.apache.kafka.streams.tests.SmokeTestDriver.generate;\n+import static org.apache.kafka.streams.tests.SmokeTestDriver.generatePerpetually;\n+\n+public class StreamsSmokeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDc1NQ=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTEwNDIzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferChangelogDeserializationHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyODo1NlrOGpqs-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNDowM1rOGpr6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDQ0Mw==", "bodyText": "Some docs, either here or directly inside InMemoryTimeOrderedKeyValueBuffer.java explaining the format difference would help a lot. You can see some examples like object GroupMetadataManager", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446344443", "createdAt": "2020-06-26T18:28:56Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferChangelogDeserializationHelper.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.state.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.streams.kstream.internals.Change;\n+import org.apache.kafka.streams.kstream.internals.FullChangeSerde;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+final class TimeOrderedKeyValueBufferChangelogDeserializationHelper {\n+    private TimeOrderedKeyValueBufferChangelogDeserializationHelper() {}\n+\n+    static final class DeserializationResult {\n+        private final long time;\n+        private final Bytes key;\n+        private final BufferValue bufferValue;\n+\n+        private DeserializationResult(final long time, final Bytes key, final BufferValue bufferValue) {\n+            this.time = time;\n+            this.key = key;\n+            this.bufferValue = bufferValue;\n+        }\n+\n+        long time() {\n+            return time;\n+        }\n+\n+        Bytes key() {\n+            return key;\n+        }\n+\n+        BufferValue bufferValue() {\n+            return bufferValue;\n+        }\n+    }\n+\n+\n+    static DeserializationResult duckTypeV2(final ConsumerRecord<byte[], byte[]> record, final Bytes key) {\n+        DeserializationResult deserializationResult = null;\n+        RuntimeException v2DeserializationException = null;\n+        RuntimeException v3DeserializationException = null;\n+        try {\n+            deserializationResult = deserializeV2(record, key);\n+        } catch (final RuntimeException e) {\n+            v2DeserializationException = e;\n+        }\n+        // versions 2.4.0, 2.4.1, and 2.5.0 would have erroneously encoded a V3 record with the\n+        // V2 header, so we'll try duck-typing to see if this is decodable as V3\n+        if (deserializationResult == null) {\n+            try {\n+                deserializationResult = deserializeV3(record, key);\n+            } catch (final RuntimeException e) {\n+                v3DeserializationException = e;\n+            }\n+        }\n+\n+        if (deserializationResult == null) {\n+            // ok, it wasn't V3 either. Throw both exceptions:\n+            final RuntimeException exception =\n+                new RuntimeException(\"Couldn't deserialize record as v2 or v3: \" + record,\n+                                     v2DeserializationException);\n+            exception.addSuppressed(v3DeserializationException);\n+            throw exception;\n+        }\n+        return deserializationResult;\n+    }\n+\n+    private static DeserializationResult deserializeV2(final ConsumerRecord<byte[], byte[]> record,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NDM2NA==", "bodyText": "sure thing!", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446364364", "createdAt": "2020-06-26T19:14:03Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/TimeOrderedKeyValueBufferChangelogDeserializationHelper.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.state.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.streams.kstream.internals.Change;\n+import org.apache.kafka.streams.kstream.internals.FullChangeSerde;\n+\n+import java.nio.ByteBuffer;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+final class TimeOrderedKeyValueBufferChangelogDeserializationHelper {\n+    private TimeOrderedKeyValueBufferChangelogDeserializationHelper() {}\n+\n+    static final class DeserializationResult {\n+        private final long time;\n+        private final Bytes key;\n+        private final BufferValue bufferValue;\n+\n+        private DeserializationResult(final long time, final Bytes key, final BufferValue bufferValue) {\n+            this.time = time;\n+            this.key = key;\n+            this.bufferValue = bufferValue;\n+        }\n+\n+        long time() {\n+            return time;\n+        }\n+\n+        Bytes key() {\n+            return key;\n+        }\n+\n+        BufferValue bufferValue() {\n+            return bufferValue;\n+        }\n+    }\n+\n+\n+    static DeserializationResult duckTypeV2(final ConsumerRecord<byte[], byte[]> record, final Bytes key) {\n+        DeserializationResult deserializationResult = null;\n+        RuntimeException v2DeserializationException = null;\n+        RuntimeException v3DeserializationException = null;\n+        try {\n+            deserializationResult = deserializeV2(record, key);\n+        } catch (final RuntimeException e) {\n+            v2DeserializationException = e;\n+        }\n+        // versions 2.4.0, 2.4.1, and 2.5.0 would have erroneously encoded a V3 record with the\n+        // V2 header, so we'll try duck-typing to see if this is decodable as V3\n+        if (deserializationResult == null) {\n+            try {\n+                deserializationResult = deserializeV3(record, key);\n+            } catch (final RuntimeException e) {\n+                v3DeserializationException = e;\n+            }\n+        }\n+\n+        if (deserializationResult == null) {\n+            // ok, it wasn't V3 either. Throw both exceptions:\n+            final RuntimeException exception =\n+                new RuntimeException(\"Couldn't deserialize record as v2 or v3: \" + record,\n+                                     v2DeserializationException);\n+            exception.addSuppressed(v3DeserializationException);\n+            throw exception;\n+        }\n+        return deserializationResult;\n+    }\n+\n+    private static DeserializationResult deserializeV2(final ConsumerRecord<byte[], byte[]> record,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDQ0Mw=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTExMjQxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozMTo1OVrOGpqyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozNzoyNVrOGpx3dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NTc5MA==", "bodyText": "I'm just thinking, maybe we should encode headers to tombstones too in case in the future we changed the semantics of tombstones?", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446345790", "createdAt": "2020-06-26T18:31:59Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -258,34 +263,43 @@ private void logValue(final Bytes key, final BufferKey bufferKey, final BufferVa\n         final int sizeOfBufferTime = Long.BYTES;\n         final ByteBuffer buffer = value.serialize(sizeOfBufferTime);\n         buffer.putLong(bufferKey.time());\n-\n+        final byte[] array = buffer.array();\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                buffer.array(),\n-                V_2_CHANGELOG_HEADERS,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            array,\n+            CHANGELOG_HEADERS,\n+            partition,\n+            null,\n+            KEY_SERIALIZER,\n+            VALUE_SERIALIZER\n         );\n     }\n \n     private void logTombstone(final Bytes key) {\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                null,\n-                null,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            null,\n+            null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTk5Mg==", "bodyText": "I remember considering this when I added the first version header. The reason I didn't is that, since the initial version didn't have any headers, even if we change the tombstone format in the future, we'll always have to interpret a \"no header, null value\" record as being a \"legacy format\" tombstone, just like we have to interpret a \"no header, non-null value\" as being a \"legacy format\" data record.\nYou can think of \"no header\" as indicating \"version 0\". Since we haven't changed the format of tombstones yet, there's no value in adding a \"version 1\" flag. We should just wait until we do need to make such a change (if ever).", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446365992", "createdAt": "2020-06-26T19:17:37Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -258,34 +263,43 @@ private void logValue(final Bytes key, final BufferKey bufferKey, final BufferVa\n         final int sizeOfBufferTime = Long.BYTES;\n         final ByteBuffer buffer = value.serialize(sizeOfBufferTime);\n         buffer.putLong(bufferKey.time());\n-\n+        final byte[] array = buffer.array();\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                buffer.array(),\n-                V_2_CHANGELOG_HEADERS,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            array,\n+            CHANGELOG_HEADERS,\n+            partition,\n+            null,\n+            KEY_SERIALIZER,\n+            VALUE_SERIALIZER\n         );\n     }\n \n     private void logTombstone(final Bytes key) {\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                null,\n-                null,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            null,\n+            null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NTc5MA=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTgxMg==", "bodyText": "SG", "url": "https://github.com/apache/kafka/pull/8905#discussion_r446461812", "createdAt": "2020-06-27T00:37:25Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -258,34 +263,43 @@ private void logValue(final Bytes key, final BufferKey bufferKey, final BufferVa\n         final int sizeOfBufferTime = Long.BYTES;\n         final ByteBuffer buffer = value.serialize(sizeOfBufferTime);\n         buffer.putLong(bufferKey.time());\n-\n+        final byte[] array = buffer.array();\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                buffer.array(),\n-                V_2_CHANGELOG_HEADERS,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            array,\n+            CHANGELOG_HEADERS,\n+            partition,\n+            null,\n+            KEY_SERIALIZER,\n+            VALUE_SERIALIZER\n         );\n     }\n \n     private void logTombstone(final Bytes key) {\n         ((RecordCollector.Supplier) context).recordCollector().send(\n-                changelogTopic,\n-                key,\n-                null,\n-                null,\n-                partition,\n-                null,\n-                KEY_SERIALIZER,\n-                VALUE_SERIALIZER\n+            changelogTopic,\n+            key,\n+            null,\n+            null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NTc5MA=="}, "originalCommit": {"oid": "7b8deb8d98fbf435886cbbcc9093016ee8dd2004"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}