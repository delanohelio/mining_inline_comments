{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjA0NDg3", "number": 8605, "title": "MINOR: align the constructor of KafkaConsumer to KafkaProducer", "bodyText": "This PR includes following changes.\n1. remove KafkaProducer#propsToMap\n2. align the constructor of KafkaProducer and KafkaConsumer\n\nmove KafkaProducer#propsToMap to Utils#propsToMap\napply Utils#propsToMap to constructor of KafkaConsumer\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-03T13:41:51Z", "url": "https://github.com/apache/kafka/pull/8605", "merged": true, "mergeCommit": {"oid": "d4c1ef4a100857659ff4ff055bb743dc0471560e"}, "closed": true, "closedAt": "2020-05-31T21:36:28Z", "author": {"login": "chia7712"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdrFw7AFqTQwNDYxOTk0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmbSXVAFqTQyMTQzMzMzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjE5OTQ4", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-404619948", "createdAt": "2020-05-03T13:42:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzo0MjowNlrOGPsLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzo0MjowNlrOGPsLLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTU4MQ==", "bodyText": "this check is duplicate to https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java#L103", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419105581", "createdAt": "2020-05-03T13:42:06Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -1235,19 +1245,6 @@ private void close(Duration timeout, boolean swallowException) {\n         log.debug(\"Kafka producer has been closed\");\n     }\n \n-    private static Map<String, Object> propsToMap(Properties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjIwMTI3", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-404620127", "createdAt": "2020-05-03T13:44:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzo0NDowNVrOGPsMCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzo0NDowNVrOGPsMCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTgwMw==", "bodyText": "this constructor is used by KafkaProducerTest only. I keep this method to minimize this PR", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419105803", "createdAt": "2020-05-03T13:44:05Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -310,21 +310,31 @@ public KafkaProducer(Properties properties) {\n      *                         be called in the producer when the serializer is passed in directly.\n      */\n     public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n-        this(propsToMap(properties), keySerializer, valueSerializer, null, null, null,\n+        this(new ProducerConfig(ProducerConfig.addSerializerToConfig(properties, keySerializer, valueSerializer)), keySerializer,\n+                valueSerializer, null, null, null,\n                 Time.SYSTEM);\n     }\n \n     // visible for testing\n-    @SuppressWarnings(\"unchecked\")\n     KafkaProducer(Map<String, Object> configs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjU2MzI0", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-404656324", "createdAt": "2020-05-03T20:52:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMDo1MjoxNFrOGPvZ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMDo1MjoxNFrOGPvZ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1ODUyNA==", "bodyText": "The previous approach was intended to avoid having this logic in many places.", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419158524", "createdAt": "2020-05-03T20:52:14Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -284,7 +283,8 @@ public KafkaProducer(final Map<String, Object> configs) {\n      *                         be called in the producer when the serializer is passed in directly.\n      */\n     public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n-        this(configs, keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n+        this(new ProducerConfig(ProducerConfig.addSerializerToConfig(configs, keySerializer, valueSerializer)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTg4NTUw", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-405188550", "createdAt": "2020-05-04T17:19:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxOToxNVrOGQKKMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxOToxNVrOGQKKMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Njg1MQ==", "bodyText": "the access modifier is changed from private to public as\n\nKafkaProducer has a same but public constructor\nthe previous constructor (ConsumerConfig, ...) is useless", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419596851", "createdAt": "2020-05-04T17:19:15Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -662,12 +641,27 @@ public KafkaConsumer(Properties properties) {\n     public KafkaConsumer(Properties properties,\n                          Deserializer<K> keyDeserializer,\n                          Deserializer<V> valueDeserializer) {\n-        this(new ConsumerConfig(ConsumerConfig.addDeserializerToConfig(properties, keyDeserializer, valueDeserializer)),\n-             keyDeserializer, valueDeserializer);\n+        this(Utils.propsToMap(properties), keyDeserializer, valueDeserializer);\n     }\n \n+    /**\n+     * A consumer is instantiated by providing a set of key-value pairs as configuration, and a key and a value {@link Deserializer}.\n+     * <p>\n+     * Valid configuration strings are documented at {@link ConsumerConfig}.\n+     * <p>\n+     * Note: after creating a {@code KafkaConsumer} you must always {@link #close()} it to avoid resource leaks.\n+     *\n+     * @param configs The consumer configs\n+     * @param keyDeserializer The deserializer for key that implements {@link Deserializer}. The configure() method\n+     *            won't be called in the consumer when the deserializer is passed in directly.\n+     * @param valueDeserializer The deserializer for value that implements {@link Deserializer}. The configure() method\n+     *            won't be called in the consumer when the deserializer is passed in directly.\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    private KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) {\n+    public KafkaConsumer(Map<String, Object> configs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzA5MDM0", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-418309034", "createdAt": "2020-05-26T13:41:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0MTo0OFrOGaezdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0MTo0OFrOGaezdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMDg1Mw==", "bodyText": "did you get around to update the PR with a variant that removes the no-longer-used addDeserializerToConfig() method?\n\ndone !", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430420853", "createdAt": "2020-05-26T13:41:48Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -573,18 +573,6 @@ private void maybeOverrideClientId(Map<String, Object> configs) {\n         return newConfigs;\n     }\n \n-    public static Properties addDeserializerToConfig(Properties properties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzEwNDk1", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-418310495", "createdAt": "2020-05-26T13:43:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0MzoxNVrOGae3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0MzoxNVrOGae3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMTkxNg==", "bodyText": "This test is similar to ConsumerConfigTest", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430421916", "createdAt": "2020-05-26T13:43:15Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/ProducerConfigTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.producer;\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ProducerConfigTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzE1MjEw", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-418315210", "createdAt": "2020-05-26T13:48:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0ODowNVrOGafFYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0OTozMlrOGafJiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg==", "bodyText": "We cannot remove this method since it's in a class that is part of Kafka's public API. We should probably deprecate it, but we need a KIP for that.", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430425442", "createdAt": "2020-05-26T13:48:05Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java", "diffHunk": "@@ -480,18 +480,6 @@ private static String parseAcks(String acksString) {\n         return newConfigs;\n     }\n \n-    public static Properties addSerializerToConfig(Properties properties,\n-                                                   Serializer<?> keySerializer,\n-                                                   Serializer<?> valueSerializer) {\n-        Properties newProperties = new Properties();\n-        newProperties.putAll(properties);\n-        if (keySerializer != null)\n-            newProperties.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass().getName());\n-        if (valueSerializer != null)\n-            newProperties.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass().getName());\n-        return newProperties;\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjA4Nw==", "bodyText": "Nit: capitalize please.", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430426087", "createdAt": "2020-05-26T13:48:55Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1184,4 +1185,22 @@ private static byte checkRange(final byte i) {\n         result.removeAll(right);\n         return result;\n     }\n+\n+    /**\n+     * convert a properties to map. All keys in properties must be string type. Otherwise, a ConfigException is thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjUwNA==", "bodyText": "We cannot remove this method since it's in a class that is part of Kafka's public API. We should probably deprecate it, but we need a KIP for that.", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430426504", "createdAt": "2020-05-26T13:49:32Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -573,18 +573,6 @@ private void maybeOverrideClientId(Map<String, Object> configs) {\n         return newConfigs;\n     }\n \n-    public static Properties addDeserializerToConfig(Properties properties,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMDg1Mw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDIyOTY1", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-421422965", "createdAt": "2020-05-30T15:39:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTozOTo0OVrOGcz9iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTozOTo0OVrOGcz9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NDY0OA==", "bodyText": "Should we assert a string valued parameter too?", "url": "https://github.com/apache/kafka/pull/8605#discussion_r432864648", "createdAt": "2020-05-30T15:39:49Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -681,4 +683,15 @@ public void testDiff() {\n         assertThat(diff, is(mkSet(\"a\", \"b\")));\n         assertThat(diff.getClass(), equalTo(TreeSet.class));\n     }\n+\n+    @Test\n+    public void testPropsToMap() {\n+        Properties props = new Properties();\n+        props.put(1, 2);\n+        assertThrows(ConfigException.class, () -> Utils.propsToMap(props));\n+        props.remove(1);\n+        // the non-string value is legal\n+        props.put(\"key\", 22);\n+        assertEquals(Utils.propsToMap(props).get(\"key\"), 22);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e51e19af226b96639dbce9796315f33c93ed927f", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/e51e19af226b96639dbce9796315f33c93ed927f", "committedDate": "2020-05-30T18:00:51Z", "message": "MINOR: align the constructor of KafkaConsumer to KafkaProducer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e51e19af226b96639dbce9796315f33c93ed927f", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/e51e19af226b96639dbce9796315f33c93ed927f", "committedDate": "2020-05-30T18:00:51Z", "message": "MINOR: align the constructor of KafkaConsumer to KafkaProducer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDMzMzMx", "url": "https://github.com/apache/kafka/pull/8605#pullrequestreview-421433331", "createdAt": "2020-05-30T18:22:42Z", "commit": {"oid": "e51e19af226b96639dbce9796315f33c93ed927f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1333, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}