{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDI3NjU0", "number": 8232, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxNjo1NVrODljNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxNjoxMFrODlxtew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAwODcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxNjo1NVrOFygkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzoxMTozMVrOFynffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNjc3OA==", "bodyText": "With this change, it seems like we don't need to let this function return null anymore. In all the branches, the final result will be ClientQuotaManagerConfig.UnlimitedQuota or staticConfigClientIdQuota if we could not find another quota. That would let us simplify some of the usages.", "url": "https://github.com/apache/kafka/pull/8232#discussion_r388506778", "createdAt": "2020-03-05T19:16:55Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -562,13 +562,17 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n             // /config/users/<default>/clients/<default>\n             quota = overriddenQuotas.get(DefaultUserClientIdQuotaEntity)\n           }\n+          if (quota == null)\n+            quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bda23287e50c3c3b4745234866eb0aaab1ae51b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMDgzNg==", "bodyText": "There is also a case where metricTags has no user or client-id keys. Based on the description of quotaLimit method in ClientQuotaCallback, null is a valid return value if no metrics tags in use. @rajinisivaram Do you know what exactly \"if the metric tags are no longer in use\" means in the description. Does it cover the case where metricTags is empty for example or does not have expected tags? My understanding is that it does.\n     * @return the quota limit for the provided metric tags or null if the metric tags are no longer in use\n     */\n    Double quotaLimit(ClientQuotaType quotaType, Map<String, String> metricTags);", "url": "https://github.com/apache/kafka/pull/8232#discussion_r388520836", "createdAt": "2020-03-05T19:42:23Z", "author": {"login": "apovzner"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -562,13 +562,17 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n             // /config/users/<default>/clients/<default>\n             quota = overriddenQuotas.get(DefaultUserClientIdQuotaEntity)\n           }\n+          if (quota == null)\n+            quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNjc3OA=="}, "originalCommit": {"oid": "2bda23287e50c3c3b4745234866eb0aaab1ae51b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MzE5MA==", "bodyText": "I see. So we cannot avoid checking the return type for null. I guess at least we can clean up this function though.", "url": "https://github.com/apache/kafka/pull/8232#discussion_r388573190", "createdAt": "2020-03-05T21:22:28Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -562,13 +562,17 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n             // /config/users/<default>/clients/<default>\n             quota = overriddenQuotas.get(DefaultUserClientIdQuotaEntity)\n           }\n+          if (quota == null)\n+            quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNjc3OA=="}, "originalCommit": {"oid": "2bda23287e50c3c3b4745234866eb0aaab1ae51b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMDE1OQ==", "bodyText": "That's true. I updated the PR such that we assign quota to unlimited quota in that function once (instead of twice, as I initially had).", "url": "https://github.com/apache/kafka/pull/8232#discussion_r388620159", "createdAt": "2020-03-05T23:11:31Z", "author": {"login": "apovzner"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -562,13 +562,17 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n             // /config/users/<default>/clients/<default>\n             quota = overriddenQuotas.get(DefaultUserClientIdQuotaEntity)\n           }\n+          if (quota == null)\n+            quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNjc3OA=="}, "originalCommit": {"oid": "2bda23287e50c3c3b4745234866eb0aaab1ae51b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM4MzYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxNjoxMFrOFy2yrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTowODo1N1rOFzEE2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MDgzMQ==", "bodyText": "Rather than change the default callback, I think it may be better to change the caller updateQuotaMetricConfigs to handle null case better. At the moment, updateQuotaMetricConfigs updates metrics only if quotaCallback.quotaLimit is non-null. This works in most cases because null indicates that those tags are no longer in use and hence we don't need to update them - those metrics will eventually expire.\nThe problem is once we enable any quotas, we always use quota metrics and the tags depend on what quotas were enabled. To be safe, we should update existing metrics regardless of whether the callback returns null. This PR addresses the issue for the default callback. But since this is a valid case for any callback implementation, using ClientQuotaCallback.quotaLimit(that returns a non-null value ) instead of quotaCallback.quotaLimit in updateQuotaMetricConfigs would ensure that we always update existing metrics with any callback.", "url": "https://github.com/apache/kafka/pull/8232#discussion_r388870831", "createdAt": "2020-03-06T12:16:10Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -579,6 +579,8 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n           if (quota == null)\n             quota = staticConfigClientIdQuota\n         }\n+        if (quota == null)\n+          quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80de11e94f26d37c19617a39993d67f75e82bb7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4ODQ3Mw==", "bodyText": "This makes sense. Thanks Rajini, will update my PR.", "url": "https://github.com/apache/kafka/pull/8232#discussion_r389088473", "createdAt": "2020-03-06T19:08:57Z", "author": {"login": "apovzner"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -579,6 +579,8 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n           if (quota == null)\n             quota = staticConfigClientIdQuota\n         }\n+        if (quota == null)\n+          quota = ClientQuotaManagerConfig.UnlimitedQuota", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MDgzMQ=="}, "originalCommit": {"oid": "d80de11e94f26d37c19617a39993d67f75e82bb7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3438, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}