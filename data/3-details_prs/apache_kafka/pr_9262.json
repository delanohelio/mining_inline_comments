{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTM2NDUz", "number": 9262, "title": "MINOR: Fix log message when tasks directory is cleaned manually", "bodyText": "Currently when a task directory is cleaned manually the message\nfor the state dir cleaner is logged instead of the message for\nthe manual cleanup. This is because the code checks the elapsed\ntime since the last update before it checks whether the cleanup\nis a manual call. This commit changes the order of the checks.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-09-08T10:10:50Z", "url": "https://github.com/apache/kafka/pull/9262", "merged": true, "mergeCommit": {"oid": "285328420c4fd9c025a34fe2ce0583136809c5db"}, "closed": true, "closedAt": "2020-09-22T16:12:26Z", "author": {"login": "cadonna"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG6x36gFqTQ4NDMzNzk2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLAJSmgBqjM3ODc3NzcyNDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzM3OTY1", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-484337965", "createdAt": "2020-09-08T17:09:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowOTo0NFrOHOmhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowOTo0NFrOHOmhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MzE2Nw==", "bodyText": "Honestly it kind of seems like there is enough divergent logic to merit splitting this up into separate methods for the manual vs cleanup-delay cases.", "url": "https://github.com/apache/kafka/pull/9262#discussion_r485073167", "createdAt": "2020-09-08T17:09:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -328,15 +328,15 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs) {\n-                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n+                        if (manualUserCall) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTM1ODU3", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-488135857", "createdAt": "2020-09-14T20:57:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1Nzo1NVrOHRmUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo1Nzo1NVrOHRmUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNTczNw==", "bodyText": "duplicate line of 340, can probably pull out of the if. Then there should be no need to make a separate method as the only divergence is a log msg.", "url": "https://github.com/apache/kafka/pull/9262#discussion_r488215737", "createdAt": "2020-09-14T20:57:55Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -328,15 +328,15 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs) {\n-                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n+                        if (manualUserCall) {\n                             log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n                                 logPrefix(), dirName, id);\n \n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDkwNDM5", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-489090439", "createdAt": "2020-09-15T21:16:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNjowMVrOHSU1dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxNjowMVrOHSU1dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3Nzc4Mw==", "bodyText": "Can we at least log a warning with the exception we're swallowing? Same for the catch (final OverlappingFileLockException | IOException e)  above", "url": "https://github.com/apache/kafka/pull/9262#discussion_r488977783", "createdAt": "2020-09-15T21:16:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,40 +306,52 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n+                                    logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    // do nothing\n+                } finally {\n+                    try {\n+                        unlock(id);\n+                    } catch (final IOException e) {\n+                        // do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDk2MzU1", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-489096355", "createdAt": "2020-09-15T21:19:27Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjY0MTY5", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-489664169", "createdAt": "2020-09-16T14:07:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDowNzo0OVrOHSypvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDoyMToxMFrOHSzQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NjMwMA==", "bodyText": "cleanRemovedTasks -> cleanRemovedTasksCalledByUser", "url": "https://github.com/apache/kafka/pull/9262#discussion_r489466300", "createdAt": "2020-09-16T14:07:49Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -280,7 +280,7 @@ synchronized void unlock(final TaskId taskId) throws IOException {\n     public synchronized void clean() {\n         // remove task dirs\n         try {\n-            cleanRemovedTasks(0, true);\n+            cleanRemovedTasksCalledByUser();\n         } catch (final Exception e) {\n             // this is already logged within cleanRemovedTasks", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NjI2OA==", "bodyText": "the method clean catches Exception already. Could we get rid of those try-catch statements? the code log.error(\"{} Failed to release the state directory lock.\", logPrefix()); can be moved to clean. For example:\n    public synchronized void clean() {\n        // remove task dirs\n        try {\n            cleanRemovedTasksCalledByUser();\n        } catch (final Exception e) {\n            log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n            throw new StreamsException(e);\n        }\n    private void cleanRemovedTasksCalledByUser() throws Exception {\n        for (final File taskDir : listAllTaskDirectories()) {\n            final String dirName = taskDir.getName();\n            final TaskId id = TaskId.parse(dirName);\n            if (!locks.containsKey(id) && lock(id)) {\n                try {\n                    log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n                            logPrefix(), dirName, id);\n                    Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                } finally {\n                    unlock(id);\n                    // for manual user call, stream threads are not running so it is safe to delete\n                    // the whole directory\n                    Utils.delete(taskDir);\n                }", "url": "https://github.com/apache/kafka/pull/9262#discussion_r489476268", "createdAt": "2020-09-16T14:21:10Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,40 +306,55 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n+                        logPrefix(), dirName, id, e);\n+                } finally {\n+                    try {\n+                        unlock(id);\n+                    } catch (final IOException e) {\n+                        log.warn(\"{} Swallowed the following exception during unlocking after \" +\n+                                \"deletion of obsolete state directory for task {}: {}\",\n+                            logPrefix(), dirName, e);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private void cleanRemovedTasksCalledByUser() throws Exception {\n+        for (final File taskDir : listAllTaskDirectories()) {\n+            final String dirName = taskDir.getName();\n+            final TaskId id = TaskId.parse(dirName);\n+            if (!locks.containsKey(id)) {\n+                Exception exception = null;\n+                try {\n+                    if (lock(id)) {\n+                        log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+                        Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                    }\n                 } catch (final OverlappingFileLockException | IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjY3MTg1", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-491667185", "createdAt": "2020-09-18T17:48:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo0ODo1MVrOHUWf0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo1NzoxM1rOHUWwCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwMjE2MQ==", "bodyText": "Nice catch!", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491102161", "createdAt": "2020-09-18T17:48:51Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -292,7 +291,7 @@ public synchronized void clean() {\n             }\n         } catch (final IOException e) {\n             log.error(\"{} Failed to delete global state directory of {} due to an unexpected exception\",\n-                appId, logPrefix(), e);\n+                logPrefix(), appId, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwMjczOQ==", "bodyText": "I this save? I think if listAllTaskDirectories() returns null we would get an NPE?", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491102739", "createdAt": "2020-09-18T17:50:04Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwMzQzMw==", "bodyText": "As above.", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491103433", "createdAt": "2020-09-18T17:51:26Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException | IOException e) {\n-                    exception = e;\n+                } catch (final OverlappingFileLockException | IOException exception) {\n+                    log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n+                        logPrefix(), dirName, id, exception);\n                 } finally {\n                     try {\n                         unlock(id);\n-\n-                        // for manual user call, stream threads are not running so it is safe to delete\n-                        // the whole directory\n-                        if (manualUserCall) {\n-                            Utils.delete(taskDir);\n-                        }\n-                    } catch (final IOException e) {\n-                        exception = e;\n+                    } catch (final IOException exception) {\n+                        log.warn(\"{} Swallowed the following exception during unlocking after \" +\n+                                \"deletion of obsolete state directory for task {}: {}\",\n+                            logPrefix(), dirName, exception);\n                     }\n                 }\n+            }\n+        }\n+    }\n \n-                if (exception != null && manualUserCall) {\n-                    log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+    private void cleanRemovedTasksCalledByUser() throws Exception {\n+        for (final File taskDir : listAllTaskDirectories()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNDEwMQ==", "bodyText": "Should we log a message that we could not get the lock? -- For a manual user call, this might be good to know?", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491104101", "createdAt": "2020-09-18T17:52:54Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException | IOException e) {\n-                    exception = e;\n+                } catch (final OverlappingFileLockException | IOException exception) {\n+                    log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n+                        logPrefix(), dirName, id, exception);\n                 } finally {\n                     try {\n                         unlock(id);\n-\n-                        // for manual user call, stream threads are not running so it is safe to delete\n-                        // the whole directory\n-                        if (manualUserCall) {\n-                            Utils.delete(taskDir);\n-                        }\n-                    } catch (final IOException e) {\n-                        exception = e;\n+                    } catch (final IOException exception) {\n+                        log.warn(\"{} Swallowed the following exception during unlocking after \" +\n+                                \"deletion of obsolete state directory for task {}: {}\",\n+                            logPrefix(), dirName, exception);\n                     }\n                 }\n+            }\n+        }\n+    }\n \n-                if (exception != null && manualUserCall) {\n-                    log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+    private void cleanRemovedTasksCalledByUser() throws Exception {\n+        for (final File taskDir : listAllTaskDirectories()) {\n+            final String dirName = taskDir.getName();\n+            final TaskId id = TaskId.parse(dirName);\n+            if (!locks.containsKey(id)) {\n+                try {\n+                    if (lock(id)) {\n+                        log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                            logPrefix(), dirName, id);\n+                        Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNTQ4NA==", "bodyText": "Might be better to use an Exception variable firstException and rethrow at the end if not null -- IIRC, behavior is undefined if we throw a second exception (ie, finally would executed after the first (outer) catch block.", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491105484", "createdAt": "2020-09-18T17:55:35Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException | IOException e) {\n-                    exception = e;\n+                } catch (final OverlappingFileLockException | IOException exception) {\n+                    log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n+                        logPrefix(), dirName, id, exception);\n                 } finally {\n                     try {\n                         unlock(id);\n-\n-                        // for manual user call, stream threads are not running so it is safe to delete\n-                        // the whole directory\n-                        if (manualUserCall) {\n-                            Utils.delete(taskDir);\n-                        }\n-                    } catch (final IOException e) {\n-                        exception = e;\n+                    } catch (final IOException exception) {\n+                        log.warn(\"{} Swallowed the following exception during unlocking after \" +\n+                                \"deletion of obsolete state directory for task {}: {}\",\n+                            logPrefix(), dirName, exception);\n                     }\n                 }\n+            }\n+        }\n+    }\n \n-                if (exception != null && manualUserCall) {\n-                    log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+    private void cleanRemovedTasksCalledByUser() throws Exception {\n+        for (final File taskDir : listAllTaskDirectories()) {\n+            final String dirName = taskDir.getName();\n+            final TaskId id = TaskId.parse(dirName);\n+            if (!locks.containsKey(id)) {\n+                try {\n+                    if (lock(id)) {\n+                        log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                            logPrefix(), dirName, id);\n+                        Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                    }\n+                } catch (final OverlappingFileLockException | IOException exception) {\n+                    log.error(\"{} Failed to delete state directory {} for task {} with exception: {}\",\n+                        logPrefix(), dirName, id, exception);\n                     throw exception;\n+                } finally {\n+                    try {\n+                        unlock(id);\n+                        // for manual user call, stream threads are not running so it is safe to delete\n+                        // the whole directory\n+                        Utils.delete(taskDir);\n+                    } catch (final IOException exception) {\n+                        log.error(\"{} Failed to release lock on state directory {} for task {} with exception: {}\",\n+                            logPrefix(), dirName, id, exception);\n+                        throw exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNjMxMg==", "bodyText": "Could we not fix this by flipping the logic to:\nif (manualUserCall) {\n} else if (now > lastModifiedMs + cleanupDelayMs) {\n}\n\nTo avoid code duplication?", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491106312", "createdAt": "2020-09-18T17:57:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjQ2NDE5", "url": "https://github.com/apache/kafka/pull/9262#pullrequestreview-491646419", "createdAt": "2020-09-18T17:16:30Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoxNjozMVrOHUVf-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyODo0OFrOHUV3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NTgxOQ==", "bodyText": "Just noticed something else wrong with this message. e will get ignored. We should instead use log.error(String.format(\"...\", logPrefix(), appId), e)", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491085819", "createdAt": "2020-09-18T17:16:31Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -292,7 +291,7 @@ public synchronized void clean() {\n             }\n         } catch (final IOException e) {\n             log.error(\"{} Failed to delete global state directory of {} due to an unexpected exception\",\n-                appId, logPrefix(), e);\n+                logPrefix(), appId, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5MTgwOQ==", "bodyText": "This log will be incomplete. We report the exception as the cause:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n          \n          \n            \n                                    logPrefix(), dirName, id, exception);\n          \n          \n            \n                                log.warn(String.format(\"%s Swallowed the following exception during deletion of obsolete state directory %s for task %s\",\n          \n          \n            \n                                    logPrefix(), dirName, id), exception);\n          \n      \n    \n    \n  \n\nThis feedback applies to pretty much all the warn/err logs in this PR.", "url": "https://github.com/apache/kafka/pull/9262#discussion_r491091809", "createdAt": "2020-09-18T17:28:48Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -306,59 +305,69 @@ public synchronized void clean() {\n      */\n     public synchronized void cleanRemovedTasks(final long cleanupDelayMs) {\n         try {\n-            cleanRemovedTasks(cleanupDelayMs, false);\n+            cleanRemovedTasksCalledByCleanerThread(cleanupDelayMs);\n         } catch (final Exception cannotHappen) {\n             throw new IllegalStateException(\"Should have swallowed exception.\", cannotHappen);\n         }\n     }\n \n-    private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n-                                                final boolean manualUserCall) throws Exception {\n-        final File[] taskDirs = listAllTaskDirectories();\n-        if (taskDirs == null || taskDirs.length == 0) {\n-            return; // nothing to do\n-        }\n-\n-        for (final File taskDir : taskDirs) {\n+    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n+        for (final File taskDir : listAllTaskDirectories()) {\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n-                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n                         if (now > lastModifiedMs + cleanupDelayMs) {\n                             log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n                                 logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n-\n-                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n-                        } else if (manualUserCall) {\n-                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                logPrefix(), dirName, id);\n-\n                             Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException | IOException e) {\n-                    exception = e;\n+                } catch (final OverlappingFileLockException | IOException exception) {\n+                    log.warn(\"{} Swallowed the following exception during deletion of obsolete state directory {} for task {}: {}\",\n+                        logPrefix(), dirName, id, exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01943f9a564000cfcb7414b4e644a4c96ccb99a3", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/01943f9a564000cfcb7414b4e644a4c96ccb99a3", "committedDate": "2020-09-21T09:12:57Z", "message": "MINOR: Fix log message when tasks directory is cleaned manually\n\nCurrently when a task directory is cleaned manually the message\nfor the state dir cleaner is logged instead of the message for\nthe manual cleanup. This is because the code checks the elapsed\ntime since the last update before it checks whether the cleanup\nis a manual call. This commit changes the order of the checks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "250b6b5749fe91d6e2ebee1819186699d9c965b3", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/250b6b5749fe91d6e2ebee1819186699d9c965b3", "committedDate": "2020-09-21T09:12:57Z", "message": "Split method in two methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845d4ee747f51924c5c9327f97caa6ca573e0ab9", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/845d4ee747f51924c5c9327f97caa6ca573e0ab9", "committedDate": "2020-09-21T09:12:57Z", "message": "Add warn log for swallowed exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3963ac6bf9399595746c61a65dfeace928a17b6", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/e3963ac6bf9399595746c61a65dfeace928a17b6", "committedDate": "2020-09-21T09:12:57Z", "message": "Refactor cleanRemovedTasksCalledByUser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e9e22a2d21453d4b8768adfba8117892c5e6b58", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/6e9e22a2d21453d4b8768adfba8117892c5e6b58", "committedDate": "2020-09-21T09:12:57Z", "message": "Remove code comment and rename exception variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6", "committedDate": "2020-09-21T09:12:57Z", "message": "Improve log messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6", "committedDate": "2020-09-21T09:12:57Z", "message": "Improve log messages"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}