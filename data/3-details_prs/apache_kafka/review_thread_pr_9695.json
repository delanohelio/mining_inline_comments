{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzU5OTEz", "number": 9695, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNDoyN1rOFA9mDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0OTowMVrOFML7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUzNDg2OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNDoyN1rOH_gecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjozMzozOVrOIBn6BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDQxOA==", "bodyText": "I moved the changeThreadCount lock to be more specific so we will not hold a lock while acquiring a new one.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r536354418", "createdAt": "2020-12-04T20:14:27Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6a8cbd4435e1b0b55d7cc3922226fcff60676d5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NDcyOQ==", "bodyText": "Nice. One minor suggestion, log a warning if the client isn't running (or rebalancing) and print the current state", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537954729", "createdAt": "2020-12-08T01:09:37Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDQxOA=="}, "originalCommit": {"oid": "d6a8cbd4435e1b0b55d7cc3922226fcff60676d5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3MzMxNw==", "bodyText": "good idea", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538573317", "createdAt": "2020-12-08T16:33:39Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDQxOA=="}, "originalCommit": {"oid": "d6a8cbd4435e1b0b55d7cc3922226fcff60676d5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYyMzExOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MTowMlrOH_hQpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0NDoyN1rOIB-WFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA==", "bodyText": "removeStreamThread is supposed to be a blocking call until the shutdown is complete", "url": "https://github.com/apache/kafka/pull/9695#discussion_r536367268", "createdAt": "2020-12-04T20:41:02Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTM3OQ==", "bodyText": "I take it the !streamThread.getName().equals(Thread.currentThread().getName()) is in preparation for adding the REPLACE_THREAD enum -- if so, can you just leave a //TODO here for now and add this in the followup PR so we have relevant changes reviewed together?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537969379", "createdAt": "2020-12-08T01:48:14Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzOTI2Nw==", "bodyText": "Actually it is for if the thread chosen is the thread that called remove thread. REPLACE_THREAD will not actually call removeThread()", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538539267", "createdAt": "2020-12-08T16:03:59Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMTc2OA==", "bodyText": "Ah right you mean if removeThread() is called from the exception handler. Thanks for clarifying", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538911768", "createdAt": "2020-12-09T00:28:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMTY3Ng==", "bodyText": "Ok in that case I think my concerns from here apply as well: is it safe to immediately redistribute the memory from the cache if the removed thread hasn't necessarily closed yet? Definitely risks an OOM, but maybe that risk is low (or at least acceptable). But we definitely can't remove the thread from threads until it's shut down since that puts its thread id back on the menu, and the ids have to be unique. How should we handle this?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538921676", "createdAt": "2020-12-09T00:54:19Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzODU1MA==", "bodyText": "I think we have to put the thread id back on the menu. Otherwise when we replace the thread we will not be able to use the same id. In the tests for REPLACE_THREAD there has been no problems with having the thread that is shutting down have the same name as the thread that is starting. But for a call to removeThread it is probably best to not resize until shutdown is complete\ni think the OOM risk is acceptable. The thread shutdown is much simpler than a client one and should not be using more space and the new thread should not have any tasks assigned until the old thread leaves the group.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538938550", "createdAt": "2020-12-09T01:37:56Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzOTg1Nw==", "bodyText": "Ah right you mean if removeThread() is called from the exception handler. Thanks for clarifying\n\nIt doesn't have to be from the handler. A thread that calls removeThread() could easily be removing itself.\nIn which case your concern about the OOM might apply as well. I don't see a good way around it though .", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538939857", "createdAt": "2020-12-09T01:41:30Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0MDk0OA==", "bodyText": "As for swallowing the InterruptedException, it still makes me uncomfortable but maybe there was/is a good reason that we do it already. Or, maybe you're just the first person to notice that we're doing that.\n\nI hope there is a good reason, but we don't seem to have a problem with it yet so....", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538940948", "createdAt": "2020-12-09T01:44:27Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,28 +924,69 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     *\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     *\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@code cache.max.bytes.buffering}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI2OA=="}, "originalCommit": {"oid": "a2eb7beca2f0589ca9d6aa39a0bc2d72c6a9b954"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYyNjIxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MTo1OFrOH_hSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MTo1OFrOH_hSZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzcxOQ==", "bodyText": "This makes sure that the names are reused correctly and that adding add removing continuously do not cause problems", "url": "https://github.com/apache/kafka/pull/9695#discussion_r536367719", "createdAt": "2020-12-04T20:41:58Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,55 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7028ab1bbff7066da158be31ec268c3c1b1ea050"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEzNzY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMToyNFrOIBCMQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjozNDowMlrOIBn7sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTM5Mg==", "bodyText": "Same here, let's log a warning", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537955392", "createdAt": "2020-12-08T01:11:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3Mzc0NA==", "bodyText": "I will log it on both empty returns", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538573744", "createdAt": "2020-12-08T16:34:02Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTM5Mg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE1NTE4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxNzo0OFrOIBCVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjowNTo1NFrOIOC1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw==", "bodyText": "We need to protect this with a lock or use a thread-safe data structure for threads, otherwise we can get a ConcurrentModificationException if the user calls addThread and/or removeThread at the same time (on that note let's add test coverage for this)", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537957833", "createdAt": "2020-12-08T01:17:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNjM3Ng==", "bodyText": "The thread list is synchronized so that take care of it, no?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538536376", "createdAt": "2020-12-08T16:01:22Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMTE0Ng==", "bodyText": "Where is it synchronized? I'm thinking that eg while iterating through this list in one thread, another thread may be inside the synchronized (changeThreadCount) block of where it removes from this list. Only the second access is synchronized so the iteration itself is still vulnerable right?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538911146", "createdAt": "2020-12-09T00:27:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzNDEzNw==", "bodyText": "kafka/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java\n    \n    \n         Line 825\n      in\n      338045c\n    \n    \n    \n    \n\n        \n          \n           threads = Collections.synchronizedList(new LinkedList<>()); \n        \n    \n  \n\n\nThe list access is synchronized. I think that when using an iterator such as a for each loop that should be safe. But since we are not actually making changes out side of the synchronized (changeThreadCount) those shouldn't cause a problem.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538934137", "createdAt": "2020-12-09T01:26:35Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY0MzU3Nw==", "bodyText": "Ah I missed the previous PR where you changed the list type. Ok I'm  not that familiar with Collections.synchronizedList but I'm still worried we may not be safe with this. From the javadocs:\nIt is imperative that the user manually synchronize on the returned list when iterating over it:", "url": "https://github.com/apache/kafka/pull/9695#discussion_r544643577", "createdAt": "2020-12-16T21:42:32Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY0NTA2MA==", "bodyText": "It wouldn't be guaranteed to catch this, but either way I think we should have a test that starts up two threads which both try to removeThread() at the same time (and maybe similarly for addStreamThread)", "url": "https://github.com/apache/kafka/pull/9695#discussion_r544645060", "createdAt": "2020-12-16T21:45:10Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5NzQ3MQ==", "bodyText": "Okay we won't get a concurrent modification but the result won't be deterministic, I think we can just synchronize the iterator in remove thread as that is the only time were we are iterating and making changes. The other places concurrent access should not be a problem.\nI've added tests for the remove and add, there does not seem to be a problem but it is hard to guarantee that the race condition hit each time.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r551597471", "createdAt": "2021-01-04T22:05:54Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NzgzMw=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIwMTA0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTozNTowM1rOIBCvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMToyOToxOFrOIB9_rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg==", "bodyText": "Be careful about swallowing the InterruptedException completely. Getting this exception means the user wants the thread to stop, not just this specific method. And we don't know what the caller of removeThread looks like, it might just be an infinite loop that checks on some metric and adjusts the thread count if necessary. We should make sure to propagate the interrupt once we finish cleaning up after the thread", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537964316", "createdAt": "2020-12-08T01:35:03Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NjM5MQ==", "bodyText": "Actually now I'm wondering, should we even do the clean up if the thread is interrupted before completed? It definitely seems like we shouldn't remove it from threads since that would free up the id for a new thread, and they have to be unique. And resizing the cache might be risky if the removed thread hasn't cleared its own cache yet.\nI guess we could have the thread handle this cleanup itself once it reaches the end of the shutdown...but maybe the priority should be to keep the code simple. Burning a thread id probably isn't so bad, but permanently losing its share of the cache memory is. WDYT?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537976391", "createdAt": "2020-12-08T02:04:47Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3ODI2NA==", "bodyText": "I think if we make a StreamThread#waitOnThreadState we can handle it the same what as in the KafkaStreams#waitOnState", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538578264", "createdAt": "2020-12-08T16:38:09Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMDgwMg==", "bodyText": "This will be moving to the other method but if you look at KafkaStreams#waitOnState you will see it also swallows the exception. If we follow the same pattern we would as well. If we want to deviate from that we can just have remove thread throw the interrupted exception.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538600802", "createdAt": "2020-12-08T16:57:31Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMzYxMA==", "bodyText": "Let's continue the discussion about what to do if the thread hasn't finished shutting down here, since the same question applies to this case.\nAs for swallowing the InterruptedException, it still makes me uncomfortable but maybe there was/is a good reason that we do it already. Or, maybe you're just the first person to notice that we're doing that.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538923610", "createdAt": "2020-12-09T00:59:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkzNTIxMw==", "bodyText": "Alright I am resolving for clarity", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538935213", "createdAt": "2020-12-09T01:29:18Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);\n+                            }\n+                        } catch (final InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NDMxNg=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzI3MTk1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo1OTo1MlrOIBDXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1NzozMlrOIBpleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDU3OA==", "bodyText": "Maybe we could follow a similar pattern as to KafkaStreams#waitOnState and use notify instead of waking up every 100ms", "url": "https://github.com/apache/kafka/pull/9695#discussion_r537974578", "createdAt": "2020-12-08T01:59:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMDgyNA==", "bodyText": "good idea", "url": "https://github.com/apache/kafka/pull/9695#discussion_r538600824", "createdAt": "2020-12-08T16:57:32Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,22 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    while (streamThread.state() != StreamThread.State.DEAD && !streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        try {\n+                            synchronized (streamThread.state()) {\n+                                streamThread.state().wait(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDU3OA=="}, "originalCommit": {"oid": "b329214d7db48ce993ac253a64133f60d65f848d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTc3NzIxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjo1OTozOFrOIDIErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxOToyMVrOID_5Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0ODkxMQ==", "bodyText": "Looking at these lines, I have two questions:\n\nWhy do we not also resize the cache of the global stream thread?\nWhy do we not do all computations regarding the cache size in getCacheSizePerThread()?\n\nRegarding 1, I think we need to resize also the cache of the global stream thread, because otherwise the global stream thread may get over proportionally much cache when new stream threads are added beyond the initial number of steam threads and -- which I think is worse -- if all stream threads are removed, we would not use all cache for the global stream thread.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540148911", "createdAt": "2020-12-10T12:59:38Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        streamThread.waitOnThreadState(StreamThread.State.DEAD);\n+                    }\n+                    synchronized (changeThreadCount) {\n+                        final long cacheSizePerThread = threads.size() == 1 ? 0 : getCacheSizePerThread(threads.size() - 1);\n+                        resizeThreadCache(cacheSizePerThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2MzQ1OQ==", "bodyText": "I agree I completely forgot to add a resize method to the global thread. Added", "url": "https://github.com/apache/kafka/pull/9695#discussion_r541063459", "createdAt": "2020-12-11T16:19:21Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        streamThread.waitOnThreadState(StreamThread.State.DEAD);\n+                    }\n+                    synchronized (changeThreadCount) {\n+                        final long cacheSizePerThread = threads.size() == 1 ? 0 : getCacheSizePerThread(threads.size() - 1);\n+                        resizeThreadCache(cacheSizePerThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0ODkxMQ=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTkwMzYwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyODowN1rOIDJN-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowOTowNVrOID_egQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzY3Mg==", "bodyText": "Is there a reason why we want to support that a stream thread can remove itself? If not I would simply not allow it and check on line 970 if the stream thread is alive and not the calling thread. Not allowing a stream thread removing itself would also ensure that we do not exceed the total cache size when we resize the cache.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540167672", "createdAt": "2020-12-10T13:28:07Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTU5Ng==", "bodyText": "Maybe there is a global thread and a stream thread and the user only wants a global thread now?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540351596", "createdAt": "2020-12-10T17:18:44Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzY3Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1NDEwNg==", "bodyText": "That would still work, but not if the non-global stream threads are removed by a non-global stream thread. I can think of a use case where a stream thread is removed by another stream thread when a special record is processed. Do we want to support such a use case?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540854106", "createdAt": "2020-12-11T10:41:30Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzY3Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NjY0MQ==", "bodyText": "I think  it would be odd for use to allow an outside thread to remove that last thread but not allow a thread to remove its self", "url": "https://github.com/apache/kafka/pull/9695#discussion_r541056641", "createdAt": "2020-12-11T16:09:05Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzY3Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTk1NzgxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0MDowMlrOIDJuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNjoyOVrOIDVNXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3NTkwMA==", "bodyText": "Independently on how we decide about cleanup here, we should not print the stack trace. Please remove.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540175900", "createdAt": "2020-12-10T13:40:02Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -597,6 +598,18 @@ public void setStreamsUncaughtExceptionHandler(final java.util.function.Consumer\n         this.streamsUncaughtExceptionHandler = streamsUncaughtExceptionHandler;\n     }\n \n+    public void waitOnThreadState(final StreamThread.State targetState) {\n+        synchronized (stateLock) {\n+            while (state != targetState) {\n+                try {\n+                    stateLock.wait();\n+                } catch (final InterruptedException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NDEyNg==", "bodyText": "I will do what the wait on state method in KafkaStreams does", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540364126", "createdAt": "2020-12-10T17:36:29Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -597,6 +598,18 @@ public void setStreamsUncaughtExceptionHandler(final java.util.function.Consumer\n         this.streamsUncaughtExceptionHandler = streamsUncaughtExceptionHandler;\n     }\n \n+    public void waitOnThreadState(final StreamThread.State targetState) {\n+        synchronized (stateLock) {\n+            while (state != targetState) {\n+                try {\n+                    stateLock.wait();\n+                } catch (final InterruptedException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3NTkwMA=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTk4MTMxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0NTowMlrOIDJ77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0ODowM1rOIDzWjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTQzNg==", "bodyText": "This might be a nit, but if we wait on the stream thread state below, why do we not check the stream thread state being not DEAD here? Would be easier to understand when reading the code, IMO.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540179436", "createdAt": "2020-12-10T13:45:02Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNTAzNA==", "bodyText": "Additionally, we should remove dead stream threads from the list if we encounter any here.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540225034", "createdAt": "2020-12-10T14:44:49Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTQzNg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1ODUwMw==", "bodyText": "we also want to avoid removing threads in PENDING_SHUTDOWN. There should not be any dead threads, this check is to make sure another call the removeThread is not removing the same thread.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540358503", "createdAt": "2020-12-10T17:28:25Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTQzNg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1Nzk5Ng==", "bodyText": "Good point about not removing stream threads in PENDING_SHUTDOWN.\n\nThere should not be any dead threads, this check is to make sure another call the removeThread is not removing the same thread.\n\nRight! Thanks to the new uncaught exception handler! \ud83d\ude00", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540857996", "createdAt": "2020-12-11T10:48:03Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTQzNg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjAwMzI4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0OTozMFrOIDKIiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNTozNVrOIDVKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4MjY2Nw==", "bodyText": "Some more information about why we cannot remove a stream thread would be useful.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540182667", "createdAt": "2020-12-10T13:49:30Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        streamThread.waitOnThreadState(StreamThread.State.DEAD);\n+                    }\n+                    synchronized (changeThreadCount) {\n+                        final long cacheSizePerThread = threads.size() == 1 ? 0 : getCacheSizePerThread(threads.size() - 1);\n+                        resizeThreadCache(cacheSizePerThread);\n                         threads.remove(streamThread);\n-                        resizeThreadCache(getCacheSizePerThread(threads.size()));\n-                        return Optional.empty();\n                     }\n+                    return Optional.of(streamThread.getName());\n                 }\n             }\n         }\n+        log.warn(\"Cannot remove a stream thread in state \" + state());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2MzQzNg==", "bodyText": "There are two cases. Either there is no threads that can be removed of the client is in the wrong state", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540363436", "createdAt": "2020-12-10T17:35:35Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -924,25 +924,64 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n-                        streamThread.shutdown();\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            for (final StreamThread streamThread : threads) {\n+                if (streamThread.isAlive()) {\n+                    streamThread.shutdown();\n+                    if (!streamThread.getName().equals(Thread.currentThread().getName())) {\n+                        streamThread.waitOnThreadState(StreamThread.State.DEAD);\n+                    }\n+                    synchronized (changeThreadCount) {\n+                        final long cacheSizePerThread = threads.size() == 1 ? 0 : getCacheSizePerThread(threads.size() - 1);\n+                        resizeThreadCache(cacheSizePerThread);\n                         threads.remove(streamThread);\n-                        resizeThreadCache(getCacheSizePerThread(threads.size()));\n-                        return Optional.empty();\n                     }\n+                    return Optional.of(streamThread.getName());\n                 }\n             }\n         }\n+        log.warn(\"Cannot remove a stream thread in state \" + state());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4MjY2Nw=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjAzNjQwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NjowNVrOIDKbvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1NjowNVrOIDKbvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NzU4MA==", "bodyText": "I think it would be better to use something like Kafka Streams client did not reach state RUNNING as condition details instead of wait until running. BTW, the line is too long. \ud83d\ude01", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540187580", "createdAt": "2020-12-10T13:56:05Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA1NTA3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1OTo0NVrOIDKmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1OTo0NVrOIDKmlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MDM1OQ==", "bodyText": "Why do you not verify the number of the stream threads also here?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540190359", "createdAt": "2020-12-10T13:59:45Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.of(\"newThread\")));\n+        assertThat(streams.threads.size(), equalTo(oldSize - 1));\n+    }\n+\n+    @Test\n+    public void shouldNotRemoveThreadWhenNotRunning() {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.empty()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA2MTMzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowMDo1OFrOIDKqNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowMDo1OFrOIDKqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5MTI4Ng==", "bodyText": "You should also verify the return value of removeStreamThread() here.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540191286", "createdAt": "2020-12-10T14:00:58Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjA3ODYwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDowNDozMFrOIDK0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1NjowMVrOID-7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5Mzg1Mg==", "bodyText": "A test is missing that verifies the behavior when a stream thread in state DEAD is in the list of stream threads.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540193852", "createdAt": "2020-12-10T14:04:30Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.of(\"newThread\")));\n+        assertThat(streams.threads.size(), equalTo(oldSize - 1));\n+    }\n+\n+    @Test\n+    public void shouldNotRemoveThreadWhenNotRunning() {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.empty()));\n+    }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NjM1Mg==", "bodyText": "There is no case where a streamThread should be dead in the thread list", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540366352", "createdAt": "2020-12-10T17:39:13Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.of(\"newThread\")));\n+        assertThat(streams.threads.size(), equalTo(oldSize - 1));\n+    }\n+\n+    @Test\n+    public void shouldNotRemoveThreadWhenNotRunning() {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.empty()));\n+    }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5Mzg1Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MDc1OQ==", "bodyText": "Fair enough! Still we need to test also when a thread in not alive, i.e., thread.isAlive() == false", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540860759", "createdAt": "2020-12-11T10:52:34Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.of(\"newThread\")));\n+        assertThat(streams.threads.size(), equalTo(oldSize - 1));\n+    }\n+\n+    @Test\n+    public void shouldNotRemoveThreadWhenNotRunning() {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.empty()));\n+    }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5Mzg1Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NzgwMg==", "bodyText": "Sure added", "url": "https://github.com/apache/kafka/pull/9695#discussion_r541047802", "createdAt": "2020-12-11T15:56:01Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -631,6 +634,23 @@ public void shouldNotAddThreadWhenError() {\n         assertThat(streams.threads.size(), equalTo(oldSize));\n     }\n \n+    @Test\n+    public void shouldRemoveThread() throws InterruptedException {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        streams.start();\n+        final int oldSize = streams.threads.size();\n+        TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING, 15L, \"wait until running\");\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.of(\"newThread\")));\n+        assertThat(streams.threads.size(), equalTo(oldSize - 1));\n+    }\n+\n+    @Test\n+    public void shouldNotRemoveThreadWhenNotRunning() {\n+        props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n+        assertThat(streams.removeStreamThread(), equalTo(Optional.empty()));\n+    }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5Mzg1Mg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE0NzY2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxOTowM1rOIDLeJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxOTowM1rOIDLeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwNDU4MQ==", "bodyText": "Could you please add some line breaks? This and some of the other verifications are too long.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540204581", "createdAt": "2020-12-10T14:19:03Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE1NTQ3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyMDozNFrOIDLirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyMDozNFrOIDLirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwNTc0MA==", "bodyText": "nit: Since you imported statically also the other matchers, you could also statically import this one to be consistent.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540205740", "createdAt": "2020-12-10T14:20:34Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE3ODUyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyNDo1MlrOIDLwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyNDo1MlrOIDLwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwOTI3Ng==", "bodyText": "nit: wrong indentation", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540209276", "createdAt": "2020-12-10T14:24:52Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjE5MjQ0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyNzoyNlrOIDL4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyNzoyNlrOIDL4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMTMzMQ==", "bodyText": "IMO, this string should give details when the condition is not met, like stream thread has not been added. Same applies to the other wait conditions.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540211331", "createdAt": "2020-12-10T14:27:26Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjIwMzMxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoyOTozNlrOIDL_CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1OTo1NVrOIDWQ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMzAwMA==", "bodyText": "This is not a guarantee that we give in the KIP. Assuming that always the first stream thread is removed is too strict for this test.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540213000", "createdAt": "2020-12-10T14:29:36Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MTQwNA==", "bodyText": "That is true, Will remove", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540381404", "createdAt": "2020-12-10T17:59:55Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxMzAwMA=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjIxMzU1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozMTozN1rOIDMFKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowMjoyOVrOIDWXyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDU2OA==", "bodyText": "Here you should test if the stream thread has the name of the stream thread that was removed before.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540214568", "createdAt": "2020-12-10T14:31:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));\n+\n+            final Optional<String> name2 = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name2.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MzE3OA==", "bodyText": "will do", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540383178", "createdAt": "2020-12-10T18:02:29Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));\n+\n+            final Optional<String> name2 = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name2.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNDU2OA=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjIyMzc5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozMzozN1rOIDMLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODowMDoxMlrOIDWRtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNjE0OQ==", "bodyText": "You verify the wrong name here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(name, CoreMatchers.not(Optional.empty()));\n          \n          \n            \n                        assertThat(name2, CoreMatchers.not(Optional.empty()));", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540216149", "createdAt": "2020-12-10T14:33:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));\n+\n+            final Optional<String> name2 = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MTYyMw==", "bodyText": "good catch", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540381623", "createdAt": "2020-12-10T18:00:12Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"2\", \"3\"}));\n+\n+            final Optional<String> name2 = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxNjE0OQ=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI0MDAxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozNjo0NlrOIDMU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NToyM1rOIDWE8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxODYyMg==", "bodyText": "Why not name.get() instead of name.orElse(\"\")?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540218622", "createdAt": "2020-12-10T14:36:46Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3ODM1NA==", "bodyText": "it can be either", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540378354", "createdAt": "2020-12-10T17:55:23Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIxODYyMg=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI1MDI3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozODo0NVrOIDMa8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NzowNFrOIDWJgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMDE0Nw==", "bodyText": "Could surround this call with new lines as you did for the others? Makes the calls under test more visible.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540220147", "createdAt": "2020-12-10T14:38:45Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3OTUyMA==", "bodyText": "yes", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540379520", "createdAt": "2020-12-10T17:57:04Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMDE0Nw=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI1MDg3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozODo1NVrOIDMbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDozODo1NVrOIDMbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMDI1Mg==", "bodyText": "Please remove empty line.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540220252", "createdAt": "2020-12-10T14:38:55Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI1ODA1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MDoxN1rOIDMfuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NDozN1rOIDWCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMTM3MQ==", "bodyText": "Why do you not verify the actual name since it is well defined in the KIP which name should be returned given that we know that the other two stream thread are named 1 and 2?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540221371", "createdAt": "2020-12-10T14:40:17Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzgwNA==", "bodyText": "we can verify here, we verify the names in a few lines as well", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540377804", "createdAt": "2020-12-10T17:54:37Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMTM3MQ=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI2NDQzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0MTozM1rOIDMjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NzowOVrOIDWJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjM1OA==", "bodyText": "Could you add a verification that the returned name is not empty?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540222358", "createdAt": "2020-12-10T14:41:33Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3OTU3Ng==", "bodyText": "yes", "url": "https://github.com/apache/kafka/pull/9695#discussion_r540379576", "createdAt": "2020-12-10T17:57:09Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -108,4 +108,53 @@ public void shouldAddStreamThread() throws Exception {\n             TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n         }\n     }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\"}));\n+\n+            final Optional<String> name = kafkaStreams.addStreamThread();\n+\n+            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n+                        .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n+                \"Wait for the thread to be added\"\n+            );\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n+            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n+            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+\n+\n+            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            kafkaStreams.removeStreamThread();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyMjM1OA=="}, "originalCommit": {"oid": "338045c9b62c3b6154789d9cfa9a1cf104188e16"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDUwMDY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0NDozNlrOIPYkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMzozMDowM1rOIPZeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw==", "bodyText": "I know Bruno brought this up already and maybe I just missed the resolution in the previous comments, but: should we allow a StreamThread to remove itself? Originally I was thinking \"no\" but I was just thinking about what be the expected behavior from this method when called from a StreamThread, and I actually think we should consider ONLY removing the calling thread.\nI get the sense that users will interpret removeStreamThread() when called from a Thread as essentially saying \"shutdown this thread\", not \"remove some random thread\". WDYT?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553002043", "createdAt": "2021-01-06T22:44:36Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzA1Mw==", "bodyText": "I think we should assert one or the other at least, ie we only ever remove the current thread or we only ever remove a different thread. And document this clearly of course \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553003053", "createdAt": "2021-01-06T22:47:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNDc5MQ==", "bodyText": "We want to avoid removing the calling thread because the idea is that the call will block until thread is gone. This is best for the cache resizing too. However I do not like the idea of not letting a thread remove itself because, if we have one stream thread left not letting that thread remove it self (maybe leaving a global thread) this seems incomplete. If we need to make this more structured maybe we only remove itself if is the only thread running? that should make the cache and blocking issue less of a problem. How does that sound?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553004791", "createdAt": "2021-01-06T22:52:52Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNTY4NQ==", "bodyText": "@ableegoldman I don't know about only letting it remove its self. Not only stream threads can call this.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553005685", "createdAt": "2021-01-06T22:55:32Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNzkwNw==", "bodyText": "Sorry, my suggestion was vaguely worded. I meant that we should only let a StreamThread remove itself, if we detect that removeThread has been called by a StreamThread (which should be possible). If it's called by something else, then yes we should just pick a random thread to remove. I think that addresses your concern in the first sentence of your reply, but let me know if I'm misinterpreting it.\n\nI do not like the idea of not letting a thread remove itself because, if we have one stream thread left not letting that thread remove it self (maybe leaving a global thread) this seems incomplete.\n\nThat's a good point. In that case I would advocate for only letting a StreamThread remove itself. Do you see any problems with that?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553007907", "createdAt": "2021-01-06T23:02:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxMTg3Mg==", "bodyText": "well there is the issue of the cache resize. Which we wait until thread is dead before changing the cache size. We can not do that when a thread removes itself which makes it possible for OOM. (#9695 (comment)) so it think it would be best to avoid removing itself if possible. unless it is the last thread", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553011872", "createdAt": "2021-01-06T23:14:18Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxNjIxMQ==", "bodyText": "So we should try removing any other thread, if one exists, and only allow to remove the current thread if it's the last one? That sounds reasonable, let's go with that", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553016211", "createdAt": "2021-01-06T23:27:54Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxNjgzOQ==", "bodyText": "cool I'll make those changes. Basically a thread can only remove itself if it is the only thread left", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553016839", "createdAt": "2021-01-06T23:30:03Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive()) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMjA0Mw=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDUyMTE1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo1Mzo1NVrOIPYwgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo1NTo0MFrOIPYylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNTE4Ng==", "bodyText": "Awesome, thanks for adding this test. One small suggestion would be to wait for the client to get back to RUNNING at the end, so we can verify that everything did go smoothly with the add/remove. I think this would be good to do in all of these tests, actually", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553005186", "createdAt": "2021-01-06T22:53:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveThreads() throws InterruptedException {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            final CountDownLatch latch = new CountDownLatch(2);\n+            final Thread one = adjustCountHelperThread(kafkaStreams, 4, latch);\n+            final Thread two = adjustCountHelperThread(kafkaStreams, 6, latch);\n+            two.start();\n+            one.start();\n+            latch.await(30, TimeUnit.SECONDS);\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNTcxNw==", "bodyText": "good idea", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553005717", "createdAt": "2021-01-06T22:55:40Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldAddAndRemoveThreads() throws InterruptedException {\n+        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n+            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n+            final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n+            final CountDownLatch latch = new CountDownLatch(2);\n+            final Thread one = adjustCountHelperThread(kafkaStreams, 4, latch);\n+            final Thread two = adjustCountHelperThread(kafkaStreams, 6, latch);\n+            two.start();\n+            one.start();\n+            latch.await(30, TimeUnit.SECONDS);\n+            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNTE4Ng=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDUyODMyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo1Njo1NVrOIPY0bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMzoyMDo1NFrOIPZTgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNjE5MQ==", "bodyText": "One more corner case we should add test coverage for is what happens when we get down to 0 threads. Two things to verify  that I can think of are: (1) that the client stays in RUNNING, and (2) that we can add more threads again after we've been idling with zero threads for a short while (and as always, that it goes into REBALANCING --> RUNNING after adding the threads)", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553006191", "createdAt": "2021-01-06T22:56:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNzc3NA==", "bodyText": "Well right now it would not stay in running until https://github.com/apache/kafka/pull/9720/files gets merged. So we can in a follow up PR get that corner case tested.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553007774", "createdAt": "2021-01-06T23:01:41Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNjE5MQ=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwODkzMw==", "bodyText": "Ah, right. Would it make sense to add this test in the above PR instead? Or something in the middle, you could add the test in this PR and just leave out (1) for now, then add that check in the other PR.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553008933", "createdAt": "2021-01-06T23:05:02Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNjE5MQ=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxNDE0NQ==", "bodyText": "the above PR doesn't have the remove as its in this PR. bit of a circular dependency :)\nWe do test that the client stays in running after shutting down some threads. We can add a test to add threads after we shut them down. However I would like to test it with remove thread anyways so if this get merged first I will update the above PR", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553014145", "createdAt": "2021-01-06T23:20:54Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -97,15 +99,132 @@ public void shouldAddStreamThread() throws Exception {\n \n             final Optional<String> name = kafkaStreams.addStreamThread();\n \n-            assertThat(name, CoreMatchers.not(Optional.empty()));\n+            assertThat(name, not(Optional.empty()));\n             TestUtils.waitForCondition(\n                 () -> kafkaStreams.localThreadsMetadata().stream().sequential()\n                         .map(ThreadMetadata::threadName).anyMatch(t -> t.equals(name.orElse(\"\"))),\n                 \"Wait for the thread to be added\"\n             );\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n-            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n-            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n+            assertThat(\n+                kafkaStreams\n+                    .localThreadsMetadata()\n+                    .stream()\n+                    .map(t -> t.threadName().split(\"-StreamThread-\")[1])\n+                    .sorted().toArray(),\n+                equalTo(new String[] {\"1\", \"2\", \"3\"})\n+            );\n+            TestUtils.waitForCondition(\n+                () -> kafkaStreams.state() == KafkaStreams.State.RUNNING,\n+                \"Kafka Streams client did not reach state RUNNING\"\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRemoveStreamThread() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNjE5MQ=="}, "originalCommit": {"oid": "181f25835076b897aa13a7626c0d1590b7fd6043"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDY0NjkwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMzo1NDowNlrOIPZ4uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0NDoxM1rOIRa8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMzY3NQ==", "bodyText": "I guess technically this might not work if we have only one live thread left, but other dead threads still in the list -- in that case we might skip over the live thread when we really should have removed it. I'm not sure how much of a problem this would really be, just wanted to point it out.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553023675", "createdAt": "2021-01-06T23:54:06Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -992,7 +992,7 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n         if (isRunningOrRebalancing()) {\n             synchronized (changeThreadCount) {\n                 for (final StreamThread streamThread : threads) {\n-                    if (streamThread.isAlive()) {\n+                    if (streamThread.isAlive() && (!streamThread.getName().equals(Thread.currentThread().getName()) || threads.size() == 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA0MjgwNQ==", "bodyText": "We don't keep the dead threads in this list. When a thread dies we remove it form the list and updated the number of dead threads metric.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553042805", "createdAt": "2021-01-07T00:38:19Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -992,7 +992,7 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n         if (isRunningOrRebalancing()) {\n             synchronized (changeThreadCount) {\n                 for (final StreamThread streamThread : threads) {\n-                    if (streamThread.isAlive()) {\n+                    if (streamThread.isAlive() && (!streamThread.getName().equals(Thread.currentThread().getName()) || threads.size() == 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMzY3NQ=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA3ODU4MQ==", "bodyText": "Then why check isAlive() here at all? (I'm not necessarily requesting changes here, just trying to understand)", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553078581", "createdAt": "2021-01-07T02:44:56Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -992,7 +992,7 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n         if (isRunningOrRebalancing()) {\n             synchronized (changeThreadCount) {\n                 for (final StreamThread streamThread : threads) {\n-                    if (streamThread.isAlive()) {\n+                    if (streamThread.isAlive() && (!streamThread.getName().equals(Thread.currentThread().getName()) || threads.size() == 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMzY3NQ=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzODA3Nw==", "bodyText": "there is a very small window between when thread dies with the old handler and when it is removed from the the list. So we have to check to make sure for now", "url": "https://github.com/apache/kafka/pull/9695#discussion_r555138077", "createdAt": "2021-01-11T15:44:13Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -992,7 +992,7 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n         if (isRunningOrRebalancing()) {\n             synchronized (changeThreadCount) {\n                 for (final StreamThread streamThread : threads) {\n-                    if (streamThread.isAlive()) {\n+                    if (streamThread.isAlive() && (!streamThread.getName().equals(Thread.currentThread().getName()) || threads.size() == 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMzY3NQ=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDY1MjQ0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMzo1Njo1MlrOIPZ7uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMDowODo0M1rOIP6tCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNDQ0Mw==", "bodyText": "Ah, sorry I didn't think of this/mention it before, but I think we actually need to wait for a transition to RUNNING, and not just for it to be in the state itself. It probably takes a little while after removing a thread for the rebalance to occur, so it's probably already in RUNNING. Pretty sure there's some other integration test util that watches for the REBALANCING -> RUNNING transition, though", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553024443", "createdAt": "2021-01-06T23:56:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -128,6 +133,7 @@ public void shouldRemoveStreamThread() throws Exception {\n             final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n             assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA0MzczMQ==", "bodyText": "ah okay that makes sense", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553043731", "createdAt": "2021-01-07T00:39:22Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -128,6 +133,7 @@ public void shouldRemoveStreamThread() throws Exception {\n             final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n             assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNDQ0Mw=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA0NzMwOA==", "bodyText": "I didn't see that util but this should work", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553047308", "createdAt": "2021-01-07T00:48:53Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -128,6 +133,7 @@ public void shouldRemoveStreamThread() throws Exception {\n             final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n             assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNDQ0Mw=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA3OTc5MQ==", "bodyText": "Cool, what you did below (waitForApplicationState on REBALANCING before RUNNING) looks good. But I think you missed doing that here -- in fact we should probably do a similar thing in all the tests in this class. Can you just give the file a final pass and make sure we verify the REBALANCING -> RUNNING transition in all of the tests?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553079791", "createdAt": "2021-01-07T02:49:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -128,6 +133,7 @@ public void shouldRemoveStreamThread() throws Exception {\n             final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n             assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNDQ0Mw=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2MTM1Mw==", "bodyText": "added", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553561353", "createdAt": "2021-01-07T20:08:43Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AdjustStreamThreadCountTest.java", "diffHunk": "@@ -128,6 +133,7 @@ public void shouldRemoveStreamThread() throws Exception {\n             final int oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n             assertThat(kafkaStreams.removeStreamThread().get().split(\"-\")[0], equalTo(appId));\n             assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNDQ0Mw=="}, "originalCommit": {"oid": "8e85b199a73557d3e6dcf4f2c8d26cc0b3bb04ae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzAyMDM3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo1OToyOFrOIPvqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo1OToyOFrOIPvqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MDUxMg==", "bodyText": "nit: Could you please rename the createStreamThread() to createAndAddStreamThread(). It is a bit weird that we have threads.remove() in this method but no threads.add(). The renaming would make it clearer.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553380512", "createdAt": "2021-01-07T14:59:28Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzA0MjkzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowNTowM1rOIPv4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowNTowM1rOIPv4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4NDA0OQ==", "bodyText": "nit: To deduplicate code, you could also remove these two lines, because they are the same as the last two lines of the method.\nnit: Could you change Cannot add a stream thread in state \" + state() to Cannot add a stream thread when Kafka Streams client is in state \" + state(), or similar. Currently, it is not completely clear if the state belongs to the stream thread or to the client.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553384049", "createdAt": "2021-01-07T15:05:03Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzA1NzI1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowODozOVrOIPwBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowODozOVrOIPwBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4NjI5Mw==", "bodyText": "See my nit comment above.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553386293", "createdAt": "2021-01-07T15:08:39Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -947,24 +948,65 @@ private StreamThread createStreamThread(final long cacheSizePerThread, final int\n      * @return name of the added stream thread or empty if a new stream thread could not be added\n      */\n     public Optional<String> addStreamThread() {\n-        synchronized (changeThreadCount) {\n-            if (isRunningOrRebalancing()) {\n-                final int threadIdx = getNextThreadIndex();\n-                final long cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n+        if (isRunningOrRebalancing()) {\n+            final int threadIdx;\n+            final long cacheSizePerThread;\n+            synchronized (changeThreadCount) {\n+                threadIdx = getNextThreadIndex();\n+                cacheSizePerThread = getCacheSizePerThread(threads.size() + 1);\n                 resizeThreadCache(cacheSizePerThread);\n-                final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n-                synchronized (stateLock) {\n-                    if (isRunningOrRebalancing()) {\n-                        streamThread.start();\n-                        return Optional.of(streamThread.getName());\n-                    } else {\n+            }\n+            final StreamThread streamThread = createStreamThread(cacheSizePerThread, threadIdx);\n+\n+            synchronized (stateLock) {\n+                if (isRunningOrRebalancing()) {\n+                    streamThread.start();\n+                    return Optional.of(streamThread.getName());\n+                } else {\n+                    streamThread.shutdown();\n+                    threads.remove(streamThread);\n+                    resizeThreadCache(getCacheSizePerThread(threads.size()));\n+                    log.warn(\"Cannot add a stream thread in state \" + state());\n+                    return Optional.empty();\n+                }\n+            }\n+        }\n+        log.warn(\"Cannot add a stream thread in state \" + state());\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Removes one stream thread out of the running stream threads from this Kafka Streams client.\n+     * <p>\n+     * The removed stream thread is gracefully shut down. This method does not specify which stream\n+     * thread is shut down.\n+     * <p>\n+     * Since the number of stream threads decreases, the sizes of the caches in the remaining stream\n+     * threads are adapted so that the sum of the cache sizes over all stream threads equals the total\n+     * cache size specified in configuration {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG}.\n+     *\n+     * @return name of the removed stream thread or empty if a stream thread could not be removed because\n+     *         no stream threads are alive\n+     */\n+    public Optional<String> removeStreamThread() {\n+        if (isRunningOrRebalancing()) {\n+            synchronized (changeThreadCount) {\n+                for (final StreamThread streamThread : threads) {\n+                    if (streamThread.isAlive() && (!streamThread.getName().equals(Thread.currentThread().getName()) || threads.size() == 1)) {\n                         streamThread.shutdown();\n+                        if (!streamThread.getName().equals(Thread.currentThread().getName())) {\n+                            streamThread.waitOnThreadState(StreamThread.State.DEAD);\n+                        }\n                         threads.remove(streamThread);\n-                        resizeThreadCache(getCacheSizePerThread(threads.size()));\n-                        return Optional.empty();\n+                        final long cacheSizePerThread = getCacheSizePerThread(threads.size());\n+                        resizeThreadCache(cacheSizePerThread);\n+                        return Optional.of(streamThread.getName());\n                     }\n                 }\n             }\n+            log.warn(\"There are no threads eligible for removal\");\n+        } else {\n+            log.warn(\"Cannot remove a stream thread in state \" + state());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzEzNDc4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToyNzozM1rOIPwvwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0ODo1NFrOIRbJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5ODIwOQ==", "bodyText": "Do we not need to synchronize this block on the changeThreadCount to at least guarantee that the state is correct when the method returns? Otherwise between the if and threadMetadata.add(thread.threadMetadata()) the stream thread might transit to DEAD.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553398209", "createdAt": "2021-01-07T15:27:33Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1432,7 +1480,9 @@ public void cleanUp() {\n         validateIsRunningOrRebalancing();\n         final Set<ThreadMetadata> threadMetadata = new HashSet<>();\n         for (final StreamThread thread : threads) {\n-            threadMetadata.add(thread.threadMetadata());\n+            if (thread.state() != StreamThread.State.DEAD) {\n+                threadMetadata.add(thread.threadMetadata());\n+            }\n         }\n         return threadMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5MDEyNw==", "bodyText": "changeThreadCount  would not take care of that we need to sync on the thread state", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553490127", "createdAt": "2021-01-07T17:57:17Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1432,7 +1480,9 @@ public void cleanUp() {\n         validateIsRunningOrRebalancing();\n         final Set<ThreadMetadata> threadMetadata = new HashSet<>();\n         for (final StreamThread thread : threads) {\n-            threadMetadata.add(thread.threadMetadata());\n+            if (thread.state() != StreamThread.State.DEAD) {\n+                threadMetadata.add(thread.threadMetadata());\n+            }\n         }\n         return threadMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5ODIwOQ=="}, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4ODE3MQ==", "bodyText": "Ah yes, you are right! The stream thread might be replaced or just normally shut down which would not be synchronized on the changeThreadCount lock. However, we still do not guarantee that the state is correct when the method returns, because the state could change after the lock is released but before the method returns. At this point with or without lock it doesn't matter. Either we find something that synchronizes the whole method or we can also remove the synchronisation on the stream thread state. And also if we find something that synchronizes the whole method, I am not sure if this guarantee is worth the hassle. WDYT?", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553988171", "createdAt": "2021-01-08T14:51:39Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1432,7 +1480,9 @@ public void cleanUp() {\n         validateIsRunningOrRebalancing();\n         final Set<ThreadMetadata> threadMetadata = new HashSet<>();\n         for (final StreamThread thread : threads) {\n-            threadMetadata.add(thread.threadMetadata());\n+            if (thread.state() != StreamThread.State.DEAD) {\n+                threadMetadata.add(thread.threadMetadata());\n+            }\n         }\n         return threadMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5ODIwOQ=="}, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE0MTU2Mw==", "bodyText": "since changing the thread metadata uses a copy once its is added to the list as not dead it insures that we won't return a dead thread. And after we and it to the list we don't need to care until method is called again", "url": "https://github.com/apache/kafka/pull/9695#discussion_r555141563", "createdAt": "2021-01-11T15:48:54Z", "author": {"login": "wcarlson5"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1432,7 +1480,9 @@ public void cleanUp() {\n         validateIsRunningOrRebalancing();\n         final Set<ThreadMetadata> threadMetadata = new HashSet<>();\n         for (final StreamThread thread : threads) {\n-            threadMetadata.add(thread.threadMetadata());\n+            if (thread.state() != StreamThread.State.DEAD) {\n+                threadMetadata.add(thread.threadMetadata());\n+            }\n         }\n         return threadMetadata;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5ODIwOQ=="}, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzIyNjI4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0OTowMVrOIPxoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTo0OTowMVrOIPxoSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQxMjY4MQ==", "bodyText": "nit: My IDE says that the cast is not needed.", "url": "https://github.com/apache/kafka/pull/9695#discussion_r553412681", "createdAt": "2021-01-07T15:49:01Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -424,6 +424,7 @@ public void setUncaughtExceptionHandler(final StreamsUncaughtExceptionHandler st\n \n     private void defaultStreamsUncaughtExceptionHandler(final Throwable throwable) {\n         if (oldHandler) {\n+            threads.remove((StreamThread) Thread.currentThread());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306a139fd0670f6f5fff7c225fc87a9c1063a29b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3689, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}