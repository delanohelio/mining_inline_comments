{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjQyODU0", "number": 8484, "title": "MINOR: eliminate unnecessary partition lookups in fetch path", "bodyText": "There are two cases in the fetch pass where a partition is unnecessarily looked up from the partition Pool, when one is already accessible. This will be a fairly minor improvement on high partition count clusters, but could be worth 1% from some profiles I have seen.", "createdAt": "2020-04-14T15:06:55Z", "url": "https://github.com/apache/kafka/pull/8484", "merged": true, "mergeCommit": {"oid": "4ac2ad3a2bea9db1e4835a9dffc4b029dc1d9fcd"}, "closed": true, "closedAt": "2020-04-15T16:24:30Z", "author": {"login": "lbradstreet"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXcEJsgH2gAyNDAzMjQyODU0OjNhYTBjYWEwMzZjYzIxYmZkNDMwNTU1OGJmOWEwNDIxZTNiNTYwMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX6m4PAFqTM5MzkzNTMxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "author": {"user": {"login": "lbradstreet", "name": "Lucas Bradstreet"}}, "url": "https://github.com/apache/kafka/commit/3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "committedDate": "2020-04-14T04:48:13Z", "message": "MINOR: elimination unnecessary partition lookups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDIyNzU3", "url": "https://github.com/apache/kafka/pull/8484#pullrequestreview-393022757", "createdAt": "2020-04-14T15:07:27Z", "commit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNzoyN1rOGFTTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowNzoyN1rOGFTTlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg==", "bodyText": "Avoids a partition lookup", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212372", "createdAt": "2020-04-14T15:07:27Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1154,9 +1152,9 @@ class ReplicaManager(val config: KafkaConfig,\n    *  To avoid ISR thrashing, we only throttle a replica on the leader if it's in the throttled replica list,\n    *  the quota is exceeded and the replica is not in sync.\n    */\n-  def shouldLeaderThrottle(quota: ReplicaQuota, topicPartition: TopicPartition, replicaId: Int): Boolean = {\n-    val isReplicaInSync = nonOfflinePartition(topicPartition).exists(_.inSyncReplicaIds.contains(replicaId))\n-    !isReplicaInSync && quota.isThrottled(topicPartition) && quota.isQuotaExceeded\n+  def shouldLeaderThrottle(quota: ReplicaQuota, partition: Partition, replicaId: Int): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDIzMzU4", "url": "https://github.com/apache/kafka/pull/8484#pullrequestreview-393023358", "createdAt": "2020-04-14T15:08:03Z", "commit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODowM1rOGFTVew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowODowM1rOGFTVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjg1OQ==", "bodyText": "Partition is already accessible, there's no need to look it it up in findPreferredReadReplica.", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212859", "createdAt": "2020-04-14T15:08:03Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -987,7 +987,7 @@ class ReplicaManager(val config: KafkaConfig,\n \n         // If we are the leader, determine the preferred read-replica\n         val preferredReadReplica = clientMetadata.flatMap(\n-          metadata => findPreferredReadReplica(tp, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))\n+          metadata => findPreferredReadReplica(partition, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTM1MzEx", "url": "https://github.com/apache/kafka/pull/8484#pullrequestreview-393935311", "createdAt": "2020-04-15T16:23:18Z", "commit": {"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1510, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}