{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzg0MzUy", "number": 8620, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyMjowOFrOD5nakQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1MTo0OFrOD-uo4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQxMjAxOnYy", "diffSide": "RIGHT", "path": "checkstyle/checkstyle.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyMjowOFrOGQ_ItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyMjowOFrOGQ_ItA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NDgyMA==", "bodyText": "Why change the setting instead of modifying suppressions.xml to exclude certain classes from this rule?", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420464820", "createdAt": "2020-05-05T23:22:08Z", "author": {"login": "rhauch"}, "path": "checkstyle/checkstyle.xml", "diffHunk": "@@ -132,7 +132,7 @@\n     </module>\n     <module name=\"NPathComplexity\">\n       <!-- default is 200 -->\n-      <property name=\"max\" value=\"500\"/>\n+      <property name=\"max\" value=\"550\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQxNzI1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNDoyNFrOGQ_Lrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNDoyNFrOGQ_Lrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NTU4Mg==", "bodyText": "I don't think we should expose Jetty here. Yes, we're following the Jetty grammar and format for these, but let's not unnecessarily expose the internals.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String RESPONSE_HTTP_HEADERS_DOC = \"Set values for Jetty HTTP response headers\";\n          \n          \n            \n                public static final String RESPONSE_HTTP_HEADERS_DOC = \"Rules for REST API HTTP response headers\";", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420465582", "createdAt": "2020-05-05T23:24:24Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -244,6 +244,14 @@\n             + \"user requests to reset the set of active topics per connector.\";\n     protected static final boolean TOPIC_TRACKING_ALLOW_RESET_DEFAULT = true;\n \n+    /**\n+     * @link \"https://www.eclipse.org/jetty/documentation/current/header-filter.html\"\n+     * @link \"https://www.eclipse.org/jetty/javadoc/9.4.28.v20200408/org/eclipse/jetty/servlets/HeaderFilter.html\"\n+     **/\n+    public static final String RESPONSE_HTTP_HEADERS_CONFIG = \"response.http.headers.config\";\n+    public static final String RESPONSE_HTTP_HEADERS_DOC = \"Set values for Jetty HTTP response headers\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyMDM2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNTo0NlrOGQ_NiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNTo0NlrOGQ_NiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjA1Nw==", "bodyText": "Why not implement these as a ConfigDef.Validator implementation, similar to the existing AdminListenersValidator below?", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420466057", "createdAt": "2020-05-05T23:25:46Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +410,52 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    public static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyMzk3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/RestServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNzozNlrOGQ_Pqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNzozNlrOGQ_Pqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjYwMg==", "bodyText": "Is this line really necessary? Isn't the response.http.headers.config property already logged at INFO level when the worker starts up, via the WorkerConfig (or rather DistributedConfig or StandaloneConfig) constructor?", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420466602", "createdAt": "2020-05-05T23:27:36Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/RestServer.java", "diffHunk": "@@ -461,4 +469,18 @@ public static String urlJoin(String base, String path) {\n             return base + path;\n     }\n \n+    /**\n+     * Register header filter to ServletContextHandler.\n+     * @param context The serverlet context handler\n+     */\n+    protected void configureHttpResponsHeaderFilter(ServletContextHandler context) {\n+        String headerConfig = config.getString(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG);\n+        log.debug(\"headerConfig : \" + headerConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyNTkzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/RestServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyODozNFrOGQ_Q5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyODozNFrOGQ_Q5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjkxOA==", "bodyText": "Is there a reason we don't want to validate these properties up front when all of the other configuration validation is being performed, via ConfigDef.Validator on response.http.headers.config? If we do that, we don't need this line.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420466918", "createdAt": "2020-05-05T23:28:34Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/RestServer.java", "diffHunk": "@@ -461,4 +469,18 @@ public static String urlJoin(String base, String path) {\n             return base + path;\n     }\n \n+    /**\n+     * Register header filter to ServletContextHandler.\n+     * @param context The serverlet context handler\n+     */\n+    protected void configureHttpResponsHeaderFilter(ServletContextHandler context) {\n+        String headerConfig = config.getString(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG);\n+        log.debug(\"headerConfig : \" + headerConfig);\n+        String[] configs = StringUtil.csvSplit(headerConfig);\n+        Arrays.stream(configs)\n+                .forEach(WorkerConfig::validateHttpResponseHeaderConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQzMjc4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMTozNVrOGQ_Uzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMTozNVrOGQ_Uzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzkxOQ==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {\n          \n          \n            \n                public void testDefaultCustomizedHttpResponseHeaders() throws IOException  {", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420467919", "createdAt": "2020-05-05T23:31:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQzMzMxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMTo0N1rOGQ_VEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMTo0N1rOGQ_VEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2Nzk4Nw==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n          \n          \n            \n                public void testValidCustomizedHttpResponseHeaders() throws IOException  {", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420467987", "createdAt": "2020-05-05T23:31:47Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQzMzk1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMjowNlrOGQ_Vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMjowNlrOGQ_Vcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODA4Mg==", "bodyText": "The advantage of using ConfigDef.validator on the response.http.headers.config config key is that this constructor call would throw an exception if any invalid value is used, and much sooner, too.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420468082", "createdAt": "2020-05-05T23:32:06Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"add X-XSS-Protection\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        server.stop();\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigAction() {\n+        String headerConfig = \"badaction X-XSS-Protection: 1; mode=block\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        server.stop();\n+    }\n+\n+    public void checkCustomizedHttpResponseHeaders(String headerConfig, Map<String, String> expectedHeaders)\n+            throws IOException  {\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQzNjcyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMzoxM1rOGQ_XLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozMzoxM1rOGQ_XLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODUyNg==", "bodyText": "Should we have tests for the DistributedConfig class? Again, much of the logic should be the same, but the tests would each be simpler if using a ConfigDef.Validator.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420468526", "createdAt": "2020-05-05T23:33:13Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"add X-XSS-Protection\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQzOTAyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNDoxN1rOGQ_YfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNDoxN1rOGQ_YfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2ODg2MQ==", "bodyText": "If using ConfigDef.Validator, all of these lines would go away, and we actually don't need mocks of any kind.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420468861", "createdAt": "2020-05-05T23:34:17Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"add X-XSS-Protection\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        server.stop();\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigAction() {\n+        String headerConfig = \"badaction X-XSS-Protection: 1; mode=block\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new StandaloneConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        server.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQ0MTE2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNToyMFrOGQ_ZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNToyMFrOGQ_ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2OTE4OA==", "bodyText": "Might be nice to have quite a few of these tests that verify various values are invalid and valid, to act as regression tests.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420469188", "createdAt": "2020-05-05T23:35:20Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +393,106 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void TestValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void TestDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"add X-XSS-Protection\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b69910f6f015255f26d09b743d7ad410759a15"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTgxNDU4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozMDoyOFrOGRV5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozMDoyOFrOGRV5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzNzY0OQ==", "bodyText": "How about using strValue.split(','), and avoiding the need to import org.eclipse.jetty.util.StringUtil?\nOkay, I see now that cvsSplit handles quotes. How about a comment:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String[] configs = StringUtil.csvSplit(strValue);\n          \n          \n            \n                        String[] configs = StringUtil.csvSplit(strValue); // handles and removes surrounding quotes", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420837649", "createdAt": "2020-05-06T14:30:28Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTg0ODA0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozNzozMVrOGRWOaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozNzozMVrOGRWOaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0MzExMw==", "bodyText": "Should probably add this as the first bit in this method:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String strValue = (String) value;\n          \n          \n            \n                        if (strValue.isEmpty()) {\n          \n          \n            \n                            return;\n          \n          \n            \n                        }\n          \n          \n            \n                        String strValue = (String) value;\n          \n          \n            \n                        if (value == null || strValue.trim().isEmpty()) {\n          \n          \n            \n                            return;\n          \n          \n            \n                        }", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420843113", "createdAt": "2020-05-06T14:37:31Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTg2MzgyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0MDo0M1rOGRWYJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0MDo0M1rOGRWYJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NTYwNQ==", "bodyText": "There's no benefit to having the validateHttpResponseHeaderConfig(...) method static, so how about making it non-static? And you can use a method reference to make it a tiny bit more readable:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    private static void validateHttpResponseHeaderConfig(String config) {\n          \n          \n            \n                        Arrays.stream(configs).forEach(this::validateHttpResponseHeaderConfig);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    private void validateHttpResponseHeaderConfig(String config) {\n          \n      \n    \n    \n  \n\nOr, if you want to make it easier to test, then move to WorkerConfig class and make package-level static:\n            Arrays.stream(configs).forEach(WorkerConfig::validateHttpResponseHeaderConfig);\n\nI actually think this is the best way to go, because then you can easily add lots of test methods that thoroughly test each of these methods for both positive and negative cases.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420845605", "createdAt": "2020-05-06T14:40:43Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTg3MTU2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0MjoyMlrOGRWdDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0MjoyMlrOGRWdDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0Njg2Mw==", "bodyText": "Nits:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n          \n          \n            \n                                        + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n          \n          \n            \n                                throw new ConfigException(String.format(\"Invalid format of header config '%s'. \"\n          \n          \n            \n                                        + \"Expected: '[action] [header name]:[header value]'\", config));", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420846863", "createdAt": "2020-05-06T14:42:22Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDAxOTY3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxMjoyMlrOGRX68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxMjoyMlrOGRX68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3MDg5OA==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n          \n          \n            \n                                                + \"Expected: \\\"[header name]:[header value]\\\"\", header));\n          \n          \n            \n                                        String.format(\"Invalid format of header name and header value pair '%s'. \"\n          \n          \n            \n                                                + \"Expected: '[header name]:[header value]'\", header));", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420870898", "createdAt": "2020-05-06T15:12:22Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n+                }\n+\n+                // validate action\n+                String method = configTokens[0].trim();\n+                validateHeaderConfigAction(method);\n+\n+                // validate header name and header value pair\n+                String header = configTokens[1];\n+                String[] headerTokens = header.trim().split(\":\");\n+                if (headerTokens.length != 2) {\n+                    throw new ConfigException(\n+                            String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n+                                    + \"Expected: \\\"[header name]:[header value]\\\"\", header));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDAyNDk1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxMzoyNlrOGRX-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxMzoyNlrOGRX-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3MTc4Mg==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new ConfigException(String.format(\"Invalid header name \\\"%s\\\". \"\n          \n          \n            \n                                        + \"The \\\"[header name]\\\" cannot contain whitespace\", headerName));\n          \n          \n            \n                                throw new ConfigException(String.format(\"Invalid header name '%s'. \"\n          \n          \n            \n                                        + \"The '[header name]' cannot contain whitespace\", headerName));", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420871782", "createdAt": "2020-05-06T15:13:26Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n+                }\n+\n+                // validate action\n+                String method = configTokens[0].trim();\n+                validateHeaderConfigAction(method);\n+\n+                // validate header name and header value pair\n+                String header = configTokens[1];\n+                String[] headerTokens = header.trim().split(\":\");\n+                if (headerTokens.length != 2) {\n+                    throw new ConfigException(\n+                            String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n+                                    + \"Expected: \\\"[header name]:[header value]\\\"\", header));\n+                }\n+\n+                // validate header name\n+                String headerName = headerTokens[0].trim();\n+                if (headerName.isEmpty() || headerName.contains(\" \")) {\n+                    throw new ConfigException(String.format(\"Invalid header name \\\"%s\\\". \"\n+                            + \"The \\\"[header name]\\\" cannot contain whitespace\", headerName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDAzMjMzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNDo1NlrOGRYDFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNDo1NlrOGRYDFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3Mjk4Mw==", "bodyText": "Shouldn't this look for other whitespace characters, per the exception message? Something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (headerName.isEmpty() || headerName.contains(\" \")) {\n          \n          \n            \n                            if (headerName.isEmpty() || headerName.matches(\"\\\\s\")) {", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420872983", "createdAt": "2020-05-06T15:14:56Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n+                }\n+\n+                // validate action\n+                String method = configTokens[0].trim();\n+                validateHeaderConfigAction(method);\n+\n+                // validate header name and header value pair\n+                String header = configTokens[1];\n+                String[] headerTokens = header.trim().split(\":\");\n+                if (headerTokens.length != 2) {\n+                    throw new ConfigException(\n+                            String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n+                                    + \"Expected: \\\"[header name]:[header value]\\\"\", header));\n+                }\n+\n+                // validate header name\n+                String headerName = headerTokens[0].trim();\n+                if (headerName.isEmpty() || headerName.contains(\" \")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDAzNDU0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNToyM1rOGRYEfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNToyM1rOGRYEfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3MzM0MA==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new ConfigException(String.format(\"Invalid header config \\\"%s\\\".\", config), e);\n          \n          \n            \n                            throw new ConfigException(String.format(\"Invalid header config '%s'\", config), e);", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420873340", "createdAt": "2020-05-06T15:15:23Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n+                }\n+\n+                // validate action\n+                String method = configTokens[0].trim();\n+                validateHeaderConfigAction(method);\n+\n+                // validate header name and header value pair\n+                String header = configTokens[1];\n+                String[] headerTokens = header.trim().split(\":\");\n+                if (headerTokens.length != 2) {\n+                    throw new ConfigException(\n+                            String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n+                                    + \"Expected: \\\"[header name]:[header value]\\\"\", header));\n+                }\n+\n+                // validate header name\n+                String headerName = headerTokens[0].trim();\n+                if (headerName.isEmpty() || headerName.contains(\" \")) {\n+                    throw new ConfigException(String.format(\"Invalid header name \\\"%s\\\". \"\n+                            + \"The \\\"[header name]\\\" cannot contain whitespace\", headerName));\n+                }\n+            } catch (ArrayIndexOutOfBoundsException e) {\n+                throw new ConfigException(String.format(\"Invalid header config \\\"%s\\\".\", config), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDA0NTk1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNzo0OFrOGRYLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToxNzo0OFrOGRYLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3NTE1Mw==", "bodyText": "This class should have a toString() method that describes what's required, so some string like:\n\nComma-separated header rules, where each header rule is of the form '[action] [header name]:[header value]' and optionally surrounded by double quotes if any part of a header rule contains a comma", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420875153", "createdAt": "2020-05-06T15:17:48Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDA3NDgyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToyNDoyMVrOGRYedg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToyNDoyMVrOGRYedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3OTk5MA==", "bodyText": "How about defining a static immutable list as a constant:\n    private static final Collection<String> HEADER_ACTIONS = Collections.unmodifiableList(\n            Arrays.asList(\"set\", \"add\", \"setDate\", \"addDate\")\n    );\n\nso that these lines can become:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!Arrays.asList(\"set\", \"add\", \"setDate\", \"addDate\")\n          \n          \n            \n                                .stream()\n          \n          \n            \n                                .anyMatch(action::equalsIgnoreCase)) {\n          \n          \n            \n                            throw new ConfigException(String.format(\"Invalid header config action: \\\"%s\\\". \"\n          \n          \n            \n                                    + \"The action need be one of [\\\"set\\\", \\\"add\\\", \\\"setDate\\\", \\\"addDate\\\"]\", action));\n          \n          \n            \n                        if (!HEADER_ACTIONS.stream().anyMatch(action::equalsIgnoreCase)) {\n          \n          \n            \n                            throw new ConfigException(String.format(\"Invalid header config action: '%s'. \"\n          \n          \n            \n                                    + \"Expected one of %s\", action, HEADER_ACTIONS));\n          \n      \n    \n    \n  \n\nThis eliminates the duplication of the literal values (which is prone to future errors) and makes the code more readable.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420879990", "createdAt": "2020-05-06T15:24:21Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -427,4 +435,62 @@ public void ensureValid(String name, Object value) {\n         }\n     }\n \n+    private static class ResponseHttpHeadersValidator implements ConfigDef.Validator {\n+        @Override\n+        public void ensureValid(String name, Object value) {\n+            String strValue = (String) value;\n+            if (strValue.isEmpty()) {\n+                return;\n+            }\n+\n+            String[] configs = StringUtil.csvSplit(strValue);\n+            Arrays.stream(configs).forEach(config -> validateHttpResponseHeaderConfig(config));\n+        }\n+\n+        private static void validateHttpResponseHeaderConfig(String config) {\n+            try {\n+                // validate format\n+                String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+                if (configTokens.length != 2) {\n+                    throw new ConfigException(String.format(\"Invalid format of header config \\\"%s\\\". \"\n+                            + \"Expected: \\\"[ation] [header name]:[header value]\\\"\", config));\n+                }\n+\n+                // validate action\n+                String method = configTokens[0].trim();\n+                validateHeaderConfigAction(method);\n+\n+                // validate header name and header value pair\n+                String header = configTokens[1];\n+                String[] headerTokens = header.trim().split(\":\");\n+                if (headerTokens.length != 2) {\n+                    throw new ConfigException(\n+                            String.format(\"Invalid format of header name and header value pair \\\"%s\\\". \"\n+                                    + \"Expected: \\\"[header name]:[header value]\\\"\", header));\n+                }\n+\n+                // validate header name\n+                String headerName = headerTokens[0].trim();\n+                if (headerName.isEmpty() || headerName.contains(\" \")) {\n+                    throw new ConfigException(String.format(\"Invalid header name \\\"%s\\\". \"\n+                            + \"The \\\"[header name]\\\" cannot contain whitespace\", headerName));\n+                }\n+            } catch (ArrayIndexOutOfBoundsException e) {\n+                throw new ConfigException(String.format(\"Invalid header config \\\"%s\\\".\", config), e);\n+            }\n+        }\n+\n+        private static void validateHeaderConfigAction(String action) {\n+            /**\n+             * The following actions are defined following link.\n+             * {@link https://www.eclipse.org/jetty/documentation/current/header-filter.html}\n+             **/\n+            if (!Arrays.asList(\"set\", \"add\", \"setDate\", \"addDate\")\n+                    .stream()\n+                    .anyMatch(action::equalsIgnoreCase)) {\n+                throw new ConfigException(String.format(\"Invalid header config action: \\\"%s\\\". \"\n+                        + \"The action need be one of [\\\"set\\\", \\\"add\\\", \\\"setDate\\\", \\\"addDate\\\"]\", action));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDIzNTc0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo1OTo0NVrOGRaGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNjo1OFrOGSOXgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwNjUxMQ==", "bodyText": "These are great and very useful, but they still don't thoroughly test the validateHttpResponseHeaderConfig and validateHeaderConfigAction methods. If you make these methods static, package-protected in the WorkerConfig class (rather than in a nested class), then you can easily add more tests to WorkerConfigTest that thoroughly verify all of the logic in those methods.\nFor example, something like the following in WorkerConfigTest:\n    protected static final List<String> VALID_UNQUOTED_HEADER_CONFIGS = Arrays.asList(\n            // TODO: Add a lot more valid header configs\n            \"\\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\",\n            \"add X-XSS-Protection: 1; mode=block\",\n            \"add Strict-Transport-Security: max-age=31536000; includeSubDomains\",\n            \"AdD   Strict-Transport-Security:    max-age=31536000;  includeSubDomains\",\n            \"AdD \\t Strict-Transport-Security : \\n   max-age=31536000;  includeSubDomains\",\n            \"add X-Content-Type-Options: nosniff\"\n    );\n\n    protected static final List<String> VALID_QUOTE_REQUIRED_HEADER_CONFIGS = Arrays.asList(\n            // TODO: Add a lot more valid header configs\n            \"add Cache-Control: no-cache, no-store, must-revalidate\"\n    );\n\n    protected static final List<String> INVALID_UNQUOTED_HEADER_CONFIGS = Arrays.asList(\n            // TODO: Add a lot more valid header configs\n            \"WRONG Cache-Control: no-cache\",\n            \"add Cache-Control no-cache\",\n            \"WRONG Cache-Control: no-cache, no-store, must-revalidate\",\n    );\n\n    protected static final String WHITESPACE = \" \\t \\n  \";\n\n    @Test\n    public void testSingleValidHeaderConfigs() {\n        for (String config : VALID_UNQUOTED_HEADER_CONFIGS) {\n            assertValidHeaderConfig(config);\n        }\n        for (String config : VALID_QUOTE_REQUIRED_HEADER_CONFIGS) {\n            assertValidHeaderConfig(\"\\\"\" + config + \"\\\"\");\n        }\n    }\n\n    @Test\n    public void testSingleValidHeaderConfigsWithWhitespace() {\n        for (String config : VALID_UNQUOTED_HEADER_CONFIGS) {\n            assertValidHeaderConfig(WHITESPACE + config + WHITESPACE);\n        }\n        for (String config : VALID_QUOTE_REQUIRED_HEADER_CONFIGS) {\n            assertValidHeaderConfig(WHITESPACE + \"\\\"\" + WHITESPACE + config + WHITESPACE + \"\\\"\" + WHITESPACE);\n        }\n    }\n\n    @Test\n    public void testMultipleValidHeaderConfigsWithoutWhitespace() {\n        assertValidHeaderConfig(String.join(\", \", VALID_UNQUOTED_HEADER_CONFIGS));\n        assertValidHeaderConfig(String.join(\" , \", VALID_UNQUOTED_HEADER_CONFIGS));\n    }\n\n    @Test\n    public void testHeaderConfigsThatRequireQuotes() {\n        for (String config : VALID_QUOTE_REQUIRED_HEADER_CONFIGS) {\n            assertInvalidHeaderConfig(config);\n        }\n    }\n\n    @Test\n    public void testInvalidHeaderConfigs() {\n        for (String config : INVALID_UNQUOTED_HEADER_CONFIGS) {\n            assertInvalidHeaderConfig(config);\n        }\n    }\n\n    @Test\n    public void testOneInvalidAndMultipleValidHeaderConfigs() {\n        assertInvalidHeaderConfig(String.join(\", \", VALID_UNQUOTED_HEADER_CONFIGS)\n                                  + \", \" + INVALID_UNQUOTED_HEADER_CONFIGS.get(0));\n        assertInvalidHeaderConfig(INVALID_UNQUOTED_HEADER_CONFIGS.get(0) + \", \"\n                                  + String.join(\", \", VALID_UNQUOTED_HEADER_CONFIGS));\n    }\n\n    protected void assertValidHeaderConfig(String config) {\n        WorkerConfig.validateHttpResponseHeaderConfig(config);\n        // any valid config should be valid per HeaderFilter\n        configureHeaderFilter(config);\n    }\n\n    protected void assertInvalidHeaderConfig(String config) {\n        assertThrows(ConfigException.class, () -> WorkerConfig.validateHttpResponseHeaderConfig(config));\n        // any invalid config should be also be invalid per HeaderFilter\n        assertThrows(ConfigException.class, () -> configureHeaderFilter(config));\n    }\n\n    protected void configureHeaderFilter(String headerConfig) {\n        FilterHolder headerFilterHolder = new FilterHolder(HeaderFilter.class);\n        headerFilterHolder.setInitParameter(\"headerConfig\", headerConfig);\n        try {\n            try {\n                headerFilterHolder.doStart();\n                headerFilterHolder.initialize();\n            } finally {\n                headerFilterHolder.doStop();\n            }\n        } catch (Exception e) {\n          // wrap in ConfigException to keep the test simple\n          throw new ConfigException(\"HeaderFilter failure\", e);\n        }\n    }", "url": "https://github.com/apache/kafka/pull/8620#discussion_r420906511", "createdAt": "2020-05-06T15:59:45Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +395,98 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void testValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void testDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"set add X-XSS-Protection: 1\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedAction() {\n+        String headerConfig = \"X-Frame-Options: DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderName() {\n+        String headerConfig = \"add :DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderValue() {\n+        String headerConfig = \"add X-Frame-Options\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigAction() {\n+        String headerConfig = \"badaction X-XSS-Protection: 1; mode=block\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    public void checkCustomizedHttpResponseHeaders(String headerConfig, Map<String, String> expectedHeaders)\n+            throws IOException  {\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        HttpRequest request = new HttpGet(\"/connectors\");\n+        CloseableHttpClient httpClient = HttpClients.createMinimal();\n+        HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n+        CloseableHttpResponse response = httpClient.execute(httpHost, request);\n+        Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n+        if (!headerConfig.isEmpty()) {\n+            expectedHeaders.forEach((k, v) ->\n+                    Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n+        } else {\n+            Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n+        }\n+        response.close();\n+        server.stop();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NzIxOA==", "bodyText": "It is good idea  to assert each checking using assertValidHeaderConfig and assertInvalidHeaderConfig. I think latest version will cover validation of header config. Please let me know. For all valid header config cases, testValidCustomizedHttpResponseHeaders should cover both config validation at config phase and validation on FilterHolder layer.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421147218", "createdAt": "2020-05-06T23:19:02Z", "author": {"login": "jeffhuang26"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +395,98 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void testValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void testDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"set add X-XSS-Protection: 1\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedAction() {\n+        String headerConfig = \"X-Frame-Options: DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderName() {\n+        String headerConfig = \"add :DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderValue() {\n+        String headerConfig = \"add X-Frame-Options\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigAction() {\n+        String headerConfig = \"badaction X-XSS-Protection: 1; mode=block\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    public void checkCustomizedHttpResponseHeaders(String headerConfig, Map<String, String> expectedHeaders)\n+            throws IOException  {\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        HttpRequest request = new HttpGet(\"/connectors\");\n+        CloseableHttpClient httpClient = HttpClients.createMinimal();\n+        HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n+        CloseableHttpResponse response = httpClient.execute(httpHost, request);\n+        Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n+        if (!headerConfig.isEmpty()) {\n+            expectedHeaders.forEach((k, v) ->\n+                    Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n+        } else {\n+            Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n+        }\n+        response.close();\n+        server.stop();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwNjUxMQ=="}, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2Mjk0Nw==", "bodyText": "Looks good. I like the additional checking that you're doing here.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421762947", "createdAt": "2020-05-07T20:06:58Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +395,98 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void testValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void testDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigFormat() {\n+        String headerConfig = \"set add X-XSS-Protection: 1\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedAction() {\n+        String headerConfig = \"X-Frame-Options: DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderName() {\n+        String headerConfig = \"add :DENY\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testMissedHeaderValue() {\n+        String headerConfig = \"add X-Frame-Options\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    @Test(expected = ConfigException.class)\n+    public void testInvalidHeaderConfigAction() {\n+        String headerConfig = \"badaction X-XSS-Protection: 1; mode=block\";\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+    }\n+\n+    public void checkCustomizedHttpResponseHeaders(String headerConfig, Map<String, String> expectedHeaders)\n+            throws IOException  {\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        HttpRequest request = new HttpGet(\"/connectors\");\n+        CloseableHttpClient httpClient = HttpClients.createMinimal();\n+        HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n+        CloseableHttpResponse response = httpClient.execute(httpHost, request);\n+        Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n+        if (!headerConfig.isEmpty()) {\n+            expectedHeaders.forEach((k, v) ->\n+                    Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n+        } else {\n+            Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n+        }\n+        response.close();\n+        server.stop();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwNjUxMQ=="}, "originalCommit": {"oid": "98c1cf0eb18a8481291b913f324489bd99904e7f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYyNzU1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1OToxNFrOGSOHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1OToxNFrOGSOHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1ODg3Nw==", "bodyText": "I think this method should be on ResponseHttpHeadersValidator, not the WorkerConfig.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421758877", "createdAt": "2020-05-07T19:59:14Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYyOTQxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1OTo0M1rOGSOIyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNTo0ODozNVrOGS8CuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTE3OQ==", "bodyText": "This could be package-level protected, right? The only place it should be called is in ResponseHttpHeadersValidator and in tests.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void validateHttpResponseHeaderConfig(String config) {\n          \n          \n            \n                // Visible for testing\n          \n          \n            \n                static void validateHttpResponseHeaderConfig(String config) {", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421759179", "createdAt": "2020-05-07T19:59:43Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }\n+\n+    public static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTU5NA==", "bodyText": "Cannot pass compile after changed to either default package level or protected due to RestServerTest call it and they are on different package.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421955594", "createdAt": "2020-05-08T06:01:05Z", "author": {"login": "jeffhuang26"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }\n+\n+    public static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTE3OQ=="}, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NTMzMA==", "bodyText": "Then how about making these package-level protected (as I mentioned) and moving the tests of these methods to WorkerConfigTest instead?", "url": "https://github.com/apache/kafka/pull/8620#discussion_r422385330", "createdAt": "2020-05-08T21:31:17Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }\n+\n+    public static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTE3OQ=="}, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUxMTI4OQ==", "bodyText": "Actually should move these header config verification tests to WorkerConfigTest.", "url": "https://github.com/apache/kafka/pull/8620#discussion_r422511289", "createdAt": "2020-05-09T15:48:35Z", "author": {"login": "jeffhuang26"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }\n+\n+    public static void validateHttpResponseHeaderConfig(String config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTE3OQ=="}, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYzNDQwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMToxNFrOGSOL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMToxNFrOGSOL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTk4OA==", "bodyText": "What about adding valid configs for set, addDate and setDate, too?", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421759988", "createdAt": "2020-05-07T20:01:14Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -54,17 +55,40 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.List;\n \n import static org.apache.kafka.connect.runtime.WorkerConfig.ADMIN_LISTENERS_CONFIG;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertThrows;\n \n @RunWith(PowerMockRunner.class)\n @PowerMockIgnore({\"javax.net.ssl.*\", \"javax.security.*\", \"javax.crypto.*\"})\n public class RestServerTest {\n+    protected static final String WHITESPACE = \" \\t \\n \\r \";\n+    protected static final List<String> VALID_HEADER_CONFIGS = Arrays.asList(\n+            \"add \\t Cache-Control: no-cache, no-store, must-revalidate\",\n+            \"add \\r X-XSS-Protection: 1; mode=block\",\n+            \"\\n add Strict-Transport-Security: max-age=31536000; includeSubDomains\",\n+            \"AdD   Strict-Transport-Security:  \\r  max-age=31536000;  includeSubDomains\",\n+            \"AdD \\t Strict-Transport-Security : \\n   max-age=31536000;  includeSubDomains\",\n+            \"add X-Content-Type-Options: \\r nosniff\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTY1MDkwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNjoyNVrOGSOWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNjoyNVrOGSOWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MjY2NA==", "bodyText": "How about putting the server.stop() and server = null in a finally block? Also, CloseableHttpResponse is AutoCloseable, so we could actually use a try-with-resources here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    server = new RestServer(workerConfig);\n          \n          \n            \n                    server.initializeServer();\n          \n          \n            \n                    server.initializeResources(herder);\n          \n          \n            \n                    HttpRequest request = new HttpGet(\"/connectors\");\n          \n          \n            \n                    CloseableHttpClient httpClient = HttpClients.createMinimal();\n          \n          \n            \n                    HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n          \n          \n            \n                    CloseableHttpResponse response = httpClient.execute(httpHost, request);\n          \n          \n            \n                    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n          \n          \n            \n                    if (!headerConfig.isEmpty()) {\n          \n          \n            \n                        expectedHeaders.forEach((k, v) ->\n          \n          \n            \n                                Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n          \n          \n            \n                    } else {\n          \n          \n            \n                        Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n          \n          \n            \n                    }\n          \n          \n            \n                    response.close();\n          \n          \n            \n                    server.stop();\n          \n          \n            \n                    server = new RestServer(workerConfig);\n          \n          \n            \n                    try {\n          \n          \n            \n                      server.initializeServer();\n          \n          \n            \n                      server.initializeResources(herder);\n          \n          \n            \n                      HttpRequest request = new HttpGet(\"/connectors\");\n          \n          \n            \n                      try (CloseableHttpClient httpClient = HttpClients.createMinimal()) {\n          \n          \n            \n                        HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n          \n          \n            \n                        try (CloseableHttpResponse response = httpClient.execute(httpHost, request)) {\n          \n          \n            \n                          Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n          \n          \n            \n                          if (!headerConfig.isEmpty()) {\n          \n          \n            \n                              expectedHeaders.forEach((k, v) ->\n          \n          \n            \n                                      Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n          \n          \n            \n                          } else {\n          \n          \n            \n                              Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n          \n          \n            \n                          }\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n                    } finally {\n          \n          \n            \n                      server.stop();\n          \n          \n            \n                      server = null;\n          \n          \n            \n                    }", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421762664", "createdAt": "2020-05-07T20:06:25Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/RestServerTest.java", "diffHunk": "@@ -392,6 +418,80 @@ public void testDisableAdminEndpoint() throws IOException {\n         Assert.assertEquals(404, response.getStatusLine().getStatusCode());\n     }\n \n+    @Test\n+    public void testValidCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig =\n+                \"add X-XSS-Protection: 1; mode=block, \\\"add Cache-Control: no-cache, no-store, must-revalidate\\\"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        expectedHeaders.put(\"X-XSS-Protection\", \"1; mode=block\");\n+        expectedHeaders.put(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void testDefaultCustomizedHttpResponseHeaders() throws IOException  {\n+        String headerConfig = \"\";\n+        Map<String, String> expectedHeaders = new HashMap<>();\n+        checkCustomizedHttpResponseHeaders(headerConfig, expectedHeaders);\n+    }\n+\n+    @Test\n+    public void testInvalidHeaderConfigs() {\n+        for (String config : INVALID_HEADER_CONFIGS) {\n+            assertInvalidHeaderConfig(config);\n+        }\n+    }\n+\n+    @Test\n+    public void testValidHeaderConfigs() {\n+        for (String config : VALID_HEADER_CONFIGS) {\n+            assertValidHeaderConfig(config);\n+        }\n+    }\n+\n+    public void checkCustomizedHttpResponseHeaders(String headerConfig, Map<String, String> expectedHeaders)\n+            throws IOException  {\n+        Map<String, String> workerProps = baseWorkerProps();\n+        workerProps.put(\"offset.storage.file.filename\", \"/tmp\");\n+        workerProps.put(WorkerConfig.RESPONSE_HTTP_HEADERS_CONFIG, headerConfig);\n+        WorkerConfig workerConfig = new DistributedConfig(workerProps);\n+\n+        EasyMock.expect(herder.kafkaClusterId()).andReturn(KAFKA_CLUSTER_ID);\n+        EasyMock.expect(herder.plugins()).andStubReturn(plugins);\n+        EasyMock.expect(plugins.newPlugins(Collections.emptyList(),\n+                workerConfig,\n+                ConnectRestExtension.class)).andStubReturn(Collections.emptyList());\n+\n+        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(\"a\", \"b\"));\n+\n+        PowerMock.replayAll();\n+\n+        server = new RestServer(workerConfig);\n+        server.initializeServer();\n+        server.initializeResources(herder);\n+        HttpRequest request = new HttpGet(\"/connectors\");\n+        CloseableHttpClient httpClient = HttpClients.createMinimal();\n+        HttpHost httpHost = new HttpHost(server.advertisedUrl().getHost(), server.advertisedUrl().getPort());\n+        CloseableHttpResponse response = httpClient.execute(httpHost, request);\n+        Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n+        if (!headerConfig.isEmpty()) {\n+            expectedHeaders.forEach((k, v) ->\n+                    Assert.assertEquals(response.getFirstHeader(k).getValue(), v));\n+        } else {\n+            Assert.assertNull(response.getFirstHeader(\"X-Frame-Options\"));\n+        }\n+        response.close();\n+        server.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTY1NTQxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNzo1MlrOGSOZUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowNzo1MlrOGSOZUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2MzQwOA==", "bodyText": "This should be package-level protected:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void validateHeaderConfigAction(String action) {\n          \n          \n            \n                // Visible for testing\n          \n          \n            \n                static void validateHeaderConfigAction(String action) {", "url": "https://github.com/apache/kafka/pull/8620#discussion_r421763408", "createdAt": "2020-05-07T20:07:52Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java", "diffHunk": "@@ -400,6 +412,53 @@ public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n         logInternalConverterDeprecationWarnings(props);\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"Comma-separated header rules, where each header rule is of the form \"\n+                + \"'[action] [header name]:[header value]' and optionally surrounded by double quotes \"\n+                + \"if any part of a header rule contains a comma\";\n+    }\n+\n+    public static void validateHttpResponseHeaderConfig(String config) {\n+        try {\n+            // validate format\n+            String[] configTokens = config.trim().split(\"\\\\s+\", 2);\n+            if (configTokens.length != 2) {\n+                throw new ConfigException(String.format(\"Invalid format of header config '%s\\'. \"\n+                        + \"Expected: '[ation] [header name]:[header value]'\", config));\n+            }\n+\n+            // validate action\n+            String method = configTokens[0].trim();\n+            validateHeaderConfigAction(method);\n+\n+            // validate header name and header value pair\n+            String header = configTokens[1];\n+            String[] headerTokens = header.trim().split(\":\");\n+            if (headerTokens.length != 2) {\n+                throw new ConfigException(\n+                        String.format(\"Invalid format of header name and header value pair '%s'. \"\n+                                + \"Expected: '[header name]:[header value]'\", header));\n+            }\n+\n+            // validate header name\n+            String headerName = headerTokens[0].trim();\n+            if (headerName.isEmpty() || headerName.matches(\".*\\\\s+.*\")) {\n+                throw new ConfigException(String.format(\"Invalid header name '%s'. \"\n+                        + \"The '[header name]' cannot contain whitespace\", headerName));\n+            }\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            throw new ConfigException(String.format(\"Invalid header config '%s'.\", config), e);\n+        }\n+    }\n+\n+    public static void validateHeaderConfigAction(String action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc2c4e141e60097886119cc97561a8e4d2188b5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTAyNDMyOnYy", "diffSide": "RIGHT", "path": "checkstyle/import-control.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1MTo0OFrOGZAmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTo1MTo0OFrOGZAmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NzUxNQ==", "bodyText": "FYI: this new dependency has no transitive dependencies", "url": "https://github.com/apache/kafka/pull/8620#discussion_r428877515", "createdAt": "2020-05-21T19:51:48Z", "author": {"login": "rhauch"}, "path": "checkstyle/import-control.xml", "diffHunk": "@@ -362,6 +362,7 @@\n       <allow pkg=\"org.reflections\"/>\n       <allow pkg=\"org.reflections.util\"/>\n       <allow pkg=\"javax.crypto\"/>\n+      <allow pkg=\"org.eclipse.jetty.util\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f061423f4b5e2118563eb820fb8e88abb1490efe"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2888, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}