{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTA3MzUw", "number": 9648, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMToxN1rOE8dhaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozOTo0OVrOE8kzjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODMzNzA3OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMToxN1rOH4lyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyMToxN1rOH4lyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMTQ5OQ==", "bodyText": "Since the root cause of this bug was basically just confusion over what exactly this set contains, a renaming feels in order", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529101499", "createdAt": "2020-11-24T01:21:17Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java", "diffHunk": "@@ -154,9 +154,9 @@ final void transitionTo(final Task.State newState) {\n     }\n \n     @Override\n-    public void update(final Set<TopicPartition> topicPartitions, final Map<String, List<String>> nodeToSourceTopics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODM1MTE2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyNDowNlrOH4l8iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyNDowNlrOH4l8iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwNDAxMQ==", "bodyText": "In addition to removing the fault check, I slightly refactored this loop so that we only loop over the source nodes in this particular subtopology. Previously we would have added entries for all source nodes across the entire topology to our sourceNodesByTopic map", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529104011", "createdAt": "2020-11-24T01:24:06Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -149,24 +149,30 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n-    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n-        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n-            log.error(\"Set of source nodes do not match: \\n\" +\n-                \"sourceNodesByName = {}\\n\" +\n-                \"sourceTopicsByName = {}\",\n-                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n-            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n-        }\n+    public void updateSourceTopics(final Map<String, List<String>> allSourceTopicsByNodeName) {\n         sourceNodesByTopic.clear();\n-        for (final Map.Entry<String, List<String>> sourceEntry : sourceTopicsByName.entrySet()) {\n-            final String nodeName = sourceEntry.getKey();\n-            for (final String topic : sourceEntry.getValue()) {\n+        for (final Map.Entry<String, SourceNode<?, ?, ?, ?>> sourceNodeEntry : sourceNodesByName.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODM4MTQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyOToyOFrOH4mRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMToyOToyOFrOH4mRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwOTM1NQ==", "bodyText": "We didn't catch the bug in this test for two reasons: it has only one subtopology, and it didn't wait for Streams to get to RUNNING before it created the new topic. So we weren't even covering the \"update source topics\" code path since all topics existed by the first assignment", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529109355", "createdAt": "2020-11-24T01:29:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODM4NDU2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMDo0OFrOH4mTKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMDo0OFrOH4mTKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwOTgwMw==", "bodyText": "Technically it's sufficient to just add the second KStream above for a multi-subtopology application, but I felt the test coverage could only stand to benefit with (slightly) more complicated examples", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529109803", "createdAt": "2020-11-24T01:30:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTQ0MDk2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODoxNzowMlrOH4wsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxNTo0MVrOH5YRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MDA3Mg==", "bodyText": "Could you also add a unit test that verifies that the issue is gone?", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529280072", "createdAt": "2020-11-24T08:17:02Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -149,24 +149,30 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n-    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n-        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n-            log.error(\"Set of source nodes do not match: \\n\" +\n-                \"sourceNodesByName = {}\\n\" +\n-                \"sourceTopicsByName = {}\",\n-                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n-            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n-        }\n+    public void updateSourceTopics(final Map<String, List<String>> allSourceTopicsByNodeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODE0MA==", "bodyText": "I modified the existing test rather than add a new one, and verified that the modified test does fail without the changes. Since the original test wasn't actually testing anything prior to the modifications I thought it made sense to fix the test rather than add a new one and retain a useless test in addition", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529798140", "createdAt": "2020-11-24T18:40:29Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -149,24 +149,30 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n-    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n-        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n-            log.error(\"Set of source nodes do not match: \\n\" +\n-                \"sourceNodesByName = {}\\n\" +\n-                \"sourceTopicsByName = {}\",\n-                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n-            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n-        }\n+    public void updateSourceTopics(final Map<String, List<String>> allSourceTopicsByNodeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MDA3Mg=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NjU0Mw==", "bodyText": "The scope of an integration test and of a unit test are quite different. The integration test specifically tests the pattern subscription whereas the unit test just tests the update of the source topics. Probably at the moment the update of the source topics is only called when pattern subscription is used, but that assumption seems rather brittle to me because   it may change in future. I think that neither of the tests is useless. If one were useless, I would keep the unit test for test execution performance reasons.", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529846543", "createdAt": "2020-11-24T20:06:06Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -149,24 +149,30 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n-    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n-        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n-            log.error(\"Set of source nodes do not match: \\n\" +\n-                \"sourceNodesByName = {}\\n\" +\n-                \"sourceTopicsByName = {}\",\n-                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n-            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n-        }\n+    public void updateSourceTopics(final Map<String, List<String>> allSourceTopicsByNodeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MDA3Mg=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyODU2Ng==", "bodyText": "Added a unit test", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529928566", "createdAt": "2020-11-24T22:15:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -149,24 +149,30 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n-    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n-        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n-            log.error(\"Set of source nodes do not match: \\n\" +\n-                \"sourceNodesByName = {}\\n\" +\n-                \"sourceTopicsByName = {}\",\n-                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n-            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n-        }\n+    public void updateSourceTopics(final Map<String, List<String>> allSourceTopicsByNodeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MDA3Mg=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUyMTY2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozNzo0M1rOH4xeqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MDozN1rOH5QUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5Mjk2OA==", "bodyText": "I would add the following assert here to ensure we have more than one sub-topology:\n            final Topology topology = builder.build();\n            assertThat(topology.describe().subtopologies().size(), greaterThan(1));\n            streams = new KafkaStreams(topology, streamsConfiguration);\n\nJust to make it clear that we want to test with multiple sub-topologies.", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529292968", "createdAt": "2020-11-24T08:37:43Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+\n             streams = new KafkaStreams(builder.build(), streamsConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODIxNg==", "bodyText": "Ack good call", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529798216", "createdAt": "2020-11-24T18:40:37Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+\n             streams = new KafkaStreams(builder.build(), streamsConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5Mjk2OA=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTUzMDM3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODozOTo0OVrOH4xkAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxOToyOFrOH5YgoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDMzNw==", "bodyText": "I would even add otherStream like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n          \n          \n            \n                            .toStream()\n          \n          \n            \n                            .merge(otherStream)\n          \n          \n            \n                            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529294337", "createdAt": "2020-11-24T08:39:49Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NjQ3NA==", "bodyText": "But if we merge then won't that merge the subtopologies as well? (We would still have two subtopologies due to the upstream key-changing operation/repartition, but I wanted the test to cover different \"kinds\" of subtopologies like this)", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529796474", "createdAt": "2020-11-24T18:37:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDMzNw=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MDA3OA==", "bodyText": "You would have a source node in one sub-topology an a source node in the other sub-topology. I thought that was the pattern in the bug report, but I now realized that the bug report uses a pattern similar to the one you specified. Wouldn't it make sense to test both?", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529840078", "createdAt": "2020-11-24T19:54:10Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDMzNw=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMjQ0OQ==", "bodyText": "There are two ways to have more than one source node: either reading from a different input topic/pattern, or via a repartition. I agree that we should test both of these cases, but I'd prefer to do so in a single integration test rather than in two separate integration tests, to avoid making the test suite even longer", "url": "https://github.com/apache/kafka/pull/9648#discussion_r529932449", "createdAt": "2020-11-24T22:19:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java", "diffHunk": "@@ -198,9 +200,16 @@ public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n \n             final StreamsBuilder builder = new StreamsBuilder();\n             final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"TEST-TOPIC-\\\\d\"));\n-            pattern1Stream.to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n+            final KStream<String, String> otherStream = builder.stream(Pattern.compile(\"not-a-match\"));\n+\n+            pattern1Stream\n+                .selectKey((k, v) -> k)\n+                .groupByKey()\n+                .aggregate(() -> \"\", (k, v, a) -> v)\n+                .toStream().to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI5NDMzNw=="}, "originalCommit": {"oid": "dfdf63573ba083b6d186a2bd4bb7c2d39a4b6156"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3616, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}