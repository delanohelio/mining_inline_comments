{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDUyMDEy", "number": 8679, "title": "KAFKA-10003: Mark KStream.through() as deprecated", "bodyText": "part of KIP-221", "createdAt": "2020-05-17T02:49:10Z", "url": "https://github.com/apache/kafka/pull/8679", "merged": true, "mergeCommit": {"oid": "27824baa210b9744074ac1fcdabbf1c8ff1b42ca"}, "closed": true, "closedAt": "2020-05-22T15:41:29Z", "author": {"login": "mjsax"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciCGzggH2gAyNDE5MDUyMDEyOjI5ZWRhMTRiNzY5ODdjMzI0MTFjZWMyYWFhZWQ5Y2ExZjM0YjVlOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjk1k4AH2gAyNDE5MDUyMDEyOmRmY2I2YTNkY2U5ZWEwMDZjNDNkZGMxZDUwMmVjY2IwN2Y4NzljMTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/29eda14b76987c32411cec2aaaed9ca1f34b5e97", "committedDate": "2020-05-17T02:46:45Z", "message": "KAFKA-10003: Mark KStream.through() as deprecated\n - part of KIP-221"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMDE1", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123015", "createdAt": "2020-05-17T02:55:13Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1NToxNFrOGWd3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1NToxNFrOGWd3xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTI3MA==", "bodyText": "The diff is weird because the part above repeats below. The actual deletes starts here.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211270", "createdAt": "2020-05-17T02:55:14Z", "author": {"login": "mjsax"}, "path": "docs/streams/developer-guide/dsl-api.html", "diffHunk": "@@ -3679,58 +3670,6 @@ <h5><a class=\"toc-backref\" href=\"#id34\">KTable-KTable Foreign-Key\n <span class=\"c1\">// Write the stream to the output topic, using explicit key and value serdes,</span>\n <span class=\"c1\">// (thus overriding the defaults in the config properties).</span>\n <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"na\">to</span><span class=\"o\">(</span><span class=\"s\">&quot;my-stream-output-topic&quot;</span><span class=\"o\">,</span> <span class=\"n\">Produced</span><span class=\"o\">.</span><span class=\"na\">with</span><span class=\"o\">(</span><span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">String</span><span class=\"o\">(),</span> <span class=\"n\">Serdes</span><span class=\"o\">.</span><span class=\"na\">Long</span><span class=\"o\">());</span>\n-</pre></div>\n-                        </div>\n-                        <p><strong>Causes data re-partitioning if any of the following conditions is true:</strong></p>\n-                        <ol class=\"last arabic simple\">\n-                            <li>If the output topic has a different number of partitions than the stream/table.</li>\n-                            <li>If the <code class=\"docutils literal\"><span class=\"pre\">KStream</span></code> was marked for re-partitioning.</li>\n-                            <li>If you provide a custom <code class=\"docutils literal\"><span class=\"pre\">StreamPartitioner</span></code> to explicitly control how to distribute the output records\n-                                across the partitions of the output topic.</li>\n-                            <li>If the key of an output record is <code class=\"docutils literal\"><span class=\"pre\">null</span></code>.</li>\n-                        </ol>\n-                    </td>\n-                </tr>\n-                <tr class=\"row-odd\"><td><p class=\"first\"><strong>Through</strong></p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMDky", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123092", "createdAt": "2020-05-17T02:57:38Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1NzozOFrOGWd4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1NzozOFrOGWd4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQwOA==", "bodyText": "Not sure if this update is necessary. This method is deprecated itself.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211408", "createdAt": "2020-05-17T02:57:38Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1082,7 +1081,7 @@ public void cleanUp() {\n      * This will use the default Kafka Streams partitioner to locate the partition.\n      * If a {@link StreamPartitioner custom partitioner} has been\n      * {@link ProducerConfig#PARTITIONER_CLASS_CONFIG configured} via {@link StreamsConfig} or\n-     * {@link KStream#through(String, Produced)}, or if the original {@link KTable}'s input\n+     * {@link KStream#repartition(Repartitioned)}, or if the original {@link KTable}'s input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMTAx", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123101", "createdAt": "2020-05-17T02:58:07Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1ODowOFrOGWd4YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1ODowOFrOGWd4YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQyNQ==", "bodyText": "Not 100% sure if we should remove this now, or when we remove through()?", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211425", "createdAt": "2020-05-17T02:58:08Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -846,16 +847,13 @@\n      * from the auto-generated topic using default serializers, deserializers, and producer's {@link DefaultPartitioner}.\n      * The number of partitions is determined based on the upstream topics partition numbers.\n      * <p>\n-     * This operation is similar to {@link #through(String)}, however, Kafka Streams manages the used topic automatically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMTMw", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123130", "createdAt": "2020-05-17T02:59:05Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1OTowNVrOGWd4gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjo1OTowNVrOGWd4gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQ1Nw==", "bodyText": "Just simplifying this one.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211457", "createdAt": "2020-05-17T02:59:05Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -925,9 +920,8 @@ void to(final TopicNameExtractor<K, V> topicExtractor,\n      * Convert this stream to a {@link KTable}.\n      * <p>\n      * If a key changing operator was used before this operation (e.g., {@link #selectKey(KeyValueMapper)},\n-     * {@link #map(KeyValueMapper)}, {@link #flatMap(KeyValueMapper)}, or\n-     * {@link #transform(TransformerSupplier, String...)}), and no data redistribution happened afterwards (e.g., via\n-     * {@link #through(String)}) an internal repartitioning topic will be created in Kafka.\n+     * {@link #map(KeyValueMapper)}, {@link #flatMap(KeyValueMapper)} or\n+     * {@link #transform(TransformerSupplier, String...)}) an internal repartitioning topic will be created in Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMTYy", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123162", "createdAt": "2020-05-17T03:00:16Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMDoxN1rOGWd4xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMDoxN1rOGWd4xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTUyNg==", "bodyText": "Must be public to be visible in Scala", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211526", "createdAt": "2020-05-17T03:00:17Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/RepartitionedInternal.java", "diffHunk": "@@ -21,33 +21,33 @@\n import org.apache.kafka.streams.processor.StreamPartitioner;\n import org.apache.kafka.streams.processor.internals.InternalTopicProperties;\n \n-class RepartitionedInternal<K, V> extends Repartitioned<K, V> {\n+public class RepartitionedInternal<K, V> extends Repartitioned<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMTgx", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123181", "createdAt": "2020-05-17T03:00:43Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMDo0NFrOGWd44w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMDo0NFrOGWd44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTU1NQ==", "bodyText": "Replicated the test for through() for repartition().", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211555", "createdAt": "2020-05-17T03:00:44Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -285,7 +286,28 @@ public void shouldProcessViaThroughTopic() {\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n     }\n-    \n+\n+    @Test\n+    public void shouldProcessViaRepartitionTopic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjEz", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123213", "createdAt": "2020-05-17T03:02:21Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMjoyMVrOGWd5KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMjoyMVrOGWd5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA==", "bodyText": "We still need to test this, because topics using this pattern are still consider intermediate topics and the --intermediat-topic flag in StreamsResetter is still useful and not changed.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211624", "createdAt": "2020-05-17T03:02:21Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -484,8 +493,14 @@ private Topology setupTopologyWithIntermediateUserTopic(final String outputTopic\n             .toStream()\n             .to(OUTPUT_TOPIC, Produced.with(Serdes.Long(), Serdes.Long()));\n \n-        input.through(INTERMEDIATE_USER_TOPIC)\n-            .groupByKey()\n+        final KStream<Long, String> stream;\n+        if (useRepartitioned) {\n+            stream = input.repartition();\n+        } else {\n+            input.to(INTERMEDIATE_USER_TOPIC);\n+            stream = builder.stream(INTERMEDIATE_USER_TOPIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjUz", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123253", "createdAt": "2020-05-17T03:03:47Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMzo0N1rOGWd5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowMzo0N1rOGWd5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY4NQ==", "bodyText": "Using to() and steam() is \"simpler\" as we cleanup topics in-between (and thus avoid internal topics).\nWe could of course also use repartition().", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211685", "createdAt": "2020-05-17T03:03:47Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -213,7 +213,8 @@ private void runSimpleCopyTest(final int numberOfRestarts,\n         final KStream<Long, Long> input = builder.stream(inputTopic);\n         KStream<Long, Long> output = input;\n         if (throughTopic != null) {\n-            output = input.through(throughTopic);\n+            input.to(throughTopic);\n+            output = builder.stream(throughTopic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjU4", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123258", "createdAt": "2020-05-17T03:04:04Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDowNFrOGWd5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDowNFrOGWd5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY4OA==", "bodyText": "side cleanup", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211688", "createdAt": "2020-05-17T03:04:04Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationWithSslTest.java", "diffHunk": "@@ -42,7 +42,7 @@\n \n     private static final String TEST_ID = \"reset-with-ssl-integration-test\";\n \n-    private static Map<String, Object> sslConfig;\n+    private static final Map<String, Object> SSL_CONFIG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjY0", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123264", "createdAt": "2020-05-17T03:04:16Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDoxN1rOGWd5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDoxN1rOGWd5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY5NA==", "bodyText": "replicating test", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211694", "createdAt": "2020-05-17T03:04:17Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -588,6 +592,14 @@ public void shouldNotAllowNullTopicOnTo() {\n         assertThat(exception.getMessage(), equalTo(\"topic can't be null\"));\n     }\n \n+    @Test\n+    public void shouldNotAllowNullRepartitionedOnRepartition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjgy", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123282", "createdAt": "2020-05-17T03:04:48Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDo0OVrOGWd5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNDo0OVrOGWd5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTcxOQ==", "bodyText": "replicating test cases", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211719", "createdAt": "2020-05-17T03:04:49Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1393,6 +1409,11 @@ public void shouldPreserveSerdesForOperators() {\n         assertEquals(((AbstractStream) stream1.through(\"topic-3\", Produced.with(mySerde, mySerde))).keySerde(), mySerde);\n         assertEquals(((AbstractStream) stream1.through(\"topic-3\", Produced.with(mySerde, mySerde))).valueSerde(), mySerde);\n \n+        assertEquals(((AbstractStream) stream1.repartition()).keySerde(), consumedInternal.keySerde());\n+        assertEquals(((AbstractStream) stream1.repartition()).valueSerde(), consumedInternal.valueSerde());\n+        assertEquals(((AbstractStream) stream1.repartition(Repartitioned.with(mySerde, mySerde))).keySerde(), mySerde);\n+        assertEquals(((AbstractStream) stream1.repartition(Repartitioned.with(mySerde, mySerde))).valueSerde(), mySerde);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjkw", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123290", "createdAt": "2020-05-17T03:05:00Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTowMFrOGWd5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTowMFrOGWd5mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTczNw==", "bodyText": "replicating test", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211737", "createdAt": "2020-05-17T03:05:00Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1452,6 +1474,24 @@ public void shouldUseRecordMetadataTimestampExtractorWithThrough() {\n         assertNull(processorTopology.source(\"topic-1\").getTimestampExtractor());\n     }\n \n+    @Test\n+    public void shouldUseRecordMetadataTimestampExtractorWithRepartition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMjk2", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123296", "createdAt": "2020-05-17T03:05:08Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTowOFrOGWd5sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTowOFrOGWd5sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTc2MQ==", "bodyText": "replicating test", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211761", "createdAt": "2020-05-17T03:05:08Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1467,6 +1507,21 @@ public void shouldSendDataThroughTopicUsingProduced() {\n         assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n     }\n \n+    @Test\n+    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzMzE1", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123315", "createdAt": "2020-05-17T03:05:44Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTo0NFrOGWd5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowNTo0NFrOGWd5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTc4Nw==", "bodyText": "As above. Avoid internal topics.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211787", "createdAt": "2020-05-17T03:05:44Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/EosTestClient.java", "diffHunk": "@@ -132,7 +132,8 @@ private KafkaStreams createKafkaStreams(final Properties props) {\n             .to(\"sum\", Produced.with(stringSerde, longSerde));\n \n         if (withRepartitioning) {\n-            final KStream<String, Integer> repartitionedData = data.through(\"repartition\");\n+            data.to(\"repartition\");\n+            final KStream<String, Integer> repartitionedData = builder.stream(\"repartition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzNDU5", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123459", "createdAt": "2020-05-17T03:08:50Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowODo1MFrOGWd6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzowODo1MFrOGWd6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTk4NA==", "bodyText": "There is no KTable#through() method.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211984", "createdAt": "2020-05-17T03:08:50Z", "author": {"login": "mjsax"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala", "diffHunk": "@@ -218,7 +218,7 @@ class KStream[K, V](val inner: KStreamJ[K, V]) {\n    * import Serdes._\n    *\n    * //..\n-   * val clicksPerRegion: KTable[String, Long] = //..\n+   * val clicksPerRegion: KStream[String, Long] = //..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTIzNTE5", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413123519", "createdAt": "2020-05-17T03:10:17Z", "commit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzoxMDoxN1rOGWd64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzoxMDoxN1rOGWd64g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMjA2Ng==", "bodyText": "Side cleanup (was originally copied from ConsumedTest but not updated correctly)", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426212066", "createdAt": "2020-05-17T03:10:17Z", "author": {"login": "mjsax"}, "path": "streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/ProducedTest.scala", "diffHunk": "@@ -37,15 +37,15 @@ class ProducedTest extends FlatSpec with Matchers {\n     internalProduced.valueSerde.getClass shouldBe Serdes.Long.getClass\n   }\n \n-  \"Create a Produced with timestampExtractor and resetPolicy\" should \"create a Consumed with Serdes, timestampExtractor and resetPolicy\" in {\n+  \"Create a Produced with streamPartitioner\" should \"create a Produced with Serdes and streamPartitioner\" in {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ea08b5d04f2a11e2e48ed29c4e08f71320714da", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/5ea08b5d04f2a11e2e48ed29c4e08f71320714da", "committedDate": "2020-05-17T03:44:03Z", "message": "Missed some stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a5e26cd861c2f238ae4d2277c5471be0f886fdf", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/7a5e26cd861c2f238ae4d2277c5471be0f886fdf", "committedDate": "2020-05-17T03:51:02Z", "message": "Fix imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTI0ODkx", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413124891", "createdAt": "2020-05-17T03:53:12Z", "commit": {"oid": "5ea08b5d04f2a11e2e48ed29c4e08f71320714da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1MzoxMlrOGWeDVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMzo1MzoxMlrOGWeDVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDIyOA==", "bodyText": "I just named all method with in alignment to the other Scala helper classes.\nAlso noticed, that all helper classed only have static methods... Is not by design? Seems we are missing something here? If there is more than one optional parameter, it seems we should have non-static method to allow method chaining? (Could be fixed in a follow up PR)", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426214228", "createdAt": "2020-05-17T03:53:12Z", "author": {"login": "mjsax"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/Repartitioned.scala", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.kstream\n+\n+import org.apache.kafka.common.serialization.Serde\n+import org.apache.kafka.streams.kstream.{Repartitioned => RepartitionedJ}\n+import org.apache.kafka.streams.processor.StreamPartitioner\n+\n+object Repartitioned {\n+\n+  /**\n+   * Create a Repartitioned instance with provided keySerde and valueSerde.\n+   *\n+   * @tparam K         key type\n+   * @tparam V         value type\n+   * @param keySerde    Serde to use for serializing the key\n+   * @param valueSerde  Serde to use for serializing the value\n+   * @return A new [[Repartitioned]] instance configured with keySerde and valueSerde\n+   * @see KStream#repartition(Repartitioned)\n+   */\n+  def `with`[K, V](implicit keySerde: Serde[K], valueSerde: Serde[V]): RepartitionedJ[K, V] =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea08b5d04f2a11e2e48ed29c4e08f71320714da"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/7f0399526ca6cc65a87a168f6ba96eb5faad905e", "committedDate": "2020-05-18T19:38:20Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjMyMTQy", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-413232142", "createdAt": "2020-05-18T02:03:02Z", "commit": {"oid": "7a5e26cd861c2f238ae4d2277c5471be0f886fdf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjowMzowMlrOGWljjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjoxNzozMFrOGWlsjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzE2Nw==", "bodyText": "It's a little nice for future reference when we also say when it became deprecated, such as \"since 2.6\".", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426337167", "createdAt": "2020-05-18T02:03:02Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -815,9 +815,10 @@\n      *\n      * @param topic the topic name\n      * @return a {@code KStream} that contains the exact same (and potentially repartitioned) records as this {@code KStream}\n-     * @see #repartition()\n-     * @see #repartition(Repartitioned)\n+     * @deprecated used {@link #repartition()} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a5e26cd861c2f238ae4d2277c5471be0f886fdf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzM3Ng==", "bodyText": "I'd agree with removing it. I guess if you want to preserve it in some fashion, you could add the opposite statement to the through() documentation.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426337376", "createdAt": "2020-05-18T02:04:20Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -846,16 +847,13 @@\n      * from the auto-generated topic using default serializers, deserializers, and producer's {@link DefaultPartitioner}.\n      * The number of partitions is determined based on the upstream topics partition numbers.\n      * <p>\n-     * This operation is similar to {@link #through(String)}, however, Kafka Streams manages the used topic automatically.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQyNQ=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzOTQ2OA==", "bodyText": "We'd have to change from object to class or case class (which would have been my preference to begin with), since objects can only have static members.\nProbably, this ship has sailed for now, and we should just keep doing what the other similar classes are doing. Since we've found so much wackiness in the Scala API since it was introduced, it might be a good idea to consider revamping the whole thing from scratch some day.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426339468", "createdAt": "2020-05-18T02:17:30Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/Repartitioned.scala", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.kstream\n+\n+import org.apache.kafka.common.serialization.Serde\n+import org.apache.kafka.streams.kstream.{Repartitioned => RepartitionedJ}\n+import org.apache.kafka.streams.processor.StreamPartitioner\n+\n+object Repartitioned {\n+\n+  /**\n+   * Create a Repartitioned instance with provided keySerde and valueSerde.\n+   *\n+   * @tparam K         key type\n+   * @tparam V         value type\n+   * @param keySerde    Serde to use for serializing the key\n+   * @param valueSerde  Serde to use for serializing the value\n+   * @return A new [[Repartitioned]] instance configured with keySerde and valueSerde\n+   * @see KStream#repartition(Repartitioned)\n+   */\n+  def `with`[K, V](implicit keySerde: Serde[K], valueSerde: Serde[V]): RepartitionedJ[K, V] =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDIyOA=="}, "originalCommit": {"oid": "5ea08b5d04f2a11e2e48ed29c4e08f71320714da"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzQ1NDA2", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-414745406", "createdAt": "2020-05-19T19:10:26Z", "commit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxMDoyNlrOGXuzaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozNDo0MFrOGXvoiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNzI1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        It is recommended to repartitiont to topic with fewers partitions to match the larger partition number of avoid bottlenecks.\n          \n          \n            \n                                        It is recommended to repartition the topic with fewer partitions to match the larger partition number of avoid bottlenecks.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427537256", "createdAt": "2020-05-19T19:10:26Z", "author": {"login": "vvcephei"}, "path": "docs/streams/developer-guide/dsl-api.html", "diffHunk": "@@ -1763,32 +1763,23 @@ <h4><a id=\"streams_concepts_globalktable\" href=\"#streams_concepts_globalktable\">\n                                 streams/tables of a join &#8211; it is up to the user to ensure that this is the case.</p>\n                         </div>\n                         <p><strong>Ensuring data co-partitioning:</strong> If the inputs of a join are not co-partitioned yet, you must ensure this manually.\n-                            You may follow a procedure such as outlined below.</p>\n+                            You may follow a procedure such as outlined below.\n+                            It is recommended to repartitiont to topic with fewers partitions to match the larger partition number of avoid bottlenecks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzODQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    If you need to write into and read back from a topic you mange by your own, you can fall back to use <code>KStream.to()</code> in combination with <code>StreamsBuilder#stream()</code>.\n          \n          \n            \n                    If you need to write into and read back from a topic that you mange, you can fall back to use <code>KStream.to()</code> in combination with <code>StreamsBuilder#stream()</code>.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427538489", "createdAt": "2020-05-19T19:12:26Z", "author": {"login": "vvcephei"}, "path": "docs/streams/upgrade-guide.html", "diffHunk": "@@ -95,9 +95,11 @@ <h3><a id=\"streams_api_changes_260\" href=\"#streams_api_changes_260\">Streams API\n         Note that you need brokers with version 2.5 or newer to use this feature.\n     </p>\n     <p>\n-        As of 2.6.0 Kafka Streams offers a new <code>KStream.repartition()</code> operator (as per <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint\">KIP-221</a>).\n+        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()<code> if favor of the new <code>KStream.repartition()</code> operator\n+        (as per <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint\">KIP-221</a>).\n         <code>KStream.repartition()</code> is similar to <code>KStream.through()</code>, however Kafka Streams will manage the topic for you.\n-        Refer to the <a href=\"/{{version}}/documentation/streams/developer-guide/dsl-api.html\">developer guide</a> for more details.\n+        If you need to write into and read back from a topic you mange by your own, you can fall back to use <code>KStream.to()</code> in combination with <code>StreamsBuilder#stream()</code>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzODYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    We refer to the <a href=\"/{{version}}/documentation/streams/developer-guide/dsl-api.html\">developer guide</a> for more details about <code>KStream.repartition()</code>.\n          \n          \n            \n                    Please refer to the <a href=\"/{{version}}/documentation/streams/developer-guide/dsl-api.html\">developer guide</a> for more details about <code>KStream.repartition()</code>.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427538632", "createdAt": "2020-05-19T19:12:41Z", "author": {"login": "vvcephei"}, "path": "docs/streams/upgrade-guide.html", "diffHunk": "@@ -95,9 +95,11 @@ <h3><a id=\"streams_api_changes_260\" href=\"#streams_api_changes_260\">Streams API\n         Note that you need brokers with version 2.5 or newer to use this feature.\n     </p>\n     <p>\n-        As of 2.6.0 Kafka Streams offers a new <code>KStream.repartition()</code> operator (as per <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint\">KIP-221</a>).\n+        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()<code> if favor of the new <code>KStream.repartition()</code> operator\n+        (as per <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint\">KIP-221</a>).\n         <code>KStream.repartition()</code> is similar to <code>KStream.through()</code>, however Kafka Streams will manage the topic for you.\n-        Refer to the <a href=\"/{{version}}/documentation/streams/developer-guide/dsl-api.html\">developer guide</a> for more details.\n+        If you need to write into and read back from a topic you mange by your own, you can fall back to use <code>KStream.to()</code> in combination with <code>StreamsBuilder#stream()</code>.\n+        We refer to the <a href=\"/{{version}}/documentation/streams/developer-guide/dsl-api.html\">developer guide</a> for more details about <code>KStream.repartition()</code>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzOTA4MA==", "bodyText": "Might as well make this update, since we may remove the methods at different times.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427539080", "createdAt": "2020-05-19T19:13:34Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1082,7 +1081,7 @@ public void cleanUp() {\n      * This will use the default Kafka Streams partitioner to locate the partition.\n      * If a {@link StreamPartitioner custom partitioner} has been\n      * {@link ProducerConfig#PARTITIONER_CLASS_CONFIG configured} via {@link StreamsConfig} or\n-     * {@link KStream#through(String, Produced)}, or if the original {@link KTable}'s input\n+     * {@link KStream#repartition(Repartitioned)}, or if the original {@link KTable}'s input", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQwOA=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MjM4OA==", "bodyText": "It's worth noting that it only needs to be visible for the scala tests that verify the scala Repartitioned builder results in a correctly configured object. For the public API, we only convert a scala Repartitioned to a java Repartitioned.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427542388", "createdAt": "2020-05-19T19:19:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/RepartitionedInternal.java", "diffHunk": "@@ -21,33 +21,33 @@\n import org.apache.kafka.streams.processor.StreamPartitioner;\n import org.apache.kafka.streams.processor.internals.InternalTopicProperties;\n \n-class RepartitionedInternal<K, V> extends Repartitioned<K, V> {\n+public class RepartitionedInternal<K, V> extends Repartitioned<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTUyNg=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzI1NQ==", "bodyText": "My opinion is that it's generally better not to suppress but instead just deprecate this method as well. It's not really that important for tests, since no one else is going to call the method, so feel free to take or leave the advice.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427543255", "createdAt": "2020-05-19T19:21:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -265,6 +265,7 @@ public void shouldProcessingFromSinkTopic() {\n                  processorSupplier.theCapturedProcessor().processed);\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzQwMw==", "bodyText": "Thanks!", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427543403", "createdAt": "2020-05-19T19:21:15Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -285,7 +286,28 @@ public void shouldProcessViaThroughTopic() {\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n     }\n-    \n+\n+    @Test\n+    public void shouldProcessViaRepartitionTopic() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTU1NQ=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDg3OA==", "bodyText": "I'm wondering if we should continue testing with through, to ensure it continues to work. WDYT?", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427544878", "createdAt": "2020-05-19T19:23:49Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -484,8 +493,14 @@ private Topology setupTopologyWithIntermediateUserTopic(final String outputTopic\n             .toStream()\n             .to(OUTPUT_TOPIC, Produced.with(Serdes.Long(), Serdes.Long()));\n \n-        input.through(INTERMEDIATE_USER_TOPIC)\n-            .groupByKey()\n+        final KStream<Long, String> stream;\n+        if (useRepartitioned) {\n+            stream = input.repartition();\n+        } else {\n+            input.to(INTERMEDIATE_USER_TOPIC);\n+            stream = builder.stream(INTERMEDIATE_USER_TOPIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTI4NQ==", "bodyText": "This would be a case where I would advocate more strongly to deprecate this method, to avoid accidentally \"hiding\" the deprecation from callers.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427549285", "createdAt": "2020-05-19T19:31:42Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java", "diffHunk": "@@ -254,6 +253,7 @@ private Topology getTopologyWithChangingValuesAfterChangingKey(final String opti\n \n     }\n \n+    @SuppressWarnings(\"deprecation\") // specifically testing the deprecated variant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTc4OQ==", "bodyText": "Oops...", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427549789", "createdAt": "2020-05-19T19:32:38Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala", "diffHunk": "@@ -218,7 +218,7 @@ class KStream[K, V](val inner: KStreamJ[K, V]) {\n    * import Serdes._\n    *\n    * //..\n-   * val clicksPerRegion: KTable[String, Long] = //..\n+   * val clicksPerRegion: KStream[String, Long] = //..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTk4NA=="}, "originalCommit": {"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MDg1OQ==", "bodyText": "I think we'd prefer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def repartition()(implicit repartitioned: Repartitioned[K, V]): KStream[K, V] =\n          \n          \n            \n              def repartition(implicit repartitioned: Repartitioned[K, V]): KStream[K, V] =\n          \n      \n    \n    \n  \n\nsimilar to groupByKey, although I'm admittedly not sure if it actually matters.", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427550859", "createdAt": "2020-05-19T19:34:40Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala", "diffHunk": "@@ -232,10 +232,53 @@ class KStream[K, V](val inner: KStreamJ[K, V]) {\n    * @param produced the instance of Produced that gives the serdes and `StreamPartitioner`\n    * @return a [[KStream]] that contains the exact same (and potentially repartitioned) records as this [[KStream]]\n    * @see `org.apache.kafka.streams.kstream.KStream#through`\n+   * @deprecated use `repartition()` instead\n    */\n+  @deprecated\n   def through(topic: String)(implicit produced: Produced[K, V]): KStream[K, V] =\n     new KStream(inner.through(topic, produced))\n \n+  /**\n+   * Materialize this stream to a topic and creates a new [[KStream]] from the topic using the `Repartitioned` instance\n+   * for configuration of the `Serde key serde`, `Serde value serde`, `StreamPartitioner`, number of partitions, and\n+   * topic name part.\n+   * <p>\n+   * The created topic is considered as an internal topic and is meant to be used only by the current Kafka Streams instance.\n+   * Similar to auto-repartitioning, the topic will be created with infinite retention time and data will be automatically purged by Kafka Streams.\n+   * The topic will be named as \"${applicationId}-&lt;name&gt;-repartition\", where \"applicationId\" is user-specified in\n+   * `StreamsConfig` via parameter APPLICATION_ID_CONFIG APPLICATION_ID_CONFIG`,\n+   * \"&lt;name&gt;\" is either provided via `Repartitioned#as(String)` or an internally\n+   * generated name, and \"-repartition\" is a fixed suffix.\n+   * <p>\n+   * The user can either supply the `Repartitioned` instance as an implicit in scope or she can also provide implicit\n+   * key and value serdes that will be converted to a `Repartitioned` instance implicitly.\n+   * <p>\n+   * {{{\n+   * Example:\n+   *\n+   * // brings implicit serdes in scope\n+   * import Serdes._\n+   *\n+   * //..\n+   * val clicksPerRegion: KStream[String, Long] = //..\n+   *\n+   * // Implicit serdes in scope will generate an implicit Produced instance, which\n+   * // will be passed automatically to the call of through below\n+   * clicksPerRegion.repartition\n+   *\n+   * // Similarly you can create an implicit Repartitioned and it will be passed implicitly\n+   * // to the repartition call\n+   * }}}\n+   *\n+   * @param repartitioned the `Repartitioned` instance used to specify `Serdes`, `StreamPartitioner`` which determines\n+   *                      how records are distributed among partitions of the topic,\n+   *                      part of the topic name, and number of partitions for a repartition topic.\n+   * @return a [[KStream]] that contains the exact same repartitioned records as this [[KStream]]\n+   * @see `org.apache.kafka.streams.kstream.KStream#repartition`\n+   */\n+  def repartition()(implicit repartitioned: Repartitioned[K, V]): KStream[K, V] =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542340d4f6c7e969cacb75e3215bfb9d6bef53c2", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/542340d4f6c7e969cacb75e3215bfb9d6bef53c2", "committedDate": "2020-05-19T20:28:35Z", "message": "Update docs/streams/developer-guide/dsl-api.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1786a0ab8f5663182205f47f17e511e7caa7d66c", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/1786a0ab8f5663182205f47f17e511e7caa7d66c", "committedDate": "2020-05-19T20:29:08Z", "message": "Update docs/streams/upgrade-guide.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf29ab80880cb9244fb40353d59581bcc84b652", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/7cf29ab80880cb9244fb40353d59581bcc84b652", "committedDate": "2020-05-19T20:29:24Z", "message": "Update docs/streams/upgrade-guide.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b", "committedDate": "2020-05-19T20:32:07Z", "message": "Update streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODUyNTAx", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-414852501", "createdAt": "2020-05-19T21:56:46Z", "commit": {"oid": "8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1Njo0NlrOGX0FmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1NzoyNVrOGX0Gsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMzgzMg==", "bodyText": "We should provide the arguments to the annotation to explain the deprecation. This gives better IDE integration than the ScalaDoc (which we won't need anymore):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @deprecated\n          \n          \n            \n              @deprecated(\"use `repartition()` instead\", \"2.6.0\")", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427623832", "createdAt": "2020-05-19T21:56:46Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala", "diffHunk": "@@ -232,10 +232,53 @@ class KStream[K, V](val inner: KStreamJ[K, V]) {\n    * @param produced the instance of Produced that gives the serdes and `StreamPartitioner`\n    * @return a [[KStream]] that contains the exact same (and potentially repartitioned) records as this [[KStream]]\n    * @see `org.apache.kafka.streams.kstream.KStream#through`\n+   * @deprecated use `repartition()` instead\n    */\n+  @deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNDExNQ==", "bodyText": "I just noticed that we have no test for this operator (or for through). Should we add one?", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427624115", "createdAt": "2020-05-19T21:57:25Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala", "diffHunk": "@@ -232,10 +232,53 @@ class KStream[K, V](val inner: KStreamJ[K, V]) {\n    * @param produced the instance of Produced that gives the serdes and `StreamPartitioner`\n    * @return a [[KStream]] that contains the exact same (and potentially repartitioned) records as this [[KStream]]\n    * @see `org.apache.kafka.streams.kstream.KStream#through`\n+   * @deprecated use `repartition()` instead\n    */\n+  @deprecated\n   def through(topic: String)(implicit produced: Produced[K, V]): KStream[K, V] =\n     new KStream(inner.through(topic, produced))\n \n+  /**\n+   * Materialize this stream to a topic and creates a new [[KStream]] from the topic using the `Repartitioned` instance\n+   * for configuration of the `Serde key serde`, `Serde value serde`, `StreamPartitioner`, number of partitions, and\n+   * topic name part.\n+   * <p>\n+   * The created topic is considered as an internal topic and is meant to be used only by the current Kafka Streams instance.\n+   * Similar to auto-repartitioning, the topic will be created with infinite retention time and data will be automatically purged by Kafka Streams.\n+   * The topic will be named as \"${applicationId}-&lt;name&gt;-repartition\", where \"applicationId\" is user-specified in\n+   * `StreamsConfig` via parameter APPLICATION_ID_CONFIG APPLICATION_ID_CONFIG`,\n+   * \"&lt;name&gt;\" is either provided via `Repartitioned#as(String)` or an internally\n+   * generated name, and \"-repartition\" is a fixed suffix.\n+   * <p>\n+   * The user can either supply the `Repartitioned` instance as an implicit in scope or she can also provide implicit\n+   * key and value serdes that will be converted to a `Repartitioned` instance implicitly.\n+   * <p>\n+   * {{{\n+   * Example:\n+   *\n+   * // brings implicit serdes in scope\n+   * import Serdes._\n+   *\n+   * //..\n+   * val clicksPerRegion: KStream[String, Long] = //..\n+   *\n+   * // Implicit serdes in scope will generate an implicit Produced instance, which\n+   * // will be passed automatically to the call of through below\n+   * clicksPerRegion.repartition\n+   *\n+   * // Similarly you can create an implicit Repartitioned and it will be passed implicitly\n+   * // to the repartition call\n+   * }}}\n+   *\n+   * @param repartitioned the `Repartitioned` instance used to specify `Serdes`, `StreamPartitioner`` which determines\n+   *                      how records are distributed among partitions of the topic,\n+   *                      part of the topic name, and number of partitions for a repartition topic.\n+   * @return a [[KStream]] that contains the exact same repartitioned records as this [[KStream]]\n+   * @see `org.apache.kafka.streams.kstream.KStream#repartition`\n+   */\n+  def repartition(implicit repartitioned: Repartitioned[K, V]): KStream[K, V] =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5ef0b6da5eff4edcbd42495ad44b0eb69e9a4a", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/5b5ef0b6da5eff4edcbd42495ad44b0eb69e9a4a", "committedDate": "2020-05-20T00:16:52Z", "message": "Update streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bc2784008665032b515cc06ef9d93c61e1fcc8", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/28bc2784008665032b515cc06ef9d93c61e1fcc8", "committedDate": "2020-05-20T00:28:03Z", "message": "Github comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDI5MDIx", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-415029021", "createdAt": "2020-05-20T06:34:12Z", "commit": {"oid": "28bc2784008665032b515cc06ef9d93c61e1fcc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Mzk0Nzk3", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-415394797", "createdAt": "2020-05-20T14:27:46Z", "commit": {"oid": "28bc2784008665032b515cc06ef9d93c61e1fcc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "647b367ced388657f4735313ce1ff0313d429a2e", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/647b367ced388657f4735313ce1ff0313d429a2e", "committedDate": "2020-05-21T00:33:39Z", "message": "Add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTQ2MjE0", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-415946214", "createdAt": "2020-05-21T07:49:38Z", "commit": {"oid": "647b367ced388657f4735313ce1ff0313d429a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo0OTozOFrOGYpi8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo0OTozOFrOGYpi8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5OTY5Ng==", "bodyText": "Could we use {@link #repartition(Repartitioned)} ?", "url": "https://github.com/apache/kafka/pull/8679#discussion_r428499696", "createdAt": "2020-05-21T07:49:38Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -835,9 +836,9 @@\n      * @param topic     the topic name\n      * @param produced  the options to use when producing to the topic\n      * @return a {@code KStream} that contains the exact same (and potentially repartitioned) records as this {@code KStream}\n-     * @see #repartition()\n-     * @see #repartition(Repartitioned)\n+     * @deprecated since 2.6; use #repartition(Repartitioned) instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647b367ced388657f4735313ce1ff0313d429a2e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mjc3MTIz", "url": "https://github.com/apache/kafka/pull/8679#pullrequestreview-416277123", "createdAt": "2020-05-21T15:56:15Z", "commit": {"oid": "647b367ced388657f4735313ce1ff0313d429a2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfcb6a3dce9ea006c43ddc1d502eccb07f879c10", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/dfcb6a3dce9ea006c43ddc1d502eccb07f879c10", "committedDate": "2020-05-21T21:48:32Z", "message": "Github comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1048, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}