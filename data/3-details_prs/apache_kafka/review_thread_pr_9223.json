{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODAwODA1", "number": 9223, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMToxNDowOFrOEeAV6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozMDoxOVrOEkibTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODk4MzQ0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMToxNDowOFrOHJd_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMDoxMDoyNlrOHJhngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY5MDcwMQ==", "bodyText": "Since we parse the header lazily now, what is causing this exception?", "url": "https://github.com/apache/kafka/pull/9223#discussion_r479690701", "createdAt": "2020-08-29T21:14:08Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java", "diffHunk": "@@ -270,7 +270,7 @@ public void testInvalidNumHeadersPartial() throws IOException {\n         DefaultRecord.readPartiallyFrom(inputStream, skipArray, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n     }\n \n-    @Test(expected = StringIndexOutOfBoundsException.class)\n+    @Test(expected = InvalidRecordException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1MDAxOQ==", "bodyText": "The exception is caused by headerKeyBuffer.limit(headerKeySize);. The new limit is larger than capacity", "url": "https://github.com/apache/kafka/pull/9223#discussion_r479750019", "createdAt": "2020-08-30T10:10:26Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java", "diffHunk": "@@ -270,7 +270,7 @@ public void testInvalidNumHeadersPartial() throws IOException {\n         DefaultRecord.readPartiallyFrom(inputStream, skipArray, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n     }\n \n-    @Test(expected = StringIndexOutOfBoundsException.class)\n+    @Test(expected = InvalidRecordException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY5MDcwMQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzc0NzYzOnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDozMTo1OVrOHPKUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjozOTo0MlrOHPQf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTY3MA==", "bodyText": "Why did we change this?", "url": "https://github.com/apache/kafka/pull/9223#discussion_r485659670", "createdAt": "2020-09-09T14:31:59Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -142,15 +169,15 @@ private ByteBuffer createBatch(int batchSize) {\n                     break;\n             }\n \n-            builder.append(0, null, value);\n+            builder.append(0, null, value, headers);\n         }\n         return builder.build().buffer();\n     }\n \n     @Benchmark\n     public void measureValidation(Blackhole bh) throws IOException {\n         MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n-        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+        LogValidator.validateMessagesAndAssignOffsets(records, new TopicPartition(\"a\", 0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NjY3NA==", "bodyText": "Why did we change this?\n\nrun JMH with uncompressed data.\nThe alternative way is that we can add an new benchmark for assignOffsetsNonCompressed. However, the test data of this class includes both uncompressed and compressed so it is weird to input compressed data to test assignOffsetsNonCompressed.", "url": "https://github.com/apache/kafka/pull/9223#discussion_r485666674", "createdAt": "2020-09-09T14:41:00Z", "author": {"login": "chia7712"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -142,15 +169,15 @@ private ByteBuffer createBatch(int batchSize) {\n                     break;\n             }\n \n-            builder.append(0, null, value);\n+            builder.append(0, null, value, headers);\n         }\n         return builder.build().buffer();\n     }\n \n     @Benchmark\n     public void measureValidation(Blackhole bh) throws IOException {\n         MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n-        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+        LogValidator.validateMessagesAndAssignOffsets(records, new TopicPartition(\"a\", 0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTY3MA=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3NTc1OA==", "bodyText": "Right, but the goal of this benchmark was to test the compressed case where there is additional overhead due to compression buffer allocation and so on. As you say, it would be better to have another benchmark for the uncompressed case.", "url": "https://github.com/apache/kafka/pull/9223#discussion_r485675758", "createdAt": "2020-09-09T14:52:25Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -142,15 +169,15 @@ private ByteBuffer createBatch(int batchSize) {\n                     break;\n             }\n \n-            builder.append(0, null, value);\n+            builder.append(0, null, value, headers);\n         }\n         return builder.build().buffer();\n     }\n \n     @Benchmark\n     public void measureValidation(Blackhole bh) throws IOException {\n         MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n-        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+        LogValidator.validateMessagesAndAssignOffsets(records, new TopicPartition(\"a\", 0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTY3MA=="}, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTAwMQ==", "bodyText": "it would be better to have another benchmark for the uncompressed case.\n\nI creates two new classes - CompressedRecordBatchValidationBenchmark and UncompressedRecordBatchValidationBenchmark. They use different compression type and measure different validation function.", "url": "https://github.com/apache/kafka/pull/9223#discussion_r485761001", "createdAt": "2020-09-09T16:39:42Z", "author": {"login": "chia7712"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchIterationBenchmark.java", "diffHunk": "@@ -142,15 +169,15 @@ private ByteBuffer createBatch(int batchSize) {\n                     break;\n             }\n \n-            builder.append(0, null, value);\n+            builder.append(0, null, value, headers);\n         }\n         return builder.build().buffer();\n     }\n \n     @Benchmark\n     public void measureValidation(Blackhole bh) throws IOException {\n         MemoryRecords records = MemoryRecords.readableRecords(singleBatchBuffer.duplicate());\n-        LogValidator.validateMessagesAndAssignOffsetsCompressed(records, new TopicPartition(\"a\", 0),\n+        LogValidator.validateMessagesAndAssignOffsets(records, new TopicPartition(\"a\", 0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTY3MA=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzQ4MjM5OnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchBenchmarkSuite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozMDoxOVrOHTiR6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo1MTowNFrOHUStWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0NjYzNA==", "bodyText": "Maybe this should be BaseRecordBatchBenchmark?", "url": "https://github.com/apache/kafka/pull/9223#discussion_r490246634", "createdAt": "2020-09-17T13:30:19Z", "author": {"login": "ijuma"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchBenchmarkSuite.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.jmh.record;\n+\n+import kafka.server.BrokerTopicStats;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.AbstractRecords;\n+import org.apache.kafka.common.record.BufferSupplier;\n+import org.apache.kafka.common.record.CompressionType;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.record.MemoryRecordsBuilder;\n+import org.apache.kafka.common.record.Record;\n+import org.apache.kafka.common.record.RecordBatch;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.kafka.common.record.RecordBatch.CURRENT_MAGIC_VALUE;\n+\n+@State(Scope.Benchmark)\n+public abstract class RecordBatchBenchmarkSuite {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MDA4OQ==", "bodyText": "done", "url": "https://github.com/apache/kafka/pull/9223#discussion_r491040089", "createdAt": "2020-09-18T15:51:04Z", "author": {"login": "chia7712"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/record/RecordBatchBenchmarkSuite.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.jmh.record;\n+\n+import kafka.server.BrokerTopicStats;\n+import org.apache.kafka.common.header.Header;\n+import org.apache.kafka.common.record.AbstractRecords;\n+import org.apache.kafka.common.record.BufferSupplier;\n+import org.apache.kafka.common.record.CompressionType;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.record.MemoryRecordsBuilder;\n+import org.apache.kafka.common.record.Record;\n+import org.apache.kafka.common.record.RecordBatch;\n+import org.apache.kafka.common.record.TimestampType;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.kafka.common.record.RecordBatch.CURRENT_MAGIC_VALUE;\n+\n+@State(Scope.Benchmark)\n+public abstract class RecordBatchBenchmarkSuite {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI0NjYzNA=="}, "originalCommit": null, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1958, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}