{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjY1NjUw", "number": 9121, "title": "KAFKA-10351: add tests for IOExceptions for GlobalStateManagerImpl/OffsetCheckpoint", "bodyText": "add 2 tests for IOExceptions cases:\n1 for OffsetCheckpoint and 1 for GlobalStateManagerImpl\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-08-04T10:06:41Z", "url": "https://github.com/apache/kafka/pull/9121", "merged": true, "mergeCommit": {"oid": "e1ab1433ad3530fdcde9163f1da14e18b6830f87"}, "closed": true, "closedAt": "2020-09-30T18:26:49Z", "author": {"login": "showuon"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7jra1gH2gAyNDYyNjY1NjUwOjEyYzY5ODdiMWNhODUyOWVhN2MzY2RmZDgxZGViZDg5ZTJhYmVjOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFMfLFAH2gAyNDYyNjY1NjUwOjI1MmNjOTEyNGMzZWM3NmZiNjc4YTVkMDE3NTViZDljNzFlNjQwYWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12c6987b1ca8529ea7c3cdfd81debd89e2abec8e", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/12c6987b1ca8529ea7c3cdfd81debd89e2abec8e", "committedDate": "2020-08-04T10:01:43Z", "message": "KAFKA-10351: add tests for IOExceptions for GlobalStateManagerImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1249c2ff447c79ac4845e84cef28e4a26b230405", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/1249c2ff447c79ac4845e84cef28e4a26b230405", "committedDate": "2020-08-19T03:12:43Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10351"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/8466513f465fca0fcfa3e7e8899ba31cab6bb0a0", "committedDate": "2020-08-19T03:50:32Z", "message": "KAFKA-10351: update test case after merging the latest trunk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzUzNzE4", "url": "https://github.com/apache/kafka/pull/9121#pullrequestreview-472753718", "createdAt": "2020-08-21T19:08:28Z", "commit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowODoyOVrOHE4L7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxMTowN1rOHE4Rpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjkxMA==", "bodyText": "Subjective: Might be \"better\" to do the assertion after the try-block.", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474876910", "createdAt": "2020-08-21T19:08:29Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n+\n+            // checkpoint should fail due to the file is readonly\n+            stateManager.checkpoint();\n+            assertThat(appender.getMessages(), hasItem(containsString(\n+                \"Failed to write offset checkpoint file to \" + checkpointFile.getPath() + \" for global stores\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzEwNQ==", "bodyText": "Nit: no need to line-break", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877105", "createdAt": "2020-08-21T19:08:53Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzM1Mg==", "bodyText": "The test seems to be self-explaining and thus we don't really need this comment", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877352", "createdAt": "2020-08-21T19:09:25Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzQyOA==", "bodyText": "Why do we need to add .tmp ?", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877428", "createdAt": "2020-08-21T19:09:36Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzUyNg==", "bodyText": "as above; comment is not really needed", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877526", "createdAt": "2020-08-21T19:09:51Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -180,6 +183,27 @@ public void shouldReadCheckpointOffsets() throws IOException {\n         assertEquals(expected, offsets);\n     }\n \n+    @Test\n+    public void shouldLogWarningMessageWhenIOExceptionInCheckPoint() throws IOException {\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(t1, 25L);\n+        stateManager.initialize();\n+        stateManager.updateChangelogOffsets(offsets);\n+\n+        final File file = new File(stateDirectory.globalStateDir(), StateManagerUtil.CHECKPOINT_FILE_NAME + \".tmp\");\n+        file.createNewFile();\n+        // set the checkpoint tmp file to read-only to simulate the IOException situation\n+        file.setWritable(false);\n+\n+        try (final LogCaptureAppender appender =\n+                 LogCaptureAppender.createAndRegister(GlobalStateManagerImpl.class)) {\n+\n+            // checkpoint should fail due to the file is readonly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NzY4OQ==", "bodyText": "nit: no need to line break", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474877689", "createdAt": "2020-08-21T19:10:11Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -135,6 +136,20 @@ public void shouldThrowOnInvalidOffsetInWrite() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n+            new TopicPartition(topic, 0), 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3ODM3NA==", "bodyText": "that the pass is \"not existing\" is already clear from File(\"not_existing_dir/not_existing_file\") and thus not necessary", "url": "https://github.com/apache/kafka/pull/9121#discussion_r474878374", "createdAt": "2020-08-21T19:11:07Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -135,6 +136,20 @@ public void shouldThrowOnInvalidOffsetInWrite() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldThrowIOExceptionWhenWritingToNotExistedFile() {\n+        final Map<TopicPartition, Long> offsetsToWrite = Collections.singletonMap(\n+            new TopicPartition(topic, 0), 0L);\n+\n+        // create a file with not existed path, and feed into OffsetCheckpoint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8466513f465fca0fcfa3e7e8899ba31cab6bb0a0"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d3826a87a5b21033e2f81c6a486353e79d8591", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/12d3826a87a5b21033e2f81c6a486353e79d8591", "committedDate": "2020-08-24T07:37:01Z", "message": "KAFKA-10351: address reveiwer's comments to refactor tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "12d3826a87a5b21033e2f81c6a486353e79d8591", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/12d3826a87a5b21033e2f81c6a486353e79d8591", "committedDate": "2020-08-24T07:37:01Z", "message": "KAFKA-10351: address reveiwer's comments to refactor tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1OTA2ODgy", "url": "https://github.com/apache/kafka/pull/9121#pullrequestreview-475906882", "createdAt": "2020-08-26T22:07:30Z", "commit": {"oid": "12d3826a87a5b21033e2f81c6a486353e79d8591"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "252cc9124c3ec76fb678a5d01755bd9c71e640ae", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/252cc9124c3ec76fb678a5d01755bd9c71e640ae", "committedDate": "2020-09-03T08:39:46Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-10351"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1048, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}