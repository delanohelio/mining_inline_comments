{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjY0NDY0", "number": 9383, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDowOFrOErTong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyNjowOVrOEuk6GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ1OTE4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDowOFrOHeAZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowNTozOVrOHeHKWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTc1MQ==", "bodyText": "This could be moved out to the assignorConfiguration class to match the other fields but the code is fairly straightforward so I left it here for now", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501225751", "createdAt": "2020-10-07T18:30:08Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -212,6 +213,7 @@ public void configure(final Map<String, ?> configs) {\n         rebalanceProtocol = assignorConfiguration.rebalanceProtocol();\n         taskAssignorSupplier = assignorConfiguration::taskAssignor;\n         assignmentListener = assignorConfiguration.assignmentListener();\n+        uniqueField = usedSubscriptionMetadataVersion >= 8 ? new byte[1] : new byte[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNTU2OA==", "bodyText": "Sounds good. I think it's also fine to just initialize it to new byte[1] regardless of whether the version is high enough to actually need it or not. It's just a single byte, and simpler is better", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501315568", "createdAt": "2020-10-07T21:17:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -212,6 +213,7 @@ public void configure(final Map<String, ?> configs) {\n         rebalanceProtocol = assignorConfiguration.rebalanceProtocol();\n         taskAssignorSupplier = assignorConfiguration::taskAssignor;\n         assignmentListener = assignorConfiguration.assignmentListener();\n+        uniqueField = usedSubscriptionMetadataVersion >= 8 ? new byte[1] : new byte[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTc1MQ=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNjM5OA==", "bodyText": "Also, now that I think about it, the usedSubscriptionMetadataVersion will only ever be >= 8 at this point. It might be set to something lower at some point later on, but it has to be at least 8 when the assignor is just being created/configured", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501316398", "createdAt": "2020-10-07T21:19:38Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -212,6 +213,7 @@ public void configure(final Map<String, ?> configs) {\n         rebalanceProtocol = assignorConfiguration.rebalanceProtocol();\n         taskAssignorSupplier = assignorConfiguration::taskAssignor;\n         assignmentListener = assignorConfiguration.assignmentListener();\n+        uniqueField = usedSubscriptionMetadataVersion >= 8 ? new byte[1] : new byte[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTc1MQ=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyOTYyMA==", "bodyText": "The autocode generator throws an error if array.length != 0 and the version is < 8. It didn't seem to be a huge problem but there were some tests that used version 1 so initializing to new byte[1] threw errors", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501329620", "createdAt": "2020-10-07T21:49:08Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -212,6 +213,7 @@ public void configure(final Map<String, ?> configs) {\n         rebalanceProtocol = assignorConfiguration.rebalanceProtocol();\n         taskAssignorSupplier = assignorConfiguration::taskAssignor;\n         assignmentListener = assignorConfiguration.assignmentListener();\n+        uniqueField = usedSubscriptionMetadataVersion >= 8 ? new byte[1] : new byte[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTc1MQ=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNjY2Ng==", "bodyText": "That seems like an indication that the subscription is being encoded incorrectly. If the version is below 8, it shouldn't be trying to encode the uniqueField in the first place -- you shouldn't have to mimic that yourself by forcing it to be empty (and even if it is I worry there might be some additional bytes for metadata that would get stored for that field, when that field should not exist at all for versions < 8)", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501336666", "createdAt": "2020-10-07T22:05:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -212,6 +213,7 @@ public void configure(final Map<String, ?> configs) {\n         rebalanceProtocol = assignorConfiguration.rebalanceProtocol();\n         taskAssignorSupplier = assignorConfiguration::taskAssignor;\n         assignmentListener = assignorConfiguration.assignmentListener();\n+        uniqueField = usedSubscriptionMetadataVersion >= 8 ? new byte[1] : new byte[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTc1MQ=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTAxOTQ0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToxNTo0OFrOHeF0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMToyMjozMVrOHeGAvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNDYwOQ==", "bodyText": "Instead of hardcoded 8 all over, let's just define a constant for this similar to the MIN_VERSION_OFFSET_SUM_SUBSCRIPTION  in SubscriptionInfo", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501314609", "createdAt": "2020-10-07T21:15:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -234,15 +236,20 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n         // Adds the following information to subscription\n         // 1. Client UUID (a unique id assigned to an instance of KafkaStreams)\n         // 2. Map from task id to its overall lag\n+        // 3. Unique Field to ensure a rebalance when a thread rejoins by forcing the user data to be different\n \n         handleRebalanceStart(topics);\n+        if (usedSubscriptionMetadataVersion >= 8) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNzgyMw==", "bodyText": "If you want, I think it's also fine to just always flip the byte and not even check against the used subscription version.", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501317823", "createdAt": "2020-10-07T21:22:31Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -234,15 +236,20 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n         // Adds the following information to subscription\n         // 1. Client UUID (a unique id assigned to an instance of KafkaStreams)\n         // 2. Map from task id to its overall lag\n+        // 3. Unique Field to ensure a rebalance when a thread rejoins by forcing the user data to be different\n \n         handleRebalanceStart(topics);\n+        if (usedSubscriptionMetadataVersion >= 8) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNDYwOQ=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA2OTMzOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMjozMVrOHeGSPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1MjowMFrOHgwhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA==", "bodyText": "Can you add a test that verifies that it goes back and forth between the two expected values when you call partitionAssignor.subscriptionUserData multiples times (let's say 3) -- also maybe add a verification that the uniqueField has a length of just 1", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501322300", "createdAt": "2020-10-07T21:32:31Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NjkwNQ==", "bodyText": "goes back and forth between the two expected values\n\nWhat do you mean by expected values? Toggling between the default of 0 and 1 after partitionAssignor.subscriptionUserData is called the first time?", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501956905", "createdAt": "2020-10-08T19:18:26Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1MjczMA==", "bodyText": "Yeah, it should be 0 the first time you call it, then 1 the second time, and then back to 0 again on the third call", "url": "https://github.com/apache/kafka/pull/9383#discussion_r502052730", "createdAt": "2020-10-08T22:43:23Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjY4NA==", "bodyText": "I don't think it would go from 0 to 1 to 0 since the partition assigner always increases, so if you're using the same partition assignor it'll go from 0 to 1 to 2 etc", "url": "https://github.com/apache/kafka/pull/9383#discussion_r502592684", "createdAt": "2020-10-09T18:04:52Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwODc2MA==", "bodyText": "Oh right duh I was thinking it was just a single bit but it's a byte. In that case we should have a test that verifies it goes from 0 to 1 to 2, etc -- might be good to verify the behavior on overflow as well, if you call subscriptionUserData the max_value number of times", "url": "https://github.com/apache/kafka/pull/9383#discussion_r504108760", "createdAt": "2020-10-13T16:47:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMTQ1Nw==", "bodyText": "Oh, saw that you already added the test for 0 --> 1 --> 2 behavior. In that case can you just add two things to that test: verify the behavior on overflow, and verify that the length is always exactly one byte", "url": "https://github.com/apache/kafka/pull/9383#discussion_r504111457", "createdAt": "2020-10-13T16:52:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -483,7 +485,7 @@ public void testEagerSubscription() {\n         Collections.sort(subscription.topics());\n         assertEquals(asList(\"topic1\", \"topic2\"), subscription.topics());\n \n-        final SubscriptionInfo info = getInfo(UUID_1, prevTasks, standbyTasks);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjMwMA=="}, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA3Mjk5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMzo0NFrOHeGUYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozMzo0NFrOHeGUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjg1MA==", "bodyText": "Can you add a test like this for the new version 8?", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501322850", "createdAt": "2020-10-07T21:33:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -286,23 +296,23 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n         final SubscriptionInfo info =\n-            new SubscriptionInfo(usedVersion, latestSupportedVersion, UUID_1, \"localhost:80\", TASK_OFFSET_SUMS);\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, UUID_1, \"localhost:80\", TASK_OFFSET_SUMS, IGNORED_UNIQUE_FIELD);\n         final SubscriptionInfo expectedInfo =\n-            new SubscriptionInfo(usedVersion, latestSupportedVersion, UUID_1, \"localhost:80\", TASK_OFFSET_SUMS);\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, UUID_1, \"localhost:80\", TASK_OFFSET_SUMS, IGNORED_UNIQUE_FIELD);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n     @Test\n     public void shouldEncodeAndDecodeVersion7() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA5NjQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0MToxM1rOHeGhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0MToxM1rOHeGhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjI4Nw==", "bodyText": "I think we should also add a test to make sure that if you pass in a uniqueField to the SubscriptionInfo but the usedVersion is less than 8, that it does not actually encode this field.", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501326287", "createdAt": "2020-10-07T21:41:13Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -313,7 +323,8 @@ public void shouldReturnTaskOffsetSumsMapForDecodedSubscription() {\n             new SubscriptionInfo(MIN_VERSION_OFFSET_SUM_SUBSCRIPTION,\n                                  LATEST_SUPPORTED_VERSION, UUID_1,\n                                  \"localhost:80\",\n-                                 TASK_OFFSET_SUMS)\n+                                 TASK_OFFSET_SUMS,\n+                                 IGNORED_UNIQUE_FIELD)\n                 .encode());\n         assertThat(info.taskOffsetSums(), is(TASK_OFFSET_SUMS));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c6174a4b0c651cda7498feeb5d29347b00a910"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1MTkwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/HighAvailabilityTaskAssignorIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNDowMFrOHeoD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNDowMFrOHeoD6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTY5MQ==", "bodyText": "Can we add a comment here explaining why we set the thread count so high? I feel like we'll forget and be really confused when we stumble across this in the future.", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501875691", "createdAt": "2020-10-08T17:04:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/HighAvailabilityTaskAssignorIntegrationTest.java", "diffHunk": "@@ -286,7 +286,8 @@ private static Properties streamsProperties(final String appId,\n                 mkEntry(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, \"60000\"),\n                 mkEntry(StreamsConfig.InternalConfig.ASSIGNMENT_LISTENER, configuredAssignmentListener),\n                 mkEntry(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, \"100\"),\n-                mkEntry(StreamsConfig.InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, HighAvailabilityTaskAssignor.class.getName())\n+                mkEntry(StreamsConfig.InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, HighAvailabilityTaskAssignor.class.getName()),\n+                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 40)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e964f7954c7c1ba5fec99a18a700566d5002d7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY1NzcwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTozN1rOHeoHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzowNTozN1rOHeoHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjY0Ng==", "bodyText": "nit: let's use new byte[1] for this to make sure it's actually being ignored when it should be (since apparently it won't notice if you just pass in empty bytes for this field on a version < 8)", "url": "https://github.com/apache/kafka/pull/9383#discussion_r501876646", "createdAt": "2020-10-08T17:05:37Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -59,6 +60,7 @@\n     );\n \n     private final static String IGNORED_USER_ENDPOINT = \"ignoredUserEndpoint:80\";\n+    private static final byte[] IGNORED_UNIQUE_FIELD = Bytes.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e964f7954c7c1ba5fec99a18a700566d5002d7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYyODE4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1MDo0MlrOHgweQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo1MDo0MlrOHgweQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMDY1Ng==", "bodyText": "We should do the same thing that we do in StreamsPartitionAssignor here, ie a changing byte. This is supposed to be like the same exact thing but for a \"future version\" of the partition assignor, to test version probing and general compatibility.\nIt's a bit annoying that you have to just copy the same exact stuff but that's just how it is for now", "url": "https://github.com/apache/kafka/pull/9383#discussion_r504110656", "createdAt": "2020-10-13T16:50:42Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -158,7 +159,8 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n                     LATEST_SUPPORTED_VERSION + 1,\n                     taskManager.processId(),\n                     userEndPoint(),\n-                    taskManager.getTaskOffsetSums()\n+                    taskManager.getTaskOffsetSums(),\n+                    Bytes.EMPTY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1721a60b5e2c5d6be0a9b3ba3c4b622292c68ae5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc0NjQ5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyNjowOVrOHjE8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyNjowOVrOHjE8Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MzE3NA==", "bodyText": "we probably ought to delete the commented-out assertions.", "url": "https://github.com/apache/kafka/pull/9383#discussion_r506543174", "createdAt": "2020-10-16T15:26:09Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -2023,13 +2022,13 @@ public void testUniqueField() {\n         configureDefaultPartitionAssignor();\n         final Set<String> topics = mkSet(\"input\");\n \n-        assertEquals(1, partitionAssignor.uniqueField().length);\n-        assertEquals(0, partitionAssignor.uniqueField()[0]);\n+        //assertEquals(1, partitionAssignor.uniqueField().length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb42de2a843fcaf8b1acb25bfbe408421ba221a"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1714, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}