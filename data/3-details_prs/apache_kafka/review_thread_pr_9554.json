{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDA3NjU5", "number": 9554, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowMToyN1rOE1AyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNDoxM1rOE1A0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIyODY2OnYy", "diffSide": "RIGHT", "path": "docs/streams/developer-guide/testing.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowMToyOFrOHtDiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzoyNDoxMVrOHtX3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNTg2NA==", "bodyText": "Hmm, is this supposed to match the output topic in L103 below? That one says \"result-topic\".", "url": "https://github.com/apache/kafka/pull/9554#discussion_r517005864", "createdAt": "2020-11-03T23:01:28Z", "author": {"login": "vvcephei"}, "path": "docs/streams/developer-guide/testing.html", "diffHunk": "@@ -73,67 +71,55 @@ <h2><a class=\"toc-backref\" href=\"#testing-topologytestdriver\" title=\"Permalink t\n                 You can use the test driver to verify that your specified processor topology computes the correct result\n                 with the manually piped in data records.\n                 The test driver captures the results records and allows to query its embedded state stores.\n-            <pre>\n-// Processor API\n+            <pre class=\"line-numbers\"><code class=\"language-text\">// Processor API\n Topology topology = new Topology();\n topology.addSource(\"sourceProcessor\", \"input-topic\");\n topology.addProcessor(\"processor\", ..., \"sourceProcessor\");\n-topology.addSink(\"sinkProcessor\", \"result-topic\", \"processor\");\n+topology.addSink(\"sinkProcessor\", \"output-topic\", \"processor\");\n // or\n // using DSL\n StreamsBuilder builder = new StreamsBuilder();\n-builder.stream(\"input-topic\").filter(...).to(\"result-topic\");\n+builder.stream(\"input-topic\").filter(...).to(\"output-topic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe275d74f79a4a8359fee2447f57627cd67dc812"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzOTAyNg==", "bodyText": "good catch! Thanks", "url": "https://github.com/apache/kafka/pull/9554#discussion_r517339026", "createdAt": "2020-11-04T13:24:11Z", "author": {"login": "bbejeck"}, "path": "docs/streams/developer-guide/testing.html", "diffHunk": "@@ -73,67 +71,55 @@ <h2><a class=\"toc-backref\" href=\"#testing-topologytestdriver\" title=\"Permalink t\n                 You can use the test driver to verify that your specified processor topology computes the correct result\n                 with the manually piped in data records.\n                 The test driver captures the results records and allows to query its embedded state stores.\n-            <pre>\n-// Processor API\n+            <pre class=\"line-numbers\"><code class=\"language-text\">// Processor API\n Topology topology = new Topology();\n topology.addSource(\"sourceProcessor\", \"input-topic\");\n topology.addProcessor(\"processor\", ..., \"sourceProcessor\");\n-topology.addSink(\"sinkProcessor\", \"result-topic\", \"processor\");\n+topology.addSink(\"sinkProcessor\", \"output-topic\", \"processor\");\n // or\n // using DSL\n StreamsBuilder builder = new StreamsBuilder();\n-builder.stream(\"input-topic\").filter(...).to(\"result-topic\");\n+builder.stream(\"input-topic\").filter(...).to(\"output-topic\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNTg2NA=="}, "originalCommit": {"oid": "fe275d74f79a4a8359fee2447f57627cd67dc812"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIzNDk2OnYy", "diffSide": "RIGHT", "path": "docs/streams/upgrade-guide.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzowNDoxM1rOHtDl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzoyNTowOFrOHtX50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNjgxNg==", "bodyText": "Seems like this change is wrong.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> if favor of the new <code>KStream.repartition()</code> operator\n          \n          \n            \n                    As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> in favor of the new <code>KStream.repartition()</code> operator", "url": "https://github.com/apache/kafka/pull/9554#discussion_r517006816", "createdAt": "2020-11-03T23:04:13Z", "author": {"login": "vvcephei"}, "path": "docs/streams/upgrade-guide.html", "diffHunk": "@@ -135,14 +134,12 @@ <h3><a id=\"streams_api_changes_260\" href=\"#streams_api_changes_260\">Streams API\n         tasks to their new owners in the background. Check out <a href=\"https://cwiki.apache.org/confluence/x/0i4lBg\">KIP-441</a>\n         for full details, including several new configs for control over this new feature.\n     </p>\n-\n     <p>\n         New end-to-end latency metrics have been added. These task-level metrics will be logged at the INFO level and report the min and max end-to-end latency of a record at the beginning/source node(s)\n         and end/terminal node(s) of a task. See <a href=\"https://cwiki.apache.org/confluence/x/gBkRCQ\">KIP-613</a> for more information.\n     </p>\n-\n     <p>\n-        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> in favor of the new <code>KStream.repartition()</code> operator\n+        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> if favor of the new <code>KStream.repartition()</code> operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe275d74f79a4a8359fee2447f57627cd67dc812"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMzOTYwMg==", "bodyText": "ack", "url": "https://github.com/apache/kafka/pull/9554#discussion_r517339602", "createdAt": "2020-11-04T13:25:08Z", "author": {"login": "bbejeck"}, "path": "docs/streams/upgrade-guide.html", "diffHunk": "@@ -135,14 +134,12 @@ <h3><a id=\"streams_api_changes_260\" href=\"#streams_api_changes_260\">Streams API\n         tasks to their new owners in the background. Check out <a href=\"https://cwiki.apache.org/confluence/x/0i4lBg\">KIP-441</a>\n         for full details, including several new configs for control over this new feature.\n     </p>\n-\n     <p>\n         New end-to-end latency metrics have been added. These task-level metrics will be logged at the INFO level and report the min and max end-to-end latency of a record at the beginning/source node(s)\n         and end/terminal node(s) of a task. See <a href=\"https://cwiki.apache.org/confluence/x/gBkRCQ\">KIP-613</a> for more information.\n     </p>\n-\n     <p>\n-        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> in favor of the new <code>KStream.repartition()</code> operator\n+        As of 2.6.0 Kafka Streams deprecates <code>KStream.through()</code> if favor of the new <code>KStream.repartition()</code> operator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNjgxNg=="}, "originalCommit": {"oid": "fe275d74f79a4a8359fee2447f57627cd67dc812"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3796, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}