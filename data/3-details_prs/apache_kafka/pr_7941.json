{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODQ5MTg5", "number": 7941, "title": "KAFKA-9181; Maintain clean separation between local and group subscriptions in consumer's SubscriptionState", "bodyText": "As described in KAFKA-9181, kafka.api.SaslGssapiSslEndToEndAuthorizationTest.testNoConsumeWithoutDescribeAclViaSubscribe occasionally hits unexpected TopicAuthorizationException even after the topic is removed from the subscription. The test uses small metadata refresh time and hence can see metadata responses before JoinGroup is processed. We currently rely on onJoinPrepare to reset SubscriptionState.groupSubscription, which accumulates topics until reset. If we process JoinGroup after a subscribe without a new onJoinPrepare, we leave the topic in SubscriptionState.groupSubscription and hence in metadata. This PR resets groupSubscription when sending JoinGroup request, when ConsumerCoordinator.joinedSubscription is updated.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-12T16:51:09Z", "url": "https://github.com/apache/kafka/pull/7941", "merged": true, "mergeCommit": {"oid": "a565d1a182cc69c9994c4512b5e9877e97f06cdf"}, "closed": true, "closedAt": "2020-01-24T10:38:22Z", "author": {"login": "rajinisivaram"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Gn2xAFqTM0MjIzMTIxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9NCGRAH2gAyMzYxODQ5MTg5OjE4YTQ5MTc5MDRkNWFhNzc5ZWM1OTBkNjgyYWZlYjVkNzQ2ZjAzYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjMxMjEy", "url": "https://github.com/apache/kafka/pull/7941#pullrequestreview-342231212", "createdAt": "2020-01-14T00:39:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozOTo0MFrOFdJIIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToyNToyNFrOFdJyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMjU2MA==", "bodyText": "Do we need this? Seems like we have access to the SubscriptionState object already in the test case.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r366102560", "createdAt": "2020-01-14T00:39:40Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1386,4 +1387,8 @@ public void invoke() {\n     RebalanceProtocol getProtocol() {\n         return protocol;\n     }\n+\n+    SubscriptionState subscriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw==", "bodyText": "I'm confused about a couple things. First, if a subscription changes while we are in the middle of a rebalance, do we need to call onJoinPrepare again? With the old semantics, we probably didn't need to because we revoked everything, but with \"cooperative\" rebalancing, perhaps we should?  cc @guozhangwang\nThe second thing is that it seems surprising that we raise auth errors from the \"group subscription.\" If consumer 1 has subscribed to \"A\" and consumer 2 has subscribed to \"B,\" I probably wouldn't expect to get any auth errors for topic \"B\" from consumer 1. So maybe we should be ignoring auth errors not part of subscription()? Not sure if that is straightforward or if there are any additional implications.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r366113303", "createdAt": "2020-01-14T01:25:24Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63aa4e38d29862618e934a49a5671dee3ad2463d", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/63aa4e38d29862618e934a49a5671dee3ad2463d", "committedDate": "2020-01-22T12:44:18Z", "message": "KAFKA-9181; Ensure SubscriptionState.groupSubscription is updated even if onJoinPrepare not invoked after subscribe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4384fbce029ab8431d82263bfb1c6079e69e6a81", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/4384fbce029ab8431d82263bfb1c6079e69e6a81", "committedDate": "2020-01-22T12:44:18Z", "message": "Address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797aa7c527de1ea635fa045aec4ea53693e38792", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/797aa7c527de1ea635fa045aec4ea53693e38792", "committedDate": "2020-01-22T14:43:45Z", "message": "Address review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/6f574eaaa40d40b530808a50ced0f328012ade99", "committedDate": "2020-01-22T15:12:46Z", "message": "Don't include subscription topics in `groupSubscription`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/6f574eaaa40d40b530808a50ced0f328012ade99", "committedDate": "2020-01-22T15:12:46Z", "message": "Don't include subscription topics in `groupSubscription`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODE0NzIw", "url": "https://github.com/apache/kafka/pull/7941#pullrequestreview-346814720", "createdAt": "2020-01-22T18:41:27Z", "commit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo0MToyOFrOFgm09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo0MToyOFrOFgm09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDkwMQ==", "bodyText": "It might borderline overkill, but I'm considering if we could avoid the copy here with logic like the following:\nif (!groupSubscription.isEmpty())\n  return groupSubscription;\nelse\n  return subscription;\n\nBasically relying on the the group subscription being a superset of the local subscription when it is defined.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r369734901", "createdAt": "2020-01-22T18:41:28Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -335,22 +329,24 @@ synchronized boolean matchesSubscribedPattern(String topic) {\n     }\n \n     /**\n-     * Get the subscription for the group. For the leader, this will include the union of the\n-     * subscriptions of all group members. For followers, it is just that member's subscription.\n-     * This is used when querying topic metadata to detect the metadata changes which would\n+     * Get the subcription topics for which metadata is required . For the leader, this will include\n+     * the union of the subscriptions of all group members. For followers, it is just that member's\n+     * subscription. This is used when querying topic metadata to detect the metadata changes which would\n      * require rebalancing. The leader fetches metadata for all topics in the group so that it\n      * can do the partition assignment (which requires at least partition counts for all topics\n      * to be assigned).\n      *\n      * @return The union of all subscribed topics in the group if this member is the leader\n      *   of the current generation; otherwise it returns the same set as {@link #subscription()}\n      */\n-    synchronized Set<String> groupSubscription() {\n-        return this.groupSubscription;\n+    synchronized Set<String> metadataTopics() {\n+        Set<String> topics = new HashSet<>(groupSubscription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57765e11ecfa34b51048e1f1c361ecf1ab63dbd2", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/57765e11ecfa34b51048e1f1c361ecf1ab63dbd2", "committedDate": "2020-01-22T20:28:39Z", "message": "Address review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDMxMTcz", "url": "https://github.com/apache/kafka/pull/7941#pullrequestreview-347431173", "createdAt": "2020-01-23T16:22:43Z", "commit": {"oid": "57765e11ecfa34b51048e1f1c361ecf1ab63dbd2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoyMjo0M1rOFhEZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoyMjo0M1rOFhEZDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxOTI3OQ==", "bodyText": "I guess we could restore this location with the change to the group subscription maintenance? I don't feel too strongly since the new location works also.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r370219279", "createdAt": "2020-01-23T16:22:43Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -689,7 +690,6 @@ protected void onJoinPrepare(int generation, String memberId) {\n         }\n \n         isLeader = false;\n-        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57765e11ecfa34b51048e1f1c361ecf1ab63dbd2"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a4917904d5aa779ec590d682afeb5d746f03a0", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/18a4917904d5aa779ec590d682afeb5d746f03a0", "committedDate": "2020-01-23T16:35:22Z", "message": "Address review comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1970, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}