{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Mjc0NTA4", "number": 8669, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjozMToyN1rOD8q8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0OTo0OFrOD9Zx2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTQ0Nzc3OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjozMToyN1rOGVwcwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjozMToyN1rOGVwcwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NzA3NA==", "bodyText": "I felt these were just cluttering up this class so I moved them to a new file", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425467074", "createdAt": "2020-05-14T22:31:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -198,433 +196,51 @@ public StateStore getStateStore(final String name) {\n \n     @Override\n     public void commit() {\n-        task.requestCommit();\n+        throwUnsupportedOperationExceptionIfStandby(\"commit\");\n+        applyStreamTaskOperation(StreamTask::requestCommit);\n     }\n \n     @Override\n     @Deprecated\n     public Cancellable schedule(final long intervalMs,\n                                 final PunctuationType type,\n                                 final Punctuator callback) {\n+        throwUnsupportedOperationExceptionIfStandby(\"schedule\");\n         if (intervalMs < 1) {\n             throw new IllegalArgumentException(\"The minimum supported scheduling interval is 1 millisecond.\");\n         }\n-        return task.schedule(intervalMs, type, callback);\n+        return returnStreamTaskOperation(t -> t.schedule(intervalMs, type, callback));\n     }\n \n     @SuppressWarnings(\"deprecation\") // removing #schedule(final long intervalMs,...) will fix this\n     @Override\n     public Cancellable schedule(final Duration interval,\n                                 final PunctuationType type,\n                                 final Punctuator callback) throws IllegalArgumentException {\n+        throwUnsupportedOperationExceptionIfStandby(\"schedule\");\n         final String msgPrefix = prepareMillisCheckFailMsgPrefix(interval, \"interval\");\n         return schedule(ApiUtils.validateMillisecondDuration(interval, msgPrefix), type, callback);\n     }\n \n-    private abstract static class StateStoreReadOnlyDecorator<T extends StateStore, K, V>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTk0NDU4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractReadOnlyDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzoyMToxMFrOGV1Ktg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMzoyMToxMFrOGV1Ktg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU0NDM3NA==", "bodyText": "All of this (and the other new class below) was just copied over from ProcessorContextImpl. I changed the named to AbstractXXXDecorator since it's an abstract class but it's all otherwise unchanged", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425544374", "createdAt": "2020-05-15T03:21:10Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractReadOnlyDecorator.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import java.util.List;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.KeyValueStore;\n+import org.apache.kafka.streams.state.SessionStore;\n+import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.apache.kafka.streams.state.WindowStore;\n+import org.apache.kafka.streams.state.WindowStoreIterator;\n+import org.apache.kafka.streams.state.internals.WrappedStateStore;\n+\n+abstract class AbstractReadOnlyDecorator<T extends StateStore, K, V> extends WrappedStateStore<T, K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5b4ceeae22b7be174e901e14b69e07872b2f52c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDE1NDM1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTozOToxM1rOGV3I4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTozOToxM1rOGV3I4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NjY3NA==", "bodyText": "No logical changes here, just added a check for any methods that were previously overridden in the standby context to throw UnsupportedOperation", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425576674", "createdAt": "2020-05-15T05:39:13Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -113,10 +113,12 @@ public void register(final StateStore store,\n     }\n \n     /**\n+     * @throws UnsupportedOperationException if the current task type is standby", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDE1NzE3OnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/StoreChangeLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTo0MDo0NFrOGV3Khg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMTowMzozOFrOGWXLNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NzA5NA==", "bodyText": "This class was the root cause of the processor context issue blocking the active <--> standby task conversion. I was taking pieces out of it bit by bit and by the end it seemed pointless to have at all", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425577094", "createdAt": "2020-05-15T05:40:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/StoreChangeLogger.java", "diffHunk": "@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.state.internals;\n-\n-import org.apache.kafka.common.serialization.Serializer;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n-import org.apache.kafka.streams.processor.internals.ProcessorStateManager;\n-import org.apache.kafka.streams.processor.internals.RecordCollector;\n-import org.apache.kafka.streams.state.StateSerdes;\n-\n-/**\n- * Note that the use of array-typed keys is discouraged because they result in incorrect caching behavior.\n- * If you intend to work on byte arrays as key, for example, you may want to wrap them with the {@code Bytes} class,\n- * i.e. use {@code StoreChangeLogger<Bytes, ...>} rather than {@code StoreChangeLogger<byte[], ...>}.\n- *\n- * @param <K>\n- * @param <V>\n- */\n-class StoreChangeLogger<K, V> {\n-\n-    private final String topic;\n-    private final int partition;\n-    private final ProcessorContext context;\n-    private final RecordCollector collector;\n-    private final Serializer<K> keySerializer;\n-    private final Serializer<V> valueSerializer;\n-\n-    StoreChangeLogger(final String storeName,\n-                      final ProcessorContext context,\n-                      final StateSerdes<K, V> serialization) {\n-        this(storeName, context, context.taskId().partition, serialization);\n-    }\n-\n-    private StoreChangeLogger(final String storeName,\n-                              final ProcessorContext context,\n-                              final int partition,\n-                              final StateSerdes<K, V> serialization) {\n-        topic = ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n-        this.context = context;\n-        this.partition = partition;\n-        this.collector = ((RecordCollector.Supplier) context).recordCollector();\n-        keySerializer = serialization.keySerializer();\n-        valueSerializer = serialization.valueSerializer();\n-    }\n-\n-    void logChange(final K key,\n-                   final V value) {\n-        logChange(key, value, context.timestamp());\n-    }\n-\n-    void logChange(final K key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTU1OQ==", "bodyText": "SGTM.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426101559", "createdAt": "2020-05-16T01:03:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/StoreChangeLogger.java", "diffHunk": "@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.state.internals;\n-\n-import org.apache.kafka.common.serialization.Serializer;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n-import org.apache.kafka.streams.processor.internals.ProcessorStateManager;\n-import org.apache.kafka.streams.processor.internals.RecordCollector;\n-import org.apache.kafka.streams.state.StateSerdes;\n-\n-/**\n- * Note that the use of array-typed keys is discouraged because they result in incorrect caching behavior.\n- * If you intend to work on byte arrays as key, for example, you may want to wrap them with the {@code Bytes} class,\n- * i.e. use {@code StoreChangeLogger<Bytes, ...>} rather than {@code StoreChangeLogger<byte[], ...>}.\n- *\n- * @param <K>\n- * @param <V>\n- */\n-class StoreChangeLogger<K, V> {\n-\n-    private final String topic;\n-    private final int partition;\n-    private final ProcessorContext context;\n-    private final RecordCollector collector;\n-    private final Serializer<K> keySerializer;\n-    private final Serializer<V> valueSerializer;\n-\n-    StoreChangeLogger(final String storeName,\n-                      final ProcessorContext context,\n-                      final StateSerdes<K, V> serialization) {\n-        this(storeName, context, context.taskId().partition, serialization);\n-    }\n-\n-    private StoreChangeLogger(final String storeName,\n-                              final ProcessorContext context,\n-                              final int partition,\n-                              final StateSerdes<K, V> serialization) {\n-        topic = ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n-        this.context = context;\n-        this.partition = partition;\n-        this.collector = ((RecordCollector.Supplier) context).recordCollector();\n-        keySerializer = serialization.keySerializer();\n-        valueSerializer = serialization.valueSerializer();\n-    }\n-\n-    void logChange(final K key,\n-                   final V value) {\n-        logChange(key, value, context.timestamp());\n-    }\n-\n-    void logChange(final K key,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NzA5NA=="}, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDE1ODYyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTo0MTozNFrOGV3LWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNTo0MTozNFrOGV3LWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NzMwNw==", "bodyText": "We now just delegate to the context to figure out how/what to log", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425577307", "createdAt": "2020-05-15T05:41:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStore.java", "diffHunk": "@@ -114,7 +105,7 @@ public void put(final Bytes key,\n \n     void log(final Bytes key,\n              final byte[] value) {\n-        changeLogger.logChange(key, value);\n+        context.logChange(name(), key, value, context.timestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTkwNjI5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1NzowMVrOGWIYPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxODo0OVrOGWNZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1OTEzNQ==", "bodyText": "Looks like this doesn't need to be defaulted here. If the logic doesn't apply to all the implementing classes, it's better not to define it in the abstract class.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425859135", "createdAt": "2020-05-15T14:57:01Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -218,4 +230,16 @@ public void initialize() {\n     public void uninitialize() {\n         initialized = false;\n     }\n+\n+    @Override\n+    public TaskType taskType() {\n+        return stateManager.taskType();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTMwOA==", "bodyText": "Ah, actually it does. I should remove the override from the ProcessorContextImpl instead", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425941308", "createdAt": "2020-05-15T17:18:49Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -218,4 +230,16 @@ public void initialize() {\n     public void uninitialize() {\n         initialized = false;\n     }\n+\n+    @Override\n+    public TaskType taskType() {\n+        return stateManager.taskType();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1OTEzNQ=="}, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjE2MDU4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjowNDoyM1rOGWK6JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxOTo1MlrOGWNbMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwMDU4MA==", "bodyText": "It doesn't seem like these need to be defined here, since they're only used outside of this interface.\nThey actually only have two, independent, usages, and it doesn't seem that important to de-duplicate the instances. Can we just copy them to separate constants in the classes that need them?", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425900580", "createdAt": "2020-05-15T16:04:23Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollector.java", "diffHunk": "@@ -19,13 +19,18 @@\n import org.apache.kafka.clients.producer.Producer;\n import org.apache.kafka.common.TopicPartition;\n import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.BytesSerializer;\n import org.apache.kafka.common.serialization.Serializer;\n import org.apache.kafka.streams.processor.StreamPartitioner;\n \n import java.util.Map;\n \n public interface RecordCollector {\n \n+    BytesSerializer BYTES_KEY_SERIALIZER = new BytesSerializer();\n+    ByteArraySerializer BYTE_ARRAY_VALUE_SERIALIZER = new ByteArraySerializer();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTgwOQ==", "bodyText": "Yeah, this was part of a larger refactoring that I walked back. That sounds like a reasonable request \ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425941809", "createdAt": "2020-05-15T17:19:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordCollector.java", "diffHunk": "@@ -19,13 +19,18 @@\n import org.apache.kafka.clients.producer.Producer;\n import org.apache.kafka.common.TopicPartition;\n import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.BytesSerializer;\n import org.apache.kafka.common.serialization.Serializer;\n import org.apache.kafka.streams.processor.StreamPartitioner;\n \n import java.util.Map;\n \n public interface RecordCollector {\n \n+    BytesSerializer BYTES_KEY_SERIALIZER = new BytesSerializer();\n+    ByteArraySerializer BYTE_ARRAY_VALUE_SERIALIZER = new ByteArraySerializer();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwMDU4MA=="}, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjE4NDcyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxMToxNFrOGWLJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxMToxNFrOGWLJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwNDQ1MA==", "bodyText": "It seems like an abstraction error to have something like this in an abstract class. Much better to just move all the implementations that need it to the concrete classes.\nFor example, it's unclear whether the logic that's protected by this method should include global tasks or not. I.e., was it intended to \"throw if not Active\" (and we just forgot that there are also global tasks), or \"throw if not Active or Global\"? I'm not asking you to answer this question; I'm pointing out that putting this in the abstract class makes the code ambiguous. Even if the code is all correct right now, it's dangerous for maintenence because it would be easy to make the mistake of forgetting about global tasks at any point in the future and introducing a bug.\nOTOH, if all this logic gets pushed into the implementations, then the ProcessorContextImpl can assert that it only gets Active or Standby, and it can safely use this method, while the GlobalContext can take care of itself.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425904450", "createdAt": "2020-05-15T16:11:14Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -218,4 +230,16 @@ public void initialize() {\n     public void uninitialize() {\n         initialized = false;\n     }\n+\n+    @Override\n+    public TaskType taskType() {\n+        return stateManager.taskType();\n+    }\n+\n+    void throwUnsupportedOperationExceptionIfStandby(final String operationName) {\n+        if (taskType() == TaskType.STANDBY) {\n+            throw new UnsupportedOperationException(\n+                \"this should not happen: \" + operationName + \"() is not supported in standby tasks.\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjIxMzA2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxOTowN1rOGWLa9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODowNjoxN1rOGWO3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODk4Mg==", "bodyText": "We don't need expectLastCall() on these (and everywhere else)?", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425908982", "createdAt": "2020-05-15T16:19:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java", "diffHunk": "@@ -113,24 +114,26 @@ public void shouldDelegateToUnderlyingStoreWhenFetchingRange() {\n     @SuppressWarnings(\"deprecation\")\n     public void shouldRetainDuplicatesWhenSet() {\n         store = new ChangeLoggingWindowBytesStore(inner, true);\n+\n         inner.put(bytesKey, value, 0);\n         EasyMock.expectLastCall().times(2);\n \n         init();\n-        store.put(bytesKey, value);\n-        store.put(bytesKey, value);\n \n         final Bytes key1 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 1);\n         final Bytes key2 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 2);\n-        assertThat(collector.collected().size(), equalTo(2));\n-        assertThat(collector.collected().get(0).key(), equalTo(key1));\n-        assertThat(collector.collected().get(0).value(), equalTo(value));\n-        assertThat(collector.collected().get(0).timestamp(), equalTo(0L));\n-        assertThat(collector.collected().get(1).key(), equalTo(key2));\n-        assertThat(collector.collected().get(1).value(), equalTo(value));\n-        assertThat(collector.collected().get(1).timestamp(), equalTo(0L));\n \n-        EasyMock.verify(inner);\n+        EasyMock.reset(context);\n+        EasyMock.expect(context.timestamp()).andStubReturn(0L);\n+        context.logChange(store.name(), key1, value, 0L);\n+        context.logChange(store.name(), key2, value, 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1OTgxMg==", "bodyText": "The expectLastCall is redundant if you're not chaining it with something else (like expectLastCall().times(2))\nI verified this just to be sure by removing the invocation of context.logChange in this class and it did indeed fail", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425959812", "createdAt": "2020-05-15T17:55:14Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java", "diffHunk": "@@ -113,24 +114,26 @@ public void shouldDelegateToUnderlyingStoreWhenFetchingRange() {\n     @SuppressWarnings(\"deprecation\")\n     public void shouldRetainDuplicatesWhenSet() {\n         store = new ChangeLoggingWindowBytesStore(inner, true);\n+\n         inner.put(bytesKey, value, 0);\n         EasyMock.expectLastCall().times(2);\n \n         init();\n-        store.put(bytesKey, value);\n-        store.put(bytesKey, value);\n \n         final Bytes key1 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 1);\n         final Bytes key2 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 2);\n-        assertThat(collector.collected().size(), equalTo(2));\n-        assertThat(collector.collected().get(0).key(), equalTo(key1));\n-        assertThat(collector.collected().get(0).value(), equalTo(value));\n-        assertThat(collector.collected().get(0).timestamp(), equalTo(0L));\n-        assertThat(collector.collected().get(1).key(), equalTo(key2));\n-        assertThat(collector.collected().get(1).value(), equalTo(value));\n-        assertThat(collector.collected().get(1).timestamp(), equalTo(0L));\n \n-        EasyMock.verify(inner);\n+        EasyMock.reset(context);\n+        EasyMock.expect(context.timestamp()).andStubReturn(0L);\n+        context.logChange(store.name(), key1, value, 0L);\n+        context.logChange(store.name(), key2, value, 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODk4Mg=="}, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2NTM1OQ==", "bodyText": "Ok, thanks!", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425965359", "createdAt": "2020-05-15T18:06:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java", "diffHunk": "@@ -113,24 +114,26 @@ public void shouldDelegateToUnderlyingStoreWhenFetchingRange() {\n     @SuppressWarnings(\"deprecation\")\n     public void shouldRetainDuplicatesWhenSet() {\n         store = new ChangeLoggingWindowBytesStore(inner, true);\n+\n         inner.put(bytesKey, value, 0);\n         EasyMock.expectLastCall().times(2);\n \n         init();\n-        store.put(bytesKey, value);\n-        store.put(bytesKey, value);\n \n         final Bytes key1 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 1);\n         final Bytes key2 = WindowKeySchema.toStoreKeyBinary(bytesKey, 0, 2);\n-        assertThat(collector.collected().size(), equalTo(2));\n-        assertThat(collector.collected().get(0).key(), equalTo(key1));\n-        assertThat(collector.collected().get(0).value(), equalTo(value));\n-        assertThat(collector.collected().get(0).timestamp(), equalTo(0L));\n-        assertThat(collector.collected().get(1).key(), equalTo(key2));\n-        assertThat(collector.collected().get(1).value(), equalTo(value));\n-        assertThat(collector.collected().get(1).timestamp(), equalTo(0L));\n \n-        EasyMock.verify(inner);\n+        EasyMock.reset(context);\n+        EasyMock.expect(context.timestamp()).andStubReturn(0L);\n+        context.logChange(store.name(), key1, value, 0L);\n+        context.logChange(store.name(), key2, value, 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODk4Mg=="}, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjIxNzQ5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/test/MockInternalProcessorContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoyMDoyM1rOGWLdxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoyMDoyM1rOGWLdxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwOTcwMw==", "bodyText": "Looks like this is unused.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425909703", "createdAt": "2020-05-15T16:20:23Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/test/MockInternalProcessorContext.java", "diffHunk": "@@ -116,4 +119,20 @@ public void register(final StateStore store, final StateRestoreCallback stateRes\n     public StateRestoreCallback stateRestoreCallback(final String storeName) {\n         return restoreCallbacks.get(storeName);\n     }\n+\n+    @Override\n+    public TaskType taskType() {\n+        return taskType;\n+    }\n+\n+    public void setTaskType(final TaskType newType) {\n+        taskType = newType;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjIxOTUyOnYy", "diffSide": "RIGHT", "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/processor/MockProcessorContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoyMDo1OVrOGWLfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoyMDo1OVrOGWLfGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkxMDA0MA==", "bodyText": "Not sure about this change ;)", "url": "https://github.com/apache/kafka/pull/8669#discussion_r425910040", "createdAt": "2020-05-15T16:20:59Z", "author": {"login": "vvcephei"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/processor/MockProcessorContext.java", "diffHunk": "@@ -75,6 +75,7 @@\n     private final List<CapturedForward> capturedForwards = new LinkedList<>();\n     private boolean committed = false;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632617b7bd1cdcadfa6cd45407f02912ccc00604"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzQxNDQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDo1OToxMlrOGWXJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDo1OToxMlrOGWXJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTA2NQ==", "bodyText": "nit: we can add a validation that if streamTask != null then stateMgr.taskType() == ACTIVE.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426101065", "createdAt": "2020-05-16T00:59:12Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -16,87 +16,125 @@\n  */\n package org.apache.kafka.streams.processor.internals;\n \n-import org.apache.kafka.streams.KeyValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.BytesSerializer;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.common.utils.LogContext;\n import org.apache.kafka.streams.StreamsConfig;\n import org.apache.kafka.streams.errors.StreamsException;\n import org.apache.kafka.streams.internals.ApiUtils;\n-import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.processor.Cancellable;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n import org.apache.kafka.streams.processor.PunctuationType;\n import org.apache.kafka.streams.processor.Punctuator;\n+import org.apache.kafka.streams.processor.StateRestoreCallback;\n import org.apache.kafka.streams.processor.StateStore;\n import org.apache.kafka.streams.processor.TaskId;\n import org.apache.kafka.streams.processor.To;\n+import org.apache.kafka.streams.processor.internals.Task.TaskType;\n import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n-import org.apache.kafka.streams.state.KeyValueIterator;\n-import org.apache.kafka.streams.state.KeyValueStore;\n-import org.apache.kafka.streams.state.SessionStore;\n-import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n-import org.apache.kafka.streams.state.TimestampedWindowStore;\n-import org.apache.kafka.streams.state.ValueAndTimestamp;\n-import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.streams.state.WindowStoreIterator;\n import org.apache.kafka.streams.state.internals.ThreadCache;\n-import org.apache.kafka.streams.state.internals.WrappedStateStore;\n \n import java.time.Duration;\n import java.util.List;\n \n import static org.apache.kafka.streams.internals.ApiUtils.prepareMillisCheckFailMsgPrefix;\n+import static org.apache.kafka.streams.processor.internals.AbstractReadOnlyDecorator.getReadOnlyStore;\n+import static org.apache.kafka.streams.processor.internals.AbstractReadWriteDecorator.getReadWriteStore;\n \n public class ProcessorContextImpl extends AbstractProcessorContext implements RecordCollector.Supplier {\n+    public static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n+    public static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n \n-    private final StreamTask task;\n+    // The below are both null for standby tasks\n+    private final StreamTask streamTask;\n     private final RecordCollector collector;\n+\n     private final ToInternal toInternal = new ToInternal();\n     private final static To SEND_TO_ALL = To.all();\n \n+    final Map<String, String> storeToChangelogTopic = new HashMap<>();\n+\n     ProcessorContextImpl(final TaskId id,\n-                         final StreamTask task,\n+                         final StreamTask streamTask,\n                          final StreamsConfig config,\n                          final RecordCollector collector,\n                          final ProcessorStateManager stateMgr,\n                          final StreamsMetricsImpl metrics,\n                          final ThreadCache cache) {\n         super(id, config, metrics, stateMgr, cache);\n-        this.task = task;\n+        this.streamTask = streamTask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e08429bc21bedb01c4c4d6f96d4689f60b59ee"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzQxNzI4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMTowMjo0M1rOGWXK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozNDo0NVrOGW_DTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTQ1Nw==", "bodyText": "When we merge the InternalMock with MockInternal would this be okay? cc @cadonna", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426101457", "createdAt": "2020-05-16T01:02:43Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -349,6 +353,27 @@ public Headers headers() {\n         return recordContext.headers();\n     }\n \n+    @Override\n+    public TaskType taskType() {\n+        return TaskType.ACTIVE;\n+    }\n+\n+    @Override\n+    public void logChange(final String storeName,\n+                          final Bytes key,\n+                          final byte[] value,\n+                          final long timestamp) {\n+        recordCollector().send(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e08429bc21bedb01c4c4d6f96d4689f60b59ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMjYwOA==", "bodyText": "I assumed this would be fine since it's pretty much what happened before (ie users of the context would get the record collector and then call send) but I'd like to get this confirmed", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426102608", "createdAt": "2020-05-16T01:14:17Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -349,6 +353,27 @@ public Headers headers() {\n         return recordContext.headers();\n     }\n \n+    @Override\n+    public TaskType taskType() {\n+        return TaskType.ACTIVE;\n+    }\n+\n+    @Override\n+    public void logChange(final String storeName,\n+                          final Bytes key,\n+                          final byte[] value,\n+                          final long timestamp) {\n+        recordCollector().send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTQ1Nw=="}, "originalCommit": {"oid": "a1e08429bc21bedb01c4c4d6f96d4689f60b59ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0MTc2NQ==", "bodyText": "Both, MockInternalProcessorContext and InternalMockProcessorContext currently implement RecordCollector.Supplier (i.e., recordCollector()). Of course, once rebased the consolidated mock needs to implement taskType() and logChange().\nSee also my comment above regarding KEY_SERIALIZER and VALUE_SERIALIZER.\n@guozhangwang did you have anything specific in mind that I did not cover here?", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426641765", "createdAt": "2020-05-18T13:52:14Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -349,6 +353,27 @@ public Headers headers() {\n         return recordContext.headers();\n     }\n \n+    @Override\n+    public TaskType taskType() {\n+        return TaskType.ACTIVE;\n+    }\n+\n+    @Override\n+    public void logChange(final String storeName,\n+                          final Bytes key,\n+                          final byte[] value,\n+                          final long timestamp) {\n+        recordCollector().send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTQ1Nw=="}, "originalCommit": {"oid": "a1e08429bc21bedb01c4c4d6f96d4689f60b59ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NDg5Mg==", "bodyText": "No I do not, just wanting to make sure we do not have any major conflicts when rebasing the other.", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426754892", "createdAt": "2020-05-18T16:34:45Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -349,6 +353,27 @@ public Headers headers() {\n         return recordContext.headers();\n     }\n \n+    @Override\n+    public TaskType taskType() {\n+        return TaskType.ACTIVE;\n+    }\n+\n+    @Override\n+    public void logChange(final String storeName,\n+                          final Bytes key,\n+                          final byte[] value,\n+                          final long timestamp) {\n+        recordCollector().send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTQ1Nw=="}, "originalCommit": {"oid": "a1e08429bc21bedb01c4c4d6f96d4689f60b59ee"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjgyMTI3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjozNTo0MVrOGW1Iaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjozNTo0MVrOGW1Iaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MjM2Mw==", "bodyText": "req: Please unit test a processor context for a standby with the unsupported methods. That is, all code paths that involve a call to throwUnsupportedOperationExceptionIfStandby().", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426592363", "createdAt": "2020-05-18T12:35:41Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -16,87 +16,129 @@\n  */\n package org.apache.kafka.streams.processor.internals;\n \n-import org.apache.kafka.streams.KeyValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.BytesSerializer;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.common.utils.LogContext;\n import org.apache.kafka.streams.StreamsConfig;\n import org.apache.kafka.streams.errors.StreamsException;\n import org.apache.kafka.streams.internals.ApiUtils;\n-import org.apache.kafka.streams.kstream.Windowed;\n import org.apache.kafka.streams.processor.Cancellable;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n import org.apache.kafka.streams.processor.PunctuationType;\n import org.apache.kafka.streams.processor.Punctuator;\n+import org.apache.kafka.streams.processor.StateRestoreCallback;\n import org.apache.kafka.streams.processor.StateStore;\n import org.apache.kafka.streams.processor.TaskId;\n import org.apache.kafka.streams.processor.To;\n+import org.apache.kafka.streams.processor.internals.Task.TaskType;\n import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n-import org.apache.kafka.streams.state.KeyValueIterator;\n-import org.apache.kafka.streams.state.KeyValueStore;\n-import org.apache.kafka.streams.state.SessionStore;\n-import org.apache.kafka.streams.state.TimestampedKeyValueStore;\n-import org.apache.kafka.streams.state.TimestampedWindowStore;\n-import org.apache.kafka.streams.state.ValueAndTimestamp;\n-import org.apache.kafka.streams.state.WindowStore;\n-import org.apache.kafka.streams.state.WindowStoreIterator;\n import org.apache.kafka.streams.state.internals.ThreadCache;\n-import org.apache.kafka.streams.state.internals.WrappedStateStore;\n \n import java.time.Duration;\n import java.util.List;\n \n import static org.apache.kafka.streams.internals.ApiUtils.prepareMillisCheckFailMsgPrefix;\n+import static org.apache.kafka.streams.processor.internals.AbstractReadOnlyDecorator.getReadOnlyStore;\n+import static org.apache.kafka.streams.processor.internals.AbstractReadWriteDecorator.getReadWriteStore;\n \n public class ProcessorContextImpl extends AbstractProcessorContext implements RecordCollector.Supplier {\n+    public static final BytesSerializer KEY_SERIALIZER = new BytesSerializer();\n+    public static final ByteArraySerializer VALUE_SERIALIZER = new ByteArraySerializer();\n \n-    private final StreamTask task;\n+    // The below are both null for standby tasks\n+    private final StreamTask streamTask;\n     private final RecordCollector collector;\n+\n     private final ToInternal toInternal = new ToInternal();\n     private final static To SEND_TO_ALL = To.all();\n \n+    final Map<String, String> storeToChangelogTopic = new HashMap<>();\n+\n     ProcessorContextImpl(final TaskId id,\n-                         final StreamTask task,\n+                         final StreamTask streamTask,\n                          final StreamsConfig config,\n                          final RecordCollector collector,\n                          final ProcessorStateManager stateMgr,\n                          final StreamsMetricsImpl metrics,\n                          final ThreadCache cache) {\n         super(id, config, metrics, stateMgr, cache);\n-        this.task = task;\n+        this.streamTask = streamTask;\n         this.collector = collector;\n+\n+        if (streamTask == null && taskType() == TaskType.ACTIVE) {\n+            throw new IllegalStateException(\"Tried to create context for active task but the streamtask was null\");\n+        }\n+    }\n+\n+    ProcessorContextImpl(final TaskId id,\n+                         final StreamsConfig config,\n+                         final ProcessorStateManager stateMgr,\n+                         final StreamsMetricsImpl metrics) {\n+        this(\n+            id,\n+            null,\n+            config,\n+            null,\n+            stateMgr,\n+            metrics,\n+            new ThreadCache(\n+                new LogContext(String.format(\"stream-thread [%s] \", Thread.currentThread().getName())),\n+                0,\n+                metrics\n+            )\n+        );\n     }\n \n-    public ProcessorStateManager getStateMgr() {\n+    public ProcessorStateManager stateManager() {\n         return (ProcessorStateManager) stateManager;\n     }\n \n+    @Override\n+    public void register(final StateStore store,\n+                         final StateRestoreCallback stateRestoreCallback) {\n+        storeToChangelogTopic.put(store.name(), ProcessorStateManager.storeChangelogTopic(applicationId(), store.name()));\n+        super.register(store, stateRestoreCallback);\n+    }\n+\n     @Override\n     public RecordCollector recordCollector() {\n         return collector;\n     }\n \n+    @Override\n+    public void logChange(final String storeName,\n+                          final Bytes key,\n+                          final byte[] value,\n+                          final long timestamp) {\n+        throwUnsupportedOperationExceptionIfStandby(\"logChange\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bc716ea7cd64434d6b2108b50f39891469ce93"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzEyMDg4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzo0OTo0OFrOGW4C3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxNDoxMlrOGW7vwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0MDA5NA==", "bodyText": "prop: I think we should move those to InternalProcessorContext. IMO, it would be cleaner for a mock not to have a direct dependency to the class it mocks. The new consolidated mock for the internal processor context will not extend AbstractProcessorContext but only MockProcessorContext. Thus, the common ancestor will be InternalProcessorContext.\nSorry for bothering you because of those constants after that @vvcephei has already bothered you. :-)", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426640094", "createdAt": "2020-05-18T13:49:48Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -52,6 +54,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import static org.apache.kafka.streams.processor.internals.ProcessorContextImpl.KEY_SERIALIZER;\n+import static org.apache.kafka.streams.processor.internals.ProcessorContextImpl.VALUE_SERIALIZER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94bc716ea7cd64434d6b2108b50f39891469ce93"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMDczNw==", "bodyText": "Ack", "url": "https://github.com/apache/kafka/pull/8669#discussion_r426700737", "createdAt": "2020-05-18T15:14:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -52,6 +54,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import static org.apache.kafka.streams.processor.internals.ProcessorContextImpl.KEY_SERIALIZER;\n+import static org.apache.kafka.streams.processor.internals.ProcessorContextImpl.VALUE_SERIALIZER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0MDA5NA=="}, "originalCommit": {"oid": "94bc716ea7cd64434d6b2108b50f39891469ce93"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2613, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}