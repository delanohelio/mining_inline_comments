{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjMzNDQ4", "number": 8767, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjowOTozNVrOEBMN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoxMTo0M1rOEBMOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njg0MjIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjowOTozNVrOGc52dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjozNDowOFrOGc5-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0MA==", "bodyText": "Nit: no need for braces.", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961140", "createdAt": "2020-05-31T16:09:35Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -786,7 +786,9 @@ class GroupMetadataManager(brokerId: Int,\n       group.removeExpiredOffsets(currentTimestamp, config.offsetsRetentionMs)\n     })\n     offsetExpiredSensor.record(numOffsetsRemoved)\n-    info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    if (numOffsetsRemoved > 0) {\n+      info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MzE1OA==", "bodyText": "done", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432963158", "createdAt": "2020-05-31T16:34:08Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -786,7 +786,9 @@ class GroupMetadataManager(brokerId: Int,\n       group.removeExpiredOffsets(currentTimestamp, config.offsetsRetentionMs)\n     })\n     offsetExpiredSensor.record(numOffsetsRemoved)\n-    info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    if (numOffsetsRemoved > 0) {\n+      info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0MA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njg0MjI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjowOTo0MVrOGc52fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjowOTo0MVrOGc52fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0OQ==", "bodyText": "create another GroupMetadataManager to override the methods we want to verify", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961149", "createdAt": "2020-05-31T16:09:41Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -85,21 +82,47 @@ class GroupMetadataManagerTest {\n       offsetsTopicCompressionCodec = config.offsetsTopicCompressionCodec,\n       offsetCommitTimeoutMs = config.offsetCommitTimeoutMs,\n       offsetCommitRequiredAcks = config.offsetCommitRequiredAcks)\n+  }\n \n-    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n-\n+  private[this] def mockKafkaZkClient: KafkaZkClient = {\n     // make two partitions of the group topic to make sure some partitions are not owned by the coordinator\n-    zkClient = EasyMock.createNiceMock(classOf[KafkaZkClient])\n+    val zkClient: KafkaZkClient = EasyMock.createNiceMock(classOf[KafkaZkClient])\n     EasyMock.expect(zkClient.getTopicPartitionCount(Topic.GROUP_METADATA_TOPIC_NAME)).andReturn(Some(2))\n     EasyMock.replay(zkClient)\n+    zkClient\n+  }\n \n+  @Before\n+  def setUp(): Unit = {\n+    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n     metrics = new kMetrics()\n     time = new MockTime\n     replicaManager = EasyMock.createNiceMock(classOf[ReplicaManager])\n-    groupMetadataManager = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager, zkClient, time, metrics)\n+    groupMetadataManager = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager,\n+      mockKafkaZkClient, time, metrics)\n     partition = EasyMock.niceMock(classOf[Partition])\n   }\n \n+  @Test\n+  def testLogInfoFromCleanupGroupMetadata(): Unit = {\n+    var expiredOffsets: Int = 0\n+    var infoCount = 0\n+    val gmm = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager, mockKafkaZkClient, time, metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njg0MzkyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoxMTo0M1rOGc53Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjozNDoxMlrOGc5-XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTM1OQ==", "bodyText": "Nit: we don't use private[this] for tests. It's mostly a micro-optimization is not particularly useful for tests (private provides good enough semantics).", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961359", "createdAt": "2020-05-31T16:11:43Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -85,21 +82,47 @@ class GroupMetadataManagerTest {\n       offsetsTopicCompressionCodec = config.offsetsTopicCompressionCodec,\n       offsetCommitTimeoutMs = config.offsetCommitTimeoutMs,\n       offsetCommitRequiredAcks = config.offsetCommitRequiredAcks)\n+  }\n \n-    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n-\n+  private[this] def mockKafkaZkClient: KafkaZkClient = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MzE2NA==", "bodyText": "done", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432963164", "createdAt": "2020-05-31T16:34:12Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -85,21 +82,47 @@ class GroupMetadataManagerTest {\n       offsetsTopicCompressionCodec = config.offsetsTopicCompressionCodec,\n       offsetCommitTimeoutMs = config.offsetCommitTimeoutMs,\n       offsetCommitRequiredAcks = config.offsetCommitRequiredAcks)\n+  }\n \n-    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n-\n+  private[this] def mockKafkaZkClient: KafkaZkClient = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTM1OQ=="}, "originalCommit": null, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2475, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}