{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODY0NTUx", "number": 9663, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOToxOVrOE-_CNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOToxOVrOE-_CNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc5OTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Partition.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOToyMFrOH8beWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOToyMFrOH8beWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNjc0NQ==", "bodyText": "Could we rewrite it by currying?\nBefore\n    val callbackPartial = handleAlterIsrResponse(proposedIsrState, _ : Either[Errors, LeaderAndIsr])\n\n    if (!alterIsrManager.enqueue(AlterIsrItem(topicPartition, newLeaderAndIsr, callbackPartial))) {\n      throw new IllegalStateException(s\"Failed to enqueue `AlterIsr` request with state \" +\n        s\"$newLeaderAndIsr for partition $topicPartition\")\n    }\nAfter\n    if (!alterIsrManager.enqueue(AlterIsrItem(topicPartition, newLeaderAndIsr, handleAlterIsrResponse(proposedIsrState)))) {\n      throw new IllegalStateException(s\"Failed to enqueue `AlterIsr` request with state \" +\n        s\"$newLeaderAndIsr for partition $topicPartition\")\n    }", "url": "https://github.com/apache/kafka/pull/9663#discussion_r533126745", "createdAt": "2020-12-01T07:39:20Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1372,23 +1390,27 @@ class Partition(val topicPartition: TopicPartition,\n    * Since our error was non-retryable we are okay staying in this state until we see new metadata from UpdateMetadata\n    * or LeaderAndIsr\n    */\n-  private def handleAlterIsrResponse(proposedIsr: Set[Int], result: Either[Errors, LeaderAndIsr]): Unit = {\n+  private def handleAlterIsrResponse(proposedIsrState: IsrState, result: Either[Errors, LeaderAndIsr]): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "facb3f8e9646c60d011ff3f0e9ab546346be8fba"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3632, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}