{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDg3NzY0", "number": 9174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1Mjo1OVrOEX57QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1NToxM1rOEX59sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTAxNzYxOnYy", "diffSide": "RIGHT", "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1Mjo1OVrOG_892A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1Mjo1OVrOG_892A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMjM0NA==", "bodyText": "nit: could avoid the last space after is correct.", "url": "https://github.com/apache/kafka/pull/9174#discussion_r469712344", "createdAt": "2020-08-13T05:52:59Z", "author": {"login": "abbccdda"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {\n+            log.warn(\"Unrecognized topic: {}, this can occur if dynamic routing is used and no output has been \"\n+                         + \"sent to this topic yet. If not using a TopicNameExtractor, check that the output topic \"\n+                         + \"is correct. \", topicName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTAyMzg3OnYy", "diffSide": "RIGHT", "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo1NToxM1rOG_9BFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozMjoxNlrOHCXayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMzE3NQ==", "bodyText": "Seems good enough as a bug fix, but I was wondering whether we could detect the dynamic topic is configured or not to make sure we are not actually allowing some other bugs to catch in TTD", "url": "https://github.com/apache/kafka/pull/9174#discussion_r469713175", "createdAt": "2020-08-13T05:55:13Z", "author": {"login": "abbccdda"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzNDEzNg==", "bodyText": "What do you mean by \"configured\"? My understanding is that topics don't actually even \"exist\" in the TTD, we just use a MockProducer and grab output records from its history to enqueue in the outputRecordsByTopic map. So if an output topic hasn't been sent to yet, there's no way to say whether it does or does not exist", "url": "https://github.com/apache/kafka/pull/9174#discussion_r470134136", "createdAt": "2020-08-13T17:44:15Z", "author": {"login": "ableegoldman"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMzE3NQ=="}, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MzU3OA==", "bodyText": "We could detect if the processorTopology contains only StaticTopicNameExtractors and still throw in that case if the topic name isn't in the topology.", "url": "https://github.com/apache/kafka/pull/9174#discussion_r470193578", "createdAt": "2020-08-13T19:23:33Z", "author": {"login": "vvcephei"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMzE3NQ=="}, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3NDI5MQ==", "bodyText": "Yeah, that's a good point. Took a quick look at this and personally I feel it's not worth it to add even more things for the internal topology to track. But it wouldn't really add any complexity so if this is a big concern I can go ahead and add in a flag to watch out for any non-static TopicNameExtractors", "url": "https://github.com/apache/kafka/pull/9174#discussion_r470374291", "createdAt": "2020-08-14T02:21:46Z", "author": {"login": "ableegoldman"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMzE3NQ=="}, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0Mjg5MA==", "bodyText": "Ok, let's just keep it in our back pocket for now.", "url": "https://github.com/apache/kafka/pull/9174#discussion_r472242890", "createdAt": "2020-08-18T14:32:16Z", "author": {"login": "vvcephei"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -805,10 +805,10 @@ public void advanceWallClockTime(final Duration advance) {\n \n     private Queue<ProducerRecord<byte[], byte[]>> getRecordsQueue(final String topicName) {\n         final Queue<ProducerRecord<byte[], byte[]>> outputRecords = outputRecordsByTopic.get(topicName);\n-        if (outputRecords == null) {\n-            if (!processorTopology.sinkTopics().contains(topicName)) {\n-                throw new IllegalArgumentException(\"Unknown topic: \" + topicName);\n-            }\n+        if (outputRecords == null && !processorTopology.sinkTopics().contains(topicName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcxMzE3NQ=="}, "originalCommit": {"oid": "c83ca9516943de7c622c4816df8d64410cd05adf"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1913, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}