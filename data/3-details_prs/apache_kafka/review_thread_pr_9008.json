{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTY2MTY0", "number": 9008, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyOToyNFrOENa5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MjoxNVrOESlWsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTA3NTczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/FetchRequest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyOToyNFrOGwGJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMToyOToyNFrOGwGJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NTU0NQ==", "bodyText": "Can we revert some of these renamings? We intentionally changed them in #8802.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453085545", "createdAt": "2020-07-10T21:29:24Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/FetchRequest.json", "diffHunk": "@@ -49,41 +49,41 @@\n   \"fields\": [\n     { \"name\": \"ReplicaId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The broker ID of the follower, of -1 if this request is from a consumer.\" },\n-    { \"name\": \"MaxWaitMs\", \"type\": \"int32\", \"versions\": \"0+\",\n+    { \"name\": \"MaxWaitTime\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTA4MzQ0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTozMjo0NVrOGwGOCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTozMjo0NVrOGwGOCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4NjcyOA==", "bodyText": "nit: I guess we didn't need this?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453086728", "createdAt": "2020-07-10T21:32:45Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +368,164 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.fetchResponseData = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.fetchResponseData = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return fetchResponseData.toStruct(version);\n     }\n \n     @Override\n     protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        RecordsWriter writer = new RecordsWriter(dest, sends::add);\n+        ObjectSerializationCache cache = new ObjectSerializationCache();\n+        fetchResponseData.size(cache, apiVersion);\n+        fetchResponseData.write(writer, cache, apiVersion);\n+        writer.flush();\n+\n+        // Compute the total size of all the Sends and write it out along with the header in the first Send\n+        ResponseHeaderData responseHeaderData = responseHeader.data();\n+\n+        //Struct responseHeaderStruct = responseHeader.toStruct();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTA5MjEyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTozNjozOFrOGwGTQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTozNjozOFrOGwGTQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4ODA2Nw==", "bodyText": "nit: in all of the other classes, we just use the name data. Can we do the same here?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453088067", "createdAt": "2020-07-10T21:36:38Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -218,23 +220,19 @@\n             SESSION_ID,\n             new Field(RESPONSES_KEY_NAME, new ArrayOf(FETCH_RESPONSE_TOPIC_V6)));\n \n-\n-    public static Schema[] schemaVersions() {\n-        return new Schema[] {FETCH_RESPONSE_V0, FETCH_RESPONSE_V1, FETCH_RESPONSE_V2,\n-            FETCH_RESPONSE_V3, FETCH_RESPONSE_V4, FETCH_RESPONSE_V5, FETCH_RESPONSE_V6,\n-            FETCH_RESPONSE_V7, FETCH_RESPONSE_V8, FETCH_RESPONSE_V9, FETCH_RESPONSE_V10,\n-            FETCH_RESPONSE_V11};\n-    }\n-\n     public static final long INVALID_HIGHWATERMARK = -1L;\n     public static final long INVALID_LAST_STABLE_OFFSET = -1L;\n     public static final long INVALID_LOG_START_OFFSET = -1L;\n     public static final int INVALID_PREFERRED_REPLICA_ID = -1;\n \n-    private final int throttleTimeMs;\n-    private final Errors error;\n-    private final int sessionId;\n-    private final LinkedHashMap<TopicPartition, PartitionData<T>> responseData;\n+    private final FetchResponseData fetchResponseData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTEzMjkwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1NToyMVrOGwGrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1NToyMVrOGwGrsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDMyMw==", "bodyText": "We can get rid of all the stuff above too, right?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453094323", "createdAt": "2020-07-10T21:55:21Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -218,23 +220,19 @@\n             SESSION_ID,\n             new Field(RESPONSES_KEY_NAME, new ArrayOf(FETCH_RESPONSE_TOPIC_V6)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTE0MjE5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1OTo0NVrOGwGxMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1OTo0NVrOGwGxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NTczMQ==", "bodyText": "Probably better to save for a follow-up, but potentially we can get rid of this conversion by using FetchablePartitionResponse directly in the broker.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453095731", "createdAt": "2020-07-10T21:59:45Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +368,164 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.fetchResponseData = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTE1NTE0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMzowMlrOGwG4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjowMzowMlrOGwG4PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NzUzMw==", "bodyText": "Similarly, we can get rid of all this.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453097533", "createdAt": "2020-07-10T22:03:02Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -209,30 +210,21 @@\n             FORGOTTEN_TOPIC_DATA_V7,\n             RACK_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDM1MTAxOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0Njo0OVrOGwzJOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNToyNTo0OVrOGzFykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjc3Ng==", "bodyText": "I don't think FileRecords and MemoryRecords instances can be compared directly, if that's what the question is about.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453822776", "createdAt": "2020-07-13T17:46:49Z", "author": {"login": "hachikuji"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2078,6 +2103,11 @@ private void generateFieldEquals(FieldSpec field) {\n                 buffer.printf(\"if (!Arrays.equals(this.%s, other.%s)) return false;%n\",\n                     field.camelCaseName(), field.camelCaseName());\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO is this valid for record instances?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTQxOQ==", "bodyText": "No I don't think they are designed to be compared. My main question was whether we can compare the same type (MemoryRecords to MemoryRecords). I think it should work in the case of Objects.equals since it first checks if the instances are the same. I don't think we have any use cases where we have equivalent instances of records that are actual separate objects.\nI have a similar question about hashCode down below. Records doesn't implement either of these, but we have to include them for all fields in the generated message classes for completeness. I think it's probably fine.\n@cmccabe, any insight here?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453849419", "createdAt": "2020-07-13T18:32:21Z", "author": {"login": "mumrah"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2078,6 +2103,11 @@ private void generateFieldEquals(FieldSpec field) {\n                 buffer.printf(\"if (!Arrays.equals(this.%s, other.%s)) return false;%n\",\n                     field.camelCaseName(), field.camelCaseName());\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO is this valid for record instances?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjc3Ng=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzMyMQ==", "bodyText": "The hashCode of MemoryRecords takes into account the buffer position, so it's kind of useless. FileRecords doesn't even define it. We should consider defining the hashCode and equals of Records to be identity based.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456197321", "createdAt": "2020-07-17T03:25:36Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2078,6 +2103,11 @@ private void generateFieldEquals(FieldSpec field) {\n                 buffer.printf(\"if (!Arrays.equals(this.%s, other.%s)) return false;%n\",\n                     field.camelCaseName(), field.camelCaseName());\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO is this valid for record instances?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjc3Ng=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNDAyOA==", "bodyText": "@mumrah : equality for the generated messages should mean bytewise equality.  So if two FetchResponseData instances contain the same data, they should be equal, even if one is using MemoryRecords and the other is using FileRecords.  Same for hashCode, of course.\nIf it's too much trouble to change the Records class, you can just write a static utility method in MessageUtils and invoke it from the generated classes.  I expect that we won't be doing this kind of comparison except in tests, so you don't need to optimize the method too much.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456224028", "createdAt": "2020-07-17T05:20:48Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2078,6 +2103,11 @@ private void generateFieldEquals(FieldSpec field) {\n                 buffer.printf(\"if (!Arrays.equals(this.%s, other.%s)) return false;%n\",\n                     field.camelCaseName(), field.camelCaseName());\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO is this valid for record instances?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjc3Ng=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIyNTQyNw==", "bodyText": "That would mean loading data from disk to compute equals and hashCode for FileRecords. That's pretty unusual for such methods.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456225427", "createdAt": "2020-07-17T05:25:49Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2078,6 +2103,11 @@ private void generateFieldEquals(FieldSpec field) {\n                 buffer.printf(\"if (!Arrays.equals(this.%s, other.%s)) return false;%n\",\n                     field.camelCaseName(), field.camelCaseName());\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO is this valid for record instances?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjc3Ng=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDM5OTI5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo1OTozMFrOGwzmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo1OTozMFrOGwzmrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMDMxNg==", "bodyText": "Pretty nice if this is all the manual code we need. If we wanted to go a little further, we could push toSend into the generated class as well. That will be necessary if we ever want to get of the current AbstractRequest and AbstractResponse types and replace them with the generated data classes (which was always the plan). However, I think this could be left for follow-up work.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453830316", "createdAt": "2020-07-13T17:59:30Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +368,164 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.fetchResponseData = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.fetchResponseData = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return fetchResponseData.toStruct(version);\n     }\n \n     @Override\n     protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        RecordsWriter writer = new RecordsWriter(dest, sends::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQxNDY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowMzozNlrOGwzwAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo0NjoxNVrOGxmhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjcwNw==", "bodyText": "Is it worth extending ByteBufferAccessor or not?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453832707", "createdAt": "2020-07-13T18:03:36Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Implementation of Readable which reads from a byte buffer and can read records as {@link MemoryRecords}\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsReader implements Readable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0Njc5OQ==", "bodyText": "Are you suggesting a combined records reader+writer? ByteBufferAccessor is both Readable and Writable", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453846799", "createdAt": "2020-07-13T18:28:13Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Implementation of Readable which reads from a byte buffer and can read records as {@link MemoryRecords}\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsReader implements Readable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjcwNw=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2NDU0NQ==", "bodyText": "That's fair. I'm ok to leave it as is.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r454664545", "createdAt": "2020-07-14T21:46:15Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Implementation of Readable which reads from a byte buffer and can read records as {@link MemoryRecords}\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsReader implements Readable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjcwNw=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU2NDIyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/FetchResponse.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0NDozMlrOGw1Mog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzozMzoyNVrOGzTLeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NjQxOA==", "bodyText": "s/Responses/TopicResponses?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r453856418", "createdAt": "2020-07-13T18:44:32Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/resources/common/message/FetchResponse.json", "diffHunk": "@@ -47,33 +47,35 @@\n       \"about\": \"The top level response error code.\" },\n     { \"name\": \"SessionId\", \"type\": \"int32\", \"versions\": \"7+\", \"default\": \"0\", \"ignorable\": false,\n       \"about\": \"The fetch session ID, or 0 if this is not part of a fetch session.\" },\n-    { \"name\": \"Topics\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n+    { \"name\": \"Responses\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NDc5NA==", "bodyText": "I was trying to keep the field names aligned with what was defined in the manual schemas. So, not sure if we should change any other field names in this PR", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456444794", "createdAt": "2020-07-17T13:33:25Z", "author": {"login": "mumrah"}, "path": "clients/src/main/resources/common/message/FetchResponse.json", "diffHunk": "@@ -47,33 +47,35 @@\n       \"about\": \"The top level response error code.\" },\n     { \"name\": \"SessionId\", \"type\": \"int32\", \"versions\": \"7+\", \"default\": \"0\", \"ignorable\": false,\n       \"about\": \"The fetch session ID, or 0 if this is not part of a fetch session.\" },\n-    { \"name\": \"Topics\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n+    { \"name\": \"Responses\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NjQxOA=="}, "originalCommit": {"oid": "04538af26ab9f036d547f4b6f34bdffb720e8007"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzE2MDQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowMjo1OFrOGxy3FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo1ODoxMlrOG3jr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA==", "bodyText": "@mumrah Have we considered dropping the PartitionData class entirely in favour of using FetchRequestData .FetchPartition directly in the broker? The main difference is that FetchPartition does not have an Optional for the leader epoch but returns the default value (-1) instead.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r454866708", "createdAt": "2020-07-15T08:02:58Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5NDQ0OA==", "bodyText": "Yes, I think it's a good idea. However, it would expand the scope of this change quite a bit. I'm working on some micro benchmarks now, and if we don't have any apparent regressions then I'll save this for a follow-on PR.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455094448", "createdAt": "2020-07-15T14:27:20Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA=="}, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNzA0Mw==", "bodyText": "As an aside, it would be awesome to add Optional support to the generated classes. We have had so many bugs which were caused by sentinel values sneaking into unexpected places.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455407043", "createdAt": "2020-07-15T22:44:00Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA=="}, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzNTM4MA==", "bodyText": "Let's open a jira for getting rid of the toPartitionDataMap if we don't address it in this PR. It's a pretty large part of the cost here and there are only a few places we would have to deal with it. I think we should fix it sooner rather than later too.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455835380", "createdAt": "2020-07-16T14:35:16Z", "author": {"login": "lbradstreet"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA=="}, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NzU1NA==", "bodyText": "Yeah, Optional support would be awesome. I was actually thinking how to do it. I may give it a shot during the weekend ;)", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456447554", "createdAt": "2020-07-17T13:37:59Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA=="}, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwOTUyOQ==", "bodyText": "@hachikuji @mumrah @cmccabe I have put together a prototype to support java.util.Optional in the auto-generated classes. It a good draft at the moment but it is a good basis for discussions: #9085", "url": "https://github.com/apache/kafka/pull/9008#discussion_r460909529", "createdAt": "2020-07-27T13:58:12Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+       Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2NjcwOA=="}, "originalCommit": {"oid": "3808a96aa8ef182c5cabebfba6debe5a303c2b5e"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDAwMzE4OnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMDoyMDozNlrOGyOacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNToyODo0M1rOGyao4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODEyOQ==", "bodyText": "Can we please have benchmarks for both forConsumer and forReplica fetch requests?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455318129", "createdAt": "2020-07-15T20:20:36Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.jmh.common;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.protocol.ApiKeys;\n+import org.apache.kafka.common.requests.ByteBufferChannel;\n+import org.apache.kafka.common.requests.FetchRequest;\n+import org.apache.kafka.common.requests.RequestHeader;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 15)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class FetchRequestBenchmark {\n+    @Param({\"1000\"})\n+    private int topicCount;\n+\n+    @Param({\"20\"})\n+    private int partitionCount;\n+\n+    Map<TopicPartition, FetchRequest.PartitionData> fetchData;\n+\n+    RequestHeader header;\n+\n+    FetchRequest request;\n+\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        this.fetchData = new HashMap<>();\n+        for (int topicIdx = 0; topicIdx < topicCount; topicIdx++) {\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                FetchRequest.PartitionData partitionData = new FetchRequest.PartitionData(\n+                    0, 0, 4096, Optional.empty());\n+                fetchData.put(new TopicPartition(String.format(\"topic-%04d\", topicIdx), partitionId), partitionData);\n+            }\n+        }\n+\n+        this.header = new RequestHeader(ApiKeys.FETCH, ApiKeys.FETCH.latestVersion(), \"jmh-benchmark\", 100);\n+        this.request = FetchRequest.Builder.forConsumer(0, 0, fetchData).build(ApiKeys.FETCH.latestVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdadc5ab419806b6165cc2ce90a23e36117d007"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0MjUzNQ==", "bodyText": "Can you also try rerunning the benchmark with random topic names, e.g. UUID.randomUUID().toString() and compare it to the existing topic names? I think our hashCode implementation sucks and we are seeing a lot of collisions.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455342535", "createdAt": "2020-07-15T21:03:17Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.jmh.common;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.protocol.ApiKeys;\n+import org.apache.kafka.common.requests.ByteBufferChannel;\n+import org.apache.kafka.common.requests.FetchRequest;\n+import org.apache.kafka.common.requests.RequestHeader;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 15)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class FetchRequestBenchmark {\n+    @Param({\"1000\"})\n+    private int topicCount;\n+\n+    @Param({\"20\"})\n+    private int partitionCount;\n+\n+    Map<TopicPartition, FetchRequest.PartitionData> fetchData;\n+\n+    RequestHeader header;\n+\n+    FetchRequest request;\n+\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        this.fetchData = new HashMap<>();\n+        for (int topicIdx = 0; topicIdx < topicCount; topicIdx++) {\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                FetchRequest.PartitionData partitionData = new FetchRequest.PartitionData(\n+                    0, 0, 4096, Optional.empty());\n+                fetchData.put(new TopicPartition(String.format(\"topic-%04d\", topicIdx), partitionId), partitionData);\n+            }\n+        }\n+\n+        this.header = new RequestHeader(ApiKeys.FETCH, ApiKeys.FETCH.latestVersion(), \"jmh-benchmark\", 100);\n+        this.request = FetchRequest.Builder.forConsumer(0, 0, fetchData).build(ApiKeys.FETCH.latestVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODEyOQ=="}, "originalCommit": {"oid": "efdadc5ab419806b6165cc2ce90a23e36117d007"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxODQzNA==", "bodyText": "Changing our hashCode method massively improves the benchmark times so I think the current benchmark results aren't really representative.\n--- a/clients/src/main/java/org/apache/kafka/common/TopicPartition.java\n+++ b/clients/src/main/java/org/apache/kafka/common/TopicPartition.java\n@@ -46,10 +46,7 @@ public final class TopicPartition implements Serializable {\n     public int hashCode() {\n         if (hash != 0)\n             return hash;\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + partition;\n-        result = prime * result + Objects.hashCode(topic);\n+        int result = Objects.hash(topic, partition);\n         this.hash = result;\n         return result;\n     }\n\nEdit: it looks like the main difference here is ordering by topic and then partition which seems to avoid the collisions for this reasonably pathological case. Maybe we can just change the test case.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455518434", "createdAt": "2020-07-16T05:28:43Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.jmh.common;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.protocol.ApiKeys;\n+import org.apache.kafka.common.requests.ByteBufferChannel;\n+import org.apache.kafka.common.requests.FetchRequest;\n+import org.apache.kafka.common.requests.RequestHeader;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 15)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class FetchRequestBenchmark {\n+    @Param({\"1000\"})\n+    private int topicCount;\n+\n+    @Param({\"20\"})\n+    private int partitionCount;\n+\n+    Map<TopicPartition, FetchRequest.PartitionData> fetchData;\n+\n+    RequestHeader header;\n+\n+    FetchRequest request;\n+\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        this.fetchData = new HashMap<>();\n+        for (int topicIdx = 0; topicIdx < topicCount; topicIdx++) {\n+            for (int partitionId = 0; partitionId < partitionCount; partitionId++) {\n+                FetchRequest.PartitionData partitionData = new FetchRequest.PartitionData(\n+                    0, 0, 4096, Optional.empty());\n+                fetchData.put(new TopicPartition(String.format(\"topic-%04d\", topicIdx), partitionId), partitionData);\n+            }\n+        }\n+\n+        this.header = new RequestHeader(ApiKeys.FETCH, ApiKeys.FETCH.latestVersion(), \"jmh-benchmark\", 100);\n+        this.request = FetchRequest.Builder.forConsumer(0, 0, fetchData).build(ApiKeys.FETCH.latestVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxODEyOQ=="}, "originalCommit": {"oid": "efdadc5ab419806b6165cc2ce90a23e36117d007"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDI3NDEwOnYy", "diffSide": "RIGHT", "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyNjo0MFrOGyRFPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyNjo0MFrOGyRFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MTg1NQ==", "bodyText": "Let's add a smaller topic or partition count param benchmark. 20,000 partitions in a fetch request is larger than we would normally see :)", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455361855", "createdAt": "2020-07-15T21:26:40Z", "author": {"login": "lbradstreet"}, "path": "jmh-benchmarks/src/main/java/org/apache/kafka/jmh/common/FetchRequestBenchmark.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.jmh.common;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.protocol.ApiKeys;\n+import org.apache.kafka.common.requests.ByteBufferChannel;\n+import org.apache.kafka.common.requests.FetchRequest;\n+import org.apache.kafka.common.requests.RequestHeader;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 15)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class FetchRequestBenchmark {\n+    @Param({\"1000\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdadc5ab419806b6165cc2ce90a23e36117d007"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzI3NjcyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyNzo1MVrOGytlmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyNzo1MVrOGytlmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyODg5MA==", "bodyText": "Typo \"Forgotton\"", "url": "https://github.com/apache/kafka/pull/9008#discussion_r455828890", "createdAt": "2020-07-16T14:27:51Z", "author": {"login": "lbradstreet"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -273,6 +99,28 @@ public boolean equals(Object o) {\n         }\n     }\n \n+    private Map<TopicPartition, PartitionData> toPartitionDataMap(List<FetchRequestData.FetchTopic> fetchableTopics) {\n+        Map<TopicPartition, PartitionData> result = new LinkedHashMap<>();\n+        fetchableTopics.forEach(fetchTopic -> fetchTopic.partitions().forEach(fetchPartition -> {\n+            Optional<Integer> leaderEpoch = Optional.of(fetchPartition.currentLeaderEpoch())\n+                .filter(epoch -> epoch != RecordBatch.NO_PARTITION_LEADER_EPOCH);\n+            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n+                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n+                    fetchPartition.partitionMaxBytes(), leaderEpoch));\n+        }));\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    private List<TopicPartition> toForgottonTopicList(List<FetchRequestData.ForgottenTopic> forgottenTopics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdadc5ab419806b6165cc2ce90a23e36117d007"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDcxNDU3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNzo1OFrOGy7j-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNzo1OFrOGy7j-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1Nzg0OQ==", "bodyText": "nit: could probably change this to use ifPresent", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456057849", "createdAt": "2020-07-16T20:27:58Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1249,26 +1249,26 @@ private CompletedFetch initializeCompletedFetch(CompletedFetch nextCompletedFetc\n                     }\n                 }\n \n-                if (partition.highWatermark >= 0) {\n-                    log.trace(\"Updating high watermark for partition {} to {}\", tp, partition.highWatermark);\n-                    subscriptions.updateHighWatermark(tp, partition.highWatermark);\n+                if (partition.highWatermark() >= 0) {\n+                    log.trace(\"Updating high watermark for partition {} to {}\", tp, partition.highWatermark());\n+                    subscriptions.updateHighWatermark(tp, partition.highWatermark());\n                 }\n \n-                if (partition.logStartOffset >= 0) {\n-                    log.trace(\"Updating log start offset for partition {} to {}\", tp, partition.logStartOffset);\n-                    subscriptions.updateLogStartOffset(tp, partition.logStartOffset);\n+                if (partition.logStartOffset() >= 0) {\n+                    log.trace(\"Updating log start offset for partition {} to {}\", tp, partition.logStartOffset());\n+                    subscriptions.updateLogStartOffset(tp, partition.logStartOffset());\n                 }\n \n-                if (partition.lastStableOffset >= 0) {\n-                    log.trace(\"Updating last stable offset for partition {} to {}\", tp, partition.lastStableOffset);\n-                    subscriptions.updateLastStableOffset(tp, partition.lastStableOffset);\n+                if (partition.lastStableOffset() >= 0) {\n+                    log.trace(\"Updating last stable offset for partition {} to {}\", tp, partition.lastStableOffset());\n+                    subscriptions.updateLastStableOffset(tp, partition.lastStableOffset());\n                 }\n \n-                if (partition.preferredReadReplica.isPresent()) {\n-                    subscriptions.updatePreferredReadReplica(completedFetch.partition, partition.preferredReadReplica.get(), () -> {\n+                if (partition.preferredReadReplica().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "155621b97fc1c1c32ec4998165fcaf1858bd1cd4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDgzNTc0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequestResponse.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTowNDoxNVrOGy8ufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyMTowOVrOG31ozQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjkyNw==", "bodyText": "Is there an advantage to pulling this up? Seems like we still need to update a bunch more classes. Until we have all the protocols converted, it might be safer to find another approach.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456076927", "createdAt": "2020-07-16T21:04:15Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequestResponse.java", "diffHunk": "@@ -16,5 +16,16 @@\n  */\n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.protocol.ApiMessage;\n+\n public interface AbstractRequestResponse {\n+    /**\n+     * Return the auto-generated `Message` instance if this request/response relies on one for\n+     * serialization/deserialization. If this class has not yet been updated to rely on the auto-generated protocol\n+     * classes, return `null`.\n+     * @return\n+     */\n+    default ApiMessage data() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MTI0MQ==", "bodyText": "I have a PR that does need. I really need to get that over the line.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456091241", "createdAt": "2020-07-16T21:34:56Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequestResponse.java", "diffHunk": "@@ -16,5 +16,16 @@\n  */\n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.protocol.ApiMessage;\n+\n public interface AbstractRequestResponse {\n+    /**\n+     * Return the auto-generated `Message` instance if this request/response relies on one for\n+     * serialization/deserialization. If this class has not yet been updated to rely on the auto-generated protocol\n+     * classes, return `null`.\n+     * @return\n+     */\n+    default ApiMessage data() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjkyNw=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5MjAzNw==", "bodyText": "Perhaps instead we could add this to a mixin type. Then if we find cases where getting accessing to the ApiMessage generally would be useful, we could just use instanceof checks. These would ultimately go away after the conversions are finished.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456092037", "createdAt": "2020-07-16T21:36:45Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequestResponse.java", "diffHunk": "@@ -16,5 +16,16 @@\n  */\n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.protocol.ApiMessage;\n+\n public interface AbstractRequestResponse {\n+    /**\n+     * Return the auto-generated `Message` instance if this request/response relies on one for\n+     * serialization/deserialization. If this class has not yet been updated to rely on the auto-generated protocol\n+     * classes, return `null`.\n+     * @return\n+     */\n+    default ApiMessage data() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjkyNw=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzY2MQ==", "bodyText": "@mumrah Do we need this for this PR or can we leave this for #7409?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461203661", "createdAt": "2020-07-27T22:21:09Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequestResponse.java", "diffHunk": "@@ -16,5 +16,16 @@\n  */\n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.protocol.ApiMessage;\n+\n public interface AbstractRequestResponse {\n+    /**\n+     * Return the auto-generated `Message` instance if this request/response relies on one for\n+     * serialization/deserialization. If this class has not yet been updated to rely on the auto-generated protocol\n+     * classes, return `null`.\n+     * @return\n+     */\n+    default ApiMessage data() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3NjkyNw=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDg2NDMyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToxMzozOFrOGy8_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozMTowM1rOGzgVmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4MTM3NA==", "bodyText": "Are we overriding this so that we save the conversion to Struct? As far as I can tell, there's nothing specific to FetchRequest below. I wonder if we can move this implementation to AbstractRequest.serialize so that we save the conversion to Struct for all APIs that have been converted?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456081374", "createdAt": "2020-07-16T21:13:38Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -492,74 +327,51 @@ public int maxBytes() {\n     }\n \n     public boolean isFromFollower() {\n-        return replicaId >= 0;\n+        return replicaId() >= 0;\n     }\n \n     public IsolationLevel isolationLevel() {\n-        return isolationLevel;\n+        return IsolationLevel.forId(data.isolationLevel());\n     }\n \n     public FetchMetadata metadata() {\n         return metadata;\n     }\n \n     public String rackId() {\n-        return rackId;\n+        return data.rackId();\n     }\n \n     public static FetchRequest parse(ByteBuffer buffer, short version) {\n-        return new FetchRequest(ApiKeys.FETCH.parseRequest(version, buffer), version);\n+        ByteBufferAccessor accessor = new ByteBufferAccessor(buffer);\n+        FetchRequestData message = new FetchRequestData();\n+        message.read(accessor, version);\n+        return new FetchRequest(message, version);\n+    }\n+\n+    @Override\n+    public ByteBuffer serialize(RequestHeader header) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0OTAzNQ==", "bodyText": "Indeed this is generic serialization code for the message classes. If we go with a mixin interface to indicate a class has been converted over to generated messages, we could also push this up to AbstractRequest. However, this might be better saved for a follow-on since we'll probably want to pick up additional changes from @ijuma's PR. Thoughts?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456449035", "createdAt": "2020-07-17T13:40:28Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -492,74 +327,51 @@ public int maxBytes() {\n     }\n \n     public boolean isFromFollower() {\n-        return replicaId >= 0;\n+        return replicaId() >= 0;\n     }\n \n     public IsolationLevel isolationLevel() {\n-        return isolationLevel;\n+        return IsolationLevel.forId(data.isolationLevel());\n     }\n \n     public FetchMetadata metadata() {\n         return metadata;\n     }\n \n     public String rackId() {\n-        return rackId;\n+        return data.rackId();\n     }\n \n     public static FetchRequest parse(ByteBuffer buffer, short version) {\n-        return new FetchRequest(ApiKeys.FETCH.parseRequest(version, buffer), version);\n+        ByteBufferAccessor accessor = new ByteBufferAccessor(buffer);\n+        FetchRequestData message = new FetchRequestData();\n+        message.read(accessor, version);\n+        return new FetchRequest(message, version);\n+    }\n+\n+    @Override\n+    public ByteBuffer serialize(RequestHeader header) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4MTM3NA=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDM3OQ==", "bodyText": "I'm ok saving this for #7409.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456660379", "createdAt": "2020-07-17T20:31:03Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -492,74 +327,51 @@ public int maxBytes() {\n     }\n \n     public boolean isFromFollower() {\n-        return replicaId >= 0;\n+        return replicaId() >= 0;\n     }\n \n     public IsolationLevel isolationLevel() {\n-        return isolationLevel;\n+        return IsolationLevel.forId(data.isolationLevel());\n     }\n \n     public FetchMetadata metadata() {\n         return metadata;\n     }\n \n     public String rackId() {\n-        return rackId;\n+        return data.rackId();\n     }\n \n     public static FetchRequest parse(ByteBuffer buffer, short version) {\n-        return new FetchRequest(ApiKeys.FETCH.parseRequest(version, buffer), version);\n+        ByteBufferAccessor accessor = new ByteBufferAccessor(buffer);\n+        FetchRequestData message = new FetchRequestData();\n+        message.read(accessor, version);\n+        return new FetchRequest(message, version);\n+    }\n+\n+    @Override\n+    public ByteBuffer serialize(RequestHeader header) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4MTM3NA=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDg4MjM2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToxOTo0MFrOGy9K-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0MjoxM1rOGzTgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NDIxNg==", "bodyText": "In the parsing logic, we still convert to struct first before calling AbstractRequest.parseRequest. I think we could bypass the Struct conversion by changing AbstractRequest.parseRequest to take the ByteBuffer instead of the Struct.\n    public static AbstractRequest parseRequest(ApiKeys apiKey, short apiVersion, ByteBuffer buffer) {\nThen in the fetch case, we could just call this method.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456084216", "createdAt": "2020-07-16T21:19:40Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -492,74 +327,51 @@ public int maxBytes() {\n     }\n \n     public boolean isFromFollower() {\n-        return replicaId >= 0;\n+        return replicaId() >= 0;\n     }\n \n     public IsolationLevel isolationLevel() {\n-        return isolationLevel;\n+        return IsolationLevel.forId(data.isolationLevel());\n     }\n \n     public FetchMetadata metadata() {\n         return metadata;\n     }\n \n     public String rackId() {\n-        return rackId;\n+        return data.rackId();\n     }\n \n     public static FetchRequest parse(ByteBuffer buffer, short version) {\n-        return new FetchRequest(ApiKeys.FETCH.parseRequest(version, buffer), version);\n+        ByteBufferAccessor accessor = new ByteBufferAccessor(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MDEwNw==", "bodyText": "I believe this is also addressed in @ijuma's PR.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456450107", "createdAt": "2020-07-17T13:42:13Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchRequest.java", "diffHunk": "@@ -492,74 +327,51 @@ public int maxBytes() {\n     }\n \n     public boolean isFromFollower() {\n-        return replicaId >= 0;\n+        return replicaId() >= 0;\n     }\n \n     public IsolationLevel isolationLevel() {\n-        return isolationLevel;\n+        return IsolationLevel.forId(data.isolationLevel());\n     }\n \n     public FetchMetadata metadata() {\n         return metadata;\n     }\n \n     public String rackId() {\n-        return rackId;\n+        return data.rackId();\n     }\n \n     public static FetchRequest parse(ByteBuffer buffer, short version) {\n-        return new FetchRequest(ApiKeys.FETCH.parseRequest(version, buffer), version);\n+        ByteBufferAccessor accessor = new ByteBufferAccessor(buffer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NDIxNg=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTYzNDg3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzoxOTo0NlrOGzD_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjoxMzowNVrOGzY9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NTkzNA==", "bodyText": "This seems pretty inefficient (creating a lambda for each byte we write). Are we sure about it?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456195934", "createdAt": "2020-07-17T03:19:46Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUzOTQ4OA==", "bodyText": "This would only get called when we're writing a int8 field I believe, but you're right these lambdas could create un-needed object allocations. I'll rewrite as simple try/catch statements", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456539488", "createdAt": "2020-07-17T16:13:05Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NTkzNA=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTYzNzcwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/Readable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzoyMToyOFrOGzEA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzoyMToyOFrOGzEA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NjMzMQ==", "bodyText": "Is this and the respective writeRecords in the base interface needed? It seems like they're only implemented in two specific cases. Could we not downcast for those cases?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456196331", "createdAt": "2020-07-17T03:21:28Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/Readable.java", "diffHunk": "@@ -35,6 +36,10 @@\n     int readUnsignedVarint();\n     ByteBuffer readByteBuffer(int length);\n \n+    default BaseRecords readRecords(int length) {\n+        throw new UnsupportedOperationException(\"Not implemented\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTY0NjQ5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzoyNjo1NVrOGzEF4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo1NzowMVrOG1JeVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ==", "bodyText": "This creates a copy of the underlying bytes, can we avoid it?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456197601", "createdAt": "2020-07-17T03:26:55Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxODUyOQ==", "bodyText": "Yea, it's possible, but rather complicated I think. We would need to manage our own byte array and grow it on-demand (like what happens in ByteArrayOutputStream). Then we could use ByteBuffer#slice to pass views of this array to the ByteBufferSend objects. I don't think this current approach is any worse than before in terms of array allocations, so maybe we could save this for a future optimization?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456518529", "createdAt": "2020-07-17T15:34:56Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MjAzMw==", "bodyText": "Would org.apache.kafka.common.utils.ByteBufferOutputStream be useful here?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456692033", "createdAt": "2020-07-17T22:00:26Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyNzcxNQ==", "bodyText": "Looks like the expansion factor for ByteArrayOutputStream varies on the JDK version. In JDK 8 and 11 it's 2x, but in JDK 14 it just grows the buffer to the minimum needed size.\nOur growth factor of 1.1 in ByteBufferOutputStream seems reasonable . Not to mention avoiding the final copy by using slice would be nice too.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456727715", "createdAt": "2020-07-18T00:48:42Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5NjY4OA==", "bodyText": "@mumrah Thanks for checking this. However, the behavior in JDK 14 has not changed in that way. Performance would be atrocious if it did:\nprivate void ensureCapacity(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = buf.length;\n        int minGrowth = minCapacity - oldCapacity;\n        if (minGrowth > 0) {\n            buf = Arrays.copyOf(buf, ArraysSupport.newLength(oldCapacity,\n                    minGrowth, oldCapacity /* preferred growth */));\n        }\nThe third parameter passed to newLength is the preferred growth, which is oldCapacity. That is, it doubles if it doesn't cause overflow. We should probably double for ByteBufferOutputStream too if we have no estimate of the expected size. 1.1 growth makes sense if we do have a reasonable estimate (which is the case in current usage, I believe, but perhaps not in this case).", "url": "https://github.com/apache/kafka/pull/9008#discussion_r457496688", "createdAt": "2020-07-20T15:30:50Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxMzcxMw==", "bodyText": "Looking a bit more, it seems like this will be mostly used by the data that precedes the actual records. Do we have a sense for what's the typical size for that? If we do, we can use that in the initial size and we can keep the 1.1 growth.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r457513713", "createdAt": "2020-07-20T15:51:01Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjI4MQ==", "bodyText": "Thanks for the explanation, @ijuma. I missed the semantics of newLength\nAfter the initial few top-level fields, each partition will have something like 38 bytes preceding its records (at a minimum, aborted transactions could increase that). Maybe we could increase initial capacity to 64 bytes?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r457546281", "createdAt": "2020-07-20T16:39:18Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MjQxNQ==", "bodyText": "Sounds good.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r457562415", "createdAt": "2020-07-20T17:06:44Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MjkzNQ==", "bodyText": "I increased the initial buffer size to 64 and also added 2x growth factor for the buffer. It occurred to me the initial size only really helps for the first partition's header fields, but beyond that (since we are reusing/growing the same ByteBufferOutputStream) we don't know what we'll need. The JMH benchmark did confirm that 2x was more performant than 1.1x for FetchResponse.\nExisting usages of ByteBufferOutputStream were not modified and still use 1.1x", "url": "https://github.com/apache/kafka/pull/9008#discussion_r458382935", "createdAt": "2020-07-21T20:57:01Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteArrayOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        writeQuietly(() -> output.writeByte(val));\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        writeQuietly(() -> output.writeShort(val));\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        writeQuietly(() -> output.writeInt(val));\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        writeQuietly(() -> output.writeLong(val));\n+\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        writeQuietly(() -> ByteUtils.writeDouble(val, output));\n+\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        writeQuietly(() -> output.write(arr));\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        writeQuietly(() -> ByteUtils.writeUnsignedVarint(i, output));\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        writeQuietly(() -> output.write(src.array(), src.position(), src.remaining()));\n+    }\n+\n+    @FunctionalInterface\n+    private interface IOExceptionThrowingRunnable {\n+        void run() throws IOException;\n+    }\n+\n+    private void writeQuietly(IOExceptionThrowingRunnable runnable) {\n+        try {\n+            runnable.run();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Writable encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBufferSend send = new ByteBufferSend(dest,\n+                ByteBuffer.wrap(byteArrayOutputStream.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NzYwMQ=="}, "originalCommit": {"oid": "89de5083ecbee44f730bf1f15b422c01c2114976"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODY1MTAyOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMDozNzowNVrOGzgfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMToxMTowN1rOGzkn1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Mjg1MA==", "bodyText": "Using null as the default seems reasonable to me. We also have MemoryRecords.EMPTY which we could use.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456662850", "createdAt": "2020-07-17T20:37:05Z", "author": {"login": "hachikuji"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2397,6 +2460,9 @@ private String fieldDefault(FieldSpec field) {\n                 headerGenerator.addImport(MessageGenerator.BYTES_CLASS);\n                 return \"Bytes.EMPTY\";\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO should we use some special EmptyRecords class instead?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38b2ebf3c3343d7d6a5c354096fc24c6bbf73535"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczMDU4MA==", "bodyText": "Ok, going to leave it as null since we need to deal with FileRecords and MemoryRecords in different cases.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r456730580", "createdAt": "2020-07-18T01:11:07Z", "author": {"login": "mumrah"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2397,6 +2460,9 @@ private String fieldDefault(FieldSpec field) {\n                 headerGenerator.addImport(MessageGenerator.BYTES_CLASS);\n                 return \"Bytes.EMPTY\";\n             }\n+        } else if (field.type().isRecords()) {\n+            // TODO should we use some special EmptyRecords class instead?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Mjg1MA=="}, "originalCommit": {"oid": "38b2ebf3c3343d7d6a5c354096fc24c6bbf73535"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDIzMjc1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowNTowOFrOG0OeTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozODo0M1rOG2Nphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNjI2OQ==", "bodyText": "I ended up having to keep a separate mark here since ByteBufferOutputStream doesn't keep the mark when it replaces the underlying buffer. I also didn't want to mess with that class in this PR since it had quite a lot of usages. We could look into fixing that as a follow-on", "url": "https://github.com/apache/kafka/pull/9008#discussion_r457416269", "createdAt": "2020-07-20T14:05:08Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteBufferOutputStream;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteBufferOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+    private int mark;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteBufferOutputStream(32);\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+        this.mark = 0;\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        try {\n+            output.writeByte(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        try {\n+            output.writeShort(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        try {\n+            output.writeInt(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        try {\n+            output.writeLong(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        try {\n+            ByteUtils.writeDouble(val, output);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        try {\n+            output.write(arr);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        try {\n+            ByteUtils.writeUnsignedVarint(i, output);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        try {\n+            output.write(src.array(), src.position(), src.remaining());\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBuffer buf = byteArrayOutputStream.buffer();\n+        int end = buf.position();\n+        int len = end - mark;\n+\n+        if (len > 0) {\n+            buf.position(mark);\n+            ByteBuffer slice = buf.slice();\n+            slice.limit(len);\n+            ByteBufferSend send = new ByteBufferSend(dest, slice);\n+            sendConsumer.accept(send);\n+        }\n+\n+        buf.position(end);\n+        mark = end;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2514f5ae54b4f51dad11b6ff23ecafc28362f7bd"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5OTkxMQ==", "bodyText": "Ended up not using ByteBufferOutputStream", "url": "https://github.com/apache/kafka/pull/9008#discussion_r459499911", "createdAt": "2020-07-23T14:38:43Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteBufferOutputStream;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteBufferOutputStream byteArrayOutputStream;\n+    private final DataOutput output;\n+    private int mark;\n+\n+    public RecordsWriter(String dest, Consumer<Send> sendConsumer) {\n+        this.dest = dest;\n+        this.sendConsumer = sendConsumer;\n+        this.byteArrayOutputStream = new ByteBufferOutputStream(32);\n+        this.output = new DataOutputStream(this.byteArrayOutputStream);\n+        this.mark = 0;\n+    }\n+\n+    @Override\n+    public void writeByte(byte val) {\n+        try {\n+            output.writeByte(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeShort(short val) {\n+        try {\n+            output.writeShort(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeInt(int val) {\n+        try {\n+            output.writeInt(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeLong(long val) {\n+        try {\n+            output.writeLong(val);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeDouble(double val) {\n+        try {\n+            ByteUtils.writeDouble(val, output);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeByteArray(byte[] arr) {\n+        try {\n+            output.write(arr);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeUnsignedVarint(int i) {\n+        try {\n+            ByteUtils.writeUnsignedVarint(i, output);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeByteBuffer(ByteBuffer src) {\n+        try {\n+            output.write(src.array(), src.position(), src.remaining());\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"RecordsWriter encountered an IO error\", e);\n+        }\n+    }\n+\n+    public void writeRecords(BaseRecords records) {\n+        flush();\n+        sendConsumer.accept(records.toSend(dest));\n+    }\n+\n+    /**\n+     * Flush any pending bytes as a ByteBufferSend and reset the buffer\n+     */\n+    public void flush() {\n+        ByteBuffer buf = byteArrayOutputStream.buffer();\n+        int end = buf.position();\n+        int len = end - mark;\n+\n+        if (len > 0) {\n+            buf.position(mark);\n+            ByteBuffer slice = buf.slice();\n+            slice.limit(len);\n+            ByteBufferSend send = new ByteBufferSend(dest, slice);\n+            sendConsumer.accept(send);\n+        }\n+\n+        buf.position(end);\n+        mark = end;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNjI2OQ=="}, "originalCommit": {"oid": "2514f5ae54b4f51dad11b6ff23ecafc28362f7bd"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk2ODk0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/FetchRequest.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxMjo0N1rOG3zxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoyOTo1MlrOG5AiXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzE2Mg==", "bodyText": "I guess the implicit expectation is that if the protocol does not support the read_committed isolation level, then it wouldn't have transactional data anyway, so reverting to read_uncommitted is safe. Can't find a fault with that.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461173162", "createdAt": "2020-07-27T21:12:47Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/FetchRequest.json", "diffHunk": "@@ -55,35 +55,35 @@\n       \"about\": \"The minimum bytes to accumulate in the response.\" },\n     { \"name\": \"MaxBytes\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"0x7fffffff\", \"ignorable\": true,\n       \"about\": \"The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.\" },\n-    { \"name\": \"IsolationLevel\", \"type\": \"int8\", \"versions\": \"4+\", \"default\": \"0\", \"ignorable\": false,\n+    { \"name\": \"IsolationLevel\", \"type\": \"int8\", \"versions\": \"4+\", \"default\": \"0\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzMDgxNA==", "bodyText": "I changed this to make the JSON schema match what was previously in FetchRequest.java. During serialization, we would simply stick the isolation level in the Struct regardless of the api version:\nstruct.setIfExists(ISOLATION_LEVEL, isolationLevel.id());\nSo even if we were writing out a v3 FetchRequest, whatever value we put here would be ignored and not sent out. There were also some unit tests that utilized this behavior.\nYour assessment sounds correct though, so it probably doesn't matter whether it's ignorable or not.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462430814", "createdAt": "2020-07-29T16:29:52Z", "author": {"login": "mumrah"}, "path": "clients/src/main/resources/common/message/FetchRequest.json", "diffHunk": "@@ -55,35 +55,35 @@\n       \"about\": \"The minimum bytes to accumulate in the response.\" },\n     { \"name\": \"MaxBytes\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"0x7fffffff\", \"ignorable\": true,\n       \"about\": \"The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.\" },\n-    { \"name\": \"IsolationLevel\", \"type\": \"int8\", \"versions\": \"4+\", \"default\": \"0\", \"ignorable\": false,\n+    { \"name\": \"IsolationLevel\", \"type\": \"int8\", \"versions\": \"4+\", \"default\": \"0\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MzE2Mg=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE1MDgzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNTowOFrOG31f0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowOTo1MVrOG49HDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTM2Mg==", "bodyText": "More of a side question, but is this length guaranteed to be less than the buffer size? Wondering if it is worth adding range checking.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461201362", "createdAt": "2020-07-27T22:15:08Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Implementation of Readable which reads from a byte buffer and can read records as {@link MemoryRecords}\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsReader implements Readable {\n+    private final ByteBuffer buf;\n+\n+    public RecordsReader(ByteBuffer buf) {\n+        this.buf = buf;\n+    }\n+\n+    @Override\n+    public byte readByte() {\n+        return buf.get();\n+    }\n+\n+    @Override\n+    public short readShort() {\n+        return buf.getShort();\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        return buf.getInt();\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        return buf.getLong();\n+    }\n+\n+    @Override\n+    public double readDouble() {\n+        return ByteUtils.readDouble(buf);\n+    }\n+\n+    @Override\n+    public void readArray(byte[] arr) {\n+        buf.get(arr);\n+    }\n+\n+    @Override\n+    public int readUnsignedVarint() {\n+        return ByteUtils.readUnsignedVarint(buf);\n+    }\n+\n+    @Override\n+    public ByteBuffer readByteBuffer(int length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NDY2OQ==", "bodyText": "This is copied straight from ByteBufferAccessor and will probably go away in a follow-on PR. But either way, looking at it it seems it should always be in range since this is used by zero-copy byte fields in the message classes, e.g.\nint len = _reader.readInt();\nif (len > 0) {\n  this.someZeroCopyField = _reader.readByteBuffer(len);\n}\nSo generally it's probably safe. In the case of a corrupt message where the length is wrong, ByteBuffer#limit will throw an error and parsing will fail. It probably would be nice to put a range check in ByteBufferAccessor so we can throw a more useful error.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462374669", "createdAt": "2020-07-29T15:09:51Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsReader.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.record.MemoryRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Implementation of Readable which reads from a byte buffer and can read records as {@link MemoryRecords}\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsReader implements Readable {\n+    private final ByteBuffer buf;\n+\n+    public RecordsReader(ByteBuffer buf) {\n+        this.buf = buf;\n+    }\n+\n+    @Override\n+    public byte readByte() {\n+        return buf.get();\n+    }\n+\n+    @Override\n+    public short readShort() {\n+        return buf.getShort();\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        return buf.getInt();\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        return buf.getLong();\n+    }\n+\n+    @Override\n+    public double readDouble() {\n+        return ByteUtils.readDouble(buf);\n+    }\n+\n+    @Override\n+    public void readArray(byte[] arr) {\n+        buf.get(arr);\n+    }\n+\n+    @Override\n+    public int readUnsignedVarint() {\n+        return ByteUtils.readUnsignedVarint(buf);\n+    }\n+\n+    @Override\n+    public ByteBuffer readByteBuffer(int length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTM2Mg=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE2MDc5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxOToxMFrOG31ltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxOToxMFrOG31ltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMjg3MQ==", "bodyText": "Could we rename totalSize so that it is clear that it does not cover the record sizes. Maybe totalOverheadSize or totalNonRecordSize or something like that.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461202871", "createdAt": "2020-07-27T22:19:10Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.DataOutput;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {\n+    private final String dest;\n+    private final Consumer<Send> sendConsumer;\n+    private final ByteBuffer buffer;\n+    private int mark;\n+\n+    public RecordsWriter(String dest, int totalSize, Consumer<Send> sendConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE2MzY2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyMDoxMFrOG31nVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMToyMlrOG48ung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzI4Nw==", "bodyText": "nit: any reason not to stick with the same constructor convention as the other requests?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461203287", "createdAt": "2020-07-27T22:20:10Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java", "diffHunk": "@@ -146,7 +147,7 @@ public static AbstractRequest parseRequest(ApiKeys apiKey, short apiVersion, Str\n             case PRODUCE:\n                 return new ProduceRequest(struct, apiVersion);\n             case FETCH:\n-                return new FetchRequest(struct, apiVersion);\n+                return new FetchRequest(new FetchRequestData(struct, apiVersion), apiVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2ODQxNA==", "bodyText": "I just wanted to remove the Struct constructor of FetchRequest completely. Eventually, RequestContext#parseRequest(ByteBuffer) will stop using Structs and pass the message data classes to AbstractRequest#parseRequest (or similar).", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462368414", "createdAt": "2020-07-29T15:01:22Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AbstractRequest.java", "diffHunk": "@@ -146,7 +147,7 @@ public static AbstractRequest parseRequest(ApiKeys apiKey, short apiVersion, Str\n             case PRODUCE:\n                 return new ProduceRequest(struct, apiVersion);\n             case FETCH:\n-                return new FetchRequest(struct, apiVersion);\n+                return new FetchRequest(new FetchRequestData(struct, apiVersion), apiVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMzI4Nw=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE3NzQ3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyNTo0MVrOG31vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyNTo0MVrOG31vsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTQyNw==", "bodyText": "nit: wonder if this should be RecordsWritable for consistency with Writable.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461205427", "createdAt": "2020-07-27T22:25:41Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/RecordsWriter.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.protocol;\n+\n+import org.apache.kafka.common.network.ByteBufferSend;\n+import org.apache.kafka.common.network.Send;\n+import org.apache.kafka.common.record.BaseRecords;\n+import org.apache.kafka.common.utils.ByteUtils;\n+\n+import java.io.DataOutput;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Implementation of Writable which produces a sequence of {@link Send} objects. This allows for deferring the transfer\n+ * of data from a record-set's file channel to the eventual socket channel.\n+ *\n+ * Excepting {@link #writeRecords(BaseRecords)}, calls to the write methods on this class will append to a byte array\n+ * according to the format specified in {@link DataOutput}. When a call is made to writeRecords, any previously written\n+ * bytes will be flushed as a new {@link ByteBufferSend} to the given Send consumer. After flushing the pending bytes,\n+ * another Send is passed to the consumer which wraps the underlying record-set's transfer logic.\n+ *\n+ * For example,\n+ *\n+ * <pre>\n+ *     recordsWritable.writeInt(10);\n+ *     recordsWritable.writeRecords(records1);\n+ *     recordsWritable.writeInt(20);\n+ *     recordsWritable.writeRecords(records2);\n+ *     recordsWritable.writeInt(30);\n+ *     recordsWritable.flush();\n+ * </pre>\n+ *\n+ * Will pass 5 Send objects to the consumer given in the constructor. Care must be taken by callers to flush any\n+ * pending bytes at the end of the writing sequence to ensure everything is flushed to the consumer. This class is\n+ * intended to be used with {@link org.apache.kafka.common.record.MultiRecordsSend}.\n+ *\n+ * @see org.apache.kafka.common.requests.FetchResponse\n+ */\n+public class RecordsWriter implements Writable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIwNDgyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozNjozNlrOG31_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NjozMVrOG48gLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTU2Ng==", "bodyText": "nit: not a big deal, but I feel like calling flush should really be the responsibility of write.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461209566", "createdAt": "2020-07-27T22:36:36Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +255,128 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.data = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.data = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return data.toStruct(version);\n     }\n \n     @Override\n-    protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n-\n-        // write the total size and the response header\n-        ByteBuffer buffer = ByteBuffer.allocate(responseHeaderStruct.sizeOf() + 4);\n-        buffer.putInt(responseHeaderStruct.sizeOf() + responseBodyStruct.sizeOf());\n-        responseHeaderStruct.writeTo(buffer);\n+    public Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        ObjectSerializationCache cache = new ObjectSerializationCache();\n+        int totalRecordSize = data.responses().stream()\n+                .flatMap(fetchableTopicResponse -> fetchableTopicResponse.partitionResponses().stream())\n+                .mapToInt(fetchablePartitionResponse -> fetchablePartitionResponse.recordSet().sizeInBytes())\n+                .sum();\n+        int totalMessageSize = data.size(cache, apiVersion);\n+\n+        RecordsWriter writer = new RecordsWriter(dest, totalMessageSize - totalRecordSize, sends::add);\n+        data.write(writer, cache, apiVersion);\n+        writer.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 480}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NDcxOQ==", "bodyText": "Yea, I agree. @cmccabe had a suggestion about adding Writable#close which would achieve the same goal. I think this would be nice and clean things up a bit. I'll open a follow up PR for this", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462364719", "createdAt": "2020-07-29T14:56:31Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +255,128 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.data = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.data = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return data.toStruct(version);\n     }\n \n     @Override\n-    protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n-\n-        // write the total size and the response header\n-        ByteBuffer buffer = ByteBuffer.allocate(responseHeaderStruct.sizeOf() + 4);\n-        buffer.putInt(responseHeaderStruct.sizeOf() + responseBodyStruct.sizeOf());\n-        responseHeaderStruct.writeTo(buffer);\n+    public Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        ObjectSerializationCache cache = new ObjectSerializationCache();\n+        int totalRecordSize = data.responses().stream()\n+                .flatMap(fetchableTopicResponse -> fetchableTopicResponse.partitionResponses().stream())\n+                .mapToInt(fetchablePartitionResponse -> fetchablePartitionResponse.recordSet().sizeInBytes())\n+                .sum();\n+        int totalMessageSize = data.size(cache, apiVersion);\n+\n+        RecordsWriter writer = new RecordsWriter(dest, totalMessageSize - totalRecordSize, sends::add);\n+        data.write(writer, cache, apiVersion);\n+        writer.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTU2Ng=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 480}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIwNzk1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozNzo0NVrOG32BvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NzoyOVrOG48jIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDA0NA==", "bodyText": "Instead of the cast, could we add a validation check?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461210044", "createdAt": "2020-07-27T22:37:45Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +255,128 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.data = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.data = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return data.toStruct(version);\n     }\n \n     @Override\n-    protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n-\n-        // write the total size and the response header\n-        ByteBuffer buffer = ByteBuffer.allocate(responseHeaderStruct.sizeOf() + 4);\n-        buffer.putInt(responseHeaderStruct.sizeOf() + responseBodyStruct.sizeOf());\n-        responseHeaderStruct.writeTo(buffer);\n+    public Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        ObjectSerializationCache cache = new ObjectSerializationCache();\n+        int totalRecordSize = data.responses().stream()\n+                .flatMap(fetchableTopicResponse -> fetchableTopicResponse.partitionResponses().stream())\n+                .mapToInt(fetchablePartitionResponse -> fetchablePartitionResponse.recordSet().sizeInBytes())\n+                .sum();\n+        int totalMessageSize = data.size(cache, apiVersion);\n+\n+        RecordsWriter writer = new RecordsWriter(dest, totalMessageSize - totalRecordSize, sends::add);\n+        data.write(writer, cache, apiVersion);\n+        writer.flush();\n+\n+        // Compute the total size of all the Sends and write it out along with the header in the first Send\n+        ResponseHeaderData responseHeaderData = responseHeader.data();\n+\n+        int headerSize = responseHeaderData.size(cache, responseHeader.headerVersion());\n+        int bodySize = (int) sends.stream().mapToLong(Send::size).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 486}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NTQ3Mg==", "bodyText": "Do you mean something like Math.toIntExact?", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462365472", "createdAt": "2020-07-29T14:57:29Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/FetchResponse.java", "diffHunk": "@@ -366,225 +255,128 @@ public FetchResponse(Errors error,\n                          LinkedHashMap<TopicPartition, PartitionData<T>> responseData,\n                          int throttleTimeMs,\n                          int sessionId) {\n-        this.error = error;\n-        this.responseData = responseData;\n-        this.throttleTimeMs = throttleTimeMs;\n-        this.sessionId = sessionId;\n+        this.data = toMessage(throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        this.responseDataMap = responseData;\n     }\n \n-    public static FetchResponse<MemoryRecords> parse(Struct struct) {\n-        LinkedHashMap<TopicPartition, PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n-        for (Object topicResponseObj : struct.getArray(RESPONSES_KEY_NAME)) {\n-            Struct topicResponse = (Struct) topicResponseObj;\n-            String topic = topicResponse.get(TOPIC_NAME);\n-            for (Object partitionResponseObj : topicResponse.getArray(PARTITIONS_KEY_NAME)) {\n-                Struct partitionResponse = (Struct) partitionResponseObj;\n-                Struct partitionResponseHeader = partitionResponse.getStruct(PARTITION_HEADER_KEY_NAME);\n-                int partition = partitionResponseHeader.get(PARTITION_ID);\n-                Errors error = Errors.forCode(partitionResponseHeader.get(ERROR_CODE));\n-                long highWatermark = partitionResponseHeader.get(HIGH_WATERMARK);\n-                long lastStableOffset = partitionResponseHeader.getOrElse(LAST_STABLE_OFFSET, INVALID_LAST_STABLE_OFFSET);\n-                long logStartOffset = partitionResponseHeader.getOrElse(LOG_START_OFFSET, INVALID_LOG_START_OFFSET);\n-                Optional<Integer> preferredReadReplica = Optional.of(\n-                    partitionResponseHeader.getOrElse(PREFERRED_READ_REPLICA, INVALID_PREFERRED_REPLICA_ID)\n-                ).filter(Predicate.isEqual(INVALID_PREFERRED_REPLICA_ID).negate());\n-\n-                BaseRecords baseRecords = partitionResponse.getRecords(RECORD_SET_KEY_NAME);\n-                if (!(baseRecords instanceof MemoryRecords))\n-                    throw new IllegalStateException(\"Unknown records type found: \" + baseRecords.getClass());\n-                MemoryRecords records = (MemoryRecords) baseRecords;\n-\n-                List<AbortedTransaction> abortedTransactions = null;\n-                if (partitionResponseHeader.hasField(ABORTED_TRANSACTIONS_KEY_NAME)) {\n-                    Object[] abortedTransactionsArray = partitionResponseHeader.getArray(ABORTED_TRANSACTIONS_KEY_NAME);\n-                    if (abortedTransactionsArray != null) {\n-                        abortedTransactions = new ArrayList<>(abortedTransactionsArray.length);\n-                        for (Object abortedTransactionObj : abortedTransactionsArray) {\n-                            Struct abortedTransactionStruct = (Struct) abortedTransactionObj;\n-                            long producerId = abortedTransactionStruct.get(PRODUCER_ID);\n-                            long firstOffset = abortedTransactionStruct.get(FIRST_OFFSET);\n-                            abortedTransactions.add(new AbortedTransaction(producerId, firstOffset));\n-                        }\n-                    }\n-                }\n-\n-                PartitionData<MemoryRecords> partitionData = new PartitionData<>(error, highWatermark, lastStableOffset,\n-                        logStartOffset, preferredReadReplica, abortedTransactions, records);\n-                responseData.put(new TopicPartition(topic, partition), partitionData);\n-            }\n-        }\n-        return new FetchResponse<>(Errors.forCode(struct.getOrElse(ERROR_CODE, (short) 0)), responseData,\n-                struct.getOrElse(THROTTLE_TIME_MS, DEFAULT_THROTTLE_TIME), struct.getOrElse(SESSION_ID, INVALID_SESSION_ID));\n+    public FetchResponse(FetchResponseData fetchResponseData) {\n+        this.data = fetchResponseData;\n+        this.responseDataMap = toResponseDataMap(fetchResponseData);\n     }\n \n     @Override\n     public Struct toStruct(short version) {\n-        return toStruct(version, throttleTimeMs, error, responseData.entrySet().iterator(), sessionId);\n+        return data.toStruct(version);\n     }\n \n     @Override\n-    protected Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n-        Struct responseHeaderStruct = responseHeader.toStruct();\n-        Struct responseBodyStruct = toStruct(apiVersion);\n-\n-        // write the total size and the response header\n-        ByteBuffer buffer = ByteBuffer.allocate(responseHeaderStruct.sizeOf() + 4);\n-        buffer.putInt(responseHeaderStruct.sizeOf() + responseBodyStruct.sizeOf());\n-        responseHeaderStruct.writeTo(buffer);\n+    public Send toSend(String dest, ResponseHeader responseHeader, short apiVersion) {\n+        // Generate the Sends for the response fields and records\n+        ArrayDeque<Send> sends = new ArrayDeque<>();\n+        ObjectSerializationCache cache = new ObjectSerializationCache();\n+        int totalRecordSize = data.responses().stream()\n+                .flatMap(fetchableTopicResponse -> fetchableTopicResponse.partitionResponses().stream())\n+                .mapToInt(fetchablePartitionResponse -> fetchablePartitionResponse.recordSet().sizeInBytes())\n+                .sum();\n+        int totalMessageSize = data.size(cache, apiVersion);\n+\n+        RecordsWriter writer = new RecordsWriter(dest, totalMessageSize - totalRecordSize, sends::add);\n+        data.write(writer, cache, apiVersion);\n+        writer.flush();\n+\n+        // Compute the total size of all the Sends and write it out along with the header in the first Send\n+        ResponseHeaderData responseHeaderData = responseHeader.data();\n+\n+        int headerSize = responseHeaderData.size(cache, responseHeader.headerVersion());\n+        int bodySize = (int) sends.stream().mapToLong(Send::size).sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDA0NA=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 486}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIxODQxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/FetchResponse.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MjoxNVrOG32ICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxMTowOFrOG4_y4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTY1Nw==", "bodyText": "I'm wondering if this should be ignorable. When this is set, the leader returns no data, so it relies crucially on the follower redirecting.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r461211657", "createdAt": "2020-07-27T22:42:15Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/FetchResponse.json", "diffHunk": "@@ -43,37 +43,39 @@\n   \"fields\": [\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n       \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },\n-    { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"7+\", \"ignorable\": false,\n+    { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"7+\", \"ignorable\": true,\n       \"about\": \"The top level response error code.\" },\n     { \"name\": \"SessionId\", \"type\": \"int32\", \"versions\": \"7+\", \"default\": \"0\", \"ignorable\": false,\n       \"about\": \"The fetch session ID, or 0 if this is not part of a fetch session.\" },\n-    { \"name\": \"Topics\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n+    { \"name\": \"Responses\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n       \"about\": \"The response topics.\", \"fields\": [\n-      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n+      { \"name\": \"Topic\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n         \"about\": \"The topic name.\" },\n-      { \"name\": \"Partitions\", \"type\": \"[]FetchablePartitionResponse\", \"versions\": \"0+\",\n+      { \"name\": \"PartitionResponses\", \"type\": \"[]FetchablePartitionResponse\", \"versions\": \"0+\",\n         \"about\": \"The topic partitions.\", \"fields\": [\n-        { \"name\": \"PartitionIndex\", \"type\": \"int32\", \"versions\": \"0+\",\n-          \"about\": \"The partiiton index.\" },\n-        { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"0+\",\n-          \"about\": \"The error code, or 0 if there was no fetch error.\" },\n-        { \"name\": \"HighWatermark\", \"type\": \"int64\", \"versions\": \"0+\",\n-          \"about\": \"The current high water mark.\" },\n-        { \"name\": \"LastStableOffset\", \"type\": \"int64\", \"versions\": \"4+\", \"default\": \"-1\", \"ignorable\": true,\n-          \"about\": \"The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)\" },\n-        { \"name\": \"LogStartOffset\", \"type\": \"int64\", \"versions\": \"5+\", \"default\": \"-1\", \"ignorable\": true,\n-          \"about\": \"The current log start offset.\" },\n-        { \"name\": \"Aborted\", \"type\": \"[]AbortedTransaction\", \"versions\": \"4+\", \"nullableVersions\": \"4+\", \"ignorable\": false,\n-          \"about\": \"The aborted transactions.\",  \"fields\": [\n-          { \"name\": \"ProducerId\", \"type\": \"int64\", \"versions\": \"4+\", \"entityType\": \"producerId\",\n-            \"about\": \"The producer id associated with the aborted transaction.\" },\n-          { \"name\": \"FirstOffset\", \"type\": \"int64\", \"versions\": \"4+\",\n-            \"about\": \"The first offset in the aborted transaction.\" }\n+        { \"name\":  \"PartitionHeader\", \"type\": \"PartitionHeader\", \"versions\": \"0+\",\n+          \"fields\":  [\n+          { \"name\": \"Partition\", \"type\": \"int32\", \"versions\": \"0+\",\n+            \"about\": \"The partition index.\" },\n+          { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"0+\",\n+            \"about\": \"The error code, or 0 if there was no fetch error.\" },\n+          { \"name\": \"HighWatermark\", \"type\": \"int64\", \"versions\": \"0+\",\n+            \"about\": \"The current high water mark.\" },\n+          { \"name\": \"LastStableOffset\", \"type\": \"int64\", \"versions\": \"4+\", \"default\": \"-1\", \"ignorable\": true,\n+            \"about\": \"The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)\" },\n+          { \"name\": \"LogStartOffset\", \"type\": \"int64\", \"versions\": \"5+\", \"default\": \"-1\", \"ignorable\": true,\n+            \"about\": \"The current log start offset.\" },\n+          { \"name\": \"AbortedTransactions\", \"type\": \"[]AbortedTransaction\", \"versions\": \"4+\", \"nullableVersions\": \"4+\", \"ignorable\": true,\n+            \"about\": \"The aborted transactions.\",  \"fields\": [\n+            { \"name\": \"ProducerId\", \"type\": \"int64\", \"versions\": \"4+\", \"entityType\": \"producerId\",\n+              \"about\": \"The producer id associated with the aborted transaction.\" },\n+            { \"name\": \"FirstOffset\", \"type\": \"int64\", \"versions\": \"4+\",\n+              \"about\": \"The first offset in the aborted transaction.\" }\n+          ]},\n+          { \"name\": \"PreferredReadReplica\", \"type\": \"int32\", \"versions\": \"11+\", \"default\": \"-1\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODY1OA==", "bodyText": "I see what you mean. If we have a bug that causes us to hit the preferred replica code for an older api version, we should fail to serialize the message rather than sending it to a client that doesn't understand follower redirection.\nGood catch.", "url": "https://github.com/apache/kafka/pull/9008#discussion_r462418658", "createdAt": "2020-07-29T16:11:08Z", "author": {"login": "mumrah"}, "path": "clients/src/main/resources/common/message/FetchResponse.json", "diffHunk": "@@ -43,37 +43,39 @@\n   \"fields\": [\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n       \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },\n-    { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"7+\", \"ignorable\": false,\n+    { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"7+\", \"ignorable\": true,\n       \"about\": \"The top level response error code.\" },\n     { \"name\": \"SessionId\", \"type\": \"int32\", \"versions\": \"7+\", \"default\": \"0\", \"ignorable\": false,\n       \"about\": \"The fetch session ID, or 0 if this is not part of a fetch session.\" },\n-    { \"name\": \"Topics\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n+    { \"name\": \"Responses\", \"type\": \"[]FetchableTopicResponse\", \"versions\": \"0+\",\n       \"about\": \"The response topics.\", \"fields\": [\n-      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n+      { \"name\": \"Topic\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n         \"about\": \"The topic name.\" },\n-      { \"name\": \"Partitions\", \"type\": \"[]FetchablePartitionResponse\", \"versions\": \"0+\",\n+      { \"name\": \"PartitionResponses\", \"type\": \"[]FetchablePartitionResponse\", \"versions\": \"0+\",\n         \"about\": \"The topic partitions.\", \"fields\": [\n-        { \"name\": \"PartitionIndex\", \"type\": \"int32\", \"versions\": \"0+\",\n-          \"about\": \"The partiiton index.\" },\n-        { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"0+\",\n-          \"about\": \"The error code, or 0 if there was no fetch error.\" },\n-        { \"name\": \"HighWatermark\", \"type\": \"int64\", \"versions\": \"0+\",\n-          \"about\": \"The current high water mark.\" },\n-        { \"name\": \"LastStableOffset\", \"type\": \"int64\", \"versions\": \"4+\", \"default\": \"-1\", \"ignorable\": true,\n-          \"about\": \"The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)\" },\n-        { \"name\": \"LogStartOffset\", \"type\": \"int64\", \"versions\": \"5+\", \"default\": \"-1\", \"ignorable\": true,\n-          \"about\": \"The current log start offset.\" },\n-        { \"name\": \"Aborted\", \"type\": \"[]AbortedTransaction\", \"versions\": \"4+\", \"nullableVersions\": \"4+\", \"ignorable\": false,\n-          \"about\": \"The aborted transactions.\",  \"fields\": [\n-          { \"name\": \"ProducerId\", \"type\": \"int64\", \"versions\": \"4+\", \"entityType\": \"producerId\",\n-            \"about\": \"The producer id associated with the aborted transaction.\" },\n-          { \"name\": \"FirstOffset\", \"type\": \"int64\", \"versions\": \"4+\",\n-            \"about\": \"The first offset in the aborted transaction.\" }\n+        { \"name\":  \"PartitionHeader\", \"type\": \"PartitionHeader\", \"versions\": \"0+\",\n+          \"fields\":  [\n+          { \"name\": \"Partition\", \"type\": \"int32\", \"versions\": \"0+\",\n+            \"about\": \"The partition index.\" },\n+          { \"name\": \"ErrorCode\", \"type\": \"int16\", \"versions\": \"0+\",\n+            \"about\": \"The error code, or 0 if there was no fetch error.\" },\n+          { \"name\": \"HighWatermark\", \"type\": \"int64\", \"versions\": \"0+\",\n+            \"about\": \"The current high water mark.\" },\n+          { \"name\": \"LastStableOffset\", \"type\": \"int64\", \"versions\": \"4+\", \"default\": \"-1\", \"ignorable\": true,\n+            \"about\": \"The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED)\" },\n+          { \"name\": \"LogStartOffset\", \"type\": \"int64\", \"versions\": \"5+\", \"default\": \"-1\", \"ignorable\": true,\n+            \"about\": \"The current log start offset.\" },\n+          { \"name\": \"AbortedTransactions\", \"type\": \"[]AbortedTransaction\", \"versions\": \"4+\", \"nullableVersions\": \"4+\", \"ignorable\": true,\n+            \"about\": \"The aborted transactions.\",  \"fields\": [\n+            { \"name\": \"ProducerId\", \"type\": \"int64\", \"versions\": \"4+\", \"entityType\": \"producerId\",\n+              \"about\": \"The producer id associated with the aborted transaction.\" },\n+            { \"name\": \"FirstOffset\", \"type\": \"int64\", \"versions\": \"4+\",\n+              \"about\": \"The first offset in the aborted transaction.\" }\n+          ]},\n+          { \"name\": \"PreferredReadReplica\", \"type\": \"int32\", \"versions\": \"11+\", \"default\": \"-1\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTY1Nw=="}, "originalCommit": {"oid": "78cd0124dc0573819e169c432b45929efd933665"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2245, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}