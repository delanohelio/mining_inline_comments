{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjE5NTI4", "number": 8313, "title": "KAFKA-5604: Remove the redundant TODO marker on the Streams side", "bodyText": "The issue itself has been fixed a while ago on the producer side, so we can just remove this TODO marker now (we've removed the isZombie flag already anyways).\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-18T19:19:18Z", "url": "https://github.com/apache/kafka/pull/8313", "merged": true, "mergeCommit": {"oid": "b1999ba22dbf83b662591baf64e3d68e0f69e818"}, "closed": true, "closedAt": "2020-03-18T21:22:53Z", "author": {"login": "guozhangwang"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO8Uh6gH2gAyMzkwNjE5NTI4Ojk3MzYwYmNkOGUxNmMwOGIyYWY1NGZmYzJlNmU3YzhlNjkyNzNmOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO86MEgFqTM3NzE5MTU1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d", "committedDate": "2020-03-18T19:17:45Z", "message": "remove the TODO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTcxMDQ3", "url": "https://github.com/apache/kafka/pull/8313#pullrequestreview-377171047", "createdAt": "2020-03-18T19:27:40Z", "commit": {"oid": "97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTkxNTU3", "url": "https://github.com/apache/kafka/pull/8313#pullrequestreview-377191557", "createdAt": "2020-03-18T19:58:50Z", "commit": {"oid": "97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1ODo1MFrOF4Uw2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1ODo1MFrOF4Uw2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNDc2MA==", "bodyText": "I'm not sure this will actually log as it looks like because debug log could reserve one slot for error. Could we have a unit test to check the log appender capturing result?", "url": "https://github.com/apache/kafka/pull/8313#discussion_r394604760", "createdAt": "2020-03-18T19:58:50Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -193,15 +193,16 @@ public void abortTransaction() throws ProducerFencedException {\n         if (transactionInFlight) {\n             try {\n                 producer.abortTransaction();\n-            } catch (final ProducerFencedException ignore) {\n-                /* TODO\n-                 * this should actually never happen atm as we guard the call to #abortTransaction\n-                 * -> the reason for the guard is a \"bug\" in the Producer -- it throws IllegalStateException\n-                 * instead of ProducerFencedException atm. We can remove the isZombie flag after KAFKA-5604 got\n-                 * fixed and fall-back to this catch-and-swallow code\n-                 */\n-\n-                // can be ignored: transaction got already aborted by brokers/transactional-coordinator if this happens\n+            } catch (final ProducerFencedException error) {\n+                // The producer is aborting the txn when there's still an ongoing one,\n+                // which means that we did not commit the task while closing it, which\n+                // means that it is a dirty close. Therefore it is possible that the dirty\n+                // close is due to an fenced exception already thrown previously, and hence\n+                // when calling abortTxn here the same exception would be thrown again.\n+                // Even if the dirty close was not due to an observed fencing exception but\n+                // something else (e.g. task corrupted) we can still ignore the exception here\n+                // since transaction already got aborted by brokers/transactional-coordinator if this happens\n+                log.debug(\"Encountered {} while aborting the transaction; this is expected and hence swallowed\", error.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 314, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}