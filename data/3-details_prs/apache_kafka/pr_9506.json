{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjk1Mzg2", "number": 9506, "title": "KAFKA-10647; Only serialize owned partitions when consumer protocol version >= 1", "bodyText": "A regression got introduced by #8897. The owned partition field must be ignored for version < 1 otherwise the serialization fails with an unsupported version exception.\nThis must be merged in 2.7.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-26T20:42:04Z", "url": "https://github.com/apache/kafka/pull/9506", "merged": true, "mergeCommit": {"oid": "aa287acb2eed07cf6d75c10e71f051f538a57872"}, "closed": true, "closedAt": "2020-10-27T10:11:25Z", "author": {"login": "dajac"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWakycgH2gAyNTEwMjk1Mzg2OmU4YjcwZDA0ZTFiNjAwZTE0ZGVjODg4YjMwMDA2MjYwNzQ2MzA3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWjs5QgH2gAyNTEwMjk1Mzg2OmJkODNlMGVlMTBlMGQ3ZjY0YzdlODJkN2ZjN2JhZDMzMWRiOWM4Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/e8b70d04e1b600e14dec888b3000626074630703", "committedDate": "2020-10-26T20:41:17Z", "message": "KAFKA-10647; Only serialize owned partition when consumer protocol version >= 0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjY1Mjg4", "url": "https://github.com/apache/kafka/pull/9506#pullrequestreview-517265288", "createdAt": "2020-10-27T00:20:16Z", "commit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDoyMDoxN1rOHonBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDoyMDoxN1rOHonBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDM3Mw==", "bodyText": "nit: A better general pattern is to use assertEquals comparing against empty list. Then if the assertion fails, the message will show what was in the collection.", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512344373", "createdAt": "2020-10-27T00:20:17Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -46,6 +46,30 @@\n     private final TopicPartition tp2 = new TopicPartition(\"bar\", 2);\n     private final Optional<String> groupInstanceId = Optional.of(\"instance.id\");\n \n+    @Test\n+    public void serializeDeserializeSubscriptionAllVersions() {\n+        List<TopicPartition> ownedPartitions = Arrays.asList(\n+            new TopicPartition(\"foo\", 0),\n+            new TopicPartition(\"bar\", 0));\n+        Subscription subscription = new Subscription(Arrays.asList(\"foo\", \"bar\"),\n+            ByteBuffer.wrap(\"hello\".getBytes()), ownedPartitions);\n+\n+        for (short version = ConsumerProtocolSubscription.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolSubscription.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeSubscription(subscription, version);\n+            Subscription parsedSubscription = ConsumerProtocol.deserializeSubscription(buffer);\n+\n+            assertEquals(subscription.topics(), parsedSubscription.topics());\n+            assertEquals(subscription.userData(), parsedSubscription.userData());\n+            assertFalse(parsedSubscription.groupInstanceId().isPresent());\n+\n+            if (version >= 1) {\n+                assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));\n+            } else {\n+                assertTrue(parsedSubscription.ownedPartitions().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzI1OTQ5", "url": "https://github.com/apache/kafka/pull/9506#pullrequestreview-517325949", "createdAt": "2020-10-27T03:38:08Z", "commit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozODowOVrOHoqRJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozODowOVrOHoqRJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzYwNw==", "bodyText": "Does it compare to incorrect object (maybe assignment.userData())?", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512397607", "createdAt": "2020-10-27T03:38:09Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -137,6 +161,19 @@ public void deserializeFutureSubscriptionVersion() {\n         assertEquals(groupInstanceId, subscription.groupInstanceId());\n     }\n \n+    @Test\n+    public void serializeDeserializeAssignmentAllVersions() {\n+        List<TopicPartition> partitions = Arrays.asList(tp1, tp2);\n+        Assignment assignment = new Assignment(partitions, ByteBuffer.wrap(\"hello\".getBytes()));\n+\n+        for (short version = ConsumerProtocolAssignment.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolAssignment.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeAssignment(assignment, version);\n+            Assignment parsedAssignment = ConsumerProtocol.deserializeAssignment(buffer);\n+            assertEquals(toSet(partitions), toSet(parsedAssignment.partitions()));\n+            assertEquals(parsedAssignment.userData(), parsedAssignment.userData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/bd83e0ee10e0d7f64c7e82d7fc7bad331db9c869", "committedDate": "2020-10-27T07:19:17Z", "message": "address reviews"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2883, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}