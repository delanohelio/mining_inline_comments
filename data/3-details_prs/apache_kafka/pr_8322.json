{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzM1NTgz", "number": 8322, "title": "MINOR: Restore and global consumers should never have group.instance.id", "bodyText": "And hence restore / global consumers should never expect FencedInstanceIdException.\nWhen such exception is thrown, it means there's another instance with the same instance.id taken over, and hence we should treat it as fatal and let this instance to close out instead of handling as task-migrated.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-20T20:51:02Z", "url": "https://github.com/apache/kafka/pull/8322", "merged": true, "mergeCommit": {"oid": "1b36e11967e7a459d6401ba5ea740a659fc1994b"}, "closed": true, "closedAt": "2020-03-24T17:10:24Z", "author": {"login": "guozhangwang"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPmzsSAH2gAyMzkxNzM1NTgzOmZmMDJiZjVkMzc1NmQ0MjA5NTMxYWI0NmI3MGM5ZTBmNmE0ZTQ1NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQnewrAFqTM3OTkxNjY5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff02bf5d3756d4209531ab46b70c9e0f6a4e455c", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/ff02bf5d3756d4209531ab46b70c9e0f6a4e455c", "committedDate": "2020-03-20T20:47:48Z", "message": "one pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "144ebda3bdb196fc2d9dd1a5f6c1bfb9d94ef8c1", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/144ebda3bdb196fc2d9dd1a5f6c1bfb9d94ef8c1", "committedDate": "2020-03-20T21:38:50Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODMxOTU4", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-378831958", "createdAt": "2020-03-20T21:51:46Z", "commit": {"oid": "144ebda3bdb196fc2d9dd1a5f6c1bfb9d94ef8c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1MTo0NlrOF5kK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1MTo0NlrOF5kK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNTc3Ng==", "bodyText": "The restore consumer should never hit this error. Hence, I am wondering if we actually need this test? Does it make sense to test for something that will/should never happen?\nWe should rather have a test that the restore consumer is never configured with an group.instance.id config if we don't have such a test.", "url": "https://github.com/apache/kafka/pull/8322#discussion_r395905776", "createdAt": "2020-03-20T21:51:46Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java", "diffHunk": "@@ -943,6 +946,31 @@ public void shouldThrowIfRestoreCallbackThrows() {\n         assertEquals(kaboom, thrown.getCause());\n     }\n \n+    @Test\n+    public void shouldThrowIfRestoreGetInstanceFenced() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144ebda3bdb196fc2d9dd1a5f6c1bfb9d94ef8c1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODMyNTg5", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-378832589", "createdAt": "2020-03-20T21:53:19Z", "commit": {"oid": "144ebda3bdb196fc2d9dd1a5f6c1bfb9d94ef8c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5c4d024816069397539ce427c0f5a42571b15d", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/1e5c4d024816069397539ce427c0f5a42571b15d", "committedDate": "2020-03-23T17:34:47Z", "message": "rebase from trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/160acd197340ef183ea5af15f34ef9790a67b70b", "committedDate": "2020-03-23T18:05:05Z", "message": "do not allow instance id in restore and global consumer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzAwMzM5", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379700339", "createdAt": "2020-03-23T18:18:17Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzQxMzM1", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379741335", "createdAt": "2020-03-23T19:14:19Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxNDoxOVrOF6UVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxNDoxOVrOF6UVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NDgxNA==", "bodyText": "Should this be GROUP_INSTANCE_ID_CONFIG ?", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396694814", "createdAt": "2020-03-23T19:14:19Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -185,8 +195,10 @@ public void consumerConfigShouldContainAdminClientConfigsForRetriesAndRetryBackO\n     public void testGetMainConsumerConfigsWithMainConsumerOverridenPrefix() {\n         props.put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_RECORDS_CONFIG), \"5\");\n         props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.MAX_POLL_RECORDS_CONFIG), \"50\");\n+        props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.GROUP_ID_CONFIG), \"another-id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzQzMjMz", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379743233", "createdAt": "2020-03-23T19:17:10Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxNzoxMFrOF6UbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxNzoxMFrOF6UbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NjM3OA==", "bodyText": "Why do we need this 3 lines? Setting the config without prefix would set it for all consumers anyway?\nIf you want to test the overwrite with prefix, should it be it's own test?", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396696378", "createdAt": "2020-03-23T19:17:10Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -141,9 +141,19 @@ public void testGetConsumerConfigs() {\n     @Test\n     public void testGetGroupInstanceIdConfigs() {\n         props.put(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG, \"group-instance-id\");\n+        props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-1\");\n+        props.put(StreamsConfig.restoreConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-2\");\n+        props.put(StreamsConfig.globalConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzQ1MjEy", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379745212", "createdAt": "2020-03-23T19:19:55Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxOTo1NlrOF6UhZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToxOTo1NlrOF6UhZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk1OQ==", "bodyText": "Side note: We actually have NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS (similar for producer and EOS). I am wondering, if we should add a similar pattern for the restore and global consumer (might be good enough as a follow up PR though; or at least create a ticket for now?). This include logging a WARNING if a user tries to set it?", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396697959", "createdAt": "2020-03-23T19:19:56Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -1199,6 +1199,9 @@ private void verifyMaxInFlightRequestPerConnection(final Object maxInFlightReque\n \n         // no need to set group id for a restore consumer\n         baseConsumerProps.remove(ConsumerConfig.GROUP_ID_CONFIG);\n+        // no need to set instance id for a restore consumer\n+        baseConsumerProps.remove(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODM3MDky", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379837092", "createdAt": "2020-03-23T21:30:04Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozMDowNFrOF6Y1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozMTo0N1rOF6Y4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODUyMg==", "bodyText": "I want to check that no prefix would take effects here -- note I used different values for different overrides, so if it is violated we know which prefix introduced the violation.", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396768522", "createdAt": "2020-03-23T21:30:04Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -141,9 +141,19 @@ public void testGetConsumerConfigs() {\n     @Test\n     public void testGetGroupInstanceIdConfigs() {\n         props.put(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG, \"group-instance-id\");\n+        props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-1\");\n+        props.put(StreamsConfig.restoreConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-2\");\n+        props.put(StreamsConfig.globalConsumerPrefix(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG), \"group-instance-id-3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NjM3OA=="}, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODg5MA==", "bodyText": "Yeah I think that's a good idea, can be done in another PR.", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396768890", "createdAt": "2020-03-23T21:30:44Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -1199,6 +1199,9 @@ private void verifyMaxInFlightRequestPerConnection(final Object maxInFlightReque\n \n         // no need to set group id for a restore consumer\n         baseConsumerProps.remove(ConsumerConfig.GROUP_ID_CONFIG);\n+        // no need to set instance id for a restore consumer\n+        baseConsumerProps.remove(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5Nzk1OQ=="}, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2OTQwMA==", "bodyText": "This is a piggy-backed test coverage not directly related to the PR --- I wanted to make sure that whatever user specified group id is always overridden by the streams itself.", "url": "https://github.com/apache/kafka/pull/8322#discussion_r396769400", "createdAt": "2020-03-23T21:31:47Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -185,8 +195,10 @@ public void consumerConfigShouldContainAdminClientConfigsForRetriesAndRetryBackO\n     public void testGetMainConsumerConfigsWithMainConsumerOverridenPrefix() {\n         props.put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_RECORDS_CONFIG), \"5\");\n         props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.MAX_POLL_RECORDS_CONFIG), \"50\");\n+        props.put(StreamsConfig.mainConsumerPrefix(ConsumerConfig.GROUP_ID_CONFIG), \"another-id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5NDgxNA=="}, "originalCommit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTE2Njk3", "url": "https://github.com/apache/kafka/pull/8322#pullrequestreview-379916697", "createdAt": "2020-03-24T00:08:47Z", "commit": {"oid": "160acd197340ef183ea5af15f34ef9790a67b70b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 336, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}