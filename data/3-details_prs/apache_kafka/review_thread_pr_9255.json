{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTc0ODM1", "number": 9255, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMTo1NlrOEgqpOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0NDoxOFrOEitiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4NTcxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMTo1NlrOHNmxfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNzozMTozOFrOHNnHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODc5Nw==", "bodyText": "Few nitpicks here:\nConvert an ISO8601 based timestamp to an epoch value\n....\n@return epoch value of a given timestamp\n@throws ParseException for timestamp that doesn't follow ISO8601 format", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028797", "createdAt": "2020-09-06T06:31:56Z", "author": {"login": "brary"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,35 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+\n+    /**\n+     * Convert a ISO8601 based TimeStamp to Epoch Value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAzNDQwMw==", "bodyText": "This was not addressed, you disagree with the changes suggested?", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484034403", "createdAt": "2020-09-06T07:31:38Z", "author": {"login": "brary"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,35 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+\n+    /**\n+     * Convert a ISO8601 based TimeStamp to Epoch Value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODc5Nw=="}, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4NjYzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzowNlrOHNmx4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzowNlrOHNmx4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODg5Nw==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028897", "createdAt": "2020-09-06T06:33:06Z", "author": {"login": "brary"}, "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "diffHunk": "@@ -30,11 +30,10 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4NjY1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzoxMVrOHNmx5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzoxMVrOHNmx5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODkwMA==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028900", "createdAt": "2020-09-06T06:33:11Z", "author": {"login": "brary"}, "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "diffHunk": "@@ -30,11 +30,10 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+\n import java.time.Duration;\n import java.util.Collections;\n-import java.util.Date;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4NjY2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzoxN1rOHNmx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzoxN1rOHNmx5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODkwMg==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028902", "createdAt": "2020-09-06T06:33:17Z", "author": {"login": "brary"}, "path": "streams/src/test/java/org/apache/kafka/streams/tools/StreamsResetterTest.java", "diffHunk": "@@ -43,7 +42,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4Njg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzozOVrOHNmyAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzozOVrOHNmyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODkzMA==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028930", "createdAt": "2020-09-06T06:33:39Z", "author": {"login": "brary"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -42,13 +42,13 @@\n \n import java.io.IOException;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+\n import java.time.Duration;\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Date;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4Njg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzo0MlrOHNmyBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzo0MlrOHNmyBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODkzMg==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028932", "createdAt": "2020-09-06T06:33:42Z", "author": {"login": "brary"}, "path": "core/src/main/scala/kafka/tools/StreamsResetter.java", "diffHunk": "@@ -42,13 +42,13 @@\n \n import java.io.IOException;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjg4NzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzo1MlrOHNmyFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNjozMzo1MlrOHNmyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAyODk1MA==", "bodyText": "nit: Please remove this line new line.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484028950", "createdAt": "2020-09-06T06:33:52Z", "author": {"login": "brary"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -17,7 +17,7 @@\n \n package kafka.admin\n \n-import java.text.{ParseException, SimpleDateFormat}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9331c2681156ce81b982a60ed4f9b99b39965b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjkzMTQ1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNzozMDo1NVrOHNnHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNzozMDo1NVrOHNnHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAzNDMyOQ==", "bodyText": "There is an extra line here.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r484034329", "createdAt": "2020-09-06T07:30:55Z", "author": {"login": "brary"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,35 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3892174c250ac4b4727335706223efefc2c0a208"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMyMDE0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjozNzoxNFrOHQvpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxNTowNlrOHS10ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxOTkzOQ==", "bodyText": "nit: I don't know from the top of my head what the standard dictates. Might be worth adding to the comment?", "url": "https://github.com/apache/kafka/pull/9255#discussion_r487319939", "createdAt": "2020-09-11T22:37:14Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxODE4MQ==", "bodyText": "Hi @mjsax thanks for reviewing my PR.\nI removed \"ISO8601\" that from the comment as i checked every formatter library follow same ISO8601 standard. please let me know ur thoughts on that.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489518181", "createdAt": "2020-09-16T15:15:06Z", "author": {"login": "manijndl7"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxOTkzOQ=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMyNTM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0MDoyNlrOHQvsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoxMDo0MFrOHanZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMDcyOA==", "bodyText": "I am must wondering if we can have a dependency from core to clients module? \\cc @ijuma", "url": "https://github.com/apache/kafka/pull/9255#discussion_r487320728", "createdAt": "2020-09-11T22:40:26Z", "author": {"login": "mjsax"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -823,7 +809,7 @@ object ConsumerGroupCommand extends Logging {\n           case (topicPartition, newOffset) => (topicPartition, new OffsetAndMetadata(newOffset))\n         }\n       } else if (opts.options.has(opts.resetToDatetimeOpt)) {\n-        val timestamp = convertTimestamp(opts.options.valueOf(opts.resetToDatetimeOpt))\n+        val timestamp = Utils.getDateTime(opts.options.valueOf(opts.resetToDatetimeOpt))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNTE4OQ==", "bodyText": "@mjsax @guozhangwang request you to please suggest where we can put this common code.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489515189", "createdAt": "2020-09-16T15:11:03Z", "author": {"login": "manijndl7"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -823,7 +809,7 @@ object ConsumerGroupCommand extends Logging {\n           case (topicPartition, newOffset) => (topicPartition, new OffsetAndMetadata(newOffset))\n         }\n       } else if (opts.options.has(opts.resetToDatetimeOpt)) {\n-        val timestamp = convertTimestamp(opts.options.valueOf(opts.resetToDatetimeOpt))\n+        val timestamp = Utils.getDateTime(opts.options.valueOf(opts.resetToDatetimeOpt))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMDcyOA=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2NTkwNw==", "bodyText": "core does depend on clients generally.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r497665907", "createdAt": "2020-09-30T17:02:49Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -823,7 +809,7 @@ object ConsumerGroupCommand extends Logging {\n           case (topicPartition, newOffset) => (topicPartition, new OffsetAndMetadata(newOffset))\n         }\n       } else if (opts.options.has(opts.resetToDatetimeOpt)) {\n-        val timestamp = convertTimestamp(opts.options.valueOf(opts.resetToDatetimeOpt))\n+        val timestamp = Utils.getDateTime(opts.options.valueOf(opts.resetToDatetimeOpt))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMDcyOA=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3MDQ5Ng==", "bodyText": "Thanks for clarification. So we are good.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r497670496", "createdAt": "2020-09-30T17:10:40Z", "author": {"login": "mjsax"}, "path": "core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala", "diffHunk": "@@ -823,7 +809,7 @@ object ConsumerGroupCommand extends Logging {\n           case (topicPartition, newOffset) => (topicPartition, new OffsetAndMetadata(newOffset))\n         }\n       } else if (opts.options.has(opts.resetToDatetimeOpt)) {\n-        val timestamp = convertTimestamp(opts.options.valueOf(opts.resetToDatetimeOpt))\n+        val timestamp = Utils.getDateTime(opts.options.valueOf(opts.resetToDatetimeOpt))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMDcyOA=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMyODA3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0MTo1NFrOHQvuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxMTo1MFrOHS1rCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTEzNQ==", "bodyText": "We should update this test and use assertThrows instead of try-fail-catch.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r487321135", "createdAt": "2020-09-11T22:41:54Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -784,4 +787,39 @@ public void testCloseAllQuietly() {\n         assertEquals(msg, exception.get().getMessage());\n         assertEquals(1, count.get());\n     }\n+\n+    @Test\n+    public void shouldAcceptValidDateFormats() throws ParseException {\n+        //check valid formats\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowOnInvalidDateFormat() {\n+        //check some invalid formats\n+        try {\n+            invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNTc4NQ==", "bodyText": "agreed , i have made code changes for that please have a look if its correct", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489515785", "createdAt": "2020-09-16T15:11:50Z", "author": {"login": "manijndl7"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -784,4 +787,39 @@ public void testCloseAllQuietly() {\n         assertEquals(msg, exception.get().getMessage());\n         assertEquals(1, count.get());\n     }\n+\n+    @Test\n+    public void shouldAcceptValidDateFormats() throws ParseException {\n+        //check valid formats\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowOnInvalidDateFormat() {\n+        //check some invalid formats\n+        try {\n+            invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTEzNQ=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMyODcwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0MjoyMlrOHQvuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNToxMTo1M1rOHS1rOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTI0OQ==", "bodyText": "We should not print the stacktrace imho, but verify the exception message using assertThat.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r487321249", "createdAt": "2020-09-11T22:42:22Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -784,4 +787,39 @@ public void testCloseAllQuietly() {\n         assertEquals(msg, exception.get().getMessage());\n         assertEquals(1, count.get());\n     }\n+\n+    @Test\n+    public void shouldAcceptValidDateFormats() throws ParseException {\n+        //check valid formats\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowOnInvalidDateFormat() {\n+        //check some invalid formats\n+        try {\n+            invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\"));\n+            fail(\"Call to getDateTime should fail\");\n+        } catch (final Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNTgzMw==", "bodyText": "i have made code changes for that", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489515833", "createdAt": "2020-09-16T15:11:53Z", "author": {"login": "manijndl7"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -784,4 +787,39 @@ public void testCloseAllQuietly() {\n         assertEquals(msg, exception.get().getMessage());\n         assertEquals(1, count.get());\n     }\n+\n+    @Test\n+    public void shouldAcceptValidDateFormats() throws ParseException {\n+        //check valid formats\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXX\"));\n+        invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowOnInvalidDateFormat() {\n+        //check some invalid formats\n+        try {\n+            invokeGetDateTimeMethod(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\"));\n+            fail(\"Call to getDateTime should fail\");\n+        } catch (final Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTI0OQ=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODMzMTg2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0NDoxOFrOHQvwfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzowOToyOFrOHanWrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTcyNg==", "bodyText": "I know that this is exiting logic that was just moved, but I am not sure if I understand how it works?", "url": "https://github.com/apache/kafka/pull/9255#discussion_r487321726", "createdAt": "2020-09-11T22:44:18Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value\n+     * @param timestamp to be converted\n+     * @return epoch value of a given timestamp\n+     * @throws ParseException for timestamp that doesn't follow ISO8601 format\n+     */\n+    public static long getDateTime(String timestamp) throws ParseException {\n+        final String[] timestampParts = timestamp.split(\"T\");\n+        if (timestampParts.length < 2) {\n+            throw new ParseException(\"Error parsing timestamp. It does not contain a 'T' according to ISO8601 format\", timestamp.length());\n+        }\n+\n+        final String secondPart = timestampParts[1];\n+        if (secondPart == null || secondPart.isEmpty()) {\n+            throw new ParseException(\"Error parsing timestamp. Time part after 'T' is null or empty\", timestamp.length());\n+        }\n+\n+        if (!(secondPart.contains(\"+\") || secondPart.contains(\"-\") || secondPart.contains(\"Z\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzMTc0MQ==", "bodyText": "@mjsax please let me know if ur asking anything specific i will try to explore that bt following is my understanding about this fxn : -\n-call from (streamResetter/ commandgroup) to reset the offset based on epooch value given timestamp.\n\ncheck the format is correct if correct else throw exception.\nappend \"Z\" for UTC timezone if not there.\nparse and get the time.\n\nBut i tested by running all the unit cases.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489531741", "createdAt": "2020-09-16T15:32:55Z", "author": {"login": "manijndl7"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value\n+     * @param timestamp to be converted\n+     * @return epoch value of a given timestamp\n+     * @throws ParseException for timestamp that doesn't follow ISO8601 format\n+     */\n+    public static long getDateTime(String timestamp) throws ParseException {\n+        final String[] timestampParts = timestamp.split(\"T\");\n+        if (timestampParts.length < 2) {\n+            throw new ParseException(\"Error parsing timestamp. It does not contain a 'T' according to ISO8601 format\", timestamp.length());\n+        }\n+\n+        final String secondPart = timestampParts[1];\n+        if (secondPart == null || secondPart.isEmpty()) {\n+            throw new ParseException(\"Error parsing timestamp. Time part after 'T' is null or empty\", timestamp.length());\n+        }\n+\n+        if (!(secondPart.contains(\"+\") || secondPart.contains(\"-\") || secondPart.contains(\"Z\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTcyNg=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDYyMg==", "bodyText": "@mjsax request you to please review this again.\nThanks !!", "url": "https://github.com/apache/kafka/pull/9255#discussion_r489534622", "createdAt": "2020-09-16T15:36:58Z", "author": {"login": "manijndl7"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value\n+     * @param timestamp to be converted\n+     * @return epoch value of a given timestamp\n+     * @throws ParseException for timestamp that doesn't follow ISO8601 format\n+     */\n+    public static long getDateTime(String timestamp) throws ParseException {\n+        final String[] timestampParts = timestamp.split(\"T\");\n+        if (timestampParts.length < 2) {\n+            throw new ParseException(\"Error parsing timestamp. It does not contain a 'T' according to ISO8601 format\", timestamp.length());\n+        }\n+\n+        final String secondPart = timestampParts[1];\n+        if (secondPart == null || secondPart.isEmpty()) {\n+            throw new ParseException(\"Error parsing timestamp. Time part after 'T' is null or empty\", timestamp.length());\n+        }\n+\n+        if (!(secondPart.contains(\"+\") || secondPart.contains(\"-\") || secondPart.contains(\"Z\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTcyNg=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NjQ5Mw==", "bodyText": "Hi @mjax request you to please review once.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r495786493", "createdAt": "2020-09-28T08:54:52Z", "author": {"login": "manijndl7"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value\n+     * @param timestamp to be converted\n+     * @return epoch value of a given timestamp\n+     * @throws ParseException for timestamp that doesn't follow ISO8601 format\n+     */\n+    public static long getDateTime(String timestamp) throws ParseException {\n+        final String[] timestampParts = timestamp.split(\"T\");\n+        if (timestampParts.length < 2) {\n+            throw new ParseException(\"Error parsing timestamp. It does not contain a 'T' according to ISO8601 format\", timestamp.length());\n+        }\n+\n+        final String secondPart = timestampParts[1];\n+        if (secondPart == null || secondPart.isEmpty()) {\n+            throw new ParseException(\"Error parsing timestamp. Time part after 'T' is null or empty\", timestamp.length());\n+        }\n+\n+        if (!(secondPart.contains(\"+\") || secondPart.contains(\"-\") || secondPart.contains(\"Z\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTcyNg=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2OTgwNw==", "bodyText": "I was looking up the format in more detail and understand now what going on. The code does not seem to be ideal IMHO, but no need to change it in this PR.", "url": "https://github.com/apache/kafka/pull/9255#discussion_r497669807", "createdAt": "2020-09-30T17:09:28Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1271,4 +1274,34 @@ private static byte checkRange(final byte i) {\n         }\n         return map;\n     }\n+\n+    /**\n+     * Convert an ISO8601 based timestamp to an epoch value\n+     * @param timestamp to be converted\n+     * @return epoch value of a given timestamp\n+     * @throws ParseException for timestamp that doesn't follow ISO8601 format\n+     */\n+    public static long getDateTime(String timestamp) throws ParseException {\n+        final String[] timestampParts = timestamp.split(\"T\");\n+        if (timestampParts.length < 2) {\n+            throw new ParseException(\"Error parsing timestamp. It does not contain a 'T' according to ISO8601 format\", timestamp.length());\n+        }\n+\n+        final String secondPart = timestampParts[1];\n+        if (secondPart == null || secondPart.isEmpty()) {\n+            throw new ParseException(\"Error parsing timestamp. Time part after 'T' is null or empty\", timestamp.length());\n+        }\n+\n+        if (!(secondPart.contains(\"+\") || secondPart.contains(\"-\") || secondPart.contains(\"Z\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTcyNg=="}, "originalCommit": {"oid": "1f5aa568a1d3c1fbd2160b82524bbdf4bf7c3fa1"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1999, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}