{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDc2MTQ0", "number": 8299, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNzoxNlrODoBciQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyMDoxM1rODpTFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzMzIxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNzoxNlrOF2XAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNzoxNlrOF2XAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDM3Nw==", "bodyText": "This is unrelated to this change, I just happened to notice this test didn't seem to actually be testing anything at all", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544377", "createdAt": "2020-03-14T01:27:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkzNjA0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorError.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMTozNFrOF2XCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMTozNFrOF2XCBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDc3NA==", "bodyText": "We can reuse this for KIP-441 as well", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544774", "createdAt": "2020-03-14T01:31:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorError.java", "diffHunk": "@@ -19,7 +19,7 @@\n public enum AssignorError {\n     NONE(0),\n     INCOMPLETE_SOURCE_TOPIC_METADATA(1),\n-    VERSION_PROBING(2);\n+    REBALANCE_NEEDED(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ0NzE4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDo1NDoyN1rOF3Khzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjowNjoyN1rOF3LkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4ODQ5NA==", "bodyText": "Are we deprecating the VERSION_PROBING?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393388494", "createdAt": "2020-03-17T00:54:27Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -496,9 +496,7 @@ private void runLoop() {\n         while (isRunning() || taskManager.isRebalanceInProgress()) {\n             try {\n                 runOnce();\n-                if (assignmentErrorCode.get() == AssignorError.VERSION_PROBING.code()) {\n-                    log.info(\"Version probing detected. Rejoining the consumer group to trigger a new rebalance.\");\n-\n+                if (assignmentErrorCode.get() == AssignorError.REBALANCE_NEEDED.code()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNTQ3NQ==", "bodyText": "This isn't a client or externally-facing config, just something each thread sets internally if it detects version probing during onAssignment\nIf you're asking about the old log message, I moved it to where we set the error code.", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393405475", "createdAt": "2020-03-17T02:06:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -496,9 +496,7 @@ private void runLoop() {\n         while (isRunning() || taskManager.isRebalanceInProgress()) {\n             try {\n                 runOnce();\n-                if (assignmentErrorCode.get() == AssignorError.VERSION_PROBING.code()) {\n-                    log.info(\"Version probing detected. Rejoining the consumer group to trigger a new rebalance.\");\n-\n+                if (assignmentErrorCode.get() == AssignorError.REBALANCE_NEEDED.code()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4ODQ5NA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDY3MzQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowNjo0OFrOF3gf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowNjo0OFrOF3gf9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODQ3MA==", "bodyText": "Remove only maybe?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393748470", "createdAt": "2020-03-17T15:06:48Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDY4MjgxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowOTowM1rOF3gl_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMDo1MlrOF3oQJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MDAxNA==", "bodyText": "Could we also verify streamsMetadataState?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393750014", "createdAt": "2020-03-17T15:09:03Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));\n \n         EasyMock.verify(taskManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5Mg==", "bodyText": "streamsMetadataState isn't really part of this test, we just have to create the mock as part of the setup for the assignor configuration", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393875492", "createdAt": "2020-03-17T18:10:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));\n \n         EasyMock.verify(taskManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MDAxNA=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDcwNTY3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNDoxM1rOF3g00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMTowMFrOF3oQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MzgxMQ==", "bodyText": "nit: I feel we could internalize the hostInfo creation, including the null check:\nhostInfo = HostInfo.buildFromEndpoint(endPoint);", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393753811", "createdAt": "2020-03-17T15:14:13Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -110,20 +107,7 @@ public int hashCode() {\n         ClientMetadata(final String endPoint) {\n \n             // get the host info if possible\n-            if (endPoint != null) {\n-                final String host = getHost(endPoint);\n-                final Integer port = getPort(endPoint);\n-\n-                if (host == null || port == null) {\n-                    throw new ConfigException(\n-                        String.format(\"Error parsing host address %s. Expected format host:port.\", endPoint)\n-                    );\n-                }\n-\n-                hostInfo = new HostInfo(host, port);\n-            } else {\n-                hostInfo = null;\n-            }\n+            hostInfo = endPoint != null ? HostInfo.buildFromEndpoint(endPoint) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTU4NQ==", "bodyText": "Ack", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393875585", "createdAt": "2020-03-17T18:11:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -110,20 +107,7 @@ public int hashCode() {\n         ClientMetadata(final String endPoint) {\n \n             // get the host info if possible\n-            if (endPoint != null) {\n-                final String host = getHost(endPoint);\n-                final Integer port = getPort(endPoint);\n-\n-                if (host == null || port == null) {\n-                    throw new ConfigException(\n-                        String.format(\"Error parsing host address %s. Expected format host:port.\", endPoint)\n-                    );\n-                }\n-\n-                hostInfo = new HostInfo(host, port);\n-            } else {\n-                hostInfo = null;\n-            }\n+            hostInfo = endPoint != null ? HostInfo.buildFromEndpoint(endPoint) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MzgxMQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDcxNTYxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNjoyN1rOF3g7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNjoyN1rOF3g7NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTQ0NQ==", "bodyText": "nit: space after )", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755445", "createdAt": "2020-03-17T15:16:27Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1392,6 +1398,10 @@ protected void setAssignmentErrorCode(final Integer errorCode) {\n         assignmentErrorCode.set(errorCode);\n     }\n \n+    Integer assignmentErrorCode(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDcxNzM2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/HostInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNjo1MVrOF3g8Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoyNzozNlrOF3o2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTczOA==", "bodyText": "Have you also migrated the unit test?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755738", "createdAt": "2020-03-17T15:16:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/HostInfo.java", "diffHunk": "@@ -46,6 +50,22 @@ public HostInfo(final String host,\n         this.port = port;\n     }\n \n+    /**\n+     *\n+     * @throws ConfigException if the host or port cannot be parsed from the given endpoint string\n+     */\n+    public static HostInfo buildFromEndpoint(final String endPoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NTMyNA==", "bodyText": "I don't think we need to migrate all the unit tests, since we just pass in a host+port directly (vs building it from a single string). But I'll add unit tests for the static builder", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393885324", "createdAt": "2020-03-17T18:27:36Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/HostInfo.java", "diffHunk": "@@ -46,6 +50,22 @@ public HostInfo(final String host,\n         this.port = port;\n     }\n \n+    /**\n+     *\n+     * @throws ConfigException if the host or port cannot be parsed from the given endpoint string\n+     */\n+    public static HostInfo buildFromEndpoint(final String endPoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTczOA=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc0MDYyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToyMjowNVrOF3hLXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozNzo1MlrOF3pPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1OTU4Mg==", "bodyText": "Combine L1421-1422 with times(2)?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393759582", "createdAt": "2020-03-17T15:22:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU5Ng==", "bodyText": "Modified to expect the actual host state", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393891596", "createdAt": "2020-03-17T18:37:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1OTU4Mg=="}, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc0NjEwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToyMzoxOVrOF3hO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOToyNFrOF3pSpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MDQ4Mg==", "bodyText": "streamsMetadataState never been used?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393760482", "createdAt": "2020-03-17T15:23:19Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjUxOQ==", "bodyText": "It's used during the assignor configuration, you have to set it up in all these tests. I just opened a PR to clean this up so once it's merged I'll rebase this PR and remove this here -- see #8306", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393892519", "createdAt": "2020-03-17T18:39:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MDQ4Mg=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc1MTExOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToyNDozMVrOF3hSRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODozOTozNVrOF3pTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MTM1MQ==", "bodyText": "Could we just check if the error code is null?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393761351", "createdAt": "2020-03-17T15:24:31Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyOQ==", "bodyText": "Good point", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393892629", "createdAt": "2020-03-17T18:39:35Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MTM1MQ=="}, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjA1NzAxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMTo0N1rOF3uhMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1Njo0NlrOF3yF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODE2MQ==", "bodyText": "nit: Just my usual habit, I think we should get a separate test file HostInfoTest instead.", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393978161", "createdAt": "2020-03-17T21:21:47Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,21 +1406,86 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n \n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.eq(initialHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.eq(newHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChange() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.NONE.code()));\n \n         EasyMock.verify(taskManager);\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjcyOA==", "bodyText": "fair enough, moved to HostInfoTest", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394036728", "createdAt": "2020-03-17T23:56:46Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,21 +1406,86 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n \n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.eq(initialHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.eq(newHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChange() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.NONE.code()));\n \n         EasyMock.verify(taskManager);\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODE2MQ=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMwODQzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyMDoxM1rOF4Y38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowODoyMlrOF4Z82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MjExNA==", "bodyText": "nit: extra spaces?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394672114", "createdAt": "2020-03-18T22:20:13Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1281,15 +1284,54 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c457cbd193c011347903439463da5e0a46b19f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTc1NQ==", "bodyText": "Ack, I'll fix this in a next PR", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394689755", "createdAt": "2020-03-18T23:08:22Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1281,15 +1284,54 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MjExNA=="}, "originalCommit": {"oid": "80c457cbd193c011347903439463da5e0a46b19f"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3338, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}