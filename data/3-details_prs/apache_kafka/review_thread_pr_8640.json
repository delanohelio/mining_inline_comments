{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NjY4MjI0", "number": 8640, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1MzoyNFrOEBH1dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1NDozMVrOEBH1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjEyNDA3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1MzoyNFrOGc0BXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowODowOVrOGgn4Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTYyOA==", "bodyText": "Did you mean to make a change to unknownTaggedFields before the two asserts above?", "url": "https://github.com/apache/kafka/pull/8640#discussion_r432865628", "createdAt": "2020-05-30T15:53:24Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -962,4 +962,23 @@ private void verifyWriteSucceeds(short version, Message message) throws Exceptio\n         assertEquals(\"Expected the serialized size to be \" + size +\n             \", but it was \" + buf.position(), size, buf.position());\n     }\n+\n+    @Test\n+    public void testCompareWithUnknownTaggedFields() throws Exception {\n+        CreateTopicsRequestData createTopics = new CreateTopicsRequestData();\n+        createTopics.setTimeoutMs(123);\n+        CreateTopicsRequestData createTopics2 = new CreateTopicsRequestData();\n+        createTopics2.setTimeoutMs(123);\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);\n+        createTopics.unknownTaggedFields();\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTUxNA==", "bodyText": "No, this is intentional.  Invoking unknownTaggedFields will create the list if it doesn't exist.  There is an optimization where if the list is empty, as it will be the vast majority of the time, we just store null.  Example:\n    @Override\n    public List<RawTaggedField> unknownTaggedFields() {\n        if (_unknownTaggedFields == null) {\n            _unknownTaggedFields = new ArrayList<>(0);\n        }\n        return _unknownTaggedFields;\n    }\n\nTherefore it is good to test that messages with null here are equivalent (via equals) to messages that have an empty list here.", "url": "https://github.com/apache/kafka/pull/8640#discussion_r436401514", "createdAt": "2020-06-07T21:02:19Z", "author": {"login": "cmccabe"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -962,4 +962,23 @@ private void verifyWriteSucceeds(short version, Message message) throws Exceptio\n         assertEquals(\"Expected the serialized size to be \" + size +\n             \", but it was \" + buf.position(), size, buf.position());\n     }\n+\n+    @Test\n+    public void testCompareWithUnknownTaggedFields() throws Exception {\n+        CreateTopicsRequestData createTopics = new CreateTopicsRequestData();\n+        createTopics.setTimeoutMs(123);\n+        CreateTopicsRequestData createTopics2 = new CreateTopicsRequestData();\n+        createTopics2.setTimeoutMs(123);\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);\n+        createTopics.unknownTaggedFields();\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTYyOA=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTkxNA==", "bodyText": "OK, can you please add a comment? It's not obvious why the accessor is being called.", "url": "https://github.com/apache/kafka/pull/8640#discussion_r436401914", "createdAt": "2020-06-07T21:06:36Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -962,4 +962,23 @@ private void verifyWriteSucceeds(short version, Message message) throws Exceptio\n         assertEquals(\"Expected the serialized size to be \" + size +\n             \", but it was \" + buf.position(), size, buf.position());\n     }\n+\n+    @Test\n+    public void testCompareWithUnknownTaggedFields() throws Exception {\n+        CreateTopicsRequestData createTopics = new CreateTopicsRequestData();\n+        createTopics.setTimeoutMs(123);\n+        CreateTopicsRequestData createTopics2 = new CreateTopicsRequestData();\n+        createTopics2.setTimeoutMs(123);\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);\n+        createTopics.unknownTaggedFields();\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTYyOA=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2MDk1OA==", "bodyText": "Added", "url": "https://github.com/apache/kafka/pull/8640#discussion_r436860958", "createdAt": "2020-06-08T17:08:09Z", "author": {"login": "cmccabe"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -962,4 +962,23 @@ private void verifyWriteSucceeds(short version, Message message) throws Exceptio\n         assertEquals(\"Expected the serialized size to be \" + size +\n             \", but it was \" + buf.position(), size, buf.position());\n     }\n+\n+    @Test\n+    public void testCompareWithUnknownTaggedFields() throws Exception {\n+        CreateTopicsRequestData createTopics = new CreateTopicsRequestData();\n+        createTopics.setTimeoutMs(123);\n+        CreateTopicsRequestData createTopics2 = new CreateTopicsRequestData();\n+        createTopics2.setTimeoutMs(123);\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);\n+        createTopics.unknownTaggedFields();\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTYyOA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjEyNDYwOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1NDozMVrOGc0BoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMTowNzoxNVrOGgL3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTY5Ng==", "bodyText": "What is the purpose of this?", "url": "https://github.com/apache/kafka/pull/8640#discussion_r432865696", "createdAt": "2020-05-30T15:54:31Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2033,15 +2033,21 @@ private void generateClassEquals(String className, StructSpec struct,\n             elementKeysAreEqual ? \"elementKeysAreEqual\" : \"equals\");\n         buffer.incrementIndent();\n         buffer.printf(\"if (!(obj instanceof %s)) return false;%n\", className);\n+        buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n         if (!struct.fields().isEmpty()) {\n-            buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n             for (FieldSpec field : struct.fields()) {\n                 if (!elementKeysAreEqual || field.mapKey()) {\n                     generateFieldEquals(field);\n                 }\n             }\n         }\n-        buffer.printf(\"return true;%n\");\n+        if (elementKeysAreEqual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTc0Nw==", "bodyText": "This function in MessageDataGenerator is used to generate equals, but it is also used to generate the elementKeysAreEqual function.  The latter function does not consider unknown tagged fields, since they can't be part of the key.", "url": "https://github.com/apache/kafka/pull/8640#discussion_r436401747", "createdAt": "2020-06-07T21:04:47Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2033,15 +2033,21 @@ private void generateClassEquals(String className, StructSpec struct,\n             elementKeysAreEqual ? \"elementKeysAreEqual\" : \"equals\");\n         buffer.incrementIndent();\n         buffer.printf(\"if (!(obj instanceof %s)) return false;%n\", className);\n+        buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n         if (!struct.fields().isEmpty()) {\n-            buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n             for (FieldSpec field : struct.fields()) {\n                 if (!elementKeysAreEqual || field.mapKey()) {\n                     generateFieldEquals(field);\n                 }\n             }\n         }\n-        buffer.printf(\"return true;%n\");\n+        if (elementKeysAreEqual) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTY5Ng=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMTk2NQ==", "bodyText": "Thanks for the clarification, makes sense.", "url": "https://github.com/apache/kafka/pull/8640#discussion_r436401965", "createdAt": "2020-06-07T21:07:15Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2033,15 +2033,21 @@ private void generateClassEquals(String className, StructSpec struct,\n             elementKeysAreEqual ? \"elementKeysAreEqual\" : \"equals\");\n         buffer.incrementIndent();\n         buffer.printf(\"if (!(obj instanceof %s)) return false;%n\", className);\n+        buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n         if (!struct.fields().isEmpty()) {\n-            buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n             for (FieldSpec field : struct.fields()) {\n                 if (!elementKeysAreEqual || field.mapKey()) {\n                     generateFieldEquals(field);\n                 }\n             }\n         }\n-        buffer.printf(\"return true;%n\");\n+        if (elementKeysAreEqual) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTY5Ng=="}, "originalCommit": null, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2558, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}