{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjE0NDg2", "number": 8386, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMjoyMFrODspYIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMzoxN1rODspZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQxODU5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMjoyMFrOF9nFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMjoyMFrOF9nFwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzkwNg==", "bodyText": "I added the check for the exception.", "url": "https://github.com/apache/kafka/pull/8386#discussion_r400147906", "createdAt": "2020-03-30T12:22:20Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "diffHunk": "@@ -122,38 +123,34 @@ public void shouldAvoidFlushingDeletionsWithoutDirtyKeys() {\n     }\n \n     @Test\n-    public void shouldCloseWrappedStoreAfterErrorDuringCacheFlush() {\n+    public void shouldCloseWrappedStoreAndCacheAfterErrorDuringCacheFlush() {\n         setUpCloseTests();\n+        EasyMock.reset(cache);\n         cache.flush(CACHE_NAMESPACE);\n-        EasyMock.expectLastCall().andThrow(new NullPointerException(\"Simulating an error on flush\"));\n+        EasyMock.expectLastCall().andThrow(new RuntimeException(\"Simulating an error on flush\"));\n         EasyMock.replay(cache);\n         EasyMock.reset(underlyingStore);\n         underlyingStore.close();\n         EasyMock.replay(underlyingStore);\n \n-        try {\n-            store.close();\n-        } catch (final RuntimeException exception) {\n-            EasyMock.verify(underlyingStore);\n-        }\n+        assertThrows(RuntimeException.class, store::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15157c0c05f0d883e6db1791936d8f0db17fa7a5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQyMjIxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMzoxN1rOF9nH8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMzoxN1rOF9nH8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODQ2NQ==", "bodyText": "I added the verification for the call to close() of underlying store and cache.", "url": "https://github.com/apache/kafka/pull/8386#discussion_r400148465", "createdAt": "2020-03-30T12:23:17Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "diffHunk": "@@ -122,38 +123,34 @@ public void shouldAvoidFlushingDeletionsWithoutDirtyKeys() {\n     }\n \n     @Test\n-    public void shouldCloseWrappedStoreAfterErrorDuringCacheFlush() {\n+    public void shouldCloseWrappedStoreAndCacheAfterErrorDuringCacheFlush() {\n         setUpCloseTests();\n+        EasyMock.reset(cache);\n         cache.flush(CACHE_NAMESPACE);\n-        EasyMock.expectLastCall().andThrow(new NullPointerException(\"Simulating an error on flush\"));\n+        EasyMock.expectLastCall().andThrow(new RuntimeException(\"Simulating an error on flush\"));\n         EasyMock.replay(cache);\n         EasyMock.reset(underlyingStore);\n         underlyingStore.close();\n         EasyMock.replay(underlyingStore);\n \n-        try {\n-            store.close();\n-        } catch (final RuntimeException exception) {\n-            EasyMock.verify(underlyingStore);\n-        }\n+        assertThrows(RuntimeException.class, store::close);\n+        EasyMock.verify(cache, underlyingStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15157c0c05f0d883e6db1791936d8f0db17fa7a5"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3148, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}