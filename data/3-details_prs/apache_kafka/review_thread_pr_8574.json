{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjI2OTcy", "number": 8574, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyNzowN1rOD3R2Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0NjoyOVrOD3SXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjkwNjcwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyNzowN1rOGNclVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDowNTowNVrOGOO-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1Mjk4Mg==", "bodyText": "Hopefully, this explains what's going on here.", "url": "https://github.com/apache/kafka/pull/8574#discussion_r416752982", "createdAt": "2020-04-28T16:27:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -972,13 +974,26 @@ boolean sendingOldValueEnabled() {\n         //This occurs whenever the extracted foreignKey changes values.\n         enableSendingOldValues();\n \n+        final NamedInternal renamed = new NamedInternal(joinName);\n+\n+        final String subscriptionTopicName = renamed.suffixWithOrElseGet(\n+            \"-subscription-registration\",\n+            builder,\n+            SUBSCRIPTION_REGISTRATION\n+        ) + TOPIC_SUFFIX;\n \n+        // the decoration can't be performed until we have the configuration available when the app runs,\n+        // so we pass Suppliers into the components, which they can call at run time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8467de1e064eef4e06114757e7d3b1d2331940"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3ODU1Nw==", "bodyText": "I understood", "url": "https://github.com/apache/kafka/pull/8574#discussion_r417578557", "createdAt": "2020-04-29T20:05:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -972,13 +974,26 @@ boolean sendingOldValueEnabled() {\n         //This occurs whenever the extracted foreignKey changes values.\n         enableSendingOldValues();\n \n+        final NamedInternal renamed = new NamedInternal(joinName);\n+\n+        final String subscriptionTopicName = renamed.suffixWithOrElseGet(\n+            \"-subscription-registration\",\n+            builder,\n+            SUBSCRIPTION_REGISTRATION\n+        ) + TOPIC_SUFFIX;\n \n+        // the decoration can't be performed until we have the configuration available when the app runs,\n+        // so we pass Suppliers into the components, which they can call at run time", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1Mjk4Mg=="}, "originalCommit": {"oid": "8e8467de1e064eef4e06114757e7d3b1d2331940"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjk3NjU3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapperSerde.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0MzoyN1rOGNdQ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0MzoyN1rOGNdQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NDE1OA==", "bodyText": "This (and below) is a bit awkward.\nOur requirement is not to call the supplier until after the app starts, but we can call it any time after the app starts.\nThe natural place would be in configure, but unfortunately, that method is basically useless for our internal serdes. The reason is that we previously decided that configure should be called externally to the DSL, but our internal serdes are constructed internal to the DSL. Plus, configure must be called at run time (when the config is available), but by run time, we can no longer tell whether our serde is \"internal\" or not. So, there's no good place where we can call configure for our internal serdes.\nI'm side-stepping the problem here by just invoking the supplier when we first need to use it, which is also at run time.", "url": "https://github.com/apache/kafka/pull/8574#discussion_r416764158", "createdAt": "2020-04-28T16:43:27Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapperSerde.java", "diffHunk": "@@ -76,6 +78,10 @@ public void setIfUnset(final Serializer<K> defaultSerializer) {\n                 throw new UnsupportedVersionException(\"SubscriptionWrapper version is larger than maximum supported 0x7F\");\n             }\n \n+            if (primaryKeySerializationPseudoTopic == null) {\n+                primaryKeySerializationPseudoTopic = primaryKeySerializationPseudoTopicSupplier.get();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8467de1e064eef4e06114757e7d3b1d2331940"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjk4NjQ2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0NTo0MVrOGNdXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0NTo0MVrOGNdXAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NTY5Ng==", "bodyText": "I'm adding a new public method for our specific use case here, to document that we should only need to invoke this method publicly for \"pseudo\" topics.", "url": "https://github.com/apache/kafka/pull/8574#discussion_r416765696", "createdAt": "2020-04-28T16:45:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1224,6 +1224,10 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return decoratedTopics;\n     }\n \n+    public String decoratePseudoTopic(final String topic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8467de1e064eef4e06114757e7d3b1d2331940"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjk5MDczOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0NjoyOVrOGNdZag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjo0NjoyOVrOGNdZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NjMxNA==", "bodyText": "This verifies the fix: the pseudo topics should also be prefixed. I should have noticed before that they weren't.", "url": "https://github.com/apache/kafka/pull/8574#discussion_r416766314", "createdAt": "2020-04-28T16:46:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "diffHunk": "@@ -218,19 +220,19 @@ public void shouldUseExpectedTopicsWithSerde() {\n         }\n         // verifying primarily that no extra pseudo-topics were used, but it's nice to also verify the rest of the\n         // topics our serdes serialize data for\n-        assertThat(serdeScope.registeredTopics(), CoreMatchers.is(mkSet(\n+        assertThat(serdeScope.registeredTopics(), is(mkSet(\n             // expected pseudo-topics\n-            \"KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-fk--key\",\n-            \"KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-pk--key\",\n-            \"KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-vh--value\",\n+            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-fk--key\",\n+            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-pk--key\",\n+            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-vh--value\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8467de1e064eef4e06114757e7d3b1d2331940"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2817, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}