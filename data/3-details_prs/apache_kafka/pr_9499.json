{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NzI5NzU3", "number": 9499, "title": "KAFKA-10470: Zstd upgrade and buffering", "bodyText": "Zstd-jni 1.4.5-6 allocates large internal buffers inside of ZstdInputStream and ZstdOutputStream. This caused a lot of allocation and GC activity when creating and closing the streams. It also does not buffer the reads or writes. This causes inefficiency when DefaultRecord.writeTo() does a series of small single bytes reads using various ByteUtils methods. The JNI is more efficient if the writes of uncompressed data were flushed in large pieces rather than for each byte. This is due to the the expense of context switching between the Java code and the native code. This is also the case when reading as well. Per luben/zstd-jni#141 the maintainer of zstd-jni and I agreed to not buffer reads and writes in favor of having the caller do that, so here we are updating the caller. Here is part of a flame graph of  CPU time spent in the single byte writes from Kafka:\n\nIn this patch, I upgraded to the most recent zstd-jni version with the buffer reuse built-in. This was done in luben/zstd-jni#143 and luben/zstd-jni#146 Since we decided not to add additional buffering of input/output with zstd-jni, I added the BufferedInputStream and BufferedOutputStream to CompressionType.ZSTD just like we currently do for CompressionType.GZIP which also is inefficient for single byte reads and writes. I used the same buffer sizes as that existing implementation.\nNOTE: if so desired we could pass a wrapped BufferSupplier into the Zstd*Stream classes to have Kafka decide how the buffer recycling occurs. This functionality was added in the latter PR linked above. I am holding off on this since based on jmh benchmarking the performance gains were not clear and personally I don't know if it worth the complexity of trying to hack around the reflection at this point in time. The zstd-jni uses a very similar default recycler as snappy does currently which seems to provide decent efficiency. While this PR fixes the defect, I feel that using BufferSupplier in both zstd-jni and snappy is outside of the scope of this bugfix and should be considered a separate improvement. I would prefer this change get merged in on its own since the performance gains here are very significant relative to the more incremental and minor optimizations which could be achieved by doing that separate work.\nThere are some noticeable improvements in the JMH benchmarks (excerpt):\nBEFORE:\nBenchmark                                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score     Error   Units\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   27743.260 \u00b1 673.869   ops/s\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3399.966 \u00b1  82.608  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134968.010 \u00b1   0.012    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3850.985 \u00b1  84.476  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152881.128 \u00b1 942.189    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     174.241 \u00b1   3.486  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6917.758 \u00b1  82.522    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1689.000            counts\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82621.000                ms\nJMH benchmarks done\n\nBenchmark                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score       Error   Units\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   24095.711 \u00b1   895.866   ops/s\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.alloc.rate                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2932.289 \u00b1   109.465  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.alloc.rate.norm                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134032.012 \u00b1     0.013    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Eden_Space                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3282.912 \u00b1   115.042  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Eden_Space.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150073.914 \u00b1  1342.235    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Survivor_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     149.697 \u00b1     5.786  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Survivor_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6842.462 \u00b1    64.515    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.count                                          CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.000              counts\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.time                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82518.000                  ms\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.060 \u00b1   230.498   ops/s\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.alloc.rate                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     198.051 \u00b1    31.532  MB/sec\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.alloc.rate.norm                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150502.519 \u00b1     0.186    B/op\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     200.064 \u00b1    31.879  MB/sec\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152569.341 \u00b1 13826.686    B/op\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.count                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      91.000              counts\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.time                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   75869.000                  ms\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2609.660 \u00b1  1145.160   ops/s\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     815.441 \u00b1   357.818  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  344309.097 \u00b1     0.238    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     808.952 \u00b1   354.975  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  345712.061 \u00b1 51434.034    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.019 \u00b1     0.042  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      18.615 \u00b1    42.045    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      24.132 \u00b1    12.254  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   13540.960 \u00b1 14649.192    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     148.000              counts\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   23848.000                  ms\nJMH benchmarks done\n\nAFTER:\nBenchmark                                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  147792.454 \u00b1 2721.318   ops/s\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2708.481 \u00b1   50.012  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20184.002 \u00b1    0.002    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2732.667 \u00b1   59.258  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20363.460 \u00b1  120.585    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.042 \u00b1    0.033  MB/sec\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.316 \u00b1    0.249    B/op\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     833.000             counts\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:\u00b7gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    8390.000                 ms\nJMH benchmarks done\n\nBenchmark                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  166786.092 \u00b1 3285.702   ops/s\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2926.914 \u00b1   57.464  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19328.002 \u00b1    0.002    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2938.541 \u00b1   66.850  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19404.357 \u00b1  177.485    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.516 \u00b1    0.100  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       3.409 \u00b1    0.657    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.032 \u00b1    0.131  MB/sec\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.207 \u00b1    0.858    B/op\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     834.000             counts\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:\u00b7gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    9370.000                 ms\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   15988.116 \u00b1  137.427   ops/s\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.alloc.rate                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     448.636 \u00b1    3.851  MB/sec\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.alloc.rate.norm                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   30907.698 \u00b1    0.020    B/op\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space                         CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     450.905 \u00b1    5.587  MB/sec\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space.norm                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   31064.113 \u00b1  291.190    B/op\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.043 \u00b1    0.007  MB/sec\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.931 \u00b1    0.493    B/op\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.count                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     790.000             counts\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:\u00b7gc.time                                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     999.000                 ms\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   11345.169 \u00b1  206.528   ops/s\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2314.800 \u00b1   42.094  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  224714.266 \u00b1    0.028    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2320.213 \u00b1   45.521  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  225235.965 \u00b1  803.309    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.026 \u00b1    0.005  MB/sec\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.551 \u00b1    0.455    B/op\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     994.000             counts\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:\u00b7gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1189.000                 ms\nJMH benchmarks done\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-26T03:19:44Z", "url": "https://github.com/apache/kafka/pull/9499", "merged": true, "mergeCommit": {"oid": "eb24ed893aabef0db5d3dd7e1258312be716411f"}, "closed": true, "closedAt": "2020-11-11T02:11:53Z", "author": {"login": "yuzawa-san"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWKBggAH2gAyNTA5NzI5NzU3Ojg0MjlmZmM2ODYwMjkxZjk4ZGU3YTVkODFmMzNjMzM2ODhlN2E2YjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbUOoCAFqTUyNzc5MjUzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8429ffc6860291f98de7a5d81f33c33688e7a6b3", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/8429ffc6860291f98de7a5d81f33c33688e7a6b3", "committedDate": "2020-10-26T01:24:16Z", "message": "Use new version of zstd-jni"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf3dce45cce37680abdfba17ad85d625987cea1", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/9bf3dce45cce37680abdfba17ad85d625987cea1", "committedDate": "2020-10-26T01:24:32Z", "message": "add buffering for zstd-jni"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d625fd38e79df43053e4812820cfe53e928757", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/87d625fd38e79df43053e4812820cfe53e928757", "committedDate": "2020-10-26T03:26:45Z", "message": "remove gzip-specific comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc2MTY3", "url": "https://github.com/apache/kafka/pull/9499#pullrequestreview-516476167", "createdAt": "2020-10-26T05:29:12Z", "commit": {"oid": "87d625fd38e79df43053e4812820cfe53e928757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyOToxMlrOHoBS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyOToxMlrOHoBS2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjI5OQ==", "bodyText": "Is BufferedOutputStream good to other compression also?", "url": "https://github.com/apache/kafka/pull/9499#discussion_r511726299", "createdAt": "2020-10-26T05:29:12Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/record/CompressionType.java", "diffHunk": "@@ -119,7 +119,9 @@ public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, Buf\n         @Override\n         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {\n             try {\n-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);\n+                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance\n+                // in cases where the caller passes a small number of bytes to write (potentially a single byte)\n+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d625fd38e79df43053e4812820cfe53e928757"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTAxODI3", "url": "https://github.com/apache/kafka/pull/9499#pullrequestreview-516901827", "createdAt": "2020-10-26T15:32:53Z", "commit": {"oid": "87d625fd38e79df43053e4812820cfe53e928757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMjo1M1rOHoVTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMjo1M1rOHoVTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NDAzNw==", "bodyText": "This change means we are using the recycling buffer pool, right? I think we should be passing our own buffer pool.", "url": "https://github.com/apache/kafka/pull/9499#discussion_r512054037", "createdAt": "2020-10-26T15:32:53Z", "author": {"login": "ijuma"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -116,7 +116,7 @@ versions += [\n   testRetryPlugin: \"1.1.6\",\n   zinc: \"1.3.5\",\n   zookeeper: \"3.5.8\",\n-  zstd: \"1.4.5-6\"\n+  zstd: \"1.4.5-8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d625fd38e79df43053e4812820cfe53e928757"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d827c512ea72fb786e43071d411bcce07b386b8", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/9d827c512ea72fb786e43071d411bcce07b386b8", "committedDate": "2020-10-26T19:24:05Z", "message": "use newer zstd-jni"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e", "committedDate": "2020-10-27T13:24:56Z", "message": "Merge remote-tracking branch 'upstream/trunk' into zstd-optimizations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjIyOTY3", "url": "https://github.com/apache/kafka/pull/9499#pullrequestreview-527222967", "createdAt": "2020-11-10T13:54:35Z", "commit": {"oid": "ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6161454f1ef73aa9e0e143d10d815be3063c5e3b", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/6161454f1ef73aa9e0e143d10d815be3063c5e3b", "committedDate": "2020-11-10T13:57:56Z", "message": "Merge remote-tracking branch 'upstream/trunk' into zstd-optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b3621ec19f75cd6f647ec2575f09c631be5fde", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/f7b3621ec19f75cd6f647ec2575f09c631be5fde", "committedDate": "2020-11-10T14:22:18Z", "message": "Update dependencies.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a99ce230f5da5f299073fd6a2bbf1d288feeaad", "author": {"user": {"login": "yuzawa-san", "name": "James Yuzawa"}}, "url": "https://github.com/apache/kafka/commit/8a99ce230f5da5f299073fd6a2bbf1d288feeaad", "committedDate": "2020-11-10T15:13:46Z", "message": "Merge remote-tracking branch 'upstream/trunk' into zstd-optimizations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzkyNTMz", "url": "https://github.com/apache/kafka/pull/9499#pullrequestreview-527792533", "createdAt": "2020-11-11T02:07:16Z", "commit": {"oid": "8a99ce230f5da5f299073fd6a2bbf1d288feeaad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}