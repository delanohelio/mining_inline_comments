{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjE5MjIx", "number": 9520, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0Mzo0M1rOFC_iTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxMTo1MlrOFMK96A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjgyNDQ2OnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0Mzo0M1rOICbWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1MToxOVrOICbwKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjEzOQ==", "bodyText": "We don't need this anymore?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r539416139", "createdAt": "2020-12-09T15:43:43Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -117,13 +118,12 @@ public void setup() {\n         selector.reset();\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testSendToUnreadyNode() {\n         MetadataRequest.Builder builder = new MetadataRequest.Builder(Collections.singletonList(\"test\"), true);\n         long now = time.milliseconds();\n         ClientRequest request = client.newClientRequest(\"5\", builder, now, false);\n-        client.send(request, now);\n-        client.poll(1, time.milliseconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74703b812598cb62025aef3c421790c0869b746"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMjc2MA==", "bodyText": "client.send(request, now); throws exception so client.poll(1, time.milliseconds()); was never reached.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r539422760", "createdAt": "2020-12-09T15:51:19Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -117,13 +118,12 @@ public void setup() {\n         selector.reset();\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testSendToUnreadyNode() {\n         MetadataRequest.Builder builder = new MetadataRequest.Builder(Collections.singletonList(\"test\"), true);\n         long now = time.milliseconds();\n         ClientRequest request = client.newClientRequest(\"5\", builder, now, false);\n-        client.send(request, now);\n-        client.poll(1, time.milliseconds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjEzOQ=="}, "originalCommit": {"oid": "a74703b812598cb62025aef3c421790c0869b746"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDMwNTU5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/metrics/MetricsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNDozNToyMFrOIJAwMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNDozNToyMFrOIJAwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMDQzNA==", "bodyText": "We can remove the comment, it's redundant.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546320434", "createdAt": "2020-12-20T04:35:20Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/metrics/MetricsTest.java", "diffHunk": "@@ -196,12 +197,12 @@ public void testHierarchicalSensors() {\n         assertNull(metrics.childrenSensors().get(grandchild));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testBadSensorHierarchy() {\n         Sensor p = metrics.sensor(\"parent\");\n         Sensor c1 = metrics.sensor(\"child1\", p);\n         Sensor c2 = metrics.sensor(\"child2\", p);\n-        metrics.sensor(\"gc\", c1, c2); // should fail\n+        assertThrows(IllegalArgumentException.class, () -> metrics.sensor(\"gc\", c1, c2)); // should fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDMxMzIzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNDo0NDo1MVrOIJAzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNDo0NDo1MVrOIJAzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMTMwNA==", "bodyText": "Hmm, I think this was intended to fail on the second nextBatch, so maybe we should adjust the test.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546321304", "createdAt": "2020-12-20T04:44:51Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "diffHunk": "@@ -116,8 +117,7 @@ public void iteratorRaisesOnTooLargeRecords() {\n         buffer.flip();\n \n         ByteBufferLogInputStream logInputStream = new ByteBufferLogInputStream(buffer, 25);\n-        assertNotNull(logInputStream.nextBatch());\n-        logInputStream.nextBatch();\n+        assertThrows(CorruptRecordException.class, logInputStream::nextBatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTI4MjY3OnYy", "diffSide": "LEFT", "path": "core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMTozNDoxOFrOIJIAWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODo1MToyOVrOIJQpYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTI1Nw==", "bodyText": "We should not remove this, right?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546439257", "createdAt": "2020-12-20T21:34:18Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala", "diffHunk": "@@ -411,14 +411,13 @@ abstract class EndToEndAuthorizationTest extends IntegrationTestHarness with Sas\n     * Tests that a consumer fails to consume messages without the appropriate\n     * ACL set.\n     */\n-  @Test(expected = classOf[KafkaException])\n+  @Test\n   def testNoConsumeWithoutDescribeAclViaAssign(): Unit = {\n     noConsumeWithoutDescribeAclSetup()\n     val consumer = createConsumer()\n     consumer.assign(List(tp).asJava)\n     // the exception is expected when the consumer attempts to lookup offsets\n-    consumeRecords(consumer)\n-    confirmReauthenticationMetrics()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4MDgzMw==", "bodyText": "good catching!", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546580833", "createdAt": "2020-12-21T08:51:29Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala", "diffHunk": "@@ -411,14 +411,13 @@ abstract class EndToEndAuthorizationTest extends IntegrationTestHarness with Sas\n     * Tests that a consumer fails to consume messages without the appropriate\n     * ACL set.\n     */\n-  @Test(expected = classOf[KafkaException])\n+  @Test\n   def testNoConsumeWithoutDescribeAclViaAssign(): Unit = {\n     noConsumeWithoutDescribeAclSetup()\n     val consumer = createConsumer()\n     consumer.assign(List(tp).asJava)\n     // the exception is expected when the consumer attempts to lookup offsets\n-    consumeRecords(consumer)\n-    confirmReauthenticationMetrics()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTI1Nw=="}, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTgzNzA3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowMjozMFrOIL9www==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowMjozMFrOIL9www==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzE1NQ==", "bodyText": "Was this new line intentional?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417155", "createdAt": "2020-12-28T17:02:30Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -192,11 +192,12 @@ public void testConstructorWithSerializers() {\n         new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer()).close();\n     }\n \n-    @Test(expected = ConfigException.class)\n+    @Test\n     public void testNoSerializerProvided() {\n         Properties producerProps = new Properties();\n         producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n-        new KafkaProducer(producerProps);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg0MjM5OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/MockProducerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNTowMlrOIL9zpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNTowMlrOIL9zpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzg5Mg==", "bodyText": "I think this was intended to be groupCommit2, right?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417892", "createdAt": "2020-12-28T17:05:02Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/MockProducerTest.java", "diffHunk": "@@ -663,12 +623,6 @@ public void shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsA\n         producer.beginTransaction();\n \n         String group2 = \"g2\";\n-        Map<TopicPartition, OffsetAndMetadata> groupCommit2 = new HashMap<TopicPartition, OffsetAndMetadata>() {\n-            {\n-                put(new TopicPartition(topic, 2), new OffsetAndMetadata(53L, null));\n-                put(new TopicPartition(topic, 3), new OffsetAndMetadata(84L, null));\n-            }\n-        };\n         producer.sendOffsetsToTransaction(groupCommit, new ConsumerGroupMetadata(group2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg0NjExOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjozM1rOIL91lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjozM1rOIL91lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODM4OQ==", "bodyText": "This change doesn't seem right. The test is intended to test maybeAddPartitionToTransaction.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418389", "createdAt": "2020-12-28T17:06:33Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg0NjgwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjo0NVrOIL916Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjo0NVrOIL916Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODQ3Mw==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418473", "createdAt": "2020-12-28T17:06:45Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg0NzcwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjo1OVrOIL92VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNjo1OVrOIL92VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODU4MQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418581", "createdAt": "2020-12-28T17:06:59Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg0NzkyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNzowNlrOIL92eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNDo1NDoyNlrOIMG79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODYxNw==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418617", "createdAt": "2020-12-28T17:07:06Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterFatalError() {\n         doInitTransactions();\n         transactionManager.transitionToFatalError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NzQ3Nw==", "bodyText": "717c55b moved the check of state out of maybeAddPartitionToTransaction and it added failIfNotReadyForSend to all test cases to make them throw exception. I will update the test cases name to avoid confusion.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549567477", "createdAt": "2020-12-29T04:54:26Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterFatalError() {\n         doInitTransactions();\n         transactionManager.transitionToFatalError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODYxNw=="}, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg1NDgwOnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/common/memory/GarbageCollectedMemoryPoolTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxMDozNVrOIL96QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxMDozNVrOIL96QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxOTU4NQ==", "bodyText": "Do we still need to call close to avoid a leak?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549419585", "createdAt": "2020-12-28T17:10:35Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/memory/GarbageCollectedMemoryPoolTest.java", "diffHunk": "@@ -23,68 +23,74 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertThrows;\n+\n \n public class GarbageCollectedMemoryPoolTest {\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroSize() throws Exception {\n-        new GarbageCollectedMemoryPool(0, 7, true, null);\n+    @Test\n+    public void testZeroSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(0, 7, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeSize() throws Exception {\n-        new GarbageCollectedMemoryPool(-1, 7, false, null);\n+    @Test\n+    public void testNegativeSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(-1, 7, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 0, true, null);\n+    @Test\n+    public void testZeroMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 0, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, -1, false, null);\n+    @Test\n+    public void testNegativeMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, -1, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testMaxAllocationLargerThanSize() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 101, true, null);\n+    @Test\n+    public void testMaxAllocationLargerThanSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 101, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationOverMaxAllocation() throws Exception {\n+    @Test\n+    public void testAllocationOverMaxAllocation() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(11);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(11));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationZero() throws Exception {\n+    @Test\n+    public void testAllocationZero() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.tryAllocate(0);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(0));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationNegative() throws Exception {\n+    @Test\n+    public void testAllocationNegative() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(-1);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(-1));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseNull() throws Exception {\n+    @Test\n+    public void testReleaseNull() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.release(null);\n+        assertThrows(IllegalArgumentException.class, () -> pool.release(null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseForeignBuffer() throws Exception {\n+    @Test\n+    public void testReleaseForeignBuffer() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n         ByteBuffer fellOffATruck = ByteBuffer.allocate(1);\n-        pool.release(fellOffATruck);\n-        pool.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg2MzI2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxNDo1NFrOIL9_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNToyNjoyOVrOIPG9Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ==", "bodyText": "Why did we change the magic value version here?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549420811", "createdAt": "2020-12-28T17:14:54Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2ODcyOQ==", "bodyText": "magic 1 does not support ZStandard", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549568729", "createdAt": "2020-12-29T05:02:22Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcwNTU5OA==", "bodyText": "Unrelated to the changes in this PR then, just something you noticed? Worth a line in the PR description to avoid confusion.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r552705598", "createdAt": "2021-01-06T15:17:31Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxMzU1OQ==", "bodyText": "will copy that", "url": "https://github.com/apache/kafka/pull/9520#discussion_r552713559", "createdAt": "2021-01-06T15:26:29Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg3Mzg1OnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxOToxOFrOIL-EaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxOToxOFrOIL-EaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMjE4NQ==", "bodyText": "Why don't we need the verify call?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549422185", "createdAt": "2020-12-28T17:19:18Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticatorTest.java", "diffHunk": "@@ -67,8 +68,7 @@ public void testOversizeRequest() throws IOException {\n             invocation.<ByteBuffer>getArgument(0).putInt(SaslServerAuthenticator.MAX_RECEIVE_SIZE + 1);\n             return 4;\n         });\n-        authenticator.authenticate();\n-        verify(transportLayer).read(any(ByteBuffer.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTg4MDE5OnYy", "diffSide": "RIGHT", "path": "connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyMjo0OVrOIL-IHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNTowOTo0OFrOIMHFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMzEzMg==", "bodyText": "It seems that we are not testing the validate method anymore.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549423132", "createdAt": "2020-12-28T17:22:49Z", "author": {"login": "ijuma"}, "path": "connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java", "diffHunk": "@@ -293,16 +295,13 @@ public void testEmptyStruct() {\n         new Struct(emptyStructSchema);\n     }\n \n-    @Test(expected = SchemaBuilderException.class)\n+    @Test\n     public void testDuplicateFields() {\n-        final Schema schema = SchemaBuilder.struct()\n-                .name(\"testing\")\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .build();\n-        final Struct struct = new Struct(schema)\n-                .put(\"id\", \"testing\");\n-        struct.validate();\n+        assertThrows(SchemaBuilderException.class, () -> SchemaBuilder.struct()\n+            .name(\"testing\")\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2OTgzNg==", "bodyText": "StructTest has test cases for validate method.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549569836", "createdAt": "2020-12-29T05:09:48Z", "author": {"login": "chia7712"}, "path": "connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java", "diffHunk": "@@ -293,16 +295,13 @@ public void testEmptyStruct() {\n         new Struct(emptyStructSchema);\n     }\n \n-    @Test(expected = SchemaBuilderException.class)\n+    @Test\n     public void testDuplicateFields() {\n-        final Schema schema = SchemaBuilder.struct()\n-                .name(\"testing\")\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .build();\n-        final Struct struct = new Struct(schema)\n-                .put(\"id\", \"testing\");\n-        struct.validate();\n+        assertThrows(SchemaBuilderException.class, () -> SchemaBuilder.struct()\n+            .name(\"testing\")\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMzEzMg=="}, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mjk0MTcxOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0MDowNVrOIPu66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNjoyODoxN1rOIPzIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA==", "bodyText": "Should we keep the close?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553368298", "createdAt": "2021-01-07T14:40:05Z", "author": {"login": "ijuma"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "diffHunk": "@@ -49,18 +49,17 @@\n public class ProcessorNodeTest {\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n+        assertThrows(StreamsException.class, () -> node.init(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n-        node.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5NDQwNg==", "bodyText": "It fails to init so the close is unnecessary.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553394406", "createdAt": "2021-01-07T15:21:46Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "diffHunk": "@@ -49,18 +49,17 @@\n public class ProcessorNodeTest {\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n+        assertThrows(StreamsException.class, () -> node.init(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n-        node.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzNzMwNA==", "bodyText": "I don't think this is necessarily the case. The failure during init can happen after some resources have been allocated, right?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553437304", "createdAt": "2021-01-07T16:28:17Z", "author": {"login": "ijuma"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "diffHunk": "@@ -49,18 +49,17 @@\n public class ProcessorNodeTest {\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n+        assertThrows(StreamsException.class, () -> node.init(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n-        node.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mjk1MTcwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0MjozOVrOIPvBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowODoyMVrOIPwAeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2OTg3Mw==", "bodyText": "Why did we change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553369873", "createdAt": "2021-01-07T14:42:39Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -715,7 +711,7 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n   private def cleanMetricsRegistry(): Unit = {\n     val metrics = KafkaYammerMetrics.defaultRegistry\n-    metrics.allMetrics.keySet.forEach(metrics.removeMetric)\n+    metrics.allMetrics.keySet.forEach(m => metrics.removeMetric(m))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4NjEwNA==", "bodyText": "IntelliJ can't be aware that lambda function :(\nWill revert it.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553386104", "createdAt": "2021-01-07T15:08:21Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -715,7 +711,7 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n   private def cleanMetricsRegistry(): Unit = {\n     val metrics = KafkaYammerMetrics.defaultRegistry\n-    metrics.allMetrics.keySet.forEach(metrics.removeMetric)\n+    metrics.allMetrics.keySet.forEach(m => metrics.removeMetric(m))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2OTg3Mw=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mjk5MjgyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/api/TransactionsTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo1MzowMFrOIPvaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxNTowM1rOIPwQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NjI5OA==", "bodyText": "Why did we increase maxBlockMs here?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553376298", "createdAt": "2021-01-07T14:53:00Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/TransactionsTest.scala", "diffHunk": "@@ -407,46 +406,40 @@ class TransactionsTest extends KafkaServerTestHarness {\n     TestUtils.waitUntilTrue(() => offsetAndMetadata.equals(consumer.committed(Set(tp).asJava).get(tp)), \"cannot read committed offset\")\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testInitTransactionsTimeout(): Unit = {\n     testTimeout(false, producer => producer.initTransactions())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testSendOffsetsToTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.sendOffsetsToTransaction(\n       Map(new TopicPartition(topic1, 0) -> new OffsetAndMetadata(0)).asJava, \"test-group\"))\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testCommitTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.commitTransaction())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testAbortTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.abortTransaction())\n   }\n \n-  def testTimeout(needInitAndSendMsg: Boolean,\n+  private def testTimeout(needInitAndSendMsg: Boolean,\n                   timeoutProcess: KafkaProducer[Array[Byte], Array[Byte]] => Unit): Unit = {\n-    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs =  1000)\n-\n+    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs = 3000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5MDEzMg==", "bodyText": "1000 is too small to complete createTransactionalProducer and it causes TimeoutException. I don't think those test cases tried to test timeout on createTransactionalProducer.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553390132", "createdAt": "2021-01-07T15:15:03Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/integration/kafka/api/TransactionsTest.scala", "diffHunk": "@@ -407,46 +406,40 @@ class TransactionsTest extends KafkaServerTestHarness {\n     TestUtils.waitUntilTrue(() => offsetAndMetadata.equals(consumer.committed(Set(tp).asJava).get(tp)), \"cannot read committed offset\")\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testInitTransactionsTimeout(): Unit = {\n     testTimeout(false, producer => producer.initTransactions())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testSendOffsetsToTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.sendOffsetsToTransaction(\n       Map(new TopicPartition(topic1, 0) -> new OffsetAndMetadata(0)).asJava, \"test-group\"))\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testCommitTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.commitTransaction())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testAbortTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.abortTransaction())\n   }\n \n-  def testTimeout(needInitAndSendMsg: Boolean,\n+  private def testTimeout(needInitAndSendMsg: Boolean,\n                   timeoutProcess: KafkaProducer[Array[Byte], Array[Byte]] => Unit): Unit = {\n-    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs =  1000)\n-\n+    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs = 3000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NjI5OA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzAwOTQyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo1Njo1MlrOIPvkBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNjozMTowOVrOIPzPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA==", "bodyText": "Why did you change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553378820", "createdAt": "2021-01-07T14:56:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5MjYwMQ==", "bodyText": "my bad and will revert it. (IntelliJ complained about the erased types)", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553392601", "createdAt": "2021-01-07T15:18:50Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzNzk5NA==", "bodyText": "I would ignore IntelliJ issues if it compiles without warnings. I think there are a few more changes like this in the middle of thousands of lines of diff. Something to avoid in the future. :)", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553437994", "createdAt": "2021-01-07T16:29:25Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzOTA0Nw==", "bodyText": "Please give me one second to revert those changes :(", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553439047", "createdAt": "2021-01-07T16:31:09Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzA2OTIwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxMTo1MlrOIPwIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxMTo1MlrOIPwIrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4ODIwNQ==", "bodyText": "Why did we change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553388205", "createdAt": "2021-01-07T15:11:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala", "diffHunk": "@@ -343,7 +340,7 @@ class DynamicBrokerConfigTest {\n \n     class TestAuthorizer extends Authorizer with Reconfigurable {\n       @volatile var superUsers = \"\"\n-      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = Map.empty.asJava\n+      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = util.Collections.emptyMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4012, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}