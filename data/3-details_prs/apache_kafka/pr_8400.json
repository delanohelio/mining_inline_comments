{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njg1NDM1", "number": 8400, "title": "KAFKA-9739: Fixes null key changing child node", "bodyText": "For some context, when building a streams application, the optimizer keeps track of the key-changing operations and any repartition nodes that are descendants of the key-changer.  During the optimization phase (if enabled), any repartition nodes are logically collapsed into one.  The optimizer updates the graph by inserting the single repartition node between the key-changing node and its first child node.  This graph update process is done by searching for a node that has the key-changing node as one of its direct parents, and the search starts from the repartition node, going up in the parent hierarchy.\nThe one exception to this rule is if there is a merge node that is a descendant of the key-changing node, then during the optimization phase, the map tracking key-changers to repartition nodes is updated to have the merge node as the key.  Then the optimization process updates the graph to place the single repartition node between the merge node and its first child node.\nThe error in KAFKA-9739 occurred because there was an assumption that the repartition nodes are children of the merge node.  But in the topology from KAFKA-9739, the repartition node was a parent of the merge node.  So when attempting to find the first child of the merge node, nothing was found (obviously) resulting in StreamException(Found a null keyChangingChild node for..)\nThis PR fixes this bug by first checking that all repartition nodes for optimization are children of the merge node.\nThis PR includes a test with the topology from KAFKA-9739.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-04-01T00:03:50Z", "url": "https://github.com/apache/kafka/pull/8400", "merged": true, "mergeCommit": {"oid": "9783b85fdd947fe55fa80c724c8b4ae9a7eb63c3"}, "closed": true, "closedAt": "2020-04-03T16:04:45Z", "author": {"login": "bbejeck"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSgO9KgH2gAyMzk2Njg1NDM1OmM0MmU4NDk1YmYzYjJmNDMyYWNkOGVmN2EyM2I2NDAzZjQxNjhlYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT3ljBAFqTM4NjkwMTMwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c42e8495bf3b2f432acd8ef7a23b6403f4168eb6", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/c42e8495bf3b2f432acd8ef7a23b6403f4168eb6", "committedDate": "2020-03-29T20:50:01Z", "message": "KAFKA-9739: When optimizing with merge nodes, the merge node must be the parent of at least one repartition topics to be optimized."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a18ee121fdd87d93271d83a9c55ba1489c04e4", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/a7a18ee121fdd87d93271d83a9c55ba1489c04e4", "committedDate": "2020-03-29T21:24:43Z", "message": "KAFKA-9739: Clean up from cherry-pick, update naming since original work was done on 2.4 branch and the naming conventions for repartition topics has changed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96c3b65c1f6c20a3ad42ce2989a4521a4ac10de4", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/96c3b65c1f6c20a3ad42ce2989a4521a4ac10de4", "committedDate": "2020-03-30T00:10:44Z", "message": "KAFKA-9739: Add comment about topology remove println statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/238943c1e98c39229b471bc1ce9447cc88b2e79b", "committedDate": "2020-03-30T14:09:01Z", "message": "KAFKA-9739: Change to all repartition topics need to be children of the merge node to update the optimization map with the merge node vs. the key-changing node."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTc5NjI0", "url": "https://github.com/apache/kafka/pull/8400#pullrequestreview-385579624", "createdAt": "2020-04-01T13:23:24Z", "commit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrOF_AYkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyMzoyNFrOF_AYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMDg5OQ==", "bodyText": "This is the fix", "url": "https://github.com/apache/kafka/pull/8400#discussion_r401610899", "createdAt": "2020-04-01T13:23:24Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -399,11 +399,13 @@ private void maybeUpdateKeyChangingRepartitionNodeMap() {\n         final Set<StreamsGraphNode> mergeNodeKeyChangingParentsToRemove = new HashSet<>();\n         for (final StreamsGraphNode mergeNode : mergeNodes) {\n             mergeNodesToKeyChangers.put(mergeNode, new LinkedHashSet<>());\n-            final Collection<StreamsGraphNode> keys = keyChangingOperationsToOptimizableRepartitionNodes.keySet();\n-            for (final StreamsGraphNode key : keys) {\n-                final StreamsGraphNode maybeParentKey = findParentNodeMatching(mergeNode, node -> node.parentNodes().contains(key));\n-                if (maybeParentKey != null) {\n-                    mergeNodesToKeyChangers.get(mergeNode).add(key);\n+            final Set<Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>>> entrySet = keyChangingOperationsToOptimizableRepartitionNodes.entrySet();\n+            for (final Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>> entry : entrySet) {\n+                if (mergeNodeHasRepartitionChildren(mergeNode, entry.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDk0MjI0", "url": "https://github.com/apache/kafka/pull/8400#pullrequestreview-386094224", "createdAt": "2020-04-02T04:02:21Z", "commit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTAxMzA1", "url": "https://github.com/apache/kafka/pull/8400#pullrequestreview-386901305", "createdAt": "2020-04-03T02:36:26Z", "commit": {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 28, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}