{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDE3NjU1", "number": 8556, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoxOTozNFrOD2gXfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODo1OVrOD8JeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDc5OTk4OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoxOTozNFrOGMSiyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNToxNzozM1rOGTAoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzOTkxMw==", "bodyText": "What about adding the expected number of elements?", "url": "https://github.com/apache/kafka/pull/8556#discussion_r415539913", "createdAt": "2020-04-27T06:19:34Z", "author": {"login": "chia7712"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2112,6 +2131,83 @@ private void generateFieldHashCode(FieldSpec field) {\n         }\n     }\n \n+    private void generateClassDuplicate(String className, StructSpec struct) {\n+        buffer.printf(\"@Override%n\");\n+        buffer.printf(\"public %s duplicate() {%n\", className);\n+        buffer.incrementIndent();\n+        buffer.printf(\"%s _duplicate = new %s();%n\", className, className);\n+        for (FieldSpec field : struct.fields()) {\n+            generateFieldDuplicate(new Target(field,\n+                field.camelCaseName(),\n+                field.camelCaseName(),\n+                input -> String.format(\"_duplicate.%s = %s\", field.camelCaseName(), input)));\n+        }\n+        buffer.printf(\"return _duplicate;%n\");\n+        buffer.decrementIndent();\n+        buffer.printf(\"}%n\");\n+    }\n+\n+    private void generateFieldDuplicate(Target target) {\n+        FieldSpec field = target.field();\n+        if ((field.type() instanceof FieldType.BoolFieldType) ||\n+                (field.type() instanceof FieldType.Int8FieldType) ||\n+                (field.type() instanceof FieldType.Int16FieldType) ||\n+                (field.type() instanceof FieldType.Int32FieldType) ||\n+                (field.type() instanceof FieldType.Int64FieldType) ||\n+                (field.type() instanceof FieldType.Float64FieldType) ||\n+                (field.type() instanceof FieldType.UUIDFieldType)) {\n+            buffer.printf(\"%s;%n\", target.assignmentStatement(target.sourceVariable()));\n+        } else {\n+            IsNullConditional cond = IsNullConditional.forName(target.sourceVariable()).\n+                nullableVersions(target.field().nullableVersions()).\n+                ifNull(() -> buffer.printf(\"%s;%n\", target.assignmentStatement(\"null\")));\n+            if (field.type().isBytes()) {\n+                if (field.zeroCopy()) {\n+                    cond.ifShouldNotBeNull(() ->\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+                } else {\n+                    cond.ifShouldNotBeNull(() -> {\n+                        headerGenerator.addImport(MessageGenerator.MESSAGE_UTIL_CLASS);\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"MessageUtil.duplicate(%s)\",\n+                                target.sourceVariable())));\n+                    });\n+                }\n+            } else if (field.type().isStruct()) {\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+            } else if (field.type().isString()) {\n+                // Strings are immutable, so we don't need to duplicate them.\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        target.sourceVariable())));\n+            } else if (field.type().isArray()) {\n+                cond.ifShouldNotBeNull(() -> {\n+                    String newArrayName =\n+                        String.format(\"new%s\", field.capitalizedCamelCaseName());\n+                    buffer.printf(\"%s %s = new %s();%n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4NjU2NQ==", "bodyText": "Good idea.  Added.", "url": "https://github.com/apache/kafka/pull/8556#discussion_r422586565", "createdAt": "2020-05-10T05:17:33Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2112,6 +2131,83 @@ private void generateFieldHashCode(FieldSpec field) {\n         }\n     }\n \n+    private void generateClassDuplicate(String className, StructSpec struct) {\n+        buffer.printf(\"@Override%n\");\n+        buffer.printf(\"public %s duplicate() {%n\", className);\n+        buffer.incrementIndent();\n+        buffer.printf(\"%s _duplicate = new %s();%n\", className, className);\n+        for (FieldSpec field : struct.fields()) {\n+            generateFieldDuplicate(new Target(field,\n+                field.camelCaseName(),\n+                field.camelCaseName(),\n+                input -> String.format(\"_duplicate.%s = %s\", field.camelCaseName(), input)));\n+        }\n+        buffer.printf(\"return _duplicate;%n\");\n+        buffer.decrementIndent();\n+        buffer.printf(\"}%n\");\n+    }\n+\n+    private void generateFieldDuplicate(Target target) {\n+        FieldSpec field = target.field();\n+        if ((field.type() instanceof FieldType.BoolFieldType) ||\n+                (field.type() instanceof FieldType.Int8FieldType) ||\n+                (field.type() instanceof FieldType.Int16FieldType) ||\n+                (field.type() instanceof FieldType.Int32FieldType) ||\n+                (field.type() instanceof FieldType.Int64FieldType) ||\n+                (field.type() instanceof FieldType.Float64FieldType) ||\n+                (field.type() instanceof FieldType.UUIDFieldType)) {\n+            buffer.printf(\"%s;%n\", target.assignmentStatement(target.sourceVariable()));\n+        } else {\n+            IsNullConditional cond = IsNullConditional.forName(target.sourceVariable()).\n+                nullableVersions(target.field().nullableVersions()).\n+                ifNull(() -> buffer.printf(\"%s;%n\", target.assignmentStatement(\"null\")));\n+            if (field.type().isBytes()) {\n+                if (field.zeroCopy()) {\n+                    cond.ifShouldNotBeNull(() ->\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+                } else {\n+                    cond.ifShouldNotBeNull(() -> {\n+                        headerGenerator.addImport(MessageGenerator.MESSAGE_UTIL_CLASS);\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"MessageUtil.duplicate(%s)\",\n+                                target.sourceVariable())));\n+                    });\n+                }\n+            } else if (field.type().isStruct()) {\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+            } else if (field.type().isString()) {\n+                // Strings are immutable, so we don't need to duplicate them.\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        target.sourceVariable())));\n+            } else if (field.type().isArray()) {\n+                cond.ifShouldNotBeNull(() -> {\n+                    String newArrayName =\n+                        String.format(\"new%s\", field.capitalizedCamelCaseName());\n+                    buffer.printf(\"%s %s = new %s();%n\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzOTkxMw=="}, "originalCommit": null, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk2MzgzOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODo1OVrOGU6PJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODo1OVrOGU6PJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODg1Mg==", "bodyText": "nit: maybe generateCollectionDuplicateMethod?", "url": "https://github.com/apache/kafka/pull/8556#discussion_r424578852", "createdAt": "2020-05-13T16:38:59Z", "author": {"login": "hachikuji"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -273,6 +276,22 @@ private String commaSeparatedHashSetFieldAndTypes(StructSpec struct) {\n             collect(Collectors.joining(\", \"));\n     }\n \n+    private void generateDuplicateMethod(String className, StructSpec struct) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54e5e1be4602c883f8395d044a8ed3cbd1719785"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2795, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}