{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTIwMDI3", "number": 9002, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNDozMFrOENFrJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MToxNVrOENU3Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTU5OTEwOnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/TypeClassGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNDozMFrOGvk_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNDozMFrOGvk_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjI0Mw==", "bodyText": "Generate the type and write it out to the internal state.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452542243", "createdAt": "2020-07-09T23:24:30Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/TypeClassGenerator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.message;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+\n+public interface TypeClassGenerator {\n+    /**\n+     * The short name of the type class file we are generating. For example,\n+     * ApiMessageType.java.\n+     */\n+    String outputName();\n+\n+    /**\n+     * Registers a message spec with the generator.\n+     *\n+     * @param spec      The spec to register.\n+     */\n+    void registerMessageType(MessageSpec spec);\n+\n+    /**\n+     * Write out the internal state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYxOTg3OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozNDoxNFrOGvlK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTowNzozOFrOGv7Amw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTI3Mg==", "bodyText": "Instead of using null ptr, maybe we could get a NoOpTypeClassGenerator which will do nothing for generateAndWrite, and remove the outputName() to make one single API. Something like\nString outputFileName = typeClassGenerator.generateAndWrite(outputDir, writer);\n\nI don't feel strong about this change, ideally it should look better, but up to you.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452545272", "createdAt": "2020-07-09T23:34:14Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMzA2Nw==", "bodyText": "I thought about that, but it doesn't really make anything simpler.  If there's no typeclass, we don't want to add an output file, we don't want to write to it, etc. etc.  So we still need all the same logic.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452903067", "createdAt": "2020-07-10T15:07:38Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTI3Mg=="}, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYyNDc4OnYy", "diffSide": "RIGHT", "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozNjowOVrOGvlNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MToyMFrOGv8iHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTk2OQ==", "bodyText": "Why we need separate exit code for mis-used arguments?", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452545969", "createdAt": "2020-07-09T23:36:09Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -267,10 +283,10 @@ public static void main(String[] args) throws Exception {\n         if (args.length == 0) {\n             System.out.println(USAGE);\n             System.exit(0);\n-        } else if (args.length != 3) {\n+        } else if (args.length != 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMjI3Mw==", "bodyText": "It's traditional for invoking a program with no arguments to print out the usage message, and exit with success, which is 0.  If there was a usage error, then we exit with failure, which is 1.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452902273", "createdAt": "2020-07-10T15:06:17Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -267,10 +283,10 @@ public static void main(String[] args) throws Exception {\n         if (args.length == 0) {\n             System.out.println(USAGE);\n             System.exit(0);\n-        } else if (args.length != 3) {\n+        } else if (args.length != 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTk2OQ=="}, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyODAyOQ==", "bodyText": "Sg", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452928029", "createdAt": "2020-07-10T15:51:20Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -267,10 +283,10 @@ public static void main(String[] args) throws Exception {\n         if (args.length == 0) {\n             System.out.println(USAGE);\n             System.exit(0);\n-        } else if (args.length != 3) {\n+        } else if (args.length != 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTk2OQ=="}, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDA4Nzk0OnYy", "diffSide": "LEFT", "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MToxNVrOGv8h6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo1OToxMFrOGwsdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNzk3OA==", "bodyText": "Why we remove the counter here? Actually my q is whether this is correct behavior before.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452927978", "createdAt": "2020-07-10T15:51:15Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {\n+            outputFileNames.add(typeClassGenerator.outputName());\n+            Path factoryOutputPath = Paths.get(outputDir, typeClassGenerator.outputName());\n             try (BufferedWriter writer = Files.newBufferedWriter(factoryOutputPath)) {\n-                messageTypeGenerator.generate();\n-                messageTypeGenerator.write(writer);\n+                typeClassGenerator.generateAndWrite(writer);\n             }\n-            numProcessed++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxMzE3OA==", "bodyText": "The counter is used to output how many JSON files we processed in the printf down below. Since this doesn't process a JSON file, yes it was incorrect.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r453713178", "createdAt": "2020-07-13T14:59:10Z", "author": {"login": "cmccabe"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {\n+            outputFileNames.add(typeClassGenerator.outputName());\n+            Path factoryOutputPath = Paths.get(outputDir, typeClassGenerator.outputName());\n             try (BufferedWriter writer = Files.newBufferedWriter(factoryOutputPath)) {\n-                messageTypeGenerator.generate();\n-                messageTypeGenerator.write(writer);\n+                typeClassGenerator.generateAndWrite(writer);\n             }\n-            numProcessed++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNzk3OA=="}, "originalCommit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2235, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}