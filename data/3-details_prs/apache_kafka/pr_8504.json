{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTAwMjA4", "number": 8504, "title": "KAFKA-9298: reuse mapped stream error in joins", "bodyText": "When performing a join with a stream that needs repartitioning, Kafka Streams automatically creates a repartition topic.  If the user does not use StreamJoined to name to repartition topic, Kafka Streams uses the generated name of the KStream instance for the repartition topic name.\nIf the KStream instance requiring the repartition participates in another join, the second repartition topic is created using the name of the operator. This name reuse is what causes the InvalidTopologyException.  The error occurs because the InternalTopologyBuilder has already registered the repartition source name previously.\nFor example, this topology will cause an error because Kafka Streams will attempt to create two repartition topics (which is correct behavior) but using the same name each time which causes the error.\nKStream<String, String> newStream = stream1.map((k, v) -> new KeyValue<>(v, k));\nnewStream.join(stream2, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100))).to(\"out-one\");\n// using newStream in another join here causes the error\nnewStream.join(stream3, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100))).to(\"out-to\");\nHowever this topology, which is the same except the user has provided repartition topic names, is fine.  Note the use of StreamJoined.withName here\nKStream<String, String> newStream = stream1.map((k, v) -> new KeyValue<>(v, k));\nfinal StreamJoined<String, String, String> streamJoined = StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String());\nnewStream.join(stream2, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100)), streamJoined.withName(\"first-join\")).to(\"out-one\");\n// using newStream in another join here is fine because the name of the repartition topic is unique\nnewStream.join(stream3, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100)), streamJoined.withName(\"second-join\")).to(\"out-two\");\nThis bug has been present for some time as I tested this out on 2.0 before we added the optimization layer.\nIdeally, the fix should be to generate a repartition topic name each time to avoid such issues.  But IMHO that ship has already sailed because by introducing a new name generation will cause compatibility issues for existing topologies.  So generating new names is out for now, at least.\nThe proposed fix is:\n\nFor KStream objects needing repartitioning and  using generated names, reuse the repartition topic node in any additional joins.\nFor KStream instances needing repartitioning using user-provided names always create a new repartition topic node for each join as each one will have a unique name\n\nI've added tests confirming the expected behavior.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-04-17T03:25:23Z", "url": "https://github.com/apache/kafka/pull/8504", "merged": true, "mergeCommit": {"oid": "cec6202369315d183c410ff7145ae414678b0763"}, "closed": true, "closedAt": "2020-05-27T18:54:42Z", "author": {"login": "bbejeck"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYYtKdgFqTM5NTEzNzQyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcld6S2AFqTQxOTUxNTg4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTM3NDI3", "url": "https://github.com/apache/kafka/pull/8504#pullrequestreview-395137427", "createdAt": "2020-04-17T03:26:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoyNjo1N1rOGG-qLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoyNjo1N1rOGG-qLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3MTI0NQ==", "bodyText": "This is the fix.  We'll generate the repartitionNode if it's the first time through or if the user has provided a name for the repartition topic.  Otherwise, we cache the repartitionNode for use in subsequent joins on the same KStream object.", "url": "https://github.com/apache/kafka/pull/8504#discussion_r409971245", "createdAt": "2020-04-17T03:26:57Z", "author": {"login": "bbejeck"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java", "diffHunk": "@@ -989,16 +994,18 @@ private void to(final TopicNameExtractor<K, V> topicExtractor,\n             null,\n             optimizableRepartitionNodeBuilder);\n \n-        final OptimizableRepartitionNode<K, V> optimizableRepartitionNode = optimizableRepartitionNodeBuilder.build();\n-        builder.addGraphNode(streamsGraphNode, optimizableRepartitionNode);\n+        if (repartitionNode == null || !name.equals(repartitionName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTI3Mjg3", "url": "https://github.com/apache/kafka/pull/8504#pullrequestreview-400127287", "createdAt": "2020-04-24T17:12:31Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDUwMTI4", "url": "https://github.com/apache/kafka/pull/8504#pullrequestreview-410450128", "createdAt": "2020-05-12T21:53:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo1MzozOVrOGUaUhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNDozMFrOGUanGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NTk0MQ==", "bodyText": "This is the default. Why setting is explicitly?", "url": "https://github.com/apache/kafka/pull/8504#discussion_r424055941", "createdAt": "2020-05-12T21:53:39Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -77,6 +79,38 @@ public void shouldLogAndMeterOnSkippedRecordsWithNullValueWithBuiltInMetricsVers\n         shouldLogAndMeterOnSkippedRecordsWithNullValue(StreamsConfig.METRICS_LATEST);\n     }\n \n+\n+    @Test\n+    public void shouldReuseRepartitionTopicWithGeneratedName() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final Properties props = new Properties();\n+        props.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.NO_OPTIMIZATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDY5Nw==", "bodyText": "Sorry for being undecided... Reading the code now, I am wondering if this behavior may become problematic with regard to topology upgrade. Assume, the first join is removed. Technically, the new topology is compatible, but we would now generate a new repartition topic name, and thus it's not compatible. This could be fixed by inserting a repartition() in the new code enforcing the old name -- however, this makes me wonder if we might want to throw a \"naming conflict\" (ie, cannot pick a name) exception based on the original topology for this case when both operators are named, and tell people to insert repartition() right away? For this case, if they later remove a join it's clear what is happening to them.\nIe, we should still not create two repartition topics what would be \"bad\" (user could still enforce if by calling repartition() twice), but just throw with an informative error message? -- Curious what @vvcephei thinks?", "url": "https://github.com/apache/kafka/pull/8504#discussion_r424060697", "createdAt": "2020-05-12T22:04:30Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -77,6 +79,38 @@ public void shouldLogAndMeterOnSkippedRecordsWithNullValueWithBuiltInMetricsVers\n         shouldLogAndMeterOnSkippedRecordsWithNullValue(StreamsConfig.METRICS_LATEST);\n     }\n \n+\n+    @Test\n+    public void shouldReuseRepartitionTopicWithGeneratedName() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final Properties props = new Properties();\n+        props.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.NO_OPTIMIZATION);\n+        final KStream<String, String> stream1 = builder.stream(\"topic\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> stream2 = builder.stream(\"topic2\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> stream3 = builder.stream(\"topic3\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> newStream = stream1.map((k, v) -> new KeyValue<>(v, k));\n+        newStream.join(stream2, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100))).to(\"out-one\");\n+        newStream.join(stream3, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100))).to(\"out-to\");\n+        assertEquals(expectedTopologyWithGeneratedRepartitionTopic, builder.build(props).describe().toString());\n+    }\n+\n+    @Test\n+    public void shouldCreateRepartitionTopicsWithUserProvidedName() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final Properties props = new Properties();\n+        props.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, StreamsConfig.NO_OPTIMIZATION);\n+        final KStream<String, String> stream1 = builder.stream(\"topic\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> stream2 = builder.stream(\"topic2\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> stream3 = builder.stream(\"topic3\", Consumed.with(Serdes.String(), Serdes.String()));\n+        final KStream<String, String> newStream = stream1.map((k, v) -> new KeyValue<>(v, k));\n+        final StreamJoined<String, String, String> streamJoined = StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String());\n+        newStream.join(stream2, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100)), streamJoined.withName(\"first-join\")).to(\"out-one\");\n+        newStream.join(stream3, (value1, value2) -> value1 + value2, JoinWindows.of(ofMillis(100)), streamJoined.withName(\"second-join\")).to(\"out-two\");\n+        final Topology topology =  builder.build(props);\n+        System.out.println(topology.describe().toString());\n+        assertEquals(expectedTopologyWithUserNamedRepartitionTopics, topology.describe().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e9bae8170f37f7c1a5ae5fea7eb02c45d5c2e2", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/53e9bae8170f37f7c1a5ae5fea7eb02c45d5c2e2", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Reuse of mapped stream throws an error during when topology is not optimized."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdacd01dacb4c23797b411a32b2df0947a17c2f2", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/fdacd01dacb4c23797b411a32b2df0947a17c2f2", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Fix for reusing mapped stream causes topology exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28fa1bef3d883b1ff6bf38328e8bbb28a5b737d0", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/28fa1bef3d883b1ff6bf38328e8bbb28a5b737d0", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Added additional tests per comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e207d9dfaa7dcf049cec52b3d0144cce2c7c0a1", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/4e207d9dfaa7dcf049cec52b3d0144cce2c7c0a1", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Make variables final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbf3e617304ecba4d9d47b8ab4a10d2cd4350457", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/fbf3e617304ecba4d9d47b8ab4a10d2cd4350457", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Reuse repartition node in all cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0861510c468819b94ae6013fe9d655ccac9b6f18", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/0861510c468819b94ae6013fe9d655ccac9b6f18", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Reuse repartition node only when name is generated."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0861510c468819b94ae6013fe9d655ccac9b6f18", "author": {"user": {"login": "bbejeck", "name": "Bill Bejeck"}}, "url": "https://github.com/apache/kafka/commit/0861510c468819b94ae6013fe9d655ccac9b6f18", "committedDate": "2020-05-22T02:33:36Z", "message": "KAFKA-9298: Reuse repartition node only when name is generated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTE1ODg5", "url": "https://github.com/apache/kafka/pull/8504#pullrequestreview-419515889", "createdAt": "2020-05-27T18:52:12Z", "commit": {"oid": "0861510c468819b94ae6013fe9d655ccac9b6f18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1550, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}