{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDA0OTA4", "number": 8508, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMTo0MFrODzFDXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyNDoyNlrODz6F7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg2NzUxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMTo0MFrOGHgcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMTo0MFrOGHgcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDc0Mg==", "bodyText": "This is an actual change -- in all other processor, we use the \"top level class\" for the logger and not the Processor class -- changing this for alignment.", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410524742", "createdAt": "2020-04-18T00:31:40Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -30,7 +30,7 @@\n import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n \n class KStreamKTableJoinProcessor<K1, K2, V1, V2, R> extends AbstractProcessor<K1, V1> {\n-    private static final Logger LOG = LoggerFactory.getLogger(KStreamKTableJoinProcessor.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(KStreamKTableJoin.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg2ODEzOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMjoxM1rOGHgcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMjoxM1rOGHgcoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDgzMg==", "bodyText": "Removed because unused.", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410524832", "createdAt": "2020-04-18T00:32:13Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java", "diffHunk": "@@ -659,7 +657,6 @@ public void shouldCountWindowed() {\n     @Test\n     public void shouldCountWindowedWithInternalStoreName() {\n         final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n-        final List<KeyValue<Windowed<String>, KeyValue<Long, Long>>> results = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg2ODMyOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMjoyOVrOGHgcwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozMjoyOVrOGHgcwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNDg2Ng==", "bodyText": "Removed because unused.", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410524866", "createdAt": "2020-04-18T00:32:29Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java", "diffHunk": "@@ -186,15 +189,12 @@ public void shouldThrowExceptionWhenOtherJoinStoreSetsRetainDuplicatesFalse() {\n     @Test\n     public void shouldBuildJoinWithCustomStoresAndCorrectWindowSettings() {\n         //Case where everything matches up\n-        final WindowBytesStoreSupplier thisStoreSupplier = buildWindowBytesStoreSupplier(\"in-memory-join-store\", 150, 100, true);\n-        final WindowBytesStoreSupplier otherStoreSupplier = buildWindowBytesStoreSupplier(\"in-memory-join-store-other\", 150, 100, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg3MTAxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamWindowAggregateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNDo0NlrOGHgeOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNDo0NlrOGHgeOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNTI0MA==", "bodyText": "Removed because the parameter is variadic", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410525240", "createdAt": "2020-04-18T00:34:46Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamWindowAggregateTest.java", "diffHunk": "@@ -189,8 +189,8 @@ public void testJoin() {\n                 new KeyValueTimestamp<>(new Windowed<>(\"A\", new TimeWindow(0, 10)),  \"0+1+1\",  9),\n                 new KeyValueTimestamp<>(new Windowed<>(\"A\", new TimeWindow(5, 15)),  \"0+1\",  9)\n             );\n-            processors.get(1).checkAndClearProcessResult(new KeyValueTimestamp[0]);\n-            processors.get(2).checkAndClearProcessResult(new KeyValueTimestamp[0]);\n+            processors.get(1).checkAndClearProcessResult();\n+            processors.get(2).checkAndClearProcessResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg3MjYxOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNjo0MFrOGHgfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozNjo0MFrOGHgfKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNTQ4Mg==", "bodyText": "This method is only called once and thus its merged into the main test method", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410525482", "createdAt": "2020-04-18T00:36:40Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "diffHunk": "@@ -1812,13 +1809,14 @@ private void shouldLogAndRecordSkippedMetricForDeserializationException(final St\n             -1,\n             new byte[0],\n             \"I am not an integer.\".getBytes()));\n-        thread.runOnce();\n \n-        verifyLogMessagesSkippedRecordsForDeserializationException(appender);\n-    }\n+        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(RecordDeserializer.class);\n+        try {\n+            thread.runOnce();\n+        } finally {\n+            LogCaptureAppender.unregister(appender);\n+        }\n \n-    private void verifyLogMessagesSkippedRecordsForDeserializationException(final LogCaptureAppender appender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg3Mzk4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractSessionBytesStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozODowN1rOGHgf4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDozODowN1rOGHgf4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNTY2NA==", "bodyText": "We don't capture any debug logs and thus it's getting removed", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410525664", "createdAt": "2020-04-18T00:38:07Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractSessionBytesStoreTest.java", "diffHunk": "@@ -80,8 +81,6 @@\n \n     abstract String getMetricsScope();\n \n-    abstract void setClassLoggerToDebug();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg3NzgyOnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDo0MTozOFrOGHgh3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDo0MTozOFrOGHgh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNjE3Mg==", "bodyText": "This method is only called once and thus its merged into the main test method", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410526172", "createdAt": "2020-04-18T00:41:38Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "diffHunk": "@@ -2020,40 +2016,41 @@ private void shouldLogAndRecordSkippedRecordsForInvalidTimestamps(final String b\n             assertEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n         }\n \n-        long offset = -1;\n-        addRecord(mockConsumer, ++offset);\n-        addRecord(mockConsumer, ++offset);\n-        thread.runOnce();\n+        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(RecordQueue.class);\n+        try {\n+            long offset = -1;\n+            addRecord(mockConsumer, ++offset);\n+            addRecord(mockConsumer, ++offset);\n+            thread.runOnce();\n \n-        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n-            assertEquals(2.0, metrics.metric(skippedTotalMetric).metricValue());\n-            assertNotEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n-        }\n+            if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n+                assertEquals(2.0, metrics.metric(skippedTotalMetric).metricValue());\n+                assertNotEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n+            }\n \n-        addRecord(mockConsumer, ++offset);\n-        addRecord(mockConsumer, ++offset);\n-        addRecord(mockConsumer, ++offset);\n-        addRecord(mockConsumer, ++offset);\n-        thread.runOnce();\n+            addRecord(mockConsumer, ++offset);\n+            addRecord(mockConsumer, ++offset);\n+            addRecord(mockConsumer, ++offset);\n+            addRecord(mockConsumer, ++offset);\n+            thread.runOnce();\n \n-        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n-            assertEquals(6.0, metrics.metric(skippedTotalMetric).metricValue());\n-            assertNotEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n-        }\n+            if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n+                assertEquals(6.0, metrics.metric(skippedTotalMetric).metricValue());\n+                assertNotEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n+            }\n \n-        addRecord(mockConsumer, ++offset, 1L);\n-        addRecord(mockConsumer, ++offset, 1L);\n-        thread.runOnce();\n+            addRecord(mockConsumer, ++offset, 1L);\n+            addRecord(mockConsumer, ++offset, 1L);\n+            thread.runOnce();\n+        } finally {\n+            LogCaptureAppender.unregister(appender);\n+        }\n \n         if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n             assertEquals(6.0, metrics.metric(skippedTotalMetric).metricValue());\n             assertNotEquals(0.0, metrics.metric(skippedRateMetric).metricValue());\n         }\n-        verifyLogMessagesForSkippedRecordsForInvalidTimestamps(appender);\n-    }\n \n-    private void verifyLogMessagesForSkippedRecordsForInvalidTimestamps(final LogCaptureAppender appender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDcxNTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTozMzo1MFrOGHtpXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNzowNzoyMlrOGHzdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MTA4Ng==", "bodyText": "Seems like this appender could also be scoped to the class that logs the message we want to capture, right?", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410741086", "createdAt": "2020-04-18T19:33:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -801,8 +801,11 @@ public void shouldWarnAboutRocksDBConfigSetterIsNotGuaranteedToBeBackwardsCompat\n         props.setProperty(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestRocksDbConfigSetter.class.getName());\n \n         final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNjMxMQ==", "bodyText": "Unfortunately not; I tied it and it fails. The issue is, we would want to register the LogCaptureAppender only for KafkaStreams.class but at this point in the test, the corresponding logger does not exist yet: it's only created in the constructor call, that we actually test. Does this make sense?", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410836311", "createdAt": "2020-04-19T07:07:22Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -801,8 +801,11 @@ public void shouldWarnAboutRocksDBConfigSetterIsNotGuaranteedToBeBackwardsCompat\n         props.setProperty(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestRocksDbConfigSetter.class.getName());\n \n         final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MTA4Ng=="}, "originalCommit": null, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDcyOTYxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTo0OTo1MFrOGHtvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNzowMzozNVrOGHzbHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MjY5NQ==", "bodyText": "Not a huge fan of this particular \"clean up\". We're trading a tightly defined scope for de-duplicating the trivial line results.add(deserialization). It doesn't seem like a good trade to me.", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410742695", "createdAt": "2020-04-18T19:49:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStoreTest.java", "diffHunk": "@@ -512,19 +512,24 @@ private Bytes serializeKey(final Windowed<String> key) {\n         final StateSerdes<String, Long> stateSerdes = StateSerdes.withBuiltinTypes(\"dummy\", String.class, Long.class);\n         while (iterator.hasNext()) {\n             final KeyValue<Bytes, byte[]> next = iterator.next();\n+            final KeyValue<Windowed<String>, Long> deserialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgzNTc0MQ==", "bodyText": "I don't feel \"strong\" about it -- it was an IntelliJ warning/suggestion to \"share common code\".", "url": "https://github.com/apache/kafka/pull/8508#discussion_r410835741", "createdAt": "2020-04-19T07:03:35Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStoreTest.java", "diffHunk": "@@ -512,19 +512,24 @@ private Bytes serializeKey(final Windowed<String> key) {\n         final StateSerdes<String, Long> stateSerdes = StateSerdes.withBuiltinTypes(\"dummy\", String.class, Long.class);\n         while (iterator.hasNext()) {\n             final KeyValue<Bytes, byte[]> next = iterator.next();\n+            final KeyValue<Windowed<String>, Long> deserialized;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MjY5NQ=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzU1NzU3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDoyNDoyNlrOGImLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo0Mjo1NlrOGIo7Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzMxMQ==", "bodyText": "Hmm, this might be surprising. Won't this cause the test executor thread to be called \"threadName\" from now until the end of the build?\nDo you think we could instead get the currentThread's name and use that in the assertions? Or otherwise make the assertions agnostic to the name of the thread?", "url": "https://github.com/apache/kafka/pull/8508#discussion_r411667311", "createdAt": "2020-04-20T20:24:26Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -84,6 +87,10 @@\n \n     @Before\n     public void init() {\n+        // When executing on Jenkins, the thread name is set to an unknown value,\n+        // hence, we need to set it explicitly to make our log-assertions pass\n+        Thread.currentThread().setName(threadName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b653333836d86b105961c0d611e849bbb4d4d8c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMjMxNA==", "bodyText": "Getting the name is much better! Should have done this for the beginning on...", "url": "https://github.com/apache/kafka/pull/8508#discussion_r411712314", "createdAt": "2020-04-20T21:42:56Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -84,6 +87,10 @@\n \n     @Before\n     public void init() {\n+        // When executing on Jenkins, the thread name is set to an unknown value,\n+        // hence, we need to set it explicitly to make our log-assertions pass\n+        Thread.currentThread().setName(threadName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2NzMxMQ=="}, "originalCommit": {"oid": "4b653333836d86b105961c0d611e849bbb4d4d8c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3033, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}