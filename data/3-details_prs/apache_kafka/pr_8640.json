{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NjY4MjI0", "number": 8640, "title": "MINOR: equals() should check _unknownTaggedFields", "bodyText": "", "createdAt": "2020-05-10T04:44:08Z", "url": "https://github.com/apache/kafka/pull/8640", "merged": true, "mergeCommit": {"oid": "6a30b4e38502f3821d3e500bb8fa6f00ec39aa92"}, "closed": true, "closedAt": "2020-06-08T19:57:49Z", "author": {"login": "cmccabe"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfzmqDgBqjMzMTk5ODUyODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpTrIWgFqTQyNjQ0NzMxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjA2NDI2", "url": "https://github.com/apache/kafka/pull/8640#pullrequestreview-416606426", "createdAt": "2020-05-22T02:17:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDIzNzEy", "url": "https://github.com/apache/kafka/pull/8640#pullrequestreview-421423712", "createdAt": "2020-05-30T15:51:52Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDIzODEw", "url": "https://github.com/apache/kafka/pull/8640#pullrequestreview-421423810", "createdAt": "2020-05-30T15:53:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1MzoyNFrOGc0BXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1MzoyNFrOGc0BXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTYyOA==", "bodyText": "Did you mean to make a change to unknownTaggedFields before the two asserts above?", "url": "https://github.com/apache/kafka/pull/8640#discussion_r432865628", "createdAt": "2020-05-30T15:53:24Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -962,4 +962,23 @@ private void verifyWriteSucceeds(short version, Message message) throws Exceptio\n         assertEquals(\"Expected the serialized size to be \" + size +\n             \", but it was \" + buf.position(), size, buf.position());\n     }\n+\n+    @Test\n+    public void testCompareWithUnknownTaggedFields() throws Exception {\n+        CreateTopicsRequestData createTopics = new CreateTopicsRequestData();\n+        createTopics.setTimeoutMs(123);\n+        CreateTopicsRequestData createTopics2 = new CreateTopicsRequestData();\n+        createTopics2.setTimeoutMs(123);\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);\n+        createTopics.unknownTaggedFields();\n+        assertEquals(createTopics, createTopics2);\n+        assertEquals(createTopics2, createTopics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDIzODgy", "url": "https://github.com/apache/kafka/pull/8640#pullrequestreview-421423882", "createdAt": "2020-05-30T15:54:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1NDozMVrOGc0BoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNTo1NDozMVrOGc0BoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NTY5Ng==", "bodyText": "What is the purpose of this?", "url": "https://github.com/apache/kafka/pull/8640#discussion_r432865696", "createdAt": "2020-05-30T15:54:31Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2033,15 +2033,21 @@ private void generateClassEquals(String className, StructSpec struct,\n             elementKeysAreEqual ? \"elementKeysAreEqual\" : \"equals\");\n         buffer.incrementIndent();\n         buffer.printf(\"if (!(obj instanceof %s)) return false;%n\", className);\n+        buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n         if (!struct.fields().isEmpty()) {\n-            buffer.printf(\"%s other = (%s) obj;%n\", className, className);\n             for (FieldSpec field : struct.fields()) {\n                 if (!elementKeysAreEqual || field.mapKey()) {\n                     generateFieldEquals(field);\n                 }\n             }\n         }\n-        buffer.printf(\"return true;%n\");\n+        if (elementKeysAreEqual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5", "author": {"user": {"login": "cmccabe", "name": "Colin Patrick McCabe"}}, "url": "https://github.com/apache/kafka/commit/b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5", "committedDate": "2020-06-08T17:03:47Z", "message": "MINOR: equals() should check _unknownTaggedFields\n\n_unknownTaggedFields contains tagged fields which we don't understand\nwith the current schema.  However, we still want to keep the data around\nfor various purposes. For example, if we are printing out a JSON form of\nthe message we received, we want to include a section containing the\ntagged fields that couldn't be parsed. To leave these out would give an\nincorrect impression of what was sent over the wire.  Since the unknown\ntagged fields represent real data, they should be included in the fields\nchecked by equals()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5", "author": {"user": {"login": "cmccabe", "name": "Colin Patrick McCabe"}}, "url": "https://github.com/apache/kafka/commit/b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5", "committedDate": "2020-06-08T17:03:47Z", "message": "MINOR: equals() should check _unknownTaggedFields\n\n_unknownTaggedFields contains tagged fields which we don't understand\nwith the current schema.  However, we still want to keep the data around\nfor various purposes. For example, if we are printing out a JSON form of\nthe message we received, we want to include a section containing the\ntagged fields that couldn't be parsed. To leave these out would give an\nincorrect impression of what was sent over the wire.  Since the unknown\ntagged fields represent real data, they should be included in the fields\nchecked by equals()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDQ3MzE4", "url": "https://github.com/apache/kafka/pull/8640#pullrequestreview-426447318", "createdAt": "2020-06-08T17:12:17Z", "commit": {"oid": "b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 932, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}