{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTEzMzQx", "number": 8955, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTozNTo1MlrOEbFrUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyNjo0NlrOEfFhvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODQwMDE2OnYy", "diffSide": "RIGHT", "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/Serdes.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTozNTo1MlrOHE5fhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzowOToyN1rOHGC96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5ODMxMQ==", "bodyText": "Can you add the \"since\" parameter?", "url": "https://github.com/apache/kafka/pull/8955#discussion_r474898311", "createdAt": "2020-08-21T19:35:52Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/Serdes.scala", "diffHunk": "@@ -24,6 +24,7 @@ import java.util\n import org.apache.kafka.common.serialization.{Deserializer, Serde, Serdes => JSerdes, Serializer}\n import org.apache.kafka.streams.kstream.WindowedSerdes\n \n+@deprecated(\"Use org.apache.kafka.streams.scala.serialization.Serdes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4bbe4c293250337caa0dbc65511562e232ee3c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwMjEyMQ==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/8955#discussion_r476102121", "createdAt": "2020-08-25T03:09:27Z", "author": {"login": "LMnet"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/Serdes.scala", "diffHunk": "@@ -24,6 +24,7 @@ import java.util\n import org.apache.kafka.common.serialization.{Deserializer, Serde, Serdes => JSerdes, Serializer}\n import org.apache.kafka.streams.kstream.WindowedSerdes\n \n+@deprecated(\"Use org.apache.kafka.streams.scala.serialization.Serdes\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5ODMxMQ=="}, "originalCommit": {"oid": "1d4bbe4c293250337caa0dbc65511562e232ee3c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDM1NDg0OnYy", "diffSide": "RIGHT", "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo0NjowNVrOHHPqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNDowNjoxOVrOHJpYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1ODc1NQ==", "bodyText": "Ooh, this one might become a problem.\nSee https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size\nThe fact that we're deprecating this constructor isn't what concerns me, it's the reason why: if you were to implicitly use this serde to read records, you'd get incorrect results. This constructor fills in the end of the window as Long.MAX_VALUE, which will be wrong approximately all the time.\nFurther, when we pass serdes like this, they have to be pre-configured. Streams won't call configure. We could plan to require an implicit streamsConfig: Properties argument and then extend KIP-659 to configure this serde using the new window.size.ms config. But that might not be the right window size in practice either, and the fact that it's an implicit makes me concerned that it would be really hard to track down the bug in user code.\nI'm sort of thinking maybe we should just drop this one implicit, since you really need to specify the window size for it to work properly.\nNote, the serializer is safe, it's only the deserializer that we need to worry about. So, my other idea would be for the implicit to pack up a new serde with the new TimeWindowedSerializer(inner) and some kind of new ThrowUnsupportedOperationExceptionDeserializer() that prevents the implicit from being used inappropriately. The exception message could say \"This implicit serde is only for serializing keys. To deserialize as well, you should directly provide a WindowedSerdes.TimeWindowedSerde instance.\"\nWhat do you think?", "url": "https://github.com/apache/kafka/pull/8955#discussion_r477358755", "createdAt": "2020-08-26T14:46:05Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>\n+ * Copyright (C) 2017-2018 Alexis Seigneurin.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.serialization\n+\n+import java.nio.ByteBuffer\n+import java.util\n+import java.util.UUID\n+\n+import org.apache.kafka.common.serialization.{Deserializer, Serde, Serializer, Serdes => JSerdes}\n+import org.apache.kafka.streams.kstream.WindowedSerdes\n+\n+object Serdes extends LowPrioritySerdes {\n+  implicit def stringSerde: Serde[String] = JSerdes.String()\n+  implicit def longSerde: Serde[Long] = JSerdes.Long().asInstanceOf[Serde[Long]]\n+  implicit def javaLongSerde: Serde[java.lang.Long] = JSerdes.Long()\n+  implicit def byteArraySerde: Serde[Array[Byte]] = JSerdes.ByteArray()\n+  implicit def bytesSerde: Serde[org.apache.kafka.common.utils.Bytes] = JSerdes.Bytes()\n+  implicit def byteBufferSerde: Serde[ByteBuffer] = JSerdes.ByteBuffer()\n+  implicit def shortSerde: Serde[Short] = JSerdes.Short().asInstanceOf[Serde[Short]]\n+  implicit def javaShortSerde: Serde[java.lang.Short] = JSerdes.Short()\n+  implicit def floatSerde: Serde[Float] = JSerdes.Float().asInstanceOf[Serde[Float]]\n+  implicit def javaFloatSerde: Serde[java.lang.Float] = JSerdes.Float()\n+  implicit def doubleSerde: Serde[Double] = JSerdes.Double().asInstanceOf[Serde[Double]]\n+  implicit def javaDoubleSerde: Serde[java.lang.Double] = JSerdes.Double()\n+  implicit def intSerde: Serde[Int] = JSerdes.Integer().asInstanceOf[Serde[Int]]\n+  implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n+  implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n+\n+  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n+    new WindowedSerdes.TimeWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256cd8e9c03a778e7abeaf0e53f501c508a50a51"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNzQyMw==", "bodyText": "I got acquainted KIP-659 and in my opinion, there are few ways to handle this problem:\n\nDelete timeWindowedSerde from the new Serdes object, because it's a new code and we would not have any compatibility issues. Also, we could add some comments in the deprecation message about this serde.\nAdd another implicit requirement to the timeWindowedSerde. For example implicit streamsConfig: Properties, like you suggested. But Properties is too wide and not specific type. I personally don't like this option. I think it could become one more kafka pitfall.\nRemove implicit modifier from timeWindowedSerde. We could make it a regular function that requires streams config explicitly.\n\nI prefer the third option.\nA bit of offtop, but I found all idea of configurable through config serdes confusing. I have to describe serdes in one place, but config them in some other place. I would prefer a system that has immutable and not configurable serdes with an extra layer on top of it with configurations. Serdes mutability already makes some difficulties and that's why in Serdes object all instances are def, not val.", "url": "https://github.com/apache/kafka/pull/8955#discussion_r478127423", "createdAt": "2020-08-27T05:11:11Z", "author": {"login": "LMnet"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>\n+ * Copyright (C) 2017-2018 Alexis Seigneurin.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.serialization\n+\n+import java.nio.ByteBuffer\n+import java.util\n+import java.util.UUID\n+\n+import org.apache.kafka.common.serialization.{Deserializer, Serde, Serializer, Serdes => JSerdes}\n+import org.apache.kafka.streams.kstream.WindowedSerdes\n+\n+object Serdes extends LowPrioritySerdes {\n+  implicit def stringSerde: Serde[String] = JSerdes.String()\n+  implicit def longSerde: Serde[Long] = JSerdes.Long().asInstanceOf[Serde[Long]]\n+  implicit def javaLongSerde: Serde[java.lang.Long] = JSerdes.Long()\n+  implicit def byteArraySerde: Serde[Array[Byte]] = JSerdes.ByteArray()\n+  implicit def bytesSerde: Serde[org.apache.kafka.common.utils.Bytes] = JSerdes.Bytes()\n+  implicit def byteBufferSerde: Serde[ByteBuffer] = JSerdes.ByteBuffer()\n+  implicit def shortSerde: Serde[Short] = JSerdes.Short().asInstanceOf[Serde[Short]]\n+  implicit def javaShortSerde: Serde[java.lang.Short] = JSerdes.Short()\n+  implicit def floatSerde: Serde[Float] = JSerdes.Float().asInstanceOf[Serde[Float]]\n+  implicit def javaFloatSerde: Serde[java.lang.Float] = JSerdes.Float()\n+  implicit def doubleSerde: Serde[Double] = JSerdes.Double().asInstanceOf[Serde[Double]]\n+  implicit def javaDoubleSerde: Serde[java.lang.Double] = JSerdes.Double()\n+  implicit def intSerde: Serde[Int] = JSerdes.Integer().asInstanceOf[Serde[Int]]\n+  implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n+  implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n+\n+  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n+    new WindowedSerdes.TimeWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1ODc1NQ=="}, "originalCommit": {"oid": "256cd8e9c03a778e7abeaf0e53f501c508a50a51"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NjMxMg==", "bodyText": "Thanks @LMnet ,\nI agree with you about option 2, it seems unlikely to actually work automatically and very likely to result in confusing implicit resolution conflict compiler errors.\n(1) and (3) are both fine with me. (3) seems mildly unnecessary, since it would just pass through directly to the constructor of the TimeWindowedSerde. Just to be clear, though, I would not recommend :\ndef timeWindowedSerde[T](tSerde: Serde[T], properties: Properties): WindowedSerdes.TimeWindowedSerde[T]\nRather, I'd suggest:\ndef timeWindowedSerde[T](tSerde: Serde[T], windowSize: Long): WindowedSerdes.TimeWindowedSerde[T] = new WindowedSerdes.TimeWindowedSerde[T](tSerde, windowSize)\nI.e., if you're explicitly constructing the serde anyway, you might as well explicitly specify its parameters. The config properties are really for the case when the serde is reflectively constructed by the Consumer.\nBy the way, I agree about the idea of configuring serdes to be confusing. It's really to support more complex serdes that store their schemas externally AND that are constructed reflectively by Streams. For example, instead of passing the serdes into the DSL at all (which is what these implicits automate for Scala users), you might just set default.value.serde to a \"json serde\" or an \"avro serde\" or a \"schema registry serde\". These things need access to the runtime config, and the mechanism to give it to them is to reflectively construct them via the zero-arg constructor and then invoke configure() with the runtime configs. On the other hand, the serdes in this file, like UUIDSerde or LongSerde, don't need any configuration; they already fully specify their schemas with no additional input. The TimeWindowedSerde does need some additional input (the inner type and the window size). When it's constructed reflectively, this information has to be passed to the serde via configs, but when it's constructed by user code, we can (and should) just pass all the information to the constructor.", "url": "https://github.com/apache/kafka/pull/8955#discussion_r479356312", "createdAt": "2020-08-28T14:51:07Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>\n+ * Copyright (C) 2017-2018 Alexis Seigneurin.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.serialization\n+\n+import java.nio.ByteBuffer\n+import java.util\n+import java.util.UUID\n+\n+import org.apache.kafka.common.serialization.{Deserializer, Serde, Serializer, Serdes => JSerdes}\n+import org.apache.kafka.streams.kstream.WindowedSerdes\n+\n+object Serdes extends LowPrioritySerdes {\n+  implicit def stringSerde: Serde[String] = JSerdes.String()\n+  implicit def longSerde: Serde[Long] = JSerdes.Long().asInstanceOf[Serde[Long]]\n+  implicit def javaLongSerde: Serde[java.lang.Long] = JSerdes.Long()\n+  implicit def byteArraySerde: Serde[Array[Byte]] = JSerdes.ByteArray()\n+  implicit def bytesSerde: Serde[org.apache.kafka.common.utils.Bytes] = JSerdes.Bytes()\n+  implicit def byteBufferSerde: Serde[ByteBuffer] = JSerdes.ByteBuffer()\n+  implicit def shortSerde: Serde[Short] = JSerdes.Short().asInstanceOf[Serde[Short]]\n+  implicit def javaShortSerde: Serde[java.lang.Short] = JSerdes.Short()\n+  implicit def floatSerde: Serde[Float] = JSerdes.Float().asInstanceOf[Serde[Float]]\n+  implicit def javaFloatSerde: Serde[java.lang.Float] = JSerdes.Float()\n+  implicit def doubleSerde: Serde[Double] = JSerdes.Double().asInstanceOf[Serde[Double]]\n+  implicit def javaDoubleSerde: Serde[java.lang.Double] = JSerdes.Double()\n+  implicit def intSerde: Serde[Int] = JSerdes.Integer().asInstanceOf[Serde[Int]]\n+  implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n+  implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n+\n+  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n+    new WindowedSerdes.TimeWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1ODc1NQ=="}, "originalCommit": {"oid": "256cd8e9c03a778e7abeaf0e53f501c508a50a51"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NzEyMQ==", "bodyText": "Ok, I agree that the third option is a bit unnecessary. We already have a constructor for that.\nI deleted WindowedSerdes at all and mentioned them in the deprecated message.", "url": "https://github.com/apache/kafka/pull/8955#discussion_r479877121", "createdAt": "2020-08-31T04:06:19Z", "author": {"login": "LMnet"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>\n+ * Copyright (C) 2017-2018 Alexis Seigneurin.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.scala.serialization\n+\n+import java.nio.ByteBuffer\n+import java.util\n+import java.util.UUID\n+\n+import org.apache.kafka.common.serialization.{Deserializer, Serde, Serializer, Serdes => JSerdes}\n+import org.apache.kafka.streams.kstream.WindowedSerdes\n+\n+object Serdes extends LowPrioritySerdes {\n+  implicit def stringSerde: Serde[String] = JSerdes.String()\n+  implicit def longSerde: Serde[Long] = JSerdes.Long().asInstanceOf[Serde[Long]]\n+  implicit def javaLongSerde: Serde[java.lang.Long] = JSerdes.Long()\n+  implicit def byteArraySerde: Serde[Array[Byte]] = JSerdes.ByteArray()\n+  implicit def bytesSerde: Serde[org.apache.kafka.common.utils.Bytes] = JSerdes.Bytes()\n+  implicit def byteBufferSerde: Serde[ByteBuffer] = JSerdes.ByteBuffer()\n+  implicit def shortSerde: Serde[Short] = JSerdes.Short().asInstanceOf[Serde[Short]]\n+  implicit def javaShortSerde: Serde[java.lang.Short] = JSerdes.Short()\n+  implicit def floatSerde: Serde[Float] = JSerdes.Float().asInstanceOf[Serde[Float]]\n+  implicit def javaFloatSerde: Serde[java.lang.Float] = JSerdes.Float()\n+  implicit def doubleSerde: Serde[Double] = JSerdes.Double().asInstanceOf[Serde[Double]]\n+  implicit def javaDoubleSerde: Serde[java.lang.Double] = JSerdes.Double()\n+  implicit def intSerde: Serde[Int] = JSerdes.Integer().asInstanceOf[Serde[Int]]\n+  implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n+  implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n+\n+  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n+    new WindowedSerdes.TimeWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1ODc1NQ=="}, "originalCommit": {"oid": "256cd8e9c03a778e7abeaf0e53f501c508a50a51"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDMxODY5OnYy", "diffSide": "LEFT", "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToyNjo0NlrOHLI3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo0MDowNVrOHLpPTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTYxMw==", "bodyText": "Ah, we don't technically need to drop this one, only the timeWindowedSerde. Sorry for the confusion.", "url": "https://github.com/apache/kafka/pull/8955#discussion_r481441613", "createdAt": "2020-09-01T21:26:46Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -43,12 +43,6 @@ object Serdes extends LowPrioritySerdes {\n   implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n   implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n \n-  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n-    new WindowedSerdes.TimeWindowedSerde[T](tSerde)\n-\n-  implicit def sessionWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.SessionWindowedSerde[T] =\n-    new WindowedSerdes.SessionWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee45e11b7f5dbe51c2ab6dd1e096d6074567b08"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NDM0NA==", "bodyText": "Adding it back will also unblock the build, which fails right now because WindowedSerdes is an unused import. I'll just add this back and push to your branch, assuming the rest of the tests pass, so I can go ahead and merge it.", "url": "https://github.com/apache/kafka/pull/8955#discussion_r481444344", "createdAt": "2020-09-01T21:32:43Z", "author": {"login": "vvcephei"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -43,12 +43,6 @@ object Serdes extends LowPrioritySerdes {\n   implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n   implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n \n-  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n-    new WindowedSerdes.TimeWindowedSerde[T](tSerde)\n-\n-  implicit def sessionWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.SessionWindowedSerde[T] =\n-    new WindowedSerdes.SessionWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTYxMw=="}, "originalCommit": {"oid": "5ee45e11b7f5dbe51c2ab6dd1e096d6074567b08"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3MjA0Ng==", "bodyText": "Ok, thanks!", "url": "https://github.com/apache/kafka/pull/8955#discussion_r481972046", "createdAt": "2020-09-02T10:40:05Z", "author": {"login": "LMnet"}, "path": "streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/serialization/Serdes.scala", "diffHunk": "@@ -43,12 +43,6 @@ object Serdes extends LowPrioritySerdes {\n   implicit def javaIntegerSerde: Serde[java.lang.Integer] = JSerdes.Integer()\n   implicit def uuidSerde: Serde[UUID] = JSerdes.UUID()\n \n-  implicit def timeWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.TimeWindowedSerde[T] =\n-    new WindowedSerdes.TimeWindowedSerde[T](tSerde)\n-\n-  implicit def sessionWindowedSerde[T](implicit tSerde: Serde[T]): WindowedSerdes.SessionWindowedSerde[T] =\n-    new WindowedSerdes.SessionWindowedSerde[T](tSerde)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0MTYxMw=="}, "originalCommit": {"oid": "5ee45e11b7f5dbe51c2ab6dd1e096d6074567b08"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2323, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}