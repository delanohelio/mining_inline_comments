{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDg1ODA2", "number": 9434, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzowOToxMVrOEtlM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyOToyNFrOEuE8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjMwODkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzowOToxMVrOHhc75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDoyODo0NFrOHhj4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzOTE0Mg==", "bodyText": "Hmm.. If the LogReadResult has a diverging epoch, wouldn't we want to respond immediately?", "url": "https://github.com/apache/kafka/pull/9434#discussion_r504839142", "createdAt": "2020-10-14T17:09:11Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1084,7 +1084,7 @@ class ReplicaManager(val config: KafkaConfig,\n       fetchInfos.foreach { case (topicPartition, partitionData) =>\n         logReadResultMap.get(topicPartition).foreach(logReadResult => {\n           val logOffsetMetadata = logReadResult.info.fetchOffsetMetadata\n-          fetchPartitionStatus += (topicPartition -> FetchPartitionStatus(logOffsetMetadata, partitionData))\n+          fetchPartitionStatus += (topicPartition -> FetchPartitionStatus(logOffsetMetadata, partitionData, logReadResult.divergingEpoch.nonEmpty))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b48bc38d71af7fdf3bca38b19be63356208dd2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1MjkwMw==", "bodyText": "ah, yes, so we don't need to check the original result in DelayedFetch, we return immediately here. Updated.", "url": "https://github.com/apache/kafka/pull/9434#discussion_r504952903", "createdAt": "2020-10-14T20:28:44Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1084,7 +1084,7 @@ class ReplicaManager(val config: KafkaConfig,\n       fetchInfos.foreach { case (topicPartition, partitionData) =>\n         logReadResultMap.get(topicPartition).foreach(logReadResult => {\n           val logOffsetMetadata = logReadResult.info.fetchOffsetMetadata\n-          fetchPartitionStatus += (topicPartition -> FetchPartitionStatus(logOffsetMetadata, partitionData))\n+          fetchPartitionStatus += (topicPartition -> FetchPartitionStatus(logOffsetMetadata, partitionData, logReadResult.divergingEpoch.nonEmpty))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzOTE0Mg=="}, "originalCommit": {"oid": "f4b48bc38d71af7fdf3bca38b19be63356208dd2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjMyMTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DelayedFetch.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoxMjo1MFrOHhdDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDozMDo0NVrOHhj8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MTEyNA==", "bodyText": "Here we are using the status from the original fetch. I am wondering if we need to recheck below since it is possible to get a truncation while a fetch is in purgatory.", "url": "https://github.com/apache/kafka/pull/9434#discussion_r504841124", "createdAt": "2020-10-14T17:12:50Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/DelayedFetch.scala", "diffHunk": "@@ -88,6 +90,13 @@ class DelayedFetch(delayMs: Long,\n         try {\n           if (fetchOffset != LogOffsetMetadata.UnknownOffsetMetadata) {\n             val partition = replicaManager.getPartitionOrException(topicPartition)\n+\n+            // Case H: Return diverging epoch in response to trigger truncation\n+            if (fetchStatus.hasDivergingEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4b48bc38d71af7fdf3bca38b19be63356208dd2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1NDA0OQ==", "bodyText": "@hachikuji Thanks for the review. Makes sense, I have added a new check at the end instead of this one, not sure if there is a better way to check.", "url": "https://github.com/apache/kafka/pull/9434#discussion_r504954049", "createdAt": "2020-10-14T20:30:45Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/DelayedFetch.scala", "diffHunk": "@@ -88,6 +90,13 @@ class DelayedFetch(delayMs: Long,\n         try {\n           if (fetchOffset != LogOffsetMetadata.UnknownOffsetMetadata) {\n             val partition = replicaManager.getPartitionOrException(topicPartition)\n+\n+            // Case H: Return diverging epoch in response to trigger truncation\n+            if (fetchStatus.hasDivergingEpoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0MTEyNA=="}, "originalCommit": {"oid": "f4b48bc38d71af7fdf3bca38b19be63356208dd2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ1NjQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DelayedFetch.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxNjoyMVrOHiPskw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxNjoyMVrOHiPskw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3MDgwMw==", "bodyText": "nit: unneeded newline", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505670803", "createdAt": "2020-10-15T16:16:21Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/DelayedFetch.scala", "diffHunk": "@@ -96,6 +98,7 @@ class DelayedFetch(delayMs: Long,\n               case FetchTxnCommitted => offsetSnapshot.lastStableOffset\n             }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzUwMzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Partition.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyODoxNFrOHiQKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyOToyMlrOHiSgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3ODM0NA==", "bodyText": "Do we need to check the error? Or are you relying on the check below failing if UNDEFINED_EPOCH is returned?", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505678344", "createdAt": "2020-10-15T16:28:14Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1162,6 +1162,13 @@ class Partition(val topicPartition: TopicPartition,\n     localLog.fetchOffsetSnapshot\n   }\n \n+  def hasDivergingEpoch(currentLeaderEpoch: Optional[Integer],\n+                        lastFetchedEpoch: Int,\n+                        fetchOffset: Long): Boolean = {\n+    val epochEndOffset = lastOffsetForLeaderEpoch(currentLeaderEpoch, lastFetchedEpoch, fetchOnlyFromLeader = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODE0Mw==", "bodyText": "@hachikuji Thanks for the review. I took the check from Partition.readRecords, but we throw exceptions there to return appropriate errors. I was thinking we would return true here for undefined epochs because of the check below and that would go through the other code path to return the appropriate errors or diverging epoch. Do you think we should do the same error handling hchecks ere as in readRecords to make the flow more obvious?", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505698143", "createdAt": "2020-10-15T16:58:35Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1162,6 +1162,13 @@ class Partition(val topicPartition: TopicPartition,\n     localLog.fetchOffsetSnapshot\n   }\n \n+  def hasDivergingEpoch(currentLeaderEpoch: Optional[Integer],\n+                        lastFetchedEpoch: Int,\n+                        fetchOffset: Long): Boolean = {\n+    val epochEndOffset = lastOffsetForLeaderEpoch(currentLeaderEpoch, lastFetchedEpoch, fetchOnlyFromLeader = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3ODM0NA=="}, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjgwMg==", "bodyText": "As discussed offline, moved the check to DelayedFetch.", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505716802", "createdAt": "2020-10-15T17:29:22Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/cluster/Partition.scala", "diffHunk": "@@ -1162,6 +1162,13 @@ class Partition(val topicPartition: TopicPartition,\n     localLog.fetchOffsetSnapshot\n   }\n \n+  def hasDivergingEpoch(currentLeaderEpoch: Optional[Integer],\n+                        lastFetchedEpoch: Int,\n+                        fetchOffset: Long): Boolean = {\n+    val epochEndOffset = lastOffsetForLeaderEpoch(currentLeaderEpoch, lastFetchedEpoch, fetchOnlyFromLeader = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3ODM0NA=="}, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzUwOTgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FetchSession.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyOToyNFrOHiQN0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoyOTozN1rOHiSg4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3OTMxMw==", "bodyText": "Do we need to provide a default here?", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505679313", "createdAt": "2020-10-15T16:29:24Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -77,7 +77,8 @@ class CachedPartition(val topic: String,\n                       var highWatermark: Long,\n                       var leaderEpoch: Optional[Integer],\n                       var fetcherLogStartOffset: Long,\n-                      var localLogStartOffset: Long)\n+                      var localLogStartOffset: Long,\n+                      var lastFetchedEpoch: Optional[Integer] = Optional.empty[Integer])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjk2MQ==", "bodyText": "removed", "url": "https://github.com/apache/kafka/pull/9434#discussion_r505716961", "createdAt": "2020-10-15T17:29:37Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -77,7 +77,8 @@ class CachedPartition(val topic: String,\n                       var highWatermark: Long,\n                       var leaderEpoch: Optional[Integer],\n                       var fetcherLogStartOffset: Long,\n-                      var localLogStartOffset: Long)\n+                      var localLogStartOffset: Long,\n+                      var lastFetchedEpoch: Optional[Integer] = Optional.empty[Integer])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3OTMxMw=="}, "originalCommit": {"oid": "38ce7eda1aab049d4008ba1881ea26ba1dac294d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1783, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}