{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODY5Mjg5", "number": 9319, "title": "KAFKA-10413: Allow for even distribution of lost/new tasks when multiple Connect workers join at the same time", "bodyText": "Allow even distribution of lost/new tasks when more than one worker joins the group at the same time\nIssue description:\nExisting issue 1 description : When more than one worker joins the consumer group the incremental co operative assignor revokes and re assigns atmost average number of tasks per worker.\nIssue: This results in the additional workers joining the group stay idle and would require more future rebalances to happen to have even distribution of tasks.\nFix: As part of task assignment calculation following a deployment, the reassignment of tasks are calculated by revoking all the tasks above ceil(average) number of tasks.\nExisting issue 2 description: When more than one worker is lost and rejoins the group at most one worker will be re assigned with the lost tasks from all the workers that left the group.\nIssue: In scenarios where more than one worker is lost and rejoins the group only one among them gets assigned all the partitions that were lost in the past. The additional workers that have joined would not get any task assigned to them until a rebalance that happens in future.\nFix: As part fo lost task re assignment all the new workers that have joined the group would be considered for task assignment and would be assigned in a round robin fashion with the new tasks.\nTesting strategy : System testing in a Kube environment completed.\nUT : updated to UT", "createdAt": "2020-09-22T11:20:50Z", "url": "https://github.com/apache/kafka/pull/9319", "merged": true, "mergeCommit": {"oid": "e260f64a9c763f30df13e6694893cdcc15a1acfe"}, "closed": true, "closedAt": "2021-02-02T20:04:07Z", "author": {"login": "ramesh-muthusamy"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLWJP-gH2gAyNDkwODY5Mjg5OjFjYzk5YjFjMTNlMWZhZTNiMGZhZDY4N2Y2YzRmYjNmMTAwOGU1ZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2ROyYgFqTU4MTcxNzcwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1cc99b1c13e1fae3b0fad687f6c4fb3f1008e5d6", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/1cc99b1c13e1fae3b0fad687f6c4fb3f1008e5d6", "committedDate": "2020-09-22T11:18:25Z", "message": "Allow even distribution of lost/new tasks when more than one worker joins the group at the same time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/7c2b2637ffa46a7bde5b3510918086cbdb2ff40c", "committedDate": "2020-09-22T12:16:35Z", "message": "fix code style and reduce NPath complexity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTcxNDY3", "url": "https://github.com/apache/kafka/pull/9319#pullrequestreview-497971467", "createdAt": "2020-09-28T23:48:29Z", "commit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0ODoyOVrOHZTg9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDoyM1rOHZTylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjE4Mg==", "bodyText": "Can you please make this log message more readable?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496296182", "createdAt": "2020-09-28T23:48:29Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assgn post lb calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NzE5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n          \n          \n            \n                            log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n          \n          \n            \n                                    candidateWorkerLoad.size(),\n          \n          \n            \n                                    candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496297191", "createdAt": "2020-09-28T23:52:06Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a string to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298206", "createdAt": "2020-09-28T23:55:49Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODM3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"Assigned task id {} to member {}\", task, worker.worker());\n          \n      \n    \n    \n  \n\nDo we need both of these debug messages? After all, worker.assign(...) is just adding a ConnectorTaskId to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496298370", "createdAt": "2020-09-28T23:56:27Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"A list of candidate workers has been found to assign lost tasks: {}\", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning connector id {} to member {}\", connector, worker.worker());\n+                    worker.assign(connector);\n+                    log.debug(\"Assigned connector id {} to member {}\", connector, worker.worker());\n+                }\n+                candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (ConnectorTaskId task : lostAssignments.tasks()) {\n+                    if (!candidateWorkerIterator.hasNext()) {\n+                        candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                    }\n+                    WorkerLoad worker = candidateWorkerIterator.next();\n+                    log.debug(\"Assigning task id {} to member {}\", task, worker.worker());\n+                    worker.assign(task);\n+                    log.debug(\"Assigned task id {} to member {}\", task, worker.worker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTI0OA==", "bodyText": "What do you think about combining these log messages?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);\n          \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor={}, ceiling={}\", floorTasks, ceilTasks);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496299248", "createdAt": "2020-09-28T23:59:37Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -559,6 +576,8 @@ private void resetDelay() {\n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n         log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New rounded down (ceil) average number of tasks per worker {}\", ceilTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng==", "bodyText": "Isn't it possible that numToRevoke might be negative?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300646", "createdAt": "2020-09-29T00:04:15Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"revoke number of tasks per worker {}\", numToRevoke);\n          \n          \n            \n                        log.debug(\"Tasks on worker {} is higher than ceiling, so revoking {} tasks\", existing, numToRevoke);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r496300694", "createdAt": "2020-09-29T00:04:23Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;\n+            log.debug(\"revoke number of tasks per worker {}\", numToRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a4cc78247c2c0438592652bc4a0771cc29aac6c", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/9a4cc78247c2c0438592652bc4a0771cc29aac6c", "committedDate": "2020-10-17T05:18:59Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/f3ec70e05dc4d2e29736b9c3167e87dd15767ba3", "committedDate": "2020-10-17T05:19:22Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "382e09e0a759a4069554561a3fcb415c8075bec1", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/382e09e0a759a4069554561a3fcb415c8075bec1", "committedDate": "2020-10-17T05:19:33Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56d1f6dd01752ab0322b83ec9fd82d12e5fbf599", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/56d1f6dd01752ab0322b83ec9fd82d12e5fbf599", "committedDate": "2020-10-17T05:19:53Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88335da4884139809f995e281c228f3ac6b9f374", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/88335da4884139809f995e281c228f3ac6b9f374", "committedDate": "2020-10-17T05:20:02Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Randall Hauch <rhauch@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef", "committedDate": "2020-10-17T05:21:14Z", "message": "update log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470d86bf0a67d0b156f8c792264f90fd56845a83", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/470d86bf0a67d0b156f8c792264f90fd56845a83", "committedDate": "2020-10-27T07:59:51Z", "message": "Check whether connectors and tasks are balanced in Connect integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDM2NjAz", "url": "https://github.com/apache/kafka/pull/9319#pullrequestreview-517436603", "createdAt": "2020-10-27T08:12:02Z", "commit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoxMjowMlrOHovufA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODozNDoyNlrOHowhvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ4NzAzNg==", "bodyText": "Why do we print the assignment again here. They don't seem to change since we log them in line 249", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512487036", "createdAt": "2020-10-27T08:12:02Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-\n+        log.debug(\"Connector and task to revoke assignment post load balancer calculation: {}\", toRevoke);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MjU4Nw==", "bodyText": "So we balance the lost tasks among the new workers now. That balances the tasks but only among the new workers. Have you checked how this works with task revocation called right after?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512492587", "createdAt": "2020-10-27T08:21:52Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,\n         if (scheduledRebalance > 0 && now >= scheduledRebalance) {\n             // delayed rebalance expired and it's time to assign resources\n             log.debug(\"Delayed rebalance expired. Reassigning lost tasks\");\n-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();\n+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();\n             if (!candidateWorkersForReassignment.isEmpty()) {\n                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);\n             }\n \n-            if (candidateWorkerLoad.isPresent()) {\n-                WorkerLoad workerLoad = candidateWorkerLoad.get();\n-                log.debug(\"A candidate worker has been found to assign lost tasks: {}\", workerLoad.worker());\n-                lostAssignments.connectors().forEach(workerLoad::assign);\n-                lostAssignments.tasks().forEach(workerLoad::assign);\n+            if (!candidateWorkerLoad.isEmpty()) {\n+                log.debug(\"Assigning lost tasks to {} candidate workers: {}\", \n+                        candidateWorkerLoad.size(),\n+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(\",\")));\n+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();\n+                for (String connector : lostAssignments.connectors()) {\n+                    // Loop over the the candidate workers as many times as it takes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5MzY4NA==", "bodyText": "This assignment is unused now.", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512493684", "createdAt": "2020-10-27T08:23:50Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +595,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e6d5a87524f7afdd6fd9b29c54f442bb41a3ef"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NzI1MQ==", "bodyText": "Can you explain a bit what you aim to achieve with this change here?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512497251", "createdAt": "2020-10-27T08:29:37Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMDE1OQ==", "bodyText": "Also, we apply this logic in tasks only. But why not in the connectors too, if it helps?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r512500159", "createdAt": "2020-10-27T08:34:26Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -577,15 +596,14 @@ private void resetDelay() {\n         numToRevoke = floorTasks;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();\n+            numToRevoke = existing.tasksSize() - ceilTasks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDY0Ng=="}, "originalCommit": {"oid": "7c2b2637ffa46a7bde5b3510918086cbdb2ff40c"}, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "470d86bf0a67d0b156f8c792264f90fd56845a83", "author": {"user": {"login": "kkonstantine", "name": "Konstantine Karantasis"}}, "url": "https://github.com/apache/kafka/commit/470d86bf0a67d0b156f8c792264f90fd56845a83", "committedDate": "2020-10-27T07:59:51Z", "message": "Check whether connectors and tasks are balanced in Connect integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/66ab7c0e7e44ab6d427906f207ea1d2adf69eef7", "committedDate": "2020-11-16T05:34:46Z", "message": "remove unused variable assignment & remove redundant debug statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e6465ae872207873951427f1cfd9fae76f2de5", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/c3e6465ae872207873951427f1cfd9fae76f2de5", "committedDate": "2020-11-16T05:38:30Z", "message": "improve connector re assignment as new workers rejoin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/39b2311f297e72bc7add74d78abc899219d18ba7", "committedDate": "2020-12-18T07:07:34Z", "message": "update logs triggering UT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMDA1MjQ2", "url": "https://github.com/apache/kafka/pull/9319#pullrequestreview-581005246", "createdAt": "2021-02-02T05:54:00Z", "commit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNTo1NDowMVrOIeAtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwNjoxMzo1NVrOIeBGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODMzOTc1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n          \n          \n            \n                    log.debug(\"New average number of connectors per worker rounded down (floor) {} and rounded up (ceil) {}\", floorConnectors, ceilConnectors);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568339754", "createdAt": "2021-02-02T05:54:01Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0MDAyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n          \n          \n            \n                    log.debug(\"New average number of tasks per worker rounded down (floor) {} and rounded up (ceil) {}\", floorTasks, ceilTasks);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568340029", "createdAt": "2021-02-02T05:54:56Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDcyNQ==", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n          \n          \n            \n                    int ceilTasks = floorTasks + ((totalActiveTasksNum % totalWorkersNum == 0) ? 0 : 1);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344725", "createdAt": "2021-02-02T06:08:59Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NDk4MA==", "bodyText": "We can use the fact that these are non-negative integers.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n          \n          \n            \n                    int ceilConnectors = floorConnectors + ((totalActiveConnectorsNum % totalWorkersNum == 0) ? 0 : 1);", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568344980", "createdAt": "2021-02-02T06:09:47Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NTEzMg==", "bodyText": "nit: unneeded change", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568345132", "createdAt": "2021-02-02T06:10:11Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -260,7 +259,6 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {\n         // Do not revoke resources for re-assignment while a delayed rebalance is active\n         // Also we do not revoke in two consecutive rebalances by the same leader\n         canRevoke = delay == 0 && canRevoke;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM0NjI4Mw==", "bodyText": "we should remove the if branch on the numToRevoke here too, right?", "url": "https://github.com/apache/kafka/pull/9319#discussion_r568346283", "createdAt": "2021-02-02T06:13:55Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java", "diffHunk": "@@ -554,15 +570,19 @@ private void resetDelay() {\n         // We have at least one worker assignment (the leader itself) so totalWorkersNum can't be 0\n         log.debug(\"Previous rounded down (floor) average number of connectors per worker {}\", totalActiveConnectorsNum / existingWorkersNum);\n         int floorConnectors = totalActiveConnectorsNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of connectors per worker {}\", floorConnectors);\n+        int ceilConnectors = (int) Math.ceil((float) totalActiveConnectorsNum / totalWorkersNum);\n+        log.debug(\"New rounded down (floor) average number of connectors per worker floor connectors {} ciel connectors \", floorConnectors, ceilConnectors);\n+\n \n         log.debug(\"Previous rounded down (floor) average number of tasks per worker {}\", totalActiveTasksNum / existingWorkersNum);\n         int floorTasks = totalActiveTasksNum / totalWorkersNum;\n-        log.debug(\"New rounded down (floor) average number of tasks per worker {}\", floorTasks);\n+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);\n+        log.debug(\"New average number of tasks per worker: floor= {}, ceiling= {}\", floorTasks, ceilTasks);\n+        int numToRevoke;\n \n-        int numToRevoke = floorConnectors;\n         for (WorkerLoad existing : existingWorkers) {\n             Iterator<String> connectors = existing.connectors().iterator();\n+            numToRevoke = existing.connectorsSize() - ceilConnectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b2311f297e72bc7add74d78abc899219d18ba7"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b23c646ca1caf7648f46f2bfdc811a363e283600", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/b23c646ca1caf7648f46f2bfdc811a363e283600", "committedDate": "2021-02-02T06:21:25Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c0b653ad09d8b13b85b4eb1cea840d533afe01", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/b9c0b653ad09d8b13b85b4eb1cea840d533afe01", "committedDate": "2021-02-02T06:21:37Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7dd549e8d6cc5aaeb6e40d02d1257a34625b1e", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/fb7dd549e8d6cc5aaeb6e40d02d1257a34625b1e", "committedDate": "2021-02-02T06:21:49Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a084f7391179c2ddb5b281eceff268af9c905f11", "author": {"user": {"login": "ramesh-muthusamy", "name": "Ramesh Krishnan M"}}, "url": "https://github.com/apache/kafka/commit/a084f7391179c2ddb5b281eceff268af9c905f11", "committedDate": "2021-02-02T06:22:00Z", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java\n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de00e654a84900660f945740b650e33afd55a30", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/0de00e654a84900660f945740b650e33afd55a30", "committedDate": "2021-02-02T06:24:20Z", "message": "incorporate review comments removing the if num to revoke block for connector rebalance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3f74e29a11e7746da23e6c917270644c15c1d83", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/f3f74e29a11e7746da23e6c917270644c15c1d83", "committedDate": "2021-02-02T06:26:43Z", "message": "removed unintedend change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNzE3NzAw", "url": "https://github.com/apache/kafka/pull/9319#pullrequestreview-581717700", "createdAt": "2021-02-02T19:53:41Z", "commit": {"oid": "f3f74e29a11e7746da23e6c917270644c15c1d83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 674, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}