{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjQzMDY1", "number": 9156, "title": "KAFKA-10077: Filter downstream of state-store results in spurious tombstones", "bodyText": "fixes: KAFKA-10077.\nEnable sending old values on KTable.filter call to avoid the filter forwarding tombstones for rows that do not exist in the output.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-08-10T17:48:47Z", "url": "https://github.com/apache/kafka/pull/9156", "merged": true, "mergeCommit": {"oid": "dc81d442dfc5c3d8d9c069942f6b00e2de377a3c"}, "closed": true, "closedAt": "2020-09-25T20:58:05Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9l62nAH2gAyNDY1NjQzMDY1OmI5MDcxODcxOWEzYmMyOTRmNzU4MzAzZjg3OTdjYTc0Mjk0ZjQ2NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMUmYYgH2gAyNDY1NjQzMDY1OjlhOGQ3ZjM2YjdlNzBkZTk0NDJjYWIwYmU0YjkxZDlhMDY4YzNkOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b90718719a3bc294f758303f8797ca74294f4651", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/b90718719a3bc294f758303f8797ca74294f4651", "committedDate": "2020-08-10T17:46:14Z", "message": "KAFKA-10077: Filter downstream of state-store results in spurious tombstones\n\nEnable sending old values on `KTable.filter` call to avoid the filter sending tombstones for rows that do not exist in the output."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDgxNjE4", "url": "https://github.com/apache/kafka/pull/9156#pullrequestreview-472081618", "createdAt": "2020-08-21T01:12:27Z", "commit": {"oid": "b90718719a3bc294f758303f8797ca74294f4651"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMjoyN1rOHEYPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMjoyN1rOHEYPYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MzUwNA==", "bodyText": "Don't we need to call this.enableSendingOldValues() as \"this\" is the upstream KTable the filter is applied to? Why do we need to enable sending old values on the result of the filter() ?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r474353504", "createdAt": "2020-08-21T01:12:27Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -203,6 +203,10 @@ public String queryableStoreName() {\n             processorSupplier,\n             tableNode,\n             builder);\n+\n+        kTable.enableSendingOldValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90718719a3bc294f758303f8797ca74294f4651"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDgyMDMz", "url": "https://github.com/apache/kafka/pull/9156#pullrequestreview-472082033", "createdAt": "2020-08-21T01:13:58Z", "commit": {"oid": "b90718719a3bc294f758303f8797ca74294f4651"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMzo1OFrOHEYQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMToxMzo1OFrOHEYQ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1Mzg5MA==", "bodyText": "This is surprising to me -- need to dig into the code I guess, but I though enabling to send old values would not trigger any upstream materialization but only take effect if the store is materializes already (but would be ignored otherwise). Seems my assumption is wrong though.", "url": "https://github.com/apache/kafka/pull/9156#discussion_r474353890", "createdAt": "2020-08-21T01:13:58Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -123,7 +123,7 @@ public void shouldAllowJoinMaterializedFilteredKTable() {\n \n         assertThat(\n             topology.stateStores().size(),\n-            equalTo(1));\n+            equalTo(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b90718719a3bc294f758303f8797ca74294f4651"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49ebb7a041f35979239f340bc6455e464ad3692", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/e49ebb7a041f35979239f340bc6455e464ad3692", "committedDate": "2020-09-01T12:23:17Z", "message": "Added boolean to enableSendingOldValues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f164529973bafed27d5c6752b1676d4cc8fd8931", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/f164529973bafed27d5c6752b1676d4cc8fd8931", "committedDate": "2020-09-07T15:38:43Z", "message": "merge from trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa92350ea01fd7fcf9c52ce4981eb1429db4140", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/cfa92350ea01fd7fcf9c52ce4981eb1429db4140", "committedDate": "2020-09-08T10:02:01Z", "message": "fix scala test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/417e2ab7b27185bd6035a3e8422536a38e712b7b", "committedDate": "2020-09-09T10:15:04Z", "message": "Merge branch 'trunk' into kafka_10077_table_filter_send_old_values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzEyNzAx", "url": "https://github.com/apache/kafka/pull/9156#pullrequestreview-485312701", "createdAt": "2020-09-09T19:04:23Z", "commit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowNDoyM1rOHPVu0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0MTo1NVrOHPXO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NjczNg==", "bodyText": "Unrelated change: can we revert this?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485846736", "createdAt": "2020-09-09T19:04:23Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/server/authorizer/AuthorizableRequestContext.java", "diffHunk": "@@ -17,11 +17,12 @@\n \n package org.apache.kafka.server.authorizer;\n \n-import java.net.InetAddress;\n import org.apache.kafka.common.annotation.InterfaceStability;\n import org.apache.kafka.common.security.auth.KafkaPrincipal;\n import org.apache.kafka.common.security.auth.SecurityProtocol;\n \n+import java.net.InetAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTk1Ng==", "bodyText": "Can we flip the logic of the boolean flag ? -- It makes a knob in my mind to say, onlyIfMaterailized=false implies that we need to (ie, enforce to) materialize...  I would prefer the suggest from Guozhang to use a flag like enforceMaterialization (or maybe better materializeIfNeeded).\nAlso, the method may or may not enable sending old values and thus, we might want to rename it to maybeEnableSendOldValues (or enableSendOldValuesIfPossible or similar).", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485851956", "createdAt": "2020-09-09T19:13:38Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableAggregate.java", "diffHunk": "@@ -47,8 +47,10 @@\n     }\n \n     @Override\n-    public void enableSendingOldValues() {\n+    public boolean enableSendingOldValues(final boolean onlyIfMaterialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MjQ3NA==", "bodyText": "Why does the filter need to send old values? I though the filter needs to receive old values, and thus we should call this. enableSendingOldValues(true) to enable sending old values on the filter's input?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485852474", "createdAt": "2020-09-09T19:14:33Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -182,6 +182,8 @@ public String queryableStoreName() {\n         final KTableProcessorSupplier<K, V, V> processorSupplier =\n             new KTableFilter<>(this, predicate, filterNot, queryableStoreName);\n \n+        processorSupplier.enableSendingOldValues(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MzI5MA==", "bodyText": "Seems the boolean input parameter is missing?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485853290", "createdAt": "2020-09-09T19:16:14Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -832,18 +834,25 @@ public String queryableStoreName() {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public void enableSendingOldValues() {\n+    public boolean enableSendingOldValues(final boolean onlyIfMaterialized) {\n         if (!sendOldValues) {\n             if (processorSupplier instanceof KTableSource) {\n                 final KTableSource<K, ?> source = (KTableSource<K, V>) processorSupplier;\n+                if (onlyIfMaterialized && !source.materialized()) {\n+                    return false;\n+                }\n                 source.enableSendingOldValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTAzMw==", "bodyText": "Instead of the check, should we pass in false to enforce a materialization if necessary?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485855033", "createdAt": "2020-09-09T19:19:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableAbstractJoin.java", "diffHunk": "@@ -39,9 +39,15 @@\n     }\n \n     @Override\n-    public final void enableSendingOldValues() {\n-        table1.enableSendingOldValues();\n-        table2.enableSendingOldValues();\n+    public final boolean enableSendingOldValues(final boolean onlyIfMaterialized) {\n+        if (!table1.enableSendingOldValues(onlyIfMaterialized)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTA4Mw==", "bodyText": "as above.", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485855083", "createdAt": "2020-09-09T19:19:48Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableAbstractJoin.java", "diffHunk": "@@ -39,9 +39,15 @@\n     }\n \n     @Override\n-    public final void enableSendingOldValues() {\n-        table1.enableSendingOldValues();\n-        table2.enableSendingOldValues();\n+    public final boolean enableSendingOldValues(final boolean onlyIfMaterialized) {\n+        if (!table1.enableSendingOldValues(onlyIfMaterialized)) {\n+            throw new IllegalStateException(\"Table-table joins should always be materialized\");\n+        }\n+\n+        if (!table2.enableSendingOldValues(onlyIfMaterialized)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTIyMw==", "bodyText": "as above", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485855223", "createdAt": "2020-09-09T19:20:01Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableJoinMerger.java", "diffHunk": "@@ -77,10 +77,16 @@ public String getQueryableName() {\n     }\n \n     @Override\n-    public void enableSendingOldValues() {\n-        parent1.enableSendingOldValues();\n-        parent2.enableSendingOldValues();\n+    public boolean enableSendingOldValues(final boolean onlyIfMaterialized) {\n+        if (!parent1.enableSendingOldValues(onlyIfMaterialized)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTI3NQ==", "bodyText": "as above?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485855275", "createdAt": "2020-09-09T19:20:06Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableJoinMerger.java", "diffHunk": "@@ -77,10 +77,16 @@ public String getQueryableName() {\n     }\n \n     @Override\n-    public void enableSendingOldValues() {\n-        parent1.enableSendingOldValues();\n-        parent2.enableSendingOldValues();\n+    public boolean enableSendingOldValues(final boolean onlyIfMaterialized) {\n+        if (!parent1.enableSendingOldValues(onlyIfMaterialized)) {\n+            throw new IllegalStateException(\"Table-table joins should always be materialized\");\n+        }\n+\n+        if (!parent2.enableSendingOldValues(onlyIfMaterialized)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1ODQ1Mw==", "bodyText": "Why do we need to call this (ie, why do we want the result of the filter to send old values)?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485858453", "createdAt": "2020-09-09T19:25:29Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableFilterTest.java", "diffHunk": "@@ -295,12 +295,39 @@ public void shouldNotSendOldValuesOnMaterialization() {\n         doTestNotSendingOldValue(builder, table1, table2, topic1);\n     }\n \n+    @Test\n+    public void shouldNotSendOldValuesWithoutMaterializationIfOptionallyRequested() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final String topic1 = \"topic1\";\n+\n+        final KTableImpl<String, Integer, Integer> table1 =\n+            (KTableImpl<String, Integer, Integer>) builder.table(topic1, consumed);\n+        final KTableImpl<String, Integer, Integer> table2 = (KTableImpl<String, Integer, Integer>) table1.filter(predicate);\n+\n+        table2.enableSendingOldValues(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1ODkyMw==", "bodyText": "As we enable this on the result KTable, and we enforce a materialization of the result, I would expect that we actually do get old-values sent?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485858923", "createdAt": "2020-09-09T19:26:09Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableFilterTest.java", "diffHunk": "@@ -295,12 +295,39 @@ public void shouldNotSendOldValuesOnMaterialization() {\n         doTestNotSendingOldValue(builder, table1, table2, topic1);\n     }\n \n+    @Test\n+    public void shouldNotSendOldValuesWithoutMaterializationIfOptionallyRequested() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final String topic1 = \"topic1\";\n+\n+        final KTableImpl<String, Integer, Integer> table1 =\n+            (KTableImpl<String, Integer, Integer>) builder.table(topic1, consumed);\n+        final KTableImpl<String, Integer, Integer> table2 = (KTableImpl<String, Integer, Integer>) table1.filter(predicate);\n+\n+        table2.enableSendingOldValues(true);\n+\n+        doTestNotSendingOldValue(builder, table1, table2, topic1);\n+    }\n+\n+    @Test\n+    public void shouldNotSendOldValuesOnMaterializationIfOptionallyRequested() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final String topic1 = \"topic1\";\n+\n+        final KTableImpl<String, Integer, Integer> table1 =\n+            (KTableImpl<String, Integer, Integer>) builder.table(topic1, consumed);\n+        final KTableImpl<String, Integer, Integer> table2 =\n+            (KTableImpl<String, Integer, Integer>) table1.filter(predicate, Materialized.as(\"store2\"));\n+\n+        table2.enableSendingOldValues(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MDQ1Mg==", "bodyText": "Should we actually keep this call within this method and pass in the boolean flag as parameter to doTestSendingOldValue ?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485860452", "createdAt": "2020-09-09T19:28:20Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableFilterTest.java", "diffHunk": "@@ -295,12 +295,39 @@ public void shouldNotSendOldValuesOnMaterialization() {\n         doTestNotSendingOldValue(builder, table1, table2, topic1);\n     }\n \n+    @Test\n+    public void shouldNotSendOldValuesWithoutMaterializationIfOptionallyRequested() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final String topic1 = \"topic1\";\n+\n+        final KTableImpl<String, Integer, Integer> table1 =\n+            (KTableImpl<String, Integer, Integer>) builder.table(topic1, consumed);\n+        final KTableImpl<String, Integer, Integer> table2 = (KTableImpl<String, Integer, Integer>) table1.filter(predicate);\n+\n+        table2.enableSendingOldValues(true);\n+\n+        doTestNotSendingOldValue(builder, table1, table2, topic1);\n+    }\n+\n+    @Test\n+    public void shouldNotSendOldValuesOnMaterializationIfOptionallyRequested() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        final String topic1 = \"topic1\";\n+\n+        final KTableImpl<String, Integer, Integer> table1 =\n+            (KTableImpl<String, Integer, Integer>) builder.table(topic1, consumed);\n+        final KTableImpl<String, Integer, Integer> table2 =\n+            (KTableImpl<String, Integer, Integer>) table1.filter(predicate, Materialized.as(\"store2\"));\n+\n+        table2.enableSendingOldValues(true);\n+\n+        doTestNotSendingOldValue(builder, table1, table2, topic1);\n+    }\n+\n     private void doTestSendingOldValue(final StreamsBuilder builder,\n                                        final KTableImpl<String, Integer, Integer> table1,\n                                        final KTableImpl<String, Integer, Integer> table2,\n                                        final String topic1) {\n-        table2.enableSendingOldValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NzE5NA==", "bodyText": "shouldNotSetSendingOldValuesIfNotMaterialized", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485867194", "createdAt": "2020-09-09T19:37:13Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java", "diffHunk": "@@ -304,6 +363,30 @@ public void testStateStore() {\n         }\n     }\n \n+    @Test\n+    public void testSendingOldValuesNotSetIfNotMaterialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2Nzc5MA==", "bodyText": "shouldSetSendingOldValuesIfMaterializationForced", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485867790", "createdAt": "2020-09-09T19:37:54Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java", "diffHunk": "@@ -304,6 +363,30 @@ public void testStateStore() {\n         }\n     }\n \n+    @Test\n+    public void testSendingOldValuesNotSetIfNotMaterialized() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final KTableImpl<String, String, String> table =\n+            (KTableImpl<String, String, String>) builder.table(\"topic1\", consumed);\n+\n+        table.enableSendingOldValues(true);\n+\n+        assertThat(table.sendingOldValueEnabled(), is(false));\n+    }\n+\n+    @Test\n+    public void testSendingOldValuesSetIfMaterializedForced() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2ODQ1Mw==", "bodyText": "Seems the Matererialized.as(\"fred\") parameter is missing?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485868453", "createdAt": "2020-09-09T19:38:38Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java", "diffHunk": "@@ -304,6 +363,30 @@ public void testStateStore() {\n         }\n     }\n \n+    @Test\n+    public void testSendingOldValuesNotSetIfNotMaterialized() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final KTableImpl<String, String, String> table =\n+            (KTableImpl<String, String, String>) builder.table(\"topic1\", consumed);\n+\n+        table.enableSendingOldValues(true);\n+\n+        assertThat(table.sendingOldValueEnabled(), is(false));\n+    }\n+\n+    @Test\n+    public void testSendingOldValuesSetIfMaterializedForced() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+\n+        final KTableImpl<String, String, String> table =\n+            (KTableImpl<String, String, String>) builder.table(\"topic1\", consumed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MTMyMA==", "bodyText": "Why do we need to change the filter condition?", "url": "https://github.com/apache/kafka/pull/9156#discussion_r485871320", "createdAt": "2020-09-09T19:41:55Z", "author": {"login": "mjsax"}, "path": "streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/KTableTest.scala", "diffHunk": "@@ -39,29 +39,27 @@ class KTableTest extends FlatSpec with Matchers with TestDriver {\n     val sinkTopic = \"sink\"\n \n     val table = builder.stream[String, String](sourceTopic).groupBy((key, _) => key).count()\n-    table.filter((_, value) => value > 1).toStream.to(sinkTopic)\n+    table.filter((key, value) => key.equals(\"a\") && value == 1).toStream.to(sinkTopic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417e2ab7b27185bd6035a3e8422536a38e712b7b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03fe316707c62aa01ca57178898665554898beb5", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/03fe316707c62aa01ca57178898665554898beb5", "committedDate": "2020-09-16T20:16:49Z", "message": "merge from trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c008ae0361f8c9c4648bedd034b6c706b2510121", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/c008ae0361f8c9c4648bedd034b6c706b2510121", "committedDate": "2020-09-17T12:12:42Z", "message": "requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540466141c8a132b751ea37a3f5eead02185078e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/540466141c8a132b751ea37a3f5eead02185078e", "committedDate": "2020-09-17T12:26:54Z", "message": "remove test testing bad behaviour"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDgxNjgz", "url": "https://github.com/apache/kafka/pull/9156#pullrequestreview-493081683", "createdAt": "2020-09-22T01:37:11Z", "commit": {"oid": "540466141c8a132b751ea37a3f5eead02185078e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8d7f36b7e70de9442cab0be4b91d9a068c3d95", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/9a8d7f36b7e70de9442cab0be4b91d9a068c3d95", "committedDate": "2020-09-25T12:04:21Z", "message": "Merge branch 'trunk' into kafka_10077_table_filter_send_old_values"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1115, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}