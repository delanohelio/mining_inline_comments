{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk2Njc2", "number": 8062, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNTo1Mjo1NVrODeNDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozOTozMFrODh8NHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTk3ODA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNTo1Mjo1NVrOFnPV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyOTo0NVrOFpMmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw==", "bodyText": "Overloads like this are generally not done in Scala since you can use default arguments. But maybe it's best to explicit here.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376690157", "createdAt": "2020-02-08T05:52:55Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjA2Mw==", "bodyText": "Right. I have kept this method one because it is called from Java as well where default arguments do not work.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376916063", "createdAt": "2020-02-10T08:20:29Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzM1Mw==", "bodyText": "What Java code?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378397353", "createdAt": "2020-02-12T17:20:47Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQzNw==", "bodyText": "It is used in org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378417437", "createdAt": "2020-02-12T17:58:03Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMTI1Ng==", "bodyText": "We could use the other method there and pass false but I felt that it is more convenient like this.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378421256", "createdAt": "2020-02-12T18:05:20Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0MjMyOA==", "bodyText": "I have removed it finally. It is cleaner.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378742328", "createdAt": "2020-02-13T09:29:45Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTk3ODcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNTo1NDozOFrOFnPWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODoyMDo1N1rOFndJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDIzNg==", "bodyText": "This seems unnecessary given where we use this a few lines above.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376690236", "createdAt": "2020-02-08T05:54:38Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -497,45 +497,61 @@ sealed trait AsyncRequest {\n   type Response <: AsyncResponse\n   def path: String\n   def ctx: Option[Any]\n+  def registerWatch: Boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkxNjI1NA==", "bodyText": "I agree. I have removed it.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376916254", "createdAt": "2020-02-10T08:20:57Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -497,45 +497,61 @@ sealed trait AsyncRequest {\n   type Response <: AsyncResponse\n   def path: String\n   def ctx: Option[Any]\n+  def registerWatch: Boolean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDIzNg=="}, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwODc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo1M1rOFo3lJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1ODoyMFrOFo4xwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Nzk5MA==", "bodyText": "I would remove the default since it has serious implications. It should be chosen explicitly.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378397990", "createdAt": "2020-02-12T17:21:53Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -528,7 +528,7 @@ case class SetAclRequest(path: String, acl: Seq[ACL], version: Int, ctx: Option[\n   type Response = SetAclResponse\n }\n \n-case class GetChildrenRequest(path: String, ctx: Option[Any] = None) extends AsyncRequest {\n+case class GetChildrenRequest(path: String, registerWatch: Boolean = true, ctx: Option[Any] = None) extends AsyncRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5496c7a4972e21eccfc3ec902afb125c1556f5fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzYwMA==", "bodyText": "That's a fair point. Let me remove it.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378417600", "createdAt": "2020-02-12T17:58:20Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -528,7 +528,7 @@ case class SetAclRequest(path: String, acl: Seq[ACL], version: Int, ctx: Option[\n   type Response = SetAclResponse\n }\n \n-case class GetChildrenRequest(path: String, ctx: Option[Any] = None) extends AsyncRequest {\n+case class GetChildrenRequest(path: String, registerWatch: Boolean = true, ctx: Option[Any] = None) extends AsyncRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Nzk5MA=="}, "originalCommit": {"oid": "5496c7a4972e21eccfc3ec902afb125c1556f5fe"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDkyNzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozNDowNVrOFrwvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo1OToxN1rOFshPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMTY5OQ==", "bodyText": "Do we need the // ?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381431699", "createdAt": "2020-02-19T17:34:05Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean = false): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+//  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjMwMg==", "bodyText": "I have removed it entirely as it is not used.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382226302", "createdAt": "2020-02-20T19:59:17Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean = false): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+//  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMTY5OQ=="}, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk2NTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NDo0NFrOFrxHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NDo0NFrOFrxHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzgwNA==", "bodyText": "what => watch?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381437804", "createdAt": "2020-02-19T17:44:44Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTA2MzI0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODoxNDoxN1rOFryG5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo1OTo0NFrOFshQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDA1NQ==", "bodyText": "This means this unit test always needs to wait for 5 secs? That's probably too long.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381454055", "createdAt": "2020-02-19T18:14:17Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -421,13 +421,39 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n     val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n     val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n     assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n   }\n \n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertFalse(\"Child change notification received\",\n+      zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjU3Ng==", "bodyText": "Correct. I have reduced it to 1s.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382226576", "createdAt": "2020-02-20T19:59:44Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -421,13 +421,39 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n     val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n     val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n     assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n   }\n \n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertFalse(\"Child change notification received\",\n+      zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDA1NQ=="}, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTA3OTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODoxODo0NFrOFryQyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMDowM1rOFshRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjU4Nw==", "bodyText": "This means this unit test always needs to wait for 5 secs? That's probably too long.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381456587", "createdAt": "2020-02-19T18:18:44Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjcyMA==", "bodyText": "Correct. I have reduced it to 1s.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382226720", "createdAt": "2020-02-20T20:00:03Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjU4Nw=="}, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTA4MTUxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODoxOToxNlrOFrySBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMDoxNVrOFshRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjkwMw==", "bodyText": "Could this method be private?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381456903", "createdAt": "2020-02-19T18:19:16Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  def registerChildChangeHandler(count: Int): CountDownLatch = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjgxMQ==", "bodyText": "Yes. Changed.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382226811", "createdAt": "2020-02-20T20:00:15Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  def registerChildChangeHandler(count: Int): CountDownLatch = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjkwMw=="}, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjY5NTUyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0ODowN1rOFsl3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNTo1N1rOFsu-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjEyMw==", "bodyText": "A unit test always taking 1 sec is still long. Could we reduce this to 100ms?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382302123", "createdAt": "2020-02-20T22:48:07Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTIxNQ==", "bodyText": "I did few runs locally with 100ms and it seems to work. I have reduces it to 100ms.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382451215", "createdAt": "2020-02-21T08:25:57Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjEyMw=="}, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjY5NTkxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0ODoxN1rOFsl36g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoyNjowMlrOFsu-KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjE4Ng==", "bodyText": "A unit test always taking 1 sec is still long. Could we reduce this to 100ms?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382302186", "createdAt": "2020-02-20T22:48:17Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(1, TimeUnit.SECONDS))\n+  }\n+\n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n-    val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n-    assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n+    assertFalse(\"Child change notification received\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1MTI0MA==", "bodyText": "I did few runs locally with 100ms and it seems to work. I have reduces it to 100ms.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382451240", "createdAt": "2020-02-21T08:26:02Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(1, TimeUnit.SECONDS))\n+  }\n+\n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n-    val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n-    assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n+    assertFalse(\"Child change notification received\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjE4Ng=="}, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTE1NjY1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozODoyOFrOFs9M_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNTozMVrOFs-F6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDQxMw==", "bodyText": "In this case, normally the test will complete well below the timeout. So, we could set the timeout to be sth more generous like 5 secs to avoid flakiness.\nIn the other cases where the test always wait for the timeout, then we want to set the timeout to a much smaller value to control the testing time.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382684413", "createdAt": "2020-02-21T16:38:28Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODk4NA==", "bodyText": "Right. My mistake. I put them on par while trying various timeouts in order to avoid putting a value too low. I did not pay attention that I forgot to change them back.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382698984", "createdAt": "2020-02-21T17:05:31Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDQxMw=="}, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTE1OTk3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozOTozMFrOFs9PBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNTozN1rOFs-GKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDkzMw==", "bodyText": "This is another case where we can set a more generous timeout.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382684933", "createdAt": "2020-02-21T16:39:30Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5OTA0OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382699049", "createdAt": "2020-02-21T17:05:37Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDkzMw=="}, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4233, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}