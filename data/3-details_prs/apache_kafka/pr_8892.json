{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTg2Mzkw", "number": 8892, "title": "KAFKA-10068: verify assignment performance with large cluster", "bodyText": "Because we do some nontrivial things in the StreamsPartitionAssignor, and will likely want to verify the scalability of new assigns we may add in the future, I added this to StreamsPartitionAssignorTest (vs just testing the HATA).\nWith 10 topics at 1,000 partitions each and 100 consumers, the tests complete within seconds.\nIf you increase the number of partitions per topic by a factor of 10, the assignment takes about 1min (for all three task assignors). Of course, the test is actually doing two full assignments, so the total time per assignment is still reasonable", "createdAt": "2020-06-18T02:15:22Z", "url": "https://github.com/apache/kafka/pull/8892", "merged": true, "mergeCommit": {"oid": "90517d15c0fb09f09168e77aff7ad30f234b1091"}, "closed": true, "closedAt": "2020-09-22T14:20:47Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsk7hogFqTQzMzYzOTk1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLOxHLgH2gAyNDM2MTg2MzkwOmZjOWRkMWVmYTk1ODVhM2NlOGQzYmVkNTUxNjMyNzc2YzUwY2QxYmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjM5OTUz", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-433639953", "createdAt": "2020-06-18T20:54:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NDo1MFrOGl_33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1NjowN1rOGl_6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5Njk5MQ==", "bodyText": "Can you just pass this as an argument to getPartitionInfos so that we can do all the initialization in the assignment instead of needing an initialization block? The fact that this field is used in another field initialization statement makes the initialization block kind of questionable, since you have to read the JVM spec to know if this block executes before or after the usage.\nAlternatively, maybe the prior code was actually better, because you can see exactly what data you're testing with, instead of having to go read another method to understand what getPartitioninfos(3, 3) might mean.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r442496991", "createdAt": "2020-06-18T20:54:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -148,27 +150,35 @@\n     private final TopicPartition t3p2 = new TopicPartition(\"topic3\", 2);\n     private final TopicPartition t3p3 = new TopicPartition(\"topic3\", 3);\n \n-    private final List<PartitionInfo> infos = asList(\n-        new PartitionInfo(\"topic1\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic1\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic1\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0])\n-    );\n-\n-    private final SubscriptionInfo defaultSubscriptionInfo = getInfo(UUID_1, EMPTY_TASKS, EMPTY_TASKS);\n+    private final List<PartitionInfo> partitionInfos = getPartitionInfos(3, 3);\n+    {\n+        partitionInfos.add(new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0]));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzYwOQ==", "bodyText": "If there's a whole set of constants only used by one test, one might wonder whether that test shouldn't just be in its own class...", "url": "https://github.com/apache/kafka/pull/8892#discussion_r442497609", "createdAt": "2020-06-18T20:56:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -148,27 +150,35 @@\n     private final TopicPartition t3p2 = new TopicPartition(\"topic3\", 2);\n     private final TopicPartition t3p3 = new TopicPartition(\"topic3\", 3);\n \n-    private final List<PartitionInfo> infos = asList(\n-        new PartitionInfo(\"topic1\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic1\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic1\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic2\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 0, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 1, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 2, Node.noNode(), new Node[0], new Node[0]),\n-        new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0])\n-    );\n-\n-    private final SubscriptionInfo defaultSubscriptionInfo = getInfo(UUID_1, EMPTY_TASKS, EMPTY_TASKS);\n+    private final List<PartitionInfo> partitionInfos = getPartitionInfos(3, 3);\n+    {\n+        partitionInfos.add(new PartitionInfo(\"topic3\", 3, Node.noNode(), new Node[0], new Node[0]));\n+    }\n \n     private final Cluster metadata = new Cluster(\n         \"cluster\",\n         Collections.singletonList(Node.noNode()),\n-        infos,\n+        partitionInfos,\n         emptySet(),\n-        emptySet());\n+        emptySet()\n+    );\n+\n+    /* Used by the scale test for large apps/clusters */\n+    private static final int NUM_TOPICS_XL = 10;\n+    private static final int NUM_PARTITIONS_PER_TOPIC_XL = 1_000;\n+    private static final int NUM_CONSUMERS_XL = 100;\n+    private static final List<String> TOPICS_LIST_XL = new ArrayList<>();\n+    private static final Map<TopicPartition, Long> CHANGELOG_END_OFFSETS_XL = new HashMap<>();\n+    private static final List<PartitionInfo> PARTITION_INFOS_XL = getPartitionInfos(NUM_TOPICS_XL, NUM_PARTITIONS_PER_TOPIC_XL);\n+    private static final Cluster CLUSTER_METADATA_XL = new Cluster(\n+        \"cluster\",\n+        Collections.singletonList(Node.noNode()),\n+        PARTITION_INFOS_XL,\n+        emptySet(),\n+        emptySet()\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTc3MjE3", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-435577217", "createdAt": "2020-06-23T08:53:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1Mzo0NlrOGnfv8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToyODozNlrOGnhEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NzgyNQ==", "bodyText": "prop: Could you please move this method closer to where it is used, i.e., around line 200?", "url": "https://github.com/apache/kafka/pull/8892#discussion_r444067825", "createdAt": "2020-06-23T08:53:46Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1953,6 +1975,54 @@ public void shouldRequestCommittedOffsetsForPreexistingSourceChangelogs() {\n         EasyMock.verify(consumerClient);\n     }\n \n+    @Test(timeout = 30 * 1000)\n+    public void shouldCompleteLargeAssignmentInAReasonableAmountOfTime() {\n+        builder.addSource(null, \"source\", null, null, null, TOPICS_LIST_XL.toArray(new String[0]));\n+        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {\n+            subscriptions.put(\"consumer-\" + i,\n+                              new Subscription(\n+                                  TOPICS_LIST_XL,\n+                                  getInfo(uuidForInt(i), EMPTY_TASKS, EMPTY_TASKS).encode())\n+            );\n+        }\n+        createMockTaskManager(EMPTY_TASKS, EMPTY_TASKS);\n+        createMockAdminClient(CHANGELOG_END_OFFSETS_XL);\n+        configurePartitionAssignorWith(singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 3));\n+\n+        final Map<String, Assignment> assignments =\n+            partitionAssignor.assign(CLUSTER_METADATA_XL, new GroupSubscription(subscriptions)).groupAssignment();\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {\n+            final String consumer = \"consumer-\" + i;\n+            final Assignment assignment = assignments.get(consumer);\n+            final AssignmentInfo info = AssignmentInfo.decode(assignment.userData());\n+\n+            subscriptions.put(\"consumer-\" + i,\n+                              new Subscription(\n+                                  TOPICS_LIST_XL,\n+                                  getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),\n+                                  assignment.partitions())\n+            );\n+        }\n+\n+        final Map<String, Assignment> secondAssignments =\n+            partitionAssignor.assign(CLUSTER_METADATA_XL, new GroupSubscription(subscriptions)).groupAssignment();\n+    }\n+\n+    private static List<PartitionInfo> getPartitionInfos(final int numTopics, final int numPartitionsPerTopic) {\n+        final List<PartitionInfo> partitionInfos = new ArrayList<>();\n+        for (int t = 1; t <= numTopics; ++t) { // topic numbering starts from 1\n+            for (int p = 0; p < numPartitionsPerTopic; ++p) {\n+                partitionInfos.add(new PartitionInfo(\"topic\" + t, p, Node.noNode(), new Node[0], new Node[0]));\n+            }\n+        }\n+        return  partitionInfos;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTAzNA==", "bodyText": "req: Could you please remove variable secondAssignments since it is never used?", "url": "https://github.com/apache/kafka/pull/8892#discussion_r444075034", "createdAt": "2020-06-23T09:04:49Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1953,6 +1975,54 @@ public void shouldRequestCommittedOffsetsForPreexistingSourceChangelogs() {\n         EasyMock.verify(consumerClient);\n     }\n \n+    @Test(timeout = 30 * 1000)\n+    public void shouldCompleteLargeAssignmentInAReasonableAmountOfTime() {\n+        builder.addSource(null, \"source\", null, null, null, TOPICS_LIST_XL.toArray(new String[0]));\n+        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {\n+            subscriptions.put(\"consumer-\" + i,\n+                              new Subscription(\n+                                  TOPICS_LIST_XL,\n+                                  getInfo(uuidForInt(i), EMPTY_TASKS, EMPTY_TASKS).encode())\n+            );\n+        }\n+        createMockTaskManager(EMPTY_TASKS, EMPTY_TASKS);\n+        createMockAdminClient(CHANGELOG_END_OFFSETS_XL);\n+        configurePartitionAssignorWith(singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 3));\n+\n+        final Map<String, Assignment> assignments =\n+            partitionAssignor.assign(CLUSTER_METADATA_XL, new GroupSubscription(subscriptions)).groupAssignment();\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {\n+            final String consumer = \"consumer-\" + i;\n+            final Assignment assignment = assignments.get(consumer);\n+            final AssignmentInfo info = AssignmentInfo.decode(assignment.userData());\n+\n+            subscriptions.put(\"consumer-\" + i,\n+                              new Subscription(\n+                                  TOPICS_LIST_XL,\n+                                  getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),\n+                                  assignment.partitions())\n+            );\n+        }\n+\n+        final Map<String, Assignment> secondAssignments =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Njk1OQ==", "bodyText": "prop:\nsubscriptions.put(\"consumer10\", new Subscription(singletonList(\"topic1\"), defaultSubscriptionInfo.encode()));", "url": "https://github.com/apache/kafka/pull/8892#discussion_r444076959", "createdAt": "2020-06-23T09:08:08Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1932,10 +1954,10 @@ public void shouldRequestCommittedOffsetsForPreexistingSourceChangelogs() {\n         streamsBuilder.table(\"topic1\", Materialized.as(\"store\"));\n \n         subscriptions.put(\"consumer10\",\n-            new Subscription(\n-                singletonList(\"topic1\"),\n-                defaultSubscriptionInfo.encode()\n-            ));\n+                          new Subscription(\n+                              singletonList(\"topic1\"),\n+                              defaultSubscriptionInfo.encode()\n+                          ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4OTM3OQ==", "bodyText": "Q: I am wondering if it would be better to extract the two assignments to two scale tests, so that when one fails we immediately know whether the startup assignment or the intermediate assignment is slow.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r444089379", "createdAt": "2020-06-23T09:28:36Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1953,6 +1975,54 @@ public void shouldRequestCommittedOffsetsForPreexistingSourceChangelogs() {\n         EasyMock.verify(consumerClient);\n     }\n \n+    @Test(timeout = 30 * 1000)\n+    public void shouldCompleteLargeAssignmentInAReasonableAmountOfTime() {\n+        builder.addSource(null, \"source\", null, null, null, TOPICS_LIST_XL.toArray(new String[0]));\n+        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {\n+            subscriptions.put(\"consumer-\" + i,\n+                              new Subscription(\n+                                  TOPICS_LIST_XL,\n+                                  getInfo(uuidForInt(i), EMPTY_TASKS, EMPTY_TASKS).encode())\n+            );\n+        }\n+        createMockTaskManager(EMPTY_TASKS, EMPTY_TASKS);\n+        createMockAdminClient(CHANGELOG_END_OFFSETS_XL);\n+        configurePartitionAssignorWith(singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 3));\n+\n+        final Map<String, Assignment> assignments =\n+            partitionAssignor.assign(CLUSTER_METADATA_XL, new GroupSubscription(subscriptions)).groupAssignment();\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int i = 0; i < NUM_CONSUMERS_XL; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3Njk0OTM4", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-487694938", "createdAt": "2020-09-14T12:19:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjoxOTo1NFrOHRRDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzoxNjowMVrOHRTPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2NzI0Ng==", "bodyText": "nit: You could inline this call on line 122", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487867246", "createdAt": "2020-09-14T12:19:54Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    private final Class<? extends TaskAssignor> taskAssignor;\n+\n+    @Parameterized.Parameters(name = \"task assignor = {0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(\n+            new Object[]{StickyTaskAssignor.class},\n+            new Object[]{HighAvailabilityTaskAssignor.class},\n+            new Object[]{FallbackPriorTaskAssignor.class}\n+        );\n+    }\n+\n+    public StreamsAssignmentScaleTest(final Class<? extends TaskAssignor> taskAssignor) {\n+        this.taskAssignor = taskAssignor;\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargePartitionCount() {\n+        shouldCompleteLargeAssignmentInReasonableTime(3_000, 1, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargeNumConsumers() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 1_000, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyStandbys() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 100, 1, 50);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyThreadsPerClient() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 10, 1000, 1);\n+    }\n+\n+    private void shouldCompleteLargeAssignmentInReasonableTime(final int numPartitions,\n+                                                               final int numClients,\n+                                                               final int numThreadsPerClient,\n+                                                               final int numStandbys) {\n+        final List<String> topic = singletonList(\"topic\");\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+        final List<PartitionInfo> partitionInfos = getPartitionInfos(numPartitions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MjYwNQ==", "bodyText": "Since you use string \"consumer\" also in the second assignment and it is important that the consumers have the same name, I would suggest to specify I constant for it.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487872605", "createdAt": "2020-09-14T12:28:52Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    private final Class<? extends TaskAssignor> taskAssignor;\n+\n+    @Parameterized.Parameters(name = \"task assignor = {0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(\n+            new Object[]{StickyTaskAssignor.class},\n+            new Object[]{HighAvailabilityTaskAssignor.class},\n+            new Object[]{FallbackPriorTaskAssignor.class}\n+        );\n+    }\n+\n+    public StreamsAssignmentScaleTest(final Class<? extends TaskAssignor> taskAssignor) {\n+        this.taskAssignor = taskAssignor;\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargePartitionCount() {\n+        shouldCompleteLargeAssignmentInReasonableTime(3_000, 1, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargeNumConsumers() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 1_000, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyStandbys() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 100, 1, 50);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyThreadsPerClient() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 10, 1000, 1);\n+    }\n+\n+    private void shouldCompleteLargeAssignmentInReasonableTime(final int numPartitions,\n+                                                               final int numClients,\n+                                                               final int numThreadsPerClient,\n+                                                               final int numStandbys) {\n+        final List<String> topic = singletonList(\"topic\");\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+        final List<PartitionInfo> partitionInfos = getPartitionInfos(numPartitions);\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andReturn(builder).anyTimes();\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(\"consumer-\" + client + \"-\" + i,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MTA5NA==", "bodyText": "Why is this not .andStubReturn() too? For consistency, I would also use .andStubReturn() here.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487881094", "createdAt": "2020-09-14T12:42:52Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    private final Class<? extends TaskAssignor> taskAssignor;\n+\n+    @Parameterized.Parameters(name = \"task assignor = {0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(\n+            new Object[]{StickyTaskAssignor.class},\n+            new Object[]{HighAvailabilityTaskAssignor.class},\n+            new Object[]{FallbackPriorTaskAssignor.class}\n+        );\n+    }\n+\n+    public StreamsAssignmentScaleTest(final Class<? extends TaskAssignor> taskAssignor) {\n+        this.taskAssignor = taskAssignor;\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargePartitionCount() {\n+        shouldCompleteLargeAssignmentInReasonableTime(3_000, 1, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargeNumConsumers() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 1_000, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyStandbys() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 100, 1, 50);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyThreadsPerClient() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 10, 1000, 1);\n+    }\n+\n+    private void shouldCompleteLargeAssignmentInReasonableTime(final int numPartitions,\n+                                                               final int numClients,\n+                                                               final int numThreadsPerClient,\n+                                                               final int numStandbys) {\n+        final List<String> topic = singletonList(\"topic\");\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+        final List<PartitionInfo> partitionInfos = getPartitionInfos(numPartitions);\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andReturn(builder).anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Mjg3NA==", "bodyText": "I guess there is a took too too much. ;-)", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487882874", "createdAt": "2020-09-14T12:45:37Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    private final Class<? extends TaskAssignor> taskAssignor;\n+\n+    @Parameterized.Parameters(name = \"task assignor = {0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(\n+            new Object[]{StickyTaskAssignor.class},\n+            new Object[]{HighAvailabilityTaskAssignor.class},\n+            new Object[]{FallbackPriorTaskAssignor.class}\n+        );\n+    }\n+\n+    public StreamsAssignmentScaleTest(final Class<? extends TaskAssignor> taskAssignor) {\n+        this.taskAssignor = taskAssignor;\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargePartitionCount() {\n+        shouldCompleteLargeAssignmentInReasonableTime(3_000, 1, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargeNumConsumers() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 1_000, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyStandbys() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 100, 1, 50);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyThreadsPerClient() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 10, 1000, 1);\n+    }\n+\n+    private void shouldCompleteLargeAssignmentInReasonableTime(final int numPartitions,\n+                                                               final int numClients,\n+                                                               final int numThreadsPerClient,\n+                                                               final int numStandbys) {\n+        final List<String> topic = singletonList(\"topic\");\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+        final List<PartitionInfo> partitionInfos = getPartitionInfos(numPartitions);\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andReturn(builder).anyTimes();\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(\"consumer-\" + client + \"-\" + i,\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n+                );\n+            }\n+        }\n+\n+        final long firstAssignmentStartMs = System.currentTimeMillis();\n+        final Map<String, Assignment> firstAssignments = partitionAssignor.assign(clusterMetadata, new GroupSubscription(subscriptions)).groupAssignment();\n+        final long firstAssignmentEndMs = System.currentTimeMillis();\n+\n+        final long firstAssignmentDuration = firstAssignmentEndMs - firstAssignmentStartMs;\n+        if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n+            throw new AssertionError(\"The first assignment took took too long to complete at \" + firstAssignmentDuration + \"ms.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MzA3Ng==", "bodyText": "I guess here too too.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487883076", "createdAt": "2020-09-14T12:45:57Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    private final Class<? extends TaskAssignor> taskAssignor;\n+\n+    @Parameterized.Parameters(name = \"task assignor = {0}\")\n+    public static Collection<Object[]> parameters() {\n+        return asList(\n+            new Object[]{StickyTaskAssignor.class},\n+            new Object[]{HighAvailabilityTaskAssignor.class},\n+            new Object[]{FallbackPriorTaskAssignor.class}\n+        );\n+    }\n+\n+    public StreamsAssignmentScaleTest(final Class<? extends TaskAssignor> taskAssignor) {\n+        this.taskAssignor = taskAssignor;\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargePartitionCount() {\n+        shouldCompleteLargeAssignmentInReasonableTime(3_000, 1, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testLargeNumConsumers() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 1_000, 1, 1);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyStandbys() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 100, 1, 50);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testManyThreadsPerClient() {\n+        shouldCompleteLargeAssignmentInReasonableTime(1_000, 10, 1000, 1);\n+    }\n+\n+    private void shouldCompleteLargeAssignmentInReasonableTime(final int numPartitions,\n+                                                               final int numClients,\n+                                                               final int numThreadsPerClient,\n+                                                               final int numStandbys) {\n+        final List<String> topic = singletonList(\"topic\");\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+        final List<PartitionInfo> partitionInfos = getPartitionInfos(numPartitions);\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andReturn(builder).anyTimes();\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(\"consumer-\" + client + \"-\" + i,\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n+                );\n+            }\n+        }\n+\n+        final long firstAssignmentStartMs = System.currentTimeMillis();\n+        final Map<String, Assignment> firstAssignments = partitionAssignor.assign(clusterMetadata, new GroupSubscription(subscriptions)).groupAssignment();\n+        final long firstAssignmentEndMs = System.currentTimeMillis();\n+\n+        final long firstAssignmentDuration = firstAssignmentEndMs - firstAssignmentStartMs;\n+        if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n+            throw new AssertionError(\"The first assignment took took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n+        } else {\n+            log.info(\"First assignment took {}ms.\", firstAssignmentDuration);\n+        }\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                final String consumer = \"consumer-\" + client + \"-\" + i;\n+                final Assignment assignment = firstAssignments.get(consumer);\n+                final AssignmentInfo info = AssignmentInfo.decode(assignment.userData());\n+\n+                subscriptions.put(consumer,\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),\n+                                      assignment.partitions())\n+                );\n+            }\n+        }\n+\n+        final long secondAssignmentStartMs = System.currentTimeMillis();\n+        final Map<String, Assignment> secondAssignments = partitionAssignor.assign(clusterMetadata, new GroupSubscription(subscriptions)).groupAssignment();\n+        final long secondAssignmentEndMs = System.currentTimeMillis();\n+        final long secondAssignmentDuration = secondAssignmentEndMs - secondAssignmentStartMs;\n+        if (secondAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n+            throw new AssertionError(\"The second assignment took took too long to complete at \" + secondAssignmentDuration + \"ms.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzA3MQ==", "bodyText": "I do not remember exactly whether intergration tests are defined by running an embedded Kafka or tests that have a runtime beyond a certain threshold. If the latter, I guess, you should tag this class as an integration test.\nAlso, I run the test on my machine locally and I got two failures due to time outs for FallbackPriorTaskAssignor, namely for testManyStandbys() and testLargePartitionCount(). Admittedly, at that time my machine was under high load, but I guess that could also happen on Jenkins. Should we use lower parameter values?", "url": "https://github.com/apache/kafka/pull/8892#discussion_r487903071", "createdAt": "2020-09-14T13:16:01Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(value = Parameterized.class)\n+public class StreamsAssignmentScaleTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNDA3NTI2", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-490407526", "createdAt": "2020-09-17T09:25:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToyNTozMVrOHTZagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoxNDowMFrOHTbM-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMTM3Nw==", "bodyText": "Code style suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            subscriptions.put(getConsumerName(i, client),\n          \n          \n            \n                                              new Subscription(\n          \n          \n            \n                                                  topic,\n          \n          \n            \n                                                  getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n          \n          \n            \n                            );\n          \n          \n            \n                            subscriptions.put(\n          \n          \n            \n                                getConsumerName(i, client),\n          \n          \n            \n                                new Subscription(topic, getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n          \n          \n            \n                            );", "url": "https://github.com/apache/kafka/pull/8892#discussion_r490101377", "createdAt": "2020-09-17T09:25:31Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({IntegrationTest.class})\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    /************ HighAvailabilityTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(6_000, 1, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 50, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    /************ StickyTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, StickyTaskAssignor.class);\n+    }\n+\n+    /************ FallbackPriorTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    private void completeLargeAssignment(final int numPartitions,\n+                                         final int numClients,\n+                                         final int numThreadsPerClient,\n+                                         final int numStandbys,\n+                                         final Class<? extends TaskAssignor> taskAssignor) {\n+        final List<String> topic = singletonList(\"topic\");\n+\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+\n+        final List<PartitionInfo> partitionInfos = new ArrayList<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            partitionInfos.add(new PartitionInfo(\"topic\", p, Node.noNode(), new Node[0], new Node[0]));\n+        }\n+\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andStubReturn(builder);\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(getConsumerName(i, client),\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEwMjMxOA==", "bodyText": "Code style suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            subscriptions.put(consumer,\n          \n          \n            \n                                              new Subscription(\n          \n          \n            \n                                                  topic,\n          \n          \n            \n                                                  getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),\n          \n          \n            \n                                                  assignment.partitions())\n          \n          \n            \n                            );\n          \n          \n            \n                            subscriptions.put(\n          \n          \n            \n                                consumer,\n          \n          \n            \n                                new Subscription(\n          \n          \n            \n                                    topic, \n          \n          \n            \n                                    getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(), \n          \n          \n            \n                                    assignment.partitions()\n          \n          \n            \n                                )\n          \n          \n            \n                            );", "url": "https://github.com/apache/kafka/pull/8892#discussion_r490102318", "createdAt": "2020-09-17T09:26:51Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({IntegrationTest.class})\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    /************ HighAvailabilityTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(6_000, 1, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 50, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    /************ StickyTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, StickyTaskAssignor.class);\n+    }\n+\n+    /************ FallbackPriorTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    private void completeLargeAssignment(final int numPartitions,\n+                                         final int numClients,\n+                                         final int numThreadsPerClient,\n+                                         final int numStandbys,\n+                                         final Class<? extends TaskAssignor> taskAssignor) {\n+        final List<String> topic = singletonList(\"topic\");\n+\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+\n+        final List<PartitionInfo> partitionInfos = new ArrayList<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            partitionInfos.add(new PartitionInfo(\"topic\", p, Node.noNode(), new Node[0], new Node[0]));\n+        }\n+\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andStubReturn(builder);\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(getConsumerName(i, client),\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n+                );\n+            }\n+        }\n+\n+        final long firstAssignmentStartMs = System.currentTimeMillis();\n+        final Map<String, Assignment> firstAssignments = partitionAssignor.assign(clusterMetadata, new GroupSubscription(subscriptions)).groupAssignment();\n+        final long firstAssignmentEndMs = System.currentTimeMillis();\n+\n+        final long firstAssignmentDuration = firstAssignmentEndMs - firstAssignmentStartMs;\n+        if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n+            throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n+        } else {\n+            log.info(\"First assignment took {}ms.\", firstAssignmentDuration);\n+        }\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                final String consumer = getConsumerName(i, client);\n+                final Assignment assignment = firstAssignments.get(consumer);\n+                final AssignmentInfo info = AssignmentInfo.decode(assignment.userData());\n+\n+                subscriptions.put(consumer,\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),\n+                                      assignment.partitions())\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExMDI2Nw==", "bodyText": "I get this warning when I run this test:\nWARN Unable to assign 1 of 1 standby tasks for task [0_0]. There is not enough available capacity ...\n\nSince to get this warning, the code needs to break the loop in assignStandbyReplicaTasks(), I think you should either:\n\nset the stand-bys to 0, or\nset the clients to 2\n\nOption 1 would not run the code in the loop at all. Option 2 would run all code in the loop until all stand-bys are assigned. I would prefer option 2, since option 2 runs more code in the test which is better for scale testing.\nSimilar is true for the corresponding tests for the other assignors.\nIMPORTANT: Before you fix this, you should read my comment on line 234, otherwise setting the number of clients to 2 will not work as expected for the second assignment.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r490110267", "createdAt": "2020-09-17T09:40:02Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({IntegrationTest.class})\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    /************ HighAvailabilityTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(6_000, 1, 1, 1, HighAvailabilityTaskAssignor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzMDY4MA==", "bodyText": "This should be uuidForInt(client), otherwise in the second assignment you have as many clients as stream threads and each client does only have one stream thread.", "url": "https://github.com/apache/kafka/pull/8892#discussion_r490130680", "createdAt": "2020-09-17T10:14:00Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsAssignmentScaleTest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singletonList;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.EMPTY_TASKS;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.createMockAdminClientForAssignor;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.getInfo;\n+import static org.apache.kafka.streams.processor.internals.assignment.AssignmentTestUtils.uuidForInt;\n+import static org.easymock.EasyMock.expect;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Assignment;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.Subscription;\n+import org.apache.kafka.common.Cluster;\n+import org.apache.kafka.common.Node;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.utils.MockTime;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.StreamsConfig.InternalConfig;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignmentInfo;\n+import org.apache.kafka.streams.processor.internals.assignment.FallbackPriorTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.TaskAssignor;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.MockApiProcessorSupplier;\n+import org.apache.kafka.test.MockClientSupplier;\n+import org.apache.kafka.test.MockInternalTopicManager;\n+import org.apache.kafka.test.MockKeyValueStoreBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({IntegrationTest.class})\n+public class StreamsAssignmentScaleTest {\n+    final static long MAX_ASSIGNMENT_DURATION = 60 * 1000L; //each individual assignment should complete within 20s\n+    final static String APPLICATION_ID = \"streams-assignment-scale-test\";\n+\n+    private final Logger log = LoggerFactory.getLogger(StreamsAssignmentScaleTest.class);\n+\n+    /************ HighAvailabilityTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(6_000, 1, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 50, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testHighAvailabilityTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, HighAvailabilityTaskAssignor.class);\n+    }\n+\n+    /************ StickyTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, StickyTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testStickyTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, StickyTaskAssignor.class);\n+    }\n+\n+    /************ FallbackPriorTaskAssignor tests ************/\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargePartitionCount() {\n+        completeLargeAssignment(2_000, 1, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorLargeNumConsumers() {\n+        completeLargeAssignment(1_000, 1_000, 1, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyStandbys() {\n+        completeLargeAssignment(1_000, 100, 1, 20, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    @Test(timeout = 120 * 1000)\n+    public void testFallbackPriorTaskAssignorManyThreadsPerClient() {\n+        completeLargeAssignment(1_000, 10, 1000, 1, FallbackPriorTaskAssignor.class);\n+    }\n+\n+    private void completeLargeAssignment(final int numPartitions,\n+                                         final int numClients,\n+                                         final int numThreadsPerClient,\n+                                         final int numStandbys,\n+                                         final Class<? extends TaskAssignor> taskAssignor) {\n+        final List<String> topic = singletonList(\"topic\");\n+\n+        final Map<TopicPartition, Long> changelogEndOffsets = new HashMap<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            changelogEndOffsets.put(new TopicPartition(APPLICATION_ID + \"-store-changelog\", p), 100_000L);\n+        }\n+\n+        final List<PartitionInfo> partitionInfos = new ArrayList<>();\n+        for (int p = 0; p < numPartitions; ++p) {\n+            partitionInfos.add(new PartitionInfo(\"topic\", p, Node.noNode(), new Node[0], new Node[0]));\n+        }\n+\n+        final Cluster clusterMetadata = new Cluster(\n+            \"cluster\",\n+            Collections.singletonList(Node.noNode()),\n+            partitionInfos,\n+            emptySet(),\n+            emptySet()\n+        );\n+\n+        final InternalTopologyBuilder builder = new InternalTopologyBuilder();\n+        builder.addSource(null, \"source\", null, null, null, \"topic\");\n+        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor\");\n+        builder.setApplicationId(APPLICATION_ID);\n+        builder.buildTopology();\n+\n+        final Consumer<byte[], byte[]> mainConsumer = EasyMock.createNiceMock(Consumer.class);\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+        expect(taskManager.builder()).andStubReturn(builder);\n+        expect(taskManager.mainConsumer()).andStubReturn(mainConsumer);\n+        expect(mainConsumer.committed(new HashSet<>())).andStubReturn(Collections.emptyMap());\n+        final AdminClient adminClient = createMockAdminClientForAssignor(changelogEndOffsets);\n+\n+        final StreamsPartitionAssignor partitionAssignor = new StreamsPartitionAssignor();\n+\n+        final Map<String, Object> configMap = new HashMap<>();\n+        configMap.put(StreamsConfig.APPLICATION_ID_CONFIG, APPLICATION_ID);\n+        configMap.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8080\");\n+        configMap.put(InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n+        configMap.put(InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, EasyMock.createNiceMock(StreamsMetadataState.class));\n+        configMap.put(InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n+        configMap.put(InternalConfig.ASSIGNMENT_ERROR_CODE, new AtomicInteger());\n+        configMap.put(InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, new AtomicLong(Long.MAX_VALUE));\n+        configMap.put(InternalConfig.TIME, new MockTime());\n+        configMap.put(InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, taskAssignor.getName());\n+        configMap.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, numStandbys);\n+\n+        final MockInternalTopicManager mockInternalTopicManager = new MockInternalTopicManager(\n+            new MockTime(),\n+            new StreamsConfig(configMap),\n+            new MockClientSupplier().restoreConsumer,\n+            false\n+        );\n+        partitionAssignor.configure(configMap);\n+        EasyMock.replay(taskManager, adminClient, mainConsumer);\n+\n+        partitionAssignor.setInternalTopicManager(mockInternalTopicManager);\n+\n+        final Map<String, Subscription> subscriptions = new HashMap<>();\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                subscriptions.put(getConsumerName(i, client),\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(client), EMPTY_TASKS, EMPTY_TASKS).encode())\n+                );\n+            }\n+        }\n+\n+        final long firstAssignmentStartMs = System.currentTimeMillis();\n+        final Map<String, Assignment> firstAssignments = partitionAssignor.assign(clusterMetadata, new GroupSubscription(subscriptions)).groupAssignment();\n+        final long firstAssignmentEndMs = System.currentTimeMillis();\n+\n+        final long firstAssignmentDuration = firstAssignmentEndMs - firstAssignmentStartMs;\n+        if (firstAssignmentDuration > MAX_ASSIGNMENT_DURATION) {\n+            throw new AssertionError(\"The first assignment took too long to complete at \" + firstAssignmentDuration + \"ms.\");\n+        } else {\n+            log.info(\"First assignment took {}ms.\", firstAssignmentDuration);\n+        }\n+\n+        // Use the assignment to generate the subscriptions' prev task data for the next rebalance\n+        for (int client = 0; client < numClients; ++client) {\n+            for (int i = 0; i < numThreadsPerClient; ++i) {\n+                final String consumer = getConsumerName(i, client);\n+                final Assignment assignment = firstAssignments.get(consumer);\n+                final AssignmentInfo info = AssignmentInfo.decode(assignment.userData());\n+\n+                subscriptions.put(consumer,\n+                                  new Subscription(\n+                                      topic,\n+                                      getInfo(uuidForInt(i), new HashSet<>(info.activeTasks()), info.standbyTasks().keySet()).encode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 234}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c1dc09ab3f592d76ab1271a329598b316d0971", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/11c1dc09ab3f592d76ab1271a329598b316d0971", "committedDate": "2020-09-18T23:08:31Z", "message": "add scale test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a123ebcdd69981ae7bab50377acd3dc44b1a73ba", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/a123ebcdd69981ae7bab50377acd3dc44b1a73ba", "committedDate": "2020-09-18T23:08:31Z", "message": "refactor, add several tests with different parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8707e5392a38f3049c36fc3cd228b2a99b81ce89", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/8707e5392a38f3049c36fc3cd228b2a99b81ce89", "committedDate": "2020-09-18T23:08:31Z", "message": "stub consumer offset fetch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d93598d50025b30abd5bfa8c92e99d317ecb09", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f0d93598d50025b30abd5bfa8c92e99d317ecb09", "committedDate": "2020-09-18T23:08:31Z", "message": "review comments, un-parametrize the tests for individual limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae509cb9f216707f30f7766bbaeed19293090dc", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/4ae509cb9f216707f30f7766bbaeed19293090dc", "committedDate": "2020-09-18T23:08:31Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/9ef7207d407aa8031f6ad85609764ae5794144c2", "committedDate": "2020-09-18T23:08:32Z", "message": "review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/9ef7207d407aa8031f6ad85609764ae5794144c2", "committedDate": "2020-09-18T23:08:32Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDg0MDE2", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-492484016", "createdAt": "2020-09-21T11:01:56Z", "commit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTI0Mzk3", "url": "https://github.com/apache/kafka/pull/8892#pullrequestreview-492924397", "createdAt": "2020-09-21T19:41:00Z", "commit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0MTowMFrOHVfwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0Mzo1OFrOHVf2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMjUyMg==", "bodyText": "Huh, I thought we fixed this a while ago. Why it it showing up in the diff right now?", "url": "https://github.com/apache/kafka/pull/8892#discussion_r492302522", "createdAt": "2020-09-21T19:41:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -288,17 +288,17 @@ public void computeTaskLags(final UUID uuid, final Map<TaskId, Long> allTaskEndO\n             final Long endOffsetSum = taskEntry.getValue();\n             final Long offsetSum = taskOffsetSums.getOrDefault(task, 0L);\n \n-            if (endOffsetSum < offsetSum) {\n+            if (offsetSum == Task.LATEST_OFFSET) {\n+                taskLagTotals.put(task, Task.LATEST_OFFSET);\n+            } else if (offsetSum == UNKNOWN_OFFSET_SUM) {\n+                taskLagTotals.put(task, UNKNOWN_OFFSET_SUM);\n+            } else if (endOffsetSum < offsetSum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk3OQ==", "bodyText": "Why remove this? Do we need to instantiate this class now? (I only see static members still).", "url": "https://github.com/apache/kafka/pull/8892#discussion_r492303979", "createdAt": "2020-09-21T19:43:58Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentTestUtils.java", "diffHunk": "@@ -77,13 +86,8 @@\n     public static final TaskId TASK_2_3 = new TaskId(2, 3);\n \n     public static final Set<TaskId> EMPTY_TASKS = emptySet();\n-    public static final List<TaskId> EMPTY_TASK_LIST = emptyList();\n-    public static final Map<TaskId, Long> EMPTY_TASK_OFFSET_SUMS = emptyMap();\n     public static final Map<TopicPartition, Long> EMPTY_CHANGELOG_END_OFFSETS = new HashMap<>();\n \n-    private AssignmentTestUtils() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef7207d407aa8031f6ad85609764ae5794144c2"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9dd1efa9585a3ce8d3bed551632776c50cd1be", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/fc9dd1efa9585a3ce8d3bed551632776c50cd1be", "committedDate": "2020-09-22T02:42:43Z", "message": "private constructor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 661, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}