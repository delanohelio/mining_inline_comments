{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDI2MDQ4", "number": 9301, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxMjo0N1rOEk8cLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzo1ODowNVrOEl90Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTc0NDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxMjo0N1rOHUKkyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxMjo0NlrOHUMj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNjgyNg==", "bodyText": "Shouldn't we put this after waiting for the futures (next line)?", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490906826", "createdAt": "2020-09-18T12:12:47Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -202,6 +208,7 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     val futures = newListenerNames.map { listener =>\n       executor.submit((() => verifyConnectionRate(3, listenerConnRateLimit, listener)): Runnable)\n     }\n+    waitForConnectionCloseToInitState(initialConnectionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzOTM4Nw==", "bodyText": "Oh, man, thanks for reminding! Fixed. Thanks.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490939387", "createdAt": "2020-09-18T13:12:46Z", "author": {"login": "showuon"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -202,6 +208,7 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     val futures = newListenerNames.map { listener =>\n       executor.submit((() => verifyConnectionRate(3, listenerConnRateLimit, listener)): Runnable)\n     }\n+    waitForConnectionCloseToInitState(initialConnectionCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNjgyNg=="}, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTc0NTAzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxMjo1OFrOHUKlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxMjo1MlrOHUMkTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNjkxMQ==", "bodyText": "Same comment as above.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490906911", "createdAt": "2020-09-18T12:12:58Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -215,6 +222,7 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n       verifyConnectionRate(18, newPlaintextRateLimit, \"PLAINTEXT\")): Runnable)\n     val externalFuture = executor.submit((() =>\n       verifyConnectionRate(5, listenerConnRateLimit, \"EXTERNAL\")): Runnable)\n+    waitForConnectionCloseToInitState(initialConnectionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzOTQ2OA==", "bodyText": "Fixed. Thanks.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490939468", "createdAt": "2020-09-18T13:12:52Z", "author": {"login": "showuon"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -215,6 +222,7 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n       verifyConnectionRate(18, newPlaintextRateLimit, \"PLAINTEXT\")): Runnable)\n     val externalFuture = executor.submit((() =>\n       verifyConnectionRate(5, listenerConnRateLimit, \"EXTERNAL\")): Runnable)\n+    waitForConnectionCloseToInitState(initialConnectionCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNjkxMQ=="}, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTc0ODE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxNDowNFrOHUKnAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxMjoyNlrOHUMjLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNzM5NA==", "bodyText": "How about calling this waitForConnectionCount and renaming initialConnectionCount to expectedConnectionCount? That makes the helper more generic.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490907394", "createdAt": "2020-09-18T12:14:04Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -317,6 +325,12 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     }\n   }\n \n+  private def waitForConnectionCloseToInitState(initialConnectionCount: Int): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzOTE4MQ==", "bodyText": "I'm good. I don't have any preference. Updated. Thanks.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r490939181", "createdAt": "2020-09-18T13:12:26Z", "author": {"login": "showuon"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -317,6 +325,12 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     }\n   }\n \n+  private def waitForConnectionCloseToInitState(initialConnectionCount: Int): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNzM5NA=="}, "originalCommit": {"oid": "0b7a0b3e3d4df26812fa554e8ec7344a72453505"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjQ0NzQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzo1NjowMlrOHVuQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzo1NjowMlrOHVuQ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0MDE1MA==", "bodyText": "This comment is irrelevant now. I would just say that this is the expected connection count after each run.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r492540150", "createdAt": "2020-09-22T07:56:02Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -179,17 +179,23 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     reconfigureServers(props, perBrokerConfig = true, (KafkaConfig.ListenersProp, newListeners))\n     waitForListener(\"EXTERNAL\")\n \n+    // we need to set the initialConnectionCount earlier and pass to verifyConnectionRate method\n+    // so that the race condition won't occur for the following multi-thread test cases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d240571de45b3ea3573c3428a6c17efe862092"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjQ1NTUxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzo1ODowNVrOHVuVwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzo1ODowNVrOHVuVwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0MTM3OA==", "bodyText": "nit: I would remove this comment. I think that the method is self-explanatory now.", "url": "https://github.com/apache/kafka/pull/9301#discussion_r492541378", "createdAt": "2020-09-22T07:58:05Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala", "diffHunk": "@@ -317,6 +325,12 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {\n     }\n   }\n \n+  // make sure the connection count state is the same as the expectedConnectionCount", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d240571de45b3ea3573c3428a6c17efe862092"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1841, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}