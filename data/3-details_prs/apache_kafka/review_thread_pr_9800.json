{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MDk1Nzgx", "number": 9800, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozNjowMlrOFK-9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozOTowN1rOFK_BQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDYxNTE3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozNjowM1rOIN6nnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowOTowNVrOIOsJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MjgxMg==", "bodyText": "Could we add a comment here to explain why a task is not processable under pending transaction?", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551462812", "createdAt": "2021-01-04T17:36:03Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -633,6 +636,10 @@ public boolean isProcessable(final long wallClockTime) {\n             return false;\n         }\n \n+        if (hasPendingTransaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NDI1Ng==", "bodyText": "Sure. Just realizing that the variable name is not ideal -- it actually about an \"pending TX commit\"...", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552274256", "createdAt": "2021-01-06T00:09:05Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -633,6 +636,10 @@ public boolean isProcessable(final long wallClockTime) {\n             return false;\n         }\n \n+        if (hasPendingTransaction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MjgxMg=="}, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDYyMjA2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozODowNVrOIN6rwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDoxMToyOVrOIOsOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2Mzg3Mw==", "bodyText": "Why do we need to assert twice?", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551463873", "createdAt": "2021-01-04T17:38:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertTrue(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+\n+        assertFalse(task.process(time.milliseconds()));\n+    }\n+\n+    @Test\n+    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n+        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertFalse(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+        assertTrue(task.process(time.milliseconds()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NTYyNA==", "bodyText": "We need to call process() twice here. We have 3 input records, and want to confirm that all three are processed. If we don't call process() two times here, the assert in L460 below would not return false.", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552275624", "createdAt": "2021-01-06T00:11:29Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertTrue(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+\n+        assertFalse(task.process(time.milliseconds()));\n+    }\n+\n+    @Test\n+    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n+        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n+\n+        assertFalse(task.process(time.milliseconds()));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20),\n+            getConsumerRecord(partition1, 30)\n+        ));\n+\n+        assertTrue(task.process(time.milliseconds()));\n+        task.prepareCommit();\n+        assertFalse(task.process(time.milliseconds()));\n+        task.postCommit(false);\n+        assertTrue(task.process(time.milliseconds()));\n+        assertTrue(task.process(time.milliseconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2Mzg3Mw=="}, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDYyNTkyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzozOTowN1rOIN6t3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMTo1Mzo0N1rOIOu7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NDQxNA==", "bodyText": "nit: we may extract the common test logic to be reused by all 3 process record tests.", "url": "https://github.com/apache/kafka/pull/9800#discussion_r551464414", "createdAt": "2021-01-04T17:39:07Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxOTg2NQ==", "bodyText": "Thinking about it, the common test logic is so small, it seems to make the test hard to read if we extract it?", "url": "https://github.com/apache/kafka/pull/9800#discussion_r552319865", "createdAt": "2021-01-06T01:53:47Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -408,9 +417,74 @@ public void shouldProcessInOrder() {\n         assertEquals(3, source2.numReceived);\n     }\n \n+    @Test\n+    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n+        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NDQxNA=="}, "originalCommit": {"oid": "192c73d17df12280af4f477be68844522aa84b66"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3569, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}