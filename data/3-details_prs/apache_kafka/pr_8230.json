{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDEyNzI2", "number": 8230, "title": "KAFKA-9667: Connect JSON serde strip trailing zeros", "bodyText": "Fixes: KAFKA-9667\nThe Connect Json serde was recently enhanced to support serializing decimals as standard JSON numbers, (Original work done under\u00a0KAFKA-8595), e.g. 1.23.\u00a0 However, there is a bug in the implementation: it's stripping trailing zeros!\u00a0 1.23 is not the same as 1.230.\u00a0 The first is a number accurate to 2 decimal places, where as the later is accurate to 3 dp.\nIt is important that trailing zeros are not dropped when de(serializing) decimals.\u00a0 For some use-cases it may be acceptable to drop the trailing zeros, but for others it definitely is not.\nCurrent Functionality\nIf a JSON object was to contain the number 1.230 then the Java JsonDeserializer would correctly deserialize this into a BigDecimal. The BigDecimal would have a scale of 3, which is correct.\nHowever, if that same BigDecimal was then serialized back to JSON using the Java JsonSerializer it would incorrectly strip the zeros, serializing to 1.23.\u00a0\nExpected Functionality\nWhen serializing, trailing zeros should be maintained.\u00a0 For example, a BigDecimal such as 1.230, (3 dp), should be serialized as 1.230.\u00a0\nCompatibility\nBoth the old serialized number, e.g. 1.23, and the proposed corrected serialized number, e.g. 1.230, are valid JSON numbers. Downstream consumers should have no issue deserializing either.\nThis is not super urgent, but would be good to get into the next point releases of 2.4 and 2.5.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-05T17:40:40Z", "url": "https://github.com/apache/kafka/pull/8230", "merged": true, "mergeCommit": {"oid": "4f61b00fcd49b58e2cc806c0dea86d8ffb14ca20"}, "closed": true, "closedAt": "2020-05-07T21:21:09Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKvFrgAH2gAyMzg0NDEyNzI2OjlmMWViZjNlZjE2ZGM5NjVlN2I4YzIxYWExOGNjMWE3ZmY3MTg3YmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcet3N5gFqTQwNjkyMjc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd", "committedDate": "2020-03-05T17:37:04Z", "message": "KAFKA-9667: Connect JSON serde strip trailing zeros\n\nThis change turns on exact decimal processing in Jackson for decimals, meaning trailing zeros are maintained. This means a value of `1.2300` can be deserialized and re-serialized to JSON without any loss of information."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzgzMzk3", "url": "https://github.com/apache/kafka/pull/8230#pullrequestreview-369783397", "createdAt": "2020-03-05T17:48:47Z", "commit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0ODo0N1rOFydoRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0ODo0N1rOFydoRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1ODU2NA==", "bodyText": "what about exposing a JsonNodeFactory as an argument to make this more extensible?", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388458564", "createdAt": "2020-03-05T17:48:47Z", "author": {"login": "agavra"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);\n     }\n \n     /**\n      * A constructor that additionally specifies some {@link DeserializationFeature}\n      * for the deserializer\n      *\n      * @param deserializationFeatures the specified deserialization features\n+     * @param exactDecimals {@code true} if trailing zeros on decimals should be maintained.\n      */\n-    JsonDeserializer(final Set<DeserializationFeature> deserializationFeatures) {\n+    JsonDeserializer(\n+        final Set<DeserializationFeature> deserializationFeatures,\n+        final boolean exactDecimals", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzg4ODU1", "url": "https://github.com/apache/kafka/pull/8230#pullrequestreview-369788855", "createdAt": "2020-03-05T17:56:50Z", "commit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo1Njo1MFrOFyd5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDozOFrOFyfo2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjkxMg==", "bodyText": "Why is false (inexact decimals) the default for the no-arg constructor? If this is an attempt to maintain backward compatibility, we should consider whether this bug, when fixed, compatible. Seems like it would be, since having the deserializer use the trailing zeros would be fine/better than not using them.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388462912", "createdAt": "2020-03-05T17:56:50Z", "author": {"login": "rhauch"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonDeserializer.java", "diffHunk": "@@ -35,17 +36,22 @@\n      * Default constructor needed by Kafka\n      */\n     public JsonDeserializer() {\n-        this(Collections.emptySet());\n+        this(Collections.emptySet(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTQ4MA==", "bodyText": "Passing in a JsonNodeFactory instance might be better here, because then the JsonConverter instances and JsonDeserializer in each converter will all use the same JsonNodeFactory.\nAs it currently stands, the JsonDeserializer has it's own instance of the JsonNodeFactory, and it's possible that they could be set up differently in the future and not caught.", "url": "https://github.com/apache/kafka/pull/8230#discussion_r388491480", "createdAt": "2020-03-05T18:50:38Z", "author": {"login": "rhauch"}, "path": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java", "diffHunk": "@@ -285,7 +288,7 @@ public JsonConverter() {\n         // floating point numbers that cannot fit into float64\n         final Set<DeserializationFeature> deserializationFeatures = new HashSet<>();\n         deserializationFeatures.add(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n-        deserializer = new JsonDeserializer(deserializationFeatures);\n+        deserializer = new JsonDeserializer(deserializationFeatures, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f1ebf3ef16dc965e7b8c21aa18cc1a7ff7187bd"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d20bf6bf2e3976b75efabb34bf482617643e855b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/apache/kafka/commit/d20bf6bf2e3976b75efabb34bf482617643e855b", "committedDate": "2020-03-06T15:30:37Z", "message": "requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTIyNzcx", "url": "https://github.com/apache/kafka/pull/8230#pullrequestreview-406922771", "createdAt": "2020-05-06T19:29:52Z", "commit": {"oid": "d20bf6bf2e3976b75efabb34bf482617643e855b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}