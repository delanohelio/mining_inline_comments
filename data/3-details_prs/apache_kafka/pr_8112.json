{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTEyODc2", "number": 8112, "title": "KAFKA-9557: correct thread process-rate sensor to measure throughput", "bodyText": "The current definition of the thread-level process-rate/total metric seems not correct by any reasonable standard.\nIt claims to measure the number/rate of \"calls to process\", but doesn't define what a \"call to process\" is.\nI think a reasonable definition would be a \"call to process a record\", which in Streams is equal to a call to task.process(). This is exactly what the task-level process-rate/total metric does.\nHowever, the thread-level metric measures the number/rate of calls to taskManager.process(), in which the method processes at least one record. This doesn't seem like a useful quantity for operators to measure, and it certainly doesn't seem to honor the spirit of the metric.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-13T22:10:46Z", "url": "https://github.com/apache/kafka/pull/8112", "merged": true, "mergeCommit": {"oid": "8d0b069b0fbda0826ad447accbf93a19f6e813fe"}, "closed": true, "closedAt": "2020-02-14T21:54:40Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcECZoRgH2gAyMzc1MTEyODc2OjRmYWViZjZiYmUwMTQzMTU5ZDE0ZjM3ZGE3ZGMwOTI5OTRmOWE0MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcET05OgFqTM1OTEzMjg5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4faebf6bbe0143159d14f37da7dc092994f9a425", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4faebf6bbe0143159d14f37da7dc092994f9a425", "committedDate": "2020-02-13T22:09:35Z", "message": "MINOR: correct thread process-rate sensor to measure throughput"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjcyMDc4", "url": "https://github.com/apache/kafka/pull/8112#pullrequestreview-358672078", "createdAt": "2020-02-14T01:58:58Z", "commit": {"oid": "4faebf6bbe0143159d14f37da7dc092994f9a425"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTo1ODo1OFrOFppkpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMTo1ODo1OFrOFppkpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA==", "bodyText": "We can still leverage on addInvocationRateToSensor here?", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379217060", "createdAt": "2020-02-14T01:58:58Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -146,18 +151,46 @@ public static Sensor pollSensor(final String threadId,\n         );\n     }\n \n-    public static Sensor processSensor(final String threadId,\n-                                       final StreamsMetricsImpl streamsMetrics) {\n-        return invocationRateAndCountAndAvgAndMaxLatencySensor(\n-            threadId,\n-            PROCESS,\n-            PROCESS_RATE_DESCRIPTION,\n-            PROCESS_TOTAL_DESCRIPTION,\n+    public static Sensor processLatencySensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        addAvgAndMaxToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            PROCESS + LATENCY_SUFFIX,\n             PROCESS_AVG_LATENCY_DESCRIPTION,\n-            PROCESS_MAX_LATENCY_DESCRIPTION,\n-            Sensor.RecordingLevel.INFO,\n-            streamsMetrics\n+            PROCESS_MAX_LATENCY_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+\n+    public static Sensor processRateSensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        sensor.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4faebf6bbe0143159d14f37da7dc092994f9a425"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf", "committedDate": "2020-02-14T17:50:57Z", "message": "fix sensor names and tests and add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/65733c1d76583d727dc6d5a7b6b2dd3d773993bf", "committedDate": "2020-02-14T18:06:00Z", "message": "switch to addRateOfSumAndSumMetricsToSensor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTE5Mjky", "url": "https://github.com/apache/kafka/pull/8112#pullrequestreview-359119292", "createdAt": "2020-02-14T17:59:23Z", "commit": {"oid": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzo1OToyNFrOFp-9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowODowMFrOFp_Lww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NzQ0NQ==", "bodyText": "I've updated this PR to give the two different sensors unique names.", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379567445", "createdAt": "2020-02-14T17:59:24Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -146,18 +152,50 @@ public static Sensor pollSensor(final String threadId,\n         );\n     }\n \n-    public static Sensor processSensor(final String threadId,\n-                                       final StreamsMetricsImpl streamsMetrics) {\n-        return invocationRateAndCountAndAvgAndMaxLatencySensor(\n-            threadId,\n-            PROCESS,\n-            PROCESS_RATE_DESCRIPTION,\n-            PROCESS_TOTAL_DESCRIPTION,\n+    public static Sensor processLatencySensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId,\n+                                                               PROCESS + LATENCY_SUFFIX,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2NzkyOQ==", "bodyText": "Ah, sorry :)\nI saw that metric, but had no idea what a \"rate of sum\" is... I fixed it now.", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379567929", "createdAt": "2020-02-14T18:00:30Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -146,18 +151,46 @@ public static Sensor pollSensor(final String threadId,\n         );\n     }\n \n-    public static Sensor processSensor(final String threadId,\n-                                       final StreamsMetricsImpl streamsMetrics) {\n-        return invocationRateAndCountAndAvgAndMaxLatencySensor(\n-            threadId,\n-            PROCESS,\n-            PROCESS_RATE_DESCRIPTION,\n-            PROCESS_TOTAL_DESCRIPTION,\n+    public static Sensor processLatencySensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        addAvgAndMaxToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            PROCESS + LATENCY_SUFFIX,\n             PROCESS_AVG_LATENCY_DESCRIPTION,\n-            PROCESS_MAX_LATENCY_DESCRIPTION,\n-            Sensor.RecordingLevel.INFO,\n-            streamsMetrics\n+            PROCESS_MAX_LATENCY_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+\n+    public static Sensor processRateSensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, PROCESS, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        sensor.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIxNzA2MA=="}, "originalCommit": {"oid": "4faebf6bbe0143159d14f37da7dc092994f9a425"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2ODk4NQ==", "bodyText": "I moved this into the tests where it was needed because it was interfering with the new tests, in which we specifically need the static method not to be mocked so that we can make sure that we are actually adding the desired metrics. The tests with this thing mocked only verify that ThreadMetrics invokes the static method on StreamsMetricsImpl, not that it actually creates the right metrics, but I don't have the ambition to fix the rest of the tests right now.", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379568985", "createdAt": "2020-02-14T18:02:52Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java", "diffHunk": "@@ -75,7 +78,6 @@\n     @Before\n     public void setUp() {\n         expect(streamsMetrics.version()).andReturn(builtInMetricsVersion).anyTimes();\n-        mockStatic(StreamsMetricsImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dcc1d7bd343a7e0fb9dbd7d7ca89980a9f059cf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MTEzOQ==", "bodyText": "I moved this into the block here because it makes no difference to the result, and it's a little more efficient.", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379571139", "createdAt": "2020-02-14T18:08:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -851,11 +853,19 @@ void runOnce() {\n \n             do {\n                 for (int i = 0; i < numIterations; i++) {\n+                    advanceNowAndComputeLatency();\n                     processed = taskManager.process(now);\n \n                     if (processed > 0) {\n+                        // It makes no difference to the outcome of these metrics when we record \"0\",\n+                        // so we can just avoid the method call when we didn't process anything.\n+                        processRateSensor.record(processed, now);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTMyODk1", "url": "https://github.com/apache/kafka/pull/8112#pullrequestreview-359132895", "createdAt": "2020-02-14T18:24:37Z", "commit": {"oid": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyNDozOFrOFp_mdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyNDozOFrOFp_mdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Nzk3Mg==", "bodyText": "not a suggestion: We have a new metrics proposed in KIP-444 to report the ratio of processing each task within a thread (CPU wise), hopefully that helps with the debugging purposes.", "url": "https://github.com/apache/kafka/pull/8112#discussion_r379577972", "createdAt": "2020-02-14T18:24:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -851,11 +853,19 @@ void runOnce() {\n \n             do {\n                 for (int i = 0; i < numIterations; i++) {\n+                    advanceNowAndComputeLatency();\n                     processed = taskManager.process(now);\n \n                     if (processed > 0) {\n+                        // It makes no difference to the outcome of these metrics when we record \"0\",\n+                        // so we can just avoid the method call when we didn't process anything.\n+                        processRateSensor.record(processed, now);\n+\n+                        // This metric is scaled to represent the _average_ processing time of _each_\n+                        // task. Note, it's hard to interpret this as defined, but we would need a KIP\n+                        // to change it to simply report the overall time spent processing all tasks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65733c1d76583d727dc6d5a7b6b2dd3d773993bf"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1893, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}