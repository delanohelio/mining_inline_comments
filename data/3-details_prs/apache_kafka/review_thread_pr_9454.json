{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTc5MjU3", "number": 9454, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MjowM1rOEvtmVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1MDozNlrOEvt0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDY1NjIyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MjowM1rOHk2CYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo0NjoyMVrOHlEaoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NjEzMA==", "bodyText": "We have already imported UUID, do we need to qualify here? I can see it was this way before, but not sure why.", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508396130", "createdAt": "2020-10-20T10:42:03Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -331,14 +331,14 @@ public String documentation() {\n     public static final DocumentedType UUID = new DocumentedType() {\n         @Override\n         public void write(ByteBuffer buffer, Object o) {\n-            final java.util.UUID uuid = (java.util.UUID) o;\n+            final org.apache.kafka.common.UUID uuid = (org.apache.kafka.common.UUID) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzMTcxMg==", "bodyText": "My best guess is that since the type is also called UUID, originally the qualification was to differentiate. But it doesn't seem to be needed, so I'll update this to just say UUID.", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508631712", "createdAt": "2020-10-20T15:46:21Z", "author": {"login": "jolshan"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -331,14 +331,14 @@ public String documentation() {\n     public static final DocumentedType UUID = new DocumentedType() {\n         @Override\n         public void write(ByteBuffer buffer, Object o) {\n-            final java.util.UUID uuid = (java.util.UUID) o;\n+            final org.apache.kafka.common.UUID uuid = (org.apache.kafka.common.UUID) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NjEzMA=="}, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDY1ODM2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MjozMVrOHk2DrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MjozMVrOHk2DrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5NjQ2MQ==", "bodyText": "Same as before, why don't we just use UUID since package was imported?", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508396461", "createdAt": "2020-10-20T10:42:31Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -331,14 +331,14 @@ public String documentation() {\n     public static final DocumentedType UUID = new DocumentedType() {\n         @Override\n         public void write(ByteBuffer buffer, Object o) {\n-            final java.util.UUID uuid = (java.util.UUID) o;\n+            final org.apache.kafka.common.UUID uuid = (org.apache.kafka.common.UUID) o;\n             buffer.putLong(uuid.getMostSignificantBits());\n             buffer.putLong(uuid.getLeastSignificantBits());\n         }\n \n         @Override\n         public Object read(ByteBuffer buffer) {\n-            return new java.util.UUID(buffer.getLong(), buffer.getLong());\n+            return new org.apache.kafka.common.UUID(buffer.getLong(), buffer.getLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDY5MjM4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/UUIDTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1MDozNlrOHk2Xmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToxNjoyN1rOHlCVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMTU2Mg==", "bodyText": "Should we have a separate unit test for UUID.randomUUID to verify it is not zero or the sentinel?", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508401562", "createdAt": "2020-10-20T10:50:36Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/common/UUIDTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class UUIDTest {\n+\n+    @Test\n+    public void testSignificantBits() {\n+        UUID id = new UUID(34L, 98L);\n+\n+        assertEquals(id.getMostSignificantBits(), 34L);\n+        assertEquals(id.getLeastSignificantBits(), 98L);\n+    }\n+\n+    @Test\n+    public void testUUIDEquality() {\n+        UUID id1 = new UUID(12L, 13L);\n+        UUID id2 = new UUID(12L, 13L);\n+        UUID id3 = new UUID(24L, 38L);\n+\n+        assertEquals(UUID.ZERO_UUID, UUID.ZERO_UUID);\n+        assertEquals(id1, id2);\n+        assertNotEquals(id1, id3);\n+\n+        assertEquals(UUID.ZERO_UUID.hashCode(), UUID.ZERO_UUID.hashCode());\n+        assertEquals(id1.hashCode(), id2.hashCode());\n+        assertNotEquals(id1.hashCode(), id3.hashCode());\n+    }\n+\n+    @Test\n+    public void testStringConversion() {\n+        UUID id = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5NzY1Ng==", "bodyText": "I thought about that, but since the likelihood we would get the zero/sentinel id is so low even if they were allowed, I didn't know if the test would be useful. The sentinel ID is also a private variable, but I suppose I could just construct a new one if we want to test.", "url": "https://github.com/apache/kafka/pull/9454#discussion_r508597656", "createdAt": "2020-10-20T15:16:27Z", "author": {"login": "jolshan"}, "path": "clients/src/test/java/org/apache/kafka/common/UUIDTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+public class UUIDTest {\n+\n+    @Test\n+    public void testSignificantBits() {\n+        UUID id = new UUID(34L, 98L);\n+\n+        assertEquals(id.getMostSignificantBits(), 34L);\n+        assertEquals(id.getLeastSignificantBits(), 98L);\n+    }\n+\n+    @Test\n+    public void testUUIDEquality() {\n+        UUID id1 = new UUID(12L, 13L);\n+        UUID id2 = new UUID(12L, 13L);\n+        UUID id3 = new UUID(24L, 38L);\n+\n+        assertEquals(UUID.ZERO_UUID, UUID.ZERO_UUID);\n+        assertEquals(id1, id2);\n+        assertNotEquals(id1, id3);\n+\n+        assertEquals(UUID.ZERO_UUID.hashCode(), UUID.ZERO_UUID.hashCode());\n+        assertEquals(id1.hashCode(), id2.hashCode());\n+        assertNotEquals(id1.hashCode(), id3.hashCode());\n+    }\n+\n+    @Test\n+    public void testStringConversion() {\n+        UUID id = UUID.randomUUID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMTU2Mg=="}, "originalCommit": {"oid": "2695732807de685b135b1afd8751efd72eca5801"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1794, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}