{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDAyNDkw", "number": 9654, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MTo0MlrOE_Svew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MTo0MlrOE_Svew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAyODExOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MTo0MlrOH87F5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MTo0MlrOH87F5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDc3NQ==", "bodyText": "It's not a bid deal, but I found the naming here a bit confusing, since the nonExistingSourceNode is clearly added to the topology down on line 223, so it definitely exists. But I'm not sure what a better name would be...msybe removedSourceNode? Idk", "url": "https://github.com/apache/kafka/pull/9654#discussion_r533644775", "createdAt": "2020-12-01T18:51:42Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java", "diffHunk": "@@ -151,41 +156,105 @@ public void shouldGetTerminalNodes() {\n \n     @Test\n     public void shouldUpdateSourceTopicsWithNewMatchingTopic() {\n-        topology.addSource(\"source-1\", \"topic-1\");\n+        final String sourceNode = \"source-1\";\n+        final String topic = \"topic-1\";\n+        final String newTopic = \"topic-2\";\n+        topology.addSource(sourceNode, topic);\n         final ProcessorTopology processorTopology = topology.getInternalBuilder(\"X\").buildTopology();\n+        assertThat(processorTopology.source(newTopic), is(nullValue()));\n \n-        assertNull(processorTopology.source(\"topic-2\"));\n-        processorTopology.updateSourceTopics(Collections.singletonMap(\"source-1\", asList(\"topic-1\", \"topic-2\")));\n+        processorTopology.updateSourceTopics(Collections.singletonMap(sourceNode, asList(topic, newTopic)));\n \n-        assertThat(processorTopology.source(\"topic-2\").name(), equalTo(\"source-1\"));\n+        assertThat(processorTopology.source(newTopic).name(), equalTo(sourceNode));\n     }\n \n     @Test\n     public void shouldUpdateSourceTopicsWithRemovedTopic() {\n-        topology.addSource(\"source-1\", \"topic-1\", \"topic-2\");\n+        final String sourceNode = \"source-1\";\n+        final String topic = \"topic-1\";\n+        final String topicToRemove = \"topic-2\";\n+        topology.addSource(sourceNode, topic, topicToRemove);\n         final ProcessorTopology processorTopology = topology.getInternalBuilder(\"X\").buildTopology();\n+        assertThat(processorTopology.source(topicToRemove).name(), equalTo(sourceNode));\n+\n+        processorTopology.updateSourceTopics(Collections.singletonMap(sourceNode, Collections.singletonList(topic)));\n \n-        assertThat(processorTopology.source(\"topic-2\").name(), equalTo(\"source-1\"));\n+        assertThat(processorTopology.source(topicToRemove), is(nullValue()));\n+    }\n+\n+    @Test\n+    public void shouldUpdateSourceTopicsWithAllTopicsRemoved() {\n+        final String sourceNode = \"source-1\";\n+        final String topic = \"topic-1\";\n+        topology.addSource(sourceNode, topic);\n+        final ProcessorTopology processorTopology = topology.getInternalBuilder(\"X\").buildTopology();\n+        assertThat(processorTopology.source(topic).name(), equalTo(sourceNode));\n \n-        processorTopology.updateSourceTopics(Collections.singletonMap(\"source-1\", Collections.singletonList(\"topic-1\")));\n+        processorTopology.updateSourceTopics(Collections.singletonMap(sourceNode, Collections.emptyList()));\n \n-        assertNull(processorTopology.source(\"topic-2\"));\n+        assertThat(processorTopology.source(topic), is(nullValue()));\n     }\n \n     @Test\n     public void shouldUpdateSourceTopicsOnlyForSourceNodesWithinTheSubtopology() {\n-        topology.addSource(\"source-1\", \"topic-1\");\n+        final String sourceNodeWithinSubtopology = \"source-1\";\n+        final String sourceNodeOutsideSubtopology = \"source-2\";\n+        final String topicWithinSubtopology = \"topic-1\";\n+        final String topicOutsideSubtopology = \"topic-2\";\n+        topology.addSource(sourceNodeWithinSubtopology, topicWithinSubtopology);\n         final ProcessorTopology processorTopology = topology.getInternalBuilder(\"X\").buildTopology();\n \n         processorTopology.updateSourceTopics(mkMap(\n-            mkEntry(\"source-1\", Collections.singletonList(\"topic-1\")),\n-            mkEntry(\"source-2\", Collections.singletonList(\"topic-2\")))\n+            mkEntry(sourceNodeWithinSubtopology, Collections.singletonList(topicWithinSubtopology)),\n+            mkEntry(sourceNodeOutsideSubtopology, Collections.singletonList(topicOutsideSubtopology))\n+            )\n         );\n \n-        assertNull(processorTopology.source(\"topic-2\"));\n+        assertThat(processorTopology.source(topicOutsideSubtopology), is(nullValue()));\n         assertThat(processorTopology.sources().size(), equalTo(1));\n     }\n \n+    @Test\n+    public void shouldThrowIfSourceNodeToUpdateDoesNotExist() {\n+        final String existingSourceNode = \"source-1\";\n+        final String nonExistingSourceNode = \"source-2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3793d71b2c1b622b88c8b5b9020c66c6c0c216"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3623, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}