{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDMyNTE0", "number": 9580, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMTo0MFrOE3ZgEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoyMDowMVrOE3b3zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI0OTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMTo0MFrOHwuL5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyNDo0MlrOHwwLBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDQwNw==", "bodyText": "Wdyt about also adding a \"forwarded\" boolean to the request log? (in RequestChannel#updateRequestMetrics)\nWould this be useful? cc @cmccabe", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520850407", "createdAt": "2020-11-10T20:21:40Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4Mjk1MA==", "bodyText": "Added the logging in RequestChannel.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520882950", "createdAt": "2020-11-10T21:24:42Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDQwNw=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI1NDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMzoxMFrOHwuOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOToyNjo0M1rOHxbLyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MTEzNw==", "bodyText": "nit: should we do this get-or-else-throw thing, or do a match/case?", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520851137", "createdAt": "2020-11-10T20:23:10Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3OTM0Nw==", "bodyText": "We should have the principal serde emptiness check in the caller, so here would be an illegal state.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520879347", "createdAt": "2020-11-10T21:17:46Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MTEzNw=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkwMzEzMg==", "bodyText": "I think logic is fine, I'm just wondering if it's more idiomatic to do:\nrequest.context.principalSerde.asScala match {\n      case Some(principalSerde) => ...\n      case None => throw new IllegalArgumentException", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520903132", "createdAt": "2020-11-10T22:04:30Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MTEzNw=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4NzY1OA==", "bodyText": "Looks like we actually use this getOrElse + throw pattern in a few places already.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r521587658", "createdAt": "2020-11-11T19:26:43Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MTEzNw=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI3NTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyOTozMFrOHwubfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoxNzo0MlrOHwxzSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NDM5OA==", "bodyText": "Should we extend the BrokerToControllerChannel here? It looks like we only ever call forwardRequest, so maybe it's better for ForwardingManager not to extend BrokerToControllerChannel and instead take it as a dependency. Otherwise we are exposing the sendRequest method which we don't really want anyone to use on the forwardingManager instance.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520854398", "createdAt": "2020-11-10T20:29:30Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTAwOA==", "bodyText": "Actually we do need sendRequest on the forwarding manager interface in the topic creation routing (WIP here.. The forwardRequest is serving the purpose of embedding client request inside an Envelope, while for certain cases broker would like to send direct CreateTopicsRequest on behalf of its own principal instead of the client principal. I think we could debate whether to rename forwardingManager to a different name to also include the possibility of sending direct request, just not have yet come up a better name here.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520881008", "createdAt": "2020-11-10T21:20:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NDM5OA=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkwOTY0MQ==", "bodyText": "Ah, ok \ud83d\udc4d Thanks for the explanation. Another option would be to let KafkaApis have BrokerToControllerChannelManager and ForwardingManager as separate dependencies. However, we already have lots of dependencies there, so I could see us wanting to use one instance for forwarding and regular requests. I don't really have a strong opinion either way, I'm ok leaving it as-is", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520909641", "createdAt": "2020-11-10T22:17:42Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NDM5OA=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI4NjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozMjoyNFrOHwuhrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMTo0OFrOHwwFMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NTk4MQ==", "bodyText": "nit: I normally reverse the order of stuff in shutdown methods so when the super is called anything the child class has done is undone. Probably doesn't matter in this case", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520855981", "createdAt": "2020-11-10T20:32:24Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(\n+      throw new IllegalArgumentException(s\"Cannot deserialize principal from request $request \" +\n+        \"since there is no serde defined\")\n+    )\n+    val serializedPrincipal = principalSerde.serialize(request.context.principal)\n+    val forwardRequestBuffer = request.buffer.duplicate()\n+    forwardRequestBuffer.flip()\n+    val envelopeRequest = new EnvelopeRequest.Builder(\n+      forwardRequestBuffer,\n+      serializedPrincipal,\n+      request.context.clientAddress.getAddress\n+    )\n+\n+    def onClientResponse(clientResponse: ClientResponse): Unit = {\n+      val envelopeResponse = clientResponse.responseBody.asInstanceOf[EnvelopeResponse]\n+      val envelopeError = envelopeResponse.error()\n+\n+      val response = if (envelopeError != Errors.NONE) {\n+        // An envelope error indicates broker misconfiguration (e.g. the principal serde\n+        // might not be defined on the receiving broker). In this case, we do not return\n+        // the error directly to the client since it would not be expected. Instead we\n+        // return `UNKNOWN_SERVER_ERROR` so that the user knows that there is a problem\n+        // on the broker.\n+        debug(s\"Forwarded request $request failed with an error in envelope response $envelopeError\")\n+        request.body[AbstractRequest].getErrorResponse(Errors.UNKNOWN_SERVER_ERROR.exception())\n+      } else {\n+        AbstractResponse.deserializeBody(envelopeResponse.responseData, request.header)\n+      }\n+      responseCallback(response)\n+    }\n+\n+    sendRequest(envelopeRequest, onClientResponse)\n+  }\n+\n+  override def start(): Unit = {\n+    super.start()\n+    newGauge(forwardingMetricName, () => requestQueue.size())\n+  }\n+\n+  override def shutdown(): Unit = {\n+    super.shutdown()\n+    removeMetric(forwardingMetricName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MTQ1OQ==", "bodyText": "Sg.", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520881459", "createdAt": "2020-11-10T21:21:48Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/ForwardingManager.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.metrics.KafkaMetricsGroup\n+import kafka.network.RequestChannel\n+import org.apache.kafka.clients.ClientResponse\n+import org.apache.kafka.common.metrics.Metrics\n+import org.apache.kafka.common.protocol.Errors\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, EnvelopeRequest, EnvelopeResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+import scala.compat.java8.OptionConverters._\n+\n+class ForwardingManager(metadataCache: kafka.server.MetadataCache,\n+                        time: Time,\n+                        metrics: Metrics,\n+                        config: KafkaConfig,\n+                        threadNamePrefix: Option[String] = None) extends\n+  BrokerToControllerChannelManagerImpl(metadataCache, time, metrics,\n+    config, \"forwardingChannel\", threadNamePrefix) with KafkaMetricsGroup {\n+\n+  private val forwardingMetricName = \"NumRequestsForwardingToControllerPerSec\"\n+\n+  def forwardRequest(request: RequestChannel.Request,\n+                     responseCallback: AbstractResponse => Unit): Unit = {\n+    val principalSerde = request.context.principalSerde.asScala.getOrElse(\n+      throw new IllegalArgumentException(s\"Cannot deserialize principal from request $request \" +\n+        \"since there is no serde defined\")\n+    )\n+    val serializedPrincipal = principalSerde.serialize(request.context.principal)\n+    val forwardRequestBuffer = request.buffer.duplicate()\n+    forwardRequestBuffer.flip()\n+    val envelopeRequest = new EnvelopeRequest.Builder(\n+      forwardRequestBuffer,\n+      serializedPrincipal,\n+      request.context.clientAddress.getAddress\n+    )\n+\n+    def onClientResponse(clientResponse: ClientResponse): Unit = {\n+      val envelopeResponse = clientResponse.responseBody.asInstanceOf[EnvelopeResponse]\n+      val envelopeError = envelopeResponse.error()\n+\n+      val response = if (envelopeError != Errors.NONE) {\n+        // An envelope error indicates broker misconfiguration (e.g. the principal serde\n+        // might not be defined on the receiving broker). In this case, we do not return\n+        // the error directly to the client since it would not be expected. Instead we\n+        // return `UNKNOWN_SERVER_ERROR` so that the user knows that there is a problem\n+        // on the broker.\n+        debug(s\"Forwarded request $request failed with an error in envelope response $envelopeError\")\n+        request.body[AbstractRequest].getErrorResponse(Errors.UNKNOWN_SERVER_ERROR.exception())\n+      } else {\n+        AbstractResponse.deserializeBody(envelopeResponse.responseData, request.header)\n+      }\n+      responseCallback(response)\n+    }\n+\n+    sendRequest(envelopeRequest, onClientResponse)\n+  }\n+\n+  override def start(): Unit = {\n+    super.start()\n+    newGauge(forwardingMetricName, () => requestQueue.size())\n+  }\n+\n+  override def shutdown(): Unit = {\n+    super.shutdown()\n+    removeMetric(forwardingMetricName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NTk4MQ=="}, "originalCommit": {"oid": "25d895504f0c66d5fdfe50c56d89c7b05c55358b"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTYzNzkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoyMDowMVrOHwx3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjoyMDowMVrOHwx3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxMDczMg==", "bodyText": "Not 100% sure about our metrics conventions, but I think this should be forwarded", "url": "https://github.com/apache/kafka/pull/9580#discussion_r520910732", "createdAt": "2020-11-10T22:20:01Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -279,6 +279,7 @@ object RequestChannel extends Logging {\n           .append(\",principal:\").append(session.principal)\n           .append(\",listener:\").append(context.listenerName.value)\n           .append(\",clientInformation:\").append(context.clientInformation)\n+          .append(\",isForwarded:\").append(envelope.isDefined)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fa319d7a28d7bef687c9b5128f71ba9d013875"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}