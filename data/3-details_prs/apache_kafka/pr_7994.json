{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDcxOTg1", "number": 7994, "title": "KAFKA-9437: KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies", "bodyText": "This PR implements the KIP-559: https://cwiki.apache.org/confluence/display/KAFKA/KIP-559%3A+Make+the+Kafka+Protocol+Friendlier+with+L7+Proxies\n\nit adds the Protocol Type and the Protocol Name fields in JoinGroup and SyncGroup API;\nit validates that the fields are provided by the client when the new version of the API is used and ensure that they are consistent. it errors out otherwise;\nit validates that the fields are consistent in the client and errors out otherwise;\nit adds many tests related to the API changes but also extends the testing coverage of the requests/responses themselves.\nit standardises the naming in the coordinator. now, ProtocolType and ProtocolName are used across the board in the coordinator instead of having a mix of protocol type, protocol name, subprotocol, protocol, etc.\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-21T19:30:49Z", "url": "https://github.com/apache/kafka/pull/7994", "merged": true, "mergeCommit": {"oid": "96c4ce4803c39f669a7f539481be76c67979faf0"}, "closed": true, "closedAt": "2020-01-31T21:54:08Z", "author": {"login": "dajac"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9KGxAgH2gAyMzY1NDcxOTg1OmVmZmE2NWRhNWMxMGQ4MzdjNjA1MzI3MzBhOWQ5YjU3MjZiMjA4N2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcARkUIAFqTM1MTkxOTc1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/effa65da5c10d837c60532730a9d9b5726b2087e", "committedDate": "2020-01-23T13:10:45Z", "message": "KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/effa65da5c10d837c60532730a9d9b5726b2087e", "committedDate": "2020-01-23T13:10:45Z", "message": "KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDUyNjUw", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-347452650", "createdAt": "2020-01-23T16:50:52Z", "commit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1MDo1MlrOFhFZAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1MDo1MlrOFhFZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNTY0OA==", "bodyText": "Actually, it should be areProtocolTypeAndNameMissing.", "url": "https://github.com/apache/kafka/pull/7994#discussion_r370235648", "createdAt": "2020-01-23T16:50:52Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/SyncGroupRequest.java", "diffHunk": "@@ -81,6 +81,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return groupAssignments;\n     }\n \n+    public boolean areProtocolTypeAndNamePresent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDUyODY5", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-347452869", "createdAt": "2020-01-23T16:51:11Z", "commit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1MToxMVrOFhFZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1MToxMVrOFhFZuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNTgzNQ==", "bodyText": "Fix the typo.", "url": "https://github.com/apache/kafka/pull/7994#discussion_r370235835", "createdAt": "2020-01-23T16:51:11Z", "author": {"login": "dajac"}, "path": "clients/src/main/resources/common/message/SyncGroupRequest.json", "diffHunk": "@@ -22,7 +22,11 @@\n   // Starting from version 3, we add a new field called groupInstanceId to indicate member identity across restarts.\n   //\n   // Version 4 is the first flexible version.\n-  \"validVersions\": \"0-4\",\n+  //\n+  // Starting from version 5, the client sends the Protocol Type and the Protocol Name\n+  // to the broker (KIP-599). THe broker will reject the request if they are inconsistent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6988e54801d8894520bc0e6c123f7a19b08e7a62", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/6988e54801d8894520bc0e6c123f7a19b08e7a62", "committedDate": "2020-01-26T04:39:21Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NTg3NDEz", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-349587413", "createdAt": "2020-01-28T18:03:29Z", "commit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODowMzoyOVrOFivC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoyMzozNlrOFivqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY3NA==", "bodyText": "The version check is probably not necessary. Also, shouldn't we be checking for non-null entries?", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371966674", "createdAt": "2020-01-28T18:03:29Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/SyncGroupRequest.java", "diffHunk": "@@ -81,6 +81,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return groupAssignments;\n     }\n \n+    public boolean areProtocolTypeAndNamePresent() {\n+        return version() >= 5 && (data.protocolType() == null || data.protocolName() == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTk0MQ==", "bodyText": "nit: I'd suggest making each one of these \"stanzas\" a separate test case", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371975941", "createdAt": "2020-01-28T18:22:03Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -1143,17 +1154,120 @@ class GroupCoordinatorTest {\n       initialRebalanceResult.generation + 1,\n       Set(leaderInstanceId, followerInstanceId, newMemberInstanceId),\n       groupId,\n-      CompletingRebalance)\n+      CompletingRebalance,\n+      Some(protocolType))\n \n     checkJoinGroupResult(newFollowerResult,\n       Errors.NONE,\n       initialRebalanceResult.generation + 1,\n       Set.empty,\n       groupId,\n       CompletingRebalance,\n+      Some(protocolType),\n       expectedLeaderId = newLeaderResult.memberId)\n   }\n \n+  @Test\n+  def testProtocolTypeInJoinAndSyncRequest(): Unit = {\n+    // JoinGroup(leader): The Protocol Type is None when there is an error\n+    EasyMock.reset(replicaManager)\n+    var leaderResponseFuture = sendJoinGroup(groupId, \"fake-id\", protocolType,\n+      protocolSuperset, leaderInstanceId, DefaultSessionTimeout)\n+\n+    var leaderJoinGroupResult = await(leaderResponseFuture, 1)\n+    assertEquals(Errors.UNKNOWN_MEMBER_ID, leaderJoinGroupResult.error)\n+    assertEquals(None, leaderJoinGroupResult.protocolType)\n+\n+    // JoinGroup(leader): The Protocol Type is Defined when there is not error\n+    EasyMock.reset(replicaManager)\n+    leaderResponseFuture = sendJoinGroup(groupId, JoinGroupRequest.UNKNOWN_MEMBER_ID, protocolType,\n+      protocolSuperset, leaderInstanceId, DefaultSessionTimeout)\n+\n+    // JoinGroup(follower): The Protocol Type is Defined when there is not error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 414}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjI1Ng==", "bodyText": "Would it be worth adding explicit matchers for these?", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371976256", "createdAt": "2020-01-28T18:22:39Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -676,37 +691,274 @@ class KafkaApisTest {\n       anyInt,\n       anyInt,\n       anyString,\n-      EasyMock.eq(protocols.map(protocol => (protocol.name, protocol.metadata))),\n+      EasyMock.capture(capturedProtocols),\n       anyObject()\n     ))\n \n+    EasyMock.replay(groupCoordinator)\n+\n     createKafkaApis().handleJoinGroupRequest(\n       buildRequest(\n         new JoinGroupRequest.Builder(\n           new JoinGroupRequestData()\n             .setGroupId(\"test\")\n             .setMemberId(\"test\")\n             .setProtocolType(\"consumer\")\n-            .setProtocols(new JoinGroupRequestData.JoinGroupRequestProtocolCollection(protocols.iterator.asJava))\n-        )\n-      )._2)\n+            .setProtocols(new JoinGroupRequestData.JoinGroupRequestProtocolCollection(\n+              protocols.map { case (name, protocol) => new JoinGroupRequestProtocol()\n+                .setName(name).setMetadata(protocol)\n+              }.iterator.asJava))\n+        ).build()\n+      ))\n \n-    EasyMock.replay(groupCoordinator)\n+    EasyMock.verify(groupCoordinator)\n+\n+    val capturedProtocolsList = capturedProtocols.getValue\n+    assertEquals(protocols.size, capturedProtocolsList.size)\n+    protocols.zip(capturedProtocolsList).foreach { case ((expectedName, expectedBytes), (name, bytes)) =>\n+      assertEquals(expectedName, name)\n+      assertArrayEquals(expectedBytes, bytes)\n+    }\n+  }\n+\n+  @Test\n+  def testJoinGroupProtocolType(): Unit = {\n+    for (version <- ApiKeys.JOIN_GROUP.oldestVersion to ApiKeys.JOIN_GROUP.latestVersion) {\n+      testJoinGroupProtocolType(version.asInstanceOf[Short])\n+    }\n+  }\n+\n+  def testJoinGroupProtocolType(version: Short): Unit = {\n+    EasyMock.reset(groupCoordinator, clientRequestQuotaManager, requestChannel)\n+\n+    val capturedResponse = expectNoThrottling()\n+\n+    val groupId = \"group\"\n+    val memberId = \"member1\"\n+    val protocolType = \"consumer\"\n+    val protocols = List(\n+      new JoinGroupRequestProtocol().setName(\"first\").setMetadata(\"first\".getBytes()),\n+      new JoinGroupRequestProtocol().setName(\"second\").setMetadata(\"second\".getBytes())\n+    )\n+\n+    val capturedCallback = EasyMock.newCapture[JoinGroupCallback]()\n+\n+    EasyMock.expect(groupCoordinator.handleJoinGroup(\n+      anyString,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjczMw==", "bodyText": "Should we change Generation.protocol to protocolName as well?", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371976733", "createdAt": "2020-01-28T18:23:36Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -887,6 +900,14 @@ protected synchronized void requestRejoin() {\n         this.rejoinNeeded = true;\n     }\n \n+    private boolean isProtocolTypeInconsistent(String protocolType) {\n+        return protocolType != null && !protocolType.equals(protocolType());\n+    }\n+\n+    private boolean isProtocolNameInconsistent(String protocolName) {\n+        return protocolName != null && !protocolName.equals(generation().protocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525e84d283eac94fca1ef0ffa069d35fd63ed172", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/525e84d283eac94fca1ef0ffa069d35fd63ed172", "committedDate": "2020-01-28T21:24:06Z", "message": "Address Jason's reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa1008664116a7bc4c3084811982913e1e928482", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/aa1008664116a7bc4c3084811982913e1e928482", "committedDate": "2020-01-29T02:27:28Z", "message": "Address reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "832a6dbb2e0bd31de4045370e862ad9cd37db219", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/832a6dbb2e0bd31de4045370e862ad9cd37db219", "committedDate": "2020-01-29T02:52:17Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/f3457905bf31539a59db5888b912aa812880b1fa", "committedDate": "2020-01-29T13:16:00Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzM4MTg1", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-351338185", "createdAt": "2020-01-31T07:54:01Z", "commit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwNzo1NDowMVrOFkDoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoyMzoxOVrOFkEKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MjUwNQ==", "bodyText": "nit: I'd suggest breaking this into two separate cases so that the user doesn't have to guess what was inconsistent. Also, can we include the expected value?", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373352505", "createdAt": "2020-01-31T07:54:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -704,7 +712,12 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n         public void handle(SyncGroupResponse syncResponse,\n                            RequestFuture<ByteBuffer> future) {\n             Errors error = syncResponse.error();\n-            if (error == Errors.NONE) {\n+            if (isProtocolTypeInconsistent(syncResponse.data.protocolType())\n+                || isProtocolNameInconsistent(syncResponse.data.protocolName())) {\n+                log.debug(\"SyngGroup failed: Received inconsistent ProtocolType ({}) and/or ProtocolName ({})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1NDczOQ==", "bodyText": "I think the error code should take precedence over this validation. Perhaps we do this only when the error is NONE? Similarly for the JoinGroup response.", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373354739", "createdAt": "2020-01-31T08:01:43Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -704,7 +712,12 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n         public void handle(SyncGroupResponse syncResponse,\n                            RequestFuture<ByteBuffer> future) {\n             Errors error = syncResponse.error();\n-            if (error == Errors.NONE) {\n+            if (isProtocolTypeInconsistent(syncResponse.data.protocolType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1ODIxOQ==", "bodyText": "nit: we could do this in a single line with a dual assignment val (protocolType, protocolName) = ...", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373358219", "createdAt": "2020-01-31T08:13:52Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -917,8 +929,10 @@ class GroupCoordinator(val brokerId: Int,\n   }\n \n   private def propagateAssignment(group: GroupMetadata, error: Errors): Unit = {\n+    val protocolType = if (error == Errors.NONE) group.protocolType else None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2MDA0NQ==", "bodyText": "The inconsistency with SyncGroup is a little annoying, but I guess we have to keep it for compatibility. I was considering if it's worthwhile making the this field nullable going forward.", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373360045", "createdAt": "2020-01-31T08:19:30Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -1285,13 +1290,35 @@ case class GroupConfig(groupMinSessionTimeoutMs: Int,\n case class JoinGroupResult(members: List[JoinGroupResponseMember],\n                            memberId: String,\n                            generationId: Int,\n-                           subProtocol: String,\n+                           protocolType: Option[String],\n+                           protocolName: String,\n                            leaderId: String,\n                            error: Errors)\n \n-case class SyncGroupResult(memberAssignment: Array[Byte],\n+object JoinGroupResult {\n+  def apply(memberId: String, error: Errors): JoinGroupResult = {\n+    JoinGroupResult(\n+      members = List.empty,\n+      memberId = memberId,\n+      generationId = GroupCoordinator.NoGeneration,\n+      protocolType = None,\n+      protocolName = GroupCoordinator.NoProtocol,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2MTIwOQ==", "bodyText": "nit: \"an none\" seems ungrammatical", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373361209", "createdAt": "2020-01-31T08:23:19Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -1143,17 +1154,123 @@ class GroupCoordinatorTest {\n       initialRebalanceResult.generation + 1,\n       Set(leaderInstanceId, followerInstanceId, newMemberInstanceId),\n       groupId,\n-      CompletingRebalance)\n+      CompletingRebalance,\n+      Some(protocolType))\n \n     checkJoinGroupResult(newFollowerResult,\n       Errors.NONE,\n       initialRebalanceResult.generation + 1,\n       Set.empty,\n       groupId,\n       CompletingRebalance,\n+      Some(protocolType),\n       expectedLeaderId = newLeaderResult.memberId)\n   }\n \n+  @Test\n+  def testJoinGroupReturnsAnNoneProtocolTypeWhenAnErrorOccurs(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3457905bf31539a59db5888b912aa812880b1fa"}, "originalPosition": 399}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c160c96a266767182baaf3885770be9fbce16d9", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/8c160c96a266767182baaf3885770be9fbce16d9", "committedDate": "2020-01-31T14:51:00Z", "message": "Address Jason's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/6b7813176ef50d117a6f6107f75f989b23fdb7d7", "committedDate": "2020-01-31T16:37:33Z", "message": "Make ProtocolType nullable in the JoinGroupResponse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjMzNjY0", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-351633664", "createdAt": "2020-01-31T16:44:16Z", "commit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo0NDoxNlrOFkRQ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo0NDoxNlrOFkRQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NTkzNQ==", "bodyText": "With the nullable Protocol Name, the code generator generates unreachable condition. I have added an exception for the time being and will address this in a follow up PR if you don't mind. It does not impact the behaviour of this PR.", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373575935", "createdAt": "2020-01-31T16:44:16Z", "author": {"login": "dajac"}, "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -222,6 +222,12 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n         <Bug pattern=\"MS_MUTABLE_ARRAY\"/>\n     </Match>\n \n+    <Match>\n+        <!-- The code generator generates useless condition. Disable the check temporarily. -->\n+        <Class name=\"org.apache.kafka.common.message.JoinGroupResponseData\"/>\n+        <Bug pattern=\"UC_USELESS_CONDITION\"/>\n+    </Match>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzQwNTE0", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-351740514", "createdAt": "2020-01-31T19:53:47Z", "commit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTE5NzUw", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-351919750", "createdAt": "2020-02-02T05:34:01Z", "commit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNTozNDowMVrOFkgNHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNTozNDowMVrOFkgNHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMDcwMw==", "bodyText": "KIP-559 (and elsewhere)", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373820703", "createdAt": "2020-02-02T05:34:01Z", "author": {"login": "twmb"}, "path": "clients/src/main/resources/common/message/JoinGroupResponse.json", "diffHunk": "@@ -29,7 +29,9 @@\n   // Version 5 is bumped to apply group.instance.id to identify member across restarts.\n   //\n   // Version 6 is the first flexible version.\n-  \"validVersions\": \"0-6\",\n+  //\n+  // Starting from version 7, the broker sends back the Protocol Type to the client (KIP-599).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTE5NzU4", "url": "https://github.com/apache/kafka/pull/7994#pullrequestreview-351919758", "createdAt": "2020-02-02T05:34:07Z", "commit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNTozNDowOFrOFkgNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNTozNDowOFrOFkgNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMDcwOA==", "bodyText": "KIP-559", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373820708", "createdAt": "2020-02-02T05:34:08Z", "author": {"login": "twmb"}, "path": "clients/src/main/resources/common/message/SyncGroupRequest.json", "diffHunk": "@@ -22,7 +22,11 @@\n   // Starting from version 3, we add a new field called groupInstanceId to indicate member identity across restarts.\n   //\n   // Version 4 is the first flexible version.\n-  \"validVersions\": \"0-4\",\n+  //\n+  // Starting from version 5, the client sends the Protocol Type and the Protocol Name\n+  // to the broker (KIP-599). The broker will reject the request if they are inconsistent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2073, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}