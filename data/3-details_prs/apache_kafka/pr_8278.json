{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODM3ODEy", "number": 8278, "title": "KAFKA-8803: Remove timestamp check in completeTransitionTo", "bodyText": "In prepareAddPartitions the txnStartTimestamp could be updated as updateTimestamp, which is assumed to be always larger then the original startTimestamp. However, due to ntp time shift the timer may go backwards and hence the newStartTimestamp be smaller than the original one. Then later in completeTransitionTo the time check would fail with an IllegalStateException, and the txn would not transit to Ongoing.\nAn indirect result of this, is that this txn would NEVER be expired anymore because only Ongoing ones would be checked for expiration.\nWe should do the same as in #3286 to remove this check.\nAlso added test coverage for both KAFKA-5415 and KAFKA-8803.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-11T17:56:22Z", "url": "https://github.com/apache/kafka/pull/8278", "merged": true, "mergeCommit": {"oid": "6a88d32b9fe3cb320088dec72fce30992b89ef28"}, "closed": true, "closedAt": "2020-03-17T21:40:03Z", "author": {"login": "guozhangwang"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMq572AH2gAyMzg2ODM3ODEyOjFjZmQ3NTY2N2U3OWY2MzNlYTVjZTEzMzQwZjllYjAzZjU4ZDZiMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOl-N4AFqTM3NjI0MTc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1cfd75667e79f633ea5ce13340f9eb03f58d6b1c", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/1cfd75667e79f633ea5ce13340f9eb03f58d6b1c", "committedDate": "2020-03-11T17:52:28Z", "message": "one liner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01fabcc02e0e7fd2613cc18c73817d07a354af3f", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/01fabcc02e0e7fd2613cc18c73817d07a354af3f", "committedDate": "2020-03-13T19:33:37Z", "message": "add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NTYxNDE4", "url": "https://github.com/apache/kafka/pull/8278#pullrequestreview-374561418", "createdAt": "2020-03-13T19:34:18Z", "commit": {"oid": "01fabcc02e0e7fd2613cc18c73817d07a354af3f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTozNDoxOFrOF2QCog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTozNDozNFrOF2QC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDI0Mg==", "bodyText": "This test would fail without the one-liner in this PR.", "url": "https://github.com/apache/kafka/pull/8278#discussion_r392430242", "createdAt": "2020-03-13T19:34:18Z", "author": {"login": "guozhangwang"}, "path": "core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMetadataTest.scala", "diffHunk": "@@ -98,10 +95,198 @@ class TransactionMetadataTest {\n     txnMetadata.prepareIncrementProducerEpoch(30000, None, time.milliseconds())\n   }\n \n+  @Test\n+  def testTolerateUpdateTimeShiftDuringEpochBump(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareIncrementProducerEpoch(30000, Option(producerEpoch), time.milliseconds() - 1).right.get\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(producerEpoch + 1, txnMetadata.producerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateUpdateTimeResetDuringProducerIdRotation(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareProducerIdRotation(producerId + 1, 30000, time.milliseconds() - 1, recordLastEpoch = true)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId + 1, txnMetadata.producerId)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(0, txnMetadata.producerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringAddPartitions(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fabcc02e0e7fd2613cc18c73817d07a354af3f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDMyMQ==", "bodyText": "These tests are added to cover #3286", "url": "https://github.com/apache/kafka/pull/8278#discussion_r392430321", "createdAt": "2020-03-13T19:34:34Z", "author": {"login": "guozhangwang"}, "path": "core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMetadataTest.scala", "diffHunk": "@@ -98,10 +95,198 @@ class TransactionMetadataTest {\n     txnMetadata.prepareIncrementProducerEpoch(30000, None, time.milliseconds())\n   }\n \n+  @Test\n+  def testTolerateUpdateTimeShiftDuringEpochBump(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareIncrementProducerEpoch(30000, Option(producerEpoch), time.milliseconds() - 1).right.get\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(producerEpoch + 1, txnMetadata.producerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateUpdateTimeResetDuringProducerIdRotation(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareProducerIdRotation(producerId + 1, 30000, time.milliseconds() - 1, recordLastEpoch = true)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId + 1, txnMetadata.producerId)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(0, txnMetadata.producerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringAddPartitions(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    var transitMetadata = txnMetadata.prepareAddPartitions(Set[TopicPartition](new TopicPartition(\"topic1\", 0)), time.milliseconds() - 1)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(Set[TopicPartition](new TopicPartition(\"topic1\", 0)), txnMetadata.topicPartitions)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(RecordBatch.NO_PRODUCER_EPOCH, txnMetadata.lastProducerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.producerEpoch)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+\n+    // add another partition, check that this time the start timestamp would not change\n+    transitMetadata = txnMetadata.prepareAddPartitions(Set[TopicPartition](new TopicPartition(\"topic2\", 0)), time.milliseconds() - 2)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(Set[TopicPartition](new TopicPartition(\"topic1\", 0), new TopicPartition(\"topic2\", 0)), txnMetadata.topicPartitions)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(RecordBatch.NO_PRODUCER_EPOCH, txnMetadata.lastProducerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.producerEpoch)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 2, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringPrepareCommit(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fabcc02e0e7fd2613cc18c73817d07a354af3f"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7151567c195c7c208067eb25c24c27f964325c0e", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/7151567c195c7c208067eb25c24c27f964325c0e", "committedDate": "2020-03-16T21:46:29Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8803-remove-time-check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba4ba2158a8f2c65a386e6dd9b8b0ccbe1a13e0", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/6ba4ba2158a8f2c65a386e6dd9b8b0ccbe1a13e0", "committedDate": "2020-03-16T21:56:31Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjQxNzgy", "url": "https://github.com/apache/kafka/pull/8278#pullrequestreview-376241782", "createdAt": "2020-03-17T17:15:28Z", "commit": {"oid": "6ba4ba2158a8f2c65a386e6dd9b8b0ccbe1a13e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}