{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzExMDU5", "number": 8783, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowODoxMVrOECFr9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowODoxMVrOECFr9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjI1NzgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogCleaner.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowODoxMVrOGeVJOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMToxMTozOFrOGgL4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1Njg5MQ==", "bodyText": "a workaround for scala 2.12", "url": "https://github.com/apache/kafka/pull/8783#discussion_r434456891", "createdAt": "2020-06-03T10:08:11Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogCleaner.scala", "diffHunk": "@@ -112,9 +112,19 @@ class LogCleaner(initialConfig: CleanerConfig,\n \n   private[log] val cleaners = mutable.ArrayBuffer[CleanerThread]()\n \n+  /**\n+   * scala 2.12 does not support maxOption so we handle the empty manually.\n+   * @param f to compute the result\n+   * @return the computed value or 0 if there is no cleaner\n+   */\n+  private def computeCleanerThread(f: Seq[CleanerThread] => Int): Int =", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwMjMwNA==", "bodyText": "Maybe we could turn this into a foldLeft and avoid the map. For example:\n  private def maxOverCleanerThreads(f: CleanerThread => Int): Int = {\n    cleaners.foldLeft(0, (acc: Int, thread: CleanerThread) => math.max(acc, f(thread)))\n  }", "url": "https://github.com/apache/kafka/pull/8783#discussion_r436402304", "createdAt": "2020-06-07T21:11:38Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/LogCleaner.scala", "diffHunk": "@@ -112,9 +112,19 @@ class LogCleaner(initialConfig: CleanerConfig,\n \n   private[log] val cleaners = mutable.ArrayBuffer[CleanerThread]()\n \n+  /**\n+   * scala 2.12 does not support maxOption so we handle the empty manually.\n+   * @param f to compute the result\n+   * @return the computed value or 0 if there is no cleaner\n+   */\n+  private def computeCleanerThread(f: Seq[CleanerThread] => Int): Int =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1Njg5MQ=="}, "originalCommit": null, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2498, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}