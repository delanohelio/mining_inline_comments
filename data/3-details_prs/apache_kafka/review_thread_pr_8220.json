{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzMxODEz", "number": 8220, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDo0N1rODl-fGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMDo0NFrODl-iIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ3Njc0OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/MockConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDo0N1rOFzK4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDo0N1rOFzK4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5OTg5OQ==", "bodyText": "Nice.", "url": "https://github.com/apache/kafka/pull/8220#discussion_r389199899", "createdAt": "2020-03-07T00:04:47Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/MockConsumer.java", "diffHunk": "@@ -356,21 +358,10 @@ public synchronized void seekToEnd(Collection<TopicPartition> partitions) {\n         subscriptions.requestOffsetReset(partitions, OffsetResetStrategy.LATEST);\n     }\n \n-    // needed for cases where you make a second call to endOffsets\n-    public synchronized void addEndOffsets(final Map<TopicPartition, Long> newOffsets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c44254016f6c41f3429ab6a66dd7c203e0d482"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4NDQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMDo0NFrOFzK83w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMTowMTo1MVrOFzLfNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTExOQ==", "bodyText": "Hmm :) it reminds me that the mock consumer's behavior is not exactly the same as the actual consumer (the later would filter, the former would throw), but perhaps this worth a different PR to cleanup. @abbccdda could you file a JIRA for it?", "url": "https://github.com/apache/kafka/pull/8220#discussion_r389201119", "createdAt": "2020-03-07T00:10:44Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "diffHunk": "@@ -807,6 +808,66 @@ public void shouldShutdownTaskManagerOnClose() {\n         EasyMock.verify(taskManager);\n     }\n \n+    @Test\n+    public void shouldNotReturnDataAfterTaskMigrated() {\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+\n+        internalTopologyBuilder = EasyMock.createNiceMock(InternalTopologyBuilder.class);\n+\n+        EasyMock.expect(internalTopologyBuilder.sourceTopicCollection()).andReturn(Collections.singletonList(topic1)).times(2);\n+\n+        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n+\n+        consumer.subscribe(Collections.singletonList(topic1), new MockRebalanceListener());\n+        consumer.rebalance(Collections.singletonList(t1p1));\n+        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n+        consumer.seekToEnd(Collections.singletonList(t1p1));\n+\n+        final ChangelogReader changelogReader = new MockChangelogReader() {\n+\n+            @Override\n+            public void restore() {\n+                consumer.addRecord(new ConsumerRecord<>(topic1, 1, 11, new byte[0], new byte[0]));\n+                consumer.addRecord(new ConsumerRecord<>(topic1, 1, 12, new byte[1], new byte[0]));\n+\n+                throw new TaskMigratedException(\n+                    \"Changelog restore found task migrated\", new RuntimeException(\"restore task migrated\"));\n+            }\n+        };\n+\n+        taskManager.handleLostAll();\n+\n+        EasyMock.replay(taskManager, internalTopologyBuilder);\n+\n+        final StreamsMetricsImpl streamsMetrics =\n+            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n+\n+        final StreamThread thread = new StreamThread(\n+            mockTime,\n+            config,\n+            null,\n+            consumer,\n+            consumer,\n+            changelogReader,\n+            null,\n+            taskManager,\n+            streamsMetrics,\n+            internalTopologyBuilder,\n+            CLIENT_ID,\n+            new LogContext(\"\"),\n+            new AtomicInteger()\n+        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n+\n+        final IllegalStateException thrown = assertThrows(\n+            IllegalStateException.class, thread::run);\n+\n+        EasyMock.verify(taskManager);\n+\n+        // The Mock consumer shall throw as the assignment has been wiped out, but records are assigned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c44254016f6c41f3429ab6a66dd7c203e0d482"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwOTkxMQ==", "bodyText": "Sounds good to me! https://issues.apache.org/jira/browse/KAFKA-9679", "url": "https://github.com/apache/kafka/pull/8220#discussion_r389209911", "createdAt": "2020-03-07T01:01:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java", "diffHunk": "@@ -807,6 +808,66 @@ public void shouldShutdownTaskManagerOnClose() {\n         EasyMock.verify(taskManager);\n     }\n \n+    @Test\n+    public void shouldNotReturnDataAfterTaskMigrated() {\n+        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n+\n+        internalTopologyBuilder = EasyMock.createNiceMock(InternalTopologyBuilder.class);\n+\n+        EasyMock.expect(internalTopologyBuilder.sourceTopicCollection()).andReturn(Collections.singletonList(topic1)).times(2);\n+\n+        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n+\n+        consumer.subscribe(Collections.singletonList(topic1), new MockRebalanceListener());\n+        consumer.rebalance(Collections.singletonList(t1p1));\n+        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n+        consumer.seekToEnd(Collections.singletonList(t1p1));\n+\n+        final ChangelogReader changelogReader = new MockChangelogReader() {\n+\n+            @Override\n+            public void restore() {\n+                consumer.addRecord(new ConsumerRecord<>(topic1, 1, 11, new byte[0], new byte[0]));\n+                consumer.addRecord(new ConsumerRecord<>(topic1, 1, 12, new byte[1], new byte[0]));\n+\n+                throw new TaskMigratedException(\n+                    \"Changelog restore found task migrated\", new RuntimeException(\"restore task migrated\"));\n+            }\n+        };\n+\n+        taskManager.handleLostAll();\n+\n+        EasyMock.replay(taskManager, internalTopologyBuilder);\n+\n+        final StreamsMetricsImpl streamsMetrics =\n+            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n+\n+        final StreamThread thread = new StreamThread(\n+            mockTime,\n+            config,\n+            null,\n+            consumer,\n+            consumer,\n+            changelogReader,\n+            null,\n+            taskManager,\n+            streamsMetrics,\n+            internalTopologyBuilder,\n+            CLIENT_ID,\n+            new LogContext(\"\"),\n+            new AtomicInteger()\n+        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n+\n+        final IllegalStateException thrown = assertThrows(\n+            IllegalStateException.class, thread::run);\n+\n+        EasyMock.verify(taskManager);\n+\n+        // The Mock consumer shall throw as the assignment has been wiped out, but records are assigned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTExOQ=="}, "originalCommit": {"oid": "d4c44254016f6c41f3429ab6a66dd7c203e0d482"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}