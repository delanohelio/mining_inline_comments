{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDA1NTkz", "number": 9347, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxODozMFrOEoQx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoxNTo1MVrOEp9k1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUzNDMyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/KafkaBasedLogTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxODozMFrOHZP_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjoyOToyNVrOHZR_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzODM4NA==", "bodyText": "nit: typo in Wati", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496238384", "createdAt": "2020-09-28T21:18:30Z", "author": {"login": "splett2"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/KafkaBasedLogTest.java", "diffHunk": "@@ -536,6 +536,22 @@ public void onCompletion(RecordMetadata metadata, Exception exception) {\n         PowerMock.verifyAll();\n     }\n \n+    /**\n+     * Check if the waitForTopicCreate method doesn't throw if time moves backward, and works\n+     * correctly if it increases.\n+     */\n+    @Test\n+    public void testWatiForTopicCreate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MTE5NA==", "bodyText": "Fixed (actually removed the test)", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496271194", "createdAt": "2020-09-28T22:29:25Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/KafkaBasedLogTest.java", "diffHunk": "@@ -536,6 +536,22 @@ public void onCompletion(RecordMetadata metadata, Exception exception) {\n         PowerMock.verifyAll();\n     }\n \n+    /**\n+     * Check if the waitForTopicCreate method doesn't throw if time moves backward, and works\n+     * correctly if it increases.\n+     */\n+    @Test\n+    public void testWatiForTopicCreate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzODM4NA=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjU0NzgxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyMjo1MFrOHZQHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjozMjoxOVrOHZSDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MDQ1Mw==", "bodyText": "Why don't we use a monotonic timer?", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496240453", "createdAt": "2020-09-28T21:22:50Z", "author": {"login": "ijuma"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -163,6 +163,18 @@ public void start() {\n         log.info(\"Started KafkaBasedLog for topic \" + topic);\n     }\n \n+    /**\n+     * Sleep for some time so that topic used for this KafkaBasedLog gets created. Note that\n+     * {@code System.currentTimeMillis()} is not monotonic, so check for that condition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2Mzk2NQ==", "bodyText": "Wanted to make least amount of change. I can update the code to use monotonic 'nanoTime` instead (nanoseconds in Time interface). We will also need to convert that to milli before passing to sleep (unless we want to add nano to those interfaces too, like Utils.sleep)", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496263965", "createdAt": "2020-09-28T22:09:19Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -163,6 +163,18 @@ public void start() {\n         log.info(\"Started KafkaBasedLog for topic \" + topic);\n     }\n \n+    /**\n+     * Sleep for some time so that topic used for this KafkaBasedLog gets created. Note that\n+     * {@code System.currentTimeMillis()} is not monotonic, so check for that condition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MDQ1Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2NzE3NQ==", "bodyText": "In fact I don't like this loop altogether. Going to rewrite it so that it doesn't use these constructs.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496267175", "createdAt": "2020-09-28T22:18:08Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -163,6 +163,18 @@ public void start() {\n         log.info(\"Started KafkaBasedLog for topic \" + topic);\n     }\n \n+    /**\n+     * Sleep for some time so that topic used for this KafkaBasedLog gets created. Note that\n+     * {@code System.currentTimeMillis()} is not monotonic, so check for that condition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MDQ1Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MDU4MQ==", "bodyText": "You can use hiResClockMs so that you get the value in ms.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496270581", "createdAt": "2020-09-28T22:27:35Z", "author": {"login": "ijuma"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -163,6 +163,18 @@ public void start() {\n         log.info(\"Started KafkaBasedLog for topic \" + topic);\n     }\n \n+    /**\n+     * Sleep for some time so that topic used for this KafkaBasedLog gets created. Note that\n+     * {@code System.currentTimeMillis()} is not monotonic, so check for that condition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MDQ1Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MjI0Mw==", "bodyText": "In fact we don't need value from clock to sleep, only need it to find elapsed time and timeout. I have decoupled these two, and also fixed a minor issue where it was sleeping first time even if topic was present.\nPlease take a look.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496272243", "createdAt": "2020-09-28T22:32:19Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -163,6 +163,18 @@ public void start() {\n         log.info(\"Started KafkaBasedLog for topic \" + topic);\n     }\n \n+    /**\n+     * Sleep for some time so that topic used for this KafkaBasedLog gets created. Note that\n+     * {@code System.currentTimeMillis()} is not monotonic, so check for that condition.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MDQ1Mw=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjc0MjQxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjoyODoyNFrOHZR-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MTo1N1rOHZSPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MDg2MA==", "bodyText": "Time has a sleep method too btw.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496270860", "createdAt": "2020-09-28T22:28:24Z", "author": {"login": "ijuma"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +134,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            Utils.sleep(sleepMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NTM4MQ==", "bodyText": "Updated.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496275381", "createdAt": "2020-09-28T22:41:57Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +134,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            Utils.sleep(sleepMs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MDg2MA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDc0NTkzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzoxMjowN1rOHZ4qbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMzo1NzoxNlrOHaMdmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNDgxMg==", "bodyText": "Why not using partitionsFor(String topic, Duration timeout)  (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java#L1944) to replace while loop?", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496904812", "createdAt": "2020-09-29T17:12:07Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            time.sleep(sleepMs);\n+            sleepMs = Math.min(2 * sleepMs, maxSleepMs);\n             partitionInfos = consumer.partitionsFor(topic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4MzcyMQ==", "bodyText": "I think the semantics needed here is different. The timeout in partitionsFor is the max amount of time the api can block waiting for response before it fails with TimeoutException. However, the api can return within timeout with empty results as newly created topics data has not been propagated yet. We then have to retry again until partitionsFor returns the partition data (upto a max time).", "url": "https://github.com/apache/kafka/pull/9347#discussion_r496983721", "createdAt": "2020-09-29T19:21:12Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            time.sleep(sleepMs);\n+            sleepMs = Math.min(2 * sleepMs, maxSleepMs);\n             partitionInfos = consumer.partitionsFor(topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNDgxMg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNzM5NQ==", "bodyText": "It seems to me the behavior of timeout is not consistent in consumer methods. The timeout used by other methods (for example:  position, offsetsForTimes, beginningOffsets and endOffsets) is to await the result of specify partitions. It means consumer will send a request again if the timer is not expired and the specify partition has no metadata (i.e topics data has not been propagated yet). Maybe partitionsFor should be fixed for consistent behavior.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r497017395", "createdAt": "2020-09-29T20:16:06Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            time.sleep(sleepMs);\n+            sleepMs = Math.min(2 * sleepMs, maxSleepMs);\n             partitionInfos = consumer.partitionsFor(topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNDgxMg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzNDQzNQ==", "bodyText": "Not sure about this, no result for \"partitionInfos\" is a valid result. There is no point in automatic retrying. While for other apis that retry automatically, they do it if they get an invalid result back. If null was a valid result for them, they shouldn't retry either.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r497034435", "createdAt": "2020-09-29T20:40:50Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            time.sleep(sleepMs);\n+            sleepMs = Math.min(2 * sleepMs, maxSleepMs);\n             partitionInfos = consumer.partitionsFor(topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNDgxMg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyOTIwOA==", "bodyText": "@soondenana Thanks for responses. This patch LGTM. What I want to discuss is unrelated to this patch.\n\nthey do it if they get an invalid result back. If null was a valid result for them, they shouldn't retry either.\n\nIf the topic is not exist (or not been propagated yet), partitionFor can return null. By contrast, beginningOffsets (and other methods) throws TimeoutException. In order to make consistent behavior, beginningOffsets (and other methods) should let the topic (or partition) be absent in the returned Map. WDYT?", "url": "https://github.com/apache/kafka/pull/9347#discussion_r497229208", "createdAt": "2020-09-30T03:57:16Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;\n+        long sleepMs = 10;\n+        while (partitionInfos == null && time.nanoseconds() - started < CREATE_TOPIC_TIMEOUT_NS) {\n+            time.sleep(sleepMs);\n+            sleepMs = Math.min(2 * sleepMs, maxSleepMs);\n             partitionInfos = consumer.partitionsFor(topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNDgxMg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDA1MTM0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1ODo0OVrOHb5-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoyMTo1MlrOHb6kFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMzU5OQ==", "bodyText": "We are often using this pattern in other places for time-related constants:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long CREATE_TOPIC_TIMEOUT_NS = TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n          \n          \n            \n                private static final long CREATE_TOPIC_TIMEOUT_NS = TimeUnit.SECONDS.toNanos(30);", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499023599", "createdAt": "2020-10-02T19:58:49Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -70,7 +70,7 @@\n  */\n public class KafkaBasedLog<K, V> {\n     private static final Logger log = LoggerFactory.getLogger(KafkaBasedLog.class);\n-    private static final long CREATE_TOPIC_TIMEOUT_MS = 30000;\n+    private static final long CREATE_TOPIC_TIMEOUT_NS = TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMzExMQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499033111", "createdAt": "2020-10-02T20:21:52Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -70,7 +70,7 @@\n  */\n public class KafkaBasedLog<K, V> {\n     private static final Logger log = LoggerFactory.getLogger(KafkaBasedLog.class);\n-    private static final long CREATE_TOPIC_TIMEOUT_MS = 30000;\n+    private static final long CREATE_TOPIC_TIMEOUT_NS = TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMzU5OQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDA1NDk1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDowMDoxMlrOHb6BNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoyMjowOVrOHb6kjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNDE4Mg==", "bodyText": "Let's define a constant above:\nprivate static final long MAX_SLEEP_MS = TimeUnit.SECONDS.toMillis(1);\n\nand then we can replace maxSleepMs with MAX_SLEEP_MS.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499024182", "createdAt": "2020-10-02T20:00:12Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMzIzMA==", "bodyText": "Updated.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499033230", "createdAt": "2020-10-02T20:22:09Z", "author": {"login": "soondenana"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/util/KafkaBasedLog.java", "diffHunk": "@@ -133,11 +133,14 @@ public void start() {\n         List<TopicPartition> partitions = new ArrayList<>();\n \n         // We expect that the topics will have been created either manually by the user or automatically by the herder\n-        List<PartitionInfo> partitionInfos = null;\n-        long started = time.milliseconds();\n-        while (partitionInfos == null && time.milliseconds() - started < CREATE_TOPIC_TIMEOUT_MS) {\n+        List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n+        long started = time.nanoseconds();\n+        long maxSleepMs = 1_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNDE4Mg=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDM1OTI3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjoxNTo1MVrOHb87_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjo1MTozNlrOHb9cuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTk5OA==", "bodyText": "Won't this hide bugs?", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499071998", "createdAt": "2020-10-02T22:15:51Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -331,6 +331,11 @@ public static ByteBuffer wrapNullable(byte[] array) {\n      */\n     public static void sleep(long ms) {\n         try {\n+            if (ms <= 0) {\n+                // No need to sleep\n+                log.debug(\"Skipping sleep as asked to sleep for {} msec\", ms);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3NjMxOA==", "bodyText": "Yes. I have seen things done both ways i.e. behave reasonably in face of weird args vs throw exception. Time.sleep combines both approaches, throws for values < 0 but skips if sleep = 0 and goes to sleep for values > 0.\nIts a judgement call, we can delegate to JDK and remove this check.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499076318", "createdAt": "2020-10-02T22:33:22Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -331,6 +331,11 @@ public static ByteBuffer wrapNullable(byte[] array) {\n      */\n     public static void sleep(long ms) {\n         try {\n+            if (ms <= 0) {\n+                // No need to sleep\n+                log.debug(\"Skipping sleep as asked to sleep for {} msec\", ms);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTk5OA=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3OTYwNA==", "bodyText": "Overflow is not uncommon when using things like Long.MaxValue for timeouts, so assuming negative is not a bug seems dangerous.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499079604", "createdAt": "2020-10-02T22:48:03Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -331,6 +331,11 @@ public static ByteBuffer wrapNullable(byte[] array) {\n      */\n     public static void sleep(long ms) {\n         try {\n+            if (ms <= 0) {\n+                // No need to sleep\n+                log.debug(\"Skipping sleep as asked to sleep for {} msec\", ms);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTk5OA=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4MDM3Ng==", "bodyText": "Ok, I see the point. Overflow can be caused by time arithmetic too. Reverted the change.", "url": "https://github.com/apache/kafka/pull/9347#discussion_r499080376", "createdAt": "2020-10-02T22:51:36Z", "author": {"login": "soondenana"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -331,6 +331,11 @@ public static ByteBuffer wrapNullable(byte[] array) {\n      */\n     public static void sleep(long ms) {\n         try {\n+            if (ms <= 0) {\n+                // No need to sleep\n+                log.debug(\"Skipping sleep as asked to sleep for {} msec\", ms);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA3MTk5OA=="}, "originalCommit": null, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1874, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}