{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODgyOTAz", "number": 8568, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo1OToyMlrOD3BLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNDoyMlrOD3Yi6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE3NTU4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo1OToyMlrOGNCmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo1OToyMlrOGNCmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzMzNQ==", "bodyText": "This is fix 2).", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416327335", "createdAt": "2020-04-28T04:59:22Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -210,16 +210,21 @@ public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final\n                                                             final Properties producerConfig,\n                                                             final Headers headers,\n                                                             final Time time,\n-                                                            final boolean enableTransactions)\n-        throws ExecutionException, InterruptedException {\n-        for (final KeyValue<K, V> record : records) {\n-            produceKeyValuesSynchronouslyWithTimestamp(topic,\n-                Collections.singleton(record),\n-                producerConfig,\n-                headers,\n-                time.milliseconds(),\n-                enableTransactions);\n-            time.sleep(1L);\n+                                                            final boolean enableTransactions) {\n+\n+        try (final Producer<K, V> producer = new KafkaProducer<>(producerConfig)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE3NTg2OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNDo1OTozNlrOGNCm2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNDozN1rOGNnNlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzM4Ng==", "bodyText": "Those functions are not used anywhere, ditto below.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416327386", "createdAt": "2020-04-28T04:59:36Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -599,13 +595,6 @@ public static void waitForCompletion(final KafkaStreams streams,\n         return waitUntilFinalKeyValueRecordsReceived(consumerConfig, topic, expectedRecords, waitTime, false);\n     }\n \n-    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilFinalKeyValueTimestampRecordsReceived(final Properties consumerConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzEyNg==", "bodyText": "thanks for the cleanup", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416927126", "createdAt": "2020-04-28T21:14:37Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -599,13 +595,6 @@ public static void waitForCompletion(final KafkaStreams streams,\n         return waitUntilFinalKeyValueRecordsReceived(consumerConfig, topic, expectedRecords, waitTime, false);\n     }\n \n-    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilFinalKeyValueTimestampRecordsReceived(final Properties consumerConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzM4Ng=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE3Nzg3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMDoyOVrOGNCn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMDoyOVrOGNCn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzY3MQ==", "bodyText": "This is a minor fix, that we should retry this condition.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416327671", "createdAt": "2020-04-28T05:00:29Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -163,8 +159,10 @@ public void shouldApplyUpdatesToStandbyStore() throws Exception {\n         // Assert that all messages in the second batch were processed in a timely manner\n         assertThat(semaphore.tryAcquire(batch2NumMessages, 60, TimeUnit.SECONDS), is(equalTo(true)));\n \n-        // Assert that the current value in store reflects all messages being processed\n-        assertThat(newActiveStore.get(key), is(equalTo(totalNumMessages - 1)));\n+        TestUtils.retryOnExceptionWithTimeout(100, 60 * 1000, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDE3OTM4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMTowNFrOGNCoyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNTowMTowNFrOGNCoyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyNzg4MQ==", "bodyText": "This is a fix to the test itself: with caching the records are delayed sending to the sink topics.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416327881", "createdAt": "2020-04-28T05:01:04Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -227,10 +225,11 @@ private Properties streamsConfiguration() {\n         config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n         config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n         config.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n+        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n+        config.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzI2MTIzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1MjoyNVrOGNgB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1MjoyNVrOGNgB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwOTQ2OQ==", "bodyText": "OptimizedKTableIntegrationTest.shouldApplyUpdatesToStandbyStore still failed on one of the builds at this line :/\nBut, at least we got farther into the test before it failed so I'd say this is still an improvement \ud83d\ude04", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416809469", "createdAt": "2020-04-28T17:52:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java", "diffHunk": "@@ -163,8 +159,10 @@ public void shouldApplyUpdatesToStandbyStore() throws Exception {\n         // Assert that all messages in the second batch were processed in a timely manner\n         assertThat(semaphore.tryAcquire(batch2NumMessages, 60, TimeUnit.SECONDS), is(equalTo(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzI5MDU3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzo1OTo0MVrOGNgUUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDo0NTo0NlrOGNmNhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNDE2Mw==", "bodyText": "Why do we have to check for null now?", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416814163", "createdAt": "2020-04-28T17:59:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java", "diffHunk": "@@ -158,8 +158,9 @@ public void shouldKStreamGlobalKTableLeftJoin() throws Exception {\n \n         produceGlobalTableValues();\n \n-        final ReadOnlyKeyValueStore<Long, String> replicatedStore =\n-            kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.keyValueStore()));\n+        final ReadOnlyKeyValueStore<Long, String> replicatedStore = IntegrationTestUtils\n+            .getStore(globalStore, kafkaStreams, QueryableStoreTypes.keyValueStore());\n+        assertNotNull(replicatedStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxMDcyNQ==", "bodyText": "Since previously we would just throw the exception with the un-wrapped call, here asserting it is not null is equal to make sure that the store is indeed returned.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416910725", "createdAt": "2020-04-28T20:45:46Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java", "diffHunk": "@@ -158,8 +158,9 @@ public void shouldKStreamGlobalKTableLeftJoin() throws Exception {\n \n         produceGlobalTableValues();\n \n-        final ReadOnlyKeyValueStore<Long, String> replicatedStore =\n-            kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.keyValueStore()));\n+        final ReadOnlyKeyValueStore<Long, String> replicatedStore = IntegrationTestUtils\n+            .getStore(globalStore, kafkaStreams, QueryableStoreTypes.keyValueStore());\n+        assertNotNull(replicatedStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNDE2Mw=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk3MDcyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTowNTozMFrOGNm5cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo0NTowNVrOGNoLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMTk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .getStore(300000L, storeName, streams, QueryableStoreTypes.keyValueStore());\n          \n          \n            \n                        .getStore(300_000L, storeName, streams, QueryableStoreTypes.keyValueStore());", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416921971", "createdAt": "2020-04-28T21:05:30Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -810,21 +808,9 @@ private void writeInputData(final List<KeyValue<Long, Long>> records) throws Exc\n     }\n \n     private void verifyStateStore(final KafkaStreams streams,\n-                                  final Set<KeyValue<Long, Long>> expectedStoreContent) {\n-        ReadOnlyKeyValueStore<Long, Long> store = null;\n-\n-        final long maxWaitingTime = System.currentTimeMillis() + 300000L;\n-        while (System.currentTimeMillis() < maxWaitingTime) {\n-            try {\n-                store = streams.store(StoreQueryParameters.fromNameAndType(storeName, QueryableStoreTypes.keyValueStore()));\n-                break;\n-            } catch (final InvalidStateStoreException okJustRetry) {\n-                try {\n-                    Thread.sleep(5000L);\n-                } catch (final Exception ignore) { }\n-            }\n-        }\n-\n+                                  final Set<KeyValue<Long, Long>> expectedStoreContent) throws InterruptedException {\n+        final ReadOnlyKeyValueStore<Long, Long> store = IntegrationTestUtils\n+            .getStore(300000L, storeName, streams, QueryableStoreTypes.keyValueStore());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0Mjk5Mg==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416942992", "createdAt": "2020-04-28T21:45:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -810,21 +808,9 @@ private void writeInputData(final List<KeyValue<Long, Long>> records) throws Exc\n     }\n \n     private void verifyStateStore(final KafkaStreams streams,\n-                                  final Set<KeyValue<Long, Long>> expectedStoreContent) {\n-        ReadOnlyKeyValueStore<Long, Long> store = null;\n-\n-        final long maxWaitingTime = System.currentTimeMillis() + 300000L;\n-        while (System.currentTimeMillis() < maxWaitingTime) {\n-            try {\n-                store = streams.store(StoreQueryParameters.fromNameAndType(storeName, QueryableStoreTypes.keyValueStore()));\n-                break;\n-            } catch (final InvalidStateStoreException okJustRetry) {\n-                try {\n-                    Thread.sleep(5000L);\n-                } catch (final Exception ignore) { }\n-            }\n-        }\n-\n+                                  final Set<KeyValue<Long, Long>> expectedStoreContent) throws InterruptedException {\n+        final ReadOnlyKeyValueStore<Long, Long> store = IntegrationTestUtils\n+            .getStore(300000L, storeName, streams, QueryableStoreTypes.keyValueStore());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMTk3MQ=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzk5NjAyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMjoxOFrOGNnIdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo0Njo1OFrOGNoPIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTgxMw==", "bodyText": "not a huge deal, but technically, these should have brackets.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416925813", "createdAt": "2020-04-28T21:12:18Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java", "diffHunk": "@@ -337,8 +336,11 @@ public void shouldProxyKeyValueStoreToTimestampedKeyValueStoreUsingPapi() throws\n         TestUtils.waitForCondition(\n             () -> {\n                 try {\n-                    final ReadOnlyKeyValueStore<K, V> store =\n-                        kafkaStreams.store(StoreQueryParameters.fromNameAndType(STORE_NAME, QueryableStoreTypes.keyValueStore()));\n+                    final ReadOnlyKeyValueStore<K, V> store = IntegrationTestUtils.getStore(STORE_NAME, kafkaStreams, QueryableStoreTypes.keyValueStore());\n+\n+                    if (store == null)\n+                        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MzkwNw==", "bodyText": "ack.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416943907", "createdAt": "2020-04-28T21:46:58Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StoreUpgradeIntegrationTest.java", "diffHunk": "@@ -337,8 +336,11 @@ public void shouldProxyKeyValueStoreToTimestampedKeyValueStoreUsingPapi() throws\n         TestUtils.waitForCondition(\n             () -> {\n                 try {\n-                    final ReadOnlyKeyValueStore<K, V> store =\n-                        kafkaStreams.store(StoreQueryParameters.fromNameAndType(STORE_NAME, QueryableStoreTypes.keyValueStore()));\n+                    final ReadOnlyKeyValueStore<K, V> store = IntegrationTestUtils.getStore(STORE_NAME, kafkaStreams, QueryableStoreTypes.keyValueStore());\n+\n+                    if (store == null)\n+                        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTgxMw=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAwNDI3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxNDoyMlrOGNnNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1NTo0OFrOGNoeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjk4NQ==", "bodyText": "I guess the flush at the end makes it synchronous anyway?", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416926985", "createdAt": "2020-04-28T21:14:22Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -269,24 +271,20 @@ public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final\n      * @param <K>                 Key type of the data records\n      * @param <V>                 Value type of the data records\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n     public static <K, V> void produceKeyValuesSynchronouslyWithTimestamp(final String topic,\n                                                                          final Collection<KeyValue<K, V>> records,\n                                                                          final Properties producerConfig,\n                                                                          final Headers headers,\n                                                                          final Long timestamp,\n-                                                                         final boolean enableTransactions)\n-            throws ExecutionException, InterruptedException {\n+                                                                         final boolean enableTransactions) {\n \n         try (final Producer<K, V> producer = new KafkaProducer<>(producerConfig)) {\n             if (enableTransactions) {\n                 producer.initTransactions();\n                 producer.beginTransaction();\n             }\n             for (final KeyValue<K, V> record : records) {\n-                final Future<RecordMetadata> f = producer.send(\n-                    new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));\n-                f.get();\n+                producer.send(new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NDM5Mg==", "bodyText": "Previously we wait after sending each record, here we only wait once after sending all records, so it is more efficient.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416944392", "createdAt": "2020-04-28T21:48:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -269,24 +271,20 @@ public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final\n      * @param <K>                 Key type of the data records\n      * @param <V>                 Value type of the data records\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n     public static <K, V> void produceKeyValuesSynchronouslyWithTimestamp(final String topic,\n                                                                          final Collection<KeyValue<K, V>> records,\n                                                                          final Properties producerConfig,\n                                                                          final Headers headers,\n                                                                          final Long timestamp,\n-                                                                         final boolean enableTransactions)\n-            throws ExecutionException, InterruptedException {\n+                                                                         final boolean enableTransactions) {\n \n         try (final Producer<K, V> producer = new KafkaProducer<>(producerConfig)) {\n             if (enableTransactions) {\n                 producer.initTransactions();\n                 producer.beginTransaction();\n             }\n             for (final KeyValue<K, V> record : records) {\n-                final Future<RecordMetadata> f = producer.send(\n-                    new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));\n-                f.get();\n+                producer.send(new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjk4NQ=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NzgwMA==", "bodyText": "Thanks. That's what I was asking for confirmation on. I realize now the structure of my sentence was ambiguous.\nI agree that the method contract is that the batch should be synchronously produced, not that each record should be synchronously produced, so this change looks good to me.", "url": "https://github.com/apache/kafka/pull/8568#discussion_r416947800", "createdAt": "2020-04-28T21:55:48Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -269,24 +271,20 @@ public static void cleanStateAfterTest(final EmbeddedKafkaCluster cluster, final\n      * @param <K>                 Key type of the data records\n      * @param <V>                 Value type of the data records\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n     public static <K, V> void produceKeyValuesSynchronouslyWithTimestamp(final String topic,\n                                                                          final Collection<KeyValue<K, V>> records,\n                                                                          final Properties producerConfig,\n                                                                          final Headers headers,\n                                                                          final Long timestamp,\n-                                                                         final boolean enableTransactions)\n-            throws ExecutionException, InterruptedException {\n+                                                                         final boolean enableTransactions) {\n \n         try (final Producer<K, V> producer = new KafkaProducer<>(producerConfig)) {\n             if (enableTransactions) {\n                 producer.initTransactions();\n                 producer.beginTransaction();\n             }\n             for (final KeyValue<K, V> record : records) {\n-                final Future<RecordMetadata> f = producer.send(\n-                    new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));\n-                f.get();\n+                producer.send(new ProducerRecord<>(topic, null, timestamp, record.key, record.value, headers));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjk4NQ=="}, "originalCommit": {"oid": "f936848a86992d779fa37703c4a4a7b83fc30727"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2811, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}