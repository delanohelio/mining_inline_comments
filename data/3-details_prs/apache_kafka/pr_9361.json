{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NDEyNjA3", "number": 9361, "title": "KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts", "bodyText": "Migrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-01T17:08:40Z", "url": "https://github.com/apache/kafka/pull/9361", "merged": true, "mergeCommit": {"oid": "69790a1463bafc1f63e3c288a6636b3f4586c1b4"}, "closed": true, "closedAt": "2020-10-02T23:49:13Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOT2tsAH2gAyNDk2NDEyNjA3OjIyYjljM2FiOTJkY2FhYzhhZmFlNjI4NTQ3NTAwZTA0M2U0NGRlODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOoC1-gH2gAyNDk2NDEyNjA3OmE4ZGU3NWY2ZjE2Y2Y4YmRjY2NiY2IxYmMxZmMwYTExZGQ0MGMxZDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22b9c3ab92dcaac8afae628547500e043e44de87", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/22b9c3ab92dcaac8afae628547500e043e44de87", "committedDate": "2020-10-01T16:20:08Z", "message": "KAFKA-10535: Split ProcessorContext into Processor/StateStore/RecordContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/d3321aa0d199c80b04ab9e1121b4501b333db7a5", "committedDate": "2020-10-01T17:06:18Z", "message": "move metadata to context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/6a28f18b92189ae2e0df950d014230d4172f57ad", "committedDate": "2020-10-01T17:13:30Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/5d7bf4abb687a1d6f6ecf28843370b633ae1497b", "committedDate": "2020-10-01T17:23:06Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4c9934241e7488bd7836255c8793bc087bdf1c4d", "committedDate": "2020-10-01T20:40:34Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/1bdf5c8c2da3d69521d2fe258f97e6836d74fa70", "committedDate": "2020-10-01T21:32:33Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTU0ODgx", "url": "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881", "createdAt": "2020-10-01T17:10:56Z", "commit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5"}, "state": "COMMENTED", "comments": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoxMDo1NlrOHbTsvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTozMjo0NFrOHbbfFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NjM1MA==", "bodyText": "These tests now have a couple more imports, which pushed them over the line. It's possible that they'll drop below the line again after completing the transition to KIP-478. Otherwise, we should refactor these tests to comply with the limit. But we should do that separately.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498396350", "createdAt": "2020-10-01T17:10:56Z", "author": {"login": "vvcephei"}, "path": "checkstyle/suppressions.xml", "diffHunk": "@@ -185,7 +185,7 @@\n \n     <!-- Streams tests -->\n     <suppress checks=\"ClassFanOutComplexity\"\n-              files=\"StreamThreadTest.java\"/>\n+              files=\"(StreamThreadTest|StreamTaskTest|TopologyTestDriverTest).java\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NzcxMQ==", "bodyText": "Since we have to define a timestamp now, I'm showing the use of the punctuation time in the dev guide.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498397711", "createdAt": "2020-10-01T17:13:26Z", "author": {"login": "vvcephei"}, "path": "streams/examples/src/test/java/org/apache/kafka/streams/examples/docs/DeveloperGuideTesting.java", "diffHunk": "@@ -160,24 +161,24 @@ public void shouldPunctuateIfWallClockTimeAdvances() {\n         @Override\n         public void init(final ProcessorContext<String, Long> context) {\n             this.context = context;\n-            context.schedule(Duration.ofSeconds(60), PunctuationType.WALL_CLOCK_TIME, time -> flushStore());\n-            context.schedule(Duration.ofSeconds(10), PunctuationType.STREAM_TIME, time -> flushStore());\n+            context.schedule(Duration.ofSeconds(60), PunctuationType.WALL_CLOCK_TIME, this::flushStore);\n+            context.schedule(Duration.ofSeconds(10), PunctuationType.STREAM_TIME, this::flushStore);\n             store = context.getStateStore(\"aggStore\");\n         }\n \n         @Override\n-        public void process(final String key, final Long value) {\n-            final Long oldValue = store.get(key);\n-            if (oldValue == null || value > oldValue) {\n-                store.put(key, value);\n+        public void process(final Record<String, Long> record) {\n+            final Long oldValue = store.get(record.key());\n+            if (oldValue == null || record.value() > oldValue) {\n+                store.put(record.key(), record.value());\n             }\n         }\n \n-        private void flushStore() {\n+        private void flushStore(final long timestamp) {\n             final KeyValueIterator<String, Long> it = store.all();\n             while (it.hasNext()) {\n                 final KeyValue<String, Long> next = it.next();\n-                context.forward(next.key, next.value);\n+                context.forward(new Record<>(next.key, next.value, timestamp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI4MQ==", "bodyText": "now that we can implement both the new and old contexts with the same Impl, we need this to resolve a clash. It's backward compatible and a nice quality-of-life improvement anyway.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498398281", "createdAt": "2020-10-01T17:14:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/ProcessorContext.java", "diffHunk": "@@ -88,9 +88,12 @@ void register(final StateStore store,\n      * Get the state store given the store name.\n      *\n      * @param name The store name\n+     * @param <S> The type or interface of the store to return\n      * @return The state store instance\n+     *\n+     * @throws ClassCastException if the return type isn't a type or interface of the actual returned store.\n      */\n-    StateStore getStateStore(final String name);\n+    <S extends StateStore> S getStateStore(final String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMDUwNQ==", "bodyText": "Not sure what's up with this diff, but this is the old API.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498400505", "createdAt": "2020-10-01T17:18:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateStore.java", "diffHunk": "@@ -49,7 +51,28 @@\n      * Initializes this state store.\n      * <p>\n      * The implementation of this function must register the root store in the context via the\n-     * {@link ProcessorContext#register(StateStore, StateRestoreCallback)} function, where the\n+     * {@link org.apache.kafka.streams.processor.ProcessorContext#register(StateStore, StateRestoreCallback)} function,\n+     * where the first {@link StateStore} parameter should always be the passed-in {@code root} object, and\n+     * the second parameter should be an object of user's implementation\n+     * of the {@link StateRestoreCallback} interface used for restoring the state store from the changelog.\n+     * <p>\n+     * Note that if the state store engine itself supports bulk writes, users can implement another\n+     * interface {@link BatchingStateRestoreCallback} which extends {@link StateRestoreCallback} to\n+     * let users implement bulk-load restoration logic instead of restoring one record at a time.\n+     * <p>\n+     * This method is not called if {@link StateStore#init(StateStoreContext, StateStore)}\n+     * is implemented.\n+     *\n+     * @throws IllegalStateException If store gets registered after initialized is already finished\n+     * @throws StreamsException if the store's change log does not contain the partition\n+     */\n+    void init(org.apache.kafka.streams.processor.ProcessorContext context, StateStore root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMDc1Nw==", "bodyText": "This is the new API. Note the default implementation that delegates to the old API.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498400757", "createdAt": "2020-10-01T17:19:02Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateStore.java", "diffHunk": "@@ -61,7 +84,9 @@\n      * @throws IllegalStateException If store gets registered after initialized is already finished\n      * @throws StreamsException if the store's change log does not contain the partition\n      */\n-    void init(ProcessorContext context, StateStore root);\n+    default void init(final StateStoreContext context, final StateStore root) {\n+        init(StoreToProcessorContextAdapter.adapt(context), root);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMDk0OQ==", "bodyText": "The new state store context proposed in the KIP.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498400949", "createdAt": "2020-10-01T17:19:21Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateStoreContext.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor;\n+\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.StreamsMetrics;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+/**\n+ * State store context interface.\n+ */\n+public interface StateStoreContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMTE5MQ==", "bodyText": "The new Processor API (with Record) proposed in the KIP.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498401191", "createdAt": "2020-10-01T17:19:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Processor.java", "diffHunk": "@@ -46,12 +46,11 @@\n     default void init(final ProcessorContext<KOut, VOut> context) {}\n \n     /**\n-     * Process the record with the given key and value.\n+     * Process the record. Note that record metadata is undefined in cases such as a forward call from a punctuator.\n      *\n-     * @param key the key for the record\n-     * @param value the value for the record\n+     * @param record the record to process\n      */\n-    void process(KIn key, VIn value);\n+    void process(Record<KIn, VIn> record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMTY1MQ==", "bodyText": "The new RecordMetadata context proposed in the KIP. Hopefully, the Javadoc is clear on why it's Optional.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498401651", "createdAt": "2020-10-01T17:20:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -55,6 +52,16 @@\n      */\n     TaskId taskId();\n \n+    /**\n+     * The metadata of the record, if it is defined. Note that as long as the processor is\n+     * receiving a record downstream of a Source (i.e., the current record is coming from an\n+     * input topic), the metadata is defined. On the other hand, if a parent processor has\n+     * registered a punctuator and called {@link ProcessorContext#forward(Record)} from that\n+     * punctuator, then there is no record from an input topic, and therefore the metadata\n+     * would be undefined.\n+     */\n+    Optional<RecordMetadata> recordMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMTcyNg==", "bodyText": "Moved to the StateStoreContext.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498401726", "createdAt": "2020-10-01T17:20:51Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -83,30 +90,21 @@\n      */\n     StreamsMetrics metrics();\n \n-    /**\n-     * Registers and possibly restores the specified storage engine.\n-     *\n-     * @param store the storage engine\n-     * @param stateRestoreCallback the restoration callback logic for log-backed state stores upon restart\n-     *\n-     * @throws IllegalStateException If store gets registered after initialized is already finished\n-     * @throws StreamsException if the store's change log does not contain the partition\n-     */\n-    void register(final StateStore store,\n-                  final StateRestoreCallback stateRestoreCallback);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a28f18b92189ae2e0df950d014230d4172f57ad"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzQwNw==", "bodyText": "Migrated to the new Record argument.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498403407", "createdAt": "2020-10-01T17:23:55Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -140,76 +138,25 @@ Cancellable schedule(final Duration interval,\n                          final Punctuator callback);\n \n     /**\n-     * Forwards a key/value pair to all downstream processors.\n-     * Used the input record's timestamp as timestamp for the output record.\n+     * Forwards a record to all child processors.\n      *\n-     * @param key key\n-     * @param value value\n+     * @param record The record to forward to all children\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzY4Mg==", "bodyText": "These are moved to RecordMetadata", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498403682", "createdAt": "2020-10-01T17:24:23Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -140,76 +138,25 @@ Cancellable schedule(final Duration interval,\n                          final Punctuator callback);\n \n     /**\n-     * Forwards a key/value pair to all downstream processors.\n-     * Used the input record's timestamp as timestamp for the output record.\n+     * Forwards a record to all child processors.\n      *\n-     * @param key key\n-     * @param value value\n+     * @param record The record to forward to all children\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record);\n \n     /**\n-     * Forwards a key/value pair to the specified downstream processors.\n-     * Can be used to set the timestamp of the output record.\n+     * Forwards a record to the specified child processor.\n      *\n-     * @param key key\n-     * @param value value\n-     * @param to the options to use when forwarding\n+     * @param record The record to forward\n+     * @param childName The name of the child processor to receive the record\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value, final To to);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record, final String childName);\n \n     /**\n      * Requests a commit.\n      */\n     void commit();\n \n-    /**\n-     * Returns the topic name of the current input record; could be null if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the topic name\n-     */\n-    String topic();\n-\n-    /**\n-     * Returns the partition id of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the partition id\n-     */\n-    int partition();\n-\n-    /**\n-     * Returns the offset of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the offset\n-     */\n-    long offset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzc4Nw==", "bodyText": "These are moved to Record.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498403787", "createdAt": "2020-10-01T17:24:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -140,76 +138,25 @@ Cancellable schedule(final Duration interval,\n                          final Punctuator callback);\n \n     /**\n-     * Forwards a key/value pair to all downstream processors.\n-     * Used the input record's timestamp as timestamp for the output record.\n+     * Forwards a record to all child processors.\n      *\n-     * @param key key\n-     * @param value value\n+     * @param record The record to forward to all children\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record);\n \n     /**\n-     * Forwards a key/value pair to the specified downstream processors.\n-     * Can be used to set the timestamp of the output record.\n+     * Forwards a record to the specified child processor.\n      *\n-     * @param key key\n-     * @param value value\n-     * @param to the options to use when forwarding\n+     * @param record The record to forward\n+     * @param childName The name of the child processor to receive the record\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value, final To to);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record, final String childName);\n \n     /**\n      * Requests a commit.\n      */\n     void commit();\n \n-    /**\n-     * Returns the topic name of the current input record; could be null if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the topic name\n-     */\n-    String topic();\n-\n-    /**\n-     * Returns the partition id of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the partition id\n-     */\n-    int partition();\n-\n-    /**\n-     * Returns the offset of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the offset\n-     */\n-    long offset();\n-\n-    /**\n-     * Returns the headers of the current input record; could be null if it is not\n-     * available (for example, if this method is invoked from the punctuate call).\n-     *\n-     * @return the headers\n-     */\n-    Headers headers();\n-\n-    /**\n-     * Returns the current timestamp.\n-     *\n-     * <p> If it is triggered while processing a record streamed from the source processor,\n-     * timestamp is defined as the timestamp of the current input record; the timestamp is extracted from\n-     * {@link org.apache.kafka.clients.consumer.ConsumerRecord ConsumerRecord} by {@link TimestampExtractor}.\n-     *\n-     * <p> If it is triggered while processing a record generated not from the source processor (for example,\n-     * if this method is invoked from the punctuate call), timestamp is defined as the current\n-     * task's stream time, which is defined as the largest timestamp of any record processed by the task.\n-     *\n-     * @return the timestamp\n-     */\n-    long timestamp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDAzOQ==", "bodyText": "The new Record class proposed in the KIP.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498404039", "createdAt": "2020-10-01T17:25:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Record.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+/**\n+ * A data class representing an incoming record for processing in a {@link Processor}\n+ * or a record to forward to downstream processors via {@link ProcessorContext}.\n+ *\n+ * This class encapsulates all the data attributes of a record: the key and value, but\n+ * also the timestamp of the record and any record headers.\n+ *\n+ * This class is immutable, though the objects referenced in the attributes of this class\n+ * may themselves be mutable.\n+ *\n+ * @param <K> The type of the key\n+ * @param <V> The type of the value\n+ */\n+public class Record<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDM3Ng==", "bodyText": "The new metadata proposed in the KIP. Note that it's an interface because in reality, it's just going to be a view onto the ProcessorRecordContext.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498404376", "createdAt": "2020-10-01T17:25:37Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/RecordMetadata.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+public interface RecordMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTQ0OQ==", "bodyText": "The prior code was a bit misleading. I could not find any code path where the context was actually null before, since we always initialized it with a \"dummy context\". This change simplifies the codebase by just moving the dummy values here and we now really do set the record context to null to (internally) signify when it is undefined.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498405449", "createdAt": "2020-10-01T17:27:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -112,64 +114,69 @@ public void register(final StateStore store,\n         stateManager().registerStore(store, stateRestoreCallback);\n     }\n \n-    /**\n-     * @throws IllegalStateException if the task's record is null\n-     */\n     @Override\n     public String topic() {\n         if (recordContext == null) {\n-            throw new IllegalStateException(\"This should not happen as topic() should only be called while a record is processed\");\n-        }\n-\n-        final String topic = recordContext.topic();\n-\n-        if (NONEXIST_TOPIC.equals(topic)) {\n+            // This is only exposed via the deprecated ProcessorContext,\n+            // in which case, we're preserving the pre-existing behavior\n+            // of returning dummy values when the record context is undefined.\n+            // For topic, the dummy value is `null`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTgzNg==", "bodyText": "Just implementing the interface.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498405836", "createdAt": "2020-10-01T17:28:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ForwardingDisabledProcessorContext.java", "diffHunk": "@@ -86,7 +86,7 @@ public void register(final StateStore store,\n     }\n \n     @Override\n-    public StateStore getStateStore(final String name) {\n+    public <S extends StateStore> S getStateStore(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjk4Mg==", "bodyText": "Just implementing the new APIs while preserving the existing patterns.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498406982", "createdAt": "2020-10-01T17:30:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalProcessorContextImpl.java", "diffHunk": "@@ -49,26 +50,38 @@ protected StateManager stateManager() {\n         return stateManager;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public StateStore getStateStore(final String name) {\n+    public <S extends StateStore> S getStateStore(final String name) {\n         final StateStore store = stateManager.getGlobalStore(name);\n-        return getReadWriteStore(store);\n+        return (S) getReadWriteStore(store);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <KIn, VIn> void forward(final KIn key, final VIn value) {\n+    public <K, V> void forward(final Record<K, V> record) {\n         final ProcessorNode<?, ?, ?, ?> previousNode = currentNode();\n         try {\n             for (final ProcessorNode<?, ?, ?, ?> child : currentNode().children()) {\n                 setCurrentNode(child);\n-                ((ProcessorNode<KIn, VIn, ?, ?>) child).process(key, value);\n+                ((ProcessorNode<K, V, ?, ?>) child).process(record);\n             }\n         } finally {\n             setCurrentNode(previousNode);\n         }\n     }\n \n+    @Override\n+    public <K, V> void forward(final Record<K, V> record, final String childName) {\n+        throw new UnsupportedOperationException(\"this should not happen: forward() not supported in global processor context.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODQyNQ==", "bodyText": "These are scattered throughout this PR. It's just selecting the init method we want to invoke. It's only necessary because the globalProcessorContext here actually implements both ProcessorContext and StateStoreContext. This is only true of our internal contexts, so users will not face a similar need to change code.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498408425", "createdAt": "2020-10-01T17:33:00Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -147,7 +148,7 @@ public void setGlobalProcessorContext(final InternalProcessorContext globalProce\n             globalStoreNames.add(stateStore.name());\n             final String sourceTopic = storeToChangelogTopic.get(stateStore.name());\n             changelogTopics.add(sourceTopic);\n-            stateStore.init(globalProcessorContext, stateStore);\n+            stateStore.init((StateStoreContext) globalProcessorContext, stateStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDg3Nw==", "bodyText": "This is a pretty common pattern where we need to bridge the new and old APIs. We construct the \"record\" by filling in the timestamp and headers from the context.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498424877", "createdAt": "2020-10-01T18:03:07Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateUpdateTask.java", "diffHunk": "@@ -104,7 +105,13 @@ public void update(final ConsumerRecord<byte[], byte[]> record) {\n                     deserialized.headers());\n             processorContext.setRecordContext(recordContext);\n             processorContext.setCurrentNode(sourceNodeAndDeserializer.sourceNode());\n-            ((SourceNode<Object, Object, Object, Object>) sourceNodeAndDeserializer.sourceNode()).process(deserialized.key(), deserialized.value());\n+            final Record<Object, Object> toProcess = new Record<>(\n+                deserialized.key(),\n+                deserialized.value(),\n+                processorContext.timestamp(),\n+                processorContext.headers()\n+            );\n+            ((SourceNode<Object, Object, Object, Object>) sourceNodeAndDeserializer.sourceNode()).process(toProcess);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5Mjk3OQ==", "bodyText": "Note: each time we create a new Record, we copy the headers. This is an improvement over the current situation where there's no mutability barriers across the whole subtopology, so changes to headers in one processor can have unexpected effects on other processors that are very far away in the dependency diagram.\nHowever, it doesn't completely solve the problem: changes in children can still be visible to parents and siblings. @mjsax and I discussed an alternative option of providing a completely immutable implementation (copy on write) of Headers as a complete solution. But it also seems to be a pretty severe performance penalty. Instead, perhaps we can just document a safe pattern. E.g.,\nrecord = new Record(...)\ncontext.forward(record, \"childA\")\nrecord.headers().add(new header)\n// or\nrecord.withHeaders(record.headers().add(new header))\ncontext.forward(record, \"childB\")\n\nis unsafe because childA may modify the headers, affecting both the parent and childB. Instead, you should do something like:\nrecord1 = new Record(...)\nrecord2 = new Record(...)\nrecord2.headers().add(new header)\ncontext.forward(record1, \"childA\")\ncontext.forward(record2, \"childB\")\n\nNow, the headers for both children are completely independent objects.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498492979", "createdAt": "2020-10-01T20:22:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Record.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+/**\n+ * A data class representing an incoming record for processing in a {@link Processor}\n+ * or a record to forward to downstream processors via {@link ProcessorContext}.\n+ *\n+ * This class encapsulates all the data attributes of a record: the key and value, but\n+ * also the timestamp of the record and any record headers.\n+ *\n+ * This class is immutable, though the objects referenced in the attributes of this class\n+ * may themselves be mutable.\n+ *\n+ * @param <K> The type of the key\n+ * @param <V> The type of the value\n+ */\n+public class Record<K, V> {\n+    private final K key;\n+    private final V value;\n+    private final long timestamp;\n+    private final Headers headers;\n+\n+    /**\n+     * The full constructor, specifying all the attributes of the record.\n+     *\n+     * @param key The key of the record. May be null.\n+     * @param value The value of the record. May be null.\n+     * @param timestamp The timestamp of the record. May not be negative.\n+     * @param headers The headers of the record. May be null, which will cause subsequent calls\n+     *                to {@link this#headers()} to return a non-null, empty, {@link Headers} collection.\n+     *\n+     * @throws IllegalArgumentException if the timestamp is negative.\n+     */\n+    public Record(final K key, final V value, final long timestamp, final Headers headers) {\n+        this.key = key;\n+        this.value = value;\n+        if (timestamp < 0) {\n+            throw new StreamsException(\n+                \"Malformed Record\",\n+                new IllegalArgumentException(\"Timestamp may not be negative. Got: \" + timestamp)\n+            );\n+        }\n+        this.timestamp = timestamp;\n+        this.headers = new RecordHeaders(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5MzUyOQ==", "bodyText": "Don't need this anymore, since the InternalProcessorContext can now implement all of the new and old Contexts.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498493529", "createdAt": "2020-10-01T20:23:40Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalApiProcessorContext.java", "diffHunk": "@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.processor.internals;\n-\n-import org.apache.kafka.common.utils.Bytes;\n-import org.apache.kafka.streams.processor.RecordContext;\n-import org.apache.kafka.streams.processor.StateStore;\n-import org.apache.kafka.streams.processor.api.ProcessorContext;\n-import org.apache.kafka.streams.processor.internals.Task.TaskType;\n-import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n-import org.apache.kafka.streams.state.StoreBuilder;\n-import org.apache.kafka.streams.state.internals.ThreadCache;\n-import org.apache.kafka.streams.state.internals.ThreadCache.DirtyEntryFlushListener;\n-\n-/**\n- * For internal use so we can update the {@link RecordContext} and current\n- * {@link ProcessorNode} when we are forwarding items that have been evicted or flushed from\n- * {@link ThreadCache}\n- */\n-public interface InternalApiProcessorContext<KForward, VForward> extends ProcessorContext<KForward, VForward> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5Mzk4NA==", "bodyText": "Thanks to this, all our internal Impls are suitable to pass in to any of the new APIs.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498493984", "createdAt": "2020-10-01T20:24:40Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalProcessorContext.java", "diffHunk": "@@ -33,7 +34,9 @@\n  * {@link ProcessorNode} when we are forwarding items that have been evicted or flushed from\n  * {@link ThreadCache}\n  */\n-public interface InternalProcessorContext extends ProcessorContext {\n+public interface InternalProcessorContext\n+    extends ProcessorContext, org.apache.kafka.streams.processor.api.ProcessorContext<Object, Object>, StateStoreContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NDYzOQ==", "bodyText": "We also don't need these adapters anymore.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498494639", "createdAt": "2020-10-01T20:25:59Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextAdapter.java", "diffHunk": "@@ -1,235 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.processor.internals;\n-\n-import org.apache.kafka.common.header.Headers;\n-import org.apache.kafka.common.serialization.Serde;\n-import org.apache.kafka.common.utils.Bytes;\n-import org.apache.kafka.streams.processor.Cancellable;\n-import org.apache.kafka.streams.processor.PunctuationType;\n-import org.apache.kafka.streams.processor.Punctuator;\n-import org.apache.kafka.streams.processor.StateRestoreCallback;\n-import org.apache.kafka.streams.processor.StateStore;\n-import org.apache.kafka.streams.processor.TaskId;\n-import org.apache.kafka.streams.processor.To;\n-import org.apache.kafka.streams.processor.api.ProcessorContext;\n-import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n-import org.apache.kafka.streams.state.StoreBuilder;\n-import org.apache.kafka.streams.state.internals.ThreadCache;\n-\n-import java.io.File;\n-import java.time.Duration;\n-import java.util.Map;\n-\n-public final class ProcessorContextAdapter<KForward, VForward>\n-    implements ProcessorContext<KForward, VForward>, InternalApiProcessorContext<KForward, VForward> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNTgxNg==", "bodyText": "Don't need this adapter anymore, either.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498505816", "createdAt": "2020-10-01T20:50:35Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextReverseAdapter.java", "diffHunk": "@@ -1,248 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.processor.internals;\n-\n-import org.apache.kafka.common.header.Headers;\n-import org.apache.kafka.common.serialization.Serde;\n-import org.apache.kafka.common.utils.Bytes;\n-import org.apache.kafka.streams.processor.Cancellable;\n-import org.apache.kafka.streams.processor.PunctuationType;\n-import org.apache.kafka.streams.processor.Punctuator;\n-import org.apache.kafka.streams.processor.StateRestoreCallback;\n-import org.apache.kafka.streams.processor.StateStore;\n-import org.apache.kafka.streams.processor.TaskId;\n-import org.apache.kafka.streams.processor.To;\n-import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n-import org.apache.kafka.streams.state.StoreBuilder;\n-import org.apache.kafka.streams.state.internals.ThreadCache;\n-\n-import java.io.File;\n-import java.time.Duration;\n-import java.util.Map;\n-\n-public final class ProcessorContextReverseAdapter implements InternalProcessorContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjc2Nw==", "bodyText": "Casting to add the generic params (the InternalProcessorContext is parameterized as <Object, Object>).", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498506767", "createdAt": "2020-10-01T20:52:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "diffHunk": "@@ -114,7 +117,7 @@ public void init(final InternalProcessorContext context) {\n             maybeMeasureLatency(\n                 () -> {\n                     if (processor != null) {\n-                        processor.init(ProcessorContextAdapter.adapt(context));\n+                        processor.init((ProcessorContext<KOut, VOut>) context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjk0MA==", "bodyText": "Here's the implementation of RecordMetadata.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498506940", "createdAt": "2020-10-01T20:52:56Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorRecordContext.java", "diffHunk": "@@ -29,7 +30,7 @@\n import static java.util.Objects.requireNonNull;\n import static org.apache.kafka.common.utils.Utils.getNullableSizePrefixedArray;\n \n-public class ProcessorRecordContext implements RecordContext {\n+public class ProcessorRecordContext implements RecordContext, RecordMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwOTE0NQ==", "bodyText": "This allows us to transparently delegate the new API to the old one for StateStore implementations. Our internal StateStoreContext implementations all implement both APIs, so they just get casted, while if you use a separate implementation of StateStoreContext (e.g., in unit tests), it'll get adapted, which works just as long as the underlying store implementation doesn't try to call forward or anything.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498509145", "createdAt": "2020-10-01T20:57:26Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreToProcessorContextAdapter.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.StreamsMetrics;\n+import org.apache.kafka.streams.processor.Cancellable;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.PunctuationType;\n+import org.apache.kafka.streams.processor.Punctuator;\n+import org.apache.kafka.streams.processor.StateRestoreCallback;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.apache.kafka.streams.processor.StateStoreContext;\n+import org.apache.kafka.streams.processor.TaskId;\n+import org.apache.kafka.streams.processor.To;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Map;\n+\n+public final class StoreToProcessorContextAdapter implements ProcessorContext {\n+    private final StateStoreContext delegate;\n+\n+    public static ProcessorContext adapt(final StateStoreContext delegate) {\n+        if (delegate instanceof ProcessorContext) {\n+            return (ProcessorContext) delegate;\n+        } else {\n+            return new StoreToProcessorContextAdapter(delegate);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwOTc4NQ==", "bodyText": "This is pulling out the timestamp and headers that we just set a few lines earlier.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498509785", "createdAt": "2020-10-01T20:58:45Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -670,9 +671,26 @@ public boolean process(final long wallClockTime) {\n \n             log.trace(\"Start processing one record [{}]\", record);\n \n-            updateProcessorContext(record, currNode, wallClockTime);\n+            updateProcessorContext(\n+                currNode,\n+                wallClockTime,\n+                new ProcessorRecordContext(\n+                    record.timestamp,\n+                    record.offset(),\n+                    record.partition(),\n+                    record.topic(),\n+                    record.headers()\n+                )\n+            );\n+\n             maybeRecordE2ELatency(record.timestamp, wallClockTime, currNode.name());\n-            maybeMeasureLatency(() -> currNode.process(record.key(), record.value()), time, processLatencySensor);\n+            final Record<Object, Object> toProcess = new Record<>(\n+                record.key(),\n+                record.value(),\n+                processorContext.timestamp(),\n+                processorContext.headers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDEwMg==", "bodyText": "Instead of setting a dummy context, we're now just setting the context to null aka \"undefined\".", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498510102", "createdAt": "2020-10-01T20:59:21Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -742,8 +760,7 @@ public void punctuate(final ProcessorNode<?, ?, ?, ?> node,\n             throw new IllegalStateException(String.format(\"%sCurrent node is not null\", logPrefix));\n         }\n \n-        updateProcessorContext(new StampedRecord(new ConsumerRecord<>(ProcessorContextImpl.NONEXIST_TOPIC, -1, -1L, null, null),\n-            timestamp), node, time.milliseconds());\n+        updateProcessorContext(node, time.milliseconds(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDcwMg==", "bodyText": "A copy constructor helped with the ProcessorContextImpl refactoring.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498510702", "createdAt": "2020-10-01T21:00:34Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ToInternal.java", "diffHunk": "@@ -23,6 +23,10 @@ public ToInternal() {\n         super(To.all());\n     }\n \n+    public ToInternal(final To to) {\n+        super(to);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDkyNA==", "bodyText": "A good example of updating just the value for the child.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498510924", "createdAt": "2020-10-01T21:01:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -866,9 +867,9 @@ public void init(final ProcessorContext<String, String> context) {\n                     }\n \n                     @Override\n-                    public void process(final String key, final String value) {\n-                        if (value.length() % 2 == 0) {\n-                            context.forward(key, key + value);\n+                    public void process(final Record<String, String> record) {\n+                        if (record.value().length() % 2 == 0) {\n+                            context.forward(record.withValue(record.key() + record.value()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMTExOQ==", "bodyText": "You're going to see a lot of these in the tests.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498511119", "createdAt": "2020-10-01T21:01:31Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -967,11 +968,11 @@ public void init(final ProcessorContext<String, String> context) {\n                 }\n \n                 @Override\n-                public void process(final String key, final String value) {\n+                public void process(final Record<String, String> record) {\n                     final KeyValueStore<String, Long> kvStore = context.getStateStore(storeName);\n-                    kvStore.put(key, 5L);\n+                    kvStore.put(record.key(), 5L);\n \n-                    context.forward(key, \"5\");\n+                    context.forward(record.withValue(\"5\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjE3NA==", "bodyText": "The prior code here was actually relying on a strange effect in which we set the (undefined) processor context's timestamp to the punctuation time. I could preserve that behavior, but it looked like a bug to me.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498512174", "createdAt": "2020-10-01T21:03:51Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java", "diffHunk": "@@ -60,7 +61,7 @@ public void init(final ProcessorContext context) {\n                     context.schedule(\n                         Duration.ofMillis(1),\n                         PunctuationType.WALL_CLOCK_TIME,\n-                        timestamp -> context.forward(-1, (int) timestamp)\n+                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjcyMg==", "bodyText": "These tests were enforcing a behavior that would never have actually happened in practice. Since I changed these methods to return the dummy values when the context is undefined, these tests also have to change.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498512722", "createdAt": "2020-10-01T21:05:08Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContextTest.java", "diffHunk": "@@ -81,14 +84,9 @@ public void shouldThrowNullPointerOnRegisterIfStateStoreIsNull() {\n     }\n \n     @Test\n-    public void shouldThrowIllegalStateExceptionOnTopicIfNoRecordContext() {\n+    public void shouldReturnNullTopicIfNoRecordContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMzUzNg==", "bodyText": "That constructor of ConsumerRecord set the timestamp to -1, which is now prohibited because we construct a Record before processing, and Record enforces no negative timestamps.\nThis seems fine to me, since it would only happen in unit tests (as ConsumerRecords returned from the broker never have negative timestamps).", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498513536", "createdAt": "2020-10-01T21:07:03Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java", "diffHunk": "@@ -127,7 +128,7 @@ public void shouldInitializeProcessorTopology() {\n     @Test\n     public void shouldProcessRecordsForTopic() {\n         globalStateTask.initialize();\n-        globalStateTask.update(new ConsumerRecord<>(topic1, 1, 1, \"foo\".getBytes(), \"bar\".getBytes()));\n+        globalStateTask.update(record(topic1, 1, 1, \"foo\".getBytes(), \"bar\".getBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNDI5Mw==", "bodyText": "just a simple passthrough", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498514293", "createdAt": "2020-10-01T21:08:45Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java", "diffHunk": "@@ -775,8 +775,8 @@ public void init(final ProcessorContext<String, String> context) {\n         }\n \n         @Override\n-        public void process(final String key, final String value) {\n-            context.forward(key, value);\n+        public void process(final Record<String, String> record) {\n+            context.forward(record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNDM2Nw==", "bodyText": "An example of setting only the timestamp.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498514367", "createdAt": "2020-10-01T21:08:56Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java", "diffHunk": "@@ -792,8 +792,8 @@ public void init(final ProcessorContext<String, String> context) {\n         }\n \n         @Override\n-        public void process(final String key, final String value) {\n-            context.forward(key, value, To.all().withTimestamp(context.timestamp() + 10));\n+        public void process(final Record<String, String> record) {\n+            context.forward(record.withTimestamp(record.timestamp() + 10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNTcwNg==", "bodyText": "Example of filtering but otherwise passing the record through.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498515706", "createdAt": "2020-10-01T21:12:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -466,10 +467,11 @@ public void init(final InternalProcessorContext context) {\n                 this.context = context;\n                 super.init(context);\n             }\n+\n             @Override\n-            public void process(final Integer key, final Integer value) {\n-                if (key % 2 == 0) {\n-                    context.forward(key, value);\n+            public void process(final Record<Integer, Integer> record) {\n+                if (record.key() % 2 == 0) {\n+                    context.forward(record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNjgyMg==", "bodyText": "This test was actually testing a slightly wrong thing: recordContext was never exposed to users, they would have accessed the headers as processorContext.header(). It's important here because I've refactored the internal code to set recordContext to null when there is no defined context (such as in a punctuation like here).", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498516822", "createdAt": "2020-10-01T21:14:43Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1230,10 +1232,10 @@ public void shouldNotShareHeadersBetweenPunctuateIterations() {\n         task.completeRestoration();\n \n         task.punctuate(processorSystemTime, 1, PunctuationType.WALL_CLOCK_TIME, timestamp -> {\n-            task.processorContext().recordContext().headers().add(\"dummy\", (byte[]) null);\n+            task.processorContext().headers().add(\"dummy\", (byte[]) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNzc4NA==", "bodyText": "This is the utility method I replaced the ConsumerRecord constructor with earlier in the PR.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498517784", "createdAt": "2020-10-01T21:16:52Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/testutil/ConsumerRecordUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals.testutil;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.record.TimestampType;\n+\n+public final class ConsumerRecordUtil {\n+    private ConsumerRecordUtil() {}\n+\n+    public static <K, V> ConsumerRecord<K, V> record(final String topic,\n+                                                     final int partition,\n+                                                     final long offset,\n+                                                     final K key,\n+                                                     final V value) {\n+        // the no-time constructor in ConsumerRecord initializes the\n+        // timestamp to -1, which is an invalid configuration. Here,\n+        // we initialize it to 0.\n+        return new ConsumerRecord<>(\n+            topic,\n+            partition,\n+            offset,\n+            0L,\n+            TimestampType.CREATE_TIME,\n+            0L,\n+            0,\n+            0,\n+            key,\n+            value\n+        );\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxODA3Nw==", "bodyText": "Words cannot express how tired of this change I was by this point.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498518077", "createdAt": "2020-10-01T21:17:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingKeyValueBytesStoreTest.java", "diffHunk": "@@ -55,7 +56,7 @@ public void before() {\n             collector,\n             new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics())));\n         context.setTime(0);\n-        store.init(context, store);\n+        store.init((StateStoreContext) context, store);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxODU3MQ==", "bodyText": "Just a quick note. We do still expect the inner store to have the old init method invoked because none of the wrapper stores are implementing the new init method, so they're using the default implementation that delegates to the old init method. I'm going to take care of that in a follow-on PR.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498518571", "createdAt": "2020-10-01T21:18:44Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingTimestampedWindowBytesStoreTest.java", "diffHunk": "@@ -57,11 +59,11 @@ public void setUp() {\n     private void init() {\n         EasyMock.expect(context.taskId()).andReturn(taskId);\n         EasyMock.expect(context.recordCollector()).andReturn(collector);\n-        inner.init(context, store);\n+        inner.init((ProcessorContext) context, store);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxOTY5Mw==", "bodyText": "This can become a method reference now because those assertions on partition and offset are meaningless now.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498519693", "createdAt": "2020-10-01T21:21:46Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/test/MockApiProcessor.java", "diffHunk": "@@ -65,25 +66,19 @@ public void init(final ProcessorContext<KOut, VOut> context) {\n             scheduleCancellable = context.schedule(\n                 Duration.ofMillis(scheduleInterval),\n                 punctuationType,\n-                timestamp -> {\n-                    if (punctuationType == PunctuationType.STREAM_TIME) {\n-                        assertThat(context.timestamp(), is(timestamp));\n-                    }\n-                    assertThat(context.partition(), is(-1));\n-                    assertThat(context.offset(), is(-1L));\n-\n-                    (punctuationType == PunctuationType.STREAM_TIME ? punctuatedStreamTime : punctuatedSystemTime)\n-                        .add(timestamp);\n-                });\n+                (punctuationType == PunctuationType.STREAM_TIME ? punctuatedStreamTime : punctuatedSystemTime)::add", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyMDkwNQ==", "bodyText": "This was a bit funny to run into by this point in the implementation. It turns out we already had a class called \"Record\", and now we need to reference both of them in this test. I felt like it was more readable to just give this class a new name instead of referencing it by fully qualified name.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498520905", "createdAt": "2020-10-01T21:24:58Z", "author": {"login": "vvcephei"}, "path": "streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java", "diffHunk": "@@ -148,16 +149,16 @@ public TopologyTestDriverTest(final boolean eosEnabled) {\n         }\n     }\n \n-    private final static class Record {\n+    private final static class TTDTestRecord {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9934241e7488bd7836255c8793bc087bdf1c4d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyMzkyNw==", "bodyText": "We used to check this only in SinkNode, but it seems better to fail fast since we actually have the opportunity to do so now.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498523927", "createdAt": "2020-10-01T21:32:44Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Record.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+/**\n+ * A data class representing an incoming record for processing in a {@link Processor}\n+ * or a record to forward to downstream processors via {@link ProcessorContext}.\n+ *\n+ * This class encapsulates all the data attributes of a record: the key and value, but\n+ * also the timestamp of the record and any record headers.\n+ *\n+ * This class is immutable, though the objects referenced in the attributes of this class\n+ * may themselves be mutable.\n+ *\n+ * @param <K> The type of the key\n+ * @param <V> The type of the value\n+ */\n+public class Record<K, V> {\n+    private final K key;\n+    private final V value;\n+    private final long timestamp;\n+    private final Headers headers;\n+\n+    /**\n+     * The full constructor, specifying all the attributes of the record.\n+     *\n+     * @param key The key of the record. May be null.\n+     * @param value The value of the record. May be null.\n+     * @param timestamp The timestamp of the record. May not be negative.\n+     * @param headers The headers of the record. May be null, which will cause subsequent calls\n+     *                to {@link this#headers()} to return a non-null, empty, {@link Headers} collection.\n+     *\n+     * @throws IllegalArgumentException if the timestamp is negative.\n+     */\n+    public Record(final K key, final V value, final long timestamp, final Headers headers) {\n+        this.key = key;\n+        this.value = value;\n+        if (timestamp < 0) {\n+            throw new StreamsException(\n+                \"Malformed Record\",\n+                new IllegalArgumentException(\"Timestamp may not be negative. Got: \" + timestamp)\n+            );\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzQzMTkz", "url": "https://github.com/apache/kafka/pull/9361#pullrequestreview-500743193", "createdAt": "2020-10-01T21:51:16Z", "commit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1MToxN1rOHbb7TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1MzoyMFrOHbb-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTE0OQ==", "bodyText": "I think this is a proof of code simplicity that recordContext is unnecessarily passing around here :)", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498531149", "createdAt": "2020-10-01T21:51:17Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -692,8 +690,7 @@ public boolean process(final long wallClockTime) {\n                 processorContext.timestamp(),\n                 processorContext.headers()\n             );\n-            final Optional<RecordMetadata> recordMetadata = Optional.ofNullable(processorContext.recordContext());\n-            maybeMeasureLatency(() -> currNode.process(toProcess, recordMetadata), time, processLatencySensor);\n+            maybeMeasureLatency(() -> currNode.process(toProcess), time, processLatencySensor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTkwMg==", "bodyText": "nit: maybe also state that the metadata would be the one from the source record?", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498531902", "createdAt": "2020-10-01T21:53:20Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -52,6 +52,16 @@\n      */\n     TaskId taskId();\n \n+    /**\n+     * The metadata of the record, if it is defined. Note that as long as the processor is\n+     * receiving a record downstream of a Source (i.e., the current record is coming from an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3321aa0d199c80b04ab9e1121b4501b333db7a5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzgyMzQ5", "url": "https://github.com/apache/kafka/pull/9361#pullrequestreview-500782349", "createdAt": "2020-10-01T23:30:21Z", "commit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzozMDoyMVrOHbdrig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzo0OTowMlrOHbd9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1OTg4Mg==", "bodyText": "I'd suggest we add a few more sentences about \"always create a new Record upon forwarding\" v.s. \"reuse the object overriding its key/value/timestamp/header fields\", e.g. which way is more plausible when.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498559882", "createdAt": "2020-10-01T23:30:21Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -140,76 +138,25 @@ Cancellable schedule(final Duration interval,\n                          final Punctuator callback);\n \n     /**\n-     * Forwards a key/value pair to all downstream processors.\n-     * Used the input record's timestamp as timestamp for the output record.\n+     * Forwards a record to all child processors.\n      *\n-     * @param key key\n-     * @param value value\n+     * @param record The record to forward to all children\n      */\n-    <K extends KForward, V extends VForward> void forward(final K key, final V value);\n+    <K extends KForward, V extends VForward> void forward(Record<K, V> record);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzQwNw=="}, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MDI3NQ==", "bodyText": "nit: see my other comment above, maybe we can leave some guidance on when it is preferable to reuse the Record with mutable fields than creating a new Record object?", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498560275", "createdAt": "2020-10-01T23:31:59Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Record.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+/**\n+ * A data class representing an incoming record for processing in a {@link Processor}\n+ * or a record to forward to downstream processors via {@link ProcessorContext}.\n+ *\n+ * This class encapsulates all the data attributes of a record: the key and value, but\n+ * also the timestamp of the record and any record headers.\n+ *\n+ * This class is immutable, though the objects referenced in the attributes of this class\n+ * may themselves be mutable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2MjQ5Mw==", "bodyText": "That looks reasonable to me. More generally I'd suggest to document either in this class or in the forward class what side-effects the user need to consider if they decided to reuse the object passed in as parameters and mutate its fields / forward to downstream. And as long as we do that I feel this would be okay.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498562493", "createdAt": "2020-10-01T23:40:49Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/Record.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.api;\n+\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.streams.errors.StreamsException;\n+\n+/**\n+ * A data class representing an incoming record for processing in a {@link Processor}\n+ * or a record to forward to downstream processors via {@link ProcessorContext}.\n+ *\n+ * This class encapsulates all the data attributes of a record: the key and value, but\n+ * also the timestamp of the record and any record headers.\n+ *\n+ * This class is immutable, though the objects referenced in the attributes of this class\n+ * may themselves be mutable.\n+ *\n+ * @param <K> The type of the key\n+ * @param <V> The type of the value\n+ */\n+public class Record<K, V> {\n+    private final K key;\n+    private final V value;\n+    private final long timestamp;\n+    private final Headers headers;\n+\n+    /**\n+     * The full constructor, specifying all the attributes of the record.\n+     *\n+     * @param key The key of the record. May be null.\n+     * @param value The value of the record. May be null.\n+     * @param timestamp The timestamp of the record. May not be negative.\n+     * @param headers The headers of the record. May be null, which will cause subsequent calls\n+     *                to {@link this#headers()} to return a non-null, empty, {@link Headers} collection.\n+     *\n+     * @throws IllegalArgumentException if the timestamp is negative.\n+     */\n+    public Record(final K key, final V value, final long timestamp, final Headers headers) {\n+        this.key = key;\n+        this.value = value;\n+        if (timestamp < 0) {\n+            throw new StreamsException(\n+                \"Malformed Record\",\n+                new IllegalArgumentException(\"Timestamp may not be negative. Got: \" + timestamp)\n+            );\n+        }\n+        this.timestamp = timestamp;\n+        this.headers = new RecordHeaders(headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5Mjk3OQ=="}, "originalCommit": {"oid": "5d7bf4abb687a1d6f6ecf28843370b633ae1497b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2NDMyNw==", "bodyText": "I was hoping that with the new strong typing API, during forwarding we do not need to cast to (ProcessorNode<K, V, ?, ?>) and not need this suppression any more.. Could we add the typing into currentNode (e.g. validate that the currentNode.children is indeed in K, V) instead of force casting?", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498564327", "createdAt": "2020-10-01T23:48:41Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -159,84 +157,123 @@ public StateStore getStateStore(final String name) {\n         }\n \n         final StateStore store = stateManager.getStore(name);\n-        return getReadWriteStore(store);\n+        return (S) getReadWriteStore(store);\n     }\n \n     @Override\n     public <K, V> void forward(final K key,\n                                final V value) {\n-        throwUnsupportedOperationExceptionIfStandby(\"forward\");\n-        forward(key, value, SEND_TO_ALL);\n+        final Record<K, V> toForward = new Record<>(\n+            key,\n+            value,\n+            timestamp(),\n+            headers()\n+        );\n+        forward(toForward);\n     }\n \n     @Override\n     @Deprecated\n     public <K, V> void forward(final K key,\n                                final V value,\n                                final int childIndex) {\n-        throwUnsupportedOperationExceptionIfStandby(\"forward\");\n-        forward(\n+        final Record<K, V> toForward = new Record<>(\n             key,\n             value,\n-            To.child((currentNode().children()).get(childIndex).name()));\n+            timestamp(),\n+            headers()\n+        );\n+        forward(toForward, (currentNode().children()).get(childIndex).name());\n     }\n \n     @Override\n     @Deprecated\n     public <K, V> void forward(final K key,\n                                final V value,\n                                final String childName) {\n-        throwUnsupportedOperationExceptionIfStandby(\"forward\");\n-        forward(key, value, To.child(childName));\n+        final Record<K, V> toForward = new Record<>(\n+            key,\n+            value,\n+            timestamp(),\n+            headers()\n+        );\n+        forward(toForward, childName);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <K, V> void forward(final K key,\n                                final V value,\n                                final To to) {\n+        final ToInternal toInternal = new ToInternal(to);\n+        final Record<K, V> toForward = new Record<>(\n+            key,\n+            value,\n+            toInternal.hasTimestamp() ? toInternal.timestamp() : timestamp(),\n+            headers()\n+        );\n+        forward(toForward, toInternal.child());\n+    }\n+\n+    @Override\n+    public <K, V> void forward(final Record<K, V> record) {\n+        forward(record, null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2NDM5OQ==", "bodyText": "Why we'd need to add this suppression?", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498564399", "createdAt": "2020-10-01T23:49:02Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -135,16 +132,17 @@ public void logChange(final String storeName,\n      * @throws StreamsException if an attempt is made to access this state store from an unknown node\n      * @throws UnsupportedOperationException if the current streamTask type is standby\n      */\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODQ5MzYx", "url": "https://github.com/apache/kafka/pull/9361#pullrequestreview-500849361", "createdAt": "2020-10-02T04:02:59Z", "commit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDowMzowMFrOHbgwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNDowMzowMFrOHbgwKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxMDIxOQ==", "bodyText": "(I'll offer an opinion here because I stressed the importance of it on the mailing list, though I do think this is already pretty good.  Feel free to take it or leave it, it's just a rewording that may or may not add clarity)\n\nNote that as long as the processor is receiving a record downstream of a Source\n\nIsn't every record received downstream of a source one way or another?  IMO the up front emphasis should be on how the record came from the upstream processor.  My attempt:\n\nThe record metadata is defined if the record currently being processed was passed through parent processor(s) directly from a Source.  It is undefined if the record was forwarded from within a Punctuator.", "url": "https://github.com/apache/kafka/pull/9361#discussion_r498610219", "createdAt": "2020-10-02T04:03:00Z", "author": {"login": "pgwhalen"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/api/ProcessorContext.java", "diffHunk": "@@ -55,6 +52,16 @@\n      */\n     TaskId taskId();\n \n+    /**\n+     * The metadata of the record, if it is defined. Note that as long as the processor is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdf5c8c2da3d69521d2fe258f97e6836d74fa70"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1", "committedDate": "2020-10-02T15:51:29Z", "message": "docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 738, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}