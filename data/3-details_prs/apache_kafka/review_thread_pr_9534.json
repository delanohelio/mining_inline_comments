{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzE0NDM3", "number": 9534, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0NDoyNlrOEz0t4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0NDoyNlrOEz0t4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzc2NTQ1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDo0NDoyNlrOHrSL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyNjowMlrOHrY73Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0ODc4MA==", "bodyText": "Suggestion for better readability:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(file.exists());\n          \n          \n            \n                    assertEquals(offsets, checkpoint.read());\n          \n          \n            \n            \n          \n          \n            \n                    checkpoint.write(Collections.emptyMap());\n          \n          \n            \n            \n          \n          \n            \n                    assertFalse(file.exists());\n          \n          \n            \n            \n          \n          \n            \n                    assertEquals(Collections.<TopicPartition, Long>emptyMap(), checkpoint.read());\n          \n          \n            \n                    assertThat(file.exists(), is(true));\n          \n          \n            \n                    assertThat(offsets, is(checkpoint.read()));\n          \n          \n            \n            \n          \n          \n            \n                    checkpoint.write(Collections.emptyMap());\n          \n          \n            \n            \n          \n          \n            \n                    assertThat(file.exists(), is(false));\n          \n          \n            \n                    assertThat(Collections.<TopicPartition, Long>emptyMap(), is(checkpoint.read()));\n          \n      \n    \n    \n  \n\nI verified that the suggested code does not break the test. So, you can directly add the suggesion in the GitHub UI.", "url": "https://github.com/apache/kafka/pull/9534#discussion_r515148780", "createdAt": "2020-10-30T14:44:26Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -85,6 +85,25 @@ public void shouldNotWriteCheckpointWhenNoOffsets() throws IOException {\n         checkpoint.delete();\n     }\n \n+    @Test\n+    public void shouldDeleteExistingCheckpointWhenNoOffsets() throws IOException {\n+        final File file = TestUtils.tempFile();\n+        final OffsetCheckpoint checkpoint = new OffsetCheckpoint(file);\n+\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(new TopicPartition(topic, 0), 1L);\n+\n+        checkpoint.write(offsets);\n+\n+        assertTrue(file.exists());\n+        assertEquals(offsets, checkpoint.read());\n+\n+        checkpoint.write(Collections.emptyMap());\n+\n+        assertFalse(file.exists());\n+\n+        assertEquals(Collections.<TopicPartition, Long>emptyMap(), checkpoint.read());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52819687c3bb59d9193fa1c67ec310c04e5d01f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzEyMQ==", "bodyText": "Thanks for the suggestion. I had to add imports but otherwise looks good \ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/9534#discussion_r515257121", "createdAt": "2020-10-30T17:22:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -85,6 +85,25 @@ public void shouldNotWriteCheckpointWhenNoOffsets() throws IOException {\n         checkpoint.delete();\n     }\n \n+    @Test\n+    public void shouldDeleteExistingCheckpointWhenNoOffsets() throws IOException {\n+        final File file = TestUtils.tempFile();\n+        final OffsetCheckpoint checkpoint = new OffsetCheckpoint(file);\n+\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(new TopicPartition(topic, 0), 1L);\n+\n+        checkpoint.write(offsets);\n+\n+        assertTrue(file.exists());\n+        assertEquals(offsets, checkpoint.read());\n+\n+        checkpoint.write(Collections.emptyMap());\n+\n+        assertFalse(file.exists());\n+\n+        assertEquals(Collections.<TopicPartition, Long>emptyMap(), checkpoint.read());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0ODc4MA=="}, "originalCommit": {"oid": "52819687c3bb59d9193fa1c67ec310c04e5d01f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1OTM1Nw==", "bodyText": "Ouch! Sorry about that!", "url": "https://github.com/apache/kafka/pull/9534#discussion_r515259357", "createdAt": "2020-10-30T17:26:02Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/OffsetCheckpointTest.java", "diffHunk": "@@ -85,6 +85,25 @@ public void shouldNotWriteCheckpointWhenNoOffsets() throws IOException {\n         checkpoint.delete();\n     }\n \n+    @Test\n+    public void shouldDeleteExistingCheckpointWhenNoOffsets() throws IOException {\n+        final File file = TestUtils.tempFile();\n+        final OffsetCheckpoint checkpoint = new OffsetCheckpoint(file);\n+\n+        final Map<TopicPartition, Long> offsets = Collections.singletonMap(new TopicPartition(topic, 0), 1L);\n+\n+        checkpoint.write(offsets);\n+\n+        assertTrue(file.exists());\n+        assertEquals(offsets, checkpoint.read());\n+\n+        checkpoint.write(Collections.emptyMap());\n+\n+        assertFalse(file.exists());\n+\n+        assertEquals(Collections.<TopicPartition, Long>emptyMap(), checkpoint.read());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0ODc4MA=="}, "originalCommit": {"oid": "52819687c3bb59d9193fa1c67ec310c04e5d01f9"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3761, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}