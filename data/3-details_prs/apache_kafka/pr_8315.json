{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDM5MzQ4", "number": 8315, "title": "KAFKA-9433: Use automated protocol for AlterConfigs request and response", "bodyText": "", "createdAt": "2020-03-19T14:33:35Z", "url": "https://github.com/apache/kafka/pull/8315", "merged": true, "mergeCommit": {"oid": "c84e6ab491f5344554333c6ce021a4564e9dc64b"}, "closed": true, "closedAt": "2020-04-09T13:59:25Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPitaJgH2gAyMzkxMDM5MzQ4OmJjZjExMjFkNDhjNWMwNzk3MzMyOTYxZTExYzgxNzE0ZjJhOTE4OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV87BmAFqTM5MDgxNjM5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcf1121d48c5c0797332961e11c81714f2a91898", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/bcf1121d48c5c0797332961e11c81714f2a91898", "committedDate": "2020-03-20T16:01:19Z", "message": "KAFKA-9433: Use automated protocol for AlterConfigs request and response"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bcf1121d48c5c0797332961e11c81714f2a91898", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/bcf1121d48c5c0797332961e11c81714f2a91898", "committedDate": "2020-03-20T16:01:19Z", "message": "KAFKA-9433: Use automated protocol for AlterConfigs request and response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTI2NTk0", "url": "https://github.com/apache/kafka/pull/8315#pullrequestreview-379126594", "createdAt": "2020-03-23T04:28:59Z", "commit": {"oid": "bcf1121d48c5c0797332961e11c81714f2a91898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyODo1OVrOF52nfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyODo1OVrOF52nfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzk5Ng==", "bodyText": "This data construction seems better to be put in the AlterConfigsResponse constructor.", "url": "https://github.com/apache/kafka/pull/8315#discussion_r396207996", "createdAt": "2020-03-23T04:28:59Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AlterConfigsRequest.java", "diffHunk": "@@ -104,98 +64,76 @@ public String value() {\n \n     public static class Builder extends AbstractRequest.Builder<AlterConfigsRequest> {\n \n-        private final Map<ConfigResource, Config> configs;\n-        private final boolean validateOnly;\n+        private final AlterConfigsRequestData data = new AlterConfigsRequestData();\n \n         public Builder(Map<ConfigResource, Config> configs, boolean validateOnly) {\n             super(ApiKeys.ALTER_CONFIGS);\n-            this.configs = Objects.requireNonNull(configs, \"configs\");\n-            this.validateOnly = validateOnly;\n+            Objects.requireNonNull(configs, \"configs\");\n+            for (Map.Entry<ConfigResource, Config> entry : configs.entrySet()) {\n+                AlterConfigsRequestData.AlterConfigsResource resource = new AlterConfigsRequestData.AlterConfigsResource()\n+                        .setResourceName(entry.getKey().name())\n+                        .setResourceType(entry.getKey().type().id());\n+                for (ConfigEntry x : entry.getValue().entries) {\n+                    resource.configs().add(new AlterConfigsRequestData.AlterableConfig()\n+                            .setName(x.name())\n+                            .setValue(x.value()));\n+                }\n+                this.data.resources().add(resource);\n+            }\n+            this.data.setValidateOnly(validateOnly);\n         }\n \n         @Override\n         public AlterConfigsRequest build(short version) {\n-            return new AlterConfigsRequest(version, configs, validateOnly);\n+            return new AlterConfigsRequest(data, version);\n         }\n     }\n \n-    private final Map<ConfigResource, Config> configs;\n-    private final boolean validateOnly;\n+    private final AlterConfigsRequestData data;\n \n-    public AlterConfigsRequest(short version, Map<ConfigResource, Config> configs, boolean validateOnly) {\n+    public AlterConfigsRequest(AlterConfigsRequestData data, short version) {\n         super(ApiKeys.ALTER_CONFIGS, version);\n-        this.configs = Objects.requireNonNull(configs, \"configs\");\n-        this.validateOnly = validateOnly;\n+        this.data = data;\n     }\n \n     public AlterConfigsRequest(Struct struct, short version) {\n         super(ApiKeys.ALTER_CONFIGS, version);\n-        validateOnly = struct.getBoolean(VALIDATE_ONLY_KEY_NAME);\n-        Object[] resourcesArray = struct.getArray(RESOURCES_KEY_NAME);\n-        configs = new HashMap<>(resourcesArray.length);\n-        for (Object resourcesObj : resourcesArray) {\n-            Struct resourcesStruct = (Struct) resourcesObj;\n-\n-            ConfigResource.Type resourceType = ConfigResource.Type.forId(resourcesStruct.getByte(RESOURCE_TYPE_KEY_NAME));\n-            String resourceName = resourcesStruct.getString(RESOURCE_NAME_KEY_NAME);\n-            ConfigResource resource = new ConfigResource(resourceType, resourceName);\n-\n-            Object[] configEntriesArray = resourcesStruct.getArray(CONFIG_ENTRIES_KEY_NAME);\n-            List<ConfigEntry> configEntries = new ArrayList<>(configEntriesArray.length);\n-            for (Object configEntriesObj: configEntriesArray) {\n-                Struct configEntriesStruct = (Struct) configEntriesObj;\n-                String configName = configEntriesStruct.getString(CONFIG_NAME);\n-                String configValue = configEntriesStruct.getString(CONFIG_VALUE);\n-                configEntries.add(new ConfigEntry(configName, configValue));\n-            }\n-            Config config = new Config(configEntries);\n-            configs.put(resource, config);\n-        }\n+        this.data = new AlterConfigsRequestData(struct, version);\n     }\n \n     public Map<ConfigResource, Config> configs() {\n-        return configs;\n+        return data.resources().stream().collect(Collectors.toMap(\n+            resource -> new ConfigResource(\n+                    ConfigResource.Type.forId(resource.resourceType()),\n+                    resource.resourceName()),\n+            resource -> new Config(resource.configs().stream()\n+                    .map(entry -> new ConfigEntry(entry.name(), entry.value()))\n+                    .collect(Collectors.toList()))));\n     }\n \n     public boolean validateOnly() {\n-        return validateOnly;\n+        return data.validateOnly();\n     }\n \n     @Override\n     protected Struct toStruct() {\n-        Struct struct = new Struct(ApiKeys.ALTER_CONFIGS.requestSchema(version()));\n-        struct.set(VALIDATE_ONLY_KEY_NAME, validateOnly);\n-        List<Struct> resourceStructs = new ArrayList<>(configs.size());\n-        for (Map.Entry<ConfigResource, Config> entry : configs.entrySet()) {\n-            Struct resourceStruct = struct.instance(RESOURCES_KEY_NAME);\n-\n-            ConfigResource resource = entry.getKey();\n-            resourceStruct.set(RESOURCE_TYPE_KEY_NAME, resource.type().id());\n-            resourceStruct.set(RESOURCE_NAME_KEY_NAME, resource.name());\n-\n-            Config config = entry.getValue();\n-            List<Struct> configEntryStructs = new ArrayList<>(config.entries.size());\n-            for (ConfigEntry configEntry : config.entries) {\n-                Struct configEntriesStruct = resourceStruct.instance(CONFIG_ENTRIES_KEY_NAME);\n-                configEntriesStruct.set(CONFIG_NAME, configEntry.name);\n-                configEntriesStruct.set(CONFIG_VALUE, configEntry.value);\n-                configEntryStructs.add(configEntriesStruct);\n-            }\n-            resourceStruct.set(CONFIG_ENTRIES_KEY_NAME, configEntryStructs.toArray(new Struct[0]));\n-\n-            resourceStructs.add(resourceStruct);\n-        }\n-        struct.set(RESOURCES_KEY_NAME, resourceStructs.toArray(new Struct[0]));\n-        return struct;\n+        return data.toStruct(version());\n     }\n \n     @Override\n     public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         ApiError error = ApiError.fromThrowable(e);\n-        Map<ConfigResource, ApiError> errors = new HashMap<>(configs.size());\n-        for (ConfigResource resource : configs.keySet())\n-            errors.put(resource, error);\n-        return new AlterConfigsResponse(throttleTimeMs, errors);\n+        AlterConfigsResponseData data = new AlterConfigsResponseData()\n+                .setThrottleTimeMs(throttleTimeMs);\n+        for (AlterConfigsRequestData.AlterConfigsResource resource : this.data.resources()) {\n+            data.responses().add(new AlterConfigsResponseData.AlterConfigsResourceResponse()\n+                    .setResourceType(resource.resourceType())\n+                    .setResourceName(resource.resourceName())\n+                    .setErrorMessage(error.message())\n+                    .setErrorCode(error.error().code()));\n+        }\n+        return new AlterConfigsResponse(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf1121d48c5c0797332961e11c81714f2a91898"}, "originalPosition": 196}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODE2Mzk5", "url": "https://github.com/apache/kafka/pull/8315#pullrequestreview-390816399", "createdAt": "2020-04-09T13:57:16Z", "commit": {"oid": "bcf1121d48c5c0797332961e11c81714f2a91898"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 317, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}