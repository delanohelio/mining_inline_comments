{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjg4MDY2", "number": 8705, "title": "KAFKA-10029; Don't update completedReceives when channels are closed to avoid ConcurrentModificationException", "bodyText": "Committer Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-21T10:57:26Z", "url": "https://github.com/apache/kafka/pull/8705", "merged": true, "mergeCommit": {"oid": "1fd195e5c21806d3e597cf666d7132ff829f775c"}, "closed": true, "closedAt": "2020-05-29T08:32:57Z", "author": {"login": "rajinisivaram"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjtla9AFqTQxNjcyMDU4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl95uAAH2gAyNDIxMjg4MDY2OmU2MDVlMjlmNDQ1MmFhNmJmZTFlYjA3N2U5YWY5M2FjM2U1N2Q3YTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzIwNTgy", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-416720582", "createdAt": "2020-05-22T08:00:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODowMDowMVrOGZONIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODowMDowMVrOGZONIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMDMyMw==", "bodyText": "isUncaught is used by testing only so it is a bit awkward to production code. Could you check the errorMessage instead of adding new argument? for example:\nif (errorMessage == \"Processor got uncaught exception.\") uncaughtExceptions += 1", "url": "https://github.com/apache/kafka/pull/8705#discussion_r429100323", "createdAt": "2020-05-22T08:00:01Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -1742,6 +1746,12 @@ class SocketServerTest {\n            selector = Some(testableSelector)\n            testableSelector\n         }\n+\n+        override private[network] def processException(errorMessage: String, throwable: Throwable, isUncaught: Boolean): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74107fa9be8f2f4008dcca20e2db91c53519e2fa", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/74107fa9be8f2f4008dcca20e2db91c53519e2fa", "committedDate": "2020-05-26T09:57:40Z", "message": "KAFKA-10029; Don't update completedReceives when channels are closed to avoid ConcurrentModificationException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09589be517c2e9ecc912c1e2fd8d17eeda433365", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/09589be517c2e9ecc912c1e2fd8d17eeda433365", "committedDate": "2020-05-26T09:57:40Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "09589be517c2e9ecc912c1e2fd8d17eeda433365", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/09589be517c2e9ecc912c1e2fd8d17eeda433365", "committedDate": "2020-05-26T09:57:40Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f84b3e7b72c2cb2c21987cecabb04d6d22ddee", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/64f84b3e7b72c2cb2c21987cecabb04d6d22ddee", "committedDate": "2020-05-27T15:56:49Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87", "committedDate": "2020-05-27T16:04:19Z", "message": "Address review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzc3MTYy", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-419777162", "createdAt": "2020-05-28T04:57:55Z", "commit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1Nzo1NlrOGblpRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1Nzo1NlrOGblpRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUwOA==", "bodyText": "Can we add a comment explaining what we're trying to do here? It's not clear why we do (for example):\ncachedCompletedSends.update(super.completedSends.asScala) followed by\ncachedCompletedSends.currentPollValues.foreach(super.completedSends.add)", "url": "https://github.com/apache/kafka/pull/8705#discussion_r431581508", "createdAt": "2020-05-28T04:57:56Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -1875,6 +1889,14 @@ class SocketServerTest {\n         cachedCompletedReceives.update(super.completedReceives.asScala.toBuffer)\n         cachedCompletedSends.update(super.completedSends.asScala)\n         cachedDisconnected.update(super.disconnected.asScala.toBuffer)\n+\n+        val map: util.Map[String, NetworkReceive] = JTestUtils.fieldValue(this, classOf[Selector], \"completedReceives\")\n+        cachedCompletedReceives.currentPollValues.foreach { receive =>\n+          val channelOpt = Option(super.channel(receive.source)).orElse(Option(super.closingChannel(receive.source)))\n+          channelOpt.foreach { channel => map.put(channel.id, receive) }\n+        }\n+        cachedCompletedSends.currentPollValues.foreach(super.completedSends.add)\n+        cachedDisconnected.currentPollValues.foreach { case (id, state) => super.disconnected.put(id, state) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzc3NTA5", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-419777509", "createdAt": "2020-05-28T04:59:04Z", "commit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1OTowNFrOGblqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1OTowNFrOGblqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTc2Mw==", "bodyText": "What is the goal of this?", "url": "https://github.com/apache/kafka/pull/8705#discussion_r431581763", "createdAt": "2020-05-28T04:59:04Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -1807,6 +1817,7 @@ class SocketServerTest {\n           currentPollValues ++= newValues\n         } else\n           deferredValues ++= newValues\n+        newValues.clear()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzc5MjY3", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-419779267", "createdAt": "2020-05-28T05:04:53Z", "commit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowNDo1M1rOGblvlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowNDo1M1rOGblvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzEyNw==", "bodyText": "Nit: maybe after all results have been processed is a bit redundant? Same for the clearCompletedSends docs.", "url": "https://github.com/apache/kafka/pull/8705#discussion_r431583127", "createdAt": "2020-05-28T05:04:53Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/network/Selector.java", "diffHunk": "@@ -804,7 +804,33 @@ private void maybeCloseOldestConnection(long currentTimeNanos) {\n     }\n \n     /**\n-     * Clear the results from the prior poll\n+     * Clears completed receives. This is used by SocketServer to remove references to\n+     * receive buffers after processing completed receives, without waiting for the next\n+     * poll() after all results have been processed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cbe30e0cb4d17d8f4ccb2e1721e1f6527e7be87"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44db9437a46560e1f1f56cec036d69a2357bbe1", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/a44db9437a46560e1f1f56cec036d69a2357bbe1", "committedDate": "2020-05-28T09:16:09Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDkwMTQ0", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-420090144", "createdAt": "2020-05-28T13:11:00Z", "commit": {"oid": "a44db9437a46560e1f1f56cec036d69a2357bbe1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMTowMFrOGb0WRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMTowMFrOGb0WRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjQwNg==", "bodyText": "Should we call this completedReceivesMap or something?", "url": "https://github.com/apache/kafka/pull/8705#discussion_r431822406", "createdAt": "2020-05-28T13:11:00Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -1861,20 +1872,33 @@ class SocketServerTest {\n \n     override def poll(timeout: Long): Unit = {\n       try {\n+        assertEquals(0, super.completedReceives().size)\n+        assertEquals(0, super.completedSends().size)\n+\n         pollCallback.apply()\n         while (!pendingClosingChannels.isEmpty) {\n           makeClosing(pendingClosingChannels.poll())\n         }\n-        allCachedPollData.foreach(_.reset)\n         runOp(SelectorOperation.Poll, None) {\n           super.poll(pollTimeoutOverride.getOrElse(timeout))\n         }\n       } finally {\n         super.channels.forEach(allChannels += _.id)\n         allDisconnectedChannels ++= super.disconnected.asScala.keys\n-        cachedCompletedReceives.update(super.completedReceives.asScala.toBuffer)\n-        cachedCompletedSends.update(super.completedSends.asScala)\n-        cachedDisconnected.update(super.disconnected.asScala.toBuffer)\n+\n+        val map: util.Map[String, NetworkReceive] = JTestUtils.fieldValue(this, classOf[Selector], \"completedReceives\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a44db9437a46560e1f1f56cec036d69a2357bbe1"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceace47a433b930570018f256d69a9348653c5ed", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/ceace47a433b930570018f256d69a9348653c5ed", "committedDate": "2020-05-28T13:16:37Z", "message": "Address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d572d8e2cb7cf0c3d7fb40e923b6e9579845555a", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/d572d8e2cb7cf0c3d7fb40e923b6e9579845555a", "committedDate": "2020-05-28T14:04:41Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTk2NDM0", "url": "https://github.com/apache/kafka/pull/8705#pullrequestreview-420596434", "createdAt": "2020-05-29T01:29:03Z", "commit": {"oid": "d572d8e2cb7cf0c3d7fb40e923b6e9579845555a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMToyOTowM1rOGcL9gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMToyOTowM1rOGcL9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwOTI4Mw==", "bodyText": "I think your refactoring has added the comments to other places. Maybe we can add \"This allows tests to process minPerPoll elements as the results of a single poll iteration\" to the update method and remove this?", "url": "https://github.com/apache/kafka/pull/8705#discussion_r432209283", "createdAt": "2020-05-29T01:29:03Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -1886,19 +1926,13 @@ class SocketServerTest {\n         super.channels.forEach(allChannels += _.id)\n         allDisconnectedChannels ++= super.disconnected.asScala.keys\n \n-        val completedReceivesMap: util.Map[String, NetworkReceive] = JTestUtils.fieldValue(this, classOf[Selector], \"completedReceives\")\n-        def addToCompletedReceives(receive: NetworkReceive): Unit = {\n-          val channelOpt = Option(super.channel(receive.source)).orElse(Option(super.closingChannel(receive.source)))\n-          channelOpt.foreach { channel => completedReceivesMap.put(channel.id, receive) }\n-        }\n-\n         // For each result type (completedReceives/completedSends/disconnected), defer the result to a subsequent poll()\n         // if `minPerPoll` results are not yet available. When sufficient results are available, all available results\n         // including previously deferred results are returned. This allows tests to process `minPerPoll` elements as the\n         // results of a single poll iteration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d572d8e2cb7cf0c3d7fb40e923b6e9579845555a"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e605e29f4452aa6bfe1eb077e9af93ac3e57d7a8", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/e605e29f4452aa6bfe1eb077e9af93ac3e57d7a8", "committedDate": "2020-05-29T08:08:32Z", "message": "Address review comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1126, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}