{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDgyNzM4", "number": 8680, "reviewThreads": {"totalCount": 154, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzo1MToxOVrOD_G4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0MzoyMlrOED_VZw==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk5NjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzo1MToxOVrOGZnR6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyOTowNFrOGZsIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMTE0Ng==", "bodyText": "a Kafka cluster exists already and the IBP config is less than KAFKA_2_6_IV1 to an existing Kafka cluster with  IBP config less than KAFKA_2_6_IV1", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429511146", "createdAt": "2020-05-23T03:51:19Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as it\u2019s finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is less than KAFKA_2_6_IV1, but", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDY1Ng==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590656", "createdAt": "2020-05-24T01:29:04Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as it\u2019s finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is less than KAFKA_2_6_IV1, but", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMTE0Ng=="}, "originalCommit": null, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTUyNjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzoyOTowN1rOGcu3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0Nzo0MVrOGeOMmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MTIxNw==", "bodyText": "This won't make 2.6.0 release. So, perhaps we should use KAFKA_2_7 or whatever the next release is?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r432781217", "createdAt": "2020-05-29T23:29:07Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -22,7 +22,7 @@ import java.util.Properties\n \n import com.fasterxml.jackson.annotation.JsonProperty\n import com.fasterxml.jackson.core.JsonProcessingException\n-import kafka.api.{ApiVersion, KAFKA_0_10_0_IV1, LeaderAndIsr}\n+import kafka.api.{ApiVersion, KAFKA_0_10_0_IV1, KAFKA_2_6_IV1, LeaderAndIsr}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MzA2NQ==", "bodyText": "Done. Made it KAFKA_2_7_IV0.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434343065", "createdAt": "2020-06-03T06:47:41Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -22,7 +22,7 @@ import java.util.Properties\n \n import com.fasterxml.jackson.annotation.JsonProperty\n import com.fasterxml.jackson.core.JsonProcessingException\n-import kafka.api.{ApiVersion, KAFKA_0_10_0_IV1, LeaderAndIsr}\n+import kafka.api.{ApiVersion, KAFKA_0_10_0_IV1, KAFKA_2_6_IV1, LeaderAndIsr}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MTIxNw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTUzMjE0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzozMzoxOFrOGcu69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1MDozMlrOGeORQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MjA2OA==", "bodyText": "I missed this in the KIP, but it seems that long is overkilling for version. The version in request is short and the version in ZK data is int. So, perhaps this should just be short?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r432782068", "createdAt": "2020-05-29T23:33:18Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NDI1Nw==", "bodyText": "Done. I have made it int16 now. Great point.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434344257", "createdAt": "2020-06-03T06:50:32Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MjA2OA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTUzNzYyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzozNzozNVrOGcu-Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1MzowNVrOGeOVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MjkyNg==", "bodyText": "minValue > 1, maxValue > 1 => minValue >= 1, maxValue >= 1", "url": "https://github.com/apache/kafka/pull/8680#discussion_r432782926", "createdAt": "2020-05-29T23:37:35Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NTQwMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434345400", "createdAt": "2020-06-03T06:53:05Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MjkyNg=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTUzOTA3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzozODo0M1rOGcu_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo1NTowOFrOGeOZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MzE0NQ==", "bodyText": "Should we include the label too?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r432783145", "createdAt": "2020-05-29T23:38:43Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0NjI4MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434346281", "createdAt": "2020-06-03T06:55:08Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MzE0NQ=="}, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTU0MDk5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo0MDoyNVrOGcvAcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTowMTozOFrOGeStfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MzQ3Mg==", "bodyText": "serialize typically means generating binary data. Perhaps this is better called toMap()?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r432783472", "createdAt": "2020-05-29T23:40:25Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxNzAyMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434417020", "createdAt": "2020-06-03T09:01:38Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type long.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only for serialization/deserialization purposes.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final long minValue;\n+\n+    // Non-empty label for the max version key, that's used only for serialization/deserialization purposes.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final long maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only for\n+     *                      serialization/deserialization purposes.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MzQ3Mg=="}, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTIzMjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo1MzoyOVrOGdQM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMTo0OFrOGeT0eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyNzMyOA==", "bodyText": "missing license header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433327328", "createdAt": "2020-06-01T15:53:29Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTE5Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434435193", "createdAt": "2020-06-03T09:31:48Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyNzMyOA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTI5Nzg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoxMDoxN1rOGdQ15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMjo1M1rOGeT28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNzgyOQ==", "bodyText": "empty => isEmpty ?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433337829", "createdAt": "2020-06-01T16:10:17Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become\n+ * non-empty. Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ *\n+ * @see FinalizedFeatureChangeListener\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTgyNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434435824", "createdAt": "2020-06-03T09:32:53Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,85 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become\n+ * non-empty. Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ *\n+ * @see FinalizedFeatureChangeListener\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNzgyOQ=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM1NzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoyNzoyOVrOGdRbSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0ODoxNFrOGeUcdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0NzQwMQ==", "bodyText": "Could we use map {case(feature, versionLevel, _) => ...} to avoid unnamed references like _1?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433347401", "createdAt": "2020-06-01T16:27:29Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,76 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common immutable object used in the Broker to define the latest features supported by the\n+ * Broker. Also provides API to check for incompatibilities between the latest features supported\n+ * by the Broker and cluster-wide finalized features.\n+ *\n+ * NOTE: the update() and clear() APIs of this class should be used only for testing purposes.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns a reference to the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // For testing only.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // For testing only.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided finalized feature. This can happen because a provided finalized\n+   * feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The subset of input features which are incompatible. If the returned object\n+   *                    is empty, it means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Features[FinalizedVersionRange] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature)\n+        if (supportedVersions == null) {\n+          (feature, versionLevels, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (versionLevels.isIncompatibleWith(supportedVersions)) {\n+          (feature, versionLevels, \"{feature=%s, reason='%s is incompatible with %s'}\".format(\n+            feature, versionLevels, supportedVersions))\n+        } else {\n+          (feature, versionLevels, null)\n+        }\n+      }\n+    }.filter{ case(_, _, errorReason) => errorReason != null}.toList\n+\n+    if (incompatibilities.nonEmpty) {\n+      warn(\"Feature incompatibilities seen: \" + incompatibilities.map{ case(_, _, errorReason) => errorReason })\n+    }\n+    Features.finalizedFeatures(incompatibilities.map(item => (item._1, item._2)).toMap.asJava)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NTQyOA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434445428", "createdAt": "2020-06-03T09:48:14Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,76 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common immutable object used in the Broker to define the latest features supported by the\n+ * Broker. Also provides API to check for incompatibilities between the latest features supported\n+ * by the Broker and cluster-wide finalized features.\n+ *\n+ * NOTE: the update() and clear() APIs of this class should be used only for testing purposes.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns a reference to the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // For testing only.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // For testing only.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided finalized feature. This can happen because a provided finalized\n+   * feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The subset of input features which are incompatible. If the returned object\n+   *                    is empty, it means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Features[FinalizedVersionRange] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature)\n+        if (supportedVersions == null) {\n+          (feature, versionLevels, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (versionLevels.isIncompatibleWith(supportedVersions)) {\n+          (feature, versionLevels, \"{feature=%s, reason='%s is incompatible with %s'}\".format(\n+            feature, versionLevels, supportedVersions))\n+        } else {\n+          (feature, versionLevels, null)\n+        }\n+      }\n+    }.filter{ case(_, _, errorReason) => errorReason != null}.toList\n+\n+    if (incompatibilities.nonEmpty) {\n+      warn(\"Feature incompatibilities seen: \" + incompatibilities.map{ case(_, _, errorReason) => errorReason })\n+    }\n+    Features.finalizedFeatures(incompatibilities.map(item => (item._1, item._2)).toMap.asJava)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0NzQwMQ=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTQzNDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1MDozNlrOGdSLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1NjozMFrOGeUvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1OTgwNQ==", "bodyText": "The KIP doesn't seems to include this field. Could we add it to the KIP wiki?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433359805", "createdAt": "2020-06-01T16:50:36Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_6_IV1, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_6_IV1. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_6_IV1), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_6_IV1),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 2. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_6_IV1. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_6_IV1. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V0 contains 'version', 'status' and 'features' keys.\n+  val V0 = 0\n+  val CurrentVersion = V0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MDE5NQ==", "bodyText": "Sure. I will be happy to follow up on this. Trying to understand the process -- should I update the KIP and send an email as FYI to dev@kafka.apache.org ?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434450195", "createdAt": "2020-06-03T09:56:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_6_IV1, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_6_IV1. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_6_IV1), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_6_IV1),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 2. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_6_IV1. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_6_IV1. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V0 contains 'version', 'status' and 'features' keys.\n+  val V0 = 0\n+  val CurrentVersion = V0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1OTgwNQ=="}, "originalCommit": null, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTQ3ODMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzowMzo0N1rOGdSnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNjo1MFrOGeUAkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2Njg3MQ==", "bodyText": "InterruptedException can be thrown if the thread is shut down explicitly. In this case, we probably don't want to throw RuntimeException to the caller.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433366871", "createdAt": "2020-06-01T17:03:47Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzODI4OA==", "bodyText": "Done. Removed the catch clause and exception wrapping.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434438288", "createdAt": "2020-06-03T09:36:50Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2Njg3MQ=="}, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTUxNzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoxNjoxN1rOGdTAfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NzoxMVrOGeUaMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MzMwOQ==", "bodyText": "Hmm, could we just use config.zkConnectionTimeoutMs for this, instead of introducing a new config?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433373309", "createdAt": "2020-06-01T17:16:17Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -442,6 +445,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesProp = \"controlled.shutdown.max.retries\"\n   val ControlledShutdownRetryBackoffMsProp = \"controlled.shutdown.retry.backoff.ms\"\n   val ControlledShutdownEnableProp = \"controlled.shutdown.enable\"\n+  /** ********* Features configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsProp = \"feature.listener.cache.update.wait.ms\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDg0OA==", "bodyText": "Done. Great point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434444848", "createdAt": "2020-06-03T09:47:11Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -442,6 +445,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesProp = \"controlled.shutdown.max.retries\"\n   val ControlledShutdownRetryBackoffMsProp = \"controlled.shutdown.retry.backoff.ms\"\n   val ControlledShutdownEnableProp = \"controlled.shutdown.enable\"\n+  /** ********* Features configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsProp = \"feature.listener.cache.update.wait.ms\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MzMwOQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTUzMDY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyMDoyM1rOGdTI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0Njo1NVrOGeUZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NTQ1OQ==", "bodyText": "Hmm, is waitOnceForCacheUpdateMs <=0 supported? In that case, it seems that we still need to read the /features path in ZK?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433375459", "createdAt": "2020-06-01T17:20:23Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0NDcxNg==", "bodyText": "Done. I have changed the code disallowing values <= 0.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434444716", "createdAt": "2020-06-03T09:46:55Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3NTQ1OQ=="}, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU3MTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMjo1OFrOGdTjcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0MToxNlrOGeUL8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjI1Nw==", "bodyText": "If this thread is being closed, the InterruptedException is expected and we don't need to log this.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433382257", "createdAt": "2020-06-01T17:32:58Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MTIwMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434441200", "createdAt": "2020-06-03T09:41:16Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjI1Nw=="}, "originalCommit": null, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU4NDk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNzoxMlrOGdTsGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0NDoxMFrOGeUS_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDQ3NQ==", "bodyText": "Hmm, this just kills the thread, but not the broker as the comment says. Also, not sure about killing the broker. We probably should just log an error and continue since this is not necessarily fatal.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433384475", "createdAt": "2020-06-01T17:37:12Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MzAwNw==", "bodyText": "It kills the broker because ShutdownableThread catches FatalExitError and triggers exit sequence: \n  \n    \n      kafka/core/src/main/scala/kafka/utils/ShutdownableThread.scala\n    \n    \n        Lines 98 to 102\n      in\n      b8d609c\n    \n    \n    \n    \n\n        \n          \n           case e: FatalExitError => \n        \n\n        \n          \n             shutdownInitiated.countDown() \n        \n\n        \n          \n             shutdownComplete.countDown() \n        \n\n        \n          \n             info(\"Stopped\") \n        \n\n        \n          \n             Exit.exit(e.statusCode()) \n        \n    \n  \n\n\nI have updated the comment to use the word \"eventually\".\nRegarding logging fatal and continuing -- the exception caught here almost always indicates a feature incompatibility, and, that means the broker can cause damage if it sticks around. That is why I felt it is better to kill the broker in such a rare incompatibility case.\nPlease, let me know your thoughts.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434443007", "createdAt": "2020-06-03T09:44:10Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,219 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status, clearing feature cache.\")\n+          FinalizedFeatureCache.clear()\n+        } else if (featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDQ3NQ=="}, "originalCommit": null, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY1Mjc2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo1ODowM1rOGdUYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyNjoyMFrOGeTniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTcyNw==", "bodyText": "Hmm, the epoch returned from ZK is int32. Does FinalizedFeaturesEpoch need to be int64?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433395727", "createdAt": "2020-06-01T17:58:03Z", "author": {"login": "junrao"}, "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "diffHunk": "@@ -42,6 +42,33 @@\n         \"about\": \"The maximum supported version, inclusive.\" }\n     ]},\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n-      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" }\n+      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },\n+    { \"name\":  \"SupportedFeatures\", \"type\": \"[]SupportedFeatureKey\",\n+      \"versions\":  \"3+\", \"tag\": 0, \"taggedVersions\": \"3+\",\n+      \"about\": \"Features supported by the broker.\",\n+      \"fields\":  [\n+        { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"3+\", \"mapKey\": true,\n+          \"about\": \"The name of the feature.\" },\n+        { \"name\": \"MinVersion\", \"type\": \"int64\", \"versions\": \"3+\",\n+          \"about\": \"The minimum supported version for the feature.\" },\n+        { \"name\": \"MaxVersion\", \"type\": \"int64\", \"versions\": \"3+\",\n+          \"about\": \"The maximum supported version for the feature.\" }\n+      ]\n+    },\n+    {\"name\": \"FinalizedFeaturesEpoch\", \"type\": \"int64\", \"versions\": \"3+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTg4MA==", "bodyText": "Done. Changed to int32 now. Great point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434431880", "createdAt": "2020-06-03T09:26:20Z", "author": {"login": "kowshik"}, "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "diffHunk": "@@ -42,6 +42,33 @@\n         \"about\": \"The maximum supported version, inclusive.\" }\n     ]},\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n-      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" }\n+      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },\n+    { \"name\":  \"SupportedFeatures\", \"type\": \"[]SupportedFeatureKey\",\n+      \"versions\":  \"3+\", \"tag\": 0, \"taggedVersions\": \"3+\",\n+      \"about\": \"Features supported by the broker.\",\n+      \"fields\":  [\n+        { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"3+\", \"mapKey\": true,\n+          \"about\": \"The name of the feature.\" },\n+        { \"name\": \"MinVersion\", \"type\": \"int64\", \"versions\": \"3+\",\n+          \"about\": \"The minimum supported version for the feature.\" },\n+        { \"name\": \"MaxVersion\", \"type\": \"int64\", \"versions\": \"3+\",\n+          \"about\": \"The maximum supported version for the feature.\" }\n+      ]\n+    },\n+    {\"name\": \"FinalizedFeaturesEpoch\", \"type\": \"int64\", \"versions\": \"3+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NTcyNw=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY3NTgwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNToxNlrOGdUnFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyMDowMlrOGeTZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5OTU3NQ==", "bodyText": "Hmm, why is FinalizedFeaturesEpoch an optional but latestSupportedFeatures is not?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433399575", "createdAt": "2020-06-01T18:05:16Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        long finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODE3Mw==", "bodyText": "It's because non-existing supported features can be represented by an empty map (i.e. broker does not advertise any features). But on the other hand, non-existing finalized features can not be represented by empty map alone, as we need a suitable epoch value that indicates the absence of finalized features. To address this case, I saw 2 ways:\n\nProvide a negative epoch value indicating absence of finalized features, OR\nRepresent using an empty Optional for both finalized features and epoch.\n\nI chose the latter approach. Please, let me know if you have concerns.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434428173", "createdAt": "2020-06-03T09:20:02Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        long finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5OTU3NQ=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY3ODI3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNjowNlrOGdUozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyNToyN1rOGeTlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMDAxMg==", "bodyText": "Should we add public methods for accessing those fields?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433400012", "createdAt": "2020-06-01T18:06:06Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        long finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponse(\n+        int throttleTimeMs,\n+        final byte minMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTMzMA==", "bodyText": "I had added such APIs previously. But @abbccdda wanted these removed, as they are not currently unused. Please refer to this comment: #8680 (comment).\nPlease, let me know, and I can add them back if you prefer.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434431330", "createdAt": "2020-06-03T09:25:27Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        long finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponse(\n+        int throttleTimeMs,\n+        final byte minMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMDAxMg=="}, "originalCommit": null, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY5NDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Broker.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxMToyNlrOGdUzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMDozMFrOGeTxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMjc4NA==", "bodyText": "It doesn't seem we store security protocol map in the broker registration.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433402784", "createdAt": "2020-06-01T18:11:26Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,22 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n- * Each end-point is (host, port, listenerName).\n+ *\n+ * @param id          a broker id\n+ * @param endPoints   a collection of: end-point and a listener to security protocol map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNDM4MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434434381", "createdAt": "2020-06-03T09:30:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,22 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n- * Each end-point is (host, port, listenerName).\n+ *\n+ * @param id          a broker id\n+ * @param endPoints   a collection of: end-point and a listener to security protocol map.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMjc4NA=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY5NzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Broker.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxMjoyNVrOGdU1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMToxMFrOGeTy9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMzI2MA==", "bodyText": "Should we include the new field in toString()?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433403260", "createdAt": "2020-06-01T18:12:25Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -54,7 +64,7 @@ case class Broker(id: Int, endPoints: Seq[EndPoint], rack: Option[String]) {\n     s\"$id : ${endPointsMap.values.mkString(\"(\",\",\",\")\")} : ${rack.orNull}\"\n \n   def this(id: Int, host: String, port: Int, listenerName: ListenerName, protocol: SecurityProtocol) = {\n-    this(id, Seq(EndPoint(host, port, listenerName, protocol)), None)\n+    this(id, Seq(EndPoint(host, port, listenerName, protocol)), None, emptySupportedFeatures)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNDgwNA==", "bodyText": "Done. Nice catch!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434434804", "createdAt": "2020-06-03T09:31:10Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -54,7 +64,7 @@ case class Broker(id: Int, endPoints: Seq[EndPoint], rack: Option[String]) {\n     s\"$id : ${endPointsMap.values.mkString(\"(\",\",\",\")\")} : ${rack.orNull}\"\n \n   def this(id: Int, host: String, port: Int, listenerName: ListenerName, protocol: SecurityProtocol) = {\n-    this(id, Seq(EndPoint(host, port, listenerName, protocol)), None)\n+    this(id, Seq(EndPoint(host, port, listenerName, protocol)), None, emptySupportedFeatures)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMzI2MA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc0MDI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyNToyMlrOGdVPmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo1MzozMFrOGeUoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTk0NA==", "bodyText": "The existing comments seem incorrect since we don't store listener_security_protocol_map in ZK.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r433409944", "createdAt": "2020-06-01T18:25:22Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -196,6 +219,19 @@ object BrokerIdZNode {\n     *   \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},\n     *   \"rack\":\"dc1\"\n     * }\n+    *\n+    * Version 5 (current) JSON schema for a broker is:\n+    * {\n+    *   \"version\":5,\n+    *   \"host\":\"localhost\",\n+    *   \"port\":9092,\n+    *   \"jmx_port\":9999,\n+    *   \"timestamp\":\"2233345666\",\n+    *   \"endpoints\":[\"CLIENT://host1:9092\", \"REPLICATION://host1:9093\"],\n+    *   \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0ODQ1NQ==", "bodyText": "Done. Removed. Great catch!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r434448455", "createdAt": "2020-06-03T09:53:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -196,6 +219,19 @@ object BrokerIdZNode {\n     *   \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},\n     *   \"rack\":\"dc1\"\n     * }\n+    *\n+    * Version 5 (current) JSON schema for a broker is:\n+    * {\n+    *   \"version\":5,\n+    *   \"host\":\"localhost\",\n+    *   \"port\":9092,\n+    *   \"jmx_port\":9999,\n+    *   \"timestamp\":\"2233345666\",\n+    *   \"endpoints\":[\"CLIENT://host1:9092\", \"REPLICATION://host1:9093\"],\n+    *   \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTk0NA=="}, "originalCommit": null, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjk3NTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo1NjoxNVrOGfXfOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowNToxNFrOGgRdQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0Mzg2NQ==", "bodyText": "To handle ZK session expiration, we need to register a StateChangeHandler. That way, we can read the /features path from ZK when the new session is established since the feature could have changed btw the old and the new ZK sessions. See object ZkStateChangeHandler as an example.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435543865", "createdAt": "2020-06-04T20:56:15Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,231 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    if (waitOnceForCacheUpdateMs <= 0) {\n+      throw new IllegalArgumentException(\n+        s\"Expected waitOnceForCacheUpdateMs > 0, but provided: $waitOnceForCacheUpdateMs\")\n+    }\n+\n+    thread.start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzYzMw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436493633", "createdAt": "2020-06-08T07:05:14Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,231 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    if (waitOnceForCacheUpdateMs <= 0) {\n+      throw new IllegalArgumentException(\n+        s\"Expected waitOnceForCacheUpdateMs > 0, but provided: $waitOnceForCacheUpdateMs\")\n+    }\n+\n+    thread.start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0Mzg2NQ=="}, "originalCommit": null, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA2OTAxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyMDozNVrOGfYZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0OToxNFrOGgUjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1ODY4Mw==", "bodyText": "Could we pass in Optional<FinalizedFeaturesAndEpoch> instead of two separate Optional?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435558683", "createdAt": "2020-06-04T21:20:35Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Integer> finalizedFeaturesEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NDQwOQ==", "bodyText": "Done. I'm no longer passing 2 optionals, since, we decided (below) that epoch can be set as -1 whenever it is absent.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436544409", "createdAt": "2020-06-08T08:49:14Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +127,44 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.empty(), Optional.empty());\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Optional.of(finalizedFeatures), Optional.of(finalizedFeaturesEpoch));\n+    }\n+\n+    private static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Optional<Features<FinalizedVersionRange>> finalizedFeatures,\n+        Optional<Integer> finalizedFeaturesEpoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1ODY4Mw=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA4Mzk3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyMzoyOVrOGfYh7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0NzowNVrOGgUfEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MDk0MQ==", "bodyText": "If finalizedFeaturesEpoch is not present, we probably want to set the field to sth like -1 instead of leaving it as the default value of 0.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435560941", "createdAt": "2020-06-04T21:23:29Z", "author": {"login": "junrao"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -135,7 +179,42 @@ public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs,\n         data.setThrottleTimeMs(throttleTimeMs);\n         data.setErrorCode(Errors.NONE.code());\n         data.setApiKeys(apiKeys);\n+        data.setSupportedFeatures(createSupportedFeatureKeys(latestSupportedFeatures));\n+        if (finalizedFeatures.isPresent()) {\n+            data.setFinalizedFeatures(createFinalizedFeatureKeys(finalizedFeatures.get()));\n+        }\n+        if (finalizedFeaturesEpoch.isPresent()) {\n+            data.setFinalizedFeaturesEpoch(finalizedFeaturesEpoch.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MzI1MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436543251", "createdAt": "2020-06-08T08:47:05Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -135,7 +179,42 @@ public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs,\n         data.setThrottleTimeMs(throttleTimeMs);\n         data.setErrorCode(Errors.NONE.code());\n         data.setApiKeys(apiKeys);\n+        data.setSupportedFeatures(createSupportedFeatureKeys(latestSupportedFeatures));\n+        if (finalizedFeatures.isPresent()) {\n+            data.setFinalizedFeatures(createFinalizedFeatureKeys(finalizedFeatures.get()));\n+        }\n+        if (finalizedFeaturesEpoch.isPresent()) {\n+            data.setFinalizedFeaturesEpoch(finalizedFeaturesEpoch.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MDk0MQ=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA5Mjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Broker.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyNjoxNVrOGfYnZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowNDo0NVrOGgRccg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MjM0MQ==", "bodyText": "The comment can be a bit misleading since features is not Optional.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435562341", "createdAt": "2020-06-04T21:26:15Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,21 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n- * Each end-point is (host, port, listenerName).\n+ *\n+ * @param id          a broker id\n+ * @param endPoints   a collection of EndPoint. Each end-point is (host, port, listener name, security protocol).\n+ * @param rack        an optional rack\n+ * @param features    optional supported features", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzQyNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436493426", "createdAt": "2020-06-08T07:04:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,21 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n- * Each end-point is (host, port, listenerName).\n+ *\n+ * @param id          a broker id\n+ * @param endPoints   a collection of EndPoint. Each end-point is (host, port, listener name, security protocol).\n+ * @param rack        an optional rack\n+ * @param features    optional supported features", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MjM0MQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEyNjgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozOToxMFrOGfY9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowNjoxNlrOGgRe4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Nzk0Mg==", "bodyText": "It's probably better to close this before zkClient since the close call unregister from zkClient.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435567942", "createdAt": "2020-06-04T21:39:10Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -660,6 +674,10 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         if (zkClient != null)\n           CoreUtils.swallow(zkClient.close(), this)\n \n+        if (featureChangeListener != null) {\n+          CoreUtils.swallow(featureChangeListener.close(), this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NDA0OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436494049", "createdAt": "2020-06-08T07:06:16Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -660,6 +674,10 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         if (zkClient != null)\n           CoreUtils.swallow(zkClient.close(), this)\n \n+        if (featureChangeListener != null) {\n+          CoreUtils.swallow(featureChangeListener.close(), this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Nzk0Mg=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMwMzM0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1MzowMlrOGfapMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoyNjozNlrOGgTzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU3MQ==", "bodyText": "The name of the method probably should include failure?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435595571", "createdAt": "2020-06-04T22:53:02Z", "author": {"login": "junrao"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Short>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertTrue(emptyFinalizedFeatures.features().isEmpty());\n+        assertTrue(emptyFinalizedFeatures.toMap().isEmpty());\n+        assertEquals(emptyFinalizedFeatures, Features.fromFinalizedFeaturesMap(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertTrue(emptySupportedFeatures.features().isEmpty());\n+        assertTrue(emptySupportedFeatures.toMap().isEmpty());\n+        assertEquals(emptySupportedFeatures, Features.fromSupportedFeaturesMap(emptyMap));\n+    }\n+\n+    @Test\n+    public void testNullFeatures() {\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.finalizedFeatures(null));\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.supportedFeatures(null));\n+    }\n+\n+    @Test\n+    public void testGetAllFeaturesAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures =\n+            mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.features());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testFromFeaturesMapToFeaturesMap() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version\", (short) 1), mkEntry(\"max_version\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version\", (short) 3), mkEntry(\"max_version\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromSupportedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testFromToFinalizedFeaturesMap() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version_level\", (short) 1), mkEntry(\"max_version_level\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version_level\", (short) 3), mkEntry(\"max_version_level\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromFinalizedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testToStringFinalizedFeatures() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> FinalizedVersionRange[min_version_level:1, max_version_level:2]), (feature_2 -> FinalizedVersionRange[min_version_level:3, max_version_level:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testToStringSupportedFeatures() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures\n+            = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> SupportedVersionRange[min_version:1, max_version:2]), (feature_2 -> SupportedVersionRange[min_version:3, max_version:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testFromToSupportedFeaturesMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjE0Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436532143", "createdAt": "2020-06-08T08:26:36Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Short>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertTrue(emptyFinalizedFeatures.features().isEmpty());\n+        assertTrue(emptyFinalizedFeatures.toMap().isEmpty());\n+        assertEquals(emptyFinalizedFeatures, Features.fromFinalizedFeaturesMap(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertTrue(emptySupportedFeatures.features().isEmpty());\n+        assertTrue(emptySupportedFeatures.toMap().isEmpty());\n+        assertEquals(emptySupportedFeatures, Features.fromSupportedFeaturesMap(emptyMap));\n+    }\n+\n+    @Test\n+    public void testNullFeatures() {\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.finalizedFeatures(null));\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.supportedFeatures(null));\n+    }\n+\n+    @Test\n+    public void testGetAllFeaturesAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures =\n+            mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.features());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testFromFeaturesMapToFeaturesMap() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version\", (short) 1), mkEntry(\"max_version\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version\", (short) 3), mkEntry(\"max_version\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromSupportedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testFromToFinalizedFeaturesMap() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version_level\", (short) 1), mkEntry(\"max_version_level\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version_level\", (short) 3), mkEntry(\"max_version_level\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromFinalizedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testToStringFinalizedFeatures() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> FinalizedVersionRange[min_version_level:1, max_version_level:2]), (feature_2 -> FinalizedVersionRange[min_version_level:3, max_version_level:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testToStringSupportedFeatures() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures\n+            = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> SupportedVersionRange[min_version:1, max_version:2]), (feature_2 -> SupportedVersionRange[min_version:3, max_version:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testFromToSupportedFeaturesMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU3MQ=="}, "originalCommit": null, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMwNTY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1NDowMFrOGfaqiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowOTo0OFrOGgRkLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTkxNQ==", "bodyText": "missing license header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435595915", "createdAt": "2020-06-04T22:54:00Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "diffHunk": "@@ -0,0 +1,111 @@\n+package kafka.zk", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTQwNQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436495405", "createdAt": "2020-06-08T07:09:48Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "diffHunk": "@@ -0,0 +1,111 @@\n+package kafka.zk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTkxNQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMwODk1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1NTozNlrOGfascQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoxMDoyOFrOGgRlLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NjQwMQ==", "bodyText": "Could we just assertEquals(featureZNode, decoded)?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435596401", "createdAt": "2020-06-04T22:55:36Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "diffHunk": "@@ -0,0 +1,111 @@\n+package kafka.zk\n+\n+import java.nio.charset.StandardCharsets\n+\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+import org.junit.Assert.{assertEquals, assertThrows}\n+import org.junit.Test\n+\n+import scala.jdk.CollectionConverters._\n+\n+class FeatureZNodeTest {\n+\n+  @Test\n+  def testEncodeDecode(): Unit = {\n+    val featureZNode = FeatureZNode(\n+      FeatureZNodeStatus.Enabled,\n+      Features.finalizedFeatures(\n+        Map[String, FinalizedVersionRange](\n+          \"feature1\" -> new FinalizedVersionRange(1, 2),\n+          \"feature2\" -> new FinalizedVersionRange(2, 4)).asJava))\n+    val decoded = FeatureZNode.decode(FeatureZNode.encode(featureZNode))\n+    assertEquals(featureZNode.status, decoded.status)\n+    assertEquals(featureZNode.features, decoded.features)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTY2MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436495661", "createdAt": "2020-06-08T07:10:28Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/kafka/zk/FeatureZNodeTest.scala", "diffHunk": "@@ -0,0 +1,111 @@\n+package kafka.zk\n+\n+import java.nio.charset.StandardCharsets\n+\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+import org.junit.Assert.{assertEquals, assertThrows}\n+import org.junit.Test\n+\n+import scala.jdk.CollectionConverters._\n+\n+class FeatureZNodeTest {\n+\n+  @Test\n+  def testEncodeDecode(): Unit = {\n+    val featureZNode = FeatureZNode(\n+      FeatureZNodeStatus.Enabled,\n+      Features.finalizedFeatures(\n+        Map[String, FinalizedVersionRange](\n+          \"feature1\" -> new FinalizedVersionRange(1, 2),\n+          \"feature2\" -> new FinalizedVersionRange(2, 4)).asJava))\n+    val decoded = FeatureZNode.decode(FeatureZNode.encode(featureZNode))\n+    assertEquals(featureZNode.status, decoded.status)\n+    assertEquals(featureZNode.features, decoded.features)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NjQwMQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMxNzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1OTozOVrOGfaxsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowODo0NlrOGgRinw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5Nzc0NQ==", "bodyText": "version > CurrentVersion means that we can't downgrade the broker. We will need to relax this check.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435597745", "createdAt": "2020-06-04T22:59:39Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +781,165 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_6_IV1, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_6_IV1. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_6_IV1), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_6_IV1),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 2. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_6_IV1. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_6_IV1. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V0 contains 'version', 'status' and 'features' keys.\n+  val V0 = 0\n+  val CurrentVersion = V0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Short]]): util.Map[String, util.Map[String, java.lang.Short]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaShort => java.lang.Short.valueOf(scalaShort)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.toMap)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  /**\n+   * Decodes the contents of the feature ZK node from Array[Byte] to a FeatureZNode.\n+   *\n+   * @param jsonBytes   the contents of the feature ZK node\n+   *\n+   * @return            the FeatureZNode created from jsonBytes\n+   *\n+   * @throws IllegalArgumentException   if the Array[Byte] can not be decoded.\n+   */\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < V0 || version > CurrentVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTAwNw==", "bodyText": "Done. Great point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436495007", "createdAt": "2020-06-08T07:08:46Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +781,165 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_6_IV1, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_6_IV1. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_6_IV1), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_6_IV1),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 2. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_6_IV1. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_6_IV1. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V0 contains 'version', 'status' and 'features' keys.\n+  val V0 = 0\n+  val CurrentVersion = V0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Short]]): util.Map[String, util.Map[String, java.lang.Short]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaShort => java.lang.Short.valueOf(scalaShort)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.toMap)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  /**\n+   * Decodes the contents of the feature ZK node from Array[Byte] to a FeatureZNode.\n+   *\n+   * @param jsonBytes   the contents of the feature ZK node\n+   *\n+   * @return            the FeatureZNode created from jsonBytes\n+   *\n+   * @throws IllegalArgumentException   if the Array[Byte] can not be decoded.\n+   */\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < V0 || version > CurrentVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5Nzc0NQ=="}, "originalCommit": null, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMyNTUyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzowMzoyMlrOGfa2bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoxMToyMVrOGgRmow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5ODk1Ng==", "bodyText": "missing license header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435598956", "createdAt": "2020-06-04T23:03:22Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "diffHunk": "@@ -0,0 +1,99 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NjAzNQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436496035", "createdAt": "2020-06-08T07:11:21Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "diffHunk": "@@ -0,0 +1,99 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5ODk1Ng=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMzODk0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoxMDozMVrOGfa-5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoxMTo1NFrOGgRnfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTEyNA==", "bodyText": "missing license header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435601124", "createdAt": "2020-06-04T23:10:31Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NjI1NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436496254", "createdAt": "2020-06-08T07:11:54Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwMTEyNA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM2MzQwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyMzoyMlrOGfbN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1Mzo1MlrOGgSxdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDk2NA==", "bodyText": "Hmm, if the feature is disabled, it seems that updatedFinalizedFeatures shouldn't be reflected in the cache, right?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435604964", "createdAt": "2020-06-04T23:23:22Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  private def createSupportedFeatures(): Features[SupportedVersionRange] = {\n+    val supportedFeaturesMap = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeaturesMap.asJava))\n+    SupportedFeatures.get\n+  }\n+\n+  private def createFinalizedFeatures(): FinalizedFeaturesAndEpoch = {\n+    val finalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val finalizedFeatures = Features.finalizedFeatures(finalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, finalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(version, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+    FinalizedFeaturesAndEpoch(finalizedFeatures, version)\n+  }\n+\n+  private def createListener(expectedCacheContent: Option[FinalizedFeaturesAndEpoch]): FinalizedFeatureChangeListener = {\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.isEmpty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    if (expectedCacheContent.isDefined) {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertFalse(mayBeNewCacheContent.isEmpty)\n+      val newCacheContent = mayBeNewCacheContent.get\n+      assertEquals(expectedCacheContent.get.features, newCacheContent.features)\n+      assertEquals(expectedCacheContent.get.epoch, newCacheContent.epoch)\n+    } else {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertTrue(mayBeNewCacheContent.isEmpty)\n+    }\n+    listener\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    zkClient.deleteFeatureZNode()\n+    val (mayBeFeatureZNodeDeletedBytes, deletedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertEquals(deletedVersion, ZkVersion.UnknownVersion)\n+    assertTrue(mayBeFeatureZNodeDeletedBytes.isEmpty)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.isEmpty\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process disabling of a FeatureZNode\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDisablingNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange]()\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Disabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.isDefined &&\n+        FinalizedFeatureCache.get.get.features.equals(updatedFinalizedFeatures) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTE5MA==", "bodyText": "Done. I have modified the code such that FeatureCacheUpdater.updateLatestOrThrow will now clear the cache whenever it sees that the feature ZK node is disabled.\nGreat point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436515190", "createdAt": "2020-06-08T07:53:52Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  private def createSupportedFeatures(): Features[SupportedVersionRange] = {\n+    val supportedFeaturesMap = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeaturesMap.asJava))\n+    SupportedFeatures.get\n+  }\n+\n+  private def createFinalizedFeatures(): FinalizedFeaturesAndEpoch = {\n+    val finalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val finalizedFeatures = Features.finalizedFeatures(finalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, finalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(version, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+    FinalizedFeaturesAndEpoch(finalizedFeatures, version)\n+  }\n+\n+  private def createListener(expectedCacheContent: Option[FinalizedFeaturesAndEpoch]): FinalizedFeatureChangeListener = {\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.isEmpty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    if (expectedCacheContent.isDefined) {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertFalse(mayBeNewCacheContent.isEmpty)\n+      val newCacheContent = mayBeNewCacheContent.get\n+      assertEquals(expectedCacheContent.get.features, newCacheContent.features)\n+      assertEquals(expectedCacheContent.get.epoch, newCacheContent.epoch)\n+    } else {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertTrue(mayBeNewCacheContent.isEmpty)\n+    }\n+    listener\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    zkClient.deleteFeatureZNode()\n+    val (mayBeFeatureZNodeDeletedBytes, deletedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertEquals(deletedVersion, ZkVersion.UnknownVersion)\n+    assertTrue(mayBeFeatureZNodeDeletedBytes.isEmpty)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.isEmpty\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process disabling of a FeatureZNode\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDisablingNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange]()\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Disabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.isDefined &&\n+        FinalizedFeatureCache.get.get.features.equals(updatedFinalizedFeatures) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNDk2NA=="}, "originalCommit": null, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM3MTQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyNzo0N1rOGfbSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxMTozNlrOGgTVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjIyMw==", "bodyText": "Do we want to throw an Exception here?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435606223", "createdAt": "2020-06-04T23:27:47Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  private def createSupportedFeatures(): Features[SupportedVersionRange] = {\n+    val supportedFeaturesMap = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeaturesMap.asJava))\n+    SupportedFeatures.get\n+  }\n+\n+  private def createFinalizedFeatures(): FinalizedFeaturesAndEpoch = {\n+    val finalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val finalizedFeatures = Features.finalizedFeatures(finalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, finalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(version, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+    FinalizedFeaturesAndEpoch(finalizedFeatures, version)\n+  }\n+\n+  private def createListener(expectedCacheContent: Option[FinalizedFeaturesAndEpoch]): FinalizedFeatureChangeListener = {\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.isEmpty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    if (expectedCacheContent.isDefined) {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertFalse(mayBeNewCacheContent.isEmpty)\n+      val newCacheContent = mayBeNewCacheContent.get\n+      assertEquals(expectedCacheContent.get.features, newCacheContent.features)\n+      assertEquals(expectedCacheContent.get.epoch, newCacheContent.epoch)\n+    } else {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertTrue(mayBeNewCacheContent.isEmpty)\n+    }\n+    listener\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    zkClient.deleteFeatureZNode()\n+    val (mayBeFeatureZNodeDeletedBytes, deletedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertEquals(deletedVersion, ZkVersion.UnknownVersion)\n+    assertTrue(mayBeFeatureZNodeDeletedBytes.isEmpty)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.isEmpty\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process disabling of a FeatureZNode\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDisablingNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange]()\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Disabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.isDefined &&\n+        FinalizedFeatureCache.get.get.features.equals(updatedFinalizedFeatures) &&\n+        FinalizedFeatureCache.get.get.epoch == updatedVersion\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener initialization fails when it picks up a feature incompatibility from\n+   * ZK from an \"Enabled\" FeatureZNode.\n+   */\n+  @Test\n+  def testInitFailureDueToFeatureIncompatibility(): Unit = {\n+    createSupportedFeatures()\n+\n+    val incompatibleFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 5))\n+    val incompatibleFinalizedFeatures = Features.finalizedFeatures(incompatibleFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, incompatibleFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    Exit.setExitProcedure((status, _) => throw new FatalExitError(status))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNDQxNA==", "bodyText": "Done. Changed it to use a latch that gets notified when the exit procedure is called.\nGreat point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436524414", "createdAt": "2020-06-08T08:11:36Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,185 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  private def createSupportedFeatures(): Features[SupportedVersionRange] = {\n+    val supportedFeaturesMap = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeaturesMap.asJava))\n+    SupportedFeatures.get\n+  }\n+\n+  private def createFinalizedFeatures(): FinalizedFeaturesAndEpoch = {\n+    val finalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val finalizedFeatures = Features.finalizedFeatures(finalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, finalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(version, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+    FinalizedFeaturesAndEpoch(finalizedFeatures, version)\n+  }\n+\n+  private def createListener(expectedCacheContent: Option[FinalizedFeaturesAndEpoch]): FinalizedFeatureChangeListener = {\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.isEmpty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    if (expectedCacheContent.isDefined) {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertFalse(mayBeNewCacheContent.isEmpty)\n+      val newCacheContent = mayBeNewCacheContent.get\n+      assertEquals(expectedCacheContent.get.features, newCacheContent.features)\n+      assertEquals(expectedCacheContent.get.epoch, newCacheContent.epoch)\n+    } else {\n+      val mayBeNewCacheContent = FinalizedFeatureCache.get\n+      assertTrue(mayBeNewCacheContent.isEmpty)\n+    }\n+    listener\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    zkClient.deleteFeatureZNode()\n+    val (mayBeFeatureZNodeDeletedBytes, deletedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertEquals(deletedVersion, ZkVersion.UnknownVersion)\n+    assertTrue(mayBeFeatureZNodeDeletedBytes.isEmpty)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.isEmpty\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process disabling of a FeatureZNode\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDisablingNotificationProcessing(): Unit = {\n+    createSupportedFeatures()\n+    val initialFinalizedFeatures = createFinalizedFeatures()\n+    val listener = createListener(Some(initialFinalizedFeatures))\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange]()\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Disabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialFinalizedFeatures.epoch)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.isDefined &&\n+        FinalizedFeatureCache.get.get.features.equals(updatedFinalizedFeatures) &&\n+        FinalizedFeatureCache.get.get.epoch == updatedVersion\n+    }, \"Timed out waiting for FinalizedFeatureCache to become empty\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener initialization fails when it picks up a feature incompatibility from\n+   * ZK from an \"Enabled\" FeatureZNode.\n+   */\n+  @Test\n+  def testInitFailureDueToFeatureIncompatibility(): Unit = {\n+    createSupportedFeatures()\n+\n+    val incompatibleFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 5))\n+    val incompatibleFinalizedFeatures = Features.finalizedFeatures(incompatibleFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, incompatibleFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    Exit.setExitProcedure((status, _) => throw new FatalExitError(status))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjIyMw=="}, "originalCommit": null, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM3ODI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/SupportedFeaturesTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozMTo1NFrOGfbXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNjo1NlrOGgTfmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNzM5MQ==", "bodyText": "missing license header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r435607391", "createdAt": "2020-06-04T23:31:54Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/server/SupportedFeaturesTest.scala", "diffHunk": "@@ -0,0 +1,39 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNzAwMw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436527003", "createdAt": "2020-06-08T08:16:56Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/SupportedFeaturesTest.scala", "diffHunk": "@@ -0,0 +1,39 @@\n+package kafka.server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNzM5MQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjY2OTMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjo1NDo0M1rOGgzHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzo1Njo1M1rOGg367g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0NTA4MQ==", "bodyText": "This is not really \"change-notification\". So, the name can just be FeatureZNode.path.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437045081", "createdAt": "2020-06-08T22:54:43Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  object ZkStateChangeHandler extends StateChangeHandler {\n+    val path: String = FeatureZNode.path\n+\n+    override val name: String = s\"change-notification-$path\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMzgyMg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437123822", "createdAt": "2020-06-09T03:56:53Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  object ZkStateChangeHandler extends StateChangeHandler {\n+    val path: String = FeatureZNode.path\n+\n+    override val name: String = s\"change-notification-$path\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0NTA4MQ=="}, "originalCommit": null, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjY5NDk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowNjo0OVrOGgzW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzo1NzoyOVrOGg37fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTA3Mg==", "bodyText": "2.6.x => 2.7.x", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437049072", "createdAt": "2020-06-08T23:06:49Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMzk2NQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437123965", "createdAt": "2020-06-09T03:57:29Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTA3Mg=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjY5NTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowNzoxOVrOGgzXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzo1Nzo1M1rOGg373Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTIyNw==", "bodyText": "2.6.x => 2.7.x", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437049227", "createdAt": "2020-06-08T23:07:19Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNDA2MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437124061", "createdAt": "2020-06-09T03:57:53Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTIyNw=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzI4NTUyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToxMDoyN1rOGg49pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDoyMDozOFrOGhkUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MDkwMA==", "bodyText": "nit: we could use Utils.mkMap here", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437140900", "createdAt": "2020-06-09T05:10:27Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type short.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to convert the version range to a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only to convert to/from a map.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final short minValue;\n+\n+    // Non-empty label for the max version key, that's used only to convert to/from a map.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final short maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only to convert to/from a map.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only to convert to/from a map.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, short minValue, String maxKeyLabel, short maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue >= 1, maxValue >= 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public short min() {\n+        return minValue;\n+    }\n+\n+    public short max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%s:%d, %s:%d]\", this.getClass().getSimpleName(), this.minKeyLabel, min(), this.maxKeyLabel, max());\n+    }\n+\n+    public Map<String, Short> toMap() {\n+        return new HashMap<String, Short>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MTI4OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437851289", "createdAt": "2020-06-10T04:20:38Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max, each of type short.\n+ * The min and max attributes need to satisfy 2 rules:\n+ *  - they are each expected to be >= 1, as we only consider positive version values to be valid.\n+ *  - max should be >= min.\n+ *\n+ * The class also provides API to convert the version range to a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    // Non-empty label for the min version key, that's used only to convert to/from a map.\n+    private final String minKeyLabel;\n+\n+    // The value of the minimum version.\n+    private final short minValue;\n+\n+    // Non-empty label for the max version key, that's used only to convert to/from a map.\n+    private final String maxKeyLabel;\n+\n+    // The value of the maximum version.\n+    private final short maxValue;\n+\n+    /**\n+     * Raises an exception unless the following condition is met:\n+     * minValue >= 1 and maxValue >= 1 and maxValue >= minValue.\n+     *\n+     * @param minKeyLabel   Label for the min version key, that's used only to convert to/from a map.\n+     * @param minValue      The minimum version value.\n+     * @param maxKeyLabel   Label for the max version key, that's used only to convert to/from a map.\n+     * @param maxValue      The maximum version value.\n+     *\n+     * @throws IllegalArgumentException   If any of the following conditions are true:\n+     *                                     - (minValue < 1) OR (maxValue < 1) OR (maxValue < minValue).\n+     *                                     - minKeyLabel is empty, OR, minKeyLabel is empty.\n+     */\n+    protected BaseVersionRange(String minKeyLabel, short minValue, String maxKeyLabel, short maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue >= 1, maxValue >= 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        if (minKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected minKeyLabel to be non-empty.\");\n+        }\n+        if (maxKeyLabel.isEmpty()) {\n+            throw new IllegalArgumentException(\"Expected maxKeyLabel to be non-empty.\");\n+        }\n+        this.minKeyLabel = minKeyLabel;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public short min() {\n+        return minValue;\n+    }\n+\n+    public short max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%s:%d, %s:%d]\", this.getClass().getSimpleName(), this.minKeyLabel, min(), this.maxKeyLabel, max());\n+    }\n+\n+    public Map<String, Short> toMap() {\n+        return new HashMap<String, Short>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MDkwMA=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzI5MDIzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToxMzo0NFrOGg5Arg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDoyMTo1N1rOGhkV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTY3OA==", "bodyText": "we don't need to check other == null here, the next condition check covers it.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437141678", "createdAt": "2020-06-09T05:13:44Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being <VersionRangeType>.\n+ * Also provides API to convert the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to a type of VersionRange.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        Objects.requireNonNull(features,\"Provided features can not be null.\");\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to SupportedVersionRange.\n+     *\n+     * @return           Returns a new Features object representing supported features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange.\n+     *\n+     * @return           Returns a new Features object representing finalized features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if the\n+     *                   feature is absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map representation of the underlying features. The returned value can be converted\n+     *           back to Features using one of the from*FeaturesMap() APIs of this class.\n+     */\n+    public Map<String, Map<String, Short>> toMap() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().toMap()));\n+    }\n+\n+    /**\n+     * An interface that defines behavior to convert from a Map to an object of type BaseVersionRange.\n+     */\n+    private interface MapToBaseVersionRangeConverter<V extends BaseVersionRange> {\n+\n+        /**\n+         * Convert the map representation of an object of type <V>, to an object of type <V>.\n+         *\n+         * @param  baseVersionRangeMap   the map representation of a BaseVersionRange object.\n+         *\n+         * @return                       the object of type <V>\n+         */\n+        V fromMap(Map<String, Short> baseVersionRangeMap);\n+    }\n+\n+    private static <V extends BaseVersionRange> Features<V> fromFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap, MapToBaseVersionRangeConverter<V> converter) {\n+        return new Features<>(featuresMap.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> converter.fromMap(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Converts from a map to Features<FinalizedVersionRange>.\n+     *\n+     * @param featuresMap  the map representation of a Features<FinalizedVersionRange> object,\n+     *                     generated using the toMap() API.\n+     *\n+     * @return             the Features<FinalizedVersionRange> object\n+     */\n+    public static Features<FinalizedVersionRange> fromFinalizedFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap) {\n+        return fromFeaturesMap(featuresMap, FinalizedVersionRange::fromMap);\n+    }\n+\n+    /**\n+     * Converts from a map to Features<SupportedVersionRange>.\n+     *\n+     * @param featuresMap  the map representation of a Features<SupportedVersionRange> object,\n+     *                     generated using the toMap() API.\n+     *\n+     * @return             the Features<SupportedVersionRange> object\n+     */\n+    public static Features<SupportedVersionRange> fromSupportedFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap) {\n+        return fromFeaturesMap(featuresMap, SupportedVersionRange::fromMap);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (other == null || !(other instanceof Features)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MTYyMg==", "bodyText": "Done. Good point.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437851622", "createdAt": "2020-06-10T04:21:57Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being <VersionRangeType>.\n+ * Also provides API to convert the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to a type of VersionRange.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        Objects.requireNonNull(features,\"Provided features can not be null.\");\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to SupportedVersionRange.\n+     *\n+     * @return           Returns a new Features object representing supported features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange.\n+     *\n+     * @return           Returns a new Features object representing finalized features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if the\n+     *                   feature is absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map representation of the underlying features. The returned value can be converted\n+     *           back to Features using one of the from*FeaturesMap() APIs of this class.\n+     */\n+    public Map<String, Map<String, Short>> toMap() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().toMap()));\n+    }\n+\n+    /**\n+     * An interface that defines behavior to convert from a Map to an object of type BaseVersionRange.\n+     */\n+    private interface MapToBaseVersionRangeConverter<V extends BaseVersionRange> {\n+\n+        /**\n+         * Convert the map representation of an object of type <V>, to an object of type <V>.\n+         *\n+         * @param  baseVersionRangeMap   the map representation of a BaseVersionRange object.\n+         *\n+         * @return                       the object of type <V>\n+         */\n+        V fromMap(Map<String, Short> baseVersionRangeMap);\n+    }\n+\n+    private static <V extends BaseVersionRange> Features<V> fromFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap, MapToBaseVersionRangeConverter<V> converter) {\n+        return new Features<>(featuresMap.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> converter.fromMap(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Converts from a map to Features<FinalizedVersionRange>.\n+     *\n+     * @param featuresMap  the map representation of a Features<FinalizedVersionRange> object,\n+     *                     generated using the toMap() API.\n+     *\n+     * @return             the Features<FinalizedVersionRange> object\n+     */\n+    public static Features<FinalizedVersionRange> fromFinalizedFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap) {\n+        return fromFeaturesMap(featuresMap, FinalizedVersionRange::fromMap);\n+    }\n+\n+    /**\n+     * Converts from a map to Features<SupportedVersionRange>.\n+     *\n+     * @param featuresMap  the map representation of a Features<SupportedVersionRange> object,\n+     *                     generated using the toMap() API.\n+     *\n+     * @return             the Features<SupportedVersionRange> object\n+     */\n+    public static Features<SupportedVersionRange> fromSupportedFeaturesMap(\n+        Map<String, Map<String, Short>> featuresMap) {\n+        return fromFeaturesMap(featuresMap, SupportedVersionRange::fromMap);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (other == null || !(other instanceof Features)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTY3OA=="}, "originalCommit": null, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMwMDMzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToxOTo1NlrOGg5HIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozOTozMVrOGhkmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MzMzMQ==", "bodyText": "nit: should all the parameters be final here, not just minMagic?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437143331", "createdAt": "2020-06-09T05:19:56Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +128,45 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Features.emptyFinalizedFeatures(), UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponseWithEmptyFeatures(\n+        int throttleTimeMs,\n+        final byte minMagic) {\n+        return createApiVersionsResponse(\n+            throttleTimeMs,\n+            minMagic,\n+            Features.emptySupportedFeatures(),\n+            Features.emptyFinalizedFeatures(),\n+            UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse createApiVersionsResponse(\n+        int throttleTimeMs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NTc4OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437855789", "createdAt": "2020-06-10T04:39:31Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +128,45 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Features.emptyFinalizedFeatures(), UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponseWithEmptyFeatures(\n+        int throttleTimeMs,\n+        final byte minMagic) {\n+        return createApiVersionsResponse(\n+            throttleTimeMs,\n+            minMagic,\n+            Features.emptySupportedFeatures(),\n+            Features.emptyFinalizedFeatures(),\n+            UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse createApiVersionsResponse(\n+        int throttleTimeMs,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MzMzMQ=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMxMjcwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToyNjo1NlrOGg5Oog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozODo0NlrOGhklmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTI1MA==", "bodyText": "I overlooked this case, let's maintain this static constructor without renaming it, since it is public.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437145250", "createdAt": "2020-06-09T05:26:56Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +128,45 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Features.emptyFinalizedFeatures(), UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponseWithEmptyFeatures(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NTY0Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437855643", "createdAt": "2020-06-10T04:38:46Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +128,45 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures) {\n+        return apiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, Features.emptyFinalizedFeatures(), UNKNOWN_FINALIZED_FEATURES_EPOCH);\n+    }\n+\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<SupportedVersionRange> latestSupportedFeatures,\n+        Features<FinalizedVersionRange> finalizedFeatures,\n+        int finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponseWithEmptyFeatures(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTI1MA=="}, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzMyMTExOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTozMToyNVrOGg5T0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0MToxMVrOGhknvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjU3Ng==", "bodyText": "nit: instead of using comments, better to build this into the test name, for example:\ntestInvalidSuppportedFeaturesWithMissingMaxVersion", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437146576", "createdAt": "2020-06-09T05:31:25Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Short>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertTrue(emptyFinalizedFeatures.features().isEmpty());\n+        assertTrue(emptyFinalizedFeatures.toMap().isEmpty());\n+        assertEquals(emptyFinalizedFeatures, Features.fromFinalizedFeaturesMap(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertTrue(emptySupportedFeatures.features().isEmpty());\n+        assertTrue(emptySupportedFeatures.toMap().isEmpty());\n+        assertEquals(emptySupportedFeatures, Features.fromSupportedFeaturesMap(emptyMap));\n+    }\n+\n+    @Test\n+    public void testNullFeatures() {\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.finalizedFeatures(null));\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.supportedFeatures(null));\n+    }\n+\n+    @Test\n+    public void testGetAllFeaturesAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures =\n+            mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.features());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testFromFeaturesMapToFeaturesMap() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version\", (short) 1), mkEntry(\"max_version\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version\", (short) 3), mkEntry(\"max_version\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromSupportedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testFromToFinalizedFeaturesMap() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version_level\", (short) 1), mkEntry(\"max_version_level\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version_level\", (short) 3), mkEntry(\"max_version_level\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromFinalizedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testToStringFinalizedFeatures() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> FinalizedVersionRange[min_version_level:1, max_version_level:2]), (feature_2 -> FinalizedVersionRange[min_version_level:3, max_version_level:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testToStringSupportedFeatures() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures\n+            = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> SupportedVersionRange[min_version:1, max_version:2]), (feature_2 -> SupportedVersionRange[min_version:3, max_version:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testSupportedFeaturesFromMapFailure() {\n+        // This is invalid because 'max_version' key is missing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjE5MA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437856190", "createdAt": "2020-06-10T04:41:11Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Short>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertTrue(emptyFinalizedFeatures.features().isEmpty());\n+        assertTrue(emptyFinalizedFeatures.toMap().isEmpty());\n+        assertEquals(emptyFinalizedFeatures, Features.fromFinalizedFeaturesMap(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertTrue(emptySupportedFeatures.features().isEmpty());\n+        assertTrue(emptySupportedFeatures.toMap().isEmpty());\n+        assertEquals(emptySupportedFeatures, Features.fromSupportedFeaturesMap(emptyMap));\n+    }\n+\n+    @Test\n+    public void testNullFeatures() {\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.finalizedFeatures(null));\n+        assertThrows(\n+            NullPointerException.class,\n+            () -> Features.supportedFeatures(null));\n+    }\n+\n+    @Test\n+    public void testGetAllFeaturesAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures =\n+            mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.features());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testFromFeaturesMapToFeaturesMap() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version\", (short) 1), mkEntry(\"max_version\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version\", (short) 3), mkEntry(\"max_version\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromSupportedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testFromToFinalizedFeaturesMap() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        Map<String, Map<String, Short>> expected = mkMap(\n+            mkEntry(\"feature_1\", mkMap(mkEntry(\"min_version_level\", (short) 1), mkEntry(\"max_version_level\", (short) 2))),\n+            mkEntry(\"feature_2\", mkMap(mkEntry(\"min_version_level\", (short) 3), mkEntry(\"max_version_level\", (short) 4))));\n+        assertEquals(expected, features.toMap());\n+        assertEquals(features, Features.fromFinalizedFeaturesMap(expected));\n+    }\n+\n+    @Test\n+    public void testToStringFinalizedFeatures() {\n+        FinalizedVersionRange v1 = new FinalizedVersionRange((short) 1, (short) 2);\n+        FinalizedVersionRange v2 = new FinalizedVersionRange((short) 3, (short) 4);\n+        Map<String, FinalizedVersionRange> allFeatures = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<FinalizedVersionRange> features = Features.finalizedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> FinalizedVersionRange[min_version_level:1, max_version_level:2]), (feature_2 -> FinalizedVersionRange[min_version_level:3, max_version_level:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testToStringSupportedFeatures() {\n+        SupportedVersionRange v1 = new SupportedVersionRange((short) 1, (short) 2);\n+        SupportedVersionRange v2 = new SupportedVersionRange((short) 3, (short) 4);\n+        Map<String, SupportedVersionRange> allFeatures\n+            = mkMap(mkEntry(\"feature_1\", v1), mkEntry(\"feature_2\", v2));\n+\n+        Features<SupportedVersionRange> features = Features.supportedFeatures(allFeatures);\n+\n+        assertEquals(\n+            \"Features{(feature_1 -> SupportedVersionRange[min_version:1, max_version:2]), (feature_2 -> SupportedVersionRange[min_version:3, max_version:4])}\",\n+            features.toString());\n+    }\n+\n+    @Test\n+    public void testSupportedFeaturesFromMapFailure() {\n+        // This is invalid because 'max_version' key is missing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjU3Ng=="}, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzM2NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNTo1MzoyN1rOGg5uYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0OTowNlrOGhkvUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MzM3OQ==", "bodyText": "nit: {} not necessary", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437153379", "createdAt": "2020-06-09T05:53:27Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  object ZkStateChangeHandler extends StateChangeHandler {\n+    val path: String = FeatureZNode.path\n+\n+    override val name: String = path\n+\n+    override def afterInitializingSession(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    if (waitOnceForCacheUpdateMs <= 0) {\n+      throw new IllegalArgumentException(\n+        s\"Expected waitOnceForCacheUpdateMs > 0, but provided: $waitOnceForCacheUpdateMs\")\n+    }\n+\n+    thread.start()\n+    zkClient.registerStateChangeHandler(ZkStateChangeHandler)\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+    val ensureCacheUpdateOnce = new FeatureCacheUpdater(\n+      FeatureZNodeChangeHandler.path, Some(new CountDownLatch(1)))\n+    queue.add(ensureCacheUpdateOnce)\n+    try {\n+      ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+    } catch {\n+      case e: Exception => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1ODEzMA==", "bodyText": "It's a 2-line block.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437858130", "createdAt": "2020-06-10T04:49:06Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+          }\n+          case _ => throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully. This method returns\n+     * immediately if an updateLatestOrThrow call had already completed successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (!notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        ignoring(classOf[InterruptedException]) {\n+          queue.take.updateLatestOrThrow()\n+        }\n+      } catch {\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: ZK corruption or operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  object ZkStateChangeHandler extends StateChangeHandler {\n+    val path: String = FeatureZNode.path\n+\n+    override val name: String = path\n+\n+    override def afterInitializingSession(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * will exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    if (waitOnceForCacheUpdateMs <= 0) {\n+      throw new IllegalArgumentException(\n+        s\"Expected waitOnceForCacheUpdateMs > 0, but provided: $waitOnceForCacheUpdateMs\")\n+    }\n+\n+    thread.start()\n+    zkClient.registerStateChangeHandler(ZkStateChangeHandler)\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+    val ensureCacheUpdateOnce = new FeatureCacheUpdater(\n+      FeatureZNodeChangeHandler.path, Some(new CountDownLatch(1)))\n+    queue.add(ensureCacheUpdateOnce)\n+    try {\n+      ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+    } catch {\n+      case e: Exception => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MzM3OQ=="}, "originalCommit": null, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjAyNDEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo1NzoxNlrOGhTzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0MTozN1rOGhkoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MDU2NQ==", "bodyText": "nit: use Introduced to align with previous comment?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437580565", "createdAt": "2020-06-09T16:57:16Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -98,7 +98,9 @@ object ApiVersion {\n     // No new APIs, equivalent to 2.4-IV1\n     KAFKA_2_5_IV0,\n     // Introduced StopReplicaRequest V3 containing the leader epoch for each partition (KIP-570)\n-    KAFKA_2_6_IV0\n+    KAFKA_2_6_IV0,\n+    // Introduce feature versioning support (KIP-584)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjI5OA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437856298", "createdAt": "2020-06-10T04:41:37Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -98,7 +98,9 @@ object ApiVersion {\n     // No new APIs, equivalent to 2.4-IV1\n     KAFKA_2_5_IV0,\n     // Introduced StopReplicaRequest V3 containing the leader epoch for each partition (KIP-570)\n-    KAFKA_2_6_IV0\n+    KAFKA_2_6_IV0,\n+    // Introduce feature versioning support (KIP-584)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MDU2NQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjAzMzI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo1OToyNlrOGhT4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0MTo1OVrOGhkogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjAwNw==", "bodyText": "it's -> its", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437582007", "createdAt": "2020-06-09T16:59:26Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjM4NQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437856385", "createdAt": "2020-06-10T04:41:59Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4MjAwNw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjAzODgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowMDo1OVrOGhT8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0MjoyOVrOGhko_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4Mjk0OA==", "bodyText": "could be simplified as the latest known FinalizedFeaturesAndEpoch or empty if not defined in the cache", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437582948", "createdAt": "2020-06-09T17:00:59Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become\n+ * non-empty. Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ *\n+ * @see FinalizedFeatureChangeListener\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NjUxMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437856510", "createdAt": "2020-06-10T04:42:29Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A common mutable cache containing the latest finalized features and epoch. By default the contents of\n+ * the cache are empty. This cache needs to be populated at least once for it's contents to become\n+ * non-empty. Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ *\n+ * @see FinalizedFeatureChangeListener\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4Mjk0OA=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA0OTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowNDoxMVrOGhUDdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDo0Nzo0OFrOGhkuAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4NDc1OA==", "bodyText": "I think we could remove If the cache update is not successful, then, a suitable exception is raised... which is pretty obvious.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437584758", "createdAt": "2020-06-09T17:04:11Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1Nzc5NQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437857795", "createdAt": "2020-06-10T04:47:48Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4NDc1OA=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA1ODI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowNjo0MVrOGhUJOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoxNzozN1rOGhmR7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4NjIzNQ==", "bodyText": "Sorry it's been a while since my last review, but have we discussed the recovery path when we hit a data corruption exception for the cluster? Is there a way to turn off the feature versioning completely to unblock, or we have a mechanism to wipe out ZK data?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437586235", "createdAt": "2020-06-09T17:06:41Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MzM3NA==", "bodyText": "It's very rare especially when controller is the only entity writing to the ZK node. I have now modified the code to handle this case and clear the cache. Perhaps that's better than crashing the broker in such a case. Remediation will need human intervention in fixing the ZK node. We can provide tooling if required.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437883374", "createdAt": "2020-06-10T06:17:37Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4NjIzNQ=="}, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjA5MjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNjozM1rOGhUf8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1MDowMVrOGhlu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MjA1MA==", "bodyText": "Being a bit paranoid here, would it be possible to have out-of-order updates from ZK, such that the version number is not monotonically increasing? I'm thinking even we could throw in FinalizedFeatureCache, do we really want to kill the broker, or we should just log a warning and proceed.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437592050", "createdAt": "2020-06-09T17:16:33Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NDM5NQ==", "bodyText": "Re: out-of-order updates from ZK:\nI don't understand. When a watch fires from ZK, we react by issuing a ZK read operation to obtain the latest value of the ZK node (see L75). It is impossible that we get a stale read from ZK after watch fires on the client side.\n\n\nRe: broker death:\nThe exception thrown here almost always indicates a feature incompatibility, and, that means the broker can cause damage if it sticks around (because feature bumps are breaking changes and you can not allow an incompatible broker to stick around in the cluster). That is why I felt it is better to kill the broker in such a rare incompatibility case. Note that after the controller has finalized features, there should be no brokers in the cluster with incompatibilites, so death here makes sense.\n\n\nNote: I have also explained point #2 in this comment: https://github.com/apache/kafka/pull/8680/files#r434443007.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437874395", "createdAt": "2020-06-10T05:50:01Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.{StateChangeHandler, ZNodeChangeHandler}\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+import scala.util.control.Exception.ignoring\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked exactly\n+     * once successfully. A subsequent invocation will raise an exception.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     * @throws   FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     * @throws   RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      debug(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        featureZNode.status match {\n+          case FeatureZNodeStatus.Disabled => {\n+            info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status.\")\n+            FinalizedFeatureCache.clear()\n+          }\n+          case FeatureZNodeStatus.Enabled => {\n+            FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MjA1MA=="}, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjE2NDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzozNjo1OVrOGhVOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1NDo0NVrOGhl0mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNDAxNQ==", "bodyText": "nit: space", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437604015", "createdAt": "2020-06-09T17:36:59Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +781,165 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_7_IV0.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_7_IV0.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_7_IV0. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_7_IV0, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_7_IV0. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_7_IV0), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_7_IV0),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 3. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_7_IV0. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_7_IV0. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V1 contains 'version', 'status' and 'features' keys.\n+  val V1 = 1\n+  val CurrentVersion = V1\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Short]]): util.Map[String, util.Map[String, java.lang.Short]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaShort => java.lang.Short.valueOf(scalaShort)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.toMap)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  /**\n+   * Decodes the contents of the feature ZK node from Array[Byte] to a FeatureZNode.\n+   *\n+   * @param jsonBytes   the contents of the feature ZK node\n+   *\n+   * @return            the FeatureZNode created from jsonBytes\n+   *\n+   * @throws IllegalArgumentException   if the Array[Byte] can not be decoded.\n+   */\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < V1) {\n+          throw new IllegalArgumentException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Int]]]])\n+\n+        if (featuresMap.isEmpty) {\n+          throw new IllegalArgumentException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(\n+          featuresMap\n+            .map(theMap => theMap.view.mapValues(_.view.mapValues(_.asInstanceOf[Short]).toMap).toMap)\n+            .getOrElse(Map[String, Map[String, Short]]()))\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new IllegalArgumentException(\"Status can not be absent in feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val status = FeatureZNodeStatus.withNameOpt(statusInt.get)\n+        if (status.isEmpty) {\n+          throw new IllegalArgumentException(\n+            s\"Malformed status: $statusInt  found in feature information: ${new String(jsonBytes, UTF_8)}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTg2NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437875864", "createdAt": "2020-06-10T05:54:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +781,165 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_7_IV0.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_7_IV0.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_7_IV0. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as its finalized features.\n+ *\n+ * 2. Cluster upgrade:\n+ *    Imagine there is an existing Kafka cluster with IBP config less than KAFKA_2_7_IV0, but\n+ *    the Broker binary has been upgraded to a state where it supports the feature versioning\n+ *    system (KIP-584). This means the user is upgrading from an earlier version of the Broker\n+ *    binary. In this case, we want to start with no finalized features and allow the user to enable\n+ *    them whenever they are ready i.e. in the future whenever the user sets IBP config\n+ *    to be greater than or equal to KAFKA_2_7_IV0. The reason is that enabling all the possible\n+ *    features immediately after an upgrade could be harmful to the cluster.\n+ *    In such a case:\n+ *      - Before the Broker upgrade (i.e. IBP config set to less than KAFKA_2_7_IV0), the controller\n+ *        will start up and check if the FeatureZNode is absent. If true, then it will react by\n+ *        creating a FeatureZNode with disabled status and empty features.\n+ *      - After the Broker upgrade (i.e. IBP config set to greater than or equal to KAFKA_2_7_IV0),\n+ *        when the controller starts up it will check if the FeatureZNode exists and whether it is\n+ *        disabled. In such a case, it won\u2019t upgrade all features immediately. Instead it will just\n+ *        switch the FeatureZNode status to enabled status. This lets the user finalize the features\n+ *        later.\n+ *\n+ * 3. Cluster downgrade:\n+ *    Imagine that a Kafka cluster exists already and the IBP config is greater than or equal to\n+ *    KAFKA_2_7_IV0. Then, the user decided to downgrade the cluster by setting IBP config to a\n+ *    value less than KAFKA_2_7_IV0. This means the user is also disabling the feature versioning\n+ *    system (KIP-584). In this case, when the controller starts up with the lower IBP config, it\n+ *    will switch the FeatureZNode status to disabled with empty features.\n+ */\n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+/**\n+ * Represents the contents of the ZK node containing finalized feature information.\n+ *\n+ * @param status     the status of the ZK node\n+ * @param features   the cluster-wide finalized features\n+ */\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // V1 contains 'version', 'status' and 'features' keys.\n+  val V1 = 1\n+  val CurrentVersion = V1\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Short]]): util.Map[String, util.Map[String, java.lang.Short]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaShort => java.lang.Short.valueOf(scalaShort)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  /**\n+   * Encodes a FeatureZNode to JSON.\n+   *\n+   * @param featureZNode   FeatureZNode to be encoded\n+   *\n+   * @return               JSON representation of the FeatureZNode, as an Array[Byte]\n+   */\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.toMap)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  /**\n+   * Decodes the contents of the feature ZK node from Array[Byte] to a FeatureZNode.\n+   *\n+   * @param jsonBytes   the contents of the feature ZK node\n+   *\n+   * @return            the FeatureZNode created from jsonBytes\n+   *\n+   * @throws IllegalArgumentException   if the Array[Byte] can not be decoded.\n+   */\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < V1) {\n+          throw new IllegalArgumentException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Int]]]])\n+\n+        if (featuresMap.isEmpty) {\n+          throw new IllegalArgumentException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(\n+          featuresMap\n+            .map(theMap => theMap.view.mapValues(_.view.mapValues(_.asInstanceOf[Short]).toMap).toMap)\n+            .getOrElse(Map[String, Map[String, Short]]()))\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new IllegalArgumentException(\"Status can not be absent in feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val status = FeatureZNodeStatus.withNameOpt(statusInt.get)\n+        if (status.isEmpty) {\n+          throw new IllegalArgumentException(\n+            s\"Malformed status: $statusInt  found in feature information: ${new String(jsonBytes, UTF_8)}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNDAxNQ=="}, "originalCommit": null, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjE3MzUxOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzozOToxN1rOGhVUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1NjoyMVrOGhl2ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNTQxMw==", "bodyText": "V4 doesn't have feature right? What's the purpose of this test?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437605413", "createdAt": "2020-06-09T17:39:17Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV4WithNoFeatures(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NjQxOQ==", "bodyText": "It checks backwards compatibility i.e. it checks whether the deserialization code (V5-based) can correctly deserialize V4 such that features are assigned empty value by default..", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437876419", "createdAt": "2020-06-10T05:56:21Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV4WithNoFeatures(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNTQxMw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjE4MTY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0MTozNFrOGhVZXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1OTozMVrOGhl6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjc0OA==", "bodyText": "add the space back", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437606748", "createdAt": "2020-06-09T17:41:34Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -755,7 +755,7 @@ class KafkaConfigTest {\n         case KafkaConfig.SaslLoginRefreshMinPeriodSecondsProp =>\n         case KafkaConfig.SaslLoginRefreshBufferSecondsProp =>\n \n-        // Security config\n+        //Security config", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzM5MA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437877390", "createdAt": "2020-06-10T05:59:31Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -755,7 +755,7 @@ class KafkaConfigTest {\n         case KafkaConfig.SaslLoginRefreshMinPeriodSecondsProp =>\n         case KafkaConfig.SaslLoginRefreshBufferSecondsProp =>\n \n-        // Security config\n+        //Security config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNjc0OA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjE4ODU1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0MzoyMlrOGhVduw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1ODo0N1rOGhl5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzg2Nw==", "bodyText": "nit: we could add a minor test to verify a negative waitOnceForCacheUpdateMs will throw", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437607867", "createdAt": "2020-06-09T17:43:22Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzE3OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437877179", "createdAt": "2020-06-10T05:58:47Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwNzg2Nw=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAwOTE4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNToxN1rOGXAypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDoyNTowNFrOGXPX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzM5Ng==", "bodyText": "nit: we could use {@link VersionRangeType} to reference to the classes.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426783396", "createdAt": "2020-05-18T17:25:17Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMjMxNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427022316", "createdAt": "2020-05-19T04:25:04Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzM5Ng=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAxMDczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNTo0NFrOGXAzpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDoyOTo1NVrOGXPcEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzY1Mg==", "bodyText": "Could be simplified as new Features<>", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426783652", "createdAt": "2020-05-18T17:25:44Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzM3Nw==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427023377", "createdAt": "2020-05-19T04:29:55Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzY1Mg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAxMTEzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNTo1MVrOGXAz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMDowMFrOGXPcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzcyMA==", "bodyText": "Same here", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426783720", "createdAt": "2020-05-18T17:25:51Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzM5NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427023394", "createdAt": "2020-05-19T04:30:00Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzcyMA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE0NjAyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowNjozM1rOGXCIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMTozMVrOGXPdmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNTQyNQ==", "bodyText": "nit: extra line", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426805425", "createdAt": "2020-05-18T18:06:33Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzc3MA==", "bodyText": "Done. Removed it.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427023770", "createdAt": "2020-05-19T04:31:31Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNTQyNQ=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE1MTYyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowODoxN1rOGXCMMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMToxMVrOGXPdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjMyMQ==", "bodyText": "Is this function only used in unit test?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426806321", "createdAt": "2020-05-18T18:08:17Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzcwNQ==", "bodyText": "Done. Yes, I've changed it to default visibility now.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427023705", "createdAt": "2020-05-19T04:31:11Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjMyMQ=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE1MzcxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowOTowMlrOGXCNjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDozOTo1NVrOGYuOmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjY3MQ==", "bodyText": "We should ensure features is not null", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426806671", "createdAt": "2020-05-18T18:09:02Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyMzI4MA==", "bodyText": "Do you feel strongly about this?\nThe reasons why I ask the question is:\n\nCaller is unlikely to pass null.\nI looked over a number of other existing classes in Kafka, and there aren't any null checks for most constructor parameters.\n\nIt will help me if you could share couple examples from existing code where the null check convention is followed in Kafka.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427023280", "createdAt": "2020-05-19T04:29:23Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjY3MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDA3OQ==", "bodyText": "Yea, the reasoning is that we have get call blindly look up inside features which in this case null is not valid. And I don't feel passing null makes sense for the caller, correct?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428080079", "createdAt": "2020-05-20T14:55:57Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjY3MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3NjQxMA==", "bodyText": "Done. I'm raising an exception now if it is null.\nI see your point.\nWill be good to learn what is the convention in Kafka for constructor param null checks.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428576410", "createdAt": "2020-05-21T10:39:55Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNjY3MQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE2MDI3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxMDo1OFrOGXCRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozNDoxMlrOGXPf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNzY0Ng==", "bodyText": "nit: just a personal preference, but getting one less internal reference to a public function all makes the code usage check easier, like features.get(feature).", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426807646", "createdAt": "2020-05-18T18:10:58Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNDM3OQ==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427024379", "createdAt": "2020-05-19T04:34:12Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNzY0Ng=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE2NDk2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxMjozNlrOGXCUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozODowOFrOGXPj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwODQ1Ng==", "bodyText": "Also if we could potentially have a not-found feature, we should either fail with illegal state, or make the return type Optional<VersionRangeType>", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426808456", "createdAt": "2020-05-18T18:12:36Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNTM3OA==", "bodyText": "The underlying data structure is a Map. It would be simpler if this method just returns null if the feature doesn't exist. For example, that is how java's Map.get works, here is the javadoc: https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#get-java.lang.Object-.\nAlso, I've documented this method now (doc was previously absent).", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427025378", "createdAt": "2020-05-19T04:38:08Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwODQ1Ng=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE2NzQzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxMzoyMVrOGXCWLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozODo1MVrOGXPkgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwODg3OQ==", "bodyText": "Maybe rephrase as a map with the underlying features serialized", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426808879", "createdAt": "2020-05-18T18:13:21Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNTUzOQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427025539", "createdAt": "2020-05-19T04:38:51Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwODg3OQ=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE3MDk4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxNDozNVrOGXCYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozOTowNVrOGXPkvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwOTUwNA==", "bodyText": "s/Deserializes/Deserialize", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426809504", "createdAt": "2020-05-18T18:14:35Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.\n+     *           The returned value can be deserialized using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionLevelRange>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNTU5Nw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427025597", "createdAt": "2020-05-19T04:39:05Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.\n+     *           The returned value can be deserialized using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionLevelRange>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwOTUwNA=="}, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODE3OTY2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODoxNzowOVrOGXCeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0MDowNFrOGXPlyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxMDkwOQ==", "bodyText": "We should check null for other.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426810909", "createdAt": "2020-05-18T18:17:09Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.\n+     *           The returned value can be deserialized using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionLevelRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<VersionLevelRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<VersionLevelRange> object\n+     */\n+    public static Features<VersionLevelRange> deserializeFinalizedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return finalizedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> VersionLevelRange.deserialize(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<VersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<VersionRange> object\n+     */\n+    public static Features<VersionRange> deserializeSupportedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return supportedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> VersionRange.deserialize(entry.getValue()))));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNTg2Ng==", "bodyText": "Done. Good point! Added test as well.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427025866", "createdAt": "2020-05-19T04:40:04Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    public VersionRangeType get(String feature) {\n+        return all().get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   Serializes the underlying features to a map, and returns the same.\n+     *           The returned value can be deserialized using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionLevelRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<VersionLevelRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<VersionLevelRange> object\n+     */\n+    public static Features<VersionLevelRange> deserializeFinalizedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return finalizedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> VersionLevelRange.deserialize(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<VersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<VersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<VersionRange> object\n+     */\n+    public static Features<VersionRange> deserializeSupportedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return supportedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> VersionRange.deserialize(entry.getValue()))));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxMDkwOQ=="}, "originalCommit": null, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODI5NDE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Broker.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1MzozN1rOGXDmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1MTozN1rOGXQxEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyOTQ1Mw==", "bodyText": "nit: might make sense to build meta comment for parameters:\n/**\n  * \n  * @param id\n  * @param endPoints\n  * @param rack\n  * @param features\n  */", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426829453", "createdAt": "2020-05-18T18:53:37Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,19 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n+ * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTEzNg==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427045136", "createdAt": "2020-05-19T05:51:37Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,19 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {\n+    new Broker(id, endPoints, rack, emptySupportedFeatures)\n+  }\n }\n \n /**\n  * A Kafka broker.\n- * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map.\n+ * A broker has an id, a collection of end-points, an optional rack and a listener to security protocol map,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyOTQ1Mw=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODM0MTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowNzo1N1rOGXED4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1NDoxOVrOGXQ0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNjk2Mw==", "bodyText": "s/ !featuresAndEpoch.isEmpty / featuresAndEpoch.isDefined", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426836963", "createdAt": "2020-05-18T19:07:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NjAwNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427046004", "createdAt": "2020-05-19T05:54:19Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNjk2Mw=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODM0ODM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/cluster/Broker.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOToxMDowNlrOGXEIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo0OTowN1rOGXQt_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODA2NA==", "bodyText": "This is because the write path has not been implemented?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426838064", "createdAt": "2020-05-18T19:10:06Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,19 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NDM0OA==", "bodyText": "No, this constructor overload was simply created to avoid a churn of test code at number of places adding the additional SupportedFeatures parameter. How do you feel about keeping it?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427044348", "createdAt": "2020-05-19T05:49:07Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/cluster/Broker.scala", "diffHunk": "@@ -34,14 +36,19 @@ object Broker {\n                                          brokerId: Int,\n                                          endpoints: util.List[Endpoint],\n                                          interBrokerEndpoint: Endpoint) extends AuthorizerServerInfo\n+\n+  def apply(id: Int, endPoints: Seq[EndPoint], rack: Option[String]): Broker = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzODA2NA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUyMjMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowNzoxNVrOGXF0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1ODozMlrOGXQ56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NTc3Mw==", "bodyText": "nit: add a line", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426865773", "createdAt": "2020-05-18T20:07:15Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NzQwMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427047400", "createdAt": "2020-05-19T05:58:32Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2NTc3Mw=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU2ODc5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyMzozOVrOGXGSDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDoyMjozNlrOGZmV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3MzM1OQ==", "bodyText": "I think we need to bump the schema version to 4? Same with ApiVersionsRequest.json", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426873359", "createdAt": "2020-05-18T20:23:39Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "diffHunk": "@@ -42,6 +42,33 @@\n         \"about\": \"The maximum supported version, inclusive.\" }\n     ]},\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n-      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" }\n+      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNDc1OA==", "bodyText": "Are you sure? All newly added fields are tagged (i.e. optional).\nGoing by this documentation in KIP-482, it is not required to change the schema version whenever tagged fields are introduced.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427034758", "createdAt": "2020-05-19T05:14:57Z", "author": {"login": "kowshik"}, "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "diffHunk": "@@ -42,6 +42,33 @@\n         \"about\": \"The maximum supported version, inclusive.\" }\n     ]},\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n-      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" }\n+      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3MzM1OQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NTc2NQ==", "bodyText": "I see, makes sense.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429495765", "createdAt": "2020-05-23T00:22:36Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/resources/common/message/ApiVersionsResponse.json", "diffHunk": "@@ -42,6 +42,33 @@\n         \"about\": \"The maximum supported version, inclusive.\" }\n     ]},\n     { \"name\": \"ThrottleTimeMs\", \"type\": \"int32\", \"versions\": \"1+\", \"ignorable\": true,\n-      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" }\n+      \"about\": \"The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.\" },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3MzM1OQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU4MjIxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyODowMVrOGXGaKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjozNDozMVrOGXRuHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NTQzNA==", "bodyText": "Looks like we have some gaps for unit testing ApiVersionsResponse. Could we add unit tests for this class, since the logic createApiVersionsResponse becomes non-trivial now?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426875434", "createdAt": "2020-05-18T20:28:01Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +141,26 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<VersionRange> latestSupportedFeatures,\n+        Optional<Features<VersionLevelRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2MDc2NQ==", "bodyText": "The tests have been already added. Pls check out the tests added in ApiVersionsResponseTest.java, particularly: shouldReturnFeatureKeysWhenMagicIsCurrentValueAndThrottleMsIsDefaultThrottle.\nLet me know if this test does not look sufficient.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427060765", "createdAt": "2020-05-19T06:34:31Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +141,26 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(\n+        int throttleTimeMs,\n+        byte maxMagic,\n+        Features<VersionRange> latestSupportedFeatures,\n+        Optional<Features<VersionLevelRange>> finalizedFeatures,\n+        Optional<Long> finalizedFeaturesEpoch) {\n         if (maxMagic == RecordBatch.CURRENT_MAGIC_VALUE && throttleTimeMs == DEFAULT_THROTTLE_TIME) {\n             return DEFAULT_API_VERSIONS_RESPONSE;\n         }\n-        return createApiVersionsResponse(throttleTimeMs, maxMagic);\n+        return createApiVersionsResponse(\n+            throttleTimeMs, maxMagic, latestSupportedFeatures, finalizedFeatures, finalizedFeaturesEpoch);\n     }\n \n-    public static ApiVersionsResponse createApiVersionsResponse(int throttleTimeMs, final byte minMagic) {\n+    public static ApiVersionsResponse createApiVersionsResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NTQzNA=="}, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU4NDY3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyODo1OVrOGXGb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxNzoxOVrOGXQK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NTg3OQ==", "bodyText": "s/AllAPI/GetAllFeatures", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426875879", "createdAt": "2020-05-18T20:28:59Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNTM4MA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427035380", "createdAt": "2020-05-19T05:17:19Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NTg3OQ=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU4NjIzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyOTozNVrOGXGc5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxNjo1OFrOGXQKmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjEzNA==", "bodyText": "We need the apache license title", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426876134", "createdAt": "2020-05-18T20:29:35Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNTI5MA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427035290", "createdAt": "2020-05-19T05:16:58Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjEzNA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU5MDQwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMDo1NFrOGXGfeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo0MjoyNlrOGXQmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Njc5Mw==", "bodyText": "We could use org.apache.kafka.common.utils.Utils#mkMap here", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426876793", "createdAt": "2020-05-18T20:30:54Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.all());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MjMxMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427042310", "createdAt": "2020-05-19T05:42:26Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.all());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Njc5Mw=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU5MDcxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMTowMVrOGXGftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo0Mjo0OVrOGXQmgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Njg1Mg==", "bodyText": "Same here", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426876852", "createdAt": "2020-05-18T20:31:01Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.all());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserializeSupportedFeatures() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MjQzNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427042434", "createdAt": "2020-05-19T05:42:49Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<VersionLevelRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.all());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<VersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.all());\n+        assertEquals(\n+            new HashMap<String, HashMap<String, Long>>(),\n+            emptySupportedFeatures.serialize());\n+        assertEquals(emptySupportedFeatures, Features.deserializeSupportedFeatures(emptyMap));\n+    }\n+\n+    @Test\n+    public void testAllAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(allFeatures, features.all());\n+    }\n+\n+    @Test\n+    public void testGetAPI() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {\n+            {\n+                put(\"feature_1\", v1);\n+                put(\"feature_2\", v2);\n+            }\n+        };\n+        Features<VersionRange> features = Features.supportedFeatures(allFeatures);\n+        assertEquals(v1, features.get(\"feature_1\"));\n+        assertEquals(v2, features.get(\"feature_2\"));\n+        assertNull(features.get(\"nonexistent_feature\"));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserializeSupportedFeatures() {\n+        VersionRange v1 = new VersionRange(1, 2);\n+        VersionRange v2 = new VersionRange(3, 4);\n+        Map<String, VersionRange> allFeatures = new HashMap<String, VersionRange>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Njg1Mg=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODU5NzIyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDozMzoxMlrOGXGjww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjoyNzoyOVrOGXRi_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Nzg5MQ==", "bodyText": "nit: new line", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426877891", "createdAt": "2020-05-18T20:33:12Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionLevelRangeTest {\n+\n+    @Test\n+    public void testCreateFailDueToInvalidParams() {\n+        // min and max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(0, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(-1, -1));\n+        // min can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(0, 1));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(-1, 1));\n+        // max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(1, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(1, -1));\n+        // min can't be > max.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(2, 1));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserialize() {\n+        VersionLevelRange versionLevelRange = new VersionLevelRange(1, 2);\n+        assertEquals(1, versionLevelRange.min());\n+        assertEquals(2, versionLevelRange.max());\n+\n+        Map<String, Long> serialized = versionLevelRange.serialize();\n+        assertEquals(\n+            new HashMap<String, Long>() {\n+                {\n+                    put(\"min_version_level\", versionLevelRange.min());\n+                    put(\"max_version_level\", versionLevelRange.max());\n+                }\n+            },\n+            serialized\n+        );\n+\n+        VersionLevelRange deserialized = VersionLevelRange.deserialize(serialized);\n+        assertEquals(1, deserialized.min());\n+        assertEquals(2, deserialized.max());\n+        assertEquals(versionLevelRange, deserialized);\n+    }\n+\n+    @Test\n+    public void testDeserializationFailureTest() {\n+        // min_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMinVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 0L);\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMinVersion));\n+\n+        // max_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 1L);\n+                put(\"max_version_level\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMaxVersion));\n+\n+        // min_version_level and max_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMinMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 0L);\n+                put(\"max_version_level\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMinMaxVersion));\n+\n+        // min_version_level can't be > max_version_level.\n+        Map<String, Long> invalidWithLowerMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 2L);\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithLowerMaxVersion));\n+\n+        // min_version_level key missing.\n+        Map<String, Long> invalidWithMinKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithMinKeyMissing));\n+\n+        // max_version_level key missing.\n+        Map<String, Long> invalidWithMaxKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithMaxKeyMissing));\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        assertEquals(\"VersionLevelRange[1, 1]\", new VersionLevelRange(1, 1).toString());\n+        assertEquals(\"VersionLevelRange[1, 2]\", new VersionLevelRange(1, 2).toString());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        assertTrue(new VersionLevelRange(1, 1).equals(new VersionLevelRange(1, 1)));\n+        assertFalse(new VersionLevelRange(1, 1).equals(new VersionLevelRange(1, 2)));\n+    }\n+\n+    @Test\n+    public void testIsCompatibleWith() {\n+        assertTrue(new VersionLevelRange(1, 1).isCompatibleWith(new VersionRange(1, 1)));\n+        assertTrue(new VersionLevelRange(2, 3).isCompatibleWith(new VersionRange(1, 4)));\n+        assertTrue(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(1, 4)));\n+\n+        assertFalse(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(2, 3)));\n+        assertFalse(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(2, 4)));\n+        assertFalse(new VersionLevelRange(2, 4).isCompatibleWith(new VersionRange(2, 3)));\n+    }\n+\n+    @Test\n+    public void testGetters() {\n+        assertEquals(1, new VersionLevelRange(1, 2).min());\n+        assertEquals(2, new VersionLevelRange(1, 2).max());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1NzkxNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427057916", "createdAt": "2020-05-19T06:27:29Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionLevelRangeTest {\n+\n+    @Test\n+    public void testCreateFailDueToInvalidParams() {\n+        // min and max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(0, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(-1, -1));\n+        // min can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(0, 1));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(-1, 1));\n+        // max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(1, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(1, -1));\n+        // min can't be > max.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionLevelRange(2, 1));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserialize() {\n+        VersionLevelRange versionLevelRange = new VersionLevelRange(1, 2);\n+        assertEquals(1, versionLevelRange.min());\n+        assertEquals(2, versionLevelRange.max());\n+\n+        Map<String, Long> serialized = versionLevelRange.serialize();\n+        assertEquals(\n+            new HashMap<String, Long>() {\n+                {\n+                    put(\"min_version_level\", versionLevelRange.min());\n+                    put(\"max_version_level\", versionLevelRange.max());\n+                }\n+            },\n+            serialized\n+        );\n+\n+        VersionLevelRange deserialized = VersionLevelRange.deserialize(serialized);\n+        assertEquals(1, deserialized.min());\n+        assertEquals(2, deserialized.max());\n+        assertEquals(versionLevelRange, deserialized);\n+    }\n+\n+    @Test\n+    public void testDeserializationFailureTest() {\n+        // min_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMinVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 0L);\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMinVersion));\n+\n+        // max_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 1L);\n+                put(\"max_version_level\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMaxVersion));\n+\n+        // min_version_level and max_version_level can't be < 1.\n+        Map<String, Long> invalidWithBadMinMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 0L);\n+                put(\"max_version_level\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithBadMinMaxVersion));\n+\n+        // min_version_level can't be > max_version_level.\n+        Map<String, Long> invalidWithLowerMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 2L);\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithLowerMaxVersion));\n+\n+        // min_version_level key missing.\n+        Map<String, Long> invalidWithMinKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"max_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithMinKeyMissing));\n+\n+        // max_version_level key missing.\n+        Map<String, Long> invalidWithMaxKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version_level\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionLevelRange.deserialize(invalidWithMaxKeyMissing));\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        assertEquals(\"VersionLevelRange[1, 1]\", new VersionLevelRange(1, 1).toString());\n+        assertEquals(\"VersionLevelRange[1, 2]\", new VersionLevelRange(1, 2).toString());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        assertTrue(new VersionLevelRange(1, 1).equals(new VersionLevelRange(1, 1)));\n+        assertFalse(new VersionLevelRange(1, 1).equals(new VersionLevelRange(1, 2)));\n+    }\n+\n+    @Test\n+    public void testIsCompatibleWith() {\n+        assertTrue(new VersionLevelRange(1, 1).isCompatibleWith(new VersionRange(1, 1)));\n+        assertTrue(new VersionLevelRange(2, 3).isCompatibleWith(new VersionRange(1, 4)));\n+        assertTrue(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(1, 4)));\n+\n+        assertFalse(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(2, 3)));\n+        assertFalse(new VersionLevelRange(1, 4).isCompatibleWith(new VersionRange(2, 4)));\n+        assertFalse(new VersionLevelRange(2, 4).isCompatibleWith(new VersionRange(2, 3)));\n+    }\n+\n+    @Test\n+    public void testGetters() {\n+        assertEquals(1, new VersionLevelRange(1, 2).min());\n+        assertEquals(2, new VersionLevelRange(1, 2).max());\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3Nzg5MQ=="}, "originalCommit": null, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY0MTE0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionLevelRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo0Nzo0NVrOGXG_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo1MzoxNFrOGYEB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NDg5Mg==", "bodyText": "In terms of naming, do you think FinalizedVersionRange is more explicit? Also when I look closer at the class hierarchy, I feel the sharing point between finalized version range and supported version range should be extracted to avoid weird inheritance. What I'm proposing is to have VersionRange as a super class with two subclasses: SupportedVersionRange and FinalizedVersionRange, and make minKeyLabel and maxKeyLabel abstract functions, WDYT?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426884892", "createdAt": "2020-05-18T20:47:45Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionLevelRange.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of VersionRange representing a range of version levels. The main specialization\n+ * is that the class uses different serialization keys for min/max attributes.\n+ *\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class VersionLevelRange extends VersionRange {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NTAyNQ==", "bodyText": "Done. Good point!\n\nI have now created 3 classes as you proposed. BaseVersionRange is the base class, and, SupportedVersionRange & FinalizedVersionRange are it's child classes.\nThe key labels couldn't be made into abstract functions since these constants are needed within deserialize() which is a static method defined in the child classes.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427885025", "createdAt": "2020-05-20T09:53:14Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionLevelRange.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of VersionRange representing a range of version levels. The main specialization\n+ * is that the class uses different serialization keys for min/max attributes.\n+ *\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class VersionLevelRange extends VersionRange {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NDg5Mg=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY3NTI2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMDowOVrOGXHUlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxMzo1MVrOGXQHgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MDM5MA==", "bodyText": "Note this function is public, which suggests there could be external dependency that we need to take care of. The safer approach is to keep this static function and create a separate one with augmented parameters. cc @ijuma for validation.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426890390", "createdAt": "2020-05-18T21:00:09Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +141,26 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNDQ5OQ==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427034499", "createdAt": "2020-05-19T05:13:51Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -113,14 +141,26 @@ public static ApiVersionsResponse fromStruct(Struct struct, short version) {\n         }\n     }\n \n-    public static ApiVersionsResponse apiVersionsResponse(int throttleTimeMs, byte maxMagic) {\n+    public static ApiVersionsResponse apiVersionsResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MDM5MA=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk0MDgzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0NDo1NVrOGXJ2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0ODoyOFrOGXPtxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTg3NQ==", "bodyText": "I think we could delay the addition for these helpers until we actually need them.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426931875", "createdAt": "2020-05-18T22:44:55Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -77,6 +93,18 @@ public boolean shouldClientThrottle(short version) {\n         return version >= 2;\n     }\n \n+    public SupportedFeatureKey supportedFeature(String featureName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNzkwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427027909", "createdAt": "2020-05-19T04:48:28Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -77,6 +93,18 @@ public boolean shouldClientThrottle(short version) {\n         return version >= 2;\n     }\n \n+    public SupportedFeatureKey supportedFeature(String featureName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTg3NQ=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk1MTI5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0OTozNVrOGXJ85w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozNDowMlrOGXPf1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzQ3OQ==", "bodyText": "I gave it more thought, and wonder whether we could just call this function features to be more consistent with our convention for getters.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426933479", "createdAt": "2020-05-18T22:49:35Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNDM0MQ==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427024341", "createdAt": "2020-05-19T04:34:02Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ */\n+public class Features<VersionRangeType extends VersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<VersionRange> supportedFeatures(Map<String, VersionRange> features) {\n+        return new Features<VersionRange>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionLevelRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<VersionLevelRange> finalizedFeatures(Map<String, VersionLevelRange> features) {\n+        return new Features<VersionLevelRange>(features);\n+    }\n+\n+    public static Features<VersionLevelRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<VersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+\n+    public Map<String, VersionRangeType> all() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzQ3OQ=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk1MzMwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1MDoyMFrOGXJ-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxMDozN1rOGXQEEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzc3Ng==", "bodyText": "Need to check null", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426933776", "createdAt": "2020-05-18T22:50:20Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ *\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.\n+ */\n+public class VersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_KEY_LABEL = \"min_version\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_KEY_LABEL = \"max_version\";\n+\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected VersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        this.minKeyLabel = minKey;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public VersionRange(long minVersion, long maxVersion) {\n+        this(MIN_VERSION_KEY_LABEL, minVersion, MAX_VERSION_KEY_LABEL, maxVersion);\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {\n+        return new HashMap<String, Long>() {\n+            {\n+                put(minKeyLabel, min());\n+                put(maxKeyLabel, max());\n+            }\n+        };\n+    }\n+\n+    public static VersionRange deserialize(Map<String, Long> serialized) {\n+        return new VersionRange(\n+            valueOrThrow(MIN_VERSION_KEY_LABEL, serialized),\n+            valueOrThrow(MAX_VERSION_KEY_LABEL, serialized));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (!(other instanceof VersionRange)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMzYxNg==", "bodyText": "Done. Also added a test. Good catch!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427033616", "createdAt": "2020-05-19T05:10:37Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ *\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.\n+ */\n+public class VersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_KEY_LABEL = \"min_version\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_KEY_LABEL = \"max_version\";\n+\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected VersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        this.minKeyLabel = minKey;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public VersionRange(long minVersion, long maxVersion) {\n+        this(MIN_VERSION_KEY_LABEL, minVersion, MAX_VERSION_KEY_LABEL, maxVersion);\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {\n+        return new HashMap<String, Long>() {\n+            {\n+                put(minKeyLabel, min());\n+                put(maxKeyLabel, max());\n+            }\n+        };\n+    }\n+\n+    public static VersionRange deserialize(Map<String, Long> serialized) {\n+        return new VersionRange(\n+            valueOrThrow(MIN_VERSION_KEY_LABEL, serialized),\n+            valueOrThrow(MAX_VERSION_KEY_LABEL, serialized));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (!(other instanceof VersionRange)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzc3Ng=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk1ODQxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1MjoyMFrOGXKBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0NzoyOVrOGXPs1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNDU1MQ==", "bodyText": "Is there a difference between Objects.equals and this.minKeyLabel.equals(that.minKeyLabel)?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426934551", "createdAt": "2020-05-18T22:52:20Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ *\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.\n+ */\n+public class VersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_KEY_LABEL = \"min_version\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_KEY_LABEL = \"max_version\";\n+\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected VersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        this.minKeyLabel = minKey;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public VersionRange(long minVersion, long maxVersion) {\n+        this(MIN_VERSION_KEY_LABEL, minVersion, MAX_VERSION_KEY_LABEL, maxVersion);\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {\n+        return new HashMap<String, Long>() {\n+            {\n+                put(minKeyLabel, min());\n+                put(maxKeyLabel, max());\n+            }\n+        };\n+    }\n+\n+    public static VersionRange deserialize(Map<String, Long> serialized) {\n+        return new VersionRange(\n+            valueOrThrow(MIN_VERSION_KEY_LABEL, serialized),\n+            valueOrThrow(MAX_VERSION_KEY_LABEL, serialized));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (!(other instanceof VersionRange)) {\n+            return false;\n+        }\n+\n+        final VersionRange that = (VersionRange) other;\n+        return Objects.equals(this.minKeyLabel, that.minKeyLabel) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNzY3MA==", "bodyText": "It provides slightly better convenience: Object.equals will also take care of the null checks for you.\nAlso it turned out it was overkill to use Objects.equals for primitive type checks for minValue and maxValue. So I've simplified the code to use == those attributes.\nGood point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427027670", "createdAt": "2020-05-19T04:47:29Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/VersionRange.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ *\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.\n+ */\n+public class VersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_KEY_LABEL = \"min_version\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_KEY_LABEL = \"max_version\";\n+\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected VersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {\n+        if (minValue < 1 || maxValue < 1 || maxValue < minValue) {\n+            throw new IllegalArgumentException(\n+                String.format(\n+                    \"Expected minValue > 1, maxValue > 1 and maxValue >= minValue, but received\" +\n+                    \" minValue: %d, maxValue: %d\", minValue, maxValue));\n+        }\n+        this.minKeyLabel = minKey;\n+        this.minValue = minValue;\n+        this.maxKeyLabel = maxKeyLabel;\n+        this.maxValue = maxValue;\n+    }\n+\n+    public VersionRange(long minVersion, long maxVersion) {\n+        this(MIN_VERSION_KEY_LABEL, minVersion, MAX_VERSION_KEY_LABEL, maxVersion);\n+    }\n+\n+    public long min() {\n+        return minValue;\n+    }\n+\n+    public long max() {\n+        return maxValue;\n+    }\n+\n+    public String toString() {\n+        return String.format(\"%s[%d, %d]\", this.getClass().getSimpleName(), min(), max());\n+    }\n+\n+    public Map<String, Long> serialize() {\n+        return new HashMap<String, Long>() {\n+            {\n+                put(minKeyLabel, min());\n+                put(maxKeyLabel, max());\n+            }\n+        };\n+    }\n+\n+    public static VersionRange deserialize(Map<String, Long> serialized) {\n+        return new VersionRange(\n+            valueOrThrow(MIN_VERSION_KEY_LABEL, serialized),\n+            valueOrThrow(MAX_VERSION_KEY_LABEL, serialized));\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        }\n+        if (!(other instanceof VersionRange)) {\n+            return false;\n+        }\n+\n+        final VersionRange that = (VersionRange) other;\n+        return Objects.equals(this.minKeyLabel, that.minKeyLabel) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNDU1MQ=="}, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk2MTg3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1Mzo1NFrOGXKDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo0NzowNVrOGXQrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTA4Mg==", "bodyText": "nit: testMinMax, and we could reuse the same new VersionRange(1, 2) by only creating it once.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426935082", "createdAt": "2020-05-18T22:53:54Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionRangeTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionRangeTest {\n+    @Test\n+    public void testFailDueToInvalidParams() {\n+        // min and max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(0, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(-1, -1));\n+        // min can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(0, 1));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(-1, 1));\n+        // max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(1, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(1, -1));\n+        // min can't be > max.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(2, 1));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserializeTest() {\n+        VersionRange versionRange = new VersionRange(1, 2);\n+        assertEquals(1, versionRange.min());\n+        assertEquals(2, versionRange.max());\n+\n+        Map<String, Long> serialized = versionRange.serialize();\n+        assertEquals(\n+            new HashMap<String, Long>() {\n+                {\n+                    put(\"min_version\", versionRange.min());\n+                    put(\"max_version\", versionRange.max());\n+                }\n+            },\n+            serialized\n+        );\n+\n+        VersionRange deserialized = VersionRange.deserialize(serialized);\n+        assertEquals(1, deserialized.min());\n+        assertEquals(2, deserialized.max());\n+        assertEquals(versionRange, deserialized);\n+    }\n+\n+    @Test\n+    public void testDeserializationFailureTest() {\n+        // min_version can't be < 1.\n+        Map<String, Long> invalidWithBadMinVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 0L);\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMinVersion));\n+\n+        // max_version can't be < 1.\n+        Map<String, Long> invalidWithBadMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 1L);\n+                put(\"max_version\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMaxVersion));\n+\n+        // min_version and max_version can't be < 1.\n+        Map<String, Long> invalidWithBadMinMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 0L);\n+                put(\"max_version\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMinMaxVersion));\n+\n+        // min_version can't be > max_version.\n+        Map<String, Long> invalidWithLowerMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 2L);\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithLowerMaxVersion));\n+\n+        // min_version key missing.\n+        Map<String, Long> invalidWithMinKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithMinKeyMissing));\n+\n+        // max_version key missing.\n+        Map<String, Long> invalidWithMaxKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithMaxKeyMissing));\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        assertEquals(\"VersionRange[1, 1]\", new VersionRange(1, 1).toString());\n+        assertEquals(\"VersionRange[1, 2]\", new VersionRange(1, 2).toString());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        assertTrue(new VersionRange(1, 1).equals(new VersionRange(1, 1)));\n+        assertFalse(new VersionRange(1, 1).equals(new VersionRange(1, 2)));\n+    }\n+\n+    @Test\n+    public void testGetters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzcxMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427043710", "createdAt": "2020-05-19T05:47:05Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionRangeTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionRangeTest {\n+    @Test\n+    public void testFailDueToInvalidParams() {\n+        // min and max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(0, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(-1, -1));\n+        // min can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(0, 1));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(-1, 1));\n+        // max can't be < 1.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(1, 0));\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(1, -1));\n+        // min can't be > max.\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new VersionRange(2, 1));\n+    }\n+\n+    @Test\n+    public void testSerializeDeserializeTest() {\n+        VersionRange versionRange = new VersionRange(1, 2);\n+        assertEquals(1, versionRange.min());\n+        assertEquals(2, versionRange.max());\n+\n+        Map<String, Long> serialized = versionRange.serialize();\n+        assertEquals(\n+            new HashMap<String, Long>() {\n+                {\n+                    put(\"min_version\", versionRange.min());\n+                    put(\"max_version\", versionRange.max());\n+                }\n+            },\n+            serialized\n+        );\n+\n+        VersionRange deserialized = VersionRange.deserialize(serialized);\n+        assertEquals(1, deserialized.min());\n+        assertEquals(2, deserialized.max());\n+        assertEquals(versionRange, deserialized);\n+    }\n+\n+    @Test\n+    public void testDeserializationFailureTest() {\n+        // min_version can't be < 1.\n+        Map<String, Long> invalidWithBadMinVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 0L);\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMinVersion));\n+\n+        // max_version can't be < 1.\n+        Map<String, Long> invalidWithBadMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 1L);\n+                put(\"max_version\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMaxVersion));\n+\n+        // min_version and max_version can't be < 1.\n+        Map<String, Long> invalidWithBadMinMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 0L);\n+                put(\"max_version\", 0L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithBadMinMaxVersion));\n+\n+        // min_version can't be > max_version.\n+        Map<String, Long> invalidWithLowerMaxVersion = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 2L);\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithLowerMaxVersion));\n+\n+        // min_version key missing.\n+        Map<String, Long> invalidWithMinKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"max_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithMinKeyMissing));\n+\n+        // max_version key missing.\n+        Map<String, Long> invalidWithMaxKeyMissing = new HashMap<String, Long>() {\n+            {\n+                put(\"min_version\", 1L);\n+            }\n+        };\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> VersionRange.deserialize(invalidWithMaxKeyMissing));\n+    }\n+\n+    @Test\n+    public void testToString() {\n+        assertEquals(\"VersionRange[1, 1]\", new VersionRange(1, 1).toString());\n+        assertEquals(\"VersionRange[1, 2]\", new VersionRange(1, 2).toString());\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        assertTrue(new VersionRange(1, 1).equals(new VersionRange(1, 1)));\n+        assertFalse(new VersionRange(1, 1).equals(new VersionRange(1, 2)));\n+    }\n+\n+    @Test\n+    public void testGetters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTA4Mg=="}, "originalCommit": null, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk3MDk0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1Nzo0NVrOGXKIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo0NTozM1rOGXQprQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNjQ2OQ==", "bodyText": "Does L17-23 really necessary for testing?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426936469", "createdAt": "2020-05-18T22:57:45Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionLevelRangeTest {\n+\n+    @Test\n+    public void testCreateFailDueToInvalidParams() {\n+        // min and max can't be < 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzI0NQ==", "bodyText": "Done. Some of it is not required. Good point, I have removed the unnecessary testing now.\nWe still need to check if exception is thrown in these 4 basic tests: min < 1, max < 1, min & max < 1 and max > min.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427043245", "createdAt": "2020-05-19T05:45:33Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/VersionLevelRangeTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionLevelRangeTest {\n+\n+    @Test\n+    public void testCreateFailDueToInvalidParams() {\n+        // min and max can't be < 1.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNjQ2OQ=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk3MjYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo1ODozNFrOGXKJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1MzozMFrOGXQzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNjc1MQ==", "bodyText": "Could we add a reference to the class?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426936751", "createdAt": "2020-05-18T22:58:34Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTc1NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427045754", "createdAt": "2020-05-19T05:53:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNjc1MQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk3NzY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzowMDo1MFrOGXKMvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyMTozN1rOGYAfSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzUzMg==", "bodyText": "It seems that we don't have the handling logic for this FeatureCacheUpdateException. Do we think this is fatal?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426937532", "createdAt": "2020-05-18T23:00:50Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MDcxNg==", "bodyText": "Might worth getting a ticket to define the handling strategy for such exception, and in general how updateOrThrow will be used.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426990716", "createdAt": "2020-05-19T02:15:41Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzUzMg=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNzAxOA==", "bodyText": "As we discussed offline today, this exception is already handled in ChangeNotificationProcessorThread.doWork() method defined in FinalizedFeatureChangeListener.scala. Basically, the ZK change notification processor thread exits the Broker with a fatal error (non-zero exit code) when this exception (or any exception) is caught while trying to update FinalizedFeatureCache.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427827018", "createdAt": "2020-05-20T08:21:37Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzUzMg=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk4MDIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzowMjowMVrOGXKOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1MjoxNVrOGXQx2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzk0NA==", "bodyText": "Is this function being used?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426937944", "createdAt": "2020-05-18T23:02:01Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTMzOA==", "bodyText": "Done. It was unused and I have eliminated it now.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427045338", "createdAt": "2020-05-19T05:52:15Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNzk0NA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk5NzcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoxMDoxMlrOGXKYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNjowNVrOGZNkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDU5Nw==", "bodyText": "Do you expect these helper functions actually to be used in production logic with subsequent PRs?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426940597", "createdAt": "2020-05-18T23:10:12Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -1567,6 +1567,36 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n     createRecursive(path, data = null, throwIfPathExists = false)\n   }\n \n+  // Visible for testing.\n+  def createFeatureZNode(nodeContents: FeatureZNode): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MDAzMA==", "bodyText": "Yes, this will get used in the future. For example the write path will use it.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427050030", "createdAt": "2020-05-19T06:06:13Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -1567,6 +1567,36 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n     createRecursive(path, data = null, throwIfPathExists = false)\n   }\n \n+  // Visible for testing.\n+  def createFeatureZNode(nodeContents: FeatureZNode): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDU5Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMjkwNA==", "bodyText": "If that's the case, I feel we could remove the testing only comment.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428432904", "createdAt": "2020-05-21T04:02:25Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -1567,6 +1567,36 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n     createRecursive(path, data = null, throwIfPathExists = false)\n   }\n \n+  // Visible for testing.\n+  def createFeatureZNode(nodeContents: FeatureZNode): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDU5Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTgxNw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429089817", "createdAt": "2020-05-22T07:36:05Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -1567,6 +1567,36 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n     createRecursive(path, data = null, throwIfPathExists = false)\n   }\n \n+  // Visible for testing.\n+  def createFeatureZNode(nodeContents: FeatureZNode): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDU5Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODk5OTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoxMDo1NlrOGXKZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjowNzo1NVrOGXRGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDgzMA==", "bodyText": "I don't think we need a nested if-else:\n val version = {\n      if (apiVersion >= KAFKA_2_6_IV1) \n        5\n      else if (apiVersion >= KAFKA_0_10_0_IV1)\n        4\n      else\n        2\n    }", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426940830", "createdAt": "2020-05-18T23:10:56Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,27 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.\n+   * - Register the broker with v2 json format otherwise.\n    *\n    * Due to KAFKA-3100, 0.9.0.0 broker and old clients will break if JSON version is above 2.\n    *\n-   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above without having to\n-   * upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in any case).\n+   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above\n+   * without having to upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in\n+   * any case).\n    */\n   def apply(broker: Broker, apiVersion: ApiVersion, jmxPort: Int): BrokerInfo = {\n-    // see method documentation for the reason why we do this\n-    val version = if (apiVersion >= KAFKA_0_10_0_IV1) 4 else 2\n+    val version = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA1MDU5Nw==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427050597", "createdAt": "2020-05-19T06:07:55Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,27 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.\n+   * - Register the broker with v2 json format otherwise.\n    *\n    * Due to KAFKA-3100, 0.9.0.0 broker and old clients will break if JSON version is above 2.\n    *\n-   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above without having to\n-   * upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in any case).\n+   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above\n+   * without having to upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in\n+   * any case).\n    */\n   def apply(broker: Broker, apiVersion: ApiVersion, jmxPort: Int): BrokerInfo = {\n-    // see method documentation for the reason why we do this\n-    val version = if (apiVersion >= KAFKA_0_10_0_IV1) 4 else 2\n+    val version = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MDgzMA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTAwODg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoxNjowM1rOGXKfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjozOTozMlrOGXR3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MjM3Nw==", "bodyText": "Could we make feature extraction as a helper function?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426942377", "createdAt": "2020-05-18T23:16:03Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -225,7 +255,12 @@ object BrokerIdZNode {\n           }\n \n         val rack = brokerInfo.get(RackKey).flatMap(_.to[Option[String]])\n-        BrokerInfo(Broker(id, endpoints, rack), version, jmxPort)\n+        val features = FeatureZNode.asJavaMap(brokerInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2MzA1Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427063053", "createdAt": "2020-05-19T06:39:32Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -225,7 +255,12 @@ object BrokerIdZNode {\n           }\n \n         val rack = brokerInfo.get(RackKey).flatMap(_.to[Option[String]])\n-        BrokerInfo(Broker(id, endpoints, rack), version, jmxPort)\n+        val features = FeatureZNode.asJavaMap(brokerInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0MjM3Nw=="}, "originalCommit": null, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTAxMjI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzoxNzoyNlrOGXKheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo1MTo0OVrOGYD-hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0Mjg0Mg==", "bodyText": "Could we make this parameter configurable?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426942842", "createdAt": "2020-05-18T23:17:26Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -210,6 +215,14 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         /* setup zookeeper */\n         initZkClient(time)\n \n+        /* initialize features */\n+        _featureChangeListener = new FinalizedFeatureChangeListener(_zkClient)\n+        if (config.interBrokerProtocolVersion >= KAFKA_2_6_IV1) {\n+          // The feature versioning system (KIP-584) is active only when:\n+          // config.interBrokerProtocolVersion is >= KAFKA_2_6_IV1.\n+          _featureChangeListener.initOrThrow(60000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg4NDE2NQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427884165", "createdAt": "2020-05-20T09:51:49Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -210,6 +215,14 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         /* setup zookeeper */\n         initZkClient(time)\n \n+        /* initialize features */\n+        _featureChangeListener = new FinalizedFeatureChangeListener(_zkClient)\n+        if (config.interBrokerProtocolVersion >= KAFKA_2_6_IV1) {\n+          // The feature versioning system (KIP-584) is active only when:\n+          // config.interBrokerProtocolVersion is >= KAFKA_2_6_IV1.\n+          _featureChangeListener.initOrThrow(60000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0Mjg0Mg=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIyODk2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToxOTozOFrOGXMkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0MjoxMFrOGXR7zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI2NA==", "bodyText": "What would happen if we are dealing with a V4 json map containing features?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426976264", "createdAt": "2020-05-19T01:19:38Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV5(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NDI3MQ==", "bodyText": "In my understanding, this is an impossible case. Because, we always write features into the JSON only in v5 or above. That is why, there is no test for it. Let me know how you feel about it.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427064271", "createdAt": "2020-05-19T06:42:10Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV5(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjI2NA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIyOTg1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMDowMlrOGXMkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0MDo1OFrOGXR5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjM5Ng==", "bodyText": "nit: This test could move closer to testFromJsonV4WithNoRack", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426976396", "createdAt": "2020-05-19T01:20:02Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV5(): Unit = {\n+    val json = \"\"\"{\n+      \"version\":5,\n+      \"host\":\"localhost\",\n+      \"port\":9092,\n+      \"jmx_port\":9999,\n+      \"timestamp\":\"2233345666\",\n+      \"endpoints\":[\"CLIENT://host1:9092\", \"REPLICATION://host1:9093\"],\n+      \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},\n+      \"rack\":\"dc1\",\n+      \"features\": {\"feature1\": {\"min_version\": 1, \"max_version\": 2}, \"feature2\": {\"min_version\": 2, \"max_version\": 4}}\n+    }\"\"\"\n+    val broker = parseBrokerJson(1, json)\n+    assertEquals(1, broker.id)\n+    val brokerEndPoint = broker.brokerEndPoint(new ListenerName(\"CLIENT\"))\n+    assertEquals(\"host1\", brokerEndPoint.host)\n+    assertEquals(9092, brokerEndPoint.port)\n+    assertEquals(Some(\"dc1\"), broker.rack)\n+    assertEquals(Features.supportedFeatures(\n+      Map[String, VersionRange](\n+        \"feature1\" -> new VersionRange(1, 2),\n+        \"feature2\" -> new VersionRange(2, 4)).asJava),\n+      broker.features)\n+  }\n+\n+  @Test\n+  def testFromJsonV4WithNoFeatures(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2MzcyNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427063724", "createdAt": "2020-05-19T06:40:58Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/cluster/BrokerEndPointTest.scala", "diffHunk": "@@ -149,6 +153,53 @@ class BrokerEndPointTest {\n     assertEquals(None, broker.rack)\n   }\n \n+  @Test\n+  def testFromJsonV5(): Unit = {\n+    val json = \"\"\"{\n+      \"version\":5,\n+      \"host\":\"localhost\",\n+      \"port\":9092,\n+      \"jmx_port\":9999,\n+      \"timestamp\":\"2233345666\",\n+      \"endpoints\":[\"CLIENT://host1:9092\", \"REPLICATION://host1:9093\"],\n+      \"listener_security_protocol_map\":{\"CLIENT\":\"SSL\", \"REPLICATION\":\"PLAINTEXT\"},\n+      \"rack\":\"dc1\",\n+      \"features\": {\"feature1\": {\"min_version\": 1, \"max_version\": 2}, \"feature2\": {\"min_version\": 2, \"max_version\": 4}}\n+    }\"\"\"\n+    val broker = parseBrokerJson(1, json)\n+    assertEquals(1, broker.id)\n+    val brokerEndPoint = broker.brokerEndPoint(new ListenerName(\"CLIENT\"))\n+    assertEquals(\"host1\", brokerEndPoint.host)\n+    assertEquals(9092, brokerEndPoint.port)\n+    assertEquals(Some(\"dc1\"), broker.rack)\n+    assertEquals(Features.supportedFeatures(\n+      Map[String, VersionRange](\n+        \"feature1\" -> new VersionRange(1, 2),\n+        \"feature2\" -> new VersionRange(2, 4)).asJava),\n+      broker.features)\n+  }\n+\n+  @Test\n+  def testFromJsonV4WithNoFeatures(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjM5Ng=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTIzMzQ0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyMjowNVrOGXMmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0MzozM1rOGXR-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjkzMg==", "bodyText": "Should we test isDefined before calling get?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426976932", "createdAt": "2020-05-19T01:22:05Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "diffHunk": "@@ -0,0 +1,95 @@\n+package kafka.server\n+\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange, VersionRange}\n+import org.junit.Assert.{assertEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureCacheTest {\n+\n+  @Before\n+  def setUp(): Unit = {\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  @Test\n+  def testEmpty(): Unit = {\n+    assertTrue(FinalizedFeatureCache.get.isEmpty)\n+  }\n+\n+  @Test\n+  def testUpdateOrThrowFailedDueToInvalidEpoch(): Unit = {\n+    val supportedFeatures = Map[String, VersionRange](\n+      \"feature_1\" -> new VersionRange(1, 4))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val features = Map[String, VersionLevelRange](\n+      \"feature_1\" -> new VersionLevelRange(1, 4))\n+    val finalizedFeatures = Features.finalizedFeatures(features.asJava)\n+\n+    FinalizedFeatureCache.updateOrThrow(finalizedFeatures, 10)\n+    assertEquals(finalizedFeatures, FinalizedFeatureCache.get.get.features)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NDkyMw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427064923", "createdAt": "2020-05-19T06:43:33Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureCacheTest.scala", "diffHunk": "@@ -0,0 +1,95 @@\n+package kafka.server\n+\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange, VersionRange}\n+import org.junit.Assert.{assertEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureCacheTest {\n+\n+  @Before\n+  def setUp(): Unit = {\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  @Test\n+  def testEmpty(): Unit = {\n+    assertTrue(FinalizedFeatureCache.get.isEmpty)\n+  }\n+\n+  @Test\n+  def testUpdateOrThrowFailedDueToInvalidEpoch(): Unit = {\n+    val supportedFeatures = Map[String, VersionRange](\n+      \"feature_1\" -> new VersionRange(1, 4))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val features = Map[String, VersionLevelRange](\n+      \"feature_1\" -> new VersionLevelRange(1, 4))\n+    val finalizedFeatures = Features.finalizedFeatures(features.asJava)\n+\n+    FinalizedFeatureCache.updateOrThrow(finalizedFeatures, 10)\n+    assertEquals(finalizedFeatures, FinalizedFeatureCache.get.get.features)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjkzMg=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTI0MDQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNjoxN1rOGXMqug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1NDowMFrOGXQ0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3Nzk3OA==", "bodyText": "s/existingStr/oldFeatureAndEpoch", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426977978", "createdAt": "2020-05-19T01:26:17Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTkwNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427045906", "createdAt": "2020-05-19T05:54:00Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3Nzk3OA=="}, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTI0MTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNjo0M1rOGXMrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1MTowNFrOGYuglQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODA5MA==", "bodyText": "This val seems redundant.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426978090", "createdAt": "2020-05-19T01:26:43Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +\n+          \" checks failed! Supported %s has incompatibilities with the latest finalized %s.\" +\n+          \" The incompatible features are: %s.\").format(\n+          SupportedFeatures.get, latest, incompatibleFeatures)\n+        throw new FeatureCacheUpdateException(errorMsg)\n+      }\n+    }\n+    val logMsg = \"Updated cache from existing finalized %s to latest finalized %s\".format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NjM1Mw==", "bodyText": "It is used intentionally to split the log message into 2 lines (for ~100-char readability limit per line). Otherwise the string will be huge and all in the same line.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427046353", "createdAt": "2020-05-19T05:55:21Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +\n+          \" checks failed! Supported %s has incompatibilities with the latest finalized %s.\" +\n+          \" The incompatible features are: %s.\").format(\n+          SupportedFeatures.get, latest, incompatibleFeatures)\n+        throw new FeatureCacheUpdateException(errorMsg)\n+      }\n+    }\n+    val logMsg = \"Updated cache from existing finalized %s to latest finalized %s\".format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODA5MA=="}, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxODUxNw==", "bodyText": "Could we move this logic as part of inner else? Like:\nelse {\n      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n      if (incompatibleFeatures.nonEmpty) {\n        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +\n          \" checks failed! Supported %s has incompatibilities with the latest finalized %s.\" +\n          \" The incompatible features are: %s.\").format(\n          SupportedFeatures.get, latest, incompatibleFeatures)\n        throw new FeatureCacheUpdateException(errorMsg)\n      } else {\n        val logMsg = \"Updated cache from existing finalized %s to latest finalized %s\".format(\n          oldFeatureAndEpoch, latest)\n        featuresAndEpoch = Some(latest)\n        info(logMsg)\n      }\n    }\n\nIt makes the if-else logic more tight.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428418517", "createdAt": "2020-05-21T02:58:16Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +\n+          \" checks failed! Supported %s has incompatibilities with the latest finalized %s.\" +\n+          \" The incompatible features are: %s.\").format(\n+          SupportedFeatures.get, latest, incompatibleFeatures)\n+        throw new FeatureCacheUpdateException(errorMsg)\n+      }\n+    }\n+    val logMsg = \"Updated cache from existing finalized %s to latest finalized %s\".format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODA5MA=="}, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTAxMw==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428581013", "createdAt": "2020-05-21T10:51:04Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +\n+          \" checks failed! Supported %s has incompatibilities with the latest finalized %s.\" +\n+          \" The incompatible features are: %s.\").format(\n+          SupportedFeatures.get, latest, incompatibleFeatures)\n+        throw new FeatureCacheUpdateException(errorMsg)\n+      }\n+    }\n+    val logMsg = \"Updated cache from existing finalized %s to latest finalized %s\".format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODA5MA=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTI0MjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMToyNzoyNVrOGXMr2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1NToxN1rOGXQ1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODI2Nw==", "bodyText": "nit: this errorMsg val seems redundant.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426978267", "createdAt": "2020-05-19T01:27:25Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NjMzMQ==", "bodyText": "It is used intentionally to split the log message into 2 lines (for ~100-char readability limit per line). Otherwise the string will be huge and all in the same line.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427046331", "createdAt": "2020-05-19T05:55:17Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,93 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionLevelRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[VersionLevelRange], epoch: Int) {\n+\n+  def isValid(newEpoch: Int): Boolean = {\n+    newEpoch >= epoch\n+  }\n+\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * FinalizedFeatureChangeListener.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest\n+ * returning the features information in the response. In the future, as the feature versioning\n+ * system in KIP-584 is used more widely, this cache could be read by other read paths trying to\n+ * learn the finalized feature information.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[VersionLevelRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {\n+    val existingStr = featuresAndEpoch.map(existing => existing.toString).getOrElse(\"<empty>\")\n+    if (!featuresAndEpoch.isEmpty && featuresAndEpoch.get.epoch > latest.epoch) {\n+      val errorMsg = (\"FinalizedFeatureCache update failed due to invalid epoch in new finalized %s.\" +\n+        \" The existing finalized is %s\").format(latest, existingStr)\n+      throw new FeatureCacheUpdateException(errorMsg)\n+    } else {\n+      val incompatibleFeatures = SupportedFeatures.incompatibleFeatures(latest.features)\n+      if (incompatibleFeatures.nonEmpty) {\n+        val errorMsg = (\"FinalizedFeatureCache updated failed since feature compatibility\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3ODI2Nw=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTI1Mjk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMTozNDozMVrOGXMykA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjowMzoyNFrOGXRAhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3OTk4NA==", "bodyText": "This is only used on L53, maybe we could just use supportedFeatures instead", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426979984", "createdAt": "2020-05-19T01:34:31Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[VersionLevelRange]): Set[String] = {\n+    val supported = get", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0OTA5Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427049093", "createdAt": "2020-05-19T06:03:24Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[VersionLevelRange]): Set[String] = {\n+    val supported = get", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3OTk4NA=="}, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTI1ODY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMTozNzo0MFrOGXM19w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjowMjoxOVrOGXQ-9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4MDg1NQ==", "bodyText": "This comment is a bit vague to me, what are you referring by incompatibilities?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426980855", "createdAt": "2020-05-19T01:37:40Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0ODY5NQ==", "bodyText": "Good point. I have improved the doc now. Let me know how you feel about it.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427048695", "createdAt": "2020-05-19T06:02:19Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk4MDg1NQ=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTMxNjA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoxMjo1NVrOGXNZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjowNTozOVrOGXRDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MDAwNw==", "bodyText": "nit: maybe rename to incompatibleWith and flip the boolean", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426990007", "createdAt": "2020-05-19T02:12:55Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[VersionLevelRange]): Set[String] = {\n+    val supported = get\n+\n+    val incompatibilities = finalized.all.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supported.get(feature);\n+        if (supportedVersions == null) {\n+          (feature, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (!versionLevels.isCompatibleWith(supportedVersions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0OTgzMQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427049831", "createdAt": "2020-05-19T06:05:39Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,70 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, VersionRange, VersionLevelRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[VersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[VersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be incompatible between the latest features supported\n+   * by the Broker, and the provided cluster-wide finalized features.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[VersionLevelRange]): Set[String] = {\n+    val supported = get\n+\n+    val incompatibilities = finalized.all.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supported.get(feature);\n+        if (supportedVersions == null) {\n+          (feature, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (!versionLevels.isCompatibleWith(supportedVersions)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5MDAwNw=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM2MTkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjozOTo0MFrOGXN1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyODo0MFrOGZPAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzEwOA==", "bodyText": "Does this event actually happen? Will we hit illegal state exception in updateLatestOrThrow?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r426997108", "createdAt": "2020-05-19T02:39:40Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,200 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      processNotification()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NzI1MQ==", "bodyText": "I have added comments now to the code.\nThe idea I had was that this event may happen, rarely (ex: operational error).\nIn such a case, we do not want to kill the brokers, so we just log a warning and treat the case as if the node is absent, and populate the cache with empty features.\nSo, this case is actually handled inside FeatureCacheUpdater.updateLatestOrThrow().\nThe call to read ZK node will return ZkVersion.UnknownVersion whenever the node does not exist in ZK, and I've explicitly handled this returned version.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r427047251", "createdAt": "2020-05-19T05:58:04Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,200 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      processNotification()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzEwOA=="}, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMzUxNw==", "bodyText": "I think even if this is an operational error, the cluster is at risk of violating the feature semantics previously enabled, which is different from an unknown feature version from the beginning. I feel we should just exit in fatal error for this case, but would open for discussion.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428433517", "createdAt": "2020-05-21T04:05:31Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,200 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      processNotification()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzEwOA=="}, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMzQ5MQ==", "bodyText": "You bring up a good point.\nMy main concern is availability. If we exit the Broker here, then, whenever the feature ZK node gets deleted (accidentally), it could crash all brokers in the fleet all at once leading to an availability problem.\nWith regards to violating feature semantics, good point.\nI'm in 2 minds here, and perhaps we can also hear @hachikuji 's thoughts on this topic.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429113491", "createdAt": "2020-05-22T08:28:40Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,200 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      processNotification()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzEwOA=="}, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg2MzMyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzozOTozMlrOGYheKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0MTo0MlrOGYuRhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NzQwMA==", "bodyText": "deserialize()? I think the second sentence is redundant.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428367400", "createdAt": "2020-05-20T23:39:32Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map with underlying features serialized. The returned value can be deserialized\n+     *           using one of the deserialize* APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3NzE1Ng==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428577156", "createdAt": "2020-05-21T10:41:42Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map with underlying features serialized. The returned value can be deserialized\n+     *           using one of the deserialize* APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2NzQwMA=="}, "originalCommit": null, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg4MDM4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo0ODo0NlrOGYhpTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDozMjoxMlrOGYuC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MDI1NA==", "bodyText": "Do we want to get a unit test class for BaseVersionRange?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428370254", "createdAt": "2020-05-20T23:48:46Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MzQwNw==", "bodyText": "It is thoroughly tested in it's child class test suite: SupportedVersionRangeTest.\nPersonally I feel it is good enough this way, because, anyway to test this class we need to inherit into a sub-class (since constructor is protected). And by testing via SupportedVersionRangeTest, we achieve exactly the same.\nI have now added top-level documentation in the test suite of SupportedVersionRangeTest, explaining the above.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428573407", "createdAt": "2020-05-21T10:32:12Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MDI1NA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg4NDI3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1MTowNFrOGYhr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NDo1OVrOGYuWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MDkwNQ==", "bodyText": "Should be SupportedVersionRange", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428370905", "createdAt": "2020-05-20T23:51:04Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3ODQyNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428578424", "createdAt": "2020-05-21T10:44:59Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MDkwNQ=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg4NjQxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1MjoyMFrOGYhtPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NTowNFrOGYuWqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTI2MA==", "bodyText": "Just for the sake of argument, I feel we could remove this method and just test:\nmin() < supportedVersionRange.min() || max() > supportedVersionRange.max()\n\nfor incompatibility.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428371260", "createdAt": "2020-05-20T23:52:20Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {\n+        return min() >= versionRange.min() && max() <= versionRange.max();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3ODQ3Mg==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428578472", "createdAt": "2020-05-21T10:45:04Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {\n+        return min() >= versionRange.min() && max() <= versionRange.max();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MTI2MA=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODAyMjkwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMToxMzoxOFrOGYjBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NTo1M1rOGYuYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5Mjc1NA==", "bodyText": "nit: supportedVersionRange", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428392754", "createdAt": "2020-05-21T01:13:18Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {\n+        return min() >= versionRange.min() && max() <= versionRange.max();\n+    }\n+\n+    /**\n+     * Checks if the [min, max] version level range of this object does *NOT* fall within the\n+     * [min, max] version range of the provided SupportedVersionRange parameter.\n+     *\n+     * @param versionRange   the SupportedVersionRange to be checked", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3ODgyOQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428578829", "createdAt": "2020-05-21T10:45:53Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/FinalizedVersionRange.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of {@link BaseVersionRange} representing a range of version levels.\n+ * NOTE: This is the backing class used to define the min/max version levels for finalized features.\n+ */\n+public class FinalizedVersionRange extends BaseVersionRange {\n+    // Label for the min version key, that's used only for serialization/deserialization purposes.\n+    private static final String MIN_VERSION_LEVEL_KEY_LABEL = \"min_version_level\";\n+\n+    // Label for the max version key, that's used only for serialization/deserialization purposes.\n+    private static final String MAX_VERSION_LEVEL_KEY_LABEL = \"max_version_level\";\n+\n+    public FinalizedVersionRange(long minVersionLevel, long maxVersionLevel) {\n+        super(MIN_VERSION_LEVEL_KEY_LABEL, minVersionLevel, MAX_VERSION_LEVEL_KEY_LABEL, maxVersionLevel);\n+    }\n+\n+    public static FinalizedVersionRange deserialize(Map<String, Long> serialized) {\n+        return new FinalizedVersionRange(\n+            BaseVersionRange.valueOrThrow(MIN_VERSION_LEVEL_KEY_LABEL, serialized),\n+            BaseVersionRange.valueOrThrow(MAX_VERSION_LEVEL_KEY_LABEL, serialized));\n+    }\n+\n+    private boolean isCompatibleWith(BaseVersionRange versionRange) {\n+        return min() >= versionRange.min() && max() <= versionRange.max();\n+    }\n+\n+    /**\n+     * Checks if the [min, max] version level range of this object does *NOT* fall within the\n+     * [min, max] version range of the provided SupportedVersionRange parameter.\n+     *\n+     * @param versionRange   the SupportedVersionRange to be checked", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5Mjc1NA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODAyMzg5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/SupportedVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMToxNDoxMFrOGYjB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NjoyOVrOGYuY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5MjkzNg==", "bodyText": "Why this is a NOTE? Could we just comment like:\nAn extended BaseVersionRange representing the min/max versions for supported features.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428392936", "createdAt": "2020-05-21T01:14:10Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/SupportedVersionRange.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of VersionRange representing a range of versions.\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTA3MA==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428579070", "createdAt": "2020-05-21T10:46:29Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/SupportedVersionRange.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+/**\n+ * A specialization of VersionRange representing a range of versions.\n+ * NOTE: This is the backing class used to define the min/max versions for supported features.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5MjkzNg=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODA4NTg2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo1NDozMlrOGYjosA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0MTo0NFrOGZMVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMjg2NA==", "bodyText": "Maybe I'm a bit too obsessive about code duplication, but after I made an attempt I thought we could actually have the internal deserialization logic shared between deserializeFinalizedFeatures and deserializeSupportedFeatures by making a template\n public static Features<FinalizedVersionRange> deserializeFinalizedFeatures(Map<String, Map<String, Long>> serialized) {\n        return deserializeFeatures(serialized, FinalizedVersionRange::deserialize);\n    }\n\n    public static Features<SupportedVersionRange> deserializeSupportedFeatures(\n        Map<String, Map<String, Long>> serialized) {\n        return deserializeFeatures(serialized, SupportedVersionRange::deserialize);\n    }\n        \n    \n    private interface Deserializer<V> {\n        V deserialize(Map<String, Long> serialized);\n    }\n\n\n    private static <V extends BaseVersionRange> Features<V> deserializeFeatures(Map<String, Map<String, Long>> serialized, Deserializer<V> deserializer) {\n        return new Features<>(serialized.entrySet().stream().collect(\n            Collectors.toMap(\n                Map.Entry::getKey,\n                entry -> deserializer.deserialize(entry.getValue()))));\n    }", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428402864", "createdAt": "2020-05-21T01:54:32Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map with underlying features serialized. The returned value can be deserialized\n+     *           using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserialize a map to Features<FinalizedVersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<FinalizedVersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<FinalizedVersionRange> object\n+     */\n+    public static Features<FinalizedVersionRange> deserializeFinalizedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return finalizedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> FinalizedVersionRange.deserialize(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<SupportedVersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<SupportedVersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<SupportedVersionRange> object\n+     */\n+    public static Features<SupportedVersionRange> deserializeSupportedFeatures(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2OTY3Mg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429069672", "createdAt": "2020-05-22T06:41:44Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being VersionRangeType.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        this.features = features;\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"supported\" features.\n+     */\n+    public static Features<SupportedVersionRange> supportedFeatures(Map<String, SupportedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    /**\n+     * @param features   Map of feature name to FinalizedVersionRange, as the backing data structure\n+     *                   for the Features object.\n+     * @return           Returns a new Features object representing \"finalized\" features.\n+     */\n+    public static Features<FinalizedVersionRange> finalizedFeatures(Map<String, FinalizedVersionRange> features) {\n+        return new Features<>(features);\n+    }\n+\n+    // Visible for testing.\n+    public static Features<FinalizedVersionRange> emptyFinalizedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public static Features<SupportedVersionRange> emptySupportedFeatures() {\n+        return new Features<>(new HashMap<>());\n+    }\n+\n+    public Map<String, VersionRangeType> features() {\n+        return features;\n+    }\n+\n+    public boolean empty() {\n+        return features.isEmpty();\n+    }\n+\n+    /**\n+     * @param  feature   name of the feature\n+     *\n+     * @return           the VersionRangeType corresponding to the feature name, or null if absent\n+     */\n+    public VersionRangeType get(String feature) {\n+        return features.get(feature);\n+    }\n+\n+    public String toString() {\n+        return String.format(\n+            \"Features{%s}\",\n+            features\n+                .entrySet()\n+                .stream()\n+                .map(entry -> String.format(\"(%s -> %s)\", entry.getKey(), entry.getValue()))\n+                .collect(joining(\", \"))\n+        );\n+    }\n+\n+    /**\n+     * @return   A map with underlying features serialized. The returned value can be deserialized\n+     *           using one of the deserialize* APIs.\n+     */\n+    public Map<String, Map<String, Long>> serialize() {\n+        return features.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> entry.getValue().serialize()));\n+    }\n+\n+    /**\n+     * Deserialize a map to Features<FinalizedVersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<FinalizedVersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<FinalizedVersionRange> object\n+     */\n+    public static Features<FinalizedVersionRange> deserializeFinalizedFeatures(\n+        Map<String, Map<String, Long>> serialized) {\n+        return finalizedFeatures(serialized.entrySet().stream().collect(\n+            Collectors.toMap(\n+                Map.Entry::getKey,\n+                entry -> FinalizedVersionRange.deserialize(entry.getValue()))));\n+    }\n+\n+    /**\n+     * Deserializes a map to Features<SupportedVersionRange>.\n+     *\n+     * @param serialized   the serialized representation of a Features<SupportedVersionRange> object,\n+     *                     generated using the serialize() API.\n+     *\n+     * @return             the deserialized Features<SupportedVersionRange> object\n+     */\n+    public static Features<SupportedVersionRange> deserializeSupportedFeatures(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMjg2NA=="}, "originalCommit": null, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODA5MjMzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo1ODozNVrOGYjswA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0ODoxOVrOGYucLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMzkwNA==", "bodyText": "Missing header", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428403904", "createdAt": "2020-05-21T01:58:35Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.apache.kafka.common.feature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTg4NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428579884", "createdAt": "2020-05-21T10:48:19Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.apache.kafka.common.feature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMzkwNA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODA5MzM4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/requests/ApiVersionsResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMTo1OToxNFrOGYjtZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowMToxMlrOGZP8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDA2OA==", "bodyText": "Seems we didn't trigger style check on this new class.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428404068", "createdAt": "2020-05-21T01:59:14Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ApiVersionsResponseTest.java", "diffHunk": "@@ -17,13 +17,19 @@\n \n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.feature.Features;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyODgxMg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429128812", "createdAt": "2020-05-22T09:01:12Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/requests/ApiVersionsResponseTest.java", "diffHunk": "@@ -17,13 +17,19 @@\n \n package org.apache.kafka.common.requests;\n \n+import org.apache.kafka.common.feature.Features;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDA2OA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODA5NjA3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowMDo1MlrOGYjvCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo0NzowMlrOGZMcjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ5MQ==", "bodyText": "What's the difference between this test class and its super class test case? Same question for SupportedVersionRangeTest", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428404491", "createdAt": "2020-05-21T02:00:52Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FinalizedVersionRangeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MTUwMA==", "bodyText": "Done. I have simplified this test suite eliminating the redundant tests, and only keeping the ones specific to FinalizedVersionRange. Also I have added documentation to both test suites explaining their purpose.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429071500", "createdAt": "2020-05-22T06:47:02Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FinalizedVersionRangeTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.apache.kafka.common.feature;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FinalizedVersionRangeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ5MQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE4OTk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzowMjoxOFrOGYkp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0OToyOFrOGYud8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxOTUzOA==", "bodyText": "I think we don't need to talk about future work inside the comment, just making it clear that the read path for serving ApiVersionsRequest is the only reader as of now.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428419538", "createdAt": "2020-05-21T03:02:18Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,88 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * {@link FinalizedFeatureChangeListener}.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDMzNw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428580337", "createdAt": "2020-05-21T10:49:28Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,88 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * {@link FinalizedFeatureChangeListener}.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxOTUzOA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODE5Mzg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzowNDo1OVrOGYksLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1MTo0NVrOGYuhhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMDE0MQ==", "bodyText": "nit: provide", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428420141", "createdAt": "2020-05-21T03:04:59Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTI1Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428581253", "createdAt": "2020-05-21T10:51:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMDE0MQ=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwMzUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxMTo1OFrOGYkyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjozODoxNFrOGZlamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTcxMw==", "bodyText": "Do we need the comment to be on info level?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428421713", "createdAt": "2020-05-21T03:11:58Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMTEwMw==", "bodyText": "I didn't understand the question. Are you saying the logging severity should be lower or higher?\nThis is a rare case anyway as the feature node doesn't get created often, so, info logging seems fine to me.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429111103", "createdAt": "2020-05-22T08:23:51Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTcxMw=="}, "originalCommit": null, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDYwMw==", "bodyText": "My feeling is that this could be on debug level, but no strong perference.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429480603", "createdAt": "2020-05-22T22:38:14Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMTcxMw=="}, "originalCommit": null, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwNzEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNDoyNVrOGYk0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODozNzo1M1rOGZPR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjI4MA==", "bodyText": "nit: don't feel strong about having this parameter", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428422280", "createdAt": "2020-05-21T03:14:25Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNzkxOA==", "bodyText": "Done. Removed.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429117918", "createdAt": "2020-05-22T08:37:53Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjI4MA=="}, "originalCommit": null, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIwODQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNToxOFrOGYk1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxNDo1N1rOGZOnUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjQ4Mw==", "bodyText": "feel neutral about this helper function", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428422483", "createdAt": "2020-05-21T03:15:18Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNzAyNg==", "bodyText": "Done. Removed.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429107026", "createdAt": "2020-05-22T08:14:57Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjQ4Mw=="}, "originalCommit": null, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIxMTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoxNzoyNFrOGYk3Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyMTozNlrOGZOzRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjk2Ng==", "bodyText": "I don't think this is scala accepted comment style to add -, do you see a warning?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428422966", "createdAt": "2020-05-21T03:17:24Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMDA4Nw==", "bodyText": "Done. Removed.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429110087", "createdAt": "2020-05-22T08:21:36Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMjk2Ng=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIyMDg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyMzo1M1rOGYk8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxNTo0M1rOGZOokw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDM5NQ==", "bodyText": "Feature cache update gets interrupted", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428424395", "createdAt": "2020-05-21T03:23:53Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNzM0Nw==", "bodyText": "Done. But it's actually \"Change notification queue interrupted\".", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429107347", "createdAt": "2020-05-22T08:15:43Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDM5NQ=="}, "originalCommit": null, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIzMTY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzozMTo1N1rOGYlDzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1MDo0OVrOGZPplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNjE4OQ==", "bodyText": "Does the version field existence guarantee there is a valid feature data node or not? In fact, getDataAndVersion returns an optional data. I checked the getDataAndVersion caller ProducerIdManager, there is a handling for empty data which I feel we should have as well.\nAdditionally, I think since we haven't implemented the write path yet, could we get a ticket to write down a short description on how the write path shall look like, by defining the different cases like:\nempty dataBytes, valid version \nvalid dataBytes, valid version \nempty dataBytes, unknown version \nvalid dataBytes, unknown version \n\nif that makes sense, so that we could keep track of the design decisions we made in the read path PR when implementing the write path.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428426189", "createdAt": "2020-05-21T03:31:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzk4OA==", "bodyText": "I have added documentation here in this method describing all the cases.\nThe empty data case should never happen and can indicate a corruption. The reason is that we always return non-empty data in FeatureZNode.encode, so the ZK node content should never empty.\nYes, I can add some more info to KAFKA-10028 or in the write path PR summary.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429123988", "createdAt": "2020-05-22T08:50:49Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNjE4OQ=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIzMzQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzozMzowM1rOGYlE0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODowMTozNlrOGZOP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNjQ0OA==", "bodyText": "Could we summary the possible thrown error code in the comment as well? For example, does a JSON deserialization error should be treated as fatal?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428426448", "createdAt": "2020-05-21T03:33:03Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMTAxMA==", "bodyText": "Done. Yes, I feel JSON deserialization should be treated as fatal. It should never happen, and, can indicate corruption.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429101010", "createdAt": "2020-05-22T08:01:36Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNjQ0OA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI0OTM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo0NDo1MVrOGYlO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoxOTo0M1rOGZOvsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyOTAxMw==", "bodyText": "Is it possible to have no enqueued updater, and cause this function block the thread indefinitely?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428429013", "createdAt": "2020-05-21T03:44:51Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwOTE3MA==", "bodyText": "The function blocks indefinitely - yes. But this shouldn't cause a problem or lead to deadlock/limbo situation.\nEven if this thread is waiting for an item to become available in the queue, the waiting thread can always get interrupted by the FinalizedFeatureChangeListener.close() call which calls ShutdownableThread.shutdown().\nNote that the ShutdownableThread.shutdown() method interrupts the thread, which should unblock any waiting queue.take() operation and makes it raise an InterruptedException:\nhttps://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/utils/ShutdownableThread.scala#L32-L59\nhttps://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html#take()", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429109170", "createdAt": "2020-05-22T08:19:43Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyOTAxMw=="}, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI1MzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo0NzozOFrOGYlRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODozNjozMFrOGZPPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyOTYxNQ==", "bodyText": "For an educational question, does the zkClient have a separate thread to do the node change monitoring?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428429615", "createdAt": "2020-05-21T03:47:38Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNzI3OA==", "bodyText": "Yes. Here is the documentation explaining the same: https://zookeeper.apache.org/doc/r3.5.7/zookeeperProgrammers.html#Java+Binding.\n\nWhen a ZooKeeper object is created, two threads are created as well: an IO thread and an event thread. All IO happens on the IO thread (using Java NIO). All event callbacks happen on the event thread. Session maintenance such as reconnecting to ZooKeeper servers and maintaining heartbeat is done on the IO thread. Responses for synchronous methods are also processed in the IO thread. All responses to asynchronous methods and watch events are processed on the event thread.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429117278", "createdAt": "2020-05-22T08:36:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyOTYxNQ=="}, "originalCommit": null, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI1NjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo0OTo0NVrOGYlTDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo0Mzo0MFrOGZPcSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDA5Mw==", "bodyText": "Does the order matter here? I was wondering if there is any concurrent issue if we unregister before the queue and thread get cleaned up.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428430093", "createdAt": "2020-05-21T03:49:45Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)\n+      val ensureCacheUpdateOnce = new FeatureCacheUpdater(FeatureZNodeChangeHandler.path, Some(barrier))\n+      queue.add(ensureCacheUpdateOnce)\n+      try {\n+        ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+      } catch {\n+        case e: Exception => {\n+          close()\n+          throw e\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Closes the feature ZK node change listener by unregistering the listener from ZK client,\n+   * clearing the queue and shutting down the ChangeNotificationProcessorThread.\n+   */\n+  def close(): Unit = {\n+    zkClient.unregisterZNodeChangeHandler(FeatureZNodeChangeHandler.path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMDU4NQ==", "bodyText": "The order probably doesn't matter in this case. But logically I decided to follow the below order since I could reason about it better:\n\nStop the inflow of new events\nClear pending events\nStop the processing of all events", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429120585", "createdAt": "2020-05-22T08:43:40Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)\n+      val ensureCacheUpdateOnce = new FeatureCacheUpdater(FeatureZNodeChangeHandler.path, Some(barrier))\n+      queue.add(ensureCacheUpdateOnce)\n+      try {\n+        ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+      } catch {\n+        case e: Exception => {\n+          close()\n+          throw e\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Closes the feature ZK node change listener by unregistering the listener from ZK client,\n+   * clearing the queue and shutting down the ChangeNotificationProcessorThread.\n+   */\n+  def close(): Unit = {\n+    zkClient.unregisterZNodeChangeHandler(FeatureZNodeChangeHandler.path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDA5Mw=="}, "originalCommit": null, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI1ODE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo1MDo1N1rOGYlUFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo0NDowNFrOGZPc4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDM1Ng==", "bodyText": "We could just comment For testing only", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428430356", "createdAt": "2020-05-21T03:50:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)\n+      val ensureCacheUpdateOnce = new FeatureCacheUpdater(FeatureZNodeChangeHandler.path, Some(barrier))\n+      queue.add(ensureCacheUpdateOnce)\n+      try {\n+        ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+      } catch {\n+        case e: Exception => {\n+          close()\n+          throw e\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Closes the feature ZK node change listener by unregistering the listener from ZK client,\n+   * clearing the queue and shutting down the ChangeNotificationProcessorThread.\n+   */\n+  def close(): Unit = {\n+    zkClient.unregisterZNodeChangeHandler(FeatureZNodeChangeHandler.path)\n+    queue.clear()\n+    thread.shutdown()\n+    thread.join()\n+  }\n+\n+  // Useful for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMDczOQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429120739", "createdAt": "2020-05-22T08:44:04Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to propvide notification\n+   *                            when an update operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             - RuntimeException if the thread was interrupted during wait\n+     *                     - TimeoutException if the wait can not be completed in waitTimeMs\n+     *                       milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    private def processNotification(): Unit = {\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      processNotification()\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).\n+      // In such a case, we prefer to just log a warning and treat the case as if the node is absent,\n+      // and populate the FinalizedFeatureCache with empty finalized features.\n+      processNotification()\n+    }\n+  }\n+\n+  private val queue = new LinkedBlockingQueue[FeatureCacheUpdater]\n+\n+  private val thread = new ChangeNotificationProcessorThread(\"feature-zk-node-event-process-thread\")\n+\n+  /**\n+   * This method initializes the feature ZK node change listener. Optionally, it also ensures to\n+   * update the FinalizedFeatureCache once with the latest contents of the feature ZK node\n+   * (if the node exists). This step helps ensure that feature incompatibilities (if any) in brokers\n+   * are conveniently detected before the initOrThrow() method returns to the caller. If feature\n+   * incompatibilities are detected, this method will throw an Exception to the caller, and the Broker\n+   * would exit eventually.\n+   *\n+   * @param waitOnceForCacheUpdateMs   # of milli seconds to wait for feature cache to be updated once.\n+   *                                   If this parameter <= 0, no wait operation happens.\n+   *\n+   * @throws Exception if feature incompatibility check could not be finished in a timely manner\n+   */\n+  def initOrThrow(waitOnceForCacheUpdateMs: Long): Unit = {\n+    thread.start()\n+    zkClient.registerZNodeChangeHandlerAndCheckExistence(FeatureZNodeChangeHandler)\n+\n+    if (waitOnceForCacheUpdateMs > 0) {\n+      val barrier = new CountDownLatch(1)\n+      val ensureCacheUpdateOnce = new FeatureCacheUpdater(FeatureZNodeChangeHandler.path, Some(barrier))\n+      queue.add(ensureCacheUpdateOnce)\n+      try {\n+        ensureCacheUpdateOnce.awaitUpdateOrThrow(waitOnceForCacheUpdateMs)\n+      } catch {\n+        case e: Exception => {\n+          close()\n+          throw e\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Closes the feature ZK node change listener by unregistering the listener from ZK client,\n+   * clearing the queue and shutting down the ChangeNotificationProcessorThread.\n+   */\n+  def close(): Unit = {\n+    zkClient.unregisterZNodeChangeHandler(FeatureZNodeChangeHandler.path)\n+    queue.clear()\n+    thread.shutdown()\n+    thread.join()\n+  }\n+\n+  // Useful for testing.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDM1Ng=="}, "originalCommit": null, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI1OTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo1MTo1NVrOGYlU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1Njo1NFrOGZP0Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDU1Mw==", "bodyText": "wait time for the first feature cache update upon initialization", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428430553", "createdAt": "2020-05-21T03:51:55Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -812,6 +817,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesDoc = \"Controlled shutdown can fail for multiple reasons. This determines the number of retries when such failure happens\"\n   val ControlledShutdownRetryBackoffMsDoc = \"Before each retry, the system needs time to recover from the state that caused the previous failure (Controller fail over, replica lag etc). This config determines the amount of time to wait before retrying.\"\n   val ControlledShutdownEnableDoc = \"Enable controlled shutdown of the server\"\n+  /** ********* Feature configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsDoc = \"# of milli seconds to wait for feature cache to be updated once.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjc1MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429126751", "createdAt": "2020-05-22T08:56:54Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -812,6 +817,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesDoc = \"Controlled shutdown can fail for multiple reasons. This determines the number of retries when such failure happens\"\n   val ControlledShutdownRetryBackoffMsDoc = \"Before each retry, the system needs time to recover from the state that caused the previous failure (Controller fail over, replica lag etc). This config determines the amount of time to wait before retrying.\"\n   val ControlledShutdownEnableDoc = \"Enable controlled shutdown of the server\"\n+  /** ********* Feature configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsDoc = \"# of milli seconds to wait for feature cache to be updated once.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDU1Mw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI2MDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo1Mjo1N1rOGYlVuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo1NzowN1rOGZP00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDc3OQ==", "bodyText": "I think the comment is not necessary, since we have already commented on KAFKA_2_6_IV1", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428430779", "createdAt": "2020-05-21T03:52:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -210,6 +215,14 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         /* setup zookeeper */\n         initZkClient(time)\n \n+        /* initialize features */\n+        _featureChangeListener = new FinalizedFeatureChangeListener(_zkClient)\n+        if (config.interBrokerProtocolVersion >= KAFKA_2_6_IV1) {\n+          // The feature versioning system (KIP-584) is active only when:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjg2Nw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429126867", "createdAt": "2020-05-22T08:57:07Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -210,6 +215,14 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n         /* setup zookeeper */\n         initZkClient(time)\n \n+        /* initialize features */\n+        _featureChangeListener = new FinalizedFeatureChangeListener(_zkClient)\n+        if (config.interBrokerProtocolVersion >= KAFKA_2_6_IV1) {\n+          // The feature versioning system (KIP-584) is active only when:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMDc3OQ=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI2NTkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzo1NjoxNlrOGYlY4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNjo0MlrOGZNk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMTU4NA==", "bodyText": "nit: Returns a reference to the latest features supported by the broker.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428431584", "createdAt": "2020-05-21T03:56:16Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MDAyNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429090026", "createdAt": "2020-05-22T07:36:42Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMTU4NA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI3MTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDowMDowNVrOGYlcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo1MTo0MlrOGZN-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMjQyNA==", "bodyText": "This logging is duplicate", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428432424", "createdAt": "2020-05-21T04:00:05Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Set[String] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature);\n+        if (supportedVersions == null) {\n+          (feature, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (versionLevels.isIncompatibleWith(supportedVersions)) {\n+          (feature, \"{feature=%s, reason='Finalized %s is incompatible with supported %s'}\".format(\n+            feature, versionLevels, supportedVersions))\n+        } else {\n+          (feature, null)\n+        }\n+      }\n+    }.filter(entry => entry._2 != null)\n+\n+    if (incompatibilities.nonEmpty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NjYxMg==", "bodyText": "Done. Removed extra logging in the caller of this method (see FinalizedFeatureCache).", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429096612", "createdAt": "2020-05-22T07:51:42Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Set[String] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature);\n+        if (supportedVersions == null) {\n+          (feature, \"{feature=%s, reason='Unsupported feature'}\".format(feature))\n+        } else if (versionLevels.isIncompatibleWith(supportedVersions)) {\n+          (feature, \"{feature=%s, reason='Finalized %s is incompatible with supported %s'}\".format(\n+            feature, versionLevels, supportedVersions))\n+        } else {\n+          (feature, null)\n+        }\n+      }\n+    }.filter(entry => entry._2 != null)\n+\n+    if (incompatibilities.nonEmpty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMjQyNA=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI3MzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDowMTozNlrOGYldVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0NToxOFrOGZNzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMjcyNw==", "bodyText": "I'm slightly inclined to return a set of features instead of just strings, and make the string conversion as a helper. But I leave this up to you to decide, and we could always adapt the function to make it more useful in other scenarios as needed.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428432727", "createdAt": "2020-05-21T04:01:36Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Set[String] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MzcyNw==", "bodyText": "Done. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429093727", "createdAt": "2020-05-22T07:45:18Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common object used in the Broker to define the latest features supported by the Broker.\n+ * Also provides API to check for incompatibilities between the latest features supported by the\n+ * Broker and cluster-wide finalized features.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The set of incompatible feature names. If the returned set is empty, it\n+   *                    means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Set[String] = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMjcyNw=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI3NjUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDowNDoxMFrOGYlffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNTozMFrOGZNjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMzI3OQ==", "bodyText": "aha, the order is wrong for KAFKA_0_10_0_IV1 and KAFKA_2_6_IV1", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428433279", "createdAt": "2020-05-21T04:04:10Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.\n+   * - Register the broker with v2 json format otherwise.\n    *\n    * Due to KAFKA-3100, 0.9.0.0 broker and old clients will break if JSON version is above 2.\n    *\n-   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above without having to\n-   * upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in any case).\n+   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above\n+   * without having to upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in\n+   * any case).\n    */\n   def apply(broker: Broker, apiVersion: ApiVersion, jmxPort: Int): BrokerInfo = {\n-    // see method documentation for the reason why we do this\n-    val version = if (apiVersion >= KAFKA_0_10_0_IV1) 4 else 2\n+    val version = {\n+      if (apiVersion >= KAFKA_0_10_0_IV1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTU3NA==", "bodyText": "Done. Good catch!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429089574", "createdAt": "2020-05-22T07:35:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -81,17 +83,26 @@ object BrokerIdsZNode {\n object BrokerInfo {\n \n   /**\n-   * Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n-   * the apiVersion is 0.10.0.X or above. Register the broker with v2 json format otherwise.\n+   * - Create a broker info with v5 json format if the apiVersion is 2.6.x or above.\n+   * - Create a broker info with v4 json format (which includes multiple endpoints and rack) if\n+   *   the apiVersion is 0.10.0.X or above but lesser than 2.6.x.\n+   * - Register the broker with v2 json format otherwise.\n    *\n    * Due to KAFKA-3100, 0.9.0.0 broker and old clients will break if JSON version is above 2.\n    *\n-   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above without having to\n-   * upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in any case).\n+   * We include v2 to make it possible for the broker to migrate from 0.9.0.0 to 0.10.0.X or above\n+   * without having to upgrade to 0.9.0.1 first (clients have to be upgraded to 0.9.0.1 in\n+   * any case).\n    */\n   def apply(broker: Broker, apiVersion: ApiVersion, jmxPort: Int): BrokerInfo = {\n-    // see method documentation for the reason why we do this\n-    val version = if (apiVersion >= KAFKA_0_10_0_IV1) 4 else 2\n+    val version = {\n+      if (apiVersion >= KAFKA_0_10_0_IV1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMzI3OQ=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI4MjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDowODoyMVrOGYli5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNDo0MFrOGZNh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNDE1MQ==", "bodyText": "s/asJavaMap/featuresAsJavaMap", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428434151", "createdAt": "2020-05-21T04:08:21Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -146,7 +162,14 @@ object BrokerIdZNode {\n     val plaintextEndpoint = broker.endPoints.find(_.securityProtocol == SecurityProtocol.PLAINTEXT).getOrElse(\n       new EndPoint(null, -1, null, null))\n     encode(brokerInfo.version, plaintextEndpoint.host, plaintextEndpoint.port, broker.endPoints, brokerInfo.jmxPort,\n-      broker.rack)\n+      broker.rack, broker.features)\n+  }\n+\n+  def asJavaMap(brokerInfo: JsonObject): util.Map[String, util.Map[String, java.lang.Long]] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTI0NQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429089245", "createdAt": "2020-05-22T07:34:40Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -146,7 +162,14 @@ object BrokerIdZNode {\n     val plaintextEndpoint = broker.endPoints.find(_.securityProtocol == SecurityProtocol.PLAINTEXT).getOrElse(\n       new EndPoint(null, -1, null, null))\n     encode(brokerInfo.version, plaintextEndpoint.host, plaintextEndpoint.port, broker.endPoints, brokerInfo.jmxPort,\n-      broker.rack)\n+      broker.rack, broker.features)\n+  }\n+\n+  def asJavaMap(brokerInfo: JsonObject): util.Map[String, util.Map[String, java.lang.Long]] = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNDE1MQ=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI4NzgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoxMToyN1rOGYlmAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzowMTowOFrOGZMvTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNDk0NQ==", "bodyText": "Could we log statusInt here as well? Also I feel the exception should be thrown from  FeatureZNodeStatus.withNameOpt", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428434945", "createdAt": "2020-05-21T04:11:27Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0\n+  val CurrentVersion = Version0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.serialize)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < Version0 || version > CurrentVersion) {\n+          throw new KafkaException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Long]]]])\n+        if (featuresMap.isEmpty) {\n+          throw new KafkaException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(featuresMap.get)\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new KafkaException(\"Status can not be absent in feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val status = FeatureZNodeStatus.withNameOpt(statusInt.get)\n+        if (status.isEmpty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NjMwMw==", "bodyText": "Done.\nFor the other point, I don't feel strongly for it. I feel it is OK to have an API that doesn't throw and just lets the caller decide (based on the context) if an empty returned value is incorrect.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429076303", "createdAt": "2020-05-22T07:01:08Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0\n+  val CurrentVersion = Version0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.serialize)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < Version0 || version > CurrentVersion) {\n+          throw new KafkaException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Long]]]])\n+        if (featuresMap.isEmpty) {\n+          throw new KafkaException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(featuresMap.get)\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new KafkaException(\"Status can not be absent in feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val status = FeatureZNodeStatus.withNameOpt(statusInt.get)\n+        if (status.isEmpty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNDk0NQ=="}, "originalCommit": null, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI5MjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoxNToxNVrOGYlo7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1NToxMVrOGZMnJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNTY5NA==", "bodyText": "Is there a more dedicated exception code for deserialization error? I feel the KafkaException is a bit too general compared with IllegalArgument", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428435694", "createdAt": "2020-05-21T04:15:15Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0\n+  val CurrentVersion = Version0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.serialize)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < Version0 || version > CurrentVersion) {\n+          throw new KafkaException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Long]]]])\n+        if (featuresMap.isEmpty) {\n+          throw new KafkaException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(featuresMap.get)\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new KafkaException(\"Status can not be absent in feature information: \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NDIxNQ==", "bodyText": "Done. Changed to IllegalArgumentException. Good point!", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429074215", "createdAt": "2020-05-22T06:55:11Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0\n+  val CurrentVersion = Version0\n+\n+  def path = \"/feature\"\n+\n+  def asJavaMap(scalaMap: Map[String, Map[String, Long]]): util.Map[String, util.Map[String, java.lang.Long]] = {\n+    scalaMap\n+      .view.mapValues(_.view.mapValues(scalaLong => java.lang.Long.valueOf(scalaLong)).toMap.asJava)\n+      .toMap\n+      .asJava\n+  }\n+\n+  def encode(featureZNode: FeatureZNode): Array[Byte] = {\n+    val jsonMap = collection.mutable.Map(\n+      VersionKey -> CurrentVersion,\n+      StatusKey -> featureZNode.status.id,\n+      FeaturesKey -> featureZNode.features.serialize)\n+    Json.encodeAsBytes(jsonMap.asJava)\n+  }\n+\n+  def decode(jsonBytes: Array[Byte]): FeatureZNode = {\n+    Json.tryParseBytes(jsonBytes) match {\n+      case Right(js) =>\n+        val featureInfo = js.asJsonObject\n+        val version = featureInfo(VersionKey).to[Int]\n+        if (version < Version0 || version > CurrentVersion) {\n+          throw new KafkaException(s\"Unsupported version: $version of feature information: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+\n+        val featuresMap = featureInfo\n+          .get(FeaturesKey)\n+          .flatMap(_.to[Option[Map[String, Map[String, Long]]]])\n+        if (featuresMap.isEmpty) {\n+          throw new KafkaException(\"Features map can not be absent in: \" +\n+            s\"${new String(jsonBytes, UTF_8)}\")\n+        }\n+        val features = asJavaMap(featuresMap.get)\n+\n+        val statusInt = featureInfo\n+          .get(StatusKey)\n+          .flatMap(_.to[Option[Int]])\n+        if (statusInt.isEmpty) {\n+          throw new KafkaException(\"Status can not be absent in feature information: \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNTY5NA=="}, "originalCommit": null, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI5NDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoxNjo1OVrOGYlqTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzowNDoyM1rOGZMz3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjA0Ng==", "bodyText": "Could we name it V0 for simplicity?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428436046", "createdAt": "2020-05-21T04:16:59Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NzQ2OQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429077469", "createdAt": "2020-05-22T07:04:23Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {\n+  private val VersionKey = \"version\"\n+  private val StatusKey = \"status\"\n+  private val FeaturesKey = \"features\"\n+\n+  // Version0 contains 'version', 'status' and 'features' keys.\n+  val Version0 = 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjA0Ng=="}, "originalCommit": null, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODI5ODI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoxOTo1OFrOGYlsXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo1NDoxOVrOGhlz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjU3Mw==", "bodyText": "I feel we might worth creating a separate thread discussing whether we could get some benefit of the automated protocol generation framework here, as I think this could be easily represented as JSON if we define it in the common package like other RPC data. The difficulty right now is mostly on the serialization and deserialization for feature itself, but these could have workarounds if we want to do so.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428436573", "createdAt": "2020-05-21T04:19:58Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3ODY2MQ==", "bodyText": "As far as I can see, no ZK node class defined in this file is defined in such a way. Every class in this file encodes/decodes JSON by itself, and manages its own attributes.\nShould we break the norm?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429078661", "createdAt": "2020-05-22T07:07:36Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjU3Mw=="}, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMTIzNg==", "bodyText": "I think the norm exists because we don't have automated framework by then, and doing hand-written json serialization and deserialization is a bit wasting. cc @hachikuji @cmccabe as this is a major direction discussion.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429511236", "createdAt": "2020-05-23T03:52:57Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjU3Mw=="}, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5ODcyMQ==", "bodyText": "I think I'm no longer insisting on this point, as we could make this as a follow-up work. Filed JIRA here: https://issues.apache.org/jira/browse/KAFKA-10130", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437598721", "createdAt": "2020-06-09T17:27:52Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjU3Mw=="}, "originalCommit": null, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTcwOA==", "bodyText": "Thanks. Good idea to leave a jira. I have linked it to KAFKA-9755.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r437875708", "createdAt": "2020-06-10T05:54:19Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,90 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+object FeatureZNodeStatus extends Enumeration {\n+  val Disabled, Enabled = Value\n+\n+  def withNameOpt(value: Int): Option[Value] = {\n+    values.find(_.id == value)\n+  }\n+}\n+\n+case class FeatureZNode(status: FeatureZNodeStatus.Value, features: Features[FinalizedVersionRange]) {\n+}\n+\n+object FeatureZNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjU3Mw=="}, "originalCommit": null, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODMwMzE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyMzoyMlrOGYlvRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzowMjoyM1rOGZMxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzMxOA==", "bodyText": "I'm a bit surprised, do we want to support feature znode deletion in long term?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428437318", "createdAt": "2020-05-21T04:23:22Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,228 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    val supportedFeatures = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val initialFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val initialFinalizedFeatures = Features.finalizedFeatures(initialFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, initialFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.empty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    val mayBeNewCacheContent = FinalizedFeatureCache.get\n+    assertFalse(mayBeNewCacheContent.isEmpty)\n+    val newCacheContent = mayBeNewCacheContent.get\n+    assertEquals(initialFinalizedFeatures, newCacheContent.features)\n+    assertEquals(initialVersion, newCacheContent.epoch)\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialVersion)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    val supportedFeatures = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val initialFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val initialFinalizedFeatures = Features.finalizedFeatures(initialFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, initialFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.empty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    val mayBeNewCacheContent = FinalizedFeatureCache.get\n+    assertFalse(mayBeNewCacheContent.isEmpty)\n+    val newCacheContent = mayBeNewCacheContent.get\n+    assertEquals(initialFinalizedFeatures, newCacheContent.features)\n+    assertEquals(initialVersion, newCacheContent.epoch)\n+\n+    zkClient.deleteFeatureZNode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3Njc0Mg==", "bodyText": "No. But we want to test the behavior about what happens during a deletion (ex: operational error).", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429076742", "createdAt": "2020-05-22T07:02:23Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,228 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {\n+  @Before\n+  override def setUp(): Unit = {\n+    super.setUp()\n+    FinalizedFeatureCache.clear()\n+    SupportedFeatures.clear()\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can listen to ZK notifications\n+   * successfully from an \"Enabled\" FeatureZNode (the ZK data has no feature incompatibilities).\n+   */\n+  @Test\n+  def testInitSuccessAndNotificationSuccess(): Unit = {\n+    val supportedFeatures = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val initialFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val initialFinalizedFeatures = Features.finalizedFeatures(initialFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, initialFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.empty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    val mayBeNewCacheContent = FinalizedFeatureCache.get\n+    assertFalse(mayBeNewCacheContent.isEmpty)\n+    val newCacheContent = mayBeNewCacheContent.get\n+    assertEquals(initialFinalizedFeatures, newCacheContent.features)\n+    assertEquals(initialVersion, newCacheContent.epoch)\n+\n+    val updatedFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 4))\n+    val updatedFinalizedFeatures = Features.finalizedFeatures(updatedFinalizedFeaturesMap.asJava)\n+    zkClient.updateFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, updatedFinalizedFeatures))\n+    val (mayBeFeatureZNodeNewBytes, updatedVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(updatedVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeNewBytes.isEmpty)\n+    assertTrue(updatedVersion > initialVersion)\n+    TestUtils.waitUntilTrue(() => {\n+      FinalizedFeatureCache.get.get.equals(FinalizedFeaturesAndEpoch(updatedFinalizedFeatures, updatedVersion))\n+    }, \"Timed out waiting for FinalizedFeatureCache to be updated with new features\")\n+    assertTrue(listener.isListenerInitiated)\n+  }\n+\n+  /**\n+   * Tests that the listener can be initialized, and that it can process FeatureZNode deletion\n+   * successfully.\n+   */\n+  @Test\n+  def testFeatureZNodeDeleteNotificationProcessing(): Unit = {\n+    val supportedFeatures = Map[String, SupportedVersionRange](\n+      \"feature_1\" -> new SupportedVersionRange(1, 4),\n+      \"feature_2\" -> new SupportedVersionRange(1, 3))\n+    SupportedFeatures.update(Features.supportedFeatures(supportedFeatures.asJava))\n+\n+    val initialFinalizedFeaturesMap = Map[String, FinalizedVersionRange](\n+      \"feature_1\" -> new FinalizedVersionRange(2, 3))\n+    val initialFinalizedFeatures = Features.finalizedFeatures(initialFinalizedFeaturesMap.asJava)\n+    zkClient.createFeatureZNode(FeatureZNode(FeatureZNodeStatus.Enabled, initialFinalizedFeatures))\n+    val (mayBeFeatureZNodeBytes, initialVersion) = zkClient.getDataAndVersion(FeatureZNode.path)\n+    assertNotEquals(initialVersion, ZkVersion.UnknownVersion)\n+    assertFalse(mayBeFeatureZNodeBytes.isEmpty)\n+\n+    val listener = new FinalizedFeatureChangeListener(zkClient)\n+    assertFalse(listener.isListenerInitiated)\n+    assertTrue(FinalizedFeatureCache.empty)\n+    listener.initOrThrow(15000)\n+    assertTrue(listener.isListenerInitiated)\n+    val mayBeNewCacheContent = FinalizedFeatureCache.get\n+    assertFalse(mayBeNewCacheContent.isEmpty)\n+    val newCacheContent = mayBeNewCacheContent.get\n+    assertEquals(initialFinalizedFeatures, newCacheContent.features)\n+    assertEquals(initialVersion, newCacheContent.epoch)\n+\n+    zkClient.deleteFeatureZNode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzMxOA=="}, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODMwNDg2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyNDozOVrOGYlwQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyNzoxMFrOGZNV6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzU3MQ==", "bodyText": "Could we extract some common initialization logic for the tests to reduce duplication?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428437571", "createdAt": "2020-05-21T04:24:39Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,228 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NjE4NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429086184", "createdAt": "2020-05-22T07:27:10Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/FinalizedFeatureChangeListenerTest.scala", "diffHunk": "@@ -0,0 +1,228 @@\n+package kafka.server\n+\n+import kafka.zk.{FeatureZNode, FeatureZNodeStatus, ZkVersion, ZooKeeperTestHarness}\n+import kafka.utils.{Exit, TestUtils}\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.internals.FatalExitError\n+import org.junit.Assert.{assertEquals, assertFalse, assertNotEquals, assertThrows, assertTrue}\n+import org.junit.{Before, Test}\n+\n+import scala.concurrent.TimeoutException\n+import scala.jdk.CollectionConverters._\n+\n+class FinalizedFeatureChangeListenerTest extends ZooKeeperTestHarness {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzU3MQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODMwNTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyNDo1OFrOGYlwmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzowMzoxM1rOGZMySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzY1OQ==", "bodyText": "nit: space", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428437659", "createdAt": "2020-05-21T04:24:58Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -776,6 +776,9 @@ class KafkaConfigTest {\n         case KafkaConfig.KafkaMetricsReporterClassesProp => // ignore\n         case KafkaConfig.KafkaMetricsPollingIntervalSecondsProp => //ignore\n \n+        //Feature configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NzA2NA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429077064", "createdAt": "2020-05-22T07:03:13Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala", "diffHunk": "@@ -776,6 +776,9 @@ class KafkaConfigTest {\n         case KafkaConfig.KafkaMetricsReporterClassesProp => // ignore\n         case KafkaConfig.KafkaMetricsPollingIntervalSecondsProp => //ignore\n \n+        //Feature configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzY1OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODMwODEzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyNzowMFrOGYlyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozMToyNVrOGZNc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzODA2Mw==", "bodyText": "If we are not validating the features by extracting them, I think we do not need to pass in a non-empty feature list?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r428438063", "createdAt": "2020-05-21T04:27:00Z", "author": {"login": "abbccdda"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -811,8 +828,16 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n     assertEquals(Seq.empty, zkClient.getSortedBrokerList)\n     assertEquals(None, zkClient.getBroker(0))\n \n-    val brokerInfo0 = createBrokerInfo(0, \"test.host0\", 9998, SecurityProtocol.PLAINTEXT)\n-    val brokerInfo1 = createBrokerInfo(1, \"test.host1\", 9999, SecurityProtocol.SSL)\n+    val brokerInfo0 = createBrokerInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Nzk3Mg==", "bodyText": "See L848 below where it is validated. The call to zkClient. getAllBrokersInCluster decodes each BrokerIdZNode content from JSON to BrokerInfo object. Then, we check whether the call returns exactly the same BrokerInfo objects defined here, and, along the way features are checked too.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429087972", "createdAt": "2020-05-22T07:31:25Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -811,8 +828,16 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n     assertEquals(Seq.empty, zkClient.getSortedBrokerList)\n     assertEquals(None, zkClient.getBroker(0))\n \n-    val brokerInfo0 = createBrokerInfo(0, \"test.host0\", 9998, SecurityProtocol.PLAINTEXT)\n-    val brokerInfo1 = createBrokerInfo(1, \"test.host1\", 9999, SecurityProtocol.SSL)\n+    val brokerInfo0 = createBrokerInfo(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzODA2Mw=="}, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc0NzUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowODozOVrOGZlDyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToxNzo0NVrOGZsGyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDc2MA==", "bodyText": "We could have multiple @throws here", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429474760", "createdAt": "2020-05-22T22:08:39Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -37,6 +37,15 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n      *\n      * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n      * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDIxOA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590218", "createdAt": "2020-05-24T01:17:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -37,6 +37,15 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n      *\n      * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n      * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDc2MA=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDc2MTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjoxOTozMVrOGZlMQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyMzowN1rOGZsHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjkyOA==", "bodyText": "I didn't look thoroughly enough, but the only IllegalArgumentException I found is\n case invalidVersion =>\n        throw new IllegalArgumentException(s\"Expected controller epoch zkVersion $invalidVersion should be non-negative or equal to ${ZkVersion.MatchAnyVersion}\")\n\nwhich should never happen as we always use MatchAnyVersion in retryRequestsUntilConnected. Are we trying to catch some other exceptions here?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429476928", "createdAt": "2020-05-22T22:19:31Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -47,7 +56,30 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n       })\n \n       info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n-      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDQyNg==", "bodyText": "Fixed now.\nGood point. Actually the code was incorrect. I meant to wrap FeatureZNode.decode call with the try-catch, since, it throws IllegalArgumentException. I have fixed the code now to do the same.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590426", "createdAt": "2020-05-24T01:23:07Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -47,7 +56,30 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n       })\n \n       info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n-      val (mayBeFeatureZNodeBytes, version) = zkClient.getDataAndVersion(featureZkNodePath)\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjkyOA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDg3NjIxOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDoxMzowN1rOGZmRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMTowMDozMFrOGZsEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NDYzNQ==", "bodyText": "nit: minKeyLabel", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429494635", "createdAt": "2020-05-23T00:13:07Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected BaseVersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4OTYwNw==", "bodyText": "Done. Also added doc.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429589607", "createdAt": "2020-05-24T01:00:30Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/BaseVersionRange.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents an immutable basic version range using 2 attributes: min and max of type long.\n+ * The min and max attributes are expected to be >= 1, and with max >= min.\n+ *\n+ * The class also provides API to serialize/deserialize the version range to/from a map.\n+ * The class allows for configurable labels for the min/max attributes, which can be specialized by\n+ * sub-classes (if needed).\n+ */\n+class BaseVersionRange {\n+    private final String minKeyLabel;\n+\n+    private final long minValue;\n+\n+    private final String maxKeyLabel;\n+\n+    private final long maxValue;\n+\n+    protected BaseVersionRange(String minKey, long minValue, String maxKeyLabel, long maxValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NDYzNQ=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDg4NTgzOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDoyNDo1NFrOGZmW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToxMjoxN1rOGZsF_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NjAzNw==", "bodyText": "nit: we could test emptySupportedFeatures.features().isEmpty()", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429496037", "createdAt": "2020-05-23T00:24:54Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.features());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.features());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDAxMg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590012", "createdAt": "2020-05-24T01:12:17Z", "author": {"login": "kowshik"}, "path": "clients/src/test/java/org/apache/kafka/common/feature/FeaturesTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+\n+public class FeaturesTest {\n+\n+    @Test\n+    public void testEmptyFeatures() {\n+        Map<String, Map<String, Long>> emptyMap = new HashMap<>();\n+\n+        Features<FinalizedVersionRange> emptyFinalizedFeatures = Features.emptyFinalizedFeatures();\n+        assertEquals(new HashMap<>(), emptyFinalizedFeatures.features());\n+        assertEquals(emptyMap, emptyFinalizedFeatures.serialize());\n+        assertEquals(emptyFinalizedFeatures, Features.deserializeFinalizedFeatures(emptyMap));\n+\n+        Features<SupportedVersionRange> emptySupportedFeatures = Features.emptySupportedFeatures();\n+        assertEquals(new HashMap<>(), emptySupportedFeatures.features());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5NjAzNw=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDg5Nzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDo0MDo1NFrOGZmdlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToxNjo1M1rOGZsGow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5Nzc0OQ==", "bodyText": "nit: could you elaborate why this helper function and FinalizedFeaturesAndEpoch struct is useful in this context? Just for easier message printing?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429497749", "createdAt": "2020-05-23T00:40:54Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,86 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * {@link FinalizedFeatureChangeListener}.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[FinalizedVersionRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDE3OQ==", "bodyText": "Actually I've eliminated the helper method now, and, there is only 1 method: updateOrThrow(...).", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590179", "createdAt": "2020-05-24T01:16:53Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureCache.scala", "diffHunk": "@@ -0,0 +1,86 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange}\n+\n+// Raised whenever there was an error in updating the FinalizedFeatureCache with features.\n+class FeatureCacheUpdateException(message: String) extends RuntimeException(message) {\n+}\n+\n+// Helper class that represents finalized features along with an epoch value.\n+case class FinalizedFeaturesAndEpoch(features: Features[FinalizedVersionRange], epoch: Int) {\n+  override def toString(): String = {\n+    \"FinalizedFeaturesAndEpoch(features=%s, epoch=%s)\".format(features, epoch)\n+  }\n+}\n+\n+/**\n+ * A mutable cache containing the latest finalized features and epoch. This cache is populated by a\n+ * {@link FinalizedFeatureChangeListener}.\n+ *\n+ * Currently the main reader of this cache is the read path that serves an ApiVersionsRequest,\n+ * returning the features information in the response.\n+ */\n+object FinalizedFeatureCache extends Logging {\n+  @volatile private var featuresAndEpoch: Option[FinalizedFeaturesAndEpoch] = Option.empty\n+\n+  /**\n+   * @return   the latest known FinalizedFeaturesAndEpoch. If the returned value is empty, it means\n+   *           no FinalizedFeaturesAndEpoch exists in the cache at the time when this\n+   *           method is invoked. This result could change in the future whenever the\n+   *           updateOrThrow method is invoked.\n+   */\n+  def get: Option[FinalizedFeaturesAndEpoch] = {\n+    featuresAndEpoch\n+  }\n+\n+  def empty: Boolean = {\n+    featuresAndEpoch.isEmpty\n+  }\n+\n+  /**\n+   * Clears all existing finalized features and epoch from the cache.\n+   */\n+  def clear(): Unit = {\n+    featuresAndEpoch = Option.empty\n+    info(\"Cleared cache\")\n+  }\n+\n+  /**\n+   * Updates the cache to the latestFeatures, and updates the existing epoch to latestEpoch.\n+   * Raises an exception when the operation is not successful.\n+   *\n+   * @param latestFeatures   the latest finalized features to be set in the cache\n+   * @param latestEpoch      the latest epoch value to be set in the cache\n+   *\n+   * @throws                 FeatureCacheUpdateException if the cache update operation fails\n+   *                         due to invalid parameters or incompatibilities with the broker's\n+   *                         supported features. In such a case, the existing cache contents are\n+   *                         not modified.\n+   */\n+  def updateOrThrow(latestFeatures: Features[FinalizedVersionRange], latestEpoch: Int): Unit = {\n+    updateOrThrow(FinalizedFeaturesAndEpoch(latestFeatures, latestEpoch))\n+  }\n+\n+  private def updateOrThrow(latest: FinalizedFeaturesAndEpoch): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5Nzc0OQ=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDkwMjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDo0ODoxMFrOGZmgGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyNToyMFrOGZsH6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5ODM5NQ==", "bodyText": "So here we will directly throw NoSuchElementException if mayBeFeatureZNodeBytes is empty? Do we want to check this case and throw a customized exception instead?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429498395", "createdAt": "2020-05-23T00:48:10Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDUwNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590504", "createdAt": "2020-05-24T01:25:20Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5ODM5NQ=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDkwMjM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDo0ODoxN1rOGZmgKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMTo1OToxNlrOGZsNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5ODQwOA==", "bodyText": "nit: space", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429498408", "createdAt": "2020-05-23T00:48:17Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MTkxNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429591914", "createdAt": "2020-05-24T01:59:16Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5ODQwOA=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDkwNjUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMDo1NDoyOFrOGZmigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjoxNTo0MlrOGayIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5OTAwOA==", "bodyText": "This leads to a more general question: is there a way to cleanup all the ZK feature path? Reading from the KIP, I don't see we have any admin API to do so, which makes me wonder how could this case happen in reality. In terms of severity, I think crushing the entire cluster seems to be an overkill as well, maybe we should have some blocking mechanism in place for any feature extraction call here, until we see handleCreation gets triggered again?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429499008", "createdAt": "2020-05-23T00:54:28Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzE1MQ==", "bodyText": "The deletion of ZNode is a rare case, it should never happen in reality unless it is ZK corruption, or rarely an operational error that deletes some ZK nodes. It's not easy to prevent damage in such a case. From a correctness standpoint, imagine what would happen if the feature ZNode gets deleted, and, afterwards a broker restarts. It will start with empty cache, so the damage is done. Therefore, it seems that even if we add a special logic here, we can not prevent damage if the source of truth is lost.\nTwo things to note here:\n\n\nThe client should anyway ignore older stale epoch responses, if it had seen newer epochs that are greater. In that spirit, the client can be also made to treat the absence of finalized features in an ApiVersionsResponse just like a stale epoch case, if, it had seen at least one valid ApiVersionsResponse earlier (i.e. at least one response with some valid epoch).\n\n\nDeletion of individual finalized feature is actually supported in KIP-584, but not deletion of the entire ZNode. Search for the word 'deletion' in the KIP write-up. If needed, this deletion functionality could be extended to provide the ability to delete all features too.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429593151", "createdAt": "2020-05-24T02:26:04Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5OTAwOA=="}, "originalCommit": null, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNzYwNg==", "bodyText": "Thanks, I don't think we need to be super paranoid with this rare scenario, but we should also be indicating this error state to the client suggesting that some manual fix is necessary. My proposed idea above is to add such an error state to the feature cache to refuse any further updates until we have: 1. a node creation event 2. restart of the broker (once the issue gets fixed), so this blocking behavior shall be ephemeral and recoverable from broker perspective. We don't have to implement this logic in the current PR, as we don't have a write path yet, just get a JIRA to track it sounds fine.\nMake sense to cc @cmccabe and @hachikuji as well.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r430737606", "createdAt": "2020-05-26T22:15:42Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed\n+     * successfully.\n+     *\n+     * @param waitTimeMs   the timeout for the wait operation\n+     *\n+     * @throws             RuntimeException if the thread was interrupted during wait\n+     *\n+     *                     TimeoutException if the wait can not be completed in waitTimeMs\n+     *                     milli seconds\n+     */\n+    def awaitUpdateOrThrow(waitTimeMs: Long): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        var success = false\n+        try {\n+          success = notifier.await(waitTimeMs, TimeUnit.MILLISECONDS)\n+        } catch {\n+          case e: InterruptedException =>\n+            throw new RuntimeException(\n+              \"Unable to wait for FinalizedFeatureCache update to finish.\", e)\n+        }\n+\n+        if (!success) {\n+          throw new TimeoutException(\n+            s\"Timed out after waiting for ${waitTimeMs}ms for FeatureCache to be updated.\")\n+        }\n+      })\n+    }\n+  }\n+\n+  /**\n+   * A shutdownable thread to process feature node change notifications that are populated into the\n+   * queue. If any change notification can not be processed successfully (unless it is due to an\n+   * interrupt), the thread treats it as a fatal event and triggers Broker exit.\n+   *\n+   * @param name   name of the thread\n+   */\n+  private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n+    override def doWork(): Unit = {\n+      try {\n+        queue.take.updateLatestOrThrow()\n+      } catch {\n+        case e: InterruptedException => info(s\"Change notification queue interrupted\", e)\n+        case e: Exception => {\n+          error(\"Failed to process feature ZK node change event. The broker will exit.\", e)\n+          throw new FatalExitError(1)\n+        }\n+      }\n+    }\n+  }\n+\n+  // Feature ZK node change handler.\n+  object FeatureZNodeChangeHandler extends ZNodeChangeHandler {\n+    override val path: String = FeatureZNode.path\n+\n+    override def handleCreation(): Unit = {\n+      info(s\"Feature ZK node created at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDataChange(): Unit = {\n+      info(s\"Feature ZK node updated at path: $path\")\n+      queue.add(new FeatureCacheUpdater(path))\n+    }\n+\n+    override def handleDeletion(): Unit = {\n+      warn(s\"Feature ZK node deleted at path: $path\")\n+      // This event may happen, rarely (ex: operational error).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5OTAwOA=="}, "originalCommit": null, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4MDQ1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzoxODoxMVrOGZnKOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMDo1MTo1MlrOGZsDKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTE3OQ==", "bodyText": "nit: one liner: this.features = Objects.requireNonNull(features, \"Provided features can not be null.\");", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429509179", "createdAt": "2020-05-23T03:18:11Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being <VersionRangeType>.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        if (features == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4OTI5MQ==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429589291", "createdAt": "2020-05-24T00:51:52Z", "author": {"login": "kowshik"}, "path": "clients/src/main/java/org/apache/kafka/common/feature/Features.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.feature;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.Objects;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Represents an immutable dictionary with key being feature name, and value being <VersionRangeType>.\n+ * Also provides API to serialize/deserialize the features and their version ranges to/from a map.\n+ *\n+ * This class can be instantiated only using its factory functions, with the important ones being:\n+ * Features.supportedFeatures(...) and Features.finalizedFeatures(...).\n+ *\n+ * @param <VersionRangeType> is the type of version range.\n+ * @see SupportedVersionRange\n+ * @see FinalizedVersionRange\n+ */\n+public class Features<VersionRangeType extends BaseVersionRange> {\n+    private final Map<String, VersionRangeType> features;\n+\n+    /**\n+     * Constructor is made private, as for readability it is preferred the caller uses one of the\n+     * static factory functions for instantiation (see below).\n+     *\n+     * @param features   Map of feature name to type of VersionRange, as the backing data structure\n+     *                   for the Features object.\n+     */\n+    private Features(Map<String, VersionRangeType> features) {\n+        if (features == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTE3OQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4NjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozMDoxMlrOGZnNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToxNzoyMFrOGZsGuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTk0MQ==", "bodyText": "nit: remove only", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429509941", "createdAt": "2020-05-23T03:30:12Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDIwMA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590200", "createdAt": "2020-05-24T01:17:20Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTk0MQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4ODAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozMjowMlrOGZnN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToxODoxNVrOGZsG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDA5OQ==", "bodyText": "This comment should be frequent and the featureZkNodePath is staying constant, could we just make it for debugging level?", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429510099", "createdAt": "2020-05-23T03:32:02Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDI0OA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590248", "createdAt": "2020-05-24T01:18:15Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDA5OQ=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4OTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozNDoyNVrOGZnOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyNTo0NlrOGZsIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDIyNA==", "bodyText": "I don't think this note is necessary, maybe just merge with the first line as:\nWaits until exactly one updateLatestOrThrow completes successfully.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429510224", "createdAt": "2020-05-23T03:34:25Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDUzMg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590532", "createdAt": "2020-05-24T01:25:46Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -0,0 +1,232 @@\n+package kafka.server\n+\n+import java.util.concurrent.{CountDownLatch, LinkedBlockingQueue, TimeUnit}\n+\n+import kafka.utils.{Logging, ShutdownableThread}\n+import kafka.zk.{FeatureZNode,FeatureZNodeStatus, KafkaZkClient, ZkVersion}\n+import kafka.zookeeper.ZNodeChangeHandler\n+import org.apache.kafka.common.internals.FatalExitError\n+\n+import scala.concurrent.TimeoutException\n+\n+/**\n+ * Listens to changes in the ZK feature node, via the ZK client. Whenever a change notification\n+ * is received from ZK, the feature cache in FinalizedFeatureCache is asynchronously updated\n+ * to the latest features read from ZK. The cache updates are serialized through a single\n+ * notification processor thread.\n+ *\n+ * @param zkClient     the Zookeeper client\n+ */\n+class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n+\n+  /**\n+   * Helper class used to update the FinalizedFeatureCache.\n+   *\n+   * @param featureZkNodePath   the path to the ZK feature node to be read\n+   * @param maybeNotifyOnce     an optional latch that can be used to notify the caller when an\n+   *                            updateOrThrow() operation is over\n+   */\n+  private class FeatureCacheUpdater(featureZkNodePath: String, maybeNotifyOnce: Option[CountDownLatch]) {\n+\n+    def this(featureZkNodePath: String) = this(featureZkNodePath, Option.empty)\n+\n+    /**\n+     * Updates the feature cache in FinalizedFeatureCache with the latest features read from the\n+     * ZK node in featureZkNodePath. If the cache update is not successful, then, a suitable\n+     * exception is raised.\n+     *\n+     * NOTE: if a notifier was provided in the constructor, then, this method can be invoked\n+     * only exactly once successfully.\n+     *\n+     * @throws   IllegalStateException, if a non-empty notifier was provided in the constructor, and\n+     *           this method is called again after a successful previous invocation.\n+     *\n+     *           FeatureCacheUpdateException, if there was an error in updating the\n+     *           FinalizedFeatureCache.\n+     *\n+     *           RuntimeException, if there was a failure in reading/deserializing the\n+     *           contents of the feature ZK node.\n+     */\n+    def updateLatestOrThrow(): Unit = {\n+      maybeNotifyOnce.foreach(notifier => {\n+        if (notifier.getCount != 1) {\n+          throw new IllegalStateException(\n+            \"Can not notify after updateLatestOrThrow was called more than once successfully.\")\n+        }\n+      })\n+\n+      info(s\"Reading feature ZK node at path: $featureZkNodePath\")\n+      var mayBeFeatureZNodeBytes: Option[Array[Byte]] = null\n+      var version: Int = ZkVersion.UnknownVersion\n+      try {\n+        val result = zkClient.getDataAndVersion(featureZkNodePath)\n+        mayBeFeatureZNodeBytes = result._1\n+        version = result._2\n+      } catch {\n+        // Convert to RuntimeException, to avoid a confusion that there is no argument passed\n+        // to the updateOrThrow() method.\n+        case e: IllegalArgumentException => throw new RuntimeException(e)\n+      }\n+\n+      // There are 4 cases:\n+      //\n+      // (empty dataBytes, valid version)       => The empty dataBytes will fail FeatureZNode deserialization.\n+      //                                           FeatureZNode, when present in ZK, can not have empty contents.\n+      // (non-empty dataBytes, valid version)   => This is a valid case, and should pass FeatureZNode deserialization\n+      //                                           if dataBytes contains valid data.\n+      // (empty dataBytes, unknown version)     => This is a valid case, and this can happen if the FeatureZNode\n+      //                                           does not exist in ZK.\n+      // (non-empty dataBytes, unknown version) => This case is impossible, since, KafkaZkClient.getDataAndVersion\n+      //                                           API ensures that unknown version is returned only when the\n+      //                                           ZK node is absent. Therefore dataBytes should be empty in such\n+      //                                           a case.\n+      if (version == ZkVersion.UnknownVersion) {\n+        info(s\"Feature ZK node at path: $featureZkNodePath does not exist\")\n+        FinalizedFeatureCache.clear()\n+      } else {\n+        val featureZNode = FeatureZNode.decode(mayBeFeatureZNodeBytes.get)\n+        if (featureZNode.status == FeatureZNodeStatus.Disabled) {\n+          info(s\"Feature ZK node at path: $featureZkNodePath is in disabled status\")\n+          FinalizedFeatureCache.clear()\n+        } else if(featureZNode.status == FeatureZNodeStatus.Enabled) {\n+          FinalizedFeatureCache.updateOrThrow(featureZNode.features, version)\n+        } else {\n+          throw new IllegalStateException(s\"Unexpected FeatureZNodeStatus found in $featureZNode\")\n+        }\n+      }\n+\n+      maybeNotifyOnce.foreach(notifier => notifier.countDown())\n+    }\n+\n+    /**\n+     * Waits until at least a single updateLatestOrThrow completes successfully.\n+     * NOTE: The method returns immediately if an updateLatestOrThrow call has already completed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDIyNA=="}, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk5MTI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozOToyNFrOGZnPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDo0NDo0NVrOGgYZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDUyMA==", "bodyText": "Do you think we should add this config as part of the KIP since it is public? I think it would just be a minor update, but let's wait and see others thoughts on this.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429510520", "createdAt": "2020-05-23T03:39:24Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -442,6 +445,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesProp = \"controlled.shutdown.max.retries\"\n   val ControlledShutdownRetryBackoffMsProp = \"controlled.shutdown.retry.backoff.ms\"\n   val ControlledShutdownEnableProp = \"controlled.shutdown.enable\"\n+  /** ********* Features configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsProp = \"feature.listener.cache.update.wait.ms\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDU5Mw==", "bodyText": "Sounds good. Yeah, it is minor and feels like an implementation detail to me. But we can wait to see what others say.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590593", "createdAt": "2020-05-24T01:27:36Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -442,6 +445,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesProp = \"controlled.shutdown.max.retries\"\n   val ControlledShutdownRetryBackoffMsProp = \"controlled.shutdown.retry.backoff.ms\"\n   val ControlledShutdownEnableProp = \"controlled.shutdown.enable\"\n+  /** ********* Features configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsProp = \"feature.listener.cache.update.wait.ms\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDUyMA=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwNzQwMg==", "bodyText": "This config has been eliminated now.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r436607402", "createdAt": "2020-06-08T10:44:45Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -442,6 +445,8 @@ object KafkaConfig {\n   val ControlledShutdownMaxRetriesProp = \"controlled.shutdown.max.retries\"\n   val ControlledShutdownRetryBackoffMsProp = \"controlled.shutdown.retry.backoff.ms\"\n   val ControlledShutdownEnableProp = \"controlled.shutdown.enable\"\n+  /** ********* Features configuration ***********/\n+  val FeatureChangeListenerCacheUpdateWaitTimeMsProp = \"feature.listener.cache.update.wait.ms\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDUyMA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk5MzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzo0MzozMlrOGZnQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyNzo1N1rOGZsIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDc0Ng==", "bodyText": "remove semi-colon", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429510746", "createdAt": "2020-05-23T03:43:32Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,76 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common immutable object used in the Broker to define the latest features supported by the\n+ * Broker. Also provides API to check for incompatibilities between the latest features supported\n+ * by the Broker and cluster-wide finalized features.\n+ *\n+ * NOTE: the update() and clear() APIs of this class should be used only for testing purposes.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns a reference to the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The sub-set of input features which are incompatible. If the returned object\n+   *                    is empty, it means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Features[FinalizedVersionRange] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDYxNA==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590614", "createdAt": "2020-05-24T01:27:57Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/SupportedFeatures.scala", "diffHunk": "@@ -0,0 +1,76 @@\n+package kafka.server\n+\n+import kafka.utils.Logging\n+import org.apache.kafka.common.feature.{Features, FinalizedVersionRange, SupportedVersionRange}\n+import org.apache.kafka.common.feature.Features._\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * A common immutable object used in the Broker to define the latest features supported by the\n+ * Broker. Also provides API to check for incompatibilities between the latest features supported\n+ * by the Broker and cluster-wide finalized features.\n+ *\n+ * NOTE: the update() and clear() APIs of this class should be used only for testing purposes.\n+ */\n+object SupportedFeatures extends Logging {\n+\n+  /**\n+   * This is the latest features supported by the Broker.\n+   * This is currently empty, but in the future as we define supported features, this map should be\n+   * populated.\n+   */\n+  @volatile private var supportedFeatures = emptySupportedFeatures\n+\n+  /**\n+   * Returns a reference to the latest features supported by the Broker.\n+   */\n+  def get: Features[SupportedVersionRange] = {\n+    supportedFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def update(newFeatures: Features[SupportedVersionRange]): Unit = {\n+    supportedFeatures = newFeatures\n+  }\n+\n+  // Should be used only for testing.\n+  def clear(): Unit = {\n+    supportedFeatures = emptySupportedFeatures\n+  }\n+\n+  /**\n+   * Returns the set of feature names found to be 'incompatible'.\n+   * A feature incompatibility is a version mismatch between the latest feature supported by the\n+   * Broker, and the provided cluster-wide finalized feature. This can happen because a provided\n+   * cluster-wide finalized feature:\n+   *  1) Does not exist in the Broker (i.e. it is unknown to the Broker).\n+   *           [OR]\n+   *  2) Exists but the FinalizedVersionRange does not match with the supported feature's SupportedVersionRange.\n+   *\n+   * @param finalized   The finalized features against which incompatibilities need to be checked for.\n+   *\n+   * @return            The sub-set of input features which are incompatible. If the returned object\n+   *                    is empty, it means there were no feature incompatibilities found.\n+   */\n+  def incompatibleFeatures(finalized: Features[FinalizedVersionRange]): Features[FinalizedVersionRange] = {\n+    val incompatibilities = finalized.features.asScala.collect {\n+      case (feature, versionLevels) => {\n+        val supportedVersions = supportedFeatures.get(feature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDc0Ng=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk5NTgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/zk/ZkData.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzo1MDoxMlrOGZnRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMToyODozMFrOGZsIYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMTA5MQ==", "bodyText": "s/it's/its", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429511091", "createdAt": "2020-05-23T03:50:12Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as it\u2019s finalized features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MDYyNg==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8680#discussion_r429590626", "createdAt": "2020-05-24T01:28:30Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/zk/ZkData.scala", "diffHunk": "@@ -744,6 +782,161 @@ object DelegationTokenInfoZNode {\n   def decode(bytes: Array[Byte]): Option[TokenInformation] = DelegationTokenManager.fromBytes(bytes)\n }\n \n+/**\n+ * Represents the status of the FeatureZNode.\n+ *\n+ * Enabled  -> This status means the feature versioning system (KIP-584) is enabled, and, the\n+ *             finalized features stored in the FeatureZNode are active. This status is written by\n+ *             the controller to the FeatureZNode only when the broker IBP config is greater than\n+ *             or equal to KAFKA_2_6_IV1.\n+ *\n+ * Disabled -> This status means the feature versioning system (KIP-584) is disabled, and, the\n+ *             the finalized features stored in the FeatureZNode is not relevant. This status is\n+ *             written by the controller to the FeatureZNode only when the broker IBP config\n+ *             is less than KAFKA_2_6_IV1.\n+ *\n+ * The purpose behind the FeatureZNodeStatus is that it helps differentiates between the following\n+ * cases:\n+ *\n+ * 1. New cluster bootstrap:\n+ *    For a new Kafka cluster (i.e. it is deployed first time), we would like to start the cluster\n+ *    with all the possible supported features finalized immediately. The new cluster will almost\n+ *    never be started with an old IBP config that\u2019s less than KAFKA_2_6_IV1. In such a case, the\n+ *    controller will start up and notice that the FeatureZNode is absent in the new cluster.\n+ *    To handle the requirement, the controller will create a FeatureZNode (with enabled status)\n+ *    containing the entire list of supported features as it\u2019s finalized features.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMTA5MQ=="}, "originalCommit": null, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2640, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}