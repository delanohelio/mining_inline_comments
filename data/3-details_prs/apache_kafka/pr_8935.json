{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODM2Mjg5", "number": 8935, "title": "KAFKA-10189: reset event queue time histogram when queue is empty", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-10189\nadd a timeout for event queue time histogram\nreset eventQueueTimeHist when the controller event queue is empty\nunit test for resetting event queue time histogram\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-27T00:40:58Z", "url": "https://github.com/apache/kafka/pull/8935", "merged": true, "mergeCommit": {"oid": "f77e250b99888aaf7907b92e5be853171f178c8d"}, "closed": true, "closedAt": "2020-07-21T00:55:21Z", "author": {"login": "jeffkbkim"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvMzb_AH2gAyNDQwODM2Mjg5OjI1MDg1ZTI5ZTA0NjhlZGVmYTk5YjVlNWNjNWQ3ZGJhZDg0N2MyMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc233FIAFqTQ1MTk0NDUzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "25085e29e0468edefa99b5e5cc5d7dbad847c216", "author": {"user": {"login": "jeffkbkim", "name": "Jeff Kim"}}, "url": "https://github.com/apache/kafka/commit/25085e29e0468edefa99b5e5cc5d7dbad847c216", "committedDate": "2020-06-27T00:35:34Z", "message": "reset event queue time histogram when queue is empty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTU1MTg3", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-439555187", "createdAt": "2020-06-29T22:51:35Z", "commit": {"oid": "25085e29e0468edefa99b5e5cc5d7dbad847c216"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjo1MTozNVrOGqlQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjo1NDoxN1rOGqlT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMzc4NQ==", "bodyText": "In Scala you can do:\nval dequeued = {\n  val count = eventQueueTimeHist.count()\n  if (count != 0) {\n    val event = queue.poll(..., ...)\n    if (event == null) {\n      eventQueueTimeHist.clear()\n      queue.take()\n    } else {\n      event\n    }\n  } else {\n    queue.take()\n  }\n}\nWe can probably move this code to a private method.", "url": "https://github.com/apache/kafka/pull/8935#discussion_r447303785", "createdAt": "2020-06-29T22:51:35Z", "author": {"login": "jsancio"}, "path": "core/src/main/scala/kafka/controller/ControllerEventManager.scala", "diffHunk": "@@ -115,7 +117,17 @@ class ControllerEventManager(controllerId: Int,\n     logIdent = s\"[ControllerEventThread controllerId=$controllerId] \"\n \n     override def doWork(): Unit = {\n-      val dequeued = queue.take()\n+      val count = eventQueueTimeHist.count()\n+      var dequeued: QueuedEvent = null\n+      if (count != 0) {\n+        dequeued = queue.poll(eventQueueTimeMetricTimeoutMs, TimeUnit.MILLISECONDS)\n+        if (dequeued == null) {\n+          eventQueueTimeHist.clear()\n+          return\n+        }\n+      } else {\n+        dequeued = queue.take()\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25085e29e0468edefa99b5e5cc5d7dbad847c216"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNDY2MA==", "bodyText": "I don't think we need this for this test. The test above has this because they want to check that the max is 500.", "url": "https://github.com/apache/kafka/pull/8935#discussion_r447304660", "createdAt": "2020-06-29T22:54:17Z", "author": {"login": "jsancio"}, "path": "core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala", "diffHunk": "@@ -135,6 +135,44 @@ class ControllerEventManagerTest {\n     assertEquals(500, queueTimeHistogram.max, 0.01)\n   }\n \n+  @Test\n+  def testEventQueueTimeResetOnTimeout(): Unit = {\n+    val metricName = \"kafka.controller:type=ControllerEventManager,name=EventQueueTimeMs\"\n+    val controllerStats = new ControllerStats\n+    val time = new MockTime()\n+    val latch = new CountDownLatch(1)\n+    val processedEvents = new AtomicInteger()\n+\n+    val eventProcessor = new ControllerEventProcessor {\n+      override def process(event: ControllerEvent): Unit = {\n+        latch.await()\n+        time.sleep(500)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25085e29e0468edefa99b5e5cc5d7dbad847c216"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb8a1fb5e9d422b443e52910cf1035e72d39f51", "author": {"user": {"login": "jeffkbkim", "name": "Jeff Kim"}}, "url": "https://github.com/apache/kafka/commit/9fb8a1fb5e9d422b443e52910cf1035e72d39f51", "committedDate": "2020-06-29T23:28:34Z", "message": "increase default timeout value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885800ebb3e8b49969b91db5bb46b9f3c09c87b7", "author": {"user": {"login": "jeffkbkim", "name": "Jeff Kim"}}, "url": "https://github.com/apache/kafka/commit/885800ebb3e8b49969b91db5bb46b9f3c09c87b7", "committedDate": "2020-06-30T01:46:00Z", "message": "move poll to private method, simplify unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTg3NzIy", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-439987722", "createdAt": "2020-06-30T13:00:08Z", "commit": {"oid": "885800ebb3e8b49969b91db5bb46b9f3c09c87b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowMDowOFrOGq7I8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowMDowOFrOGq7I8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2MjMyMw==", "bodyText": "We dont need new eventQueueTimeMetricTimeoutMs variable. we can use eventQueueTimeTimeoutMs directly ?", "url": "https://github.com/apache/kafka/pull/8935#discussion_r447662323", "createdAt": "2020-06-30T13:00:08Z", "author": {"login": "omkreddy"}, "path": "core/src/main/scala/kafka/controller/ControllerEventManager.scala", "diffHunk": "@@ -69,14 +69,16 @@ class QueuedEvent(val event: ControllerEvent,\n class ControllerEventManager(controllerId: Int,\n                              processor: ControllerEventProcessor,\n                              time: Time,\n-                             rateAndTimeMetrics: Map[ControllerState, KafkaTimer]) extends KafkaMetricsGroup {\n+                             rateAndTimeMetrics: Map[ControllerState, KafkaTimer],\n+                             eventQueueTimeTimeoutMs: Long = 60000) extends KafkaMetricsGroup {\n   import ControllerEventManager._\n \n   @volatile private var _state: ControllerState = ControllerState.Idle\n   private val putLock = new ReentrantLock()\n   private val queue = new LinkedBlockingQueue[QueuedEvent]\n   // Visible for test\n   private[controller] val thread = new ControllerEventThread(ControllerEventThreadName)\n+  val eventQueueTimeMetricTimeoutMs = eventQueueTimeTimeoutMs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "885800ebb3e8b49969b91db5bb46b9f3c09c87b7"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a", "author": {"user": {"login": "jeffkbkim", "name": "Jeff Kim"}}, "url": "https://github.com/apache/kafka/commit/31bb39e2111c6f4d54a58f44eb3817328c99af8a", "committedDate": "2020-06-30T17:05:45Z", "message": "remove unnecessary variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Nzk3OTk2", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-445797996", "createdAt": "2020-07-09T16:52:05Z", "commit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Njk1NTgy", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-447695582", "createdAt": "2020-07-14T00:06:04Z", "commit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDowNjowNFrOGw_GGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDoxMTo1OVrOGw_Mgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODU4NA==", "bodyText": "Hmm, if eventQueueTimeHist.count() is not 0, it seems that we can block on queue.take() forever without resetting the histogram?", "url": "https://github.com/apache/kafka/pull/8935#discussion_r454018584", "createdAt": "2020-07-14T00:06:04Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/ControllerEventManager.scala", "diffHunk": "@@ -139,4 +140,19 @@ class ControllerEventManager(controllerId: Int,\n     }\n   }\n \n+  private def pollFromEventQueue(): QueuedEvent = {\n+    val count = eventQueueTimeHist.count()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxOTgyNA==", "bodyText": "This approach seems fine for this particular usage. There are other usage of histogram that all have the same issue. A more complete fix would be to fix the issue at the Histogram level. Could we try patching the Yammer code upstream or at least file an issue? I am thinking that we could track the last time a histogram is updated, if it passes a certain amount of time, we reset on next get() or update().", "url": "https://github.com/apache/kafka/pull/8935#discussion_r454019824", "createdAt": "2020-07-14T00:10:33Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/ControllerEventManager.scala", "diffHunk": "@@ -139,4 +140,19 @@ class ControllerEventManager(controllerId: Int,\n     }\n   }\n \n+  private def pollFromEventQueue(): QueuedEvent = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyMDIyNw==", "bodyText": "The exact value probably depends on the metric collecting interval. Perhaps we could be a bit conservative with a 5 min timeout?", "url": "https://github.com/apache/kafka/pull/8935#discussion_r454020227", "createdAt": "2020-07-14T00:11:59Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/controller/ControllerEventManager.scala", "diffHunk": "@@ -69,7 +69,8 @@ class QueuedEvent(val event: ControllerEvent,\n class ControllerEventManager(controllerId: Int,\n                              processor: ControllerEventProcessor,\n                              time: Time,\n-                             rateAndTimeMetrics: Map[ControllerState, KafkaTimer]) extends KafkaMetricsGroup {\n+                             rateAndTimeMetrics: Map[ControllerState, KafkaTimer],\n+                             eventQueueTimeTimeoutMs: Long = 60000) extends KafkaMetricsGroup {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTE4NDk5", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-447918499", "createdAt": "2020-07-14T08:57:14Z", "commit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1NzoxNVrOGxKp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1NzoxNVrOGxKp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwNzk3Ng==", "bodyText": "Why is this CountdownLatch necessary? Seems it\u2019s just delaying the wait condition being true - processedEvents.get() == 2", "url": "https://github.com/apache/kafka/pull/8935#discussion_r454207976", "createdAt": "2020-07-14T08:57:15Z", "author": {"login": "soarez"}, "path": "core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala", "diffHunk": "@@ -135,6 +135,43 @@ class ControllerEventManagerTest {\n     assertEquals(500, queueTimeHistogram.max, 0.01)\n   }\n \n+  @Test\n+  def testEventQueueTimeResetOnTimeout(): Unit = {\n+    val metricName = \"kafka.controller:type=ControllerEventManager,name=EventQueueTimeMs\"\n+    val controllerStats = new ControllerStats\n+    val time = new MockTime()\n+    val latch = new CountDownLatch(1)\n+    val processedEvents = new AtomicInteger()\n+\n+    val eventProcessor = new ControllerEventProcessor {\n+      override def process(event: ControllerEvent): Unit = {\n+        latch.await()\n+        processedEvents.incrementAndGet()\n+      }\n+      override def preempt(event: ControllerEvent): Unit = {}\n+    }\n+\n+    controllerEventManager = new ControllerEventManager(0, eventProcessor,\n+      time, controllerStats.rateAndTimeMetrics, 1)\n+    controllerEventManager.start()\n+\n+    controllerEventManager.put(TopicChange)\n+    controllerEventManager.put(TopicChange)\n+    latch.countDown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bb39e2111c6f4d54a58f44eb3817328c99af8a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7b9438a35d1a696ec95b24e8b636f2a0b10b1b", "author": {"user": {"login": "jeffkbkim", "name": "Jeff Kim"}}, "url": "https://github.com/apache/kafka/commit/1a7b9438a35d1a696ec95b24e8b636f2a0b10b1b", "committedDate": "2020-07-16T20:41:20Z", "message": "update default timeout, remove latch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTQ0NTM3", "url": "https://github.com/apache/kafka/pull/8935#pullrequestreview-451944537", "createdAt": "2020-07-20T20:42:56Z", "commit": {"oid": "1a7b9438a35d1a696ec95b24e8b636f2a0b10b1b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}