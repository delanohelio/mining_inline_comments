{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTY1ODIz", "number": 8327, "title": "KAFKA-9743: Catch commit offset exception to eventually close dirty tasks", "bodyText": "This PR tries to close all the dirty tasks during HandleAssignment in case the commit call failed. The previous outcome was that all the lost tasks are not properly closed which leads to the RocksDB metric stats not cleared, and eventually blows the application away, since we have an illegal state check for re-adding an existing metrics:\n public void addMetricsRecorder(final RocksDBMetricsRecorder metricsRecorder) {\n        final String metricsRecorderName = metricsRecorderName(metricsRecorder);\n        if (metricsRecordersToTrigger.containsKey(metricsRecorderName)) {\n            throw new IllegalStateException(\"RocksDB metrics recorder for store \\\"\" + metricsRecorder.storeName() +\n                \"\\\" of task \" + metricsRecorder.taskId().toString() + \" has already been added. \"\n                + \"This is a bug in Kafka Streams.\");\n        }\n        metricsRecordersToTrigger.put(metricsRecorderName, metricsRecorder);\n    }\n\nUnit test will be added shortly.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-22T07:02:29Z", "url": "https://github.com/apache/kafka/pull/8327", "merged": true, "mergeCommit": {"oid": "cc7061410567be3e5f2aae199b67e943409fd215"}, "closed": true, "closedAt": "2020-03-24T16:26:14Z", "author": {"login": "abbccdda"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQNSALABqjMxNTI4OTYzNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQql9sgH2gAyMzkxOTY1ODIzOjNkZTE4Njg4ODc4NWZkZDE2YmM0MGFkMjljZDdmOTRkZTk5N2IzMzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDY5OTIw", "url": "https://github.com/apache/kafka/pull/8327#pullrequestreview-379069920", "createdAt": "2020-03-22T23:44:09Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0NDowOVrOF5zybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzo0NDowOVrOF5zybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MTY0Nw==", "bodyText": "I think we can consolidate the three blocks 1) prepareClose / committableOffsetsAndMetadata and 2) commitOffsetsOrTransaction, and 3) closeClean which are all wrapping runtime exceptions and updating exception / dirty tasks map into a single one.\nThis can be done in another PR.", "url": "https://github.com/apache/kafka/pull/8327#discussion_r396161647", "createdAt": "2020-03-22T23:44:09Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -225,7 +225,16 @@ public void handleAssignment(final Map<TaskId, Set<TopicPartition>> activeTasks,\n         }\n \n         if (!consumedOffsetsAndMetadataPerTask.isEmpty()) {\n-            commitOffsetsOrTransaction(consumedOffsetsAndMetadataPerTask);\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzQ4NTY0", "url": "https://github.com/apache/kafka/pull/8327#pullrequestreview-379748564", "createdAt": "2020-03-23T19:24:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyNDo1MlrOF6Ur5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOToyNDo1MlrOF6Ur5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDY0NA==", "bodyText": "A CommitFaileException should result in a TaskMigratedException -- should we only catch this one? Catching a generic RuntimeException does seem to be a little coarse grained?\nAlso, I am wondering why this case is not handled by the caller, ie, the exception should finally pop out of Consumer#poll() and the thread would handle this case and close all tasks?\nAlso, why do we only handle it at this place explicitly? We call commitOffsetsOrTransaction on multiple places and never handle it, but just let upper layer take care?", "url": "https://github.com/apache/kafka/pull/8327#discussion_r396700644", "createdAt": "2020-03-23T19:24:52Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -237,10 +237,19 @@ public void handleAssignment(final Map<TaskId, Set<TopicPartition>> activeTasks,\n                 }\n             }\n \n-            commitOffsetsOrTransaction(consumedOffsetsAndMetadataPerTask);\n+            try {\n+                commitOffsetsOrTransaction(consumedOffsetsAndMetadataPerTask);\n \n-            for (final Task task : additionalTasksForCommitting) {\n-                task.postCommit();\n+                for (final Task task : additionalTasksForCommitting) {\n+                    task.postCommit();\n+                }\n+            } catch (final RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "424e1d2f7e842be5554273b24b97cdc4094a1f1e", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/424e1d2f7e842be5554273b24b97cdc4094a1f1e", "committedDate": "2020-03-23T23:47:01Z", "message": "Fix commit offsets exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb96faafd32a800852de21ec10333987d3c6ee4", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/3fb96faafd32a800852de21ec10333987d3c6ee4", "committedDate": "2020-03-23T23:47:01Z", "message": "unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/f7ec12ebd0d113e0f25563e88543401c0a5e884b", "committedDate": "2020-03-23T23:47:01Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/f7ec12ebd0d113e0f25563e88543401c0a5e884b", "committedDate": "2020-03-23T23:47:01Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTIyNzYy", "url": "https://github.com/apache/kafka/pull/8327#pullrequestreview-379922762", "createdAt": "2020-03-24T00:27:29Z", "commit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMDoyNzoyOVrOF6dBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMDoyNzoyOVrOF6dBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzNzI4OQ==", "bodyText": "nit: why use Task for task00 but StateMachineTask for task01 ? Can you unify this (it a little confusing)?", "url": "https://github.com/apache/kafka/pull/8327#discussion_r396837289", "createdAt": "2020-03-24T00:27:29Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java", "diffHunk": "@@ -1198,6 +1198,48 @@ public void shouldCloseActiveTasksAndPropagateThreadProducerExceptionsOnCleanShu\n         verify(activeTaskCreator, changeLogReader);\n     }\n \n+    @Test\n+    public void shouldCloseActiveTasksDirtyAndPropagateCommitException() {\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n+            new Metrics(), \"clientId\", StreamsConfig.METRICS_LATEST);\n+        taskManager = new TaskManager(\n+            changeLogReader,\n+            UUID.randomUUID(),\n+            \"taskManagerTest\",\n+            streamsMetrics,\n+            activeTaskCreator,\n+            standbyTaskCreator,\n+            topologyBuilder,\n+            adminClient,\n+            stateDirectory,\n+            StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA\n+        );\n+        taskManager.setMainConsumer(consumer);\n+\n+        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n+        final StateMachineTask task01 = new StateMachineTask(taskId01, taskId01Partitions, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTIzNzU3", "url": "https://github.com/apache/kafka/pull/8327#pullrequestreview-379923757", "createdAt": "2020-03-24T00:30:32Z", "commit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMDozMDozM1rOF6dE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMDozMDozM1rOF6dE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzODEyNw==", "bodyText": "To make sure we close all tasks (not just the task that causes the error), we should add one more task, that we also close and ensure that it state goes to CLOSED?", "url": "https://github.com/apache/kafka/pull/8327#discussion_r396838127", "createdAt": "2020-03-24T00:30:33Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java", "diffHunk": "@@ -1198,6 +1198,48 @@ public void shouldCloseActiveTasksAndPropagateThreadProducerExceptionsOnCleanShu\n         verify(activeTaskCreator, changeLogReader);\n     }\n \n+    @Test\n+    public void shouldCloseActiveTasksDirtyAndPropagateCommitException() {\n+        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n+            new Metrics(), \"clientId\", StreamsConfig.METRICS_LATEST);\n+        taskManager = new TaskManager(\n+            changeLogReader,\n+            UUID.randomUUID(),\n+            \"taskManagerTest\",\n+            streamsMetrics,\n+            activeTaskCreator,\n+            standbyTaskCreator,\n+            topologyBuilder,\n+            adminClient,\n+            stateDirectory,\n+            StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA\n+        );\n+        taskManager.setMainConsumer(consumer);\n+\n+        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n+        final StateMachineTask task01 = new StateMachineTask(taskId01, taskId01Partitions, true);\n+        final Map<TopicPartition, OffsetAndMetadata> offsets = singletonMap(t1p1, new OffsetAndMetadata(0L, null));\n+        task01.setCommittableOffsetsAndMetadata(offsets);\n+        task01.setCommitNeeded();\n+        taskManager.tasks().put(taskId00, task00);\n+        taskManager.tasks().put(taskId01, task01);\n+\n+        expect(activeTaskCreator.streamsProducerForTask(taskId01)).andThrow(new RuntimeException(\"task 0_1 producer boom!\"));\n+        activeTaskCreator.closeAndRemoveTaskProducerIfNeeded(eq(taskId01));\n+        EasyMock.expectLastCall();\n+\n+        replay(activeTaskCreator);\n+\n+        final RuntimeException thrown = assertThrows(RuntimeException.class,\n+            () -> taskManager.handleAssignment(mkMap(mkEntry(taskId00, taskId00Partitions)), Collections.emptyMap()));\n+        assertThat(thrown.getCause().getMessage(), is(\"task 0_1 producer boom!\"));\n+\n+        assertThat(task00.state(), is(Task.State.CREATED));\n+        assertThat(task01.state(), is(Task.State.CLOSED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7ec12ebd0d113e0f25563e88543401c0a5e884b"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de186888785fdd16bc40ad29cd7f94de997b336", "author": {"user": {"login": "abbccdda", "name": "Boyang Chen"}}, "url": "https://github.com/apache/kafka/commit/3de186888785fdd16bc40ad29cd7f94de997b336", "committedDate": "2020-03-24T03:46:21Z", "message": "address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 348, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}