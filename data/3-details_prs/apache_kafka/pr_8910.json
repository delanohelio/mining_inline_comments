{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NjUxOTcw", "number": 8910, "title": "KAFKA-10188: Prevent SinkTask::preCommit from being called after SinkTask::stop", "bodyText": "Jira\nThe general lifecycle for a sink task is:\n\nInstantiate the SinkTask object\nInvoke SinkTask::initialize\nInvoke SinkTask::start\nWhile the task is still running:\n\n\nPoll Kafka for records\nGive those records to the task via SinkTask::put\nPeriodically commit offsets, which involves calling SinkTask::preCommit and committing the resulting map of TopicPartition to offset to Kafka\n\n\nCommit offsets a penultimate time (including the call to `SinkTask::preCommit)\nInvoke SinkTask::stop\nClose the consumer for the task\nCommit offsets a final time (also including the call to SinkTask::preCommit)\n\nThis final offset commit happens indirectly: closing the consumer for a sink task causes the rebalance listener for that consumer to be triggered, and the rebalance listener the framework uses for its consumers performs an offset commit for the task when partitions are revoked.\nThis is a bit of a problem because the framework calls SinkTask::stop before closing the consumer for the task. It's possible and even likely that tasks will have de-allocated resources necessary for their preCommit method and will fail unexpectedly at this point.\nSince the framework already ensures that offsets are committed after the last call to SinkTask::put, it should be fine to remove this extra offset commit. There is still a chance that some data may be dropped in the case that a task performs completely asynchronous writes to Kafka and has written data between the pre-stop call to SinkTask::preCommit and the post-stop one, but there will be no loss of delivery guarantees provided by the framework, and this change will adhere to the publicly-stated API for sink tasks.\nA unit test is added that covers the internal WorkerSinkTask::close method and ensures that SinkTask::preCommit is not called during that method.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-22T02:59:40Z", "url": "https://github.com/apache/kafka/pull/8910", "merged": true, "mergeCommit": {"oid": "4c6b96296db0d5fea2e7cf85ac14c9cc783b8d54"}, "closed": true, "closedAt": "2020-10-06T18:18:55Z", "author": {"login": "C0urante"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs7BGYgH2gAyNDM3NjUxOTcwOjllNWIyMTdmMTI3NGRkODk2NzMwNDAzYThiZDhmYzM2MzgzZWU1YWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNbgufAFqTQ5NzkwNDk1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae", "author": {"user": {"login": "C0urante", "name": "Chris Egerton"}}, "url": "https://github.com/apache/kafka/commit/9e5b217f1274dd896730403a8bd8fc36383ee5ae", "committedDate": "2020-06-19T22:44:21Z", "message": "KAFKA-10188: Prevent SinkTask::preCommit from being called after SinkTask::stop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTU2MzIx", "url": "https://github.com/apache/kafka/pull/8910#pullrequestreview-438556321", "createdAt": "2020-06-26T19:51:29Z", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1MTozMFrOGps3sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOTo1MTozMFrOGps3sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3OTk1Mw==", "bodyText": "I think this gets called by the consumer thread, which is different from the thread which calls close(). I think that it may be necessary to mark this variable as volatile.", "url": "https://github.com/apache/kafka/pull/8910#discussion_r446379953", "createdAt": "2020-06-26T19:51:30Z", "author": {"login": "gharris1727"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -689,6 +692,10 @@ else if (!context.pausedPartitions().isEmpty())\n \n         @Override\n         public void onPartitionsRevoked(Collection<TopicPartition> partitions) {\n+            if (taskStopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjgwMjAz", "url": "https://github.com/apache/kafka/pull/8910#pullrequestreview-438680203", "createdAt": "2020-06-27T07:32:18Z", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNzozMjoxOFrOGp0A2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNzozMjoxOFrOGp0A2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5Njk4NA==", "bodyText": "Could it be replaced by isStopping()? It seems to me both flags are similar and we don't need to add more duplicate.", "url": "https://github.com/apache/kafka/pull/8910#discussion_r446496984", "createdAt": "2020-06-27T07:32:18Z", "author": {"login": "chia7712"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -138,6 +139,7 @@ public WorkerSinkTask(ConnectorTaskId id,\n         this.sinkTaskMetricsGroup.recordOffsetSequenceNumber(commitSeqno);\n         this.consumer = consumer;\n         this.isTopicTrackingEnabled = workerConfig.getBoolean(TOPIC_TRACKING_ENABLE_CONFIG);\n+        this.taskStopped = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjMyOTAz", "url": "https://github.com/apache/kafka/pull/8910#pullrequestreview-439632903", "createdAt": "2020-06-30T02:51:19Z", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjM3MTcw", "url": "https://github.com/apache/kafka/pull/8910#pullrequestreview-439637170", "createdAt": "2020-06-30T03:04:51Z", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTA0OTU3", "url": "https://github.com/apache/kafka/pull/8910#pullrequestreview-497904957", "createdAt": "2020-09-28T21:21:20Z", "commit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyMToyMVrOHZQEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MTowOFrOHZSOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTc3MQ==", "bodyText": "Shouldn't this be volatile?\nYes, it's true that WorkerSinkTask.close() is always and only called from within the WorkerTask.doRun() after the tasks determines it will stop. However, the onPartitionsRevoked(...) method is called from the consumer thread, and making the field volatile is the only way to ensure that the consumer thread reads a non-cached value.", "url": "https://github.com/apache/kafka/pull/8910#discussion_r496239771", "createdAt": "2020-09-28T21:21:21Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -138,6 +139,7 @@ public WorkerSinkTask(ConnectorTaskId id,\n         this.sinkTaskMetricsGroup.recordOffsetSequenceNumber(commitSeqno);\n         this.consumer = consumer;\n         this.isTopicTrackingEnabled = workerConfig.getBoolean(TOPIC_TRACKING_ENABLE_CONFIG);\n+        this.taskStopped = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NTE0NA==", "bodyText": "Verified locally that this test fails when the additions to the onPartitionsRevoked(...) method above are removed locally. Nice work, @C0urante.", "url": "https://github.com/apache/kafka/pull/8910#discussion_r496275144", "createdAt": "2020-09-28T22:41:08Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java", "diffHunk": "@@ -315,6 +315,56 @@ public void testPause() throws Exception {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testShutdown() throws Exception {\n+        createTask(initialState);\n+\n+        expectInitializeTask();\n+        expectTaskGetTopic(true);\n+\n+        // first iteration\n+        expectPollInitialAssignment();\n+\n+        // second iteration\n+        EasyMock.expect(sinkTask.preCommit(EasyMock.anyObject())).andReturn(Collections.emptyMap());\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n+        EasyMock.expectLastCall();\n+\n+        // WorkerSinkTask::stop\n+        consumer.wakeup();\n+        PowerMock.expectLastCall();\n+        sinkTask.stop();\n+        PowerMock.expectLastCall();\n+\n+        // WorkerSinkTask::close\n+        consumer.close();\n+        PowerMock.expectLastCall().andAnswer(new IAnswer<Object>() {\n+            @Override\n+            public Object answer() throws Throwable {\n+                rebalanceListener.getValue().onPartitionsRevoked(\n+                    asList(TOPIC_PARTITION, TOPIC_PARTITION2)\n+                );\n+                return null;\n+            }\n+        });\n+        transformationChain.close();\n+        PowerMock.expectLastCall();\n+\n+        PowerMock.replayAll();\n+\n+        workerTask.initialize(TASK_CONFIG);\n+        workerTask.initializeAndStart();\n+        workerTask.iteration();\n+        sinkTaskContext.getValue().requestCommit(); // Force an offset commit\n+        workerTask.iteration();\n+        workerTask.stop();\n+        workerTask.close();\n+\n+        PowerMock.verifyAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5b217f1274dd896730403a8bd8fc36383ee5ae"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 694, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}