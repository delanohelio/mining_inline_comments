{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjEzMTc1", "number": 8683, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoyODo0M1rOEFJy2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NTo0OVrOEL-04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODM4ODA4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoyODo0M1rOGjNz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTo0NTozM1rOGjPwmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTYxMg==", "bodyText": "Just to be sure, we are reusing the code, but not changing the behaviour for backoff right?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439579612", "createdAt": "2020-06-12T18:28:43Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -34,19 +36,22 @@\n  *\n  */\n final class ClusterConnectionStates {\n-    private final long reconnectBackoffInitMs;\n-    private final long reconnectBackoffMaxMs;\n-    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;\n-    private final double reconnectBackoffMaxExp;\n     private final Map<String, NodeConnectionState> nodeState;\n     private final Logger log;\n+    private Set<String> connectingNodes;\n+    private GeometricProgression reconnectBackoff;\n+    private GeometricProgression connectionSetupTimeout;\n \n-    public ClusterConnectionStates(long reconnectBackoffMs, long reconnectBackoffMaxMs, LogContext logContext) {\n+    public ClusterConnectionStates(long reconnectBackoffMs, long reconnectBackoffMaxMs,\n+                                   long connectionSetupTimeoutMs, long connectionSetupTimeoutMaxMs,\n+                                   LogContext logContext) {\n         this.log = logContext.logger(ClusterConnectionStates.class);\n-        this.reconnectBackoffInitMs = reconnectBackoffMs;\n-        this.reconnectBackoffMaxMs = reconnectBackoffMaxMs;\n-        this.reconnectBackoffMaxExp = Math.log(this.reconnectBackoffMaxMs / (double) Math.max(reconnectBackoffMs, 1)) / Math.log(RECONNECT_BACKOFF_EXP_BASE);\n+        this.reconnectBackoff = new GeometricProgression(\n+                reconnectBackoffMs, 2, reconnectBackoffMaxMs, 0.2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTU0NA==", "bodyText": "Yes, we are reusing the code.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439611544", "createdAt": "2020-06-12T19:45:33Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -34,19 +36,22 @@\n  *\n  */\n final class ClusterConnectionStates {\n-    private final long reconnectBackoffInitMs;\n-    private final long reconnectBackoffMaxMs;\n-    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;\n-    private final double reconnectBackoffMaxExp;\n     private final Map<String, NodeConnectionState> nodeState;\n     private final Logger log;\n+    private Set<String> connectingNodes;\n+    private GeometricProgression reconnectBackoff;\n+    private GeometricProgression connectionSetupTimeout;\n \n-    public ClusterConnectionStates(long reconnectBackoffMs, long reconnectBackoffMaxMs, LogContext logContext) {\n+    public ClusterConnectionStates(long reconnectBackoffMs, long reconnectBackoffMaxMs,\n+                                   long connectionSetupTimeoutMs, long connectionSetupTimeoutMaxMs,\n+                                   LogContext logContext) {\n         this.log = logContext.logger(ClusterConnectionStates.class);\n-        this.reconnectBackoffInitMs = reconnectBackoffMs;\n-        this.reconnectBackoffMaxMs = reconnectBackoffMaxMs;\n-        this.reconnectBackoffMaxExp = Math.log(this.reconnectBackoffMaxMs / (double) Math.max(reconnectBackoffMs, 1)) / Math.log(RECONNECT_BACKOFF_EXP_BASE);\n+        this.reconnectBackoff = new GeometricProgression(\n+                reconnectBackoffMs, 2, reconnectBackoffMaxMs, 0.2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3OTYxMg=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODM5MzY0OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozMDo0MFrOGjN3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoxMDo0NlrOGjQWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MDUxOA==", "bodyText": "why did we remove the constance and hard-code the number inline?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439580518", "createdAt": "2020-06-12T18:30:40Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -34,19 +36,22 @@\n  *\n  */\n final class ClusterConnectionStates {\n-    private final long reconnectBackoffInitMs;\n-    private final long reconnectBackoffMaxMs;\n-    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyMTE3MA==", "bodyText": "I was thinking that the existing code hardcoded the jitter. I added back the constance and also added a constance for jitter.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439621170", "createdAt": "2020-06-12T20:10:46Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -34,19 +36,22 @@\n  *\n  */\n final class ClusterConnectionStates {\n-    private final long reconnectBackoffInitMs;\n-    private final long reconnectBackoffMaxMs;\n-    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MDUxOA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwNzU4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNTo0N1rOGjOAWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTo0MTowNFrOGjPqYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjgxMQ==", "bodyText": "failedAttempts isn't really the number of failed connections, so not sure what we are setting timeout to.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439582811", "createdAt": "2020-06-12T18:35:47Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +165,16 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        nodeState.failedAttempts++;\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(nodeState.failedAttempts - 1);\n+        if (nodeState.state == ConnectionState.CONNECTING) {\n+            nodeState.connectionSetupTimeoutMs = connectionSetupTimeout.term(nodeState.failedAttempts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwOTk1Mg==", "bodyText": "Correct. I'll add a new class property to record connection failures separately.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439609952", "createdAt": "2020-06-12T19:41:04Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +165,16 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        nodeState.failedAttempts++;\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(nodeState.failedAttempts - 1);\n+        if (nodeState.state == ConnectionState.CONNECTING) {\n+            nodeState.connectionSetupTimeoutMs = connectionSetupTimeout.term(nodeState.failedAttempts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjgxMQ=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQxMjg1OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNzo1M1rOGjODyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNjo1MjowOFrOGjYXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzY5MA==", "bodyText": "Can't we keep this method to perform reset (perhaps rename the method) and include all types of reset?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439583690", "createdAt": "2020-06-12T18:37:53Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -296,36 +314,6 @@ public AuthenticationException authenticationException(String id) {\n         return state != null ? state.authenticationException : null;\n     }\n \n-    /**\n-     * Resets the failure count for a node and sets the reconnect backoff to the base\n-     * value configured via reconnect.backoff.ms\n-     *\n-     * @param nodeState The node state object to update\n-     */\n-    private void resetReconnectBackoff(NodeConnectionState nodeState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MjU0MQ==", "bodyText": "Including all types of reset together is probably not a good choice because the reset of failed attempts and the reset of the connection timeout may happen in different places.\nHowever, I agree we should have some abstraction on the update and reset logic. I'll put the logic in new class methods.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439752541", "createdAt": "2020-06-13T16:52:08Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -296,36 +314,6 @@ public AuthenticationException authenticationException(String id) {\n         return state != null ? state.authenticationException : null;\n     }\n \n-    /**\n-     * Resets the failure count for a node and sets the reconnect backoff to the base\n-     * value configured via reconnect.backoff.ms\n-     *\n-     * @param nodeState The node state object to update\n-     */\n-    private void resetReconnectBackoff(NodeConnectionState nodeState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzY5MA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQxODc5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MDoxN1rOGjOHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozOTo1MVrOGjRCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NDY3MQ==", "bodyText": "Didn't we decide to call this socket.connection.setup.timeout.ms during KIP discussion? (connection instead of connections)", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439584671", "createdAt": "2020-06-12T18:40:17Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG = \"socket.connections.setup.timeout.ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjQ3NQ==", "bodyText": "I think in the kip I used socket.connections.setup.timeout.ms\nSince @cmccabe also suggests socket.connection.setup.timeout.ms, I'll change the KIP proposal to stick to socket.connection.setup.timeout.ms", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439632475", "createdAt": "2020-06-12T20:39:51Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG = \"socket.connections.setup.timeout.ms\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NDY3MQ=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQyMjc0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MTo0MFrOGjOKGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNzo0OTo0MVrOGjYmJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTMwNw==", "bodyText": "TimeOut => TimedOut", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439585307", "createdAt": "2020-06-12T18:41:40Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -554,6 +571,7 @@ private void doSend(ClientRequest clientRequest, boolean isInternalRequest, long\n         handleDisconnections(responses, updatedNow);\n         handleConnections();\n         handleInitiateApiVersionRequests(updatedNow);\n+        handleTimeOutConnections(responses, updatedNow);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1NjMyNw==", "bodyText": "Do you mean TimeOut => Timeout? Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439756327", "createdAt": "2020-06-13T17:49:41Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -554,6 +571,7 @@ private void doSend(ClientRequest clientRequest, boolean isInternalRequest, long\n         handleDisconnections(responses, updatedNow);\n         handleConnections();\n         handleInitiateApiVersionRequests(updatedNow);\n+        handleTimeOutConnections(responses, updatedNow);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTMwNw=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQyOTczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0NDoxMFrOGjOOeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMDo0MlrOGnO_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjQyNA==", "bodyText": "Shouldn't we also check that the node is in connecting state?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439586424", "createdAt": "2020-06-12T18:44:10Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +345,37 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    // Visible for testing\n+    long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NjY5Ng==", "bodyText": "I think we don't need to check if the node is in connecting state because the caller is only applying this test to all the nodes in the connecting state.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439646696", "createdAt": "2020-06-12T21:19:26Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +345,37 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    // Visible for testing\n+    long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjQyNA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNjMzNw==", "bodyText": "That is indeed true today as the caller only calls with nodes in connectingNodes but that may not be true forever. I would add the check as suggested by Rajini here to make the implementation safe.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442726337", "createdAt": "2020-06-19T09:15:23Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +345,37 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    // Visible for testing\n+    long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjQyNA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5MzI5MA==", "bodyText": "Make sense. Checker added.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443793290", "createdAt": "2020-06-22T20:00:42Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +345,37 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    // Visible for testing\n+    long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjQyNA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQzMjE1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0NTowM1rOGjOP-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyMDo0MVrOGjR7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjgwOQ==", "bodyText": "comment unnecessary since it is obvious from the line below", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439586809", "createdAt": "2020-06-12T18:45:03Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,26 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeOutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {\n+            if (connectionStates.isConnectionSetupTimeout(nodeId, now)) {\n+                // close connection to the node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NzEwNA==", "bodyText": "Line deleted.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439647104", "createdAt": "2020-06-12T21:20:41Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,26 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeOutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {\n+            if (connectionStates.isConnectionSetupTimeout(nodeId, now)) {\n+                // close connection to the node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NjgwOQ=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQzMzQ2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0NToyNVrOGjOQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjoxNTowOVrOGjS50w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Njk5NA==", "bodyText": "Can we include the timeout in the log line?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439586994", "createdAt": "2020-06-12T18:45:25Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,26 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeOutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {\n+            if (connectionStates.isConnectionSetupTimeout(nodeId, now)) {\n+                // close connection to the node\n+                this.selector.close(nodeId);\n+                log.debug(\"Disconnecting from node {} due to socket connection setup timeout.\", nodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2MzA1OQ==", "bodyText": "Added timeout value to the log.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439663059", "createdAt": "2020-06-12T22:15:09Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,26 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeOutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {\n+            if (connectionStates.isConnectionSetupTimeout(nodeId, now)) {\n+                // close connection to the node\n+                this.selector.close(nodeId);\n+                log.debug(\"Disconnecting from node {} due to socket connection setup timeout.\", nodeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Njk5NA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQzNzQyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0Njo1MVrOGjOTQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxNzo0NVrOGl44hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NzY1MA==", "bodyText": "Can we define the defaults in CommonClientConfigs?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439587650", "createdAt": "2020-06-12T18:46:51Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "diffHunk": "@@ -149,6 +155,16 @@\n                                         atLeast(0),\n                                         Importance.MEDIUM,\n                                         REQUEST_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG,\n+                                        Type.LONG,\n+                                        10 * 1000,\n+                                        Importance.MEDIUM,\n+                                        CommonClientConfigs.SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MAX_MS_CONFIG,\n+                                        Type.LONG,\n+                                        127 * 1000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTc1MQ==", "bodyText": "I think the current practice is to hard code the defaults in each client's config definition. Do we still want to define the defaults in CommonClientConfigs?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439751751", "createdAt": "2020-06-13T16:38:20Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "diffHunk": "@@ -149,6 +155,16 @@\n                                         atLeast(0),\n                                         Importance.MEDIUM,\n                                         REQUEST_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG,\n+                                        Type.LONG,\n+                                        10 * 1000,\n+                                        Importance.MEDIUM,\n+                                        CommonClientConfigs.SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MAX_MS_CONFIG,\n+                                        Type.LONG,\n+                                        127 * 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NzY1MA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NDkwNQ==", "bodyText": "While I also recognize that we are not consistent with this, I would do it as suggested by Rajini. The defaults are the same everywhere so it makes sense to have it defined centrally for now.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440674905", "createdAt": "2020-06-16T08:25:38Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "diffHunk": "@@ -149,6 +155,16 @@\n                                         atLeast(0),\n                                         Importance.MEDIUM,\n                                         REQUEST_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG,\n+                                        Type.LONG,\n+                                        10 * 1000,\n+                                        Importance.MEDIUM,\n+                                        CommonClientConfigs.SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MAX_MS_CONFIG,\n+                                        Type.LONG,\n+                                        127 * 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NzY1MA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4MjQ3MQ==", "bodyText": "Sounds good. WIll refactor.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442382471", "createdAt": "2020-06-18T17:17:45Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "diffHunk": "@@ -149,6 +155,16 @@\n                                         atLeast(0),\n                                         Importance.MEDIUM,\n                                         REQUEST_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_CONFIG,\n+                                        Type.LONG,\n+                                        10 * 1000,\n+                                        Importance.MEDIUM,\n+                                        CommonClientConfigs.SOCKET_CONNECTIONS_SETUP_TIMEOUT_MS_DOC)\n+                                .define(SOCKET_CONNECTIONS_SETUP_TIMEOUT_MAX_MS_CONFIG,\n+                                        Type.LONG,\n+                                        127 * 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NzY1MA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQzOTM3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0NzozMlrOGjOUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMDowNVrOGl5Uzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Nzk3NA==", "bodyText": "This is not exactly a geometric progression?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439587974", "createdAt": "2020-06-12T18:47:32Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTc5Mg==", "bodyText": "The naming is kind of hard because exponential reconnect backoff, exponential retry backoff, and exponential timeout are sharing this util class at the same time. Any suggestion?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r439751792", "createdAt": "2020-06-13T16:39:36Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Nzk3NA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NjI0Ng==", "bodyText": "I would go with ExponentialBackoff even if we use it for computing an exponential timeout as well. I think that people will understand this.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440676246", "createdAt": "2020-06-16T08:27:46Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Nzk3NA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4OTcxMQ==", "bodyText": "Good idea. Will go for ExponentialBackoff", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442389711", "createdAt": "2020-06-18T17:30:05Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4Nzk3NA=="}, "originalCommit": {"oid": "b1a62f8bb374bd52baa4e8bdb389526ddcfd1595"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTM4NzAwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0NToyOVrOGkPMtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoxNjoyM1rOGmMUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MDkzMg==", "bodyText": "Shouldn't we increment before computing the new reconnect backoff?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440650932", "createdAt": "2020-06-16T07:45:29Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -300,30 +323,48 @@ public AuthenticationException authenticationException(String id) {\n      * Resets the failure count for a node and sets the reconnect backoff to the base\n      * value configured via reconnect.backoff.ms\n      *\n-     * @param nodeState The node state object to update\n+     * @param nodeState nodeState The node state object to update\n      */\n     private void resetReconnectBackoff(NodeConnectionState nodeState) {\n         nodeState.failedAttempts = 0;\n-        nodeState.reconnectBackoffMs = this.reconnectBackoffInitMs;\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(0);\n+    }\n+\n+    /**\n+     * Resets the failure count for a node and sets the connection setup timeout to the base\n+     * value configured via socket.connection.setup.timeout.ms\n+     *\n+     * @param nodeState nodeState The node state object to update\n+     */\n+    private void resetConnectionSetupTimeout(NodeConnectionState nodeState) {\n+        nodeState.failedConnectAttempts = 0;\n+        nodeState.connectionSetupTimeoutMs = connectionSetupTimeout.term(0);\n     }\n \n     /**\n-     * Update the node reconnect backoff exponentially.\n+     * Increment the failure counter, update the node reconnect backoff exponentially,\n+     * and record the current timestamp.\n      * The delay is reconnect.backoff.ms * 2**(failures - 1) * (+/- 20% random jitter)\n      * Up to a (pre-jitter) maximum of reconnect.backoff.max.ms\n      *\n      * @param nodeState The node state object to update\n      */\n-    private void updateReconnectBackoff(NodeConnectionState nodeState) {\n-        if (this.reconnectBackoffMaxMs > this.reconnectBackoffInitMs) {\n-            nodeState.failedAttempts += 1;\n-            double backoffExp = Math.min(nodeState.failedAttempts - 1, this.reconnectBackoffMaxExp);\n-            double backoffFactor = Math.pow(RECONNECT_BACKOFF_EXP_BASE, backoffExp);\n-            long reconnectBackoffMs = (long) (this.reconnectBackoffInitMs * backoffFactor);\n-            // Actual backoff is randomized to avoid connection storms.\n-            double randomFactor = ThreadLocalRandom.current().nextDouble(0.8, 1.2);\n-            nodeState.reconnectBackoffMs = (long) (randomFactor * reconnectBackoffMs);\n-        }\n+    private void incrementReconnectBackoff(NodeConnectionState nodeState, long now) {\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(nodeState.failedAttempts);\n+        nodeState.failedAttempts++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxNTM5OA==", "bodyText": "reconnectBackoff.term(0) will return the ${reconnect.backoff.ms} * 2 ^ 0 * jitter\nreconnectBackoff.term(1) will return the ${reconnect.backoff.ms} * 2 ^ 1 * jitter\nThe difference btw reconnect backoff and connection timeout here is that, after the first failed attempts, the connection timeout will be the 1st term of the randomized geometric sequence but the reconnect backoff will be the 0st term of the randomized geometric sequence. So We should use (failedAttempts - 1) for fetching reconnect backoff and (failedAttemps) for fetching the connection timeout.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r441915398", "createdAt": "2020-06-18T01:17:09Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -300,30 +323,48 @@ public AuthenticationException authenticationException(String id) {\n      * Resets the failure count for a node and sets the reconnect backoff to the base\n      * value configured via reconnect.backoff.ms\n      *\n-     * @param nodeState The node state object to update\n+     * @param nodeState nodeState The node state object to update\n      */\n     private void resetReconnectBackoff(NodeConnectionState nodeState) {\n         nodeState.failedAttempts = 0;\n-        nodeState.reconnectBackoffMs = this.reconnectBackoffInitMs;\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(0);\n+    }\n+\n+    /**\n+     * Resets the failure count for a node and sets the connection setup timeout to the base\n+     * value configured via socket.connection.setup.timeout.ms\n+     *\n+     * @param nodeState nodeState The node state object to update\n+     */\n+    private void resetConnectionSetupTimeout(NodeConnectionState nodeState) {\n+        nodeState.failedConnectAttempts = 0;\n+        nodeState.connectionSetupTimeoutMs = connectionSetupTimeout.term(0);\n     }\n \n     /**\n-     * Update the node reconnect backoff exponentially.\n+     * Increment the failure counter, update the node reconnect backoff exponentially,\n+     * and record the current timestamp.\n      * The delay is reconnect.backoff.ms * 2**(failures - 1) * (+/- 20% random jitter)\n      * Up to a (pre-jitter) maximum of reconnect.backoff.max.ms\n      *\n      * @param nodeState The node state object to update\n      */\n-    private void updateReconnectBackoff(NodeConnectionState nodeState) {\n-        if (this.reconnectBackoffMaxMs > this.reconnectBackoffInitMs) {\n-            nodeState.failedAttempts += 1;\n-            double backoffExp = Math.min(nodeState.failedAttempts - 1, this.reconnectBackoffMaxExp);\n-            double backoffFactor = Math.pow(RECONNECT_BACKOFF_EXP_BASE, backoffExp);\n-            long reconnectBackoffMs = (long) (this.reconnectBackoffInitMs * backoffFactor);\n-            // Actual backoff is randomized to avoid connection storms.\n-            double randomFactor = ThreadLocalRandom.current().nextDouble(0.8, 1.2);\n-            nodeState.reconnectBackoffMs = (long) (randomFactor * reconnectBackoffMs);\n-        }\n+    private void incrementReconnectBackoff(NodeConnectionState nodeState, long now) {\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(nodeState.failedAttempts);\n+        nodeState.failedAttempts++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MDkzMg=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwMDkxNA==", "bodyText": "That makes sense. Thanks for the clarification.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442700914", "createdAt": "2020-06-19T08:16:23Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -300,30 +323,48 @@ public AuthenticationException authenticationException(String id) {\n      * Resets the failure count for a node and sets the reconnect backoff to the base\n      * value configured via reconnect.backoff.ms\n      *\n-     * @param nodeState The node state object to update\n+     * @param nodeState nodeState The node state object to update\n      */\n     private void resetReconnectBackoff(NodeConnectionState nodeState) {\n         nodeState.failedAttempts = 0;\n-        nodeState.reconnectBackoffMs = this.reconnectBackoffInitMs;\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(0);\n+    }\n+\n+    /**\n+     * Resets the failure count for a node and sets the connection setup timeout to the base\n+     * value configured via socket.connection.setup.timeout.ms\n+     *\n+     * @param nodeState nodeState The node state object to update\n+     */\n+    private void resetConnectionSetupTimeout(NodeConnectionState nodeState) {\n+        nodeState.failedConnectAttempts = 0;\n+        nodeState.connectionSetupTimeoutMs = connectionSetupTimeout.term(0);\n     }\n \n     /**\n-     * Update the node reconnect backoff exponentially.\n+     * Increment the failure counter, update the node reconnect backoff exponentially,\n+     * and record the current timestamp.\n      * The delay is reconnect.backoff.ms * 2**(failures - 1) * (+/- 20% random jitter)\n      * Up to a (pre-jitter) maximum of reconnect.backoff.max.ms\n      *\n      * @param nodeState The node state object to update\n      */\n-    private void updateReconnectBackoff(NodeConnectionState nodeState) {\n-        if (this.reconnectBackoffMaxMs > this.reconnectBackoffInitMs) {\n-            nodeState.failedAttempts += 1;\n-            double backoffExp = Math.min(nodeState.failedAttempts - 1, this.reconnectBackoffMaxExp);\n-            double backoffFactor = Math.pow(RECONNECT_BACKOFF_EXP_BASE, backoffExp);\n-            long reconnectBackoffMs = (long) (this.reconnectBackoffInitMs * backoffFactor);\n-            // Actual backoff is randomized to avoid connection storms.\n-            double randomFactor = ThreadLocalRandom.current().nextDouble(0.8, 1.2);\n-            nodeState.reconnectBackoffMs = (long) (randomFactor * reconnectBackoffMs);\n-        }\n+    private void incrementReconnectBackoff(NodeConnectionState nodeState, long now) {\n+        nodeState.reconnectBackoffMs = reconnectBackoff.term(nodeState.failedAttempts);\n+        nodeState.failedAttempts++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MDkzMg=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQxODU1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1Mzo1MVrOGkPgYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToxNTo1NlrOGmN4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTk2OA==", "bodyText": "Are you sure that using lastConnectAttemptMs is correct here? lastConnectAttemptMs is recorded when a connection is disconnected and as we respect the reconnectBackoffMs before reconnecting, the connection timeout computed here will also include the current reconnectBackoffMs. Is this what we want? It may be better to record the time in connecting.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440655968", "createdAt": "2020-06-16T07:53:51Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTEyMw==", "bodyText": "I think so. The lastConnectAttemptMs is updated in both connecting (Line 145 & Line 157) and disconnected.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442355123", "createdAt": "2020-06-18T16:31:29Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTk2OA=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNjYwMA==", "bodyText": "Oh right. I missed the ones in connecting. Thanks for the clarification.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442726600", "createdAt": "2020-06-19T09:15:56Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        return now - lastConnectAttemptMs(id) > connectionSetupTimeoutMs(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTk2OA=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQyMjMyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1NDo1M1rOGkPiyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNToxN1rOGobRHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng==", "bodyText": "Should we ensure that nodeState is not null here?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440656586", "createdAt": "2020-06-16T07:54:53Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NDMwNw==", "bodyText": "No. The caller will ensure that the node is in the connecting state. I'll add an IllegalStateException here.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442354307", "createdAt": "2020-06-18T16:30:13Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNTM5NA==", "bodyText": "I would rather prefer to handle this like we did in lastConnectAttemptMs in order to remain consistent. If nodeState is null, we can return 0.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442725394", "createdAt": "2020-06-19T09:13:24Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NTEzNA==", "bodyText": "When NetworkClient initializes a connection to a given node (NetworkClient::initiateConnect), it's guaranteed that the nodeState will get initialized and won't be null. I think it's probably not reasonable if the caller wants to get the connection timeout of a given node before the connection initialization, which is the reason I prevent this kind of calling by throwing the exception.\nHowever, it might be reasonable for a caller to get the lastConnectAttemptMs before initializing the connection. For example, the node provider wants to provide a node with the least recent connection attempt. For those nodes haven't been connected yet, their NodeConnectionState does not exist. However, this implies that the node has the highest priority and we may assume their lastConnectAttemptMs is 0.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443785134", "createdAt": "2020-06-22T19:43:25Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1MTIyNg==", "bodyText": "Thanks for the clarification. In this case, let's reuse the nodeState method which check null and throws an IllegalStateException as you do here. We may be able to use it in isConnectionSetupTimeout as well.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444951226", "createdAt": "2020-06-24T14:48:29Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0Mjk3NA==", "bodyText": "Sure. Now isConnectionSetupTimeout is also using this checker.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445042974", "createdAt": "2020-06-24T17:05:17Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +398,36 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState.connectionSetupTimeoutMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NjU4Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQzNTg5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1ODozNVrOGkPrbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDo1OVrOGl3u8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1ODc5Ng==", "bodyText": "It would be great if you could update the javadoc of the method to reflect this.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440658796", "createdAt": "2020-06-16T07:58:35Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -678,7 +696,11 @@ public Node leastLoadedNode(long now) {\n             } else if (connectionStates.isPreparingConnection(node.idString())) {\n                 foundConnecting = node;\n             } else if (canConnect(node, now)) {\n-                foundCanConnect = node;\n+                if (foundCanConnect == null ||\n+                        this.connectionStates.lastConnectAttemptMs(foundCanConnect.idString()) >\n+                                this.connectionStates.lastConnectAttemptMs(node.idString())) {\n+                    foundCanConnect = node;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MzYzMg==", "bodyText": "Yes", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442363632", "createdAt": "2020-06-18T16:44:59Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -678,7 +696,11 @@ public Node leastLoadedNode(long now) {\n             } else if (connectionStates.isPreparingConnection(node.idString())) {\n                 foundConnecting = node;\n             } else if (canConnect(node, now)) {\n-                foundCanConnect = node;\n+                if (foundCanConnect == null ||\n+                        this.connectionStates.lastConnectAttemptMs(foundCanConnect.idString()) >\n+                                this.connectionStates.lastConnectAttemptMs(node.idString())) {\n+                    foundCanConnect = node;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1ODc5Ng=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQzOTYyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1OTo0MVrOGkPt4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowNToxNlrOGl4dAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1OTQyNg==", "bodyText": "nit: We usually put a space before and after the :.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440659426", "createdAt": "2020-06-16T07:59:41Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,29 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeoutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NTQyNA==", "bodyText": "Refactored", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442375424", "createdAt": "2020-06-18T17:05:16Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +808,29 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimeoutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId: connectingNodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1OTQyNg=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQ1NDkwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/GeometricProgressionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowMzo1OFrOGkP3hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoyNjo0MVrOGl5MzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MTg5Mw==", "bodyText": "This one can be removed I suppose.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440661893", "createdAt": "2020-06-16T08:03:58Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/GeometricProgressionTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class GeometricProgressionTest {\n+    @Test\n+    public void testGeometricProgression() {\n+        long scaleFactor = 100;\n+        int ratio = 2;\n+        long termMax = 2000;\n+        double jitter = 0.2;\n+        GeometricProgression geometricProgression = new GeometricProgression(\n+                scaleFactor, ratio, termMax, jitter\n+        );\n+\n+        for (int i = 0; i <= 100; i++) {\n+            for (int n = 0; n <= 4; n++) {\n+                assertEquals(scaleFactor * Math.pow(ratio, n), geometricProgression.term(n),\n+                        scaleFactor * Math.pow(ratio, n) * jitter);\n+            }\n+            System.out.println(geometricProgression.term(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4NzY2MA==", "bodyText": "Oh, right. I forgot removing it.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442387660", "createdAt": "2020-06-18T17:26:41Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/GeometricProgressionTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class GeometricProgressionTest {\n+    @Test\n+    public void testGeometricProgression() {\n+        long scaleFactor = 100;\n+        int ratio = 2;\n+        long termMax = 2000;\n+        double jitter = 0.2;\n+        GeometricProgression geometricProgression = new GeometricProgression(\n+                scaleFactor, ratio, termMax, jitter\n+        );\n+\n+        for (int i = 0; i <= 100; i++) {\n+            for (int n = 0; n <= 4; n++) {\n+                assertEquals(scaleFactor * Math.pow(ratio, n), geometricProgression.term(n),\n+                        scaleFactor * Math.pow(ratio, n) * jitter);\n+            }\n+            System.out.println(geometricProgression.term(5));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MTg5Mw=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTUxMzc3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMDowMlrOGkQc-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MzoyMFrOGl3rMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTQ4MA==", "bodyText": "nit: I would use to be established instead of to be built and I think that we should avoid putting default values in the documentation here because first the default can be changed on a per client basis and second the default will be documented based on the default value provided in config definition.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440671480", "createdAt": "2020-06-16T08:20:02Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be built. If the connection is not built before the timeout elapses the network client will close the socket channel. The default value will be 10 seconds.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjY3Mw==", "bodyText": "Make sense. I'll change the description and remove the defaults in the doc.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442362673", "createdAt": "2020-06-18T16:43:20Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be built. If the connection is not built before the timeout elapses the network client will close the socket channel. The default value will be 10 seconds.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTQ4MA=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTUxNDk1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMDoxN1rOGkQdnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMDozNFrOGl4TCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTY0Nw==", "bodyText": "Same comment as above.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440671647", "createdAt": "2020-06-16T08:20:17Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be built. If the connection is not built before the timeout elapses the network client will close the socket channel. The default value will be 10 seconds.\";\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the initial socket connection to be built. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the backoff resulting in a random range between 20% below and 20% above the computed value. The default value will be 127 seconds.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3Mjg3Mw==", "bodyText": "Refactored", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442372873", "createdAt": "2020-06-18T17:00:34Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be built. If the connection is not built before the timeout elapses the network client will close the socket channel. The default value will be 10 seconds.\";\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the initial socket connection to be built. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the backoff resulting in a random range between 20% below and 20% above the computed value. The default value will be 127 seconds.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTY0Nw=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU0Njk0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyODo0M1rOGkQx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNzo1NFrOGl5lyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3Njg2Mg==", "bodyText": "nit: What about using retries instead of n? It may help to understand that the exponential value is computed based on the number of tries or retries.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r440676862", "createdAt": "2020-06-16T08:28:43Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public GeometricProgression(long scaleFactor, int ratio, long termMax, double jitter) {\n+        this.scaleFactor = scaleFactor;\n+        this.ratio = ratio;\n+        this.jitter = jitter;\n+        this.expMax = termMax > scaleFactor ?\n+                Math.log(termMax / (double) Math.max(scaleFactor, 1)) / Math.log(ratio) : 0;\n+    }\n+\n+    public long term(long n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NDA1OA==", "bodyText": "As we noticed in your earlier comments, the same value of attempts may correspond to different terms.\nconnection_timeout = constant * 2 ^ (attempts)\nreconnect_backoff = constant * 2 ^ (attempts - 1)\n(in KIP-580) retry_backoff = constant * 2 ^ (attempts - 1)\nSo I think using retries or attempts instead of n might also confuse people. Shall we think of another naming?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442394058", "createdAt": "2020-06-18T17:37:54Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/GeometricProgression.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An util class for exponential backoff, backoff, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class GeometricProgression {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public GeometricProgression(long scaleFactor, int ratio, long termMax, double jitter) {\n+        this.scaleFactor = scaleFactor;\n+        this.ratio = ratio;\n+        this.jitter = jitter;\n+        this.expMax = termMax > scaleFactor ?\n+                Math.log(termMax / (double) Math.max(scaleFactor, 1)) / Math.log(ratio) : 0;\n+    }\n+\n+    public long term(long n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3Njg2Mg=="}, "originalCommit": {"oid": "982957988046b5964624d29ad916de0d5d0dfab2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODI1NjQ2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToxMzo0N1rOGmN0qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToyMDo1OVrOGnN2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNTU0Nw==", "bodyText": "Can we add a javadoc for this method?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442725547", "createdAt": "2020-06-19T09:13:47Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +399,38 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3NDU4OA==", "bodyText": "Yes. Added.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443774588", "createdAt": "2020-06-22T19:20:59Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +399,38 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    public long connectionSetupTimeoutMs(String id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyNTU0Nw=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODI3OTQwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyMTo0M1rOGmODOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDoyNzowMFrOGnPyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyOTI3NA==", "bodyText": "We usually defined constants with capital letters and underscores to separate words. Moreover, we usually put defaults next to the config and the doc. We could use the following:\n\nSOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT; and\nSOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442729274", "createdAt": "2020-06-19T09:21:43Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -185,4 +191,9 @@ public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) {\n                 CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT,\n                 ClientDnsLookup.USE_ALL_DNS_IPS);\n     }\n+\n+    public class Defaults {\n+        public static final long SocketConnectionSetupTimeoutMs = 10 * 1000;\n+        public static final long SocketConnectionSetupTimeoutMaxMs = 127 * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxNDI3OQ==", "bodyText": "In KafkaConfigs alone, we separated the defaults. For this one, we should do as @dajac suggested above (similar one is DEFAULT_SECURITY_PROTOCOL).", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442814279", "createdAt": "2020-06-19T12:35:22Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -185,4 +191,9 @@ public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) {\n                 CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT,\n                 ClientDnsLookup.USE_ALL_DNS_IPS);\n     }\n+\n+    public class Defaults {\n+        public static final long SocketConnectionSetupTimeoutMs = 10 * 1000;\n+        public static final long SocketConnectionSetupTimeoutMaxMs = 127 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyOTI3NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNjM0MQ==", "bodyText": "I see. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443806341", "createdAt": "2020-06-22T20:27:00Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -185,4 +191,9 @@ public static void warnIfDeprecatedDnsLookupValue(AbstractConfig config) {\n                 CLIENT_DNS_LOOKUP_CONFIG, ClientDnsLookup.DEFAULT,\n                 ClientDnsLookup.USE_ALL_DNS_IPS);\n     }\n+\n+    public class Defaults {\n+        public static final long SocketConnectionSetupTimeoutMs = 10 * 1000;\n+        public static final long SocketConnectionSetupTimeoutMaxMs = 127 * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcyOTI3NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODI4NDYwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyMzoyMVrOGmOGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDoyOToyM1rOGnP3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDA4Nw==", "bodyText": "nit: I personally prefer the previous name. I would also rename handleTimeoutConnections to handleTimedOutConnections.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442730087", "createdAt": "2020-06-19T09:23:21Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -771,7 +794,7 @@ private void processDisconnection(List<ClientResponse> responses,\n      * @param responses The list of responses to update\n      * @param now The current time\n      */\n-    private void handleTimedOutRequests(List<ClientResponse> responses, long now) {\n+    private void handleTimeoutRequests(List<ClientResponse> responses, long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjM3MA==", "bodyText": "I agree, the previous name was better", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442812370", "createdAt": "2020-06-19T12:31:11Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -771,7 +794,7 @@ private void processDisconnection(List<ClientResponse> responses,\n      * @param responses The list of responses to update\n      * @param now The current time\n      */\n-    private void handleTimedOutRequests(List<ClientResponse> responses, long now) {\n+    private void handleTimeoutRequests(List<ClientResponse> responses, long now) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDA4Nw=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNzU1Mw==", "bodyText": "Sure. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443807553", "createdAt": "2020-06-22T20:29:23Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -771,7 +794,7 @@ private void processDisconnection(List<ClientResponse> responses,\n      * @param responses The list of responses to update\n      * @param now The current time\n      */\n-    private void handleTimedOutRequests(List<ClientResponse> responses, long now) {\n+    private void handleTimeoutRequests(List<ClientResponse> responses, long now) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDA4Nw=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODM5NTA2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOTo1ODo1MFrOGmPL5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxNTozMFrOGobncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0Nzg3Ng==", "bodyText": "I find the terminology used here not intuitive. What about using something like: initialInterval, multiplier and maxInterval? I think these are more common when it comes to configuring backoff.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442747876", "createdAt": "2020-06-19T09:58:50Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4ODY0OA==", "bodyText": "I was using the naming for geometric sequences on Wikipedia. I think your suggestion also make sense. @rajinisivaram Do you think we can use initialInterval, multiplier, and maxInterval?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443888648", "createdAt": "2020-06-23T00:03:24Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0Nzg3Ng=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NDY1MA==", "bodyText": "@rajinisivaram What do you think about the proposal?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444954650", "createdAt": "2020-06-24T14:52:43Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0Nzg3Ng=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAwNTU4NQ==", "bodyText": "Sorry, missed this earlier. Yes, I prefer initialInterval, multiplier, and maxInterval too since they fit better with  ExponentialBackoff.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445005585", "createdAt": "2020-06-24T16:04:26Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0Nzg3Ng=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0ODY5MA==", "bodyText": "Sure. Let's use this proposal.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445048690", "createdAt": "2020-06-24T17:15:30Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0Nzg3Ng=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODM5OTMzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDowMDoxMVrOGmPOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDowODo0MVrOGnU5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0ODU2NA==", "bodyText": "nit: Let me try with another suggestion ;) What about backoff(long attempts)?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442748564", "createdAt": "2020-06-19T10:00:11Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {\n+        this.scaleFactor = scaleFactor;\n+        this.ratio = ratio;\n+        this.jitter = jitter;\n+        this.expMax = termMax > scaleFactor ?\n+                Math.log(termMax / (double) Math.max(scaleFactor, 1)) / Math.log(ratio) : 0;\n+    }\n+\n+    public long term(long n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxNTc1Nw==", "bodyText": "term is non-intuitive. backoff doesn't quite fit for connection timeout, but I guess it fits with ExponentialBackoff. So unless there is a better suggestion, backoff seems reasonable.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442815757", "createdAt": "2020-06-19T12:38:31Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {\n+        this.scaleFactor = scaleFactor;\n+        this.ratio = ratio;\n+        this.jitter = jitter;\n+        this.expMax = termMax > scaleFactor ?\n+                Math.log(termMax / (double) Math.max(scaleFactor, 1)) / Math.log(ratio) : 0;\n+    }\n+\n+    public long term(long n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0ODU2NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MDExNQ==", "bodyText": "Thanks for the suggestion. Let's use the signature backoff(long attempts) for now", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443890115", "createdAt": "2020-06-23T00:08:41Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...\n+ * The formula is Term(n) = random(1 - jitter, 1 + jitter) * scaleFactor * (ratio) ^ n\n+ * If scaleFactor is greater or equal than termMax, a constant term of will be provided\n+ * This class is thread-safe\n+ */\n+public class ExponentialBackoff {\n+    private final int ratio;\n+    private final double expMax;\n+    private final long scaleFactor;\n+    private final double jitter;\n+\n+    public ExponentialBackoff(long scaleFactor, int ratio, long termMax, double jitter) {\n+        this.scaleFactor = scaleFactor;\n+        this.ratio = ratio;\n+        this.jitter = jitter;\n+        this.expMax = termMax > scaleFactor ?\n+                Math.log(termMax / (double) Math.max(scaleFactor, 1)) / Math.log(ratio) : 0;\n+    }\n+\n+    public long term(long n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0ODU2NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQwNzY4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDowMjo0OVrOGmPTmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNToyOTo1M1rOGnZ1Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0OTg1MQ==", "bodyText": "nit: I would rephrase this a bit and also explain briefly how we use it in AK (e.g. connect timeout, reconnection backoff, etc.). Also, I would suggest to terminate phrases with ..", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442749851", "createdAt": "2020-06-19T10:02:49Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDg5OA==", "bodyText": "Sure. How does it look like now?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443970898", "createdAt": "2020-06-23T05:29:53Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for exponential backoff, timeout, etc...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc0OTg1MQ=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ0NzAyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoxNjowNFrOGmPsOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoxMzo1N1rOGnU-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NjE1NA==", "bodyText": "nit: Could we define a local constant for the base 2 and reuse it everywhere?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442756154", "createdAt": "2020-06-19T10:16:04Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5MTQ0NQ==", "bodyText": "Yes. I added static class properties to make the test robust.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443891445", "createdAt": "2020-06-23T00:13:57Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NjE1NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ0OTk1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoxNzoxMFrOGmPuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1ODozNFrOGnVsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NjYyNg==", "bodyText": "nit: For the jitter, what about defining a constant like reconnectBackoffJitter?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442756626", "createdAt": "2020-06-19T10:17:10Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {\n+            connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+            assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n+            assertEquals(connectionSetupTimeoutMs * Math.pow(2, n),\n+                    connectionStates.connectionSetupTimeoutMs(nodeId1),\n+                    connectionSetupTimeoutMs * Math.pow(2, n) * 0.2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMzEzMw==", "bodyText": "Yes. I added static class properties for specifying these parameters.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443903133", "createdAt": "2020-06-23T00:58:34Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {\n+            connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+            assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n+            assertEquals(connectionSetupTimeoutMs * Math.pow(2, n),\n+                    connectionStates.connectionSetupTimeoutMs(nodeId1),\n+                    connectionSetupTimeoutMs * Math.pow(2, n) * 0.2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NjYyNg=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ1MzE0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoxODoxNFrOGmPwNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDo1OTozMFrOGnVtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NzE3Mw==", "bodyText": "nit: I would put connectionSetupTimeoutMaxMs first as it is the expected value. The same applies below.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442757173", "createdAt": "2020-06-19T10:18:14Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {\n+            connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+            assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n+            assertEquals(connectionSetupTimeoutMs * Math.pow(2, n),\n+                    connectionStates.connectionSetupTimeoutMs(nodeId1),\n+                    connectionSetupTimeoutMs * Math.pow(2, n) * 0.2);\n+            connectionStates.disconnected(nodeId1, time.milliseconds());\n+            assertFalse(connectionStates.connectingNodes().contains(nodeId1));\n+        }\n+\n+        // Check the timeout value upper bound\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        assertEquals(connectionStates.connectionSetupTimeoutMs(nodeId1), connectionSetupTimeoutMaxMs, connectionSetupTimeoutMaxMs * 0.2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwMzM2MQ==", "bodyText": "Good catch. The expected should be what you suggested. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443903361", "createdAt": "2020-06-23T00:59:30Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -321,4 +325,37 @@ public void testIsPreparingConnection() {\n         connectionStates.disconnected(nodeId1, time.milliseconds());\n         assertFalse(connectionStates.isPreparingConnection(nodeId1));\n     }\n+\n+    @Test\n+    public void testExponentialConnectionSetupTimeout() {\n+        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n+\n+        // Check the exponential timeout growth\n+        for (int n = 0; n <= Math.log((double) connectionSetupTimeoutMaxMs / connectionSetupTimeoutMs) / Math.log(2); n++) {\n+            connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+            assertTrue(connectionStates.connectingNodes().contains(nodeId1));\n+            assertEquals(connectionSetupTimeoutMs * Math.pow(2, n),\n+                    connectionStates.connectionSetupTimeoutMs(nodeId1),\n+                    connectionSetupTimeoutMs * Math.pow(2, n) * 0.2);\n+            connectionStates.disconnected(nodeId1, time.milliseconds());\n+            assertFalse(connectionStates.connectingNodes().contains(nodeId1));\n+        }\n+\n+        // Check the timeout value upper bound\n+        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n+        assertEquals(connectionStates.connectionSetupTimeoutMs(nodeId1), connectionSetupTimeoutMaxMs, connectionSetupTimeoutMaxMs * 0.2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NzE3Mw=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ3NTY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoyNTo1MVrOGmP-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNjoxNVrOGob_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDcyNg==", "bodyText": "It seems that we can remove these two and use the ones in CommonClientConfigs.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442760726", "createdAt": "2020-06-19T10:25:51Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala", "diffHunk": "@@ -205,6 +205,8 @@ object BrokerApiVersionsCommand {\n   private object AdminClient {\n     val DefaultConnectionMaxIdleMs = 9 * 60 * 1000\n     val DefaultRequestTimeoutMs = 5000\n+    val DefaultSocketConnectionSetupMs = 10 * 1000\n+    val DefaultSocketConnectionSetupMaxMs = 127 * 1000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNDEwMQ==", "bodyText": "Yes. Removed.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443934101", "createdAt": "2020-06-23T03:00:01Z", "author": {"login": "ctan888"}, "path": "core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala", "diffHunk": "@@ -205,6 +205,8 @@ object BrokerApiVersionsCommand {\n   private object AdminClient {\n     val DefaultConnectionMaxIdleMs = 9 * 60 * 1000\n     val DefaultRequestTimeoutMs = 5000\n+    val DefaultSocketConnectionSetupMs = 10 * 1000\n+    val DefaultSocketConnectionSetupMaxMs = 127 * 1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDcyNg=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NTU0MQ==", "bodyText": "Looks like the constants haven't been removed.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444945541", "createdAt": "2020-06-24T14:41:17Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala", "diffHunk": "@@ -205,6 +205,8 @@ object BrokerApiVersionsCommand {\n   private object AdminClient {\n     val DefaultConnectionMaxIdleMs = 9 * 60 * 1000\n     val DefaultRequestTimeoutMs = 5000\n+    val DefaultSocketConnectionSetupMs = 10 * 1000\n+    val DefaultSocketConnectionSetupMaxMs = 127 * 1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDcyNg=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NDc0MA==", "bodyText": "Oh, that's true. Removed them.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445054740", "createdAt": "2020-06-24T17:26:15Z", "author": {"login": "ctan888"}, "path": "core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala", "diffHunk": "@@ -205,6 +205,8 @@ object BrokerApiVersionsCommand {\n   private object AdminClient {\n     val DefaultConnectionMaxIdleMs = 9 * 60 * 1000\n     val DefaultRequestTimeoutMs = 5000\n+    val DefaultSocketConnectionSetupMs = 10 * 1000\n+    val DefaultSocketConnectionSetupMaxMs = 127 * 1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MDcyNg=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ4NDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDoyOToyMVrOGmQDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNDozMFrOGnXp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MjE2Ng==", "bodyText": "We can use the ones defined in CommonClientConfigs here.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442762166", "createdAt": "2020-06-19T10:29:21Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -88,6 +88,8 @@ object Defaults {\n   val MaxConnections: Int = Int.MaxValue\n   val ConnectionsMaxIdleMs = 10 * 60 * 1000L\n   val RequestTimeoutMs = 30000\n+  val ConnectionSetupTimeoutMs = 10 * 1000L\n+  val ConnectionSetupTimeoutMaxMs = 127 * 1000L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNTE5Mg==", "bodyText": "Yes. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443935192", "createdAt": "2020-06-23T03:04:30Z", "author": {"login": "ctan888"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -88,6 +88,8 @@ object Defaults {\n   val MaxConnections: Int = Int.MaxValue\n   val ConnectionsMaxIdleMs = 10 * 60 * 1000L\n   val RequestTimeoutMs = 30000\n+  val ConnectionSetupTimeoutMs = 10 * 1000L\n+  val ConnectionSetupTimeoutMaxMs = 127 * 1000L", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2MjE2Ng=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODQ5NDIwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/utils/ExponentialBackoffTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMDozMzowNFrOGmQKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMjo1OToyNFrOGnXlBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2Mzg0MQ==", "bodyText": "I think that it would be good to test with n=5 as well to ensure that termMax is already applied from it. Perhaps, we could do the following:\nfor (int n = 0; n <= 100; n++) {\n  if (n <= 4)\n    assertEquals(scaleFactor * Math.pow(ratio, n), exponentialBackoff.term(n),\n       scaleFactor * Math.pow(ratio, n) * jitter);\n  else\n    assertTrue(exponentialBackoff.term(1000) <= termMax * (1 + jitter));\n}", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442763841", "createdAt": "2020-06-19T10:33:04Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/ExponentialBackoffTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExponentialBackoffTest {\n+    @Test\n+    public void testExponentialBackoff() {\n+        long scaleFactor = 100;\n+        int ratio = 2;\n+        long termMax = 2000;\n+        double jitter = 0.2;\n+        ExponentialBackoff exponentialBackoff = new ExponentialBackoff(\n+                scaleFactor, ratio, termMax, jitter\n+        );\n+\n+        for (int i = 0; i <= 100; i++) {\n+            for (int n = 0; n <= 4; n++) {\n+                assertEquals(scaleFactor * Math.pow(ratio, n), exponentialBackoff.term(n),\n+                        scaleFactor * Math.pow(ratio, n) * jitter);\n+            }\n+            assertTrue(exponentialBackoff.term(1000) <= termMax * (1 + jitter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzMzk1Nw==", "bodyText": "Thanks for the suggestion. I've adopted this in my test.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443933957", "createdAt": "2020-06-23T02:59:24Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/common/utils/ExponentialBackoffTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ExponentialBackoffTest {\n+    @Test\n+    public void testExponentialBackoff() {\n+        long scaleFactor = 100;\n+        int ratio = 2;\n+        long termMax = 2000;\n+        double jitter = 0.2;\n+        ExponentialBackoff exponentialBackoff = new ExponentialBackoff(\n+                scaleFactor, ratio, termMax, jitter\n+        );\n+\n+        for (int i = 0; i <= 100; i++) {\n+            for (int n = 0; n <= 4; n++) {\n+                assertEquals(scaleFactor * Math.pow(ratio, n), exponentialBackoff.term(n),\n+                        scaleFactor * Math.pow(ratio, n) * jitter);\n+            }\n+            assertTrue(exponentialBackoff.term(1000) <= termMax * (1 + jitter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2Mzg0MQ=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc3MDI5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMjowMVrOGmS3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToxMToxMFrOGnNjtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODE1NA==", "bodyText": "the attempt number is incremented, but backoff value is not exactly incremented. I think we should leave it as updateReconnectBackoff.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442808154", "createdAt": "2020-06-19T12:22:01Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +175,15 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        incrementReconnectBackoff(nodeState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2OTc4Mg==", "bodyText": "Make sense. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443769782", "createdAt": "2020-06-22T19:11:10Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +175,15 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        incrementReconnectBackoff(nodeState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODE1NA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc3MTkwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMjozNlrOGmS4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToxMToxOFrOGnNj9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODQwNg==", "bodyText": "update instead of increment here too?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442808406", "createdAt": "2020-06-19T12:22:36Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +175,15 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        incrementReconnectBackoff(nodeState);\n+        if (nodeState.state == ConnectionState.CONNECTING) {\n+            incrementConnectionSetupTimeout(nodeState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2OTg0NA==", "bodyText": "Refactored", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443769844", "createdAt": "2020-06-22T19:11:18Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -158,9 +175,15 @@ public InetAddress currentAddress(String id) throws UnknownHostException {\n      */\n     public void disconnected(String id, long now) {\n         NodeConnectionState nodeState = nodeState(id);\n-        nodeState.state = ConnectionState.DISCONNECTED;\n         nodeState.lastConnectAttemptMs = now;\n-        updateReconnectBackoff(nodeState);\n+        incrementReconnectBackoff(nodeState);\n+        if (nodeState.state == ConnectionState.CONNECTING) {\n+            incrementConnectionSetupTimeout(nodeState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODQwNg=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc3MzE0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMzowNlrOGmS5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOToxMjowMlrOGnNlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODYxMQ==", "bodyText": "nodeState added twice?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442808611", "createdAt": "2020-06-19T12:23:06Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -300,30 +325,47 @@ public AuthenticationException authenticationException(String id) {\n      * Resets the failure count for a node and sets the reconnect backoff to the base\n      * value configured via reconnect.backoff.ms\n      *\n-     * @param nodeState The node state object to update\n+     * @param nodeState nodeState The node state object to update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3MDIwNA==", "bodyText": "Removed.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443770204", "createdAt": "2020-06-22T19:12:02Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -300,30 +325,47 @@ public AuthenticationException authenticationException(String id) {\n      * Resets the failure count for a node and sets the reconnect backoff to the base\n      * value configured via reconnect.backoff.ms\n      *\n-     * @param nodeState The node state object to update\n+     * @param nodeState nodeState The node state object to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwODYxMQ=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc4OTEwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyODoyNFrOGmTC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDowMzo0MVrOGnPEpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMTEyNA==", "bodyText": "initial socket connection  - not initial?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r442811124", "createdAt": "2020-06-19T12:28:24Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be established. If the connection is not built before the timeout elapses the network client will close the socket channel.\";\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the initial socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the backoff resulting in a random range between 20% below and 20% above the computed value.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5NDU5OA==", "bodyText": "Yes. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r443794598", "createdAt": "2020-06-22T20:03:41Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,12 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the initial socket connection to be established. If the connection is not built before the timeout elapses the network client will close the socket channel.\";\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the initial socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the backoff resulting in a random range between 20% below and 20% above the computed value.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMTEyNA=="}, "originalCommit": {"oid": "27fa1cf7a07d14ad8a2677c73b4393531fabb43c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjQxNjIwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo0Mzo1NlrOGoVcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxNDo1N1rOGobmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NzU5NA==", "bodyText": "We should be consistent with the naming above for DEFAULT_SECURITY_PROTOCOL and name this DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS. We seem to use xxx_DEFAULT in some places, but common configs here and in SslConfigs and SaslConfigs use DEFAULT_xxx, so let's stick to that.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444947594", "createdAt": "2020-06-24T14:43:56Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,14 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10 * 1000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0ODM4NA==", "bodyText": "Sure. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445048384", "createdAt": "2020-06-24T17:14:57Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,14 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10 * 1000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NzU5NA=="}, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjQxNzUzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo0NDoxNlrOGoVdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo0MDoyOFrOGocedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NzgwNA==", "bodyText": "As above, DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444947804", "createdAt": "2020-06-24T14:44:16Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,14 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10 * 1000L;\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 127 * 1000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2Mjc3Mw==", "bodyText": "Yes.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445062773", "createdAt": "2020-06-24T17:40:28Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/CommonClientConfigs.java", "diffHunk": "@@ -103,6 +103,14 @@\n         Utils.join(SecurityProtocol.names(), \", \") + \".\";\n     public static final String DEFAULT_SECURITY_PROTOCOL = \"PLAINTEXT\";\n \n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG = \"socket.connection.setup.timeout.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = \"The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10 * 1000L;\n+\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG = \"socket.connection.setup.timeout.max.ms\";\n+    public static final String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = \"The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.\";\n+    public static final Long SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 127 * 1000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0NzgwNA=="}, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjQ2ODkwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo1NDozOFrOGoV9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyNTozOFrOGob9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NjA5MA==", "bodyText": "nit: It may be better to keep them as lower case to stay inline with the other constants. Or shall we convert all the others to upper case and to static constant?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r444956090", "createdAt": "2020-06-24T14:54:38Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -40,7 +40,12 @@\n     private final MockTime time = new MockTime();\n     private final long reconnectBackoffMs = 10 * 1000;\n     private final long reconnectBackoffMax = 60 * 1000;\n-    private final double reconnectBackoffJitter = 0.2;\n+    private final long connectionSetupTimeoutMs = 10 * 1000;\n+    private final long connectionSetupTimeoutMaxMs = 127 * 1000;\n+    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;\n+    private final static double RECONNECT_BACKOFF_JITTER = 0.2;\n+    private final static int CONNECTION_SETUP_TIMEOUT_EXP_BASE = 2;\n+    private final static double CONNECTION_SETUP_TIMEOUT_JITTER = 0.2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAwODcxNQ==", "bodyText": "We can just make the constants in ClusterConnectionStates package-private and reuse them here?", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445008715", "createdAt": "2020-06-24T16:09:25Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -40,7 +40,12 @@\n     private final MockTime time = new MockTime();\n     private final long reconnectBackoffMs = 10 * 1000;\n     private final long reconnectBackoffMax = 60 * 1000;\n-    private final double reconnectBackoffJitter = 0.2;\n+    private final long connectionSetupTimeoutMs = 10 * 1000;\n+    private final long connectionSetupTimeoutMaxMs = 127 * 1000;\n+    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;\n+    private final static double RECONNECT_BACKOFF_JITTER = 0.2;\n+    private final static int CONNECTION_SETUP_TIMEOUT_EXP_BASE = 2;\n+    private final static double CONNECTION_SETUP_TIMEOUT_JITTER = 0.2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NjA5MA=="}, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NDM4Mw==", "bodyText": "Make sense. I've made them package-private and lower-cased the constants.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445054383", "createdAt": "2020-06-24T17:25:38Z", "author": {"login": "ctan888"}, "path": "clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java", "diffHunk": "@@ -40,7 +40,12 @@\n     private final MockTime time = new MockTime();\n     private final long reconnectBackoffMs = 10 * 1000;\n     private final long reconnectBackoffMax = 60 * 1000;\n-    private final double reconnectBackoffJitter = 0.2;\n+    private final long connectionSetupTimeoutMs = 10 * 1000;\n+    private final long connectionSetupTimeoutMaxMs = 127 * 1000;\n+    private final static int RECONNECT_BACKOFF_EXP_BASE = 2;\n+    private final static double RECONNECT_BACKOFF_JITTER = 0.2;\n+    private final static int CONNECTION_SETUP_TIMEOUT_EXP_BASE = 2;\n+    private final static double CONNECTION_SETUP_TIMEOUT_JITTER = 0.2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NjA5MA=="}, "originalCommit": {"oid": "3e92a0f42be128011ecda49438d67c95fbc54bbc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjgwNjQ5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MTo1NVrOGpAmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo0MjoxN1rOGpQRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NDU3Ng==", "bodyText": "nit: This can be replaced by this.nodeState(id).", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445654576", "createdAt": "2020-06-25T15:41:55Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +402,46 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    /**\n+     * Get the current socket connection setup timeout of the given node.\n+     * The base value is defined via socket.connection.setup.timeout.\n+     * @param id the connection to fetch the state for\n+     */\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        if (nodeState == null)\n+            throw new IllegalStateException(\"Connection to node \" + id + \" hasn't been initialized\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMTM0OQ==", "bodyText": "Good catch. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445911349", "createdAt": "2020-06-26T00:42:17Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +402,46 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    /**\n+     * Get the current socket connection setup timeout of the given node.\n+     * The base value is defined via socket.connection.setup.timeout.\n+     * @param id the connection to fetch the state for\n+     */\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        if (nodeState == null)\n+            throw new IllegalStateException(\"Connection to node \" + id + \" hasn't been initialized\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NDU3Ng=="}, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjgwNzc1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MjoxM1rOGpAm_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo0MjoyMVrOGpQRQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NDc4MQ==", "bodyText": "nit: You can also use this.nodeState(id) here.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445654781", "createdAt": "2020-06-25T15:42:13Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +402,46 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    /**\n+     * Get the current socket connection setup timeout of the given node.\n+     * The base value is defined via socket.connection.setup.timeout.\n+     * @param id the connection to fetch the state for\n+     */\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        if (nodeState == null)\n+            throw new IllegalStateException(\"Connection to node \" + id + \" hasn't been initialized\");\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMTM2Mw==", "bodyText": "Good catch. Refactored.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445911363", "createdAt": "2020-06-26T00:42:21Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/clients/ClusterConnectionStates.java", "diffHunk": "@@ -357,6 +402,46 @@ private NodeConnectionState nodeState(String id) {\n         return state;\n     }\n \n+    /**\n+     * Get the id set of nodes which are in CONNECTING state\n+     */\n+    public Set<String> connectingNodes() {\n+        return this.connectingNodes;\n+    }\n+\n+    /**\n+     * Get the timestamp of the latest connection attempt of a given node\n+     * @param id the connection to fetch the state for\n+     */\n+    public long lastConnectAttemptMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        return nodeState == null ? 0 : nodeState.lastConnectAttemptMs;\n+    }\n+\n+    /**\n+     * Get the current socket connection setup timeout of the given node.\n+     * The base value is defined via socket.connection.setup.timeout.\n+     * @param id the connection to fetch the state for\n+     */\n+    public long connectionSetupTimeoutMs(String id) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);\n+        if (nodeState == null)\n+            throw new IllegalStateException(\"Connection to node \" + id + \" hasn't been initialized\");\n+        return nodeState.connectionSetupTimeoutMs;\n+    }\n+\n+    /**\n+     * Test if the connection to the given node has reached its timeout\n+     * @param id the connection to fetch the state for\n+     * @param now the current time in ms\n+     */\n+    public boolean isConnectionSetupTimeout(String id, long now) {\n+        NodeConnectionState nodeState = this.nodeState.get(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NDc4MQ=="}, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjgyMjExOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0NTo0M1rOGpAwIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo0MzozMFrOGpQSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NzEyMA==", "bodyText": "Replace scaleFactor and termMax with the new terms.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445657120", "createdAt": "2020-06-25T15:45:43Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for keeping the parameters and providing the value of exponential\n+ * retry backoff, exponential reconnect backoff, exponential timeout, etc.\n+ * The formula is\n+ * Backoff(attempts) = random(1 - jitter, 1 + jitter) * initialInterval * multiplier ^ attempts\n+ * If scaleFactor is greater or equal than termMax, a constant backoff of will be provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMTYzOA==", "bodyText": "Replaced.", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445911638", "createdAt": "2020-06-26T00:43:30Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for keeping the parameters and providing the value of exponential\n+ * retry backoff, exponential reconnect backoff, exponential timeout, etc.\n+ * The formula is\n+ * Backoff(attempts) = random(1 - jitter, 1 + jitter) * initialInterval * multiplier ^ attempts\n+ * If scaleFactor is greater or equal than termMax, a constant backoff of will be provided", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NzEyMA=="}, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjgyNDE1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0NjoxMlrOGpAxfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo0NDozNVrOGpQTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NzQ3MQ==", "bodyText": "nit: The formula is -> The formula is:", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445657471", "createdAt": "2020-06-25T15:46:12Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for keeping the parameters and providing the value of exponential\n+ * retry backoff, exponential reconnect backoff, exponential timeout, etc.\n+ * The formula is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxMTkxNQ==", "bodyText": ": added", "url": "https://github.com/apache/kafka/pull/8683#discussion_r445911915", "createdAt": "2020-06-26T00:44:35Z", "author": {"login": "ctan888"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ExponentialBackoff.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * An utility class for keeping the parameters and providing the value of exponential\n+ * retry backoff, exponential reconnect backoff, exponential timeout, etc.\n+ * The formula is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NzQ3MQ=="}, "originalCommit": {"oid": "3a945cfa4eeb367394b32cc6f99a1bf107333e4b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5MTM3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NTo0OVrOGt06ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NTo0OVrOGt06ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjAyNg==", "bodyText": "@guozhangwang Thanks for reporting the exception in this code.\n@d8tltanc @dajac This code segment is unsafe, we are removing node from connectingNodes in pprocessDisconnection() while iterating over the set. We must be missing a test too (or we have a test with only one connection).", "url": "https://github.com/apache/kafka/pull/8683#discussion_r450706026", "createdAt": "2020-07-07T08:45:49Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/NetworkClient.java", "diffHunk": "@@ -786,6 +809,29 @@ private void handleAbortedSends(List<ClientResponse> responses) {\n         abortedSends.clear();\n     }\n \n+    /**\n+     * Handle socket channel connection timeout. The timeout will hit iff a connection\n+     * stays at the ConnectionState.CONNECTING state longer than the timeout value,\n+     * as indicated by ClusterConnectionStates.NodeConnectionState.\n+     *\n+     * @param responses The list of responses to update\n+     * @param now The current time\n+     */\n+    private void handleTimedOutConnections(List<ClientResponse> responses, long now) {\n+        Set<String> connectingNodes = connectionStates.connectingNodes();\n+        for (String nodeId : connectingNodes) {\n+            if (connectionStates.isConnectionSetupTimeout(nodeId, now)) {\n+                this.selector.close(nodeId);\n+                log.debug(\n+                    \"Disconnecting from node {} due to socket connection setup timeout. \" +\n+                    \"The timeout value is {} ms.\",\n+                    nodeId,\n+                    connectionStates.connectionSetupTimeoutMs(nodeId));\n+                processDisconnection(responses, nodeId, now, ChannelState.LOCAL_CLOSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a160400df526c60ce7d6550592bbafc45ecd3539"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2657, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}