{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDQxMzI1", "number": 8995, "title": "Restore stream-table duality description", "bodyText": "The stream-table duality section was dropped inadvertently sometime after version 0.11.0, so this PR restores it.", "createdAt": "2020-07-08T19:31:10Z", "url": "https://github.com/apache/kafka/pull/8995", "merged": true, "mergeCommit": {"oid": "7e668482009a9a78353915d5563c272bb5141621"}, "closed": true, "closedAt": "2020-07-09T20:50:30Z", "author": {"login": "JimGalasyn"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy_ZwjgH2gAyNDQ2NDQxMzI1OjdlNTFiNDUwYjhhZWM4NTQ0OGNmZGM1YjU4NzNiZDFmOTJiYTVkYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczUs_oAH2gAyNDQ2NDQxMzI1OjhlOTNiMGY4MjljZThmOGRiZDE4YzUzNGUxZWYxZTI4MGI3N2FhMWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e51b450b8aec85448cfdc5b5873bd1f92ba5dbb", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/apache/kafka/commit/7e51b450b8aec85448cfdc5b5873bd1f92ba5dbb", "committedDate": "2020-07-08T19:14:27Z", "message": "KSTREAMS-1417: Restore stream/table duality section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ef3581f615e0120bba8e751978523da61e6a70a", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/apache/kafka/commit/7ef3581f615e0120bba8e751978523da61e6a70a", "committedDate": "2020-07-08T19:25:15Z", "message": "Copy content from 0.11.0 branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "872d40071d3d516af16ed8b9bc2e05eaebdb4b56", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/apache/kafka/commit/872d40071d3d516af16ed8b9bc2e05eaebdb4b56", "committedDate": "2020-07-08T19:28:51Z", "message": "Delete a sentence for context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDkxNjU1", "url": "https://github.com/apache/kafka/pull/8995#pullrequestreview-445091655", "createdAt": "2020-07-08T20:07:28Z", "commit": {"oid": "872d40071d3d516af16ed8b9bc2e05eaebdb4b56"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowNzoyOFrOGu3dYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowNzoyOFrOGu3dYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5NjMyMA==", "bodyText": "Can we avoid those super long lines? Similar below.", "url": "https://github.com/apache/kafka/pull/8995#discussion_r451796320", "createdAt": "2020-07-08T20:07:28Z", "author": {"login": "mjsax"}, "path": "docs/streams/core-concepts.html", "diffHunk": "@@ -170,13 +150,59 @@ <h3><a id=\"streams_concepts_duality\" href=\"#streams-concepts-duality\">Duality of\n       or to run <a id=\"streams-developer-guide-interactive-queries\" href=\"/{{version}}/documentation/streams/developer-guide/interactive-queries#interactive-queries\">interactive queries</a>\n       against your application's latest processing results. And, beyond its internal usage, the Kafka Streams API\n       also allows developers to exploit this duality in their own applications.\n-  </p>\n+    </p>\n \n-  <p>\n+    <p>\n       Before we discuss concepts such as <a id=\"streams-developer-guide-dsl-aggregating\" href=\"/{{version}}/documentation/streams/developer-guide/dsl-api#aggregating\">aggregations</a>\n       in Kafka Streams, we must first introduce <strong>tables</strong> in more detail, and talk about the aforementioned stream-table duality.\n-      Essentially, this duality means that a stream can be viewed as a table, and a table can be viewed as a stream.\n-  </p>\n+      Essentially, this duality means that a stream can be viewed as a table, and a table can be viewed as a stream. Kafka's log compaction feature, for example, exploits this duality.\n+    </p>\n+\n+    <p>\n+        A simple form of a table is a collection of key-value pairs, also called a map or associative array. Such a table may look as follows:\n+    </p>\n+    <img class=\"centered\" src=\"/{{version}}/images/streams-table-duality-01.png\">\n+\n+    The <b>stream-table duality</b> describes the close relationship between streams and tables.\n+    <ul>\n+        <li><b>Stream as Table</b>: A stream can be considered a changelog of a table, where each data record in the stream captures a state change of the table. A stream is thus a table in disguise, and it can be easily turned into a \"real\" table by replaying the changelog from beginning to end to reconstruct the table. Similarly, in a more general analogy, aggregating data records in a stream - such as computing the total number of pageviews by user from a stream of pageview events - will return a table (here with the key and the value being the user and its corresponding pageview count, respectively).</li>\n+        <li><b>Table as Stream</b>: A table can be considered a snapshot, at a point in time, of the latest value for each key in a stream (a stream's data records are key-value pairs). A table is thus a stream in disguise, and it can be easily turned into a \"real\" stream by iterating over each key-value entry in the table.</li>\n+    </ul>\n+\n+    <p>\n+        Let's illustrate this with an example. Imagine a table that tracks the total number of pageviews by user (first column of diagram below). Over time, whenever a new pageview event is processed, the state of the table is updated accordingly. Here, the state changes between different points in time - and different revisions of the table - can be represented as a changelog stream (second column).\n+    </p>\n+    <img class=\"centered\" src=\"/{{version}}/images/streams-table-duality-02.png\" style=\"width:300px\">\n+\n+    <p>\n+        Interestingly, because of the stream-table duality, the same stream can be used to reconstruct the original table (third column):\n+    </p>\n+    <img class=\"centered\" src=\"/{{version}}/images/streams-table-duality-03.png\" style=\"width:600px\">\n+\n+    <p>\n+        The same mechanism is used, for example, to replicate databases via change data capture (CDC) and, within Kafka Streams, to replicate its so-called state stores across machines for fault-tolerance.\n+        The stream-table duality is such an important concept that Kafka Streams models it explicitly via the <a href=\"#streams_kstream_ktable\">KStream, KTable, and GlobalKTable</a> interfaces.\n+    </p>\n+\n+    <h3><a id=\"streams_concepts_aggregations\" href=\"#streams_concepts_aggregations\">Aggregations</a></h3>\n+    <p>\n+        An <strong>aggregation</strong> operation takes one input stream or table, and yields a new table by combining multiple input records into a single output record. Examples of aggregations are computing counts or sum.\n+    </p>\n+\n+    <p>\n+        In the <code>Kafka Streams DSL</code>, an input stream of an <code>aggregation</code> can be a KStream or a KTable, but the output stream will always be a KTable. This allows Kafka Streams to update an aggregate value upon the out-of-order arrival of further records after the value was produced and emitted. When such out-of-order arrival happens, the aggregating KStream or KTable emits a new aggregate value. Because the output is a KTable, the new value is considered to overwrite the old value with the same key in subsequent processing steps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872d40071d3d516af16ed8b9bc2e05eaebdb4b56"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e93b0f829ce8f8dbd18c534e1ef1e280b77aa1d", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/apache/kafka/commit/8e93b0f829ce8f8dbd18c534e1ef1e280b77aa1d", "committedDate": "2020-07-09T20:03:28Z", "message": "Add line breaks in restored content"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1208, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}