{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTk1NjQ0", "number": 8613, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1Mjo1MVrOD5BoOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNTo1OVrOD5JSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTIyMTA3OnYy", "diffSide": "LEFT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1Mjo1MVrOGQEC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowMjoyOFrOGQQETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjcwMw==", "bodyText": "This verification is only true if the two other processors haven't rebalanced before the processor that bounced last re-joins the group. If the rebalance occurs, the commonly supported version is already at 8 when the last processor joins.\nActually, the test test_version_probing_upgrade is independent of the used task assignor, but this issue was surfaced by the HighAvailabilityTaskAssignor but not by the StickyTaskAssignor. I cannot say for sure why.\nIMO, removing this verification should be OK, since afterwards we check whether the processors have synchronized generations which means that all three processors successfully joined the group in the end. The state that we do not explicitly verify anymore is the transient state where version 7 is currently used, but all processor are able to use version 8.", "url": "https://github.com/apache/kafka/pull/8613#discussion_r419496703", "createdAt": "2020-05-04T14:52:51Z", "author": {"login": "cadonna"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5MzY0NA==", "bodyText": "Thanks @cadonna ; I agree. This test should just be verifying that we first converge on 7, and then that we converge on 8.", "url": "https://github.com/apache/kafka/pull/8613#discussion_r419693644", "createdAt": "2020-05-04T20:02:28Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjcwMw=="}, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ2NDc0OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowMjo0OFrOGQQFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowMjo0OFrOGQQFAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5MzgyNw==", "bodyText": "We can actually just delete these lines now.", "url": "https://github.com/apache/kafka/pull/8613#discussion_r419693827", "createdAt": "2020-05-04T20:02:48Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -305,11 +305,11 @@ def test_version_probing_upgrade(self):\n         self.driver.disable_auto_terminate()\n         # TODO KIP-441: consider rewriting the test for HighAvailabilityTaskAssignor\n         self.processor1 = StreamsUpgradeTestJobRunnerService(self.test_context, self.kafka)\n-        self.processor1.set_config(\"internal.task.assignor.class\", \"org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignor\")\n+        self.processor1.set_config(\"internal.task.assignor.class\", \"org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ3NTE4OnYy", "diffSide": "RIGHT", "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNTo1OVrOGQQLog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowNzozMVrOGQ1fDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTUyMg==", "bodyText": "I know that this check was here in some fashion before, but I'm drawing a blank on why we need to verify this log line. It seems like just checking the version number logs and nothing else would be the key to a long and happy life.", "url": "https://github.com/apache/kafka/pull/8613#discussion_r419695522", "createdAt": "2020-05-04T20:05:59Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",\n+                        log_monitor.wait_until(\"Detected that the assignor requested a rebalance. Rejoining the consumer group to trigger a new rebalance.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyOTAyMA==", "bodyText": "I think the idea is to verify that the actual version probing rebalance takes place, ie that the partition assignor actually handles the version probing once it's detected. And that it signals to the stream thread which also handles it correctly in turn. But idk -- I've probably broken and fixed the version probing test 2 or 3 times now due to this one line in particular.\nSo, I'd be happy to see it go. I probably have too much bad history to make an unbiased call here though \ud83d\ude04", "url": "https://github.com/apache/kafka/pull/8613#discussion_r419829020", "createdAt": "2020-05-05T02:11:04Z", "author": {"login": "ableegoldman"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",\n+                        log_monitor.wait_until(\"Detected that the assignor requested a rebalance. Rejoining the consumer group to trigger a new rebalance.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTUyMg=="}, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1Mjg1Mw==", "bodyText": "We can leave it because it verifies whether the assignment was triggered in the assignor, which is better than nothing. However, it does not give us any guarantee that the rebalance took actually place.\nI guess what we really would need is a way to check if a group stabilized and if the assignment is valid. We try to do that by verifying that the generations of the processors are synced. However, I ran into cases where all processors had the same generation, but one processor did not have any tasks assigned. So we would actually need to check if they have the highest generation in sync across the processors AND if all processors have at least one task assigned (AND if all tasks were assigned).", "url": "https://github.com/apache/kafka/pull/8613#discussion_r420052853", "createdAt": "2020-05-05T11:56:36Z", "author": {"login": "cadonna"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",\n+                        log_monitor.wait_until(\"Detected that the assignor requested a rebalance. Rejoining the consumer group to trigger a new rebalance.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTUyMg=="}, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwNjcwMQ==", "bodyText": "Thanks, all. This doesn't seem like the best way to verify what we're trying to verify, but it also seems about the same as before. I'm happy to leave this here for now.\nIf/when the test breaks again, I'd prefer for us to put in a more reliable and direct mechanism.", "url": "https://github.com/apache/kafka/pull/8613#discussion_r420306701", "createdAt": "2020-05-05T18:07:31Z", "author": {"login": "vvcephei"}, "path": "tests/kafkatest/tests/streams/streams_upgrade_test.py", "diffHunk": "@@ -532,20 +532,22 @@ def do_rolling_bounce(self, processor, counter, current_generation):\n                         log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 7 and trigger new rebalance.\",\n                                                timeout_sec=60,\n                                                err_msg=\"Could not detect 'successful version probing' at upgrading node \" + str(node.account))\n-                    else:\n-                        log_monitor.wait_until(\"Sent a version 8 subscription and got version 7 assignment back (successful version probing). Downgrade subscription metadata to commonly supported version 8 and trigger new rebalance.\",\n+                        log_monitor.wait_until(\"Detected that the assignor requested a rebalance. Rejoining the consumer group to trigger a new rebalance.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTUyMg=="}, "originalCommit": {"oid": "a6e1f292b82a17bad8c1e8f249d37f869b347894"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2875, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}