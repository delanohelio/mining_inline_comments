{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjM5NzA5", "number": 8445, "title": "KAFKA-9823: Remember the sent generation for the coordinator request", "bodyText": "For join / sync / commit / heartbeat request, we would remember the sent generation in the created handler object, and then upon getting the error code, we could check whether the sent generation still matches the current generation. If not, it means that the member has already reset its generation or has participated in a new rebalance already. This means:\n\n\nFor join / sync-group request, we do not need to call reset-generation any more for illegal-generation / unknown-member. But we would still set the error since at a given time only one join/sync round-trip would be in flight, and hence we should not be participating in a new rebalance. Also for fenced instance error we still treat it as fatal since we should not be participating in a new rebalance, so this is still not expected.\n\n\nFor commit request, we do not set the corresponding error for illegal-generation / unknown-member / fenced-instance but raise rebalance-in-progress. For commit-sync it would be still thrown to user, while for commit-async it would be logged and swallowed.\n\n\nFor heartbeat request, we do not treat illegal-generation / unknown-member / fenced-instance errors and just consider it as succeeded since this should be a stale heartbeat which can be ignored.\n\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-04-08T05:39:56Z", "url": "https://github.com/apache/kafka/pull/8445", "merged": true, "mergeCommit": {"oid": "5c0fd36ee53052fa8a92dac1266fee3aaf16d7a1"}, "closed": true, "closedAt": "2020-04-23T19:25:02Z", "author": {"login": "guozhangwang"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVHjwcgH2gAyNDAwNjM5NzA5OjVlNDA0ZTJmY2RkOTQ3YTQwODdkMWE1OTkxZjk1OTU3YjNiZGRmZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca5Q0EAFqTQwMDMwNjU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e404e2fcdd947a4087d1a5991f95957b3bddfdc", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/5e404e2fcdd947a4087d1a5991f95957b3bddfdc", "committedDate": "2020-04-06T23:46:53Z", "message": "first pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5cf2e6e4fa7c4d0921df132c703ba68c84f7cef", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/c5cf2e6e4fa7c4d0921df132c703ba68c84f7cef", "committedDate": "2020-04-07T17:56:27Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8405-trigger-rebalance-with-static-member-after-sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0df8dc91fa550a5bc22978678431528c7011df35", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/0df8dc91fa550a5bc22978678431528c7011df35", "committedDate": "2020-04-07T18:57:17Z", "message": "copy-past all changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40decd96995bd0e6fb86f50cf984beca5cf9ae4", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/f40decd96995bd0e6fb86f50cf984beca5cf9ae4", "committedDate": "2020-04-07T18:57:31Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8405-trigger-rebalance-with-static-member-after-sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e1ffb000c3108bed4af134edd14dc34e8e51874", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/1e1ffb000c3108bed4af134edd14dc34e8e51874", "committedDate": "2020-04-07T20:49:44Z", "message": "remember generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29570b2e79e0ffc021f545974f3f29d39a948163", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/29570b2e79e0ffc021f545974f3f29d39a948163", "committedDate": "2020-04-08T03:54:56Z", "message": "rebase from trunk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6dbfc3e026f2ebcd9e1708c6133f1b26dc70e7", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/ea6dbfc3e026f2ebcd9e1708c6133f1b26dc70e7", "committedDate": "2020-04-08T05:25:58Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "committedDate": "2020-04-08T05:31:52Z", "message": "checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzIyMjc5", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-390322279", "createdAt": "2020-04-08T20:51:16Z", "commit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MToxNlrOGDAfgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTowMDowMlrOGDAyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNjk3OA==", "bodyText": "Why could we still survive from a fenced instance id in commit request?", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405806978", "createdAt": "2020-04-08T20:51:16Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1190,8 +1200,16 @@ public void handle(OffsetCommitResponse commitResponse, RequestFuture<Void> futu\n                             future.raise(error);\n                             return;\n                         } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                            log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                            future.raise(error);\n+                            log.info(\"OffsetCommit failed with {} due to group instance id {} fenced\", sentGeneration, rebalanceConfig.groupInstanceId);\n+\n+                            // if the generation has changed, do not raise the fatal error but rebalance-in-progress\n+                            if (generationUnchanged()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzY0OA==", "bodyText": "In other response handlers, we combine UNKNOWN_MEMBER_ID and ILLEGAL_GENERATION cases. Do you think we could also consolidate here as well?", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405807648", "createdAt": "2020-04-08T20:52:31Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1061,16 +1082,36 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 requestRejoin();\n                 future.raise(error);\n             } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} is not valid, resetting generation\", sentGeneration);\n+                    resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} is not valid, ignoring the error\", sentGeneration);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} gets fenced with group instance id {}\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} gets fenced with group instance id {}, \" +\n+                        \"ignoring the error\", sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTI2MA==", "bodyText": "Could we extract the group setup logics until the coordinator.ensureActiveGroup();, they seem to be redundant to repeat a couple of times.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405809260", "createdAt": "2020-04-08T20:55:31Z", "author": {"login": "abbccdda"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -465,6 +465,188 @@ public void testSyncGroupRequestWithFencedInstanceIdException() {\n         assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n     }\n \n+    @Test\n+    public void testJoinGroupUnknownMemberResponseWithOldGeneration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTgwNA==", "bodyText": "I don't think this generation object is protected by synchronized block.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405811804", "createdAt": "2020-04-08T21:00:02Z", "author": {"login": "abbccdda"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1135,14 +1145,14 @@ public void onComplete(Map<TopicPartition, OffsetAndMetadata> offsets, Exception\n         log.trace(\"Sending OffsetCommit request with {} to coordinator {}\", offsets, coordinator);\n \n         return client.send(coordinator, builder)\n-                .compose(new OffsetCommitResponseHandler(offsets));\n+                .compose(new OffsetCommitResponseHandler(offsets, generation));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjMxMzYx", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-393231361", "createdAt": "2020-04-14T19:29:40Z", "commit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyOTo0MVrOGFdtBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTozNjo0MlrOGFd72Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjcyNw==", "bodyText": "Not sure why we ignore fenced errors here but not in the JoinGroup/SyncGroup handlers.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408382727", "createdAt": "2020-04-14T19:29:41Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1061,16 +1082,36 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 requestRejoin();\n                 future.raise(error);\n             } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} is not valid, resetting generation\", sentGeneration);\n+                    resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} is not valid, ignoring the error\", sentGeneration);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} gets fenced with group instance id {}\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjkxMw==", "bodyText": "Yes, I agree we should try to consolidate. Looking at this handler alone, we have basically the same code for ILLEGAL_GENERATION, UNKNOWN_MEMBER_ID, and FENCED_INSTANCE_ID.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408382913", "createdAt": "2020-04-14T19:30:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1061,16 +1082,36 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 requestRejoin();\n                 future.raise(error);\n             } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} is not valid, resetting generation\", sentGeneration);\n+                    resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} is not valid, ignoring the error\", sentGeneration);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} gets fenced with group instance id {}\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} gets fenced with group instance id {}, \" +\n+                        \"ignoring the error\", sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzY0OA=="}, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MzE3Mw==", "bodyText": "Should we make these methods synchronized?", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408383173", "createdAt": "2020-04-14T19:30:31Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1449,4 +1500,12 @@ final boolean hasUnknownGeneration() {\n     final boolean hasValidMemberId() {\n         return generation != Generation.NO_GENERATION && generation.hasMemberId();\n     }\n+\n+    final void setNewGeneration(final Generation generation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NjUyMQ==", "bodyText": "Since we're accessing a local variable, I don't think we need synchronization. Note generationIfStable is synchronized though.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408386521", "createdAt": "2020-04-14T19:36:42Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1135,14 +1145,14 @@ public void onComplete(Map<TopicPartition, OffsetAndMetadata> offsets, Exception\n         log.trace(\"Sending OffsetCommit request with {} to coordinator {}\", offsets, coordinator);\n \n         return client.send(coordinator, builder)\n-                .compose(new OffsetCommitResponseHandler(offsets));\n+                .compose(new OffsetCommitResponseHandler(offsets, generation));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTgwNA=="}, "originalCommit": {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a431d3cd775cd1e627c0f75aa0558a20c79c8b3d", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/a431d3cd775cd1e627c0f75aa0558a20c79c8b3d", "committedDate": "2020-04-15T18:13:47Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c37e9f7aebc655350052ec1e1ac940e6ec018d12", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/c37e9f7aebc655350052ec1e1ac940e6ec018d12", "committedDate": "2020-04-15T19:03:05Z", "message": "github comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "committedDate": "2020-04-15T22:29:19Z", "message": "minor refacotring on unit tests and github comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MjUxNjM4", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-394251638", "createdAt": "2020-04-16T02:07:20Z", "commit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjowNzoyMFrOGGR6HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjoxMzoxMFrOGGSAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzODA0NA==", "bodyText": "Hey @guozhangwang.\nTrying to understand if any of these changes have implications for the WorkerCoordinator too.\nWhat I've observed is that if the WorkerCoordinator fails to receive a valid SyncGroup request, it may miss several generations until it succeeds again. Is the branch here safe? resetGenerationOnResponseError will be called (and therefore rejoin will be requested) only if generationUnchanged returns true. Is there any risk that we suppress any useful retries to rejoin?", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409238044", "createdAt": "2020-04-16T02:07:20Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -737,16 +751,21 @@ public void handle(SyncGroupResponse syncResponse,\n                     log.debug(\"SyncGroup failed because the group began another rebalance\");\n                     future.raise(error);\n                 } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                    log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                    // for sync-group request, even if the generation has changed we would not expect the instance id\n+                    // gets fenced, and hence we always treat this as a fatal error\n+                    log.error(\"SyncGroup failed with {} due to group.instance.id {} gets fenced\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n                     future.raise(error);\n                 } else if (error == Errors.UNKNOWN_MEMBER_ID\n                         || error == Errors.ILLEGAL_GENERATION) {\n-                    log.debug(\"SyncGroup failed: {}\", error.message());\n-                    resetGenerationOnResponseError(ApiKeys.SYNC_GROUP, error);\n+                    log.info(\"SyncGroup failed with {}: {}, would request re-join\", sentGeneration, error.message());\n+                    if (generationUnchanged())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzOTY2OQ==", "bodyText": "nit: would request re-join or will request re-join?\nMore importantly the log message is outside of the if branch below. But if generationUnchanged() is false, then re-join won't be requested, at least not by calling resetGenerationOnResponseError -> resetGeneration -> rejoinNeeded = true;. a) is that safe (as I ask below) b) is the log message printed accurate if there's a chance that re-join is not requested (accuracy of log messages is very crucial here, because usually that's all we have when troubleshooting rebalances).", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409239669", "createdAt": "2020-04-16T02:13:10Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -737,16 +751,21 @@ public void handle(SyncGroupResponse syncResponse,\n                     log.debug(\"SyncGroup failed because the group began another rebalance\");\n                     future.raise(error);\n                 } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                    log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                    // for sync-group request, even if the generation has changed we would not expect the instance id\n+                    // gets fenced, and hence we always treat this as a fatal error\n+                    log.error(\"SyncGroup failed with {} due to group.instance.id {} gets fenced\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n                     future.raise(error);\n                 } else if (error == Errors.UNKNOWN_MEMBER_ID\n                         || error == Errors.ILLEGAL_GENERATION) {\n-                    log.debug(\"SyncGroup failed: {}\", error.message());\n-                    resetGenerationOnResponseError(ApiKeys.SYNC_GROUP, error);\n+                    log.info(\"SyncGroup failed with {}: {}, would request re-join\", sentGeneration, error.message());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDQyODI0", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-395042824", "createdAt": "2020-04-16T22:28:19Z", "commit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjoyODoxOVrOGG5Zdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0MToyMlrOGG5sjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTA0Ng==", "bodyText": "If the consumer has been legitimately fenced, is it safe to rejoin the group after resetting the member id? Would that not lead to a ping-pong scenario?", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409885046", "createdAt": "2020-04-16T22:28:19Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1060,17 +1081,20 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 log.info(\"Attempt to heartbeat failed since group is rebalancing\");\n                 requestRejoin();\n                 future.raise(error);\n-            } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n-            } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n-            } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+            } else if (error == Errors.ILLEGAL_GENERATION ||\n+                       error == Errors.UNKNOWN_MEMBER_ID ||\n+                       error == Errors.FENCED_INSTANCE_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODA0NQ==", "bodyText": "nit: can fix the grammar a little\n\nAttempt to join group with generation {} failed because the group instance id {} has been fenced by another instance.\n\nSimilarly for a couple below", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409888045", "createdAt": "2020-04-16T22:36:16Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -617,7 +624,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n                 log.debug(\"Attempt to join group failed due to obsolete coordinator information: {}\", error.message());\n                 future.raise(error);\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                // for join-group request, even if the generation has changed we would not expect the instance id\n+                // gets fenced, and hence we always treat this as a fatal error\n+                log.error(\"Attempt to join group failed due to group instance id {} gets fenced with {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODkyNw==", "bodyText": "nit: seems the original was a little more accurate? The response did not fail; it just contained an error indicating the request had failed.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409888927", "createdAt": "2020-04-16T22:38:43Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1013,10 +1036,10 @@ public void handle(LeaveGroupResponse leaveResponse, RequestFuture<Void> future)\n \n             final Errors error = leaveResponse.error();\n             if (error == Errors.NONE) {\n-                log.debug(\"LeaveGroup request returned successfully\");\n+                log.debug(\"LeaveGroup response with {} returned successfully: {}\", sentGeneration, response);\n                 future.complete(null);\n             } else {\n-                log.error(\"LeaveGroup request failed with error: {}\", error.message());\n+                log.error(\"LeaveGroup response with {} failed with error: {}\", sentGeneration, error.message());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTkzNA==", "bodyText": "nit: Could we just use the error code in this message? Otherwise we get weird messages like this\n\nAttempt to heartbeat failed with generation .. due to The coordinator is not aware of this member, resetting generation.", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409889934", "createdAt": "2020-04-16T22:41:22Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1060,17 +1081,20 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 log.info(\"Attempt to heartbeat failed since group is rebalancing\");\n                 requestRejoin();\n                 future.raise(error);\n-            } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n-            } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n-            } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+            } else if (error == Errors.ILLEGAL_GENERATION ||\n+                       error == Errors.UNKNOWN_MEMBER_ID ||\n+                       error == Errors.FENCED_INSTANCE_ID) {\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed with generation {} and group instance id {} due to {}, resetting generation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e32dc60147706ec00e1e07f5853f8d49120d3b00", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/e32dc60147706ec00e1e07f5853f8d49120d3b00", "committedDate": "2020-04-16T22:57:50Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2793e1eee6d0018ed9858aa20094783456844a17", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/2793e1eee6d0018ed9858aa20094783456844a17", "committedDate": "2020-04-17T18:11:11Z", "message": "github comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDk4NjIw", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-398498620", "createdAt": "2020-04-22T19:14:30Z", "commit": {"oid": "2793e1eee6d0018ed9858aa20094783456844a17"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNDozMFrOGKG00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNDozMFrOGKG00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDc3MA==", "bodyText": "nit: after.. what? I think you can drop \"in time after.\" Here is the assertion that is used:\n            assertThat(\"Condition not met within timeout \" + maxWaitMs + \". \" + conditionDetails,\n                testCondition.conditionMet());", "url": "https://github.com/apache/kafka/pull/8445#discussion_r413250770", "createdAt": "2020-04-22T19:14:30Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -466,24 +477,193 @@ public void testSyncGroupRequestWithFencedInstanceIdException() {\n     }\n \n     @Test\n-    public void testHeartbeatUnknownMemberResponseDuringRebalancing() throws InterruptedException {\n+    public void testJoinGroupUnknownMemberResponseWithOldGeneration() throws InterruptedException {\n         setupCoordinator();\n-        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n+        joinGroup();\n \n-        final int generation = 1;\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n \n-        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.NONE));\n-        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n+        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n \n-        coordinator.ensureActiveGroup();\n+        TestUtils.waitForCondition(() -> !mockClient.requests().isEmpty(), 2000,\n+            \"The join-group request was not sent in time after\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2793e1eee6d0018ed9858aa20094783456844a17"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6240896f7a1691b882d6de1d9d9821bdadc6806", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/c6240896f7a1691b882d6de1d9d9821bdadc6806", "committedDate": "2020-04-23T18:30:14Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c", "author": {"user": {"login": "guozhangwang", "name": "Guozhang Wang"}}, "url": "https://github.com/apache/kafka/commit/fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c", "committedDate": "2020-04-23T18:32:16Z", "message": "github comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzA2NTY4", "url": "https://github.com/apache/kafka/pull/8445#pullrequestreview-400306568", "createdAt": "2020-04-24T22:31:04Z", "commit": {"oid": "fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjozMTowNFrOGLraWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjozMTowNFrOGLraWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng==", "bodyText": "This seems a bit misleading, because the consumer is not actually participating in an ongoing rebalance (yet)", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414898776", "createdAt": "2020-04-24T22:31:04Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1209,9 +1227,18 @@ public void handle(OffsetCommitResponse commitResponse, RequestFuture<Void> futu\n                             return;\n                         } else if (error == Errors.UNKNOWN_MEMBER_ID\n                                 || error == Errors.ILLEGAL_GENERATION) {\n-                            // need to reset generation and re-join group\n-                            resetGenerationOnResponseError(ApiKeys.OFFSET_COMMIT, error);\n-                            future.raise(new CommitFailedException());\n+                            log.info(\"OffsetCommit failed with {}: {}\", sentGeneration, error.message());\n+\n+                            // only need to reset generation and re-join group if generation has not changed;\n+                            // otherwise only raise rebalance-in-progress error\n+                            if (generationUnchanged()) {\n+                                resetGenerationOnResponseError(ApiKeys.OFFSET_COMMIT, error);\n+                                future.raise(new CommitFailedException());\n+                            } else {\n+                                future.raise(new RebalanceInProgressException(\"Offset commit cannot be completed since the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1417, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}