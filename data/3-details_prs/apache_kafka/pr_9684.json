{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMjAxMjE5", "number": 9684, "title": "KAFKA-10764: Add support for returning topic IDs on create, supplying topic IDs for delete", "bodyText": "Updated CreateTopicResponse, DeleteTopicsRequest/Response and added some new AdminClient methods and classes. Now the newly created topic ID will be returned in CreateTopicsResult and found in TopicAndMetadataConfig, and topics can be deleted by supplying topic IDs through deleteTopicsWithIds which will return DeleteTopicsWithIdsResult.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-12-04T00:19:12Z", "url": "https://github.com/apache/kafka/pull/9684", "merged": true, "mergeCommit": {"oid": "4f588f7ca2a1c5e8dd845863da81425ac69bac92"}, "closed": true, "closedAt": "2021-01-29T19:40:16Z", "author": {"login": "jolshan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh9inIgH2gAyNTMyMjAxMjE5OmY5ODMyNTZkNWJhZTFjMzU0YmZiMGZiODRlZThmMDhmZjQ5ODk4OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0wIaqAH2gAyNTMyMjAxMjE5OjQ2YjEwOWRhNDQ1YTVhMmQ1MTA5NmM0MDMzMzM0ZTNhZWI0MmE1NmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f983256d5bae1c354bfb0fb84ee8f08ff4989896", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/f983256d5bae1c354bfb0fb84ee8f08ff4989896", "committedDate": "2020-12-01T17:38:45Z", "message": "Returns topic ID in CreateTopicsResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b14ab47fe4ef3b7b0418ab125eda17ebc96e506", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/8b14ab47fe4ef3b7b0418ab125eda17ebc96e506", "committedDate": "2020-12-03T22:31:10Z", "message": "DeleteTopicsRequest allows for specifying topic IDs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e", "committedDate": "2020-12-04T00:11:19Z", "message": "Fix some typos, correctly add/remove topic Ids in MockAdminClient, fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTY4Mzg3", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-544568387", "createdAt": "2020-12-04T00:22:19Z", "commit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyMjoxOVrOH-7NqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyMjoxOVrOH-7NqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MzkxMg==", "bodyText": "If going to ZK here is too slow, another option is to provide a callback to adminManager.createTopics which can be called after createTopicWithAssignment. This callback would add the topic ID to the result. The idea is that createTopicWithAssignment (and writeTopicPartitionAssignment) would return the topic ID to avoid an extra call to ZK. I wasn't sure which option was better.", "url": "https://github.com/apache/kafka/pull/9684#discussion_r535743912", "createdAt": "2020-12-04T00:22:19Z", "author": {"login": "jolshan"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1896,6 +1896,11 @@ class KafkaApis(val requestChannel: RequestChannel,\n               .setTopicConfigErrorCode(Errors.NONE.code)\n           }\n         }\n+        val topicIds = zkClient.getTopicIdsForTopics(results.asScala.map(result => result.name()).toSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTY4Nzkz", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-556568793", "createdAt": "2020-12-21T18:08:04Z", "commit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODowODowNFrOIJhPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODowODowNFrOIJhPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw==", "bodyText": "I noticed all these comments say \"If broker version doesn't support replication factor in the response...\" should each actually say whatever the method is returning (numPartitions, topicId, etc.)", "url": "https://github.com/apache/kafka/pull/9684#discussion_r546852777", "createdAt": "2020-12-21T18:08:04Z", "author": {"login": "jolshan"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -68,6 +69,19 @@ protected CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> fu\n         return futures.get(topic).thenApply(TopicMetadataAndConfig::config);\n     }\n \n+    /**\n+     * Returns a future that provides topic ID for the topic when the request completes.\n+     * <p>\n+     * If broker version doesn't support replication factor in the response, throw\n+     * {@link org.apache.kafka.common.errors.UnsupportedVersionException}.\n+     * If broker returned an error for topic configs, throw appropriate exception. For example,\n+     * {@link org.apache.kafka.common.errors.TopicAuthorizationException} is thrown if user does not\n+     * have permission to describe topic configs.\n+     */\n+    public KafkaFuture<Uuid> topicId(String topic) {\n+        return futures.get(topic).thenApply(TopicMetadataAndConfig::topicId);\n+    }\n+    \n     /**\n      * Returns a future that provides number of partitions in the topic when the request completes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "committedDate": "2020-12-22T19:29:50Z", "message": "Fixes to json files and handling in KafkaApis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjE4MTU0", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-560618154", "createdAt": "2021-01-02T03:18:56Z", "commit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQwMzoxODo1NlrOINUafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQwMzo1OToxOVrOINUlWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNjg2Mg==", "bodyText": "nit: getDataResponses.map(xxx).filter(.isDefined).map(.get) can be replaced by getDataResponses.flatMap(xxx)", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550836862", "createdAt": "2021-01-02T03:18:56Z", "author": {"login": "dengziming"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -621,10 +621,10 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n         case Code.NONODE => None\n         case _ => throw getDataResponse.resultException.get\n       }\n-    }.map(_.get)\n-      .map(topicIdAssignment => (topicIdAssignment.topic,\n-        topicIdAssignment.topicId.getOrElse(\n-          throw new IllegalStateException(\"Topic \" + topicIdAssignment.topic + \" does not have a topic ID.\"))))\n+    }.filter(_.isDefined)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNjk5MA==", "bodyText": "Why is topic name nullable but topicId not? do you mean we will fill all delete requests with a topicId before sending a request?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550836990", "createdAt": "2021-01-02T03:21:41Z", "author": {"login": "dengziming"}, "path": "clients/src/main/resources/common/message/DeleteTopicsRequest.json", "diffHunk": "@@ -23,10 +23,17 @@\n   //\n   // Version 5 adds ErrorMessage in the response and may return a THROTTLING_QUOTA_EXCEEDED error\n   // in the response if the topics deletion is throttled (KIP-599).\n-  \"validVersions\": \"0-5\",\n+  //\n+  // Version 6 reorganizes topics, adds topic IDs and allows topic names to be null.\n+  \"validVersions\": \"0-6\",\n   \"flexibleVersions\": \"4+\",\n   \"fields\": [\n-    { \"name\": \"TopicNames\", \"type\": \"[]string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n+    { \"name\": \"Topics\", \"type\": \"[]DeleteTopicState\", \"versions\": \"6+\", \"about\": \"The name or topic ID of the topic\",\n+      \"fields\": [\n+        {\"name\": \"Name\", \"type\": \"string\", \"versions\": \"6+\", \"nullableVersions\": \"6+\", \"about\": \"The topic name\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzE0Ng==", "bodyText": "Should this be UnknownTopicIdException?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837146", "createdAt": "2021-01-02T03:24:08Z", "author": {"login": "dengziming"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1623,6 +1625,32 @@ public DeleteTopicsResult deleteTopics(final Collection<String> topicNames,\n         return new DeleteTopicsResult(new HashMap<>(topicFutures));\n     }\n \n+    @Override\n+    public DeleteTopicsWithIdsResult deleteTopicsWithIds(final Collection<Uuid> topicIds,\n+                                           final DeleteTopicsOptions options) {\n+        final Map<Uuid, KafkaFutureImpl<Void>> topicFutures = new HashMap<>(topicIds.size());\n+        final List<Uuid> validTopicIds = new ArrayList<>(topicIds.size());\n+        for (Uuid topicId : topicIds) {\n+            if (topicId.equals(Uuid.ZERO_UUID)) {\n+                KafkaFutureImpl<Void> future = new KafkaFutureImpl<>();\n+                future.completeExceptionally(new InvalidTopicException(\"The given topic ID '\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzI3OA==", "bodyText": "here we'd better use result.topicId() since we are using topicId.", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837278", "createdAt": "2021-01-02T03:25:53Z", "author": {"login": "dengziming"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1694,6 +1722,79 @@ void handleFailure(Throwable throwable) {\n             }\n         };\n     }\n+   \n+    private Call getDeleteTopicsWithIdsCall(final DeleteTopicsOptions options,\n+                                     final Map<Uuid, KafkaFutureImpl<Void>> futures,\n+                                     final List<Uuid> topicIds,\n+                                     final Map<Uuid, ThrottlingQuotaExceededException> quotaExceededExceptions,\n+                                     final long now,\n+                                     final long deadline) {\n+        return new Call(\"deleteTopics\", deadline, new ControllerNodeProvider()) {\n+            @Override\n+            DeleteTopicsRequest.Builder createRequest(int timeoutMs) {\n+                return new DeleteTopicsRequest.Builder(\n+                        new DeleteTopicsRequestData()\n+                                .setTopics(topicIds.stream().map(\n+                                    topic -> new DeleteTopicState().setTopicId(topic)).collect(Collectors.toList()))\n+                                .setTimeoutMs(timeoutMs));\n+            }\n+\n+            @Override\n+            void handleResponse(AbstractResponse abstractResponse) {\n+                // Check for controller change\n+                handleNotControllerError(abstractResponse);\n+                // Handle server responses for particular topics.\n+                final DeleteTopicsResponse response = (DeleteTopicsResponse) abstractResponse;\n+                final List<Uuid> retryTopics = new ArrayList<>();\n+                final Map<Uuid, ThrottlingQuotaExceededException> retryTopicQuotaExceededExceptions = new HashMap<>();\n+                for (DeletableTopicResult result : response.data().responses()) {\n+                    KafkaFutureImpl<Void> future = futures.get(result.topicId());\n+                    if (future == null) {\n+                        log.warn(\"Server response mentioned unknown topic {}\", result.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzc2OA==", "bodyText": "if topic.name() == null, a NEP will throw here.", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837768", "createdAt": "2021-01-02T03:33:30Z", "author": {"login": "dengziming"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/DeleteTopicsRequest.java", "diffHunk": "@@ -39,8 +45,25 @@ public Builder(DeleteTopicsRequestData data) {\n \n         @Override\n         public DeleteTopicsRequest build(short version) {\n+            if (version >= 6 && data.topicNames().size() != 0) {\n+                data.setTopics(groupByTopic(data.topicNames()));\n+            } else if (version >= 6) {\n+                for (DeleteTopicState topic : data.topics()) {\n+                    if (topic.name().equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzODE3Mw==", "bodyText": "Here could we use controllerContext since createTopicRep is handled at the active controller.", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550838173", "createdAt": "2021-01-02T03:38:36Z", "author": {"login": "dengziming"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1896,6 +1896,11 @@ class KafkaApis(val requestChannel: RequestChannel,\n               .setTopicConfigErrorCode(Errors.NONE.code)\n           }\n         }\n+        val topicIds = zkClient.getTopicIdsForTopics(results.asScala.map(result => result.name()).toSet)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MzkxMg=="}, "originalCommit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzOTY0Mw==", "bodyText": "According to the kip, we will use topicId firstly and topic name will be used only if topicId is ZERO, but you just use the topic name even topicId is not ZERO here?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550839643", "createdAt": "2021-01-02T03:59:19Z", "author": {"login": "dengziming"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1981,29 +1986,39 @@ class KafkaApis(val requestChannel: RequestChannel,\n     val results = new DeletableTopicResultCollection(deleteTopicRequest.data.topicNames.size)\n     val toDelete = mutable.Set[String]()\n     if (!controller.isActive) {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(Errors.NOT_CONTROLLER.code))\n       }\n       sendResponseCallback(results)\n     } else if (!config.deleteTopicEnable) {\n       val error = if (request.context.apiVersion < 3) Errors.INVALID_REQUEST else Errors.TOPIC_DELETION_DISABLED\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(error.code))\n       }\n       sendResponseCallback(results)\n     } else {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n+        val name = if (topic.name() != null) topic.name() ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2ebfbd4a77d290526a680a7b6b6d8730926d4b", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/7f2ebfbd4a77d290526a680a7b6b6d8730926d4b", "committedDate": "2021-01-05T02:19:38Z", "message": "Addressed comments, added handling for older IBPs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4489573eb59577123bc6bd98b4b844c346b0eeb6", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/4489573eb59577123bc6bd98b4b844c346b0eeb6", "committedDate": "2021-01-05T16:40:33Z", "message": "Merge branch 'trunk' into KAFKA-10764"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a4c99dda8dcfa81c99c1531393e4662f30a28af", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/3a4c99dda8dcfa81c99c1531393e4662f30a28af", "committedDate": "2021-01-05T02:53:10Z", "message": "fix build failures"}, "afterCommit": {"oid": "4489573eb59577123bc6bd98b4b844c346b0eeb6", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/4489573eb59577123bc6bd98b4b844c346b0eeb6", "committedDate": "2021-01-05T16:40:33Z", "message": "Merge branch 'trunk' into KAFKA-10764"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a56cc363a9dec14789332acec891c57ce020d6", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/f1a56cc363a9dec14789332acec891c57ce020d6", "committedDate": "2021-01-06T00:42:10Z", "message": "Added to a simple createtopics request test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTE3MzE1", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-562917315", "createdAt": "2021-01-06T17:50:15Z", "commit": {"oid": "7f2ebfbd4a77d290526a680a7b6b6d8730926d4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzo1MDoxNVrOIPPqcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzo1MDoxNVrOIPPqcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1NjE3Ng==", "bodyText": "This is incorrect. Should be removed until 2.8 PR is added.", "url": "https://github.com/apache/kafka/pull/9684#discussion_r552856176", "createdAt": "2021-01-06T17:50:15Z", "author": {"login": "jolshan"}, "path": "core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala", "diffHunk": "@@ -132,6 +133,25 @@ class DeleteTopicsRequestTest extends BaseRequestTest {\n     validateTopicIsDeleted(timeoutTopic)\n   }\n \n+  @Test\n+  def testErrorDeleteTopicRequestsOnOldVersions(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2ebfbd4a77d290526a680a7b6b6d8730926d4b"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aab886f53db5d58bf45cd15f86c425ba185c2f23", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/aab886f53db5d58bf45cd15f86c425ba185c2f23", "committedDate": "2021-01-06T18:40:51Z", "message": "Removed incorrect test"}, "afterCommit": {"oid": "afe594afbe39bc4d61d1be947a5568cbb7e34d57", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/afe594afbe39bc4d61d1be947a5568cbb7e34d57", "committedDate": "2021-01-06T21:38:32Z", "message": "Removed incorrect test and added error message to clarify unsupported version exception\n Please enter the commit message for your changes. Lines starting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "committedDate": "2021-01-06T21:44:37Z", "message": "Removed incorrect test and added error message to clarify unsupported version exception"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afe594afbe39bc4d61d1be947a5568cbb7e34d57", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/afe594afbe39bc4d61d1be947a5568cbb7e34d57", "committedDate": "2021-01-06T21:38:32Z", "message": "Removed incorrect test and added error message to clarify unsupported version exception\n Please enter the commit message for your changes. Lines starting"}, "afterCommit": {"oid": "0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "committedDate": "2021-01-06T21:44:37Z", "message": "Removed incorrect test and added error message to clarify unsupported version exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ef75850d8807dd835cbd4715a60cacdc9c1cc4", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/f2ef75850d8807dd835cbd4715a60cacdc9c1cc4", "committedDate": "2021-01-21T19:14:45Z", "message": "Merge branch 'trunk' of github.com:apache/kafka into KAFKA-10764"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/40175b371eca4e00b862d127786aece1e5fef02b", "committedDate": "2021-01-21T22:16:58Z", "message": "Cleanups, added tests for older IBP version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODAyMjE0", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-576802214", "createdAt": "2021-01-26T22:06:33Z", "commit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjowNjozM1rOIast4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowMjowNlrOIauhgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2NjUzMA==", "bodyText": "In the create result, we wouldn't see UnsupportedVersionException for topicId() just because topic ids are not enabled, would we?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564866530", "createdAt": "2021-01-26T22:06:33Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -68,6 +69,19 @@ protected CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> fu\n         return futures.get(topic).thenApply(TopicMetadataAndConfig::config);\n     }\n \n+    /**\n+     * Returns a future that provides topic ID for the topic when the request completes.\n+     * <p>\n+     * If broker version doesn't support replication factor in the response, throw\n+     * {@link org.apache.kafka.common.errors.UnsupportedVersionException}.\n+     * If broker returned an error for topic configs, throw appropriate exception. For example,\n+     * {@link org.apache.kafka.common.errors.TopicAuthorizationException} is thrown if user does not\n+     * have permission to describe topic configs.\n+     */\n+    public KafkaFuture<Uuid> topicId(String topic) {\n+        return futures.get(topic).thenApply(TopicMetadataAndConfig::topicId);\n+    }\n+    \n     /**\n      * Returns a future that provides number of partitions in the topic when the request completes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw=="}, "originalCommit": {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2Nzg4Mw==", "bodyText": "nit: indentation", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564867883", "createdAt": "2021-01-26T22:09:12Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1625,6 +1628,32 @@ public DeleteTopicsResult deleteTopics(final Collection<String> topicNames,\n         return new DeleteTopicsResult(new HashMap<>(topicFutures));\n     }\n \n+    @Override\n+    public DeleteTopicsWithIdsResult deleteTopicsWithIds(final Collection<Uuid> topicIds,\n+                                           final DeleteTopicsOptions options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2OTUyNw==", "bodyText": "nit: indentation", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564869527", "createdAt": "2021-01-26T22:12:30Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1696,6 +1725,79 @@ void handleFailure(Throwable throwable) {\n             }\n         };\n     }\n+   \n+    private Call getDeleteTopicsWithIdsCall(final DeleteTopicsOptions options,\n+                                     final Map<Uuid, KafkaFutureImpl<Void>> futures,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg3MjIzOQ==", "bodyText": "nit: isEmpty() instead of .size()?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564872239", "createdAt": "2021-01-26T22:17:50Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/DeleteTopicsRequest.java", "diffHunk": "@@ -36,8 +42,25 @@ public Builder(DeleteTopicsRequestData data) {\n \n         @Override\n         public DeleteTopicsRequest build(short version) {\n+            if (version >= 6 && data.topicNames().size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg3NjkwOA==", "bodyText": "IBP < 2.8 for UNSUPPORTED_VERSION?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564876908", "createdAt": "2021-01-26T22:27:14Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/resources/common/message/DeleteTopicsResponse.json", "diffHunk": "@@ -27,15 +27,20 @@\n   //\n   // Version 5 adds ErrorMessage in the response and may return a THROTTLING_QUOTA_EXCEEDED error\n   // in the response if the topics deletion is throttled (KIP-599).\n-  \"validVersions\": \"0-5\",\n+  //\n+  // Version 6 adds topic ID to responses. An UNSUPPORTED_VERSION error code will be returned when attempting to\n+  // delete using topic IDs when IBP > 2.8. UNKNOWN_TOPIC_ID error code will be returned when IBP is at least 2.8, but", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg3ODk5OQ==", "bodyText": "Doesn't really matter for this test, but perhaps we could use UNKNOWN_TOPIC_ID (multiple tests below)?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564878999", "createdAt": "2021-01-26T22:31:07Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -919,6 +973,36 @@ public void testDeleteTopicsRetryThrottlingExceptionWhenEnabled() throws Excepti\n             assertNull(result.values().get(\"topic1\").get());\n             assertNull(result.values().get(\"topic2\").get());\n             TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n+            \n+            // With topic IDs\n+            Uuid topicId1 = Uuid.randomUuid();\n+            Uuid topicId2 = Uuid.randomUuid();\n+            Uuid topicId3 = Uuid.randomUuid();\n+            \n+            env.kafkaClient().prepareResponse(\n+                    expectDeleteTopicsRequestWithTopicIds(topicId1, topicId2, topicId3),\n+                    prepareDeleteTopicsResponse(1000,\n+                            deletableTopicResultWithId(topicId1, Errors.NONE),\n+                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED),\n+                            deletableTopicResultWithId(topicId3, Errors.TOPIC_ALREADY_EXISTS)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4MzgzNg==", "bodyText": "Can't we populate topic id in AdminManager similar to other metadata in the result?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564883836", "createdAt": "2021-01-26T22:40:37Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1843,6 +1843,8 @@ class KafkaApis(val requestChannel: RequestChannel,\n               .setNumPartitions(-1)\n               .setReplicationFactor(-1)\n               .setTopicConfigErrorCode(Errors.NONE.code)\n+          } else {\n+            result.setTopicId(controller.controllerContext.topicIds.getOrElse(result.name(), Uuid.ZERO_UUID))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4NTcxNA==", "bodyText": "We can move this one line above and use topicIdSpecified  in the line above", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564885714", "createdAt": "2021-01-26T22:44:37Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1930,29 +1932,43 @@ class KafkaApis(val requestChannel: RequestChannel,\n     val results = new DeletableTopicResultCollection(deleteTopicRequest.data.topicNames.size)\n     val toDelete = mutable.Set[String]()\n     if (!controller.isActive) {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(Errors.NOT_CONTROLLER.code))\n       }\n       sendResponseCallback(results)\n     } else if (!config.deleteTopicEnable) {\n       val error = if (request.context.apiVersion < 3) Errors.INVALID_REQUEST else Errors.TOPIC_DELETION_DISABLED\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(error.code))\n       }\n       sendResponseCallback(results)\n     } else {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n+        val name = if (topic.topicId().equals(Uuid.ZERO_UUID)) topic.name()\n+          else controller.controllerContext.topicNames.getOrElse(topic.topicId(), null)\n         results.add(new DeletableTopicResult()\n-          .setName(topic))\n+          .setName(name)\n+          .setTopicId(topic.topicId()))\n       }\n       val authorizedTopics = authHelper.filterByAuthorized(request.context, DELETE, TOPIC,\n         results.asScala)(_.name)\n       results.forEach { topic =>\n-         if (!authorizedTopics.contains(topic.name))\n+         val foundTopicId = !topic.topicId().equals(Uuid.ZERO_UUID) && topic.name() != null\n+         val topicIdSpecified = !topic.topicId().equals(Uuid.ZERO_UUID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4NjA3OA==", "bodyText": "We can use topic.topicId == Uuid.ZERO_UUID in Scala instead of equals. (a couple of places below too)", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564886078", "createdAt": "2021-01-26T22:45:25Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1930,29 +1932,43 @@ class KafkaApis(val requestChannel: RequestChannel,\n     val results = new DeletableTopicResultCollection(deleteTopicRequest.data.topicNames.size)\n     val toDelete = mutable.Set[String]()\n     if (!controller.isActive) {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(Errors.NOT_CONTROLLER.code))\n       }\n       sendResponseCallback(results)\n     } else if (!config.deleteTopicEnable) {\n       val error = if (request.context.apiVersion < 3) Errors.INVALID_REQUEST else Errors.TOPIC_DELETION_DISABLED\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(error.code))\n       }\n       sendResponseCallback(results)\n     } else {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n+        val name = if (topic.topicId().equals(Uuid.ZERO_UUID)) topic.name()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg4ODg3Ng==", "bodyText": "What happens if both topic id and topic name are provided in the request?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564888876", "createdAt": "2021-01-26T22:50:52Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1930,29 +1932,43 @@ class KafkaApis(val requestChannel: RequestChannel,\n     val results = new DeletableTopicResultCollection(deleteTopicRequest.data.topicNames.size)\n     val toDelete = mutable.Set[String]()\n     if (!controller.isActive) {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(Errors.NOT_CONTROLLER.code))\n       }\n       sendResponseCallback(results)\n     } else if (!config.deleteTopicEnable) {\n       val error = if (request.context.apiVersion < 3) Errors.INVALID_REQUEST else Errors.TOPIC_DELETION_DISABLED\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n         results.add(new DeletableTopicResult()\n-          .setName(topic)\n+          .setName(topic.name())\n+          .setTopicId(topic.topicId())\n           .setErrorCode(error.code))\n       }\n       sendResponseCallback(results)\n     } else {\n-      deleteTopicRequest.data.topicNames.forEach { topic =>\n+      deleteTopicRequest.topics().forEach { topic =>\n+        val name = if (topic.topicId().equals(Uuid.ZERO_UUID)) topic.name()\n+          else controller.controllerContext.topicNames.getOrElse(topic.topicId(), null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5MDczMA==", "bodyText": "We could revert changes to this file since there aren't any real changes?", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564890730", "createdAt": "2021-01-26T22:54:53Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/BaseRequestTest.scala", "diffHunk": "@@ -21,6 +21,7 @@ import java.io.{DataInputStream, DataOutputStream}\n import java.net.Socket\n import java.nio.ByteBuffer\n import java.util.Properties\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5NjEyOA==", "bodyText": "This could move to the previous line, so the identation doesn't look odd", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564896128", "createdAt": "2021-01-26T23:02:06Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/MetadataRequestIBPTest/TopicIdWithOldInterBrokerProtocolTest.scala", "diffHunk": "@@ -59,8 +61,56 @@ class TopicIdWithOldInterBrokerProtocolTest extends BaseRequestTest {\n     }\n   }\n \n+  @Test\n+  def testDeleteTopicsWithOldIBP(): Unit = {\n+    val timeout = 10000\n+    createTopic(\"topic-3\", 5, 2)\n+    createTopic(\"topic-4\", 1, 2)\n+    val request = new DeleteTopicsRequest.Builder(\n+      new DeleteTopicsRequestData()\n+        .setTopicNames(Arrays.asList(\"topic-3\", \"topic-4\"))\n+        .setTimeoutMs(timeout)).build()\n+    val resp = sendDeleteTopicsRequest(request)\n+    val error = resp.errorCounts.asScala.find(_._1 != Errors.NONE)\n+    assertTrue(error.isEmpty, s\"There should be no errors, found ${resp.data.responses.asScala}\")\n+    request.data.topicNames.forEach { topic =>\n+      validateTopicIsDeleted(topic)\n+    }\n+    resp.data.responses.forEach { response =>\n+      assertEquals(Uuid.ZERO_UUID, response.topicId())\n+    }\n+  }\n+\n+  @Test\n+  def testDeleteTopicsWithOldIBPUsingIDs(): Unit = {\n+    val timeout = 10000\n+    createTopic(\"topic-7\", 3, 2)\n+    createTopic(\"topic-6\", 1, 2)\n+    val ids = Map(\"topic-7\" -> Uuid.randomUuid(), \"topic-6\" -> Uuid.randomUuid())\n+    val request = new DeleteTopicsRequest.Builder(\n+      new DeleteTopicsRequestData()\n+        .setTopics(Arrays.asList(new DeleteTopicState().setTopicId(ids(\"topic-7\")),\n+          new DeleteTopicState().setTopicId(ids(\"topic-6\"))\n+        )\n+        ).setTimeoutMs(timeout)).build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40175b371eca4e00b862d127786aece1e5fef02b"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc", "committedDate": "2021-01-28T02:45:20Z", "message": "Addressed comments--moved topic ID in create to ZkAdminManager, updated authorization logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4Nzg0ODI2", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-578784826", "createdAt": "2021-01-28T22:11:57Z", "commit": {"oid": "d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjoxMTo1N1rOIcM5Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQyMjoxMTo1N1rOIcM5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ0MjI5NQ==", "bodyText": "We use kafka.server for the other unit tests in this directory, so we should do the same here (in Scala, the package name doesn't need to match the directory structure).", "url": "https://github.com/apache/kafka/pull/9684#discussion_r566442295", "createdAt": "2021-01-28T22:11:57Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/TopicIdWithOldInterBrokerProtocolTest.scala", "diffHunk": "@@ -15,12 +15,13 @@\n  * limitations under the License.\n  */\n \n-package kafka.server\n+package unit.kafka.server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4Nzg1Mzcw", "url": "https://github.com/apache/kafka/pull/9684#pullrequestreview-578785370", "createdAt": "2021-01-28T22:12:49Z", "commit": {"oid": "d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b109da445a5a2d51096c4033334e3aeb42a56e", "author": {"user": {"login": "jolshan", "name": "Justine Olshan"}}, "url": "https://github.com/apache/kafka/commit/46b109da445a5a2d51096c4033334e3aeb42a56e", "committedDate": "2021-01-29T02:45:56Z", "message": "fix package name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}