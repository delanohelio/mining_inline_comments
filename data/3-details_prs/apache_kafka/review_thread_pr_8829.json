{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNDU3Nzk0", "number": 8829, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMzoxNjozN1rOEDRUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjozMlrOEEgE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODY0ODk2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMzoxNjozN1rOGgMbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjozOToyNVrOGgm0wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxMTIzNQ==", "bodyText": "This marks the failure when we get a new error but the previous error already put us over the limit. IOW, if this is the first error that is reported, then totalFailures will be 0 when this method is called and thus the withinToleranceLimits() will return true (i.e., we haven't recorded any errors yet) and we will not enter the if block due to the negation.\nSeems like we should actually do this check after we record the error. That would be something like:\n        markAsFailed();\n        context.consumerRecord(consumerRecord);\n        context.currentContext(stage, executingClass);\n        context.error(error);\n        errorHandlingMetrics.recordError();\n        if (!withinToleranceLimits()) {\n            errorHandlingMetrics.recordFailure();\n            throw new ConnectException(\"Tolerance exceeded in error handler\", error);\n        }\n        return context.report();\n\nNote that I added the markAsFailed() call since that's what increments the totalFailures field (and calls errorHandlingMetrics.recordErrorTimestamp()).\nBTW, I'm not sure whether we should call errorHandlingMetrics.recordError() or errorHandlingMetrics.recordFailure() or both.\nIIUC, then when we get to the if-block on the first error being reported, the markAsFailed() method will have incremented the totalFailures (we were not doing that in this method before this PR), and if errors.tolerance=NONE is used we will fail on the first error -- which is what we want.\nI also think that if we add other error tolerance policies in the future, this logic will work correctly, as long as withinToleranceLimits() is implemented to return false when we should fail rather than report.\nAlso, it'd be great to have unit tests that verify this behavior.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r436411235", "createdAt": "2020-06-07T23:16:37Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "diffHunk": "@@ -87,6 +87,12 @@ public RetryWithToleranceOperator(long errorRetryTimeout, long errorMaxDelayInMi\n     public Future<Void> executeFailed(Stage stage, Class<?> executingClass,\n                                       ConsumerRecord<byte[], byte[]> consumerRecord,\n                                       Throwable error) {\n+        if (!withinToleranceLimits()) {\n+            errorHandlingMetrics.recordFailure();\n+            markAsFailed();\n+            throw new ConnectException(\"Tolerance exceeded in the errant record reporter\", error);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNzk4OQ==", "bodyText": "Thanks @rhauch for the comments, I agree with what you're saying. I think we should call both errorHandlingMetrics.recordError() and errorHandlingMetrics.recordFailure(). It seems like recordError() and recordFailure() represent basically the same thing (failed operations) and they're both called at some point when execute(...) is called by the RetryWithToleranceOperator, albeit at different times.\nAdditionally, it looks as if in other circumstances, the error is reported to the various reporters even if the error tolerance has been exceeded, so I'll adjust the order of operations accordingly.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r436437989", "createdAt": "2020-06-08T03:08:19Z", "author": {"login": "aakashnshah"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "diffHunk": "@@ -87,6 +87,12 @@ public RetryWithToleranceOperator(long errorRetryTimeout, long errorMaxDelayInMi\n     public Future<Void> executeFailed(Stage stage, Class<?> executingClass,\n                                       ConsumerRecord<byte[], byte[]> consumerRecord,\n                                       Throwable error) {\n+        if (!withinToleranceLimits()) {\n+            errorHandlingMetrics.recordFailure();\n+            markAsFailed();\n+            throw new ConnectException(\"Tolerance exceeded in the errant record reporter\", error);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxMTIzNQ=="}, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MzcxMw==", "bodyText": "if we attempt an operation and it fails, recordFailure will be incremented, but recordError only tracks the cases where the when we encounter a problem that the framework cannot retry or skip. In the first case, we may still be able to retry or skip the record. In the executeFailed scenario, we should recordFailure() every time, and only recordError only when we have to fail the task.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r436843713", "createdAt": "2020-06-08T16:39:25Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "diffHunk": "@@ -87,6 +87,12 @@ public RetryWithToleranceOperator(long errorRetryTimeout, long errorMaxDelayInMi\n     public Future<Void> executeFailed(Stage stage, Class<?> executingClass,\n                                       ConsumerRecord<byte[], byte[]> consumerRecord,\n                                       Throwable error) {\n+        if (!withinToleranceLimits()) {\n+            errorHandlingMetrics.recordFailure();\n+            markAsFailed();\n+            throw new ConnectException(\"Tolerance exceeded in the errant record reporter\", error);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQxMTIzNQ=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQxNzMwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MTo0OVrOGgm6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MTo0OVrOGgm6Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NTA4Ng==", "bodyText": "Since this is called from the task(), is it enough to just raise an exception? that may be swallowed by the task, and could continue processing.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r436845086", "createdAt": "2020-06-08T16:41:49Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.java", "diffHunk": "@@ -87,6 +87,12 @@ public RetryWithToleranceOperator(long errorRetryTimeout, long errorMaxDelayInMi\n     public Future<Void> executeFailed(Stage stage, Class<?> executingClass,\n                                       ConsumerRecord<byte[], byte[]> consumerRecord,\n                                       Throwable error) {\n+        if (!withinToleranceLimits()) {\n+            errorHandlingMetrics.recordFailure();\n+            markAsFailed();\n+            throw new ConnectException(\"Tolerance exceeded in the errant record reporter\", error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM5Njk3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1ODozM1rOGiI_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1ODozM1rOGiI_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjE1MQ==", "bodyText": "instead, you can just check:\n        if (retryWithToleranceOperator.failed()) {\n            throw retryWithToleranceOperator.error();\n        }\n\nbecause we are already storing the error in the processing context. you can expose that through the operator.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r438452151", "createdAt": "2020-06-10T22:58:33Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -556,6 +556,9 @@ private void deliverMessages() {\n             log.trace(\"{} Delivering batch of {} messages to task\", this, messageBatch.size());\n             long start = time.milliseconds();\n             task.put(new ArrayList<>(messageBatch));\n+            if (workerErrantRecordReporter != null && workerErrantRecordReporter.mustThrowException()) {\n+                throw workerErrantRecordReporter.getExceptionToThrow();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce4daf669d95320c9ab096b7dbc207786aaeeb8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTQwMDE5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzowMDoxMVrOGiJB2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzowMDoxMVrOGiJB2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjY5Ng==", "bodyText": "we don't need these vars, the errors are already stored in the ProcessingContext. look at comment above.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r438452696", "createdAt": "2020-06-10T23:00:11Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.java", "diffHunk": "@@ -99,8 +102,15 @@ public WorkerErrantRecordReporter(\n                 valLength, key, value, headers);\n         }\n \n-        Future<Void> future = retryWithToleranceOperator.executeFailed(Stage.TASK_PUT,\n-            SinkTask.class, consumerRecord, error);\n+        Future<Void> future;\n+        try {\n+            future = retryWithToleranceOperator.executeFailed(Stage.TASK_PUT,\n+                SinkTask.class, consumerRecord, error);\n+        } catch (ConnectException e) {\n+            mustThrowException = true;\n+            exceptionToThrow = e;\n+            throw e;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce4daf669d95320c9ab096b7dbc207786aaeeb8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU0MzgyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ExampleConnectIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNzoyMlrOGiKaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNzoyMlrOGiKaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NTM1NQ==", "bodyText": "minor: we should move this test to ErrorHandlingIntegrationTest. this class was meant to be an example of how to do integration tests.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r438475355", "createdAt": "2020-06-11T00:17:22Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ExampleConnectIntegrationTest.java", "diffHunk": "@@ -237,6 +239,7 @@ public void testErrantRecordReporter() throws Exception {\n         props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n         props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());\n         props.put(DLQ_TOPIC_NAME_CONFIG, DLQ_TOPIC);\n+        props.put(ERRORS_TOLERANCE_CONFIG, ToleranceType.ALL.value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "603217f1ed0e68295b5a6cfd0bc2fd09ba9f681d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1MjgxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjozMlrOGiKfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyMjozMlrOGiKfsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjcyMg==", "bodyText": "let's add a small comment saying why we need to do this: specifically, that if the errors raised from the operator were swallowed by the task implementation, then here we need to kill the task, and if they were not swallowed, we would not get here.", "url": "https://github.com/apache/kafka/pull/8829#discussion_r438476722", "createdAt": "2020-06-11T00:22:32Z", "author": {"login": "wicknicks"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -556,6 +556,10 @@ private void deliverMessages() {\n             log.trace(\"{} Delivering batch of {} messages to task\", this, messageBatch.size());\n             long start = time.milliseconds();\n             task.put(new ArrayList<>(messageBatch));\n+            if (retryWithToleranceOperator.failed() && !retryWithToleranceOperator.withinToleranceLimits()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "603217f1ed0e68295b5a6cfd0bc2fd09ba9f681d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2551, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}