{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTM0MDY1", "number": 8927, "title": "KAFKA-10200: Fix testability of PAPI with windowed stores", "bodyText": "It's currently not possible to unit-test custom processors that use windowed stores,\nbecause the provided windowed store implementations cast the context to\nInternalProcessorContext.\nThis change adds a public API example using windowed stores, and fixes the\ncasts internally that would make that example fail previously.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-25T16:34:26Z", "url": "https://github.com/apache/kafka/pull/8927", "merged": true, "mergeCommit": {"oid": "0e6c8a55b93d66dbf666ca8625fbe6e1ef919552"}, "closed": true, "closedAt": "2020-06-30T16:59:48Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuxUPHgH2gAyNDQwMTM0MDY1OjhmZmYwNTM1ZDA3OWY2ZjEwYmQzM2NiODlhMzdiZDMwNjg1YjE2ZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwYaSggFqTQ0MDE5ODk2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8fff0535d079f6f10bd33cb89a37bd30685b16fe", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/8fff0535d079f6f10bd33cb89a37bd30685b16fe", "committedDate": "2020-06-25T16:34:03Z", "message": "MINOR: Fix testability of PAPI with windowed stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b50044ae2bfef9bc196d994fd20f361e3632f8", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/74b50044ae2bfef9bc196d994fd20f361e3632f8", "committedDate": "2020-06-25T16:53:04Z", "message": "remove demo and make test internal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e46bd62c834c6bb69de60e73f694fb54e5455d4e", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/e46bd62c834c6bb69de60e73f694fb54e5455d4e", "committedDate": "2020-06-25T17:06:22Z", "message": "drop printlns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a96929ca3620a40a0bd19a7c77648afe60b9b95", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/3a96929ca3620a40a0bd19a7c77648afe60b9b95", "committedDate": "2020-06-25T17:13:51Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTY3OTU1", "url": "https://github.com/apache/kafka/pull/8927#pullrequestreview-438167955", "createdAt": "2020-06-26T09:56:50Z", "commit": {"oid": "3a96929ca3620a40a0bd19a7c77648afe60b9b95"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTo1Njo1MFrOGpbDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDowNTo1MFrOGpbTzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA==", "bodyText": "I really like this class.", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446087980", "createdAt": "2020-06-26T09:56:50Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+\n+public final class ProcessorContextUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a96929ca3620a40a0bd19a7c77648afe60b9b95"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5MjIzOQ==", "bodyText": "prop: Here you could use TestUtils.tempDirectory().", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446092239", "createdAt": "2020-06-26T10:05:50Z", "author": {"login": "cadonna"}, "path": "streams/test-utils/src/test/java/org/apache/kafka/streams/test/wordcount/WindowedWordCountProcessorTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.test.wordcount;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.processor.MockProcessorContext;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.TaskId;\n+import org.apache.kafka.streams.state.Stores;\n+import org.apache.kafka.streams.state.WindowStore;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class WindowedWordCountProcessorTest {\n+    @Test\n+    public void testWithInMemoryStore() {\n+        final MockProcessorContext context = new MockProcessorContext();\n+\n+        // Create, initialize, and register the state store.\n+        final WindowStore<String, Integer> store =\n+            Stores.windowStoreBuilder(Stores.inMemoryWindowStore(\"WindowedCounts\",\n+                                                                 Duration.ofDays(24),\n+                                                                 Duration.ofMillis(100),\n+                                                                 false),\n+                                      Serdes.String(),\n+                                      Serdes.Integer())\n+                  .withLoggingDisabled() // Changelog is not supported by MockProcessorContext.\n+                  .build();\n+        store.init(context, store);\n+        context.register(store, null);\n+\n+        // Create and initialize the processor under test\n+        final Processor<String, String> processor = new WindowedWordCountProcessorSupplier().get();\n+        processor.init(context);\n+\n+        // send a record to the processor\n+        context.setTimestamp(101);\n+        processor.process(\"key\", \"alpha beta gamma alpha\");\n+\n+        // send a record to the processor in a new window\n+        context.setTimestamp(221);\n+        processor.process(\"key\", \"gamma delta\");\n+\n+        // note that the processor does not forward during process()\n+        assertThat(context.forwarded().isEmpty(), is(true));\n+\n+        // now, we trigger the punctuator, which iterates over the state store and forwards the contents.\n+        context.scheduledPunctuators().get(0).getPunctuator().punctuate(1_000L);\n+\n+        // finally, we can verify the output.\n+        final Iterator<MockProcessorContext.CapturedForward> capturedForwards = context.forwarded().iterator();\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[alpha@100/200]\", \"2\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[beta@100/200]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[gamma@100/200]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[delta@200/300]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[gamma@200/300]\", \"1\")));\n+        assertThat(capturedForwards.hasNext(), is(false));\n+    }\n+\n+    @Test\n+    public void testWithPersistentStore() throws IOException {\n+        final Properties properties = new Properties();\n+        properties.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"\");\n+        properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"\");\n+\n+        final File stateDir = Files.createTempDirectory(\"kafka-test-\").toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a96929ca3620a40a0bd19a7c77648afe60b9b95"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f3f4fe547469f88b2aeec5686de1be2756c99f", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/d0f3f4fe547469f88b2aeec5686de1be2756c99f", "committedDate": "2020-06-29T15:40:51Z", "message": "CR amendments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06524e651572e3cebbcf841ee80b8c759b6591fe", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/06524e651572e3cebbcf841ee80b8c759b6591fe", "committedDate": "2020-06-29T15:44:29Z", "message": "document that caching is not supported by MockProcessorContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa6408062e51677a2cbb5db4b885b8b940df503d", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/aa6408062e51677a2cbb5db4b885b8b940df503d", "committedDate": "2020-06-29T16:04:40Z", "message": "link the metrics adaptor to KAFKA-10217"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTk4OTY0", "url": "https://github.com/apache/kafka/pull/8927#pullrequestreview-440198964", "createdAt": "2020-06-30T16:40:53Z", "commit": {"oid": "aa6408062e51677a2cbb5db4b885b8b940df503d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 731, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}