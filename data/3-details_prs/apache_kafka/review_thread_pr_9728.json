{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTAzNTUx", "number": 9728, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDowNjoyMlrOFDqQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMTo0OVrOFLWJDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzgyNTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDowNjoyMlrOIDbKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDo0OTo0NlrOIDctDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2MTY3MA==", "bodyText": "The name makes this look generic, but it's not. The logging is very specific. I would change the name to be specific.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540461670", "createdAt": "2020-12-10T20:06:22Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def allPass(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2Mzg1MA==", "bodyText": "How about \"waitForAllToComplete\"", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540463850", "createdAt": "2020-12-10T20:10:18Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def allPass(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2MTY3MA=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NzQ5Ng==", "bodyText": "The log message talks explicitly about LogManager shutdown. Seems like you'd want it to say something about log manager shutdown. I would even set the type parameter to the type we expect from the shutdown method.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540467496", "createdAt": "2020-12-10T20:16:22Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def allPass(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2MTY3MA=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NjkyNQ==", "bodyText": "I would even set the type parameter to the type we expect from the shutdown method.\n\nThere is no explicit type so I didn't define the type parameter.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540486925", "createdAt": "2020-12-10T20:49:46Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def allPass(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2MTY3MA=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzkzMDA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozMzozNVrOIDcIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozMzozNVrOIDcIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NzQ4MA==", "bodyText": "This refactoring is good.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540477480", "createdAt": "2020-12-10T20:33:35Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -478,17 +493,8 @@ class LogManager(logDirs: Seq[File],\n     }\n \n     try {\n-      for ((dir, dirJobs) <- jobs) {\n-        val hasErrors = dirJobs.exists  { future =>\n-          Try(future.get) match {\n-            case Success(_) => false\n-            case Failure(e) =>\n-              warn(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n-              true\n-          }\n-        }\n-\n-        if (!hasErrors) {\n+      jobs.forKeyValue { (dir, dirJobs) =>\n+        if (allPass(dirJobs)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzkzMzgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozNDoyOFrOIDcKOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDozNjo0NVrOIDox0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3ODAwOQ==", "bodyText": "This test may not still catch the bug introduced in #9680.\nWe can continue more discussion under this review comment in #9680: https://github.com/apache/kafka/pull/9680/files#r540476157.\nWe should still get this PR merged though, since it fixes the problem.\ncc @ijuma", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540478009", "createdAt": "2020-12-10T20:34:28Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +680,15 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Mzk0MQ==", "bodyText": "@kowshik Thanks for you explanation! It is indeed hard to give full test on the shutdown path.\n\nThis test may not still catch the bug introduced in #9680.\n\nyou are right. I'm going to enrich the unit tests.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540483941", "createdAt": "2020-12-10T20:44:31Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +680,15 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3ODAwOQ=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NDk5MA==", "bodyText": "For another, Your comment in ttps://github.com//pull/9680/files#r540476157 is great to me. It would be better that we can make higher test coverage on that!", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540484990", "createdAt": "2020-12-10T20:46:22Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +680,15 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3ODAwOQ=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY4NDc1NQ==", "bodyText": "Sounds good!", "url": "https://github.com/apache/kafka/pull/9728#discussion_r540684755", "createdAt": "2020-12-11T04:36:45Z", "author": {"login": "kowshik"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +680,15 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3ODAwOQ=="}, "originalCommit": {"oid": "26ec243bdea88799250de703256bef7cfe231034"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDQwODY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMTo1NFrOIGOSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0NDoxMVrOIGO5yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NjM1NQ==", "bodyText": "I would add a callback here for the failures and do the logging in the callback. That way you can keep the name generic.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r543396355", "createdAt": "2020-12-15T14:31:54Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def waitForAllToComplete(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d97a74fbbd6ee03cfdd8c5eb10d8aeadd46b95f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNjUzNw==", "bodyText": "good suggestion. will address it.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r543406537", "createdAt": "2020-12-15T14:44:11Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -435,6 +436,20 @@ class LogManager(logDirs: Seq[File],\n       cleaner.startup()\n   }\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @return true if all pass. Otherwise, false\n+   */\n+  private[log] def waitForAllToComplete(jobs: Seq[Future[_]]): Boolean = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NjM1NQ=="}, "originalCommit": {"oid": "3d97a74fbbd6ee03cfdd8c5eb10d8aeadd46b95f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQwMTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxODo0OVrOIOdsKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxODo0OVrOIOdsKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNzQxNw==", "bodyText": "We should mention that this will be called for each future that throws an exception.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r552037417", "createdAt": "2021-01-05T16:18:49Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -1167,6 +1160,21 @@ class LogManager(logDirs: Seq[File],\n \n object LogManager {\n \n+  /**\n+   * wait all jobs to complete\n+   * @param jobs jobs\n+   * @param callback handle the exception caused by Future#get", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f983cea0014373c37ccd7cae70f7d41f18df69"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQwMjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/LogManager.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxODo1OFrOIOdshQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxODo1OFrOIOdshQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNzUwOQ==", "bodyText": "Nit: start with capital?", "url": "https://github.com/apache/kafka/pull/9728#discussion_r552037509", "createdAt": "2021-01-05T16:18:58Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -1167,6 +1160,21 @@ class LogManager(logDirs: Seq[File],\n \n object LogManager {\n \n+  /**\n+   * wait all jobs to complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f983cea0014373c37ccd7cae70f7d41f18df69"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQxNDIyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMTo0OVrOIOdztg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjozOTozMVrOIOehdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTM1MA==", "bodyText": "Should we not return true in this answer?", "url": "https://github.com/apache/kafka/pull/9728#discussion_r552039350", "createdAt": "2021-01-05T16:21:49Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +681,31 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test\n+  def testWaitForAllToComplete(): Unit = {\n+    var invokedCount = 0\n+    val success: Future[Boolean] = Mockito.mock(classOf[Future[Boolean]])\n+    Mockito.when(success.get()).thenAnswer(_ => invokedCount += 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f983cea0014373c37ccd7cae70f7d41f18df69"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA1MTA2Mg==", "bodyText": "waitForAllToComplete does not use the return value so it does not cause casting error even though we don't return true. However, it does look like a bug so I will add the return value.", "url": "https://github.com/apache/kafka/pull/9728#discussion_r552051062", "createdAt": "2021-01-05T16:39:31Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/log/LogManagerTest.scala", "diffHunk": "@@ -680,4 +681,31 @@ class LogManagerTest {\n     time.sleep(logConfig.fileDeleteDelayMs + 1)\n     verifyMetrics(1)\n   }\n+\n+  @Test\n+  def testWaitForAllToComplete(): Unit = {\n+    var invokedCount = 0\n+    val success: Future[Boolean] = Mockito.mock(classOf[Future[Boolean]])\n+    Mockito.when(success.get()).thenAnswer(_ => invokedCount += 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTM1MA=="}, "originalCommit": {"oid": "65f983cea0014373c37ccd7cae70f7d41f18df69"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3453, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}