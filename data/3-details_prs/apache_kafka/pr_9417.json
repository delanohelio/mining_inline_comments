{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODYwNzk2", "number": 9417, "title": "MINOR: Fix flaky ControllerMutationQuotaTest.testQuotaMetric", "bodyText": "What\nClientQuotaManager.updateQuota updates quotaCallback before updating metric configs.\nClientQuotaManager.quota() performs an unlocked call to quotaLimit(), so we can run into a case where quota returns the updated quota, but the metric config hasn't been updated.\nThe fix is to acquire the read lock before attempting to read the quota. An alternative would be to have verifyQuotaMetric run in a waitUntilTrue.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-12T22:47:52Z", "url": "https://github.com/apache/kafka/pull/9417", "merged": true, "mergeCommit": {"oid": "78ac5a4003851b6910c44143ab3a8342f6ab31fb"}, "closed": true, "closedAt": "2020-10-20T19:15:12Z", "author": {"login": "splett2"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTFi3KAFqTUxMDQyMTk3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUdo_AAFqTUxMzA0OTUwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDIxOTcx", "url": "https://github.com/apache/kafka/pull/9417#pullrequestreview-510421971", "createdAt": "2020-10-16T12:28:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyODo1NVrOHi5_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoyODo1NVrOHi5_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2Mzc2Mg==", "bodyText": "While this works, I wonder if this is the right way to overcome the issue. My concern is that there are other read paths which remain unprotected so we are not consistent. I would rather prefer to update the test as you suggested.", "url": "https://github.com/apache/kafka/pull/9417#discussion_r506363762", "createdAt": "2020-10-16T12:28:55Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -360,8 +360,14 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n    * Note: this method is expensive, it is meant to be used by tests only\n    */\n   def quota(userPrincipal: KafkaPrincipal, clientId: String): Quota = {\n-    val metricTags = quotaCallback.quotaMetricTags(clientQuotaType, userPrincipal, clientId)\n-    Quota.upperBound(quotaLimit(metricTags))\n+    // acquire read lock to ensure that both quota limit and metric config are updated atomically\n+    lock.readLock().lock()\n+    try {\n+      val metricTags = quotaCallback.quotaMetricTags(clientQuotaType, userPrincipal, clientId)\n+      Quota.upperBound(quotaLimit(metricTags))\n+    } finally {\n+      lock.readLock().unlock()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDg5MTg3", "url": "https://github.com/apache/kafka/pull/9417#pullrequestreview-511489187", "createdAt": "2020-10-19T07:44:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzo0NDoyNlrOHkBmPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzo0NDoyNlrOHkBmPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzNjk1Ng==", "bodyText": "nit: Could we use DEFAULT_MAX_WAIT_MS (defined in o.a.k.t.TestUtils) here?", "url": "https://github.com/apache/kafka/pull/9417#discussion_r507536956", "createdAt": "2020-10-19T07:44:26Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ControllerMutationQuotaTest.scala", "diffHunk": "@@ -381,16 +381,18 @@ class ControllerMutationQuotaTest extends BaseRequestTest {\n     Option(servers.head.metrics.metric(metricName))\n   }\n \n-  private def verifyQuotaMetric(user: String, expectedQuota: Double): Unit = {\n-    quotaMetric(user) match {\n-      case Some(metric) =>\n-        val config = metric.config()\n-        assertEquals(expectedQuota, config.quota().bound(), 0.1)\n-        assertEquals(ControllerQuotaSamples, config.samples())\n-        assertEquals(ControllerQuotaWindowSizeSeconds * 1000, config.timeWindowMs())\n-\n-      case None =>\n-        fail(s\"Quota metric of $user is not defined\")\n+  private def waitQuotaMetric(user: String, expectedQuota: Double): Unit = {\n+    TestUtils.retry(200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be693efe60e721f366d5fd8bfbc674e60e9d038", "author": {"user": {"login": "splett2", "name": "David Mao"}}, "url": "https://github.com/apache/kafka/commit/3be693efe60e721f366d5fd8bfbc674e60e9d038", "committedDate": "2020-10-20T16:18:29Z", "message": "retry when checking quota config value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "author": {"user": {"login": "splett2", "name": "David Mao"}}, "url": "https://github.com/apache/kafka/commit/b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "committedDate": "2020-10-20T16:18:29Z", "message": "use DEFAULT_MAX_WAIT_MS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "author": {"user": {"login": "splett2", "name": "David Mao"}}, "url": "https://github.com/apache/kafka/commit/b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "committedDate": "2020-10-20T16:18:29Z", "message": "use DEFAULT_MAX_WAIT_MS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDQ5NTAx", "url": "https://github.com/apache/kafka/pull/9417#pullrequestreview-513049501", "createdAt": "2020-10-20T19:07:44Z", "commit": {"oid": "b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 513, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}