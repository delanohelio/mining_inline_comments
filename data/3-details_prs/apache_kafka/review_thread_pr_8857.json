{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNDc5NDQ3", "number": 8857, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyOToyNFrOEE9e3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzo1M1rOEFI7jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjM3MDg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoyOToyNFrOGi59FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzozNDowOVrOGi6E0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NDI5Mg==", "bodyText": "How about using match pattern?\n        case _: InterruptedException =>\n          // We ignore InterruptedException. While the queue is empty and this thread is blocking on\n          // taking an item from the queue, a concurrent call to FinalizedFeatureChangeListener.close()\n          // could interrupt the thread and cause an InterruptedException to be raised from queue.take().\n          // In such a case, it is safe to ignore the exception since the thread is being shutdown.\n        case e: Exception =>\n          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n          throw new FatalExitError(1)", "url": "https://github.com/apache/kafka/pull/8857#discussion_r439254292", "createdAt": "2020-06-12T07:29:24Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -143,13 +142,17 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n   private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n     override def doWork(): Unit = {\n       try {\n-        ignoring(classOf[InterruptedException]) {\n-          queue.take.updateLatestOrThrow()\n-        }\n+        queue.take.updateLatestOrThrow()\n       } catch {\n         case e: Exception => {\n-          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n-          throw new FatalExitError(1)\n+          // We ignore InterruptedException. While the queue is empty and this thread is blocking on\n+          // taking an item from the queue, a concurrent call to FinalizedFeatureChangeListener.close()\n+          // could interrupt the thread and cause an InterruptedException to be raised from queue.take().\n+          // In such a case, it is safe to ignore the exception since the thread is being shutdown.\n+          if (!e.isInstanceOf[InterruptedException]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d131ecbc5747b89c4410401af324d7b6e0242131"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NjI3Mw==", "bodyText": "Done.", "url": "https://github.com/apache/kafka/pull/8857#discussion_r439256273", "createdAt": "2020-06-12T07:34:09Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -143,13 +142,17 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n   private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n     override def doWork(): Unit = {\n       try {\n-        ignoring(classOf[InterruptedException]) {\n-          queue.take.updateLatestOrThrow()\n-        }\n+        queue.take.updateLatestOrThrow()\n       } catch {\n         case e: Exception => {\n-          error(\"Failed to process feature ZK node change event. The broker will eventually exit.\", e)\n-          throw new FatalExitError(1)\n+          // We ignore InterruptedException. While the queue is empty and this thread is blocking on\n+          // taking an item from the queue, a concurrent call to FinalizedFeatureChangeListener.close()\n+          // could interrupt the thread and cause an InterruptedException to be raised from queue.take().\n+          // In such a case, it is safe to ignore the exception since the thread is being shutdown.\n+          if (!e.isInstanceOf[InterruptedException]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI1NDI5Mg=="}, "originalCommit": {"oid": "d131ecbc5747b89c4410401af324d7b6e0242131"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzY1ODk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0MTowMlrOGjGjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzowNVrOGjMEMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MDc0Nw==", "bodyText": "I think we can just propagate this exception to ShutdownableThread. It ignores this exception if the thread is stopped.", "url": "https://github.com/apache/kafka/pull/8857#discussion_r439460747", "createdAt": "2020-06-12T14:41:02Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -143,10 +142,13 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n   private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n     override def doWork(): Unit = {\n       try {\n-        ignoring(classOf[InterruptedException]) {\n-          queue.take.updateLatestOrThrow()\n-        }\n+        queue.take.updateLatestOrThrow()\n       } catch {\n+        case _: InterruptedException =>\n+          // We ignore InterruptedException. While the queue is empty and this thread is blocking on", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTAyNw==", "bodyText": "Done. Great point.", "url": "https://github.com/apache/kafka/pull/8857#discussion_r439551027", "createdAt": "2020-06-12T17:27:05Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -143,10 +142,13 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n   private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n     override def doWork(): Unit = {\n       try {\n-        ignoring(classOf[InterruptedException]) {\n-          queue.take.updateLatestOrThrow()\n-        }\n+        queue.take.updateLatestOrThrow()\n       } catch {\n+        case _: InterruptedException =>\n+          // We ignore InterruptedException. While the queue is empty and this thread is blocking on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MDc0Nw=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0NjUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzo1M1rOGjMYhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzo1M1rOGjMYhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjIyOQ==", "bodyText": "nit: if it is shutting down -> when shutting down.", "url": "https://github.com/apache/kafka/pull/8857#discussion_r439556229", "createdAt": "2020-06-12T17:37:53Z", "author": {"login": "abbccdda"}, "path": "core/src/main/scala/kafka/server/FinalizedFeatureChangeListener.scala", "diffHunk": "@@ -143,10 +142,15 @@ class FinalizedFeatureChangeListener(zkClient: KafkaZkClient) extends Logging {\n   private class ChangeNotificationProcessorThread(name: String) extends ShutdownableThread(name = name) {\n     override def doWork(): Unit = {\n       try {\n-        ignoring(classOf[InterruptedException]) {\n-          queue.take.updateLatestOrThrow()\n-        }\n+        queue.take.updateLatestOrThrow()\n       } catch {\n+        case ie: InterruptedException =>\n+          // While the queue is empty and this thread is blocking on taking an item from the queue,\n+          // a concurrent call to FinalizedFeatureChangeListener.close() could interrupt the thread\n+          // and cause an InterruptedException to be raised from queue.take(). In such a case, it is\n+          // safe to ignore the exception if the thread is being shutdown. We raise the exception\n+          // here again, because, it is ignored by ShutdownableThread if it is shutting down.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b296d827941e1d4797db420160f4d50ccaa2f08"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}