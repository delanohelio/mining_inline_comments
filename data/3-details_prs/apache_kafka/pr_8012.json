{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTg5NTU1", "number": 8012, "title": "KAFKA-9474: Adds 'float64' to the RPC protocol types.", "bodyText": "Committer Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-28T19:33:39Z", "url": "https://github.com/apache/kafka/pull/8012", "merged": true, "mergeCommit": {"oid": "57cef765f55fa1b9bab99cf4c71cf40f64533656"}, "closed": true, "closedAt": "2020-01-30T12:54:28Z", "author": {"login": "bdbyrne"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-2jwpAH2gAyMzY4MTg5NTU1Ojk5ZjFkOWFlM2EzOGMyNTE5NDI4MzgwMWU2MTQwMThiNTIwNWQ0NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_aDeSgFqTM1MDc5OTE0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/99f1d9ae3a38c25194283801e614018b5205d463", "committedDate": "2020-01-28T19:32:10Z", "message": "KAFKA-9474: Adds 'double' to the protocol message types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjU1MDgx", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-349655081", "createdAt": "2020-01-28T19:48:44Z", "commit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjU2Nzc3", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-349656777", "createdAt": "2020-01-28T19:51:21Z", "commit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1MToyMlrOFiyX1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1MToyMlrOFiyX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMTIwNg==", "bodyText": "Should it be float64 to be consistent with int64 (versus long)?", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372021206", "createdAt": "2020-01-28T19:51:22Z", "author": {"login": "ijuma"}, "path": "clients/src/main/resources/common/message/README.md", "diffHunk": "@@ -79,6 +79,8 @@ There are several primitive field types available.\n \n * \"int64\": a 64-bit integer.\n \n+* \"double\": is a double-precision floating point number (IEEE 754).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjY0NDI0", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-349664424", "createdAt": "2020-01-28T20:03:19Z", "commit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowMzoxOVrOFiyvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowMzoxOVrOFiyvEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNzE1NA==", "bodyText": "I was checking protobuf and they do:\n    public double readDouble() throws IOException {\n      return Double.longBitsToDouble(readRawLittleEndian64());\n    }", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372027154", "createdAt": "2020-01-28T20:03:19Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java", "diffHunk": "@@ -253,6 +253,26 @@ public static long readVarlong(ByteBuffer buffer)  {\n         return (value >>> 1) ^ -(value & 1);\n     }\n \n+    /**\n+     * Read a double-precision 64-bit format IEEE 754 value.\n+     *\n+     * @param in The input to read from\n+     * @return The double value read\n+     */\n+    public static double readDouble(DataInput in) throws IOException {\n+        return Double.longBitsToDouble(in.readLong());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjY1OTcx", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-349665971", "createdAt": "2020-01-28T20:05:55Z", "commit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowNTo1NlrOFiyzmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowNTo1NlrOFiyzmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyODMxNA==", "bodyText": "So, ByteBuffer does. Are you concerned that they may change the implementation? Seems like they cannot without basically breaking everyone, right?\n    private ByteBuffer putDouble(long a, double x) {\n\n        try {\n            long y = Double.doubleToRawLongBits(x);\n            UNSAFE.putLongUnaligned(null, a, y, bigEndian);\n        } finally {\n            Reference.reachabilityFence(this);\n        }\n        return this;\n    }", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372028314", "createdAt": "2020-01-28T20:05:56Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java", "diffHunk": "@@ -346,6 +366,26 @@ public static void writeVarlong(long value, ByteBuffer buffer) {\n         buffer.put((byte) v);\n     }\n \n+    /**\n+     * Write the given double following the double-precision 64-bit format IEEE 754 value into the output.\n+     *\n+     * @param value The value to write\n+     * @param out The output to write to\n+     */\n+    public static void writeDouble(double value, DataOutput out) throws IOException {\n+        out.writeLong(Double.doubleToRawLongBits(value));\n+    }\n+\n+    /**\n+     * Write the given double following the double-precision 64-bit format IEEE 754 value into the buffer.\n+     *\n+     * @param value The value to write\n+     * @param buffer The buffer to write to\n+     */\n+    public static void writeDouble(double value, ByteBuffer buffer) {\n+        buffer.putLong(Double.doubleToRawLongBits(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f1d9ae3a38c25194283801e614018b5205d463"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e789ba0bf71eeedbbe721cf7bf727cb9c22b6c88", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/e789ba0bf71eeedbbe721cf7bf727cb9c22b6c88", "committedDate": "2020-01-29T00:31:04Z", "message": "Rename double -> fixed64. Simplify serialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/da8469aac18499f22f0292eea3101b7711213d69", "committedDate": "2020-01-29T00:40:20Z", "message": "(minor whitespace improvement)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODczNTgx", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-349873581", "createdAt": "2020-01-29T05:45:36Z", "commit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0NTozN1rOFi9OMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0OTo0NlrOFi9Rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODk2MA==", "bodyText": "Do we want to have a simple positive value like 2.5?", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372198960", "createdAt": "2020-01-29T05:45:37Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/protocol/types/ProtocolSerializationTest.java", "diffHunk": "@@ -87,6 +89,15 @@ public void testSimple() {\n         check(Type.INT16, (short) -11111, \"INT16\");\n         check(Type.INT32, -11111111, \"INT32\");\n         check(Type.INT64, -11111111111L, \"INT64\");\n+        check(Type.FLOAT64, -0.5D, \"FLOAT64\");\n+        check(Type.FLOAT64, 1e300D, \"FLOAT64\");\n+        check(Type.FLOAT64, 0.0D, \"FLOAT64\");\n+        check(Type.FLOAT64, -0.0D, \"FLOAT64\");\n+        check(Type.FLOAT64, Double.MAX_VALUE, \"FLOAT64\");\n+        check(Type.FLOAT64, Double.MIN_VALUE, \"FLOAT64\");\n+        check(Type.FLOAT64, Double.NaN, \"FLOAT64\");\n+        check(Type.FLOAT64, Double.NEGATIVE_INFINITY, \"FLOAT64\");\n+        check(Type.FLOAT64, Double.POSITIVE_INFINITY, \"FLOAT64\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTA5Mw==", "bodyText": "Nit: do we need the D suffix? Typically, the decimal point is enough to indicate a double in Java.", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372199093", "createdAt": "2020-01-29T05:46:16Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/protocol/types/ProtocolSerializationTest.java", "diffHunk": "@@ -87,6 +89,15 @@ public void testSimple() {\n         check(Type.INT16, (short) -11111, \"INT16\");\n         check(Type.INT32, -11111111, \"INT32\");\n         check(Type.INT64, -11111111111L, \"INT64\");\n+        check(Type.FLOAT64, -0.5D, \"FLOAT64\");\n+        check(Type.FLOAT64, 1e300D, \"FLOAT64\");\n+        check(Type.FLOAT64, 0.0D, \"FLOAT64\");\n+        check(Type.FLOAT64, -0.0D, \"FLOAT64\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTQyMQ==", "bodyText": "Nit: I think 0.0 is idiomatic in Java.", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372199421", "createdAt": "2020-01-29T05:47:47Z", "author": {"login": "ijuma"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -1893,6 +1909,18 @@ private String fieldDefault(FieldSpec field) {\n                 headerGenerator.addImport(MessageGenerator.UUID_CLASS);\n                 return \"UUID.fromString(\\\"\" + field.defaultString() + \"\\\")\";\n             }\n+        } else if (field.type() instanceof FieldType.Float64FieldType) {\n+            if (field.defaultString().isEmpty()) {\n+                return \"0D\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTg2Ng==", "bodyText": "For my benefit, what was the reasoning for choosing big endian?", "url": "https://github.com/apache/kafka/pull/8012#discussion_r372199866", "createdAt": "2020-01-29T05:49:46Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/protocol/types/Type.java", "diffHunk": "@@ -367,6 +367,42 @@ public String documentation() {\n         }\n     };\n \n+    public static final DocumentedType FLOAT64 = new DocumentedType() {\n+        @Override\n+        public void write(ByteBuffer buffer, Object o) {\n+            ByteUtils.writeDouble((Double) o, buffer);\n+        }\n+\n+        @Override\n+        public Object read(ByteBuffer buffer) {\n+            return ByteUtils.readDouble(buffer);\n+        }\n+\n+        @Override\n+        public int sizeOf(Object o) {\n+            return 8;\n+        }\n+\n+        @Override\n+        public String typeName() {\n+            return \"FLOAT64\";\n+        }\n+\n+        @Override\n+        public Double validate(Object item) {\n+            if (item instanceof Double)\n+                return (Double) item;\n+            else\n+                throw new SchemaException(item + \" is not a Double.\");\n+        }\n+\n+        @Override\n+        public String documentation() {\n+            return \"Represents a double-precision 64-bit format IEEE 754 value. \" +\n+                    \"The values are encoded using eight bytes in network byte order (big-endian).\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8469aac18499f22f0292eea3101b7711213d69"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "533704fe00e87d003c51f50e1a7b48ba98e5d6dd", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/533704fe00e87d003c51f50e1a7b48ba98e5d6dd", "committedDate": "2020-01-29T17:30:40Z", "message": "Address review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzk5MTQ3", "url": "https://github.com/apache/kafka/pull/8012#pullrequestreview-350799147", "createdAt": "2020-01-30T12:53:29Z", "commit": {"oid": "533704fe00e87d003c51f50e1a7b48ba98e5d6dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2131, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}