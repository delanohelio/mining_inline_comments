{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODE2NTU4", "number": 8448, "title": "KAFKA-9796; Broker shutdown could be stuck forever under certain conditions", "bodyText": "This patch reworks the SocketServer to always start the acceptor threads after the processor threads and to always stop the acceptor threads before the processor threads. It ensures that the acceptor shutdown is not blocked waiting on the processors to be fully shutdown by decoupling the shutdown signal and the awaiting. It also ensure that the processor threads drain its newConnection queue to unblock acceptors that may be waiting. However, the acceptors still bind during the startup, only the processing of new connections and requests is further delayed.\nThe flow looks like this now:\nval socketServer = ...\n\nsocketServer.startup(startProcessingRequests = false)\n// Acceptors are bound.\n\nsocketServer.startProcessingRequests(authorizerFutures)\n// Acceptors and Processors process new connections and requests\n\nsocketServer.stopProcessingRequests()\n// Acceptors and Processors are stopped\n\nsocketServer.shutdown()\n// SocketServer is shutdown (metrics, etc.)\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-04-08T12:24:27Z", "url": "https://github.com/apache/kafka/pull/8448", "merged": true, "mergeCommit": {"oid": "9a36d9f913e3474a3c4c83e91699759c5fa848a2"}, "closed": true, "closedAt": "2020-04-16T16:14:03Z", "author": {"login": "dajac"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVm1-DAH2gAyNDAwODE2NTU4OmUzNDdjZTMzOGI4ZmM1MjRlZTk1ODgxN2QzNWEwYzdlNDdmZDBiODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYLCSRgFqTM5NDU0MzIxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e347ce338b8fc524ee958817d35a0c7e47fd0b89", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/e347ce338b8fc524ee958817d35a0c7e47fd0b89", "committedDate": "2020-04-08T12:13:50Z", "message": "KAFKA-9796; Broker shutdown could be stuck forever under certain conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "494e95834dc8f74f3041f5c524674b455c312dca", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/494e95834dc8f74f3041f5c524674b455c312dca", "committedDate": "2020-04-08T14:50:22Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f8a9dc4a1efef4f1af8ab1bf8ad8c6f3bd985af", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/0f8a9dc4a1efef4f1af8ab1bf8ad8c6f3bd985af", "committedDate": "2020-04-08T15:21:47Z", "message": "keep a more intuitive shutdown ordering: 1) acceptor; 2) processors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/5565c8925ffbd79be414e6148449447eb6003500", "committedDate": "2020-04-09T08:08:06Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTg0MjY5", "url": "https://github.com/apache/kafka/pull/8448#pullrequestreview-392984269", "createdAt": "2020-04-14T14:29:44Z", "commit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0NFrOGFRcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1NTo0MVrOGFSuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgzMA==", "bodyText": "These two lines are still true, but removed from the comment?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181830", "createdAt": "2020-04-14T14:29:44Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTg0Mw==", "bodyText": "These two lines are still true, but removed from the comment?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181843", "createdAt": "2020-04-14T14:29:45Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4Mjg4MQ==", "bodyText": "this is not just data-plane processors?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408182881", "createdAt": "2020-04-14T14:31:03Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MzQ2MQ==", "bodyText": "Add a description?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408183461", "createdAt": "2020-04-14T14:31:46Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with\n+   * `startProcessingRequests=false`.\n    *\n    * Before starting processors for each endpoint, we ensure that authorizer has all the metadata\n-   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker listener\n-   * before other listeners. This allows authorization metadata for other listeners to be stored in Kafka topics\n-   * in this cluster.\n+   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker\n+   * listener before other listeners. This allows authorization metadata for other listeners to be\n+   * stored in Kafka topics in this cluster.\n+   *\n+   * @param authorizerFutures", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODIzNg==", "bodyText": "The blocked acceptor would then add another connection to this list right? Do we close that one?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408198236", "createdAt": "2020-04-14T14:50:14Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1093,9 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    // Clear to unblock blocked acceptors\n+    newConnections.asScala.foreach(_.close())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDM1Mg==", "bodyText": "Why? If it for the failure case, then perhaps it should be in a catch block?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408200352", "createdAt": "2020-04-14T14:52:56Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMjc5Ng==", "bodyText": "Can we replace sleep with some condition?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408202796", "createdAt": "2020-04-14T14:55:41Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)\n       executor.shutdownNow()\n       shutdownServerAndMetrics(testableServer)\n     }\n   }\n \n+  @Test\n+  def testStagedListenerShutdownWhenConnectionQueueIsFull(): Unit = {\n+    val testProps = new Properties\n+    testProps ++= props\n+    testProps.put(\"listeners\", \"EXTERNAL://localhost:0,INTERNAL://localhost:0,CONTROLLER://localhost:0\")\n+    testProps.put(\"listener.security.protocol.map\", \"EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT\")\n+    testProps.put(\"control.plane.listener.name\", \"CONTROLLER\")\n+    testProps.put(\"inter.broker.listener.name\", \"INTERNAL\")\n+    val config = KafkaConfig.fromProps(testProps)\n+    val connectionQueueSize = 1\n+    val testableServer = new TestableSocketServer(config, connectionQueueSize)\n+    testableServer.startup(startProcessingRequests = false)\n+\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+\n+    // Wait to let the acceptor accepts the connections\n+    Thread.sleep(100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5565c8925ffbd79be414e6148449447eb6003500"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "committedDate": "2020-04-15T08:35:21Z", "message": "Address review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTE3NzU0", "url": "https://github.com/apache/kafka/pull/8448#pullrequestreview-394517754", "createdAt": "2020-04-16T10:51:50Z", "commit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1MTo1MFrOGGfslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1NDowNVrOGGfxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2Mzk1OA==", "bodyText": "Should we rename this method to be initiateShutdown() to be consistent with kafka.utils.ShutdownableThread?", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409463958", "createdAt": "2020-04-16T10:51:50Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -422,14 +461,23 @@ private[kafka] abstract class AbstractServerThread(connectionQuotas: ConnectionQ\n   def wakeup(): Unit\n \n   /**\n-   * Initiates a graceful shutdown by signaling to stop and waiting for the shutdown to complete\n+   * Initiates a graceful shutdown by signaling to stop\n    */\n   def shutdown(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NTI3Nw==", "bodyText": "clear() is unnecessary since we would expect the loop to clear (i.e. we shouldn't have code that clears without closing).", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409465277", "createdAt": "2020-04-16T10:54:05Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1094,10 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    while (!newConnections.isEmpty) {\n+      newConnections.poll().close()\n+    }\n+    newConnections.clear()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f"}, "originalPosition": 330}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c8251a5af2cbc19ee8818cf4f4e8f4448020862", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/7c8251a5af2cbc19ee8818cf4f4e8f4448020862", "committedDate": "2020-04-16T11:18:24Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTQzMjE1", "url": "https://github.com/apache/kafka/pull/8448#pullrequestreview-394543215", "createdAt": "2020-04-16T11:31:43Z", "commit": {"oid": "7c8251a5af2cbc19ee8818cf4f4e8f4448020862"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1420, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}