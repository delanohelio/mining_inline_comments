{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjA4MDI1", "number": 8540, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowODoxN1rOD1g8sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyMjozOFrOD28Oxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQwOTQ2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowODoxN1rOGK_shg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1NzowNFrOGLA1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjUzNA==", "bodyText": "Can you create a method to getBuilderWithSource() and just call it inline instead of creating a new mutable field for all the tests to rely on?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414182534", "createdAt": "2020-04-23T23:08:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -161,6 +165,9 @@ public void before() throws Exception {\n         props.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n         props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, NUM_THREADS);\n \n+        builder = new StreamsBuilder();\n+        builder.stream(\"source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMTEwNw==", "bodyText": "Good call, done", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414201107", "createdAt": "2020-04-23T23:57:04Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -161,6 +165,9 @@ public void before() throws Exception {\n         props.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n         props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, NUM_THREADS);\n \n+        builder = new StreamsBuilder();\n+        builder.stream(\"source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjUzNA=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU2NzIxOnYy", "diffSide": "RIGHT", "path": "checkstyle/suppressions.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjozNlrOGLBB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDozNjo0MVrOGLBq0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM2OA==", "bodyText": "Do we really need to add this exception? How much work would it be to reduce the complexity of KafkaStreams?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414204368", "createdAt": "2020-04-24T00:06:36Z", "author": {"login": "mjsax"}, "path": "checkstyle/suppressions.xml", "diffHunk": "@@ -181,7 +181,7 @@\n               files=\"StreamsPartitionAssignor.java\"/>\n \n     <suppress checks=\"NPathComplexity\"\n-              files=\"(ProcessorStateManager|InternalTopologyBuilder|StreamsPartitionAssignor|StreamThread|TaskManager|AssignorConfiguration).java\"/>\n+              files=\"(AssignorConfiguration|InternalTopologyBuilder|KafkaStreams|ProcessorStateManager|StreamsPartitionAssignor|StreamThread|TaskManager).java\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNDg2NA==", "bodyText": "NPathComplexity is a tough one to work around. We'd wind up having to move some blocks of logic to separate helper classes.", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414214864", "createdAt": "2020-04-24T00:36:41Z", "author": {"login": "vvcephei"}, "path": "checkstyle/suppressions.xml", "diffHunk": "@@ -181,7 +181,7 @@\n               files=\"StreamsPartitionAssignor.java\"/>\n \n     <suppress checks=\"NPathComplexity\"\n-              files=\"(ProcessorStateManager|InternalTopologyBuilder|StreamsPartitionAssignor|StreamThread|TaskManager|AssignorConfiguration).java\"/>\n+              files=\"(AssignorConfiguration|InternalTopologyBuilder|KafkaStreams|ProcessorStateManager|StreamsPartitionAssignor|StreamThread|TaskManager).java\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM2OA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU3MjkwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowODo0MlrOGLBEtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowODo0MlrOGLBEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNTEwOA==", "bodyText": "I don't think this should be WARN but an INFO. There is nothing \"wrong\" and thus nothing to warn about?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414205108", "createdAt": "2020-04-24T00:08:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU4OTQwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoxNDo0NlrOGLBNJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0ODo1MVrOGLmyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzI3MA==", "bodyText": "Do we really want to do this? I understand that and empty topology does not make sense, and it would be appropriate to log a WARN -- but do we need/want to reject it?\nAlso, should we instead throw an InvalidTopologyException? Furthermore, should we add a similar check to StreamsBuilder.builder() to raise this error even earlier (we would still nee this check though).", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414207270", "createdAt": "2020-04-24T00:14:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");\n+            numStreamThreads = 0;\n+        } else {\n+            numStreamThreads = config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+        }\n+\n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG)];\n+        threads = new StreamThread[numStreamThreads];\n+\n+        final ProcessorTopology globalTaskTopology = internalTopologyBuilder.buildGlobalStateTopology();\n+        final boolean hasGlobalTopology = globalTaskTopology != null;\n+\n+        if (numStreamThreads == 0 && !hasGlobalTopology) {\n+            log.error(\"Must subscribe to at least one source topic or global table\");\n+            throw new IllegalArgumentException(\"Topology has no stream threads and no global threads\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjQwNg==", "bodyText": "I guess I can't personally imagine any reason to ever want an app running with an empty topology, and would prefer to be notified immediately since I presumably did something wrong. But if you feel strongly about allowing this I can demote this to a warning", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414822406", "createdAt": "2020-04-24T19:47:50Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");\n+            numStreamThreads = 0;\n+        } else {\n+            numStreamThreads = config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+        }\n+\n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG)];\n+        threads = new StreamThread[numStreamThreads];\n+\n+        final ProcessorTopology globalTaskTopology = internalTopologyBuilder.buildGlobalStateTopology();\n+        final boolean hasGlobalTopology = globalTaskTopology != null;\n+\n+        if (numStreamThreads == 0 && !hasGlobalTopology) {\n+            log.error(\"Must subscribe to at least one source topic or global table\");\n+            throw new IllegalArgumentException(\"Topology has no stream threads and no global threads\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzI3MA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjkyOQ==", "bodyText": "Also, do we have an InvalidTopologyException or similar exception already? Or were you proposing to add a new type\nedit: Nevermind it's just TopologyException, found it", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414822929", "createdAt": "2020-04-24T19:48:51Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");\n+            numStreamThreads = 0;\n+        } else {\n+            numStreamThreads = config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+        }\n+\n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG)];\n+        threads = new StreamThread[numStreamThreads];\n+\n+        final ProcessorTopology globalTaskTopology = internalTopologyBuilder.buildGlobalStateTopology();\n+        final boolean hasGlobalTopology = globalTaskTopology != null;\n+\n+        if (numStreamThreads == 0 && !hasGlobalTopology) {\n+            log.error(\"Must subscribe to at least one source topic or global table\");\n+            throw new IllegalArgumentException(\"Topology has no stream threads and no global threads\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzI3MA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU5MzA1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoxNjowNlrOGLBPCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo0NDo0MlrOGPSQqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA==", "bodyText": "The change to reject an empty topology make our testing rather \"ugly\"... Do we really need to reject it?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414207754", "createdAt": "2020-04-24T00:16:06Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMzAxMA==", "bodyText": "Is getBuilderWithSource really that much uglier than new StreamsBuilder? :P", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414823010", "createdAt": "2020-04-24T19:49:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMjY3OQ==", "bodyText": "Would a class-level final StreamsBuilder builder = new StreamsBuilder() that we add a source to in the setUp be any. better iyo?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414832679", "createdAt": "2020-04-24T20:07:02Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNjk1MA==", "bodyText": "I think the suggestion was more along the lines of not throwing an exception while building an empty topology.\nI'm not sure. It seems kind of nice to find out right away that your program will do absolutely nothing. I'm not totally sure you could really run an empty topology. Can you subscribe a Consumer to \"no topics\"?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414916950", "createdAt": "2020-04-24T23:27:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMjUwNA==", "bodyText": "I realize he wasn't just complaining about the name, but I was trying to keep that discussion in one thread. But I guess you can only do so much to keep PR chatter oriented in one place", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414922504", "createdAt": "2020-04-24T23:47:26Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMzAwNw==", "bodyText": "But @vvcephei 's last question gets right to the heart of the matter. The answer being \" technically yes, but it will crash if you try to poll for said nothing, so really no\"\nThat's why the test was flaky, and the reason for this PR in the first place (Avoiding group overhead is the name of the ticket, but the reality is it will only happen once before all the StreamThreads die due to polling no topics)", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414923007", "createdAt": "2020-04-24T23:49:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTAwMQ==", "bodyText": "Thanks for clarification.", "url": "https://github.com/apache/kafka/pull/8540#discussion_r418681001", "createdAt": "2020-05-01T18:44:42Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU5NzA4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoxNzo0MFrOGLBRGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo1MzoyNVrOGLm7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODI4Mw==", "bodyText": "IMHO, we should always get the exception and assert on the error message (otherwise, it exception might be throw because of. different reason the the test does not test what it is support to test -- we have seen this issue in the past).", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414208283", "createdAt": "2020-04-24T00:17:40Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNTM4Nw==", "bodyText": "Ack", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414825387", "createdAt": "2020-04-24T19:53:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODI4Mw=="}, "originalCommit": null, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDYwMzg1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyMDoyMFrOGLBUxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0Mjo1MlrOGLmltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTIyMw==", "bodyText": "Is the state listener executed on the correct thread (ie, main testing thread?) that thus would really make the test fail? From my current understanding it would be called by the GlobalThread and thus the global thread would die instead (this would lead to a timeout below I guess?)", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414209223", "createdAt": "2020-04-24T00:20:20Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new KafkaStreams(new StreamsBuilder().build(), props, supplier, time)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+\n+        assertThat(streams.threads.length, equalTo(0));\n+    }\n+\n+    @Test\n+    public void shouldNotTransitToErrorStateWithGlobalOnlyTopology() throws InterruptedException {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+        streams.setStateListener((newState, oldState) -> {\n+            if (newState.equals(State.ERROR)) {\n+                throw new AssertionError(\"Should not have transitioned to ERROR state with no stream threads\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxOTc2NQ==", "bodyText": "I guess we don't need to throw here, it would just cause KafkaStreams to transition to ERROR and fail below. But I realized this doesn't even do that because we're mocking pretty much everything in this test class including the stream threads. I'll try to look for a better way and place to do this test", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414819765", "createdAt": "2020-04-24T19:42:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new KafkaStreams(new StreamsBuilder().build(), props, supplier, time)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+\n+        assertThat(streams.threads.length, equalTo(0));\n+    }\n+\n+    @Test\n+    public void shouldNotTransitToErrorStateWithGlobalOnlyTopology() throws InterruptedException {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+        streams.setStateListener((newState, oldState) -> {\n+            if (newState.equals(State.ERROR)) {\n+                throw new AssertionError(\"Should not have transitioned to ERROR state with no stream threads\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTIyMw=="}, "originalCommit": null, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTM2NTE4OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyMjozOFrOGM7x2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyMjozOFrOGM7x2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxNTUxMw==", "bodyText": "Copied this over to trunk and verified that it fails consistently", "url": "https://github.com/apache/kafka/pull/8540#discussion_r416215513", "createdAt": "2020-04-27T23:22:38Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java", "diffHunk": "@@ -265,12 +270,27 @@ public void shouldRestoreGlobalInMemoryKTableOnRestart() throws Exception {\n         kafkaStreams.close();\n \n         startStreams();\n+\n         store = kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.keyValueStore()));\n         assertThat(store.approximateNumEntries(), equalTo(4L));\n         timestampedStore = kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.timestampedKeyValueStore()));\n         assertThat(timestampedStore.approximateNumEntries(), equalTo(4L));\n     }\n \n+    @Test\n+    public void shouldGetToRunningWithOnlyGlobalTopology() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d07c5612b1c3e4790239967b8e9f5332b8ad10d"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2769, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}