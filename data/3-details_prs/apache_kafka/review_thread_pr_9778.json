{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MDE4MDQ5", "number": 9778, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0OToxM1rOFIPoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjo0OToxM1rOFK4Z8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg4OTU3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0OToxM1rOIKDkUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODowMzoyNlrOIKD-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNTEyMg==", "bodyText": "Is it overkill to retry whole method?", "url": "https://github.com/apache/kafka/pull/9778#discussion_r547415122", "createdAt": "2020-12-22T17:49:13Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -200,7 +202,7 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n     val defaultEntityFilter = ClientQuotaFilterComponent.ofDefaultEntity(ClientQuotaEntity.IP)\n     val allIpEntityFilter = ClientQuotaFilterComponent.ofEntityType(ClientQuotaEntity.IP)\n \n-    def verifyIpQuotas(entityFilter: ClientQuotaFilterComponent, expectedMatches: Map[ClientQuotaEntity, Double]): Unit = {\n+    def verifyIpQuotas(entityFilter: ClientQuotaFilterComponent, expectedMatches: Map[ClientQuotaEntity, Double]): Unit = TestUtils.retry(10000L){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0010c7340d7acd41131e5e8eda806f41819b5a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyMTcyOQ==", "bodyText": "yes , I will change to only retry assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)", "url": "https://github.com/apache/kafka/pull/9778#discussion_r547421729", "createdAt": "2020-12-22T18:03:26Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -200,7 +202,7 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n     val defaultEntityFilter = ClientQuotaFilterComponent.ofDefaultEntity(ClientQuotaEntity.IP)\n     val allIpEntityFilter = ClientQuotaFilterComponent.ofEntityType(ClientQuotaEntity.IP)\n \n-    def verifyIpQuotas(entityFilter: ClientQuotaFilterComponent, expectedMatches: Map[ClientQuotaEntity, Double]): Unit = {\n+    def verifyIpQuotas(entityFilter: ClientQuotaFilterComponent, expectedMatches: Map[ClientQuotaEntity, Double]): Unit = TestUtils.retry(10000L){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNTEyMg=="}, "originalCommit": {"oid": "6b0010c7340d7acd41131e5e8eda806f41819b5a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODAzMTk2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDoyMDoxN1rOIK-MMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzoyMzoyMVrOILBV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3NTYwMQ==", "bodyText": "Could you add comment for this retry?", "url": "https://github.com/apache/kafka/pull/9778#discussion_r548375601", "createdAt": "2020-12-24T04:20:17Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.retry(10000L) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ace984d8caf7eb37a0ceea32dd3d8dc66513f19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNzI0OA==", "bodyText": "Yes sir", "url": "https://github.com/apache/kafka/pull/9778#discussion_r548427248", "createdAt": "2020-12-24T07:23:21Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.retry(10000L) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3NTYwMQ=="}, "originalCommit": {"oid": "4ace984d8caf7eb37a0ceea32dd3d8dc66513f19"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDQzMjcwOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNTozNzowMVrOILx0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyODozMlrOIMFm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMTM3OA==", "bodyText": "It seems to me waitUntilTrue is more suitable since the exception is not necessary in this test case.", "url": "https://github.com/apache/kafka/pull/9778#discussion_r549221378", "createdAt": "2020-12-28T05:37:01Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,10 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.retry(10000L) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0815845bb45092ab25cd1d1a9687b637167408e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTY4MA==", "bodyText": "Thank you", "url": "https://github.com/apache/kafka/pull/9778#discussion_r549545680", "createdAt": "2020-12-29T02:28:32Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,10 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.retry(10000L) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyMTM3OA=="}, "originalCommit": {"oid": "d0815845bb45092ab25cd1d1a9687b637167408e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE3NzE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzoyODozOVrOIMI2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToyMzo0MVrOIMK35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5ODc4MQ==", "bodyText": "Could we rename \"prop\" to \"quotas\"?", "url": "https://github.com/apache/kafka/pull/9778#discussion_r549598781", "createdAt": "2020-12-29T07:28:39Z", "author": {"login": "chia7712"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update prop from Zookeeper\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5e25813057a0d70060676b17e7e7c4b100d3d1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMTk3Mw==", "bodyText": "sure!!", "url": "https://github.com/apache/kafka/pull/9778#discussion_r549631973", "createdAt": "2020-12-29T09:23:41Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update prop from Zookeeper\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU5ODc4MQ=="}, "originalCommit": {"oid": "2c5e25813057a0d70060676b17e7e7c4b100d3d1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTU0MjI1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjo0OToxM1rOINwkbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzowNzozNVrOIPNO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5ODE1OQ==", "bodyText": "We usually put the , at the end of the previous line when we break a line.\nCould we add the expected value and the current value in the message? We could say something like Expected connection quota $expected for $entity, got $actual.", "url": "https://github.com/apache/kafka/pull/9778#discussion_r551298159", "createdAt": "2021-01-04T12:49:13Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update quotas from Zookeeper\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79f5f054ee0e36a0ad91ed023e4ea3f696175da2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwODI2Nw==", "bodyText": "Thank you ! Both are very helpful . let me fix it .", "url": "https://github.com/apache/kafka/pull/9778#discussion_r551408267", "createdAt": "2021-01-04T16:05:32Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update quotas from Zookeeper\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5ODE1OQ=="}, "originalCommit": {"oid": "79f5f054ee0e36a0ad91ed023e4ea3f696175da2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NzI3OQ==", "bodyText": "@dajac\nhello~\nI remain the message Broker didn't update quotas from Zookeeper which clearly indicate the error.\nAnd add  expect and got to error message\nCan you help me take a look again", "url": "https://github.com/apache/kafka/pull/9778#discussion_r551467279", "createdAt": "2021-01-04T17:45:02Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update quotas from Zookeeper\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5ODE1OQ=="}, "originalCommit": {"oid": "79f5f054ee0e36a0ad91ed023e4ea3f696175da2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcwNDQ1OA==", "bodyText": "Thanks for the update. I think that we should not mention ZK here as ZK is going away. How about Connection quota of $entity is not $expected but $actual?", "url": "https://github.com/apache/kafka/pull/9778#discussion_r552704458", "createdAt": "2021-01-06T15:16:18Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update quotas from Zookeeper\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5ODE1OQ=="}, "originalCommit": {"oid": "79f5f054ee0e36a0ad91ed023e4ea3f696175da2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNjM3Ng==", "bodyText": "Thank you  ! I have fixed it .", "url": "https://github.com/apache/kafka/pull/9778#discussion_r552816376", "createdAt": "2021-01-06T17:07:35Z", "author": {"login": "g1geordie"}, "path": "core/src/test/scala/unit/kafka/server/ClientQuotasRequestTest.scala", "diffHunk": "@@ -212,7 +214,9 @@ class ClientQuotasRequestTest extends BaseRequestTest {\n           InetAddress.getByName(unknownHost)\n         else\n           InetAddress.getByName(entityName)\n-        assertEquals(expectedMatches(entity), servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp), 0.01)\n+        TestUtils.waitUntilTrue(\n+          () => expectedMatches(entity) - servers.head.socketServer.connectionQuotas.connectionRateForIp(entityIp) < 0.01\n+          ,\"Broker didn't update quotas from Zookeeper\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI5ODE1OQ=="}, "originalCommit": {"oid": "79f5f054ee0e36a0ad91ed023e4ea3f696175da2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}