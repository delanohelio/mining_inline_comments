{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Njk3ODA5", "number": 8502, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTo0NlrODzBf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTo0NlrODzBf7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODI4NTI1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo0MTo0NlrOGHa1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxMjo0OVrOGHbsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjk0NA==", "bodyText": "I am not sure I understand the need for WorkerTask and WorkerSource/SinkTask to implement different methods. Usually, this would be done by the subclasses overriding the parent class implementation and making sure to call the parent implementation somewhere with super.xxx(). Am I missing some requirement here that necessitates the separate methods?", "url": "https://github.com/apache/kafka/pull/8502#discussion_r410432944", "createdAt": "2020-04-17T19:41:46Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -144,15 +144,25 @@ public boolean awaitStop(long timeoutMs) {\n         }\n     }\n \n+    /**\n+     * Remove all metrics published by this task.\n+     */\n+    public void removeMetrics() {\n+        try {\n+            removeAdditionalMetrics();\n+        } finally {\n+            taskMetricsGroup.close();\n+        }\n+    }\n+\n     protected abstract void execute();\n \n     protected abstract void close();\n \n     /**\n-     * Method called when this worker task has been completely closed, and when the subclass should clean up\n-     * all resources.\n+     * Remove any metrics specific to the subclass. Invoked as part of {@link #removeMetrics}.\n      */\n-    protected abstract void releaseResources();\n+    protected abstract void removeAdditionalMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzODYzMg==", "bodyText": "Yeah, I was thinking about this. Not super attached to either approach, just went with the one that reduced code duplication and took shared logic (try to release source/sink-specific metrics, then release generic task metrics even if that failed) and put it in one place, the abstract class.\nI think an alternative might look like this in WorkerTask:\npublic void removeMetrics() {\n    taskMetricsGroup.close();\n}\nand this in WorkerSinkTask (with something similar in WorkerSourceTask):\n@Override\npublic void removeMetrics() {\n    try {\n        sinkTaskMetricsGroup.close();\n    } finally {\n        super.removeMetrics();\n    }\n}\nIf this looks better, or you were thinking of something completely different, LMK.", "url": "https://github.com/apache/kafka/pull/8502#discussion_r410438632", "createdAt": "2020-04-17T19:53:45Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -144,15 +144,25 @@ public boolean awaitStop(long timeoutMs) {\n         }\n     }\n \n+    /**\n+     * Remove all metrics published by this task.\n+     */\n+    public void removeMetrics() {\n+        try {\n+            removeAdditionalMetrics();\n+        } finally {\n+            taskMetricsGroup.close();\n+        }\n+    }\n+\n     protected abstract void execute();\n \n     protected abstract void close();\n \n     /**\n-     * Method called when this worker task has been completely closed, and when the subclass should clean up\n-     * all resources.\n+     * Remove any metrics specific to the subclass. Invoked as part of {@link #removeMetrics}.\n      */\n-    protected abstract void releaseResources();\n+    protected abstract void removeAdditionalMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjk0NA=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU1OQ==", "bodyText": "Yeah, this was exactly what I had in mind. Conceptually, both child and parent classes need to do some stuff for cleanup. Child class does its cleanup and then just delegates to parent implementation to do parent cleanup. Took me a while to realize that the separate methods on the WorkerTask and WorkerSink/SourceTask were doing exactly this. I think following the common idiom would be a bit more readable.", "url": "https://github.com/apache/kafka/pull/8502#discussion_r410441559", "createdAt": "2020-04-17T20:00:22Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -144,15 +144,25 @@ public boolean awaitStop(long timeoutMs) {\n         }\n     }\n \n+    /**\n+     * Remove all metrics published by this task.\n+     */\n+    public void removeMetrics() {\n+        try {\n+            removeAdditionalMetrics();\n+        } finally {\n+            taskMetricsGroup.close();\n+        }\n+    }\n+\n     protected abstract void execute();\n \n     protected abstract void close();\n \n     /**\n-     * Method called when this worker task has been completely closed, and when the subclass should clean up\n-     * all resources.\n+     * Remove any metrics specific to the subclass. Invoked as part of {@link #removeMetrics}.\n      */\n-    protected abstract void releaseResources();\n+    protected abstract void removeAdditionalMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjk0NA=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0NjkzNA==", "bodyText": "Ack, will update :)", "url": "https://github.com/apache/kafka/pull/8502#discussion_r410446934", "createdAt": "2020-04-17T20:12:49Z", "author": {"login": "C0urante"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -144,15 +144,25 @@ public boolean awaitStop(long timeoutMs) {\n         }\n     }\n \n+    /**\n+     * Remove all metrics published by this task.\n+     */\n+    public void removeMetrics() {\n+        try {\n+            removeAdditionalMetrics();\n+        } finally {\n+            taskMetricsGroup.close();\n+        }\n+    }\n+\n     protected abstract void execute();\n \n     protected abstract void close();\n \n     /**\n-     * Method called when this worker task has been completely closed, and when the subclass should clean up\n-     * all resources.\n+     * Remove any metrics specific to the subclass. Invoked as part of {@link #removeMetrics}.\n      */\n-    protected abstract void releaseResources();\n+    protected abstract void removeAdditionalMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMjk0NA=="}, "originalCommit": null, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3026, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}