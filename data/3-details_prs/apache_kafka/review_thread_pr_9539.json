{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzc5ODQw", "number": 9539, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxOToyNToxMVrOE0EqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzozMTowOFrOE_Qxjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDM3Nzc2OnYy", "diffSide": "RIGHT", "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxOToyNToxMVrOHrpexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNTozMToyMlrOHzgn8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ==", "bodyText": "Similar to LeaderState::nonEndorsingFollower, I think you want to add a method to LeaderState with the following signature public Set<Integer> endorsingFollower().", "url": "https://github.com/apache/kafka/pull/9539#discussion_r515530439", "createdAt": "2020-10-31T19:25:11Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU5MTU5Ng==", "bodyText": "Thanks @jsancio . I am slightly confused regarding your comment though(maybe because of my limited understanding of the protocol) so plz help me understand here:\nThe block of code where i made. the changes, picks all the followers and adds them as the voters:\nList<Voter> voters = state.followers().stream() .map(follower -> new Voter().setVoterId(follower)) .collect(Collectors.toList());\nWhile the LeaderChange message schema, states that voterIds are all those voters who voted for the currently elected leader.\nContinuing on this, from what I understood in the handling of BeginQuorumEpoch response handling section in kIP-595, the moment a leader receives a response from a voter with no errors, it records an endorsement from the voter for itself. It also states that if a Voter accepts a BeginQuorumEpoch(and thereby sending the accepted response), it automatically transitions to a follower state for that leader. Lastly, the new leader will keep sending BeginQuorumEpoch requests to non endorsing voters until it doesn't receive them (or doesn't infer through the Fetch API in case of partitioning).\nSo, the questions I have are:\n\nSince the leader waits for the endorsements from all voters, doesn't it mean that eventually the followers method in LeaderState would return all voters? While the LeaderState message schema mentions that VotedIDs are those voters are voted for this new leader.\nI had thought that the nonEndorsingFollower method was used to find all followers who haven't yet endorsed for the new leader and keep sending requests to them. In that assumption, I am not able to follow your statement of adding a new method to add endorsingFollower wrt this PR.\n\nAgain, I apologise if I made some comments which don't make sense. As I said, I am not totally well verse with the internal implementations being done here.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r515591596", "createdAt": "2020-11-01T09:20:43Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNTY2Ng==", "bodyText": "I think the original KIP stated that the LeaderChange message would encode the set of voters that had voted for the leader. We thought this might be useful for debugging. Later on, we had a change of heart and decided it would just be the set of voters. Now I'm thinking it might be useful to have both. The log will always remember who the voters were at the time of the election and which voters had granted the leader's candidacy, which could be helpful in case of misconfigurations.\nFor the set of voters which voted for the current leader, I think what we want is CandidateState.grantingVoters. However, by the time onBecomeLeader is fired, we have already dropped the CandidateState. One option is to carry grantingVoters over to LeaderState. We might also be able to pass it through onBecomeLeader. This will be easier if we get rid of the call to onBecomeLeader in initialize(). Following KAFKA-10527, it is not possible to initialize as a leader, so we could raise an exception instead.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r516215666", "createdAt": "2020-11-02T19:48:35Z", "author": {"login": "hachikuji"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzODgxMw==", "bodyText": "Thanks @hachikuji . So, from the context of this PR, do you suggest to continue using the definition of Voters in the LeaderChange message as all the voters ? Maybe we can create separate issues for:\n\nchanging LeaderChange message to include both all voters and endorsing voters for that Leader.\nMake relevant changes to be able to pass the grantingVoters information from CandidateState to LeaderState. These include the things you mentioned like removing onBecomeLeader from initialize() or throw exception.\n\nJust curious on the last part. As per KAFKA-10527, a node can't be initialized as a leader. So, this block of code is effectively unused then:\nif (quorum.isLeader()) { onBecomeLeader(currentTimeMs); } else if (quorum.isCandidate()) { onBecomeCandidate(currentTimeMs); } \nOr should we chase all the above as part of this PR itself? Plz let me know.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r516438813", "createdAt": "2020-11-03T05:48:59Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMzczNA==", "bodyText": "@vamossagar12 Up to you I guess. I'm ok doing it all here since the changes seem pretty small.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r516833734", "createdAt": "2020-11-03T17:22:07Z", "author": {"login": "hachikuji"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2MjE4Ng==", "bodyText": "Alright. Thanks @hachikuji . So, I need to add voters + voted for the current Leader in the LeaderChange message and see how to pass the latter to LeaderState.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r517462186", "createdAt": "2020-11-04T16:15:43Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUxMzI0Ng==", "bodyText": "@hachikuji i have made the changes you had suggested.\ncc @jsancio", "url": "https://github.com/apache/kafka/pull/9539#discussion_r518513246", "createdAt": "2020-11-06T04:12:35Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3MzkzOA==", "bodyText": "hey @hachikuji, did you get a chance to review the changes?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r523773938", "createdAt": "2020-11-15T15:31:22Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -317,6 +317,9 @@ private void appendLeaderChangeMessage(LeaderState state, long currentTimeMs) {\n             .map(follower -> new Voter().setVoterId(follower))\n             .collect(Collectors.toList());\n \n+        // Adding the leader to the voters as the protocol ensures that leader always votes for itself.\n+        voters.add(new Voter().setVoterId(state.election().leaderId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMDQzOQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUxMzExOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NToxNVrOH1QSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NToxNVrOH1QSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMzQ0NA==", "bodyText": "Could we use \"Granting\" instead of \"Endorsing\"? I think this is a more consistent term considering LeaderState.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r525603444", "createdAt": "2020-11-17T23:55:15Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,9 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The voters who voted at the time of election\"},\n+    {\"name\": \"EndorsingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUxNjI0OnYy", "diffSide": "RIGHT", "path": "raft/src/main/java/org/apache/kafka/raft/QuorumState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NjozN1rOH1QUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1NjozN1rOH1QUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwMzk0Ng==", "bodyText": "nit: can we move to next line to follow the convention here?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r525603946", "createdAt": "2020-11-17T23:56:37Z", "author": {"login": "hachikuji"}, "path": "raft/src/main/java/org/apache/kafka/raft/QuorumState.java", "diffHunk": "@@ -394,7 +394,7 @@ public void transitionToLeader(long epochStartOffset) throws IOException {\n             localId,\n             epoch(),\n             epochStartOffset,\n-            voters\n+            voters, candidateState.grantingVoters()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUyMTY3OnYy", "diffSide": "RIGHT", "path": "raft/src/test/java/org/apache/kafka/raft/RaftClientTestContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzo1OTowN1rOH1QXsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzozNjoxOVrOH2qA6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNDc4NA==", "bodyText": "Hmm.. It's curious that we can always rely on the full voter set. Do we not have any test cases where we have not received votes from all members?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r525604784", "createdAt": "2020-11-17T23:59:07Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/RaftClientTestContext.java", "diffHunk": "@@ -709,6 +709,9 @@ static void verifyLeaderChangeMessage(\n         assertEquals(leaderId, leaderChangeMessage.leaderId());\n         assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toList()),\n             leaderChangeMessage.voters());\n+        assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toSet()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NDg4MA==", "bodyText": "Yeah at least I couldn't find one. This method verifyLeaderChangeMessage is invoked only from 2 methods, one being testInitializeAsCandidateAndBecomeLeader and the other one is testLeaderAppendSingleMemberQuorum. In both these, the full vote is granted. Plz let me know if you want another test which takes care of the case where not all votes are received.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r526264880", "createdAt": "2020-11-18T17:18:25Z", "author": {"login": "vamossagar12"}, "path": "raft/src/test/java/org/apache/kafka/raft/RaftClientTestContext.java", "diffHunk": "@@ -709,6 +709,9 @@ static void verifyLeaderChangeMessage(\n         assertEquals(leaderId, leaderChangeMessage.leaderId());\n         assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toList()),\n             leaderChangeMessage.voters());\n+        assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toSet()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNDc4NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4MzU0MA==", "bodyText": "Yeah, if you don't mind, it seems like a gap. Thanks!", "url": "https://github.com/apache/kafka/pull/9539#discussion_r526283540", "createdAt": "2020-11-18T17:35:41Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/RaftClientTestContext.java", "diffHunk": "@@ -709,6 +709,9 @@ static void verifyLeaderChangeMessage(\n         assertEquals(leaderId, leaderChangeMessage.leaderId());\n         assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toList()),\n             leaderChangeMessage.voters());\n+        assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toSet()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNDc4NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3MzUxNA==", "bodyText": "@hachikuji , I have added a test case where i initialize a quorum of 3 and got votes from majority. Needed to tweak a couple of methods as some of them were having hardcoded values of 1 on the expected value. Plz review.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r527073514", "createdAt": "2020-11-19T17:36:19Z", "author": {"login": "vamossagar12"}, "path": "raft/src/test/java/org/apache/kafka/raft/RaftClientTestContext.java", "diffHunk": "@@ -709,6 +709,9 @@ static void verifyLeaderChangeMessage(\n         assertEquals(leaderId, leaderChangeMessage.leaderId());\n         assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toList()),\n             leaderChangeMessage.voters());\n+        assertEquals(voters.stream().map(voterId -> new Voter().setVoterId(voterId)).collect(Collectors.toSet()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNDc4NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTI0NTI2OnYy", "diffSide": "RIGHT", "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDowOToyNlrOH5Chrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzoyNTo0OVrOH59bSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3MjI3MA==", "bodyText": "nit: we can make this a static function and rename it to something like convertToVoters.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r529572270", "createdAt": "2020-11-24T14:09:26Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -370,14 +370,23 @@ private void onBecomeLeader(long currentTimeMs) {\n         );\n     }\n \n+    private List<Voter> getVotersFromVoterId(Set<Integer> voterIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5ODIwOQ==", "bodyText": "Just wanted to know any particular reason you want this to be a static method?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r530398209", "createdAt": "2020-11-25T14:06:19Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -370,14 +370,23 @@ private void onBecomeLeader(long currentTimeMs) {\n         );\n     }\n \n+    private List<Voter> getVotersFromVoterId(Set<Integer> voterIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3MjI3MA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzNzI5MQ==", "bodyText": "Just a nitpick. It doesn't need to be a object method as it doesn't use any of the instance fields. When reading and maintaining a lot of code it is good to know that a method doesn't use instance fields.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r530537291", "createdAt": "2020-11-25T17:25:49Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java", "diffHunk": "@@ -370,14 +370,23 @@ private void onBecomeLeader(long currentTimeMs) {\n         );\n     }\n \n+    private List<Voter> getVotersFromVoterId(Set<Integer> voterIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3MjI3MA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTI5ODEyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMDo0OVrOH5DCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMDo0OVrOH5DCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MDYxMw==", "bodyText": "Based on the implementation on this PR, this field contains all of the voters in the quorum irrespective of whether they voted or not. In other words I think we should change the description to something like \"The set of voters in the quorum for this epoch\".", "url": "https://github.com/apache/kafka/pull/9539#discussion_r529580613", "createdAt": "2020-11-24T14:20:49Z", "author": {"login": "jsancio"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,9 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The voters who voted at the time of election\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTMxMjUzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyNDowMVrOH5DLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDowNzowMVrOH509-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkwNA==", "bodyText": "I think we should add an LeaderEpoch field that documents the epoch associated with this LeaderChangeMessage. What do you think @vamossagar12 and @hachikuji ?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r529582904", "createdAt": "2020-11-24T14:24:01Z", "author": {"login": "jsancio"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,9 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The voters who voted at the time of election\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMzI3NQ==", "bodyText": "Yeah I think it makes sense to add the LeaderEpoch.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r529623275", "createdAt": "2020-11-24T15:16:01Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,9 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The voters who voted at the time of election\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkwNA=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5ODcxMw==", "bodyText": "Plz let me know if this needs to be added.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r530398713", "createdAt": "2020-11-25T14:07:01Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,9 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The voters who voted at the time of election\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MjkwNA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTM3MDc3OnYy", "diffSide": "RIGHT", "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozNjoyMVrOH5DvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozNzoxMVrOH590zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MjE5Mw==", "bodyText": "I think we have two options here. This class can contain either:\nprivate final Map<Integer, VoterState> voterReplicaStates = new HashMap<>(); \nwhere we change this expression to boolean hasEndorsedLeader = grantingVoters.contains(voterId);\nand remove the field private final Set<Integer> grantingVoters = new HashSet<>();\nor:\nprivate final Set<Integer> voters = new HashSet<>(); \nprivate final Set<Integer> grantingVoters = new HashSet<>(); \nand change a few of the methods here use these two sets instead of voterReplicaStates.\nI like the first option but it is up to you.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r529592193", "createdAt": "2020-11-24T14:36:21Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -51,6 +53,7 @@ protected LeaderState(\n             boolean hasEndorsedLeader = voterId == localId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NzA5Mg==", "bodyText": "@jsancio , even I would prefer option 1 but slightly confused on it. You suggest to check for endorsement using boolean hasEndorsedLeader = grantingVoters.contains(voterId); and then asking to remove the field grantingVoters . Am I missing something ?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r530397092", "createdAt": "2020-11-25T14:04:46Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -51,6 +53,7 @@ protected LeaderState(\n             boolean hasEndorsedLeader = voterId == localId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MjE5Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MzgyMg==", "bodyText": "Yes, that's correct. You will have to change the implementation of grantingVoters() to something like:\npublic Set<Integer> endorsingVoters() { \n    return voterReplicaStates\n        .values()\n        .stream()\n        .filter(voter -> voter.hasEndorsedLeader)\n        .map(voter -> voter.stateId)\n        .collect(Collectors.toSet()); \n}\nNotice the change in the method name. We can also change nonEndorsingFollowers to nonEndorsingVoters for consistency.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r530543822", "createdAt": "2020-11-25T17:37:11Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -51,6 +53,7 @@ protected LeaderState(\n             boolean hasEndorsedLeader = voterId == localId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MjE5Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzY1MDc4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoxODoyNVrOH83c_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjo1NzowOVrOIBEoug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ==", "bodyText": "The reason we didn't have this is because the batch header already has a field for the leader epoch.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r533585151", "createdAt": "2020-12-01T17:18:25Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMDI4Nw==", "bodyText": "hmm in that case, this might seem as redundant information then? I am sorry I have not seen the batch header message but is  that information would be handy when we view the LeaderChangeMessage? I felt adding it here might increase the debugging related information for Leadership changes.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534120287", "createdAt": "2020-12-02T12:12:58Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NjY3Mw==", "bodyText": "To me the question that we need to answer is if we want this messages to be self contained. Meaning do we only need to have this message to know the state of the election or leader change. Or do we also need to know where in the log this message was inserted.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534476673", "createdAt": "2020-12-02T20:58:03Z", "author": {"login": "jsancio"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwOTgxNg==", "bodyText": "@jsancio , from what I understood, looking at just the LeaderChangeMessage , the epoch won't be available. i looked at the code in appendControlRecord which gets invoked for a LeaderChangeMessage but i couldn't find it. The record appends to the log on it's own would have it. That's my understanding.\nWith this information that I have, I think it makes sense to still add it unless it isn't agreed upon?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534909816", "createdAt": "2020-12-03T08:28:08Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjczNzgwNw==", "bodyText": "hi @hachikuji , @jsancio , wanted to know if we plan to have the LeaderEpoch field in the LeaderChangeMessage.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r536737807", "createdAt": "2020-12-05T12:51:13Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0Mjk5MQ==", "bodyText": "I think I'd rather leave it out. Conceptually it would be useful if it was included, but I am not sure what it actually buys us in practice and it introduces the possibility of inconsistency between the epoch in the message and that in the batch header.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r537742991", "createdAt": "2020-12-07T18:47:19Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5NTQ1MA==", "bodyText": "Thanks @hachikuji , I have removed it.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r537995450", "createdAt": "2020-12-08T02:57:09Z", "author": {"login": "vamossagar12"}, "path": "clients/src/main/resources/common/message/LeaderChangeMessage.json", "diffHunk": "@@ -22,7 +22,11 @@\n     {\"name\": \"LeaderId\", \"type\": \"int32\", \"versions\": \"0+\",\n       \"about\": \"The ID of the newly elected leader\"},\n     {\"name\": \"Voters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n-      \"about\": \"The voters who voted for the current leader\"}\n+      \"about\": \"The set of voters in the quorum for this epoch\"},\n+    {\"name\": \"GrantingVoters\", \"type\": \"[]Voter\", \"versions\": \"0+\",\n+      \"about\": \"The voters who voted for the leader at the time of election\"},\n+    {\"name\": \"LeaderEpoch\", \"type\": \"int32\", \"versions\": \"0+\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NTE1MQ=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzcwNTc1OnYy", "diffSide": "RIGHT", "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzozMTowOFrOH83_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMjo0Nzo1MVrOH_3v3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5Mzg2OA==", "bodyText": "I think the terminology may be causing some confusion here. The \"granting\" voters are those who have voted for the leader and which the leader is using as the basis of its election. The \"endorsing\" voters are those who have acknowledged the leader. The set of endorsing voters changes over time as the voters convert to followers and begin fetching. We use nonEndorsingVoters to know which voters still need to be sent BeginQuorumEpoch. Note that it is possible for a voter to have granted a vote, but not yet endorsed the election (because it does not know the vote succeeded).\nWe should not conflate these sets, but maybe we can come up with better terms to avoid the confusion. I would stick with \"granting\" voters as the set of voters who granted the leader's candidacy. However, maybe we can change \"endorsing\" to \"acknowledged\"? These are the voters who have acknowledged the election result. What do you think?", "url": "https://github.com/apache/kafka/pull/9539#discussion_r533593868", "createdAt": "2020-12-01T17:31:08Z", "author": {"login": "hachikuji"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -72,11 +73,20 @@ public int epoch() {\n         return voterReplicaStates.keySet().stream().filter(id -> id != localId).collect(Collectors.toSet());\n     }\n \n+    public Set<Integer> endorsingVoters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExODY4MQ==", "bodyText": "Yeah that makes sense. As you explained, endorsing are those voters who have acknowledged the BeginQuorumEpoch request from the leader, so eventually if the leader is accepted, this set will be all the voters who voted.\nRegarding endorsing v/s acknowledged, can we also add what has been acknowledged? Like, endoresedQuorumEpoch or endorsedLeaderCandidacy or something like this. Just adding context, might clear the confusion. WDYT @hachikuji , @jsancio", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534118681", "createdAt": "2020-12-02T12:10:07Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -72,11 +73,20 @@ public int epoch() {\n         return voterReplicaStates.keySet().stream().filter(id -> id != localId).collect(Collectors.toSet());\n     }\n \n+    public Set<Integer> endorsingVoters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5Mzg2OA=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NzUxNg==", "bodyText": "Good to know the subtle difference. \"acknowledged\" sounds good to me.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534477516", "createdAt": "2020-12-02T20:59:32Z", "author": {"login": "jsancio"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -72,11 +73,20 @@ public int epoch() {\n         return voterReplicaStates.keySet().stream().filter(id -> id != localId).collect(Collectors.toSet());\n     }\n \n+    public Set<Integer> endorsingVoters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5Mzg2OA=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMTIwNg==", "bodyText": "Ok. I will change it to acknowledged then..", "url": "https://github.com/apache/kafka/pull/9539#discussion_r534911206", "createdAt": "2020-12-03T08:28:57Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -72,11 +73,20 @@ public int epoch() {\n         return voterReplicaStates.keySet().stream().filter(id -> id != localId).collect(Collectors.toSet());\n     }\n \n+    public Set<Integer> endorsingVoters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5Mzg2OA=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjczNTcwOA==", "bodyText": "@jsancio , going by all the discussions here, I needed to revert some of the changes you had suggested in #9539 (comment) as a couple of test cases were failing. The issue is on this line:\n\n  \n    \n      kafka/raft/src/main/java/org/apache/kafka/raft/LeaderState.java\n    \n    \n         Line 52\n      in\n      ce275e2\n    \n    \n    \n    \n\n        \n          \n           boolean hasEndorsedLeader = grantingVoters.contains(voterId); \n        \n    \n  \n\n\nNote that, this is a deviation from the original code which was:\nboolean hasEndorsedLeader = voterId == localId;\nand the test case which was failing because of this was this line in particular:\nhttps://github.com/apache/kafka/pull/9539/files#diff-01c9950503611c357b85ef5b8850d2fbc6060075ce028bf4f86dfc6cbd63fd3cR255\nReason being, when transitionToLeader is invoked from QuorumState upon becoming the leader, it passes in the set of granting voters. Keeping in mind the explanation provided by @hachikuji above, these are all the voters who voted for the current leader.\nIf you check the above erroneous condition, we are checking if a voter has endorsed the voting by checking if it is present in the granting voters list:\nboolean hasEndorsedLeader = grantingVoters.contains(voterId);\nSo, the problem is, this condition will force all voters to be considered as having endorsed the Leader even before the BeginQuorumEpoch request response dance has begun.\nThe test cases in question fails because the pollLeader() method in KafkaRaftClient, checks the nonEndorsingVoters and sends the BeginQuorumEpoch request to nonEndorsed ones here:\nlong timeUntilSend = maybeSendRequests(\n            currentTimeMs,\n            state.nonEndorsingVoters(),\n            this::buildBeginQuorumEpochRequest\n        );\n\nbut it never gets to do that because every granting voter has been marked as an endorsed voter.\nLastly, we don't really need the acknowledgedVoters here because all we need are the granting voters in the LeaderChangeMessage i.e the voters who voted for the Leader in the current  epoch.\nSo, I am reverting the changes and now, the test cases have all passed as well. There were some timeout related errors as well which I believe which got resolved as well.", "url": "https://github.com/apache/kafka/pull/9539#discussion_r536735708", "createdAt": "2020-12-05T12:47:51Z", "author": {"login": "vamossagar12"}, "path": "raft/src/main/java/org/apache/kafka/raft/LeaderState.java", "diffHunk": "@@ -72,11 +73,20 @@ public int epoch() {\n         return voterReplicaStates.keySet().stream().filter(id -> id != localId).collect(Collectors.toSet());\n     }\n \n+    public Set<Integer> endorsingVoters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5Mzg2OA=="}, "originalCommit": {"oid": "ce275e29beb48611425708fbe67d28d17329845a"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3769, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}