{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjU5Njcx", "number": 9157, "reviewThreads": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyMzoxMlrOEbwyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowOTowOVrOEhboiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ2MjgxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyMzoxMlrOHF4Tqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyMzoxMlrOHF4Tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNzQ2Nw==", "bodyText": "This is really just the timestamp of the previous record, right? Can we call it something that reflects that", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475927467", "createdAt": "2020-08-24T22:23:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -183,7 +188,8 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n             //create right window for previous record\n             if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n+                final long leftWindowEnd = latestLeftTypeWindow.key.window().end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ3NTUwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoyODowOFrOHF4bGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxNDo1MlrOHHQ--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTM2OQ==", "bodyText": "We need to make sure the fetch bounds don't go into the negative. We only call processEarly if the record's timestamp is within the timeDifferenceMs, but here we search starting at timestamp - 2*timeDifferenceMs", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475929369", "createdAt": "2020-08-24T22:28:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -148,7 +153,7 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean rightWinAlreadyCreated = false;\n \n             // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n             try (\n                     final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzMTUxOA==", "bodyText": "Fetch having negative bounds doesn't throw any errors or cause any issues, is there a different reason to make sure the bounds aren't negative? Since we don't store windows with a negative start time it shouldn't return anything we don't expect", "url": "https://github.com/apache/kafka/pull/9157#discussion_r476531518", "createdAt": "2020-08-25T15:18:57Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -148,7 +153,7 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean rightWinAlreadyCreated = false;\n \n             // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n             try (\n                     final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTM2OQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MTEyNg==", "bodyText": "Are you sure it's actually returning something? Have you tested it with a rocksdb store or just with the in-memory store? I think the in-memory store would handle this fine since it never serializes the key/timestamps, but if you have a rocksdb store (or a caching layer) then the range query works by looking up any data between the serialized bounds. Unfortunately a negative long is lexicographically greater than a positive long when serialized to bytes. The \"negative\" is encoded as a leading 1 -- which means the lower bound ends up being \"larger\" than the upper bound.\nI would assume that would result in no data being returned, but I'm not actually 100% sure what would happen", "url": "https://github.com/apache/kafka/pull/9157#discussion_r476781126", "createdAt": "2020-08-25T22:02:56Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -148,7 +153,7 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean rightWinAlreadyCreated = false;\n \n             // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n             try (\n                     final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTM2OQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4MDM0Ng==", "bodyText": "Ah yeah the different types of stores is a good point, I haven't tested with all of them. I changed it to do 0 or the positive fetch start", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477380346", "createdAt": "2020-08-26T15:14:52Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -148,7 +153,7 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean rightWinAlreadyCreated = false;\n \n             // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n             try (\n                     final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTM2OQ=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTQ5ODE3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjozODowM1rOHF4otQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjowNjozMFrOHGslIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMjg1Mw==", "bodyText": "I think this fetch might break if you go into the negatives, should just fetch starting from 0", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475932853", "createdAt": "2020-08-24T22:38:03Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -211,6 +217,67 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzMTc0NQ==", "bodyText": "Same as above, it seems like it still works as expected", "url": "https://github.com/apache/kafka/pull/9157#discussion_r476531745", "createdAt": "2020-08-25T15:19:15Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -211,6 +217,67 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMjg1Mw=="}, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MzkwNQ==", "bodyText": "See above -- even if it seems to be working I think we should restrict the range anyway. We know that there's no windows earlier than 0 so why extend the query beyond this?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r476783905", "createdAt": "2020-08-25T22:06:30Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -211,6 +217,67 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMjg1Mw=="}, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU4OTQ5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxMzoxOVrOHF5hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxMzoxOVrOHF5hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NzM5NA==", "bodyText": "This is just a window from [0, timeDifferenceMs] that stores the aggregation of all the \"early\" records, right? I can't really think of a more descriptive name so can we just leave a comment explaining what it's for", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475947394", "createdAt": "2020-08-24T23:13:19Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTcxMTMyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0MjoyOFrOHF6yNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0MjoyOFrOHF6yNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2ODA1NA==", "bodyText": "It took me a second to get this -- can we explicitly check if startTime == timestamp + 1 instead of falling back to else and implicitly relying on the fetch bounds? You can just get rid of the else altogether or throw an IllegalStateException if none of the specific conditions are met and the else is reached, whatever makes sense to you", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475968054", "createdAt": "2020-08-24T23:42:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTcyMjAwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0NDo1MlrOHF648Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0NDo1MlrOHF648Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2OTc3Nw==", "bodyText": "nit: can we make this if startTime == 0 ? That seems slightly easier to understand, and then all the conditionals can be in terms of startTime which is a bit more intuitive since that's what we're iterating over. Context switching between startTime and endTime kind of makes me lose my train of thought", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475969777", "createdAt": "2020-08-24T23:44:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTc0MTE1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0OTo0M1rOHF7Fyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo0OTo0M1rOHF7Fyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk3MzA2Ng==", "bodyText": "most recent max timestamp\n\nHuh? I think I know what you're trying to say here but it seems like two different phrases got a bit mixed up here", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475973066", "createdAt": "2020-08-24T23:49:43Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the most recent max timestamp in the combined window", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTc0NzM2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzo1MToxMVrOHF7J_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTozOToyNlrOHGeFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk3NDE0MQ==", "bodyText": "This name keeps throwing me off...right window of what? Is it like previousRecordRightWindow?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475974141", "createdAt": "2020-08-24T23:51:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the most recent max timestamp in the combined window\n+                final long rightWinStart = combinedWindow.value.timestamp() + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0NjQxMA==", "bodyText": "I went with maxRightWindowStart since it's not always going to be the previous record, either in terms of process order or time order.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r476546410", "createdAt": "2020-08-25T15:39:26Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the most recent max timestamp in the combined window\n+                final long rightWinStart = combinedWindow.value.timestamp() + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk3NDE0MQ=="}, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTc4Njg4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowMDo1N1rOHF7kZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowMDo1N1rOHF7kZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk4MDkwMw==", "bodyText": "It's not immediately obvious why this is correct/captures all possible cases so we should leave a comment, or better yet factor out this condition into a descriptively named method (or best yet, do both)\nI was concerned about out-of-order records, since in that case the previous record would obviously not be the one with the maximum timestamp in the combined window. But I realized that we actually never need to create a previous record's right window for out-of-order early records, since there's no way for a full timeDifferenceMs to fit between the previous record and whatever the max record in the combined window is. So, all we need to do is make sure we only try to create the previous record's right window if the current window is the maximum record within the combined window, ie the combinedWindow.value.timestamp() < timestamp\nBut that's a very long and pretty ineloquent comment to leave in the code. Hopefully you can come up with a more concise explanation", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475980903", "createdAt": "2020-08-25T00:00:57Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the most recent max timestamp in the combined window\n+                final long rightWinStart = combinedWindow.value.timestamp() + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && combinedWindow.value.timestamp() < timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTc4ODMwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowMToxOFrOHF7lbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowMToxOFrOHF7lbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk4MTE2Nw==", "bodyText": "nit: aggregated -> aggregate", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475981167", "createdAt": "2020-08-25T00:01:18Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -210,6 +216,66 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n         }\n \n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final HashSet<Long> windowStartTimes = new HashSet<Long>();\n+\n+            try (\n+                    final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                            key,\n+                            key,\n+                            timestamp - 2 * windows.timeDifferenceMs(),\n+                            // to catch the current record's right window, if it exists, without more calls to the store\n+                            timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime == windows.timeDifferenceMs()) {\n+                        combinedWindow = next;\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the most recent max timestamp in the combined window\n+                final long rightWinStart = combinedWindow.value.timestamp() + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && combinedWindow.value.timestamp() < timestamp) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregated", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTgxMDgzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowNzowN1rOHF70sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMDowNzowN1rOHF70sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk4NTA3Mw==", "bodyText": "Can we add maybe one or two more tests? I think at the least we should have one test that processes only early records, and one test that covers input(s) with the same timestamp.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r475985073", "createdAt": "2020-08-25T00:07:07Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -328,6 +328,68 @@ public void testAggregateLargeInput() {\n         );\n     }\n \n+    @Test\n+    public void testEarlyRecords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjgxMDcyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyMDoyN1rOHHn82A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyMDoyN1rOHHn82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc1NjYzMg==", "bodyText": "This comment kind of comes out of nowhere since there's no concept of the \"combined window\" outside of processEarly. Maybe you can just add a quick mention of what it is and that it's for early records", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477756632", "createdAt": "2020-08-27T00:20:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Njk2ODQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDozNTowOVrOHHpoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoyOTozOFrOHJM-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA==", "bodyText": "We only need to check if the previous right window needs to be created if the current record's left window was not previously a left-type window, ie the max_timestamp < timestamp. Otherwise, we'd have already created any windows since that implies we processed a record with this exact timestamp already.\nSo then why do we set latestLeftTypeWindow = next ? It seems like it's possible that this actually isn't a left-type window, in which case we shouldn't overwrite any existing value for latestLeftTypeWindow.\nOn the other hand, if it actually is a left type window, then that means we don't need to create the previous record's right window so we should just set it to null. But that seems to apply regardless of whether this is the early record combined window or not?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477784084", "createdAt": "2020-08-27T00:35:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNTgzMg==", "bodyText": "I see what you're saying about checking to see if the left window (in this case [0,timeDifference]) was already a left window and I can substitute for that check. The overall point was to catch instances of a record coming in at say 10 (with a timeDifference of 10) and also having one at 5, so 5 needs a right window but the combined window will only be picked up by this if() since endTime == timestamp. Setting latestLeftTypeWindow = next here will generally not be a left type window, but the combined window is a special case since there are records that may need a right window in there anyways. Because this tracks the latest left type window, storing the combined window should never override any other formal left type window that needs a right window.\nThat being said, I get that this is confusing. Do you think changing the check to `if (endTime == windows.TimeDifferenceMs() && !isLeftWindow(next)) would make it seem cleaner?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478435832", "createdAt": "2020-08-27T13:52:33Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMDI1OA==", "bodyText": "That being said, I get that this is confusing. Do you think changing the check to if (endTime == windows.TimeDifferenceMs() && !isLeftWindow(next)) would make it seem cleaner?\n\nHaha no, I don't think saying if (!isLeftWindow(next)): then next = latestLeftTypeWindow would be less confusing. If we call a variable leftTypeWindow then it should always be a left type window.\nThat said, I now see what you meant here and it's the same problem as above, with the same fix of replacing latestLeftTypeWindow with previousRecordTimestamp. In that case I think we can just remove this check entirely (ie, don't explicitly check if it's the combined window), and all we need to do is make sure previousRecordTimestamp is set correctly", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478730258", "createdAt": "2020-08-27T22:28:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMDc2NQ==", "bodyText": "I think with this replacement then we might be able to get out of doing any kind of special handling for the combined window outside of processEarly", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478730765", "createdAt": "2020-08-27T22:29:39Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0NDE2Mg==", "bodyText": "I think we'd still need a check within this part of the if() to catch the previous timestamp, right? I think we could take out the if (endTime == windows.TimeDifferenceMS()) and instead always do previousRecord = next.value.timestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478744162", "createdAt": "2020-08-27T23:09:37Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1ODc3OQ==", "bodyText": "Yeah sorry I didn't mean that we shouldn't have any conditionals here whatsoever, I just meant that we don't need the combined window check (or really anything other than what we need to accurately set previousRecordTimestamp)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478758779", "createdAt": "2020-08-28T00:00:15Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1OTk5Ng==", "bodyText": "I guess you could just have a separate setPreviousRecordTimestampIfNecessary(window, previousRecordTimestamp) method that sets the previousRecordTimestamp to the window's max timestamp if it's larger. And then if it ends up that previousRecordTimestamp == timestamp then we can automatically skip all of the window creation below, which is nice", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478759996", "createdAt": "2020-08-28T00:05:10Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMTgzMA==", "bodyText": "Would the window's max timestamp always be larger than the previous window's by nature of moving forward in time? I think it would be somewhat more convenient but I feel like adding additional boolean checks makes the algorithm feel longer, especially if the issue will get handled in later checks", "url": "https://github.com/apache/kafka/pull/9157#discussion_r479411830", "createdAt": "2020-08-28T16:29:38Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n                             latestLeftTypeWindow = next;\n                         }\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NDA4NA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Njk3ODUzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDozNjowMlrOHHpu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoxMTowM1rOHIlSRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NTg0OA==", "bodyText": "Parameter alignment is off. Also the naming here isn't very clear about what it's for/what it means. Don't have great suggestions but maybe previousRightWindowMustBeCreated or even just previousRecordIsWithinMaxTimeDifferenceFromCurrentRecord and then a quick comment saying that this means we will have to create a right window for the previous record.\nAlso shouldn't rightWindowStart <= currentRecordTimestamp always be true?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477785848", "createdAt": "2020-08-27T00:36:02Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && previousRightWindowPossible(rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && previousRightWindowPossible(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean previousRightWindowPossible(\n+            final long rightWindowStart,\n+            final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4MDMyOQ==", "bodyText": "Ok, I see that rightWindowStart <= currentRecordTimestamp isn't necessarily true when you call this from processEarly but I think you're kind of abusing this poor method \ud83d\ude1c . I would keep things simple here and make sure the parameters always mean exactly the same thing when you call this, ie rightWindowStart should always mean that \"the start time of the right window for the record which is previous to the current record\" . If that means some duplicated boolean checks here and there, so be it.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477880329", "createdAt": "2020-08-27T01:36:22Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && previousRightWindowPossible(rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && previousRightWindowPossible(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean previousRightWindowPossible(\n+            final long rightWindowStart,\n+            final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NTg0OA=="}, "originalCommit": null, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNzU5Ng==", "bodyText": "Yeah I definitely overused this method, the boolean checks were all so similar but not quite the same that I just kinda forced it together. In terms of duplicated boolean checks, do you mean similar boolean methods would be preferable? Or keeping the boolean checks in the main algorithm", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478437596", "createdAt": "2020-08-27T13:54:58Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && previousRightWindowPossible(rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && previousRightWindowPossible(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean previousRightWindowPossible(\n+            final long rightWindowStart,\n+            final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NTg0OA=="}, "originalCommit": null, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NDcxNg==", "bodyText": "Update: after parsing out the sketchy use of this function I went with\n// previous record's right window does not already exist and current record falls within previous record's right window private boolean rightWindowNecessaryAndPossible\nI added the check for !windowStartTimesContains()` to clean up the original check (since both check that), which is why I added the \"Necessary\" to the function name. WDYT?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478454716", "createdAt": "2020-08-27T14:18:31Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && previousRightWindowPossible(rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && previousRightWindowPossible(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean previousRightWindowPossible(\n+            final long rightWindowStart,\n+            final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NTg0OA=="}, "originalCommit": null, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MTU0MA==", "bodyText": "I guess \"Necessary\" still seems kind of open-ended/vague. By that you mean, \"is not already created\", right? But maybe we should wait until we see the final form of this method in case there are any further changes, and then we can go back and try to fish out a more specific name", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478761540", "createdAt": "2020-08-28T00:11:03Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;\n+                if (!windowStartTimes.contains(rightWinStart) && previousRightWindowPossible(rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && previousRightWindowPossible(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean previousRightWindowPossible(\n+            final long rightWindowStart,\n+            final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc4NTg0OA=="}, "originalCommit": null, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzA5MTE1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo0NjoyOFrOHHq8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoxNTozM1rOHIlWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgwNTYzMg==", "bodyText": "I'm having trouble wrapping my head around this line. Why would we create a right window at latestLeftTypeWindow.maxTimestamp + 1 if the previous record was at timeDifferenceMs? Wouldn't we have created the right window for whatever is at latestLeftTypeWindow.maxTimestamp + 1 when we processed the previousRecord?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477805632", "createdAt": "2020-08-27T00:46:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -174,12 +181,11 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     }\n                 }\n             }\n-\n             //create right window for previous record\n             if (latestLeftTypeWindow != null) {\n-                final long leftWindowEnd = latestLeftTypeWindow.key.window().end();\n-                final long rightWinStart = leftWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : leftWindowEnd + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0MjczOQ==", "bodyText": "If previous record is at timeDifferenceMs then the \"left type window\" we found was the window from [0,timeDifference]. Since we know it's the left window from windowEnd == timeDifference, we know that either we'll create a right window for the max record in the combined window, or we'll create a right window for the record at the end point of the window (which would still be the max record).\nI see that previousRecord is misleading, I renamed it to previousWindowEnd. previousRecord here was really just the windowEnd, since there might not be a record at the end of the combined window, which is the case this is covering. This case is specifically for records that come outside of the combined window, but still need to create a right window for something in the combined window, in which case the right window won't already exist.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478442739", "createdAt": "2020-08-27T14:01:58Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -174,12 +181,11 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     }\n                 }\n             }\n-\n             //create right window for previous record\n             if (latestLeftTypeWindow != null) {\n-                final long leftWindowEnd = latestLeftTypeWindow.key.window().end();\n-                final long rightWinStart = leftWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : leftWindowEnd + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgwNTYzMg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MjY2Nw==", "bodyText": "Ok before I continue to try and wrap my head around this, is this particular line going to be moot if we start tracking previousRecordTimestamp instead of latestLeftTypeWindow? The point of it was just to distinguish that special case, but now we can just say rightWindowStart = previousRecordTimestamp + 1 -- does that sound right?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478762667", "createdAt": "2020-08-28T00:15:33Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -174,12 +181,11 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     }\n                 }\n             }\n-\n             //create right window for previous record\n             if (latestLeftTypeWindow != null) {\n-                final long leftWindowEnd = latestLeftTypeWindow.key.window().end();\n-                final long rightWinStart = leftWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : leftWindowEnd + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n+                final long previousRecord = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousRecord == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousRecord + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgwNTYzMg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzI3MjIwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTowMzo0MlrOHHs4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzo1OToxMVrOHIlGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgzNzM3OQ==", "bodyText": "Not sure I understand the || endTime == windows.timeDifferenceMs(), is that left over from the 1st PR? It seems important to enforce that the window latestLeftTypeWindow points to is actually a left window", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477837379", "createdAt": "2020-08-27T01:03:42Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NTEzNw==", "bodyText": "It is, until we have a combined window that holds records that don't have corresponding left windows. I treated the combined window as a defacto left window since it's taking the place of early record's left windows. EX: for timeDifference=10, a record at 4 would be stored in [0,10]. If a record comes in at 11, we need the window from [5,15], but we only create that if we find a leftTypeWindow, which doesn't exist for 4. For these records, [0,10] is the only window we have, and therefore the closest thing to a left type window.\nI didn't change variable names because I wanted the original algorithm to be understandable. It feels like adding early records has added a significant amount of complexity and I do wonder if it's worth it to have the addition confusion for testing flexibility - WDYT?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478445137", "createdAt": "2020-08-27T14:05:26Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgzNzM3OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNTIwOQ==", "bodyText": "I think it's way too confusing if latestLeftTypeWindow is not necessarily a left type window, we should definitely rename it. But I think we can pick a reasonable name -- the point of keeping this window is really just to learn the timestamp of the previous record, right? Do we even need the aggregate or any other data for this window, or can we just keep track of a long previousRecordTimestamp variable and any time we process a new window in the loop, we just check if window.value.timestamp > previousRecordTimestamp and if so then we set previousRecordTimestamp to this new value\nActually I think that sheds some light on all this: the whole \"keep track of the latest left type window\" idea was a clever way to find the previous record in the original design, before we knew  we could use ValueAndTimestamp to get the max  timestamp of a window. And we never went back over that clever hack and realized we could be less clever now, and just go with the simple approach of checking the max timestamp of every window", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478725209", "createdAt": "2020-08-27T22:14:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgzNzM3OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0MzUyOA==", "bodyText": "Yeah I think this makes a lot of sense. The one catch I found is that we check to see if latestLeftTypeWindow != null when creating the current record's left window, and if we update previousRecord each time we see a window, we could get a number that isn't actually within range for the current record's left window. EX: record comes in at 30, timeDifference = 10. we have a window [10,20] but it's a right window, and within it the only record is at 12. since it's the max record within that window, we would store it in previousRecordTimestamp , but it's right window is [13,23] which we don't want to create. So I think storing just the long is fine (mostly typing it out to work out my thought process), and the check rightWindowNecessaryAndPossible would weed out us creating the [13,23] window on accident. Does this all seem right?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478743528", "createdAt": "2020-08-27T23:07:36Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgzNzM3OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1ODQ4Mg==", "bodyText": "Yeah, you're saying that we just always keep track of the previousRecordTimestamp, but before we go ahead and create a left window for the current window we just actually verify that the previous record is within range? That makes sense to me, actually if anything I feel like it will make rightWindowNecessaryAndPossible even more clear to put it in terms of previousRecordTimestamp. What I'm realizing from this is that it's easier to understand these boolean checks in terms of the actual record locations, in general. Maybe it's just my mental model, I still picture a rectangle sliding over boxes on a timeline \ud83d\ude04", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478758482", "createdAt": "2020-08-27T23:59:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -160,11 +160,18 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n+                        // store the combined window if it is found so that a right window can be created for\n+                        // the combined window's max record, as needed\n                         if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgzNzM3OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQzOTQzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyMzoyMVrOHHurgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoxNzoxMFrOHIlYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2Njg4MA==", "bodyText": "Now that I think about it, this isn't exactly true -- you could have the previous record at 10 and the current record at 21 (size is 10), then you'd have to create a right window for [11, 21] but the left window is also [11, 21] which is empty (except for the current record of course).So you'd want to check that previousRecord >= currentRecord - timeDifference which is actually technically what previousRightWindowPossible(rightWindow, timestamp) returns but it took me a long time to figure all that out because we're sort of passing in the wrong parameters here. In this call we pass in latestLeftTypeWindow.value.timestamp which is equivalent to previousRecord.timestamp which is not conceptually the same as the rightWindowStart . I know the logic works out the way you intended but it's pretty hard to untangle. You should update the comment and create a separate method for this case which you can name more accurately for this specific scenario", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477866880", "createdAt": "2020-08-27T01:23:21Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -189,8 +195,8 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create --> new record's left window is not empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1OTQwNQ==", "bodyText": "It actually still works for that example. The range doesn't pick up the window from [0,10] as it goes from timestamp - 2*timeDifference, so for this example the range would start at 1. I initially did this to avoid these scenarios entirely. You are right though that the comment doesn't hold for the combined window scenarios. For example, we find the combined window and store it as \"latestLeftTypeWindow\" when we process a record at say, 14. If the max record in \"latestLeftTypeWindow\" is 2, then we don't want to create the right window for that, since it would be [3,13].\nI improved the comment to be if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478459405", "createdAt": "2020-08-27T14:25:01Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -189,8 +195,8 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create --> new record's left window is not empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2Njg4MA=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MzA3MQ==", "bodyText": "Here too, is this kind of moot now that we can just track the previousRecordTimestamp? IIUC all we really want to do is make sure that the left window is not empty, which is actually a pretty simple calculation in terms of the previousRecordTimestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478763071", "createdAt": "2020-08-28T00:17:10Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -189,8 +195,8 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create --> new record's left window is not empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2Njg4MA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQ1OTE0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNjozNFrOHHu4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyOTowMlrOHITBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MDIzNA==", "bodyText": "Actually, do we even need the endTime >= timestamp part of the condition? We're really just iterating over the single dimension of the startTime from 0 to timestamp + 1", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477870234", "createdAt": "2020-08-27T01:26:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2MjM5NA==", "bodyText": "Yeah I think you're right, I'll take it out", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478462394", "createdAt": "2020-08-27T14:29:02Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MDIzNA=="}, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQ2MzY3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNzoyNVrOHHu75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoyOTo0OFrOHIlkdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MTA3OQ==", "bodyText": "iwll \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477871079", "createdAt": "2020-08-27T01:27:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4NDA4OA==", "bodyText": "Also, cool,  I think I understand the concept here but some of the details are a bit fuzzy. Basically if we don't find a right window agg that means we didn't find any windows (besides the combined window), which in turn means that there can only be a single record in the combined window (otherwise you'd get a right window for the earlier record).\nSo we need to use the combined window agg for the current record's right window.  But we should only do that if the one record is actually after the current record, right? I think you actually do implicitly check that is the case below but it's pretty subtle: basically in previousRightWindowPossible you would return false if rightWindowStart > currentRecordTimestamp. But we can check that right here and make it explicit, so that rightWinAgg only ever means the aggregate that we will actually put in the current record's right window. Then we can also clean up previousRightWindowPossible", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477884088", "createdAt": "2020-08-27T01:39:02Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MTA3OQ=="}, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4OTQzOA==", "bodyText": "There can be more than one record in the combined window, but if we don't find any right window agg then there are no records to the left of this record (in time) AND to the right of this record (could be one or the other). There could be multiple to the right though.\nIt took me like 5 minutes to figure this out, but actually the call to previousRightWindowPossible is when we're creating the right window for the previous record, not for the current record. This call doesn't involved rightWindowAgg at all, since the check rightWindowStart > currentRecordTimestamp wouldn't help us figure out if previous record > current record.\nThe check for this is actually a little further down (line 277) where we do rightWindowIsNotEmpty, and there it confirms that the values in rightWinAgg are > timestamp.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478489438", "createdAt": "2020-08-27T15:04:59Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MTA3OQ=="}, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2NjE5Ng==", "bodyText": "Couldn't there still be a record to the left? Like we could have a record at 5 and at 50 and nothing else, then all we would have so far is the combined window and one at [40, 50],  but rightWindowAgg would be null. So that's why we need to check that the combinedWindow.maxTimestamp > timestamp (and if not then we should leave rightWinAgg as null). Looks like this is what you're doing, so not suggesting any changes, just trying to make sure I have this right.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478766196", "createdAt": "2020-08-28T00:29:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3MTA3OQ=="}, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzU1MjMzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0MDo1NVrOHHv46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTowNzowMlrOHIUw7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4NjY5OA==", "bodyText": "See above: we shouldn't rely on previousRightWindow here. Actually I don't think we need it at all? (assuming we move the check in it to the condition above where we use the combined window agg)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r477886698", "createdAt": "2020-08-27T01:40:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n             if (combinedWindow == null) {\n                 final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n                 final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n \n             } else {\n-                //create the right window for the most recent max timestamp in the combined window\n-                final long rightWinStart = combinedWindow.value.timestamp() + 1;\n-                if (!windowStartTimes.contains(rightWinStart) && combinedWindow.value.timestamp() < timestamp) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5MDg2MA==", "bodyText": "The comment here was unclear, that's my bad. It should read only create the previous record's right window if the new record falls within it ... . This part doesn't leverage rightWinAgg, since the agg in the previous record's right window will just be the current record's value.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478490860", "createdAt": "2020-08-27T15:07:02Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -232,40 +239,54 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n \n-                    if (endTime == windows.timeDifferenceMs()) {\n+                    if (startTime == 0) {\n                         combinedWindow = next;\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                    } else if (endTime >= timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window iwll go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n             if (combinedWindow == null) {\n                 final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n                 final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n \n             } else {\n-                //create the right window for the most recent max timestamp in the combined window\n-                final long rightWinStart = combinedWindow.value.timestamp() + 1;\n-                if (!windowStartTimes.contains(rightWinStart) && combinedWindow.value.timestamp() < timestamp) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the right window if new record falls within it and it does not already exist\n+                if (!windowStartTimes.contains(maxRightWindowStart) && previousRightWindowPossible(maxRightWindowStart, timestamp)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg4NjY5OA=="}, "originalCommit": null, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk0Njg0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoxMzozNlrOHIlUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDoxMzozNlrOHIlUpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MjE1MQ==", "bodyText": "Alignment is still off, the first parameter should be on the same line as the method declaration. Also, if this method is only ever used in deciding whether to create the previous record's right window, then let's name the parameter previousRecordRightWindowStart or something. Of course, you could also just pass in the previousRecordTimestamp now that we have that, and then do the math in here. Whatever you think makes the most sense", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478762151", "createdAt": "2020-08-28T00:13:36Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window (window from [0,timeDifference] that contains any early records)\n+                        // if it is found so that a right window can be created for the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousWindowEnd = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousWindowEnd + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && recordFallsWithinCurrentRecordsLeftWindow(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the previous record's right window if the new record falls within it and it does not already exist\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        private boolean recordFallsWithinCurrentRecordsLeftWindow(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(\n+                                                    final Set<Long> windowStartTimes,\n+                                                    final long rightWindowStart,\n+                                                    final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk4ODkyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDozODo0MFrOHIlszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTowODozNFrOHJ8vbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODMzNQ==", "bodyText": "This is also kind of unclear (what is a max right window?), but I get that we can't call it previousRecordRightWindow since we don't know that it is a previous record or not at this point. I think yet again, just keeping track of the previous record's timestamp as we iterate through the windows, will be the most clear; if previousRecordTimestamp is still null by this point, we know right away that we don't have to create a previous right window. And then we can actually drop the rightWindowNecessaryAndPossible check altogether, since we know the current record has to be in range of the right window of the previous record (since we're in processEarly). The one exception is if the previous record and current record are on the same timestamp, so we can actually skip the previous right window creation if previousRecordTimestamp  is null OR equal to timestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478768335", "createdAt": "2020-08-28T00:38:40Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window (window from [0,timeDifference] that contains any early records)\n+                        // if it is found so that a right window can be created for the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousWindowEnd = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousWindowEnd + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && recordFallsWithinCurrentRecordsLeftWindow(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODYyNQ==", "bodyText": "I know it's effectively the same thing, but it feels a bit harder to reason about a \"hypothetical previous record's right window that may actually not be a previous record at all\" than just \"we do/do not have a previous record\"", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478768625", "createdAt": "2020-08-28T00:39:43Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window (window from [0,timeDifference] that contains any early records)\n+                        // if it is found so that a right window can be created for the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousWindowEnd = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousWindowEnd + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && recordFallsWithinCurrentRecordsLeftWindow(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODMzNQ=="}, "originalCommit": null, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5NDQxMg==", "bodyText": "Yeah I see what you mean, I think it makes sense to utilize previous record for both processInOrder and processEarly", "url": "https://github.com/apache/kafka/pull/9157#discussion_r480194412", "createdAt": "2020-08-31T15:08:34Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window (window from [0,timeDifference] that contains any early records)\n+                        // if it is found so that a right window can be created for the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousWindowEnd = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousWindowEnd + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && recordFallsWithinCurrentRecordsLeftWindow(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2ODMzNQ=="}, "originalCommit": null, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjk5MzYwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MToxNlrOHIlvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMDo0MToxNlrOHIlvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2OTAwNA==", "bodyText": "Is this the same as in the non-early process? Maybe we can factor it out into  its own createRightWindowIfNeeded(or whatever)  method.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r478769004", "createdAt": "2020-08-28T00:41:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.Aggregator;\n+import org.apache.kafka.streams.kstream.Initializer;\n+import org.apache.kafka.streams.kstream.Window;\n+import org.apache.kafka.streams.kstream.Windowed;\n+import org.apache.kafka.streams.kstream.SlidingWindows;\n+import org.apache.kafka.streams.processor.AbstractProcessor;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+import org.apache.kafka.streams.state.KeyValueIterator;\n+import org.apache.kafka.streams.state.TimestampedWindowStore;\n+import org.apache.kafka.streams.state.ValueAndTimestamp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrLateRecordDropSensor;\n+import static org.apache.kafka.streams.processor.internals.metrics.TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor;\n+import static org.apache.kafka.streams.state.ValueAndTimestamp.getValueOrNull;\n+\n+public class KStreamSlidingWindowAggregate<K, V, Agg> implements KStreamAggProcessorSupplier<K, Windowed<K>, V, Agg> {\n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n+    private final String storeName;\n+    private final SlidingWindows windows;\n+    private final Initializer<Agg> initializer;\n+    private final Aggregator<? super K, ? super V, Agg> aggregator;\n+\n+    private boolean sendOldValues = false;\n+\n+    public KStreamSlidingWindowAggregate(final SlidingWindows windows,\n+                                         final String storeName,\n+                                         final Initializer<Agg> initializer,\n+                                         final Aggregator<? super K, ? super V, Agg> aggregator) {\n+        this.windows = windows;\n+        this.storeName = storeName;\n+        this.initializer = initializer;\n+        this.aggregator = aggregator;\n+    }\n+\n+    @Override\n+    public Processor<K, V> get() {\n+        return new KStreamSlidingWindowAggregateProcessor();\n+    }\n+\n+    public SlidingWindows windows() {\n+        return windows;\n+    }\n+\n+    @Override\n+    public void enableSendingOldValues() {\n+        sendOldValues = true;\n+    }\n+\n+    private class KStreamSlidingWindowAggregateProcessor extends AbstractProcessor<K, V> {\n+        private TimestampedWindowStore<K, Agg> windowStore;\n+        private TimestampedTupleForwarder<Windowed<K>, Agg> tupleForwarder;\n+        private StreamsMetricsImpl metrics;\n+        private InternalProcessorContext internalProcessorContext;\n+        private Sensor lateRecordDropSensor;\n+        private Sensor droppedRecordsSensor;\n+        private long observedStreamTime = ConsumerRecord.NO_TIMESTAMP;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void init(final ProcessorContext context) {\n+            super.init(context);\n+            internalProcessorContext = (InternalProcessorContext) context;\n+            metrics = internalProcessorContext.metrics();\n+            final String threadId = Thread.currentThread().getName();\n+            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n+                threadId,\n+                context.taskId().toString(),\n+                internalProcessorContext.currentNode().name(),\n+                metrics\n+            );\n+            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n+            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n+            tupleForwarder = new TimestampedTupleForwarder<>(\n+                windowStore,\n+                context,\n+                new TimestampedCacheFlushListener<>(context),\n+                sendOldValues);\n+        }\n+\n+        @Override\n+        public void process(final K key, final V value) {\n+            if (key == null || value == null) {\n+                log.warn(\n+                    \"Skipping record due to null key or value. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n+                    value, context().topic(), context().partition(), context().offset()\n+                );\n+                droppedRecordsSensor.record();\n+                return;\n+            }\n+\n+            final long timestamp = context().timestamp();\n+            processInOrder(key, value, timestamp);\n+        }\n+\n+        public void processInOrder(final K key, final V value, final long timestamp) {\n+\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            // keep the left type window closest to the record\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> latestLeftTypeWindow = null;\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        // store the combined window (window from [0,timeDifference] that contains any early records)\n+                        // if it is found so that a right window can be created for the combined window's max record, as needed\n+                        if (isLeftWindow(next) || endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        // if current record's left window is the combined window, need to check later if there is a\n+                        // record that needs a right window within the combined window\n+                        if (endTime == windows.timeDifferenceMs()) {\n+                            latestLeftTypeWindow = next;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime > timestamp && startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+            //create right window for previous record\n+            if (latestLeftTypeWindow != null) {\n+                final long previousWindowEnd = latestLeftTypeWindow.key.window().end();\n+                final long rightWinStart = previousWindowEnd == windows.timeDifferenceMs() ? latestLeftTypeWindow.value.timestamp() + 1 : previousWindowEnd + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, rightWinStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                // if there's a right window that the new record could create && max record falls within left window --> new record's left window is not empty\n+                if (latestLeftTypeWindow != null && recordFallsWithinCurrentRecordsLeftWindow(latestLeftTypeWindow.value.timestamp(), timestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the combined window's max record before the current record was added\n+                final long maxRightWindowStart = combinedWindow.value.timestamp() + 1;\n+                //only create the previous record's right window if the new record falls within it and it does not already exist\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, maxRightWindowStart, timestamp)) {\n+                    final TimeWindow window = new TimeWindow(maxRightWindowStart, maxRightWindowStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY0MTY2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowODoyNFrOHLCY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowODoyNFrOHLCY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTUyOA==", "bodyText": "Seems like we should move this above into the top-level process instead of first calling processInOrder and then calling processEarly.  For one thing, since we actually do need to iterate the full range for the early records, we can just call processEarly without having to decide between processInOrder and processReverse", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481335528", "createdAt": "2020-09-01T18:08:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -135,7 +127,11 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             observedStreamTime = Math.max(observedStreamTime, timestamp);\n             final long closeTime = observedStreamTime - windows.gracePeriodMs();\n \n-            //store start times of windows we find\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY0MzY3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowOTowMVrOHLCaKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODowOTowMVrOHLCaKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTg0OA==", "bodyText": "Use previousRecordTimestamp like in processEarly.  You can probably remove the comment then", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481335848", "createdAt": "2020-09-01T18:09:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,13 +142,14 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            // Store the previous record\n+            Long previousRecord = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY1NzIzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxMzowOVrOHLCirg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxODozNFrOHLE2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzODAzMA==", "bodyText": "This comment doesn't really add anything, it just describes what the code says. Also, don't we need to check that   windowMaxTimestamp > previousRecordTimestamp before updating previousRecordTimestamp (where windowMaxTimestamp = next.value.timestamp -- it would be nice to assign this to a variable with an explicit name to make it clear what next.value.timestamp actually means).\nSame goes for the below, I guess you could just put the check in a maybeUpdatePreviousRecordTimestamp() method and call it from both places", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481338030", "createdAt": "2020-09-01T18:13:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -164,11 +161,13 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        // update to store the previous record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NTgzNA==", "bodyText": "I'm not sure we need to check that, I think that by the nature of going through windows forward, the next window we find will always have a max timestamp that's larger than the previous window. Right? Lemme do an example:\nRecord comes in @30, previous record was at @23, timeDifference = 10. The last window we find with an endTime < timestamp will be 23's left window, where the max record value is 23. Any earlier windows with endTime < timestamp will have a max value less than 23, so we can override them safely", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481375834", "createdAt": "2020-09-01T19:18:34Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -164,11 +161,13 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        // update to store the previous record", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzODAzMA=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3ODE3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOToxN1rOHLCwBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxOToxN1rOHLCwBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTQ0Ng==", "bodyText": "This doesn't look right..why would we need to pass in the key and value to createRightWindow ? The distinguishing feature of the current record's right window is that it doesn't  include the current record at all. I see that createRightWindow ultimately calls putAndForward which takes a key and value, but that just seems misleading. I think we should either pass in null to putAndForward for things we don't need, or better yet (imo) don't use putAndForward for the right window creation and just have a clean separation between creation of the right window and everything else", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481341446", "createdAt": "2020-09-01T18:19:17Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4MjI1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMDoyMFrOHLCygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMDoyMFrOHLCygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n          \n          \n            \n                     * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481342082", "createdAt": "2020-09-01T18:20:20Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NDIxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMDo1N1rOHLCzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMDo1N1rOHLCzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n          \n          \n            \n                     * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481342393", "createdAt": "2020-09-01T18:20:57Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NTMxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjU2MQ==", "bodyText": "update, or create? (or both?)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481342561", "createdAt": "2020-09-01T18:21:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4OTM2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjozMVrOHLC29A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjozMVrOHLC29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //window from [0,timeDifference] that holds all early records\n          \n          \n            \n                        // A window from [0, timeDifferenceMs] that holds all early records\n          \n      \n    \n    \n  \n\nAlso I'd suggest putting the combinedWindow declaration (and comment) above rightWinAgg to avoid ambiguity in what the comment refers to", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481343220", "createdAt": "2020-09-01T18:22:31Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY5OTkwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNTo0NFrOHLC9sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNTo0NFrOHLC9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NDk0NQ==", "bodyText": "I think we should always assign the next.value.timestamp value to a variable with an explicit name, eg windowMaxRecordTimestamp, because it's pretty non-obvious what it means and easy to forget", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481344945", "createdAt": "2020-09-01T18:25:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcyMTA1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMjowMVrOHLDLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMjowMVrOHLDLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODM4Nw==", "bodyText": "I think we should add a comment somewhere clarifying some things about how we set the previousRecordTimestamp in processEarly:\nBasically, we only need to check and maybe set it when we're on the combined window, because if it's still null when we're past the combined window then we know there was a record greater than the current record in the combined window already, and in that case we must have already created the right window for the actual previous record. Hopefully you can find a better & more concise way to explain that \ud83d\ude04", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481348387", "createdAt": "2020-09-01T18:32:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc2ODY4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0NjoyMFrOHLDoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjo0NzowMFrOHNVSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTk3Mw==", "bodyText": "Just leaving a note to the next reviewer, and making sure I understand this myself:\nIf we didn't find a right window agg that either means\n\nthere were no other windows with startTime <= timestamp, which means there are no records earlier than the current one, and no records later than timeDifference (but within range of the current record). We take that to mean that whatever is in the combined window is an aggregate of records that are all to the right of the current record. Note that there could be a record at the same timestamp as the current record, but we will check for that before actually creating the right window below (by checking !rightWinAlreadyCreated)\nThere is just a single record in the combined window that is earlier than the current record. We check for that with the combinedWindow.value.timestamp() > timestamp condition and in that case create no right window\n\nBy the way, can we move the creation of the right window to just after this block, to keep all the relevant logic together?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481355973", "createdAt": "2020-09-01T18:46:20Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NTQ5Ng==", "bodyText": "Not sure if I can follow. If combinedWindow.value.timestamp() > timestamp this seems to imply that the current record is out-of-order? Above, you state that for the out-of-order case, the right window would always exist already though? So why do we need this additional check?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483285496", "createdAt": "2020-09-03T22:24:08Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTk3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNzA4MQ==", "bodyText": "I think the case you're referring to above is saying that for the out-of-order case, the previous record's right window should already exist -- this line is dealing with the right window of the current record. Maybe that's a signal that we need to clarify the comment/code above (you are referring to this comment, right?)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483307081", "createdAt": "2020-09-03T23:35:22Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTk3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcxODQ4MA==", "bodyText": "Updated the comment in an attempt to do a mini-proof:\n`If there wasn't a right window agg found and we need a right window for our new record, the current aggregate in the combined window will go in the new record's right window. We can be sure that the combined window only holds records that fall into the current record's right window for two reasons:\n\nIf there were records earlier than the current record AND later than the current record, there would be a right window found when we looked for right window agg.\nIf there was only a record before the current record, we wouldn't need a right window for the current record and wouldn't update the rightWinAgg value here, as the combinedWindow.value.timestamp() < inputRecordTimestamp`", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483718480", "createdAt": "2020-09-04T16:10:27Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTk3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0MjM2MQ==", "bodyText": "I think the case you're referring to above is saying that for the out-of-order case, the previous record's right window should already exist -- this line is dealing with the right window of the current record.\n\nAh. I missed this.\n@lct45: the explanation makes sense. Thx!", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483742361", "createdAt": "2020-09-04T16:47:00Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTk3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc5NzM2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Mzo1OFrOHLD7IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjozMzozMVrOHLKiXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDY3Mw==", "bodyText": "It's pretty weird to have to pass in key and value when they're not used to create the right window. I notice they're used in the log message for dropped late windows actually, but it seems odd that we should ever end up dropping the right window of the current record. If the record itself is that old, we should just drop it before even processing it, right?\nAssuming you do that, then it feels a lot more reasonable to not call putAndForward from createRightWindow at all, and just do the actual putting and forwarding for the right window case inline.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481360673", "createdAt": "2020-09-01T18:53:58Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3ODIwMQ==", "bodyText": "Key is still used when the window is put into the windowStore, but value isn't needed. I agree that it's nice to separate them to clean up the if() checks as well", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481378201", "createdAt": "2020-09-01T19:23:10Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDY3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTAyMQ==", "bodyText": "Oh good point, we definitely need the key. But I think separating them turned out well", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481469021", "createdAt": "2020-09-01T22:33:31Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDY3Mw=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTgwMjYyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NDozNVrOHLD-TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo0Mzo0NVrOHLvx9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MTQ4NQ==", "bodyText": "This isn't used anymore, right?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481361485", "createdAt": "2020-09-01T18:54:35Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTk5Mw==", "bodyText": "Just ran it with updates and we do need to check to make sure that the previous record is close enough for us to make a right window from the current record, so I've updated the processEarly create right window for previous record to call this method again", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481391993", "createdAt": "2020-09-01T19:49:54Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MTQ4NQ=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MzMzMw==", "bodyText": "I think you mean  processInOrder, not  processEarly (this is correct in the code, it's just the latest comment that doesn't match up)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481463333", "createdAt": "2020-09-01T22:17:57Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MTQ4NQ=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3OTIyMA==", "bodyText": "Aha yes I very much mean processInOrder", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482079220", "createdAt": "2020-09-02T13:43:45Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +191,113 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecord != null && leftWindowNotEmpty(previousRecord, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (next.value.timestamp() < timestamp) {\n+                            previousRecordTimestamp = next.value.timestamp();\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                }\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createRightWindow(final long timestamp,\n+                                       final ValueAndTimestamp<Agg> rightWinAgg,\n+                                       final K key,\n+                                       final V value,\n+                                       final long closeTime) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MTQ4NQ=="}, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTgwNDM0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NDo0OVrOHLD_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NDo0OVrOHLD_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MTc0OQ==", "bodyText": "nit: remove this added line", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481361749", "createdAt": "2020-09-01T18:54:49Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java", "diffHunk": "@@ -239,6 +239,7 @@ private void doCountSlidingWindows(final  MockProcessorSupplier<Windowed<String>\n             inputTopic.pipeInput(\"2\", \"B\", 1000L);\n             inputTopic.pipeInput(\"3\", \"C\", 600L);\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQ0MTI0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoxMDo1M1rOHLKAvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoxMDo1M1rOHLKAvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MDQxMw==", "bodyText": "Sorry, I think my previous comment was a bit unclear. I meant that we should move this block up to where we set the rightWinAgg right after the loop, since this is what we actually use the rightWinAgg for.\nI think the \"create right window for previous record\" logic is fine wherever", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481460413", "createdAt": "2020-09-01T22:10:53Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +190,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQ3Mjc0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoyMjo1MlrOHLKTrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzo0MjozMVrOHLvuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTI2Mg==", "bodyText": "Do we need to use getValueOrNull here? It seems like rightWinAgg should never be null if we are using it to create a right window", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481465262", "createdAt": "2020-09-01T22:22:52Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -254,35 +257,43 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                 rightWinAgg = combinedWindow.value;\n             }\n \n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n             if (combinedWindow == null) {\n                 final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n                 final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n \n             } else {\n-                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n-                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n-                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n-                }\n                 //update the combined window with the new aggregate\n                 putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n             //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n             }\n         }\n \n-        private void createRightWindow(final long timestamp,\n-                                       final ValueAndTimestamp<Agg> rightWinAgg,\n-                                       final K key,\n-                                       final V value,\n-                                       final long closeTime) {\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n             final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), rightWinAgg.timestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3ODM0Mw==", "bodyText": "Yeah good point, we check for null before calling it", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482078343", "createdAt": "2020-09-02T13:42:31Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -254,35 +257,43 @@ private void processEarly(final K key, final V value, final long timestamp, fina\n                 rightWinAgg = combinedWindow.value;\n             }\n \n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n             if (combinedWindow == null) {\n                 final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n                 final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n \n             } else {\n-                //create the right window for the previous record if the previous record exists and the window hasn't already been created\n-                if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n-                    final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n-                }\n                 //update the combined window with the new aggregate\n                 putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n             //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                createRightWindow(timestamp, rightWinAgg, key, value, closeTime);\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n             }\n         }\n \n-        private void createRightWindow(final long timestamp,\n-                                       final ValueAndTimestamp<Agg> rightWinAgg,\n-                                       final K key,\n-                                       final V value,\n-                                       final long closeTime) {\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n             final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), rightWinAgg.timestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTI2Mg=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQ4NDM1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoyNzo0NFrOHLKasA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoxMzoyMFrOHL5Q9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NzA1Ng==", "bodyText": "Same here, can this ever be null? It doesn't seem like it, even if it's a new window we still pass in the initializer value so valueAndTime won't ever be null. ...right?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481467056", "createdAt": "2020-09-01T22:27:44Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -311,13 +322,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDg1MQ==", "bodyText": "I just ran the tests and it's mostly true that it won't be null. We do have a test, and so it seems like a real life scenario (?), where the reduce initializer is null, so when creating a new window valueAndTime is null.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482084851", "createdAt": "2020-09-02T13:51:05Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -311,13 +322,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NzA1Ng=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzNDYxMg==", "bodyText": "True, I guess there's no reason the initializer can't return null. Nevermind then", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482234612", "createdAt": "2020-09-02T17:13:20Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -311,13 +322,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NzA1Ng=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDc4MzM5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo1MDozNlrOHLNLxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo1MDozNlrOHLNLxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjM4OA==", "bodyText": "By the way, I think we should also check if the record is so old that even the latest window it could possibly create/affect would be dropped, and then not process the record at all. (ie basically check if the current record's right window would be dropped) We can record on the lateRecordDropSensor and log the message using the current record's left window.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481512388", "createdAt": "2020-09-02T00:50:36Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -118,24 +118,20 @@ public void process(final K key, final V value) {\n             }\n \n             final long timestamp = context().timestamp();\n-            //don't process records that don't fall within a full sliding window\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjI4NjU4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjowOTo0OFrOHLckJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDoxOTo0MFrOHNaibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2NDM5MQ==", "bodyText": "nit: next is not a great name; maybe existingWindow instead?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r481764391", "createdAt": "2020-09-02T06:09:48Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +157,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwMjUzOA==", "bodyText": "currentWindow is probably more traditional but existingWindow sounds good too", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483302538", "createdAt": "2020-09-03T23:19:59Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +157,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2NDM5MQ=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcyOTQwMg==", "bodyText": "Well, currentWindows sound like the window of the current record, while this variable point to other windows, too.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483729402", "createdAt": "2020-09-04T16:28:23Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +157,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2NDM5MQ=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgyODMzNA==", "bodyText": "Fair enough. I was thinking of current in the context of the while loop, but given that we refer to the \"current record\" elsewhere, currentWindow might be ambiguous", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483828334", "createdAt": "2020-09-04T20:19:40Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +157,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2NDM5MQ=="}, "originalCommit": {"oid": "7eab7796055a7e7e3ccb5b4ec8c818ef6cf42779"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTU5NzQ0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0NTowOVrOHL9HRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxNDoyMlrOHL-v0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NzY2OQ==", "bodyText": "Wait...what's going on here? Aren't we just creating a new ValueAndTimestamp that's identical to the rightWinAgg? We don't need to make a copy, I assume", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482297669", "createdAt": "2020-09-02T18:45:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,127 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), rightWinAgg.timestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0461645e135237553a65ab7f43750b3f3ee8e5a"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNDQzNA==", "bodyText": "Yup, good catch. Must've been leftover from a cleanup", "url": "https://github.com/apache/kafka/pull/9157#discussion_r482324434", "createdAt": "2020-09-02T19:14:22Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,127 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), rightWinAgg.timestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5NzY2OQ=="}, "originalCommit": {"oid": "c0461645e135237553a65ab7f43750b3f3ee8e5a"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQwMDc0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozNzo0N1rOHMscIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDoxODo0OFrOHNahXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MzA1Ng==", "bodyText": "Not sure how this change relates to \"early records\"?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483073056", "createdAt": "2020-09-03T15:37:47Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -228,13 +345,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);\n-                final Agg newAgg;\n-                // keep old aggregate if adding a right window, else add new record's value\n-                if (windowStart == timestamp + 1) {\n-                    newAgg = oldAgg;\n-                } else {\n-                    newAgg = aggregator.apply(key, value, oldAgg);\n-                }\n+                final Agg newAgg = aggregator.apply(key, value, oldAgg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcxNTg0NQ==", "bodyText": "I think it might've gotten pulled over when updating from the original PR", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483715845", "createdAt": "2020-09-04T16:05:12Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -228,13 +345,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);\n-                final Agg newAgg;\n-                // keep old aggregate if adding a right window, else add new record's value\n-                if (windowStart == timestamp + 1) {\n-                    newAgg = oldAgg;\n-                } else {\n-                    newAgg = aggregator.apply(key, value, oldAgg);\n-                }\n+                final Agg newAgg = aggregator.apply(key, value, oldAgg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MzA1Ng=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgyODA2MA==", "bodyText": "This was just from the semi-related cleanup of splitting putAndForward into a separate method for createRightWindow, which was done after the first PR was merged (hence the cleanup occurs in this PR). I think?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483828060", "createdAt": "2020-09-04T20:18:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -228,13 +345,8 @@ private void putAndForward(final Window window,\n             if (windowEnd > closeTime) {\n                 //get aggregate from existing window\n                 final Agg oldAgg = getValueOrNull(valueAndTime);\n-                final Agg newAgg;\n-                // keep old aggregate if adding a right window, else add new record's value\n-                if (windowStart == timestamp + 1) {\n-                    newAgg = oldAgg;\n-                } else {\n-                    newAgg = aggregator.apply(key, value, oldAgg);\n-                }\n+                final Agg newAgg = aggregator.apply(key, value, oldAgg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MzA1Ng=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQwNjQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozOToxMFrOHMsf2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNToxOVrOHOlUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ==", "bodyText": "Why do we need to check the timestamp?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483074009", "createdAt": "2020-09-03T15:39:10Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcxNTMzNg==", "bodyText": "In our scan for rightWinAgg , there's a possibility that we find a rightWinAgg that doesn't actually fall within the current record's right window. For example, if we have a record come in at 18, previous records at 16 and 10, we would find the window [11,21] (10's right window) when scanning for our rightWinAgg in processInOrder. [11,21] contains only 16, which is smaller than 18, our current record, indicating that the rightWinAgg is incorrect and the right window is in fact empty.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483715336", "createdAt": "2020-09-04T16:04:11Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0OTIwNA==", "bodyText": "Thanks. As above, maybe add a short comment? Can it be that we overload the term \"right window\"? For this case, rightWinAgg seems to be the aggregate of last window \"left of the current record\" (and it might contribute to the agg of the right window of the current record). However, it \"is\" not the \"right window of the current record\" itself?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483749204", "createdAt": "2020-09-04T17:02:14Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc1MjYwMw==", "bodyText": "Just added a comment similar to above.\nAnd yeah, we definitely overload the term \"right window\". The rightWinAgg holds what will be in the current record's right window, if anything, but is not really the right window. A name change could be possible, something like previousWindow but I wonder if that would make using that aggregate to create the new record's right window more confusing.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483752603", "createdAt": "2020-09-04T17:10:20Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgyNzUzMA==", "bodyText": "I thought it was called rightWinAgg because it's the aggregate that goes in the current record's right window. Of course we had to find this aggregate from some other existing window, eg from the \"last window left of the current record\".", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483827530", "createdAt": "2020-09-04T20:17:04Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MzQ0Mg==", "bodyText": "I think the catch is that it's only sometimes the aggregate that goes in the current record's right window. Sometimes we don't use the value in rightWingAgg because the right window is empty/doesn't exist, but if there is a right window aggregate, it will be in rightWinAgg", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485053442", "createdAt": "2020-09-08T16:35:19Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {\n+            return !windowStartTimes.contains(previousRightWindowStart) && previousRightWindowStart + windows.timeDifferenceMs() >= currentRecordTimestamp;\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n+            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDAwOQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQyNzAxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0Mzo1NFrOHMssdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzozNjowMVrOHM6vGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NzIzOA==", "bodyText": "q: Should we rename currentTimestamp -> timestamp for consistency? (or maybe, rename timestamp to inputRecordTimestamp all over the place?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483077238", "createdAt": "2020-09-03T15:43:54Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNzI4OQ==", "bodyText": "+1 to this", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483307289", "createdAt": "2020-09-03T23:36:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NzIzOA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQzMjA0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0NDo1OVrOHMsvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjo1NTozM1rOHNVhdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3ODAxOA==", "bodyText": "Why do we do this check based on timestamps?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483078018", "createdAt": "2020-09-03T15:44:59Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY5NTcwMw==", "bodyText": "If the previous record falls within the current record's left window, then it contains values other than just the current record. There is a scenario where we find a previous record just outside of the current record, which would indicate that the current record's left window only contains the current record.\nEX: if we have a record at 25, and previous records at 13 and 4 and with a time difference of 10, we find 4's right window at [5,15] in our scan. We log the maxRecordTimestamp of this window, which is 13, as 25's previous record. We don't actually want to create 13's right window though, even if it's the previous record, because 25 falls outside of [14,24].\nUsing the timestamps seemed like a simple litmus test to see if we found anything that falls within the window and was necessary after we found the previous record consistently by looking at the maxRecordTimestamp of a window.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483695703", "createdAt": "2020-09-04T15:34:38Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3ODAxOA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0NjE2Ng==", "bodyText": "Thanks. Should we add a comment?\n// checks if the previous record falls into the current records left window; if yes, the left window is not empty, otherwise it is empty\n\nOr something like this?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483746166", "createdAt": "2020-09-04T16:55:33Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3ODAxOA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQzOTUzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0Njo0MFrOHMs0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0Njo0MFrOHMs0PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3OTIyOQ==", "bodyText": "Same question as above about currentRecordTimestamp (It seems best to me, to use the same variable name for the same think throughout all methods.)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483079229", "createdAt": "2020-09-03T15:46:40Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                final TimeWindow window = new TimeWindow(previousRecordTimestamp + 1, previousRecordTimestamp + 1 + windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            windowStore.put(\n+                key,\n+                rightWinAgg,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());\n+        }\n+\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,\n+                                                        final long previousRightWindowStart,\n+                                                        final long currentRecordTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ1NzE2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1MDo1NlrOHMs_TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1MDo1NlrOHMs_TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MjA2MA==", "bodyText": "nit: Instead, they will fall within the [0, timeDifferenceMs] -> Instead, we will put them into the [0, timeDifferenceMs] window as a \"workaround\",", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483082060", "createdAt": "2020-09-03T15:50:56Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ3NTk0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1NToyN1rOHMtLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1NToyN1rOHMtLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4NTA2Mw==", "bodyText": "nit: flip both lines:\nfinal long startTime = next.key.window().start();\nwindowStartTimes.add(startTime);", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483085063", "createdAt": "2020-09-03T15:55:27Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTIyNTEzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyNTo0OVrOHM0gMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzoyNDozN1rOHNqyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA==", "bodyText": "Not sure if I understand the last sentence: This will always be true for early records, as they all fall within [0, timeDifferenceMs]?\nAlso not sure how this comment relates to setting previousRecordTimestamp ?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483205168", "createdAt": "2020-09-03T19:25:49Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNTUwMQ==", "bodyText": "I think it means, for a generic out-of-order record, it's possible that the previous record's right window will have already been created (by whatever record (s) are later than the current one). But for an early record, if maxRecordTimestamp > timestamp, then we know that the previous record's right window must have already been created (by whatever record(s) are within the combined window but later than the current record).\nThis is relevant to setting previousRecordTimestamp because if maxRecordTimestamp >= timestamp, the previous record's right window has already been created. And if that's the case, we don't have to create it ourselves and thus we don't care about the previousRecordTimestamp\nDoes that sound right Leah?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483305501", "createdAt": "2020-09-03T23:30:07Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTA4Nw==", "bodyText": "Yeah that's right.\n\nBut for an early record, if maxRecordTimestamp > timestamp, we know that the previous record's right window must have already been created\n\nI think this is key - we know this because for any early record, it will always fall within the right window of the previous record (given there is one), since they both fall within the [0, timeDifferenceMs] window. It's hard to phrase clearly on the comment, I can add another line about the proof if that would be helful", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483309087", "createdAt": "2020-09-03T23:42:08Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NTMyNQ==", "bodyText": "Going back and re-reading this comments in the context of Matthias's later comment, it seems like maybe this one is unnecessary. Correct me if I'm wrong, but it feels like the statement if (windowMaxRecordTimestamp < timestamp) { previousRecordTimestamp = windowMaxRecordTimestamp; }\nis somewhat self explanatory. I also don't think I ever leverage the idea that if there is a record before the current record, then the previous record's right window has already been created. Below, I still check previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1). I think either the logic can be updated to leverage what the above comment indicates, or we can cut it out and keep the logic simple. WDYT?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483685325", "createdAt": "2020-09-04T15:20:25Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzczOTc4Mw==", "bodyText": "@ableegoldman WDYT?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483739783", "createdAt": "2020-09-04T16:41:31Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNTczMg==", "bodyText": "the statement if (windowMaxRecordTimestamp < timestamp) { previousRecordTimestamp = windowMaxRecordTimestamp; }is somewhat self explanatory\n\nI think that's fair. My concern was with the windowMaxRecordTimestamp > timestamp case -- in that situation, we don't know and can't know what the previousRecordTimestamp is, because all we save is the maxTimestamp of the combined window and therefore the information is lost. I just thought we should clarify that this is actually ok, because if windowMaxRecordTimestamp > timestamp then we must have already created the right window of the previous record. So I agree that the !windowStartTimes.contains(previousRecordTimestamp + 1) check would logically catch this, but I don't think we can remove either check:\nIf we remove the if (windowMaxRecordTimestamp < timestamp) { previousRecordTimestamp = windowMaxRecordTimestamp; } then we might set previousRecordTimestamp to a value that isn't actually the timestamp of a previous record, and we should make sure all variables are always accurate\nIf we remove the !windowStartTimes.contains(previousRecordTimestamp + 1) then we could miss a case where the previous record's right window was already created, but by a record out side of the combined window\nSo, I think the code itself is complete as is. But probably we can simplify the comments to make it more understandable -- it seems reasonable to remove the comment here entirely. Then maybe you could leave a brief comment down below where we create the previous record's right window saying \"if the previousRecordTimestamp is null, either there is no previous record or it's right window has already been created\"", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483835732", "createdAt": "2020-09-04T20:41:42Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzOTA2MA==", "bodyText": "Oh yeah you're right, I'd forgotten why we added that comment in the first place. What about something briefer like\nWe don't need to store previousRecordTimestamp if maxRecordTimestamp > timestamp because the previous record's right window (if there is a previous record) would have already been created by maxRecordTimestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483839060", "createdAt": "2020-09-04T20:51:46Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5NDUxMg==", "bodyText": "Ah, good call, that makes sense to me", "url": "https://github.com/apache/kafka/pull/9157#discussion_r484094512", "createdAt": "2020-09-06T17:24:37Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTE2OA=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTIzNjk1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyOTo1NVrOHM0nwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToyOTo1NVrOHM0nwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzEwNg==", "bodyText": "nit: should we rename putAndForward to updateWindowAndForward?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483207106", "createdAt": "2020-09-03T19:29:55Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI2MTAwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozNzo1MlrOHM02oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjo0MjowMFrOHNVJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMDkxMg==", "bodyText": "Seem this can be a simple else? No need to verify the condition? (Maybe it's helpful to add a comment instead?)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483210912", "createdAt": "2020-09-03T19:37:52Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNjEwOQ==", "bodyText": "Maybe we can do an else throw IllegalStateException here as well. I guess a comment could achieve the same code clarify, but personally I think it's a good idea to have this sanity check.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483306109", "createdAt": "2020-09-03T23:32:04Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMDkxMg=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0MDAxNg==", "bodyText": "SGTM.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483740016", "createdAt": "2020-09-04T16:42:00Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMDkxMg=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4NTQ2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NTo1NFrOHM1F1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToxNDozMlrOHNRmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDgwNQ==", "bodyText": "Given, that we call processEarly only if 0 < timestamp < timeDifferenceMs, we know that timestamp - 2 * windows.timeDifferenceMs() would always be negative? Thus, we can just pass in zero here?\nIf this is correct, we might want to add a check at the beginning of this method:\nif (timestamp < 0 || timestamp >= timeDifferenceMs) {\n  throw new IllegalArgumentException(\"...\");\n}", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483214805", "createdAt": "2020-09-03T19:45:54Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4MTk1Ng==", "bodyText": "Makes sense to me", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483681956", "createdAt": "2020-09-04T15:14:32Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -192,29 +213,125 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n                     valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n                 } else {\n                     valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 }\n                 final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records where 0 < timestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifferenceMs]\n+         * window, and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDgwNQ=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTc2NzI5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjozNjoxM1rOHM5pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNjozNzowNFrOHNU6vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4OTQ2Nw==", "bodyText": "Seems we don't need the if as this is the only valid case? Adding a comment might be helpful.\nIf you want to keep the if as a sanity check, we should add a final:\n} else {\n  throw new IllegalStateException(...):\n}", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483289467", "createdAt": "2020-09-03T22:36:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +180,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n                     } else if (endTime > timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwMjkzNA==", "bodyText": "It was my suggestion to explicitly check if (startTime == timestamp + 1) instead of just falling back to else, for code clarify and safety, so blame me. But +1 to adding the else throw IllegalStateException", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483302934", "createdAt": "2020-09-03T23:21:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +180,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n                     } else if (endTime > timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4OTQ2Nw=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwODA5MA==", "bodyText": "Ah yeah, I do throw one in the updated version of this in the reverse iterator PR, but it hasn't gotten moved over here yet. I'll do that.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483308090", "createdAt": "2020-09-03T23:38:56Z", "author": {"login": "lct45"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +180,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n                     } else if (endTime > timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4OTQ2Nw=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzczNjI1Mg==", "bodyText": "The suggest is not bad, but required to add the else-throw to make sense. Otherwise, an programming error could slip undetected.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r483736252", "createdAt": "2020-09-04T16:37:04Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,29 +180,31 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n                     } else if (endTime > timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                    } else if (startTime == timestamp + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4OTQ2Nw=="}, "originalCommit": {"oid": "b250d7dc49daf1c98b307cd3367b0088b1952e5a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMwOTQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NDoyNVrOHOp9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NDoyNVrOHOp9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTU5OQ==", "bodyText": "nit: 1 -> 1L", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485129599", "createdAt": "2020-09-08T18:54:25Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -117,25 +117,44 @@ public void process(final K key, final V value) {\n                 return;\n             }\n \n-            final long timestamp = context().timestamp();\n-            //don't process records that don't fall within a full sliding window\n-            if (timestamp < windows.timeDifferenceMs()) {\n+            final long inputRecordTimestamp = context().timestamp();\n+            observedStreamTime = Math.max(observedStreamTime, inputRecordTimestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (inputRecordTimestamp + 1 + windows.timeDifferenceMs() <= closeTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDM4MzYzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNjoyNlrOHOqq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowNjoxMVrOHOvmKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MTIwMQ==", "bodyText": "nit: fall between 0 < inputRecordTimestamp -> fall between 0 <= inputRecordTimestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485141201", "createdAt": "2020-09-08T19:16:26Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,96 +165,203 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            Long previousRecordTimestamp = null;\n+\n             try (\n                 final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n                     key,\n                     key,\n-                    timestamp - 2 * windows.timeDifferenceMs(),\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n                     // to catch the current record's right window, if it exists, without more calls to the store\n-                    timestamp + 1)\n+                    inputRecordTimestamp + 1)\n             ) {\n                 while (iterator.hasNext()) {\n-                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n-                    windowStartTimes.add(next.key.window().start());\n-                    final long startTime = next.key.window().start();\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n \n-                    if (endTime < timestamp) {\n-                        leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n-                    } else if (endTime == timestamp) {\n+                    if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                    } else if (endTime == inputRecordTimestamp) {\n                         leftWinAlreadyCreated = true;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n-                        rightWinAgg = next.value;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n                         rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n                     }\n                 }\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n+                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n                 } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n+                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n             }\n-            //create right window for new record\n-            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, inputRecordTimestamp)) {\n+                createCurrentRecordRightWindow(inputRecordTimestamp, rightWinAgg, key);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        /**\n+         * Created to handle records where 0 < inputRecordTimestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, we will put them into the [0, timeDifferenceMs]\n+         * window as a \"workaround\", and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n+            if (inputRecordTimestamp < 0 || inputRecordTimestamp >= windows.timeDifferenceMs()) {\n+                throw new IllegalArgumentException(\"Early record for sliding windows must fall between 0 < inputRecordTimestamp < timeDifferenceMs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMTkzMQ==", "bodyText": "nit: log an error and include the inputRecordTimestamp", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485221931", "createdAt": "2020-09-08T22:06:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,96 +165,203 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            Long previousRecordTimestamp = null;\n+\n             try (\n                 final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n                     key,\n                     key,\n-                    timestamp - 2 * windows.timeDifferenceMs(),\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n                     // to catch the current record's right window, if it exists, without more calls to the store\n-                    timestamp + 1)\n+                    inputRecordTimestamp + 1)\n             ) {\n                 while (iterator.hasNext()) {\n-                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n-                    windowStartTimes.add(next.key.window().start());\n-                    final long startTime = next.key.window().start();\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n \n-                    if (endTime < timestamp) {\n-                        leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n-                    } else if (endTime == timestamp) {\n+                    if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                    } else if (endTime == inputRecordTimestamp) {\n                         leftWinAlreadyCreated = true;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n-                        rightWinAgg = next.value;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n                         rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n                     }\n                 }\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n+                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n                 } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n+                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n             }\n-            //create right window for new record\n-            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, inputRecordTimestamp)) {\n+                createCurrentRecordRightWindow(inputRecordTimestamp, rightWinAgg, key);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        /**\n+         * Created to handle records where 0 < inputRecordTimestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, we will put them into the [0, timeDifferenceMs]\n+         * window as a \"workaround\", and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n+            if (inputRecordTimestamp < 0 || inputRecordTimestamp >= windows.timeDifferenceMs()) {\n+                throw new IllegalArgumentException(\"Early record for sliding windows must fall between 0 < inputRecordTimestamp < timeDifferenceMs\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MTIwMQ=="}, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDM4ODA2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNzo1NVrOHOqthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNzo1NVrOHOqthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MTg5Mg==", "bodyText": "nit: maxRecordTimestamp > timestamp -> maxRecordTimestamp >= timestamp\nnit: missing space: // We", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485141892", "createdAt": "2020-09-08T19:17:55Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,96 +165,203 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            Long previousRecordTimestamp = null;\n+\n             try (\n                 final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n                     key,\n                     key,\n-                    timestamp - 2 * windows.timeDifferenceMs(),\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n                     // to catch the current record's right window, if it exists, without more calls to the store\n-                    timestamp + 1)\n+                    inputRecordTimestamp + 1)\n             ) {\n                 while (iterator.hasNext()) {\n-                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n-                    windowStartTimes.add(next.key.window().start());\n-                    final long startTime = next.key.window().start();\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n \n-                    if (endTime < timestamp) {\n-                        leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n-                    } else if (endTime == timestamp) {\n+                    if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                    } else if (endTime == inputRecordTimestamp) {\n                         leftWinAlreadyCreated = true;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n-                        rightWinAgg = next.value;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n                         rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n                     }\n                 }\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n+                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n                 } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n+                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n             }\n-            //create right window for new record\n-            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, inputRecordTimestamp)) {\n+                createCurrentRecordRightWindow(inputRecordTimestamp, rightWinAgg, key);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        /**\n+         * Created to handle records where 0 < inputRecordTimestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, we will put them into the [0, timeDifferenceMs]\n+         * window as a \"workaround\", and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n+            if (inputRecordTimestamp < 0 || inputRecordTimestamp >= windows.timeDifferenceMs()) {\n+                throw new IllegalArgumentException(\"Early record for sliding windows must fall between 0 < inputRecordTimestamp < timeDifferenceMs\");\n+            }\n+\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    0,\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    inputRecordTimestamp + 1)\n+            ) {\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = windowBeingProcessed;\n+                        //We don't need to store previousRecordTimestamp if maxRecordTimestamp > timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDQzODU0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTozMjo0OVrOHOrLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyNjoxMVrOHOxQPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTY0MQ==", "bodyText": "Why do we need to suppress?", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485149641", "createdAt": "2020-09-08T19:32:49Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -439,6 +442,185 @@ public void testJoin() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNTg4MA==", "bodyText": "Without it, there are warnings with the transition from K, V to Long, ValueAndTimestamp when adding and updating the hash map that holds the results.", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485235880", "createdAt": "2020-09-08T22:46:05Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -439,6 +442,185 @@ public void testJoin() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTY0MQ=="}, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTk5OA==", "bodyText": "That seems weird to me. Guessing it's ultimately due to the supplier.theCapturedProcessor().processed() we loop over. But then wouldn't we get the warning a bit earlier? \ud83e\udd37\u200d\u2640\ufe0f", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485239998", "createdAt": "2020-09-08T22:56:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -439,6 +442,185 @@ public void testJoin() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTY0MQ=="}, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0ODQ4Ng==", "bodyText": "Yeah I do find it odd that there are no warnings earlier, it's something about the Map that's triggering them", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485248486", "createdAt": "2020-09-08T23:24:12Z", "author": {"login": "lct45"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -439,6 +442,185 @@ public void testJoin() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTY0MQ=="}, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0OTA4Nw==", "bodyText": "It's probably some weird Java thing where it lazily types the generics and doesn't force the cast until you put it in the map. (I just made that up, but @vvcephei  would probably know)", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485249087", "createdAt": "2020-09-08T23:26:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -439,6 +442,185 @@ public void testJoin() {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTY0MQ=="}, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg5OTI2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowMzo1NFrOHOvivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowMzo1NFrOHOvivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMTA1Mg==", "bodyText": "nit: log an error and include the relevant info (eg windowStart and inputRecordTimestamp at least). Same for the IllegalStateException in processEarly", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485221052", "createdAt": "2020-09-08T22:03:54Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,96 +165,203 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            Long previousRecordTimestamp = null;\n+\n             try (\n                 final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n                     key,\n                     key,\n-                    timestamp - 2 * windows.timeDifferenceMs(),\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n                     // to catch the current record's right window, if it exists, without more calls to the store\n-                    timestamp + 1)\n+                    inputRecordTimestamp + 1)\n             ) {\n                 while (iterator.hasNext()) {\n-                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n-                    windowStartTimes.add(next.key.window().start());\n-                    final long startTime = next.key.window().start();\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n \n-                    if (endTime < timestamp) {\n-                        leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n-                    } else if (endTime == timestamp) {\n+                    if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                    } else if (endTime == inputRecordTimestamp) {\n                         leftWinAlreadyCreated = true;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n-                        rightWinAgg = next.value;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n                         rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDkxMjA5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowOTowOVrOHOvqVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowOTowOVrOHOvqVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjk5Ng==", "bodyText": "nit: this code is pretty self-explanatory now, so the comment isn't really adding anything", "url": "https://github.com/apache/kafka/pull/9157#discussion_r485222996", "createdAt": "2020-09-08T22:09:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -146,96 +165,203 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             boolean leftWinAlreadyCreated = false;\n             boolean rightWinAlreadyCreated = false;\n \n-            // keep the left type window closest to the record\n-            Window latestLeftTypeWindow = null;\n+            Long previousRecordTimestamp = null;\n+\n             try (\n                 final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n                     key,\n                     key,\n-                    timestamp - 2 * windows.timeDifferenceMs(),\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n                     // to catch the current record's right window, if it exists, without more calls to the store\n-                    timestamp + 1)\n+                    inputRecordTimestamp + 1)\n             ) {\n                 while (iterator.hasNext()) {\n-                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n-                    windowStartTimes.add(next.key.window().start());\n-                    final long startTime = next.key.window().start();\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n \n-                    if (endTime < timestamp) {\n-                        leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n-                    } else if (endTime == timestamp) {\n+                    if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                    } else if (endTime == inputRecordTimestamp) {\n                         leftWinAlreadyCreated = true;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else if (endTime > timestamp && startTime <= timestamp) {\n-                        rightWinAgg = next.value;\n-                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n-                    } else {\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n                         rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n                     }\n                 }\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n+                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n+                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n                 final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n                 } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n+                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n             }\n-            //create right window for new record\n-            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, inputRecordTimestamp)) {\n+                createCurrentRecordRightWindow(inputRecordTimestamp, rightWinAgg, key);\n             }\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        /**\n+         * Created to handle records where 0 < inputRecordTimestamp < timeDifferenceMs. These records would create\n+         * windows with negative start times, which is not supported. Instead, we will put them into the [0, timeDifferenceMs]\n+         * window as a \"workaround\", and we will update or create their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n+            if (inputRecordTimestamp < 0 || inputRecordTimestamp >= windows.timeDifferenceMs()) {\n+                throw new IllegalArgumentException(\"Early record for sliding windows must fall between 0 < inputRecordTimestamp < timeDifferenceMs\");\n+            }\n+\n+            // A window from [0, timeDifferenceMs] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    0,\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    inputRecordTimestamp + 1)\n+            ) {\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = windowBeingProcessed;\n+                        //We don't need to store previousRecordTimestamp if maxRecordTimestamp > timestamp\n+                        // because the previous record's right window (if there is a previous record)\n+                        // would have already been created by maxRecordTimestamp\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= inputRecordTimestamp) {\n+                        rightWinAgg = windowBeingProcessed.value;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (startTime == inputRecordTimestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n+                    }\n+                }\n+            }\n+\n+            // If there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window. We can be sure that the combined\n+            // window only holds records that fall into the current record's right window for two reasons:\n+            // 1. If there were records earlier than the current record AND later than the current record, there would be a right window found\n+            // when we looked for right window agg.\n+            // 2. If there was only a record before the current record, we wouldn't need a right window for the current record and wouldn't update the\n+            // rightWinAgg value here, as the combinedWindow.value.timestamp() < inputRecordTimestamp\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > inputRecordTimestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6821e92e2cfd4ee8d763cdf2569578682db6d463"}, "originalPosition": 225}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2155, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}