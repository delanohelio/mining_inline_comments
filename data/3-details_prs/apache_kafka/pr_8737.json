{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTgxODI4", "number": 8737, "title": "KAFKA-9945: TopicCommand should support --if-exists and --if-not-exists when --bootstrap-server is used", "bodyText": "Fixed command line arg checking\nAdded unit test cases\nLocal testing with a multi node Kafka cluster\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-28T00:30:36Z", "url": "https://github.com/apache/kafka/pull/8737", "merged": true, "mergeCommit": {"oid": "ea6d373a93205bad41b42ad9a2b2bec717c11c93"}, "closed": true, "closedAt": "2020-06-02T23:17:06Z", "author": {"login": "vinothchandar"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclitj4gH2gAyNDI0MTgxODI4OmMxOGRlMjdhYTA3YzAzODNiODMyOTczZjFmNmI4Y2QyZWQ0YTI5OGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmaIONgFqTQyMTQyODAyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/kafka/commit/c18de27aa07c0383b832973f1f6b8cd2ed4a298c", "committedDate": "2020-05-28T00:27:49Z", "message": "KAFKA-9945: TopicCommand should support --if-exists and --if-not-exists when --bootstrap-server is used\n\n - Fixed command line arg checking\n - Added unit test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjE3MjMx", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420217231", "createdAt": "2020-05-28T15:15:21Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNToyMVrOGb6Gmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNToyMVrOGb6Gmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxNjY5OA==", "bodyText": "removed this check and instead let the request go to the server and error (we need to handle that anyway)", "url": "https://github.com/apache/kafka/pull/8737#discussion_r431916698", "createdAt": "2020-05-28T15:15:21Z", "author": {"login": "vinothchandar"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -228,7 +228,7 @@ object TopicCommand extends Logging {\n       if (topic.partitions.exists(partitions => partitions < 1))\n         throw new IllegalArgumentException(s\"The partitions must be greater than 0\")\n \n-      if (!adminClient.listTopics().names().get().contains(topic.name)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjY0OTUw", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420264950", "createdAt": "2020-05-28T16:03:06Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowMzowNlrOGb8L1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowMzowNlrOGb8L1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MDgwNA==", "bodyText": "Would it be easy to add a for this? (ensure the bootstrap server doesn't throw)", "url": "https://github.com/apache/kafka/pull/8737#discussion_r431950804", "createdAt": "2020-05-28T16:03:06Z", "author": {"login": "stanislavkozlovski"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -736,8 +743,8 @@ object TopicCommand extends Logging {\n         allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnavailablePartitionsOpt + topicsWithOverridesOpt)\n       CommandLineUtils.checkInvalidArgs(parser, options, topicsWithOverridesOpt,\n         allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts)\n-      CommandLineUtils.checkInvalidArgs(parser, options, ifExistsOpt, allTopicLevelOpts -- Set(alterOpt, deleteOpt, describeOpt) ++ Set(bootstrapServerOpt))\n-      CommandLineUtils.checkInvalidArgs(parser, options, ifNotExistsOpt, allTopicLevelOpts -- Set(createOpt) ++ Set(bootstrapServerOpt))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjY5NjQ5", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420269649", "createdAt": "2020-05-28T16:08:08Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowODowOFrOGb8YPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowODowOFrOGb8YPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1Mzk4Mw==", "bodyText": "nit: I had some trouble reading this, since it's two not operators with an OR statement. Would this be easier to read as if e.getCause.isInstanceOf[TopicExistsException] && topic.ifTopicDoesntExist() ? Note that scala doesn't require a null check on the exception before calling isInstanceOf\nI think it's more conventional in Scala to have full if/else branches rather than guard statements", "url": "https://github.com/apache/kafka/pull/8737#discussion_r431953983", "createdAt": "2020-05-28T16:08:08Z", "author": {"login": "stanislavkozlovski"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -247,8 +247,12 @@ object TopicCommand extends Logging {\n         val createResult = adminClient.createTopics(Collections.singleton(newTopic))\n         createResult.all().get()\n         println(s\"Created topic ${topic.name}.\")\n-      } else {\n-        throw new IllegalArgumentException(s\"Topic ${topic.name} already exists\")\n+      } catch {\n+        case e : ExecutionException =>\n+          if (e.getCause == null)\n+            throw e\n+          if (!e.getCause.isInstanceOf[TopicExistsException] || !topic.ifTopicDoesntExist())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM1ODEw", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420535810", "createdAt": "2020-05-28T22:27:22Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzoyMlrOGcI3rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyNzoyMlrOGcI3rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1ODYzNw==", "bodyText": "I don't think this is really enough to accomplish your goal here.  With this code, if the topic does not exist, we will get past this line but then fail on the next line in describeTopics, with a NoSuchTopicOrPartitionException`.\nI think it would be better to simply catch the NoSuchTopicOrPartitionException and handle it appropriately like we did with topic creation.  This also avoids the redunant calls in ensureTopicExists.", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432158637", "createdAt": "2020-05-28T22:27:22Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -259,7 +263,8 @@ object TopicCommand extends Logging {\n     override def alterTopic(opts: TopicCommandOptions): Unit = {\n       val topic = new CommandTopicPartition(opts)\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n-      ensureTopicExists(topics, opts.topic)\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM2Njk3", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420536697", "createdAt": "2020-05-28T22:29:20Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyOToyMFrOGcI6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoyOToyMFrOGcI6hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1OTM2NA==", "bodyText": "Same issue here as above.  You can get past this line this way, but you still fail when actually calling describeTopics.\nAnother issue with this code is that we should not be listing all partition reassignments.  Admin#listPartitionReassignments has a variant that takes a list of partitions.  We should use that so that we're not fetching a lot of information that we don't need.  I think this should be an easy fix", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432159364", "createdAt": "2020-05-28T22:29:20Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -290,6 +295,8 @@ object TopicCommand extends Logging {\n \n     override def describeTopic(opts: TopicCommandOptions): Unit = {\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM3NDA2", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420537406", "createdAt": "2020-05-28T22:31:09Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMToxMFrOGcI8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozMToxMFrOGcI8vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1OTkzNQ==", "bodyText": "Same issue here as above.  Admin#deleteTopics will fail if the topic doesn't exist, regardless of line 334.", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432159935", "createdAt": "2020-05-28T22:31:10Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -324,7 +331,7 @@ object TopicCommand extends Logging {\n \n     override def deleteTopic(opts: TopicCommandOptions): Unit = {\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n-      ensureTopicExists(topics, opts.topic)\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTM5ODYz", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-420539863", "createdAt": "2020-05-28T22:37:44Z", "commit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNzo0NFrOGcJFNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjozNzo0NFrOGcJFNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2MjEwMA==", "bodyText": "Hmm.  I don't see why these catch blocks are needed.  All we're doing here is just failing when we get an exception.  But an exception propagating to the top level of the test function fails the test anyway.  What am I missing?", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432162100", "createdAt": "2020-05-28T22:37:44Z", "author": {"login": "cmccabe"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -223,8 +224,20 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n     createAndWaitTopic(createOpts)\n \n     // try to re-create the topic\n-    intercept[IllegalArgumentException] {\n+    intercept[TopicExistsException] {\n+      topicService.createTopic(createOpts)\n+    }\n+  }\n+\n+  @Test\n+  def testCreateWhenAlreadyExistsWithIfNotExists(): Unit = {\n+    val createOpts = new TopicCommandOptions(Array(\"--topic\", testTopicName, \"--if-not-exists\"))\n+    createAndWaitTopic(createOpts)\n+\n+    try {\n       topicService.createTopic(createOpts)\n+    } catch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18de27aa07c0383b832973f1f6b8cd2ed4a298c"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "273c84654f66d6b1f84024115090140b781c1267", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/kafka/commit/273c84654f66d6b1f84024115090140b781c1267", "committedDate": "2020-05-29T17:47:10Z", "message": "KAFKA-9945: Address CR comments\n\n - Avoid unnecessary RPC to server, if effective topic list is empty\n - Efficient use of AdminClient#listPartitionReassignments()\n - Fix if check style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzgxNTgx", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-421381581", "createdAt": "2020-05-30T06:00:59Z", "commit": {"oid": "273c84654f66d6b1f84024115090140b781c1267"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjowMDo1OVrOGcw49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjowMDo1OVrOGcw49Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNDMyNQ==", "bodyText": "It's not necessary to check this.  AdminClient handles being passed empty lists or sets of topics.", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432814325", "createdAt": "2020-05-30T06:00:59Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -290,42 +299,50 @@ object TopicCommand extends Logging {\n \n     override def describeTopic(opts: TopicCommandOptions): Unit = {\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n-      val allConfigs = adminClient.describeConfigs(topics.map(new ConfigResource(Type.TOPIC, _)).asJavaCollection).values()\n-      val liveBrokers = adminClient.describeCluster().nodes().get().asScala.map(_.id())\n-      val reassignments = listAllReassignments()\n-      val topicDescriptions = adminClient.describeTopics(topics.asJavaCollection).all().get().values().asScala\n-      val describeOptions = new DescribeOptions(opts, liveBrokers.toSet)\n-\n-      for (td <- topicDescriptions) {\n-        val topicName = td.name\n-        val config = allConfigs.get(new ConfigResource(Type.TOPIC, topicName)).get()\n-        val sortedPartitions = td.partitions.asScala.sortBy(_.partition)\n-\n-        if (describeOptions.describeConfigs) {\n-          val hasNonDefault = config.entries().asScala.exists(!_.isDefault)\n-          if (!opts.reportOverriddenConfigs || hasNonDefault) {\n-            val numPartitions = td.partitions().size\n-            val firstPartition = td.partitions.iterator.next()\n-            val reassignment = reassignments.get(new TopicPartition(td.name, firstPartition.partition))\n-            val topicDesc = TopicDescription(topicName, numPartitions, getReplicationFactor(firstPartition, reassignment), config, markedForDeletion = false)\n-            topicDesc.printDescription()\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)\n+\n+      if (topics.nonEmpty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273c84654f66d6b1f84024115090140b781c1267"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzgxNjEx", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-421381611", "createdAt": "2020-05-30T06:01:35Z", "commit": {"oid": "273c84654f66d6b1f84024115090140b781c1267"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjowMTozNVrOGcw5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjowMTozNVrOGcw5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNDM1Mw==", "bodyText": "It's not necessary to check this.  AdminClient handles being passed empty sets of topics to delete (by doing nothing)", "url": "https://github.com/apache/kafka/pull/8737#discussion_r432814353", "createdAt": "2020-05-30T06:01:35Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -290,42 +299,50 @@ object TopicCommand extends Logging {\n \n     override def describeTopic(opts: TopicCommandOptions): Unit = {\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n-      val allConfigs = adminClient.describeConfigs(topics.map(new ConfigResource(Type.TOPIC, _)).asJavaCollection).values()\n-      val liveBrokers = adminClient.describeCluster().nodes().get().asScala.map(_.id())\n-      val reassignments = listAllReassignments()\n-      val topicDescriptions = adminClient.describeTopics(topics.asJavaCollection).all().get().values().asScala\n-      val describeOptions = new DescribeOptions(opts, liveBrokers.toSet)\n-\n-      for (td <- topicDescriptions) {\n-        val topicName = td.name\n-        val config = allConfigs.get(new ConfigResource(Type.TOPIC, topicName)).get()\n-        val sortedPartitions = td.partitions.asScala.sortBy(_.partition)\n-\n-        if (describeOptions.describeConfigs) {\n-          val hasNonDefault = config.entries().asScala.exists(!_.isDefault)\n-          if (!opts.reportOverriddenConfigs || hasNonDefault) {\n-            val numPartitions = td.partitions().size\n-            val firstPartition = td.partitions.iterator.next()\n-            val reassignment = reassignments.get(new TopicPartition(td.name, firstPartition.partition))\n-            val topicDesc = TopicDescription(topicName, numPartitions, getReplicationFactor(firstPartition, reassignment), config, markedForDeletion = false)\n-            topicDesc.printDescription()\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)\n+\n+      if (topics.nonEmpty) {\n+        val allConfigs = adminClient.describeConfigs(topics.map(new ConfigResource(Type.TOPIC, _)).asJavaCollection).values()\n+        val liveBrokers = adminClient.describeCluster().nodes().get().asScala.map(_.id())\n+        val topicDescriptions = adminClient.describeTopics(topics.asJavaCollection).all().get().values().asScala\n+        val describeOptions = new DescribeOptions(opts, liveBrokers.toSet)\n+        val topicPartitions = topicDescriptions\n+          .flatMap(td => td.partitions.iterator().asScala.map(p => new TopicPartition(td.name(), p.partition())))\n+          .toSet.asJava\n+        val reassignments = listAllReassignments(topicPartitions)\n+\n+        for (td <- topicDescriptions) {\n+          val topicName = td.name\n+          val config = allConfigs.get(new ConfigResource(Type.TOPIC, topicName)).get()\n+          val sortedPartitions = td.partitions.asScala.sortBy(_.partition)\n+\n+          if (describeOptions.describeConfigs) {\n+            val hasNonDefault = config.entries().asScala.exists(!_.isDefault)\n+            if (!opts.reportOverriddenConfigs || hasNonDefault) {\n+              val numPartitions = td.partitions().size\n+              val firstPartition = td.partitions.iterator.next()\n+              val reassignment = reassignments.get(new TopicPartition(td.name, firstPartition.partition))\n+              val topicDesc = TopicDescription(topicName, numPartitions, getReplicationFactor(firstPartition, reassignment), config, markedForDeletion = false)\n+              topicDesc.printDescription()\n+            }\n           }\n-        }\n \n-        if (describeOptions.describePartitions) {\n-          for (partition <- sortedPartitions) {\n-            val reassignment = reassignments.get(new TopicPartition(td.name, partition.partition))\n-            val partitionDesc = PartitionDescription(topicName, partition, Some(config), markedForDeletion = false, reassignment)\n-            describeOptions.maybePrintPartitionDescription(partitionDesc)\n+          if (describeOptions.describePartitions) {\n+            for (partition <- sortedPartitions) {\n+              val reassignment = reassignments.get(new TopicPartition(td.name, partition.partition))\n+              val partitionDesc = PartitionDescription(topicName, partition, Some(config), markedForDeletion = false, reassignment)\n+              describeOptions.maybePrintPartitionDescription(partitionDesc)\n+            }\n           }\n         }\n       }\n     }\n \n     override def deleteTopic(opts: TopicCommandOptions): Unit = {\n       val topics = getTopics(opts.topic, opts.excludeInternalTopics)\n-      ensureTopicExists(topics, opts.topic)\n-      adminClient.deleteTopics(topics.asJavaCollection).all().get()\n+      ensureTopicExists(topics, opts.topic, !opts.ifExists)\n+      if (topics.nonEmpty)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273c84654f66d6b1f84024115090140b781c1267"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490085d347674a1cd60cc192d6083559620b2f8e", "author": {"user": {"login": "vinothchandar", "name": "vinoth chandar"}}, "url": "https://github.com/apache/kafka/commit/490085d347674a1cd60cc192d6083559620b2f8e", "committedDate": "2020-05-30T16:56:02Z", "message": "KAFKA-9945:  More CR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDI4MDIx", "url": "https://github.com/apache/kafka/pull/8737#pullrequestreview-421428021", "createdAt": "2020-05-30T17:01:43Z", "commit": {"oid": "273c84654f66d6b1f84024115090140b781c1267"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 756, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}