{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDc2MTQ0", "number": 8299, "title": "KAFKA-9568: enforce rebalance if client endpoint has changed", "bodyText": "Since the assignment info includes a map with all member's host info, we can just check the received map to make sure our endpoint is contained. If not, we need to force the group to rebalance and get our updated endpoint info.", "createdAt": "2020-03-14T00:18:33Z", "url": "https://github.com/apache/kafka/pull/8299", "merged": true, "mergeCommit": {"oid": "85c96f523090cce5fd8767c0fd3505ee4885f63d"}, "closed": true, "closedAt": "2020-03-19T01:37:39Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNanDQgFqTM3NDY4NjM1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO-8snAFqTM3NzI3NTU3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Njg2MzU4", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-374686358", "createdAt": "2020-03-14T01:27:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNzoxNlrOF2XAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyNzoxNlrOF2XAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDM3Nw==", "bodyText": "This is unrelated to this change, I just happened to notice this test didn't seem to actually be testing anything at all", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544377", "createdAt": "2020-03-14T01:27:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Njg2NzMz", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-374686733", "createdAt": "2020-03-14T01:31:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMTozNFrOF2XCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTozMTozNFrOF2XCBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDc3NA==", "bodyText": "We can reuse this for KIP-441 as well", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544774", "createdAt": "2020-03-14T01:31:34Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorError.java", "diffHunk": "@@ -19,7 +19,7 @@\n public enum AssignorError {\n     NONE(0),\n     INCOMPLETE_SOURCE_TOPIC_METADATA(1),\n-    VERSION_PROBING(2);\n+    REBALANCE_NEEDED(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjczNTc0", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-375673574", "createdAt": "2020-03-17T00:54:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDo1NDoyN1rOF3Khzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDo1NDoyN1rOF3Khzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4ODQ5NA==", "bodyText": "Are we deprecating the VERSION_PROBING?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393388494", "createdAt": "2020-03-17T00:54:27Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -496,9 +496,7 @@ private void runLoop() {\n         while (isRunning() || taskManager.isRebalanceInProgress()) {\n             try {\n                 runOnce();\n-                if (assignmentErrorCode.get() == AssignorError.VERSION_PROBING.code()) {\n-                    log.info(\"Version probing detected. Rejoining the consumer group to trigger a new rebalance.\");\n-\n+                if (assignmentErrorCode.get() == AssignorError.REBALANCE_NEEDED.code()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTIzODU3", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-376123857", "createdAt": "2020-03-17T15:06:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTowNjo0OFrOF3gf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToyNDozMVrOF3hSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODQ3MA==", "bodyText": "Remove only maybe?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393748470", "createdAt": "2020-03-17T15:06:48Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MDAxNA==", "bodyText": "Could we also verify streamsMetadataState?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393750014", "createdAt": "2020-03-17T15:09:03Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));\n \n         EasyMock.verify(taskManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MzgxMQ==", "bodyText": "nit: I feel we could internalize the hostInfo creation, including the null check:\nhostInfo = HostInfo.buildFromEndpoint(endPoint);", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393753811", "createdAt": "2020-03-17T15:14:13Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -110,20 +107,7 @@ public int hashCode() {\n         ClientMetadata(final String endPoint) {\n \n             // get the host info if possible\n-            if (endPoint != null) {\n-                final String host = getHost(endPoint);\n-                final Integer port = getPort(endPoint);\n-\n-                if (host == null || port == null) {\n-                    throw new ConfigException(\n-                        String.format(\"Error parsing host address %s. Expected format host:port.\", endPoint)\n-                    );\n-                }\n-\n-                hostInfo = new HostInfo(host, port);\n-            } else {\n-                hostInfo = null;\n-            }\n+            hostInfo = endPoint != null ? HostInfo.buildFromEndpoint(endPoint) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTQ0NQ==", "bodyText": "nit: space after )", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755445", "createdAt": "2020-03-17T15:16:27Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1392,6 +1398,10 @@ protected void setAssignmentErrorCode(final Integer errorCode) {\n         assignmentErrorCode.set(errorCode);\n     }\n \n+    Integer assignmentErrorCode(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTczOA==", "bodyText": "Have you also migrated the unit test?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755738", "createdAt": "2020-03-17T15:16:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/HostInfo.java", "diffHunk": "@@ -46,6 +50,22 @@ public HostInfo(final String host,\n         this.port = port;\n     }\n \n+    /**\n+     *\n+     * @throws ConfigException if the host or port cannot be parsed from the given endpoint string\n+     */\n+    public static HostInfo buildFromEndpoint(final String endPoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1OTU4Mg==", "bodyText": "Combine L1421-1422 with times(2)?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393759582", "createdAt": "2020-03-17T15:22:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MDQ4Mg==", "bodyText": "streamsMetadataState never been used?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393760482", "createdAt": "2020-03-17T15:23:19Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MTM1MQ==", "bodyText": "Could we just check if the error code is null?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393761351", "createdAt": "2020-03-17T15:24:31Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDE0OTA0", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-376414904", "createdAt": "2020-03-17T21:21:47Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMTo0N1rOF3uhMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMToyMTo0N1rOF3uhMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODE2MQ==", "bodyText": "nit: Just my usual habit, I think we should get a separate test file HostInfoTest instead.", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393978161", "createdAt": "2020-03-17T21:21:47Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,21 +1406,86 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n \n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.eq(initialHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.eq(newHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChange() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.NONE.code()));\n \n         EasyMock.verify(taskManager);\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDE1MTI1", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-376415125", "createdAt": "2020-03-17T21:22:11Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a2ec5f53f878b73e09a2b4490756f1b90044609", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/8a2ec5f53f878b73e09a2b4490756f1b90044609", "committedDate": "2020-03-18T05:39:45Z", "message": "verify that our host info was included in the returned map, if applicable, and trigger a rebalance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d49d449ce5c2bfe0b71ddaf3a4c419af1bb3c93", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/4d49d449ce5c2bfe0b71ddaf3a4c419af1bb3c93", "committedDate": "2020-03-18T05:39:45Z", "message": "rename VP code for generic rebalance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c4d83142a1f8fa1cc47713d30939e12dbc9b50", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/63c4d83142a1f8fa1cc47713d30939e12dbc9b50", "committedDate": "2020-03-18T05:39:45Z", "message": "actually, introduce new code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48356d3b794e70c3e4f7547cc94de2f82d74741d", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/48356d3b794e70c3e4f7547cc94de2f82d74741d", "committedDate": "2020-03-18T05:39:45Z", "message": "on 3rd thought, DO reuse the vp code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91c2a85bcca110355e12c2205b789854eb1edccb", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/91c2a85bcca110355e12c2205b789854eb1edccb", "committedDate": "2020-03-18T05:39:45Z", "message": "move method call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60798bbc5d6ba464637e90eeb31a4a42bd05e88f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/60798bbc5d6ba464637e90eeb31a4a42bd05e88f", "committedDate": "2020-03-18T05:42:33Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9efaeebb6623a29610fc50417fb62e823afc87", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/7f9efaeebb6623a29610fc50417fb62e823afc87", "committedDate": "2020-03-18T05:43:03Z", "message": "github review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b60ad0cfca4722dee04001938d3b46246662ff", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c6b60ad0cfca4722dee04001938d3b46246662ff", "committedDate": "2020-03-18T05:43:03Z", "message": "move HostInfo tests to separate class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c6b60ad0cfca4722dee04001938d3b46246662ff", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c6b60ad0cfca4722dee04001938d3b46246662ff", "committedDate": "2020-03-18T05:43:03Z", "message": "move HostInfo tests to separate class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c457cbd193c011347903439463da5e0a46b19f", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/80c457cbd193c011347903439463da5e0a46b19f", "committedDate": "2020-03-18T05:44:50Z", "message": "checkstyle & fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Mjc1NTc4", "url": "https://github.com/apache/kafka/pull/8299#pullrequestreview-377275578", "createdAt": "2020-03-18T22:20:13Z", "commit": {"oid": "80c457cbd193c011347903439463da5e0a46b19f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyMDoxM1rOF4Y38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyMDoxM1rOF4Y38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MjExNA==", "bodyText": "nit: extra spaces?", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394672114", "createdAt": "2020-03-18T22:20:13Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1281,15 +1284,54 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c457cbd193c011347903439463da5e0a46b19f"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 282, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}