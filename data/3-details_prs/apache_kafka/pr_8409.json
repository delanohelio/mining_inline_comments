{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODg4Mzcw", "number": 8409, "title": "KAFKA-6145: KIP-441 Pt. 6 Trigger probing rebalances until group is stable", "bodyText": "This KIP is fairly straightforward, and does as the title describes by enforcing a rebalance once the configured probing.rebalance.interval has elapsed. However, we have had to modify the original plan in the KIP slightly to handle an edge case with static membership enabled:\nSince the group leader can crash and restart without triggering a rebalance, we can't rely on a purely in-memory flag/counter to keep track of these probing rebalances. We can instead rely on the assignment, encoding the upcoming probing rebalance in the AssignmentInfo. This is encoded as the time in ms of the next scheduled rebalance, ie it is set to currentTimeMs + probingRebalanceIntervalMs when the assignment is being generated. This anchors the probing rebalances to wall clock time, and ensures a pathologically failing member will not prevent the group from ever rebalancing. We leave it up to a single member to be responsible for triggering the probing rebalances, and encode this for a single consumer on the leader's client (chosen arbitrarily).\nThis PR also adds tracking of whether a followup rebalance is required to StreamsPartitionAssignor#assign in order to log when the group is actually stable. This applies not only to KIP-441, but to version probing and cooperative rebalances as well.", "createdAt": "2020-04-03T01:33:39Z", "url": "https://github.com/apache/kafka/pull/8409", "merged": true, "mergeCommit": {"oid": "98ea773a22f84eb21c318fa1da78d2e6b323e8de"}, "closed": true, "closedAt": "2020-04-08T18:02:30Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUCBxngFqTM4NzI4NDY0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVjza4AFqTM4OTc2NzcwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mjg0NjQx", "url": "https://github.com/apache/kafka/pull/8409#pullrequestreview-387284641", "createdAt": "2020-04-03T14:02:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDowMjoxNFrOGAW2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoyNTozOVrOGAXzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNzQ4MA==", "bodyText": "Q: This does'nt seem to be used anywhere. Should it be removed?", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403027480", "createdAt": "2020-04-03T14:02:14Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -158,6 +158,7 @@ public String toString() {\n     @SuppressWarnings(\"deprecation\")\n     private org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n     private AtomicInteger assignmentErrorCode;\n+    private Optional<Long> nextProbingRebalanceMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODU1Mg==", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n          \n          \n            \n                    final boolean followupRebalanceNeeded = \n          \n          \n            \n                        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403028552", "createdAt": "2020-04-03T14:03:47Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -359,7 +361,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         final Map<TaskId, Set<TopicPartition>> partitionsForTask =\n             partitionGrouper.partitionGroups(sourceTopicsByGroup, fullMetadata);\n \n-        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n+        final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzOTMzNw==", "bodyText": "req: This comments is not correct anymore, isn't it? Please correct it.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403039337", "createdAt": "2020-04-03T14:19:59Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -685,8 +688,9 @@ private void checkAllPartitions(final Set<String> allSourceTopics,\n     /**\n      * Assigns a set of tasks to each client (Streams instance) using the sticky assignor to prioritize clients\n      * based on the previous state and overall lag.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0MzI2NQ==", "bodyText": "req: Those steps comment do not match the steps in the description of the method. Please make them match.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403043265", "createdAt": "2020-04-03T14:25:39Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -359,7 +361,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         final Map<TaskId, Set<TopicPartition>> partitionsForTask =\n             partitionGrouper.partitionGroups(sourceTopicsByGroup, fullMetadata);\n \n-        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n+        final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n \n         // ---------------- Step Three ---------------- //", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA3NTA1", "url": "https://github.com/apache/kafka/pull/8409#pullrequestreview-387507505", "createdAt": "2020-04-03T18:59:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1OToyOVrOGAkSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxNzowNVrOGAnhFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {\n          \n          \n            \n                            } else if (nextProbingRebalanceMs.get() < Time.milliseconds()) {\n          \n      \n    \n    \n  \n\nThis will let us control it in testing, which we should do.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403247724", "createdAt": "2020-04-03T18:59:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +561,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODU0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            \"rebalance to probe for newly aught-up clients\");\n          \n          \n            \n                                            \"rebalance to probe for newly caught-up clients\");\n          \n      \n    \n    \n  \n\n\"aught\" is so 2000s.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403248540", "createdAt": "2020-04-03T19:00:26Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +561,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {\n+                    log.info(\"The probing rebalance interval has elapsed since the last rebalance, triggering a \" +\n+                                \"rebalance to probe for newly aught-up clients\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MjMxNw==", "bodyText": "Ideally, we'd use the Time#milliseconds() here instead of System.currentTimeMillis(), but you'd have to pass the time instance in through configure. It would aid in testability, but it's not strictly necessary. I'll leave it to you.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403282317", "createdAt": "2020-04-03T19:52:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +971,66 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {\n+                stableAssignment = false;\n+            }\n \n             final Map<TaskId, Set<TopicPartition>> standbyTaskMap =\n                 buildStandbyTaskMap(standbyTaskAssignments.get(consumer), partitionsForTask);\n \n+            final AssignmentInfo info = new AssignmentInfo(\n+                minUserMetadataVersion,\n+                minSupportedMetadataVersion,\n+                assignedActiveList,\n+                standbyTaskMap,\n+                partitionsByHostState,\n+                standbyPartitionsByHost,\n+                AssignorError.NONE.code()\n+            );\n+\n+            if (encodeNextRebalanceTime) {\n+                final long nextRebalanceTimeMs = System.currentTimeMillis() + probingRebalanceIntervalMs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NDIwOA==", "bodyText": "Por favor, else { \"Finished unstable assignment of tasks. Followup rebalance is scheduled for {time}.\" }", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403284208", "createdAt": "2020-04-03T19:55:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +971,66 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {\n+                stableAssignment = false;\n+            }\n \n             final Map<TaskId, Set<TopicPartition>> standbyTaskMap =\n                 buildStandbyTaskMap(standbyTaskAssignments.get(consumer), partitionsForTask);\n \n+            final AssignmentInfo info = new AssignmentInfo(\n+                minUserMetadataVersion,\n+                minSupportedMetadataVersion,\n+                assignedActiveList,\n+                standbyTaskMap,\n+                partitionsByHostState,\n+                standbyPartitionsByHost,\n+                AssignorError.NONE.code()\n+            );\n+\n+            if (encodeNextRebalanceTime) {\n+                final long nextRebalanceTimeMs = System.currentTimeMillis() + probingRebalanceIntervalMs();\n+                encodeNextRebalanceTime = false;\n+                info.setNextRebalanceTime(nextRebalanceTimeMs);\n+            }\n+\n             // finally, encode the assignment and insert into map with all assignments\n             assignment.put(\n                 consumer,\n                 new Assignment(\n                     activePartitionsList,\n-                    new AssignmentInfo(\n-                        minUserMetadataVersion,\n-                        minSupportedMetadataVersion,\n-                        assignedActiveList,\n-                        standbyTaskMap,\n-                        partitionsByHostState,\n-                        standbyPartitionsByHost,\n-                        AssignorError.NONE.code()\n-                    ).encode()\n+                    info.encode()\n                 )\n             );\n         }\n+\n+        if (stableAssignment) {\n+            log.info(\"Finished stable assignment of tasks, no followup rebalances required.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTMxMw==", "bodyText": "I'm wondering if we can avoid encoding this for the common case where there is no \"next rebalance time\". Do you have thoughts on the subject?", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403295313", "createdAt": "2020-04-03T20:09:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.java", "diffHunk": "@@ -328,13 +344,21 @@ public static AssignmentInfo decode(final ByteBuffer data) {\n                     assignmentInfo.errCode = in.readInt();\n                     break;\n                 case 6:\n+                    commonlySupportedVersion = in.readInt();\n+                    assignmentInfo = new AssignmentInfo(usedVersion, commonlySupportedVersion);\n+                    decodeActiveTasks(assignmentInfo, in);\n+                    decodeStandbyTasks(assignmentInfo, in);\n+                    decodeActiveAndStandbyHostPartitions(assignmentInfo, in);\n+                    assignmentInfo.errCode = in.readInt();\n+                    break;\n                 case 7:\n                     commonlySupportedVersion = in.readInt();\n                     assignmentInfo = new AssignmentInfo(usedVersion, commonlySupportedVersion);\n                     decodeActiveTasks(assignmentInfo, in);\n                     decodeStandbyTasks(assignmentInfo, in);\n                     decodeActiveAndStandbyHostPartitions(assignmentInfo, in);\n                     assignmentInfo.errCode = in.readInt();\n+                    assignmentInfo.nextRebalanceMs = in.readLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMDYzMA==", "bodyText": "Am I right in thinking that all that happened to these older ones is that you added line breaks?\nCan we do that in a later PR that doesn't also change the production logic, so it's easier to see that we're not invalidating the tests here? I.e., it's suspicious to change regression tests while you're changing the logic the regression tests would be checking.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403300630", "createdAt": "2020-04-03T20:17:05Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfoTest.java", "diffHunk": "@@ -88,47 +88,63 @@ public void shouldThrowForUnknownVersion2() {\n \n     @Test\n     public void shouldEncodeAndDecodeVersion1() {\n-        final AssignmentInfo info = new AssignmentInfo(1, activeTasks, standbyTasks, activeAssignment, standbyAssignment, 0);\n-        final AssignmentInfo expectedInfo = new AssignmentInfo(1, UNKNOWN, activeTasks, standbyTasks, Collections.emptyMap(), Collections.emptyMap(), 0);\n+        final AssignmentInfo info =\n+            new AssignmentInfo(1, activeTasks, standbyTasks, activeAssignment, standbyAssignment, 0);\n+        final AssignmentInfo expectedInfo =\n+            new AssignmentInfo(1, UNKNOWN, activeTasks, standbyTasks, Collections.emptyMap(), Collections.emptyMap(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDI4ODE5", "url": "https://github.com/apache/kafka/pull/8409#pullrequestreview-389028819", "createdAt": "2020-04-07T11:34:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTozNDoxNVrOGB_VwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzowMzozNVrOGCCfIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTUyMQ==", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    consumerConfigs.put(InternalConfig.TIME, time);\n          \n          \n            \n                    consumerConfigs.put(StreamsConfig.InternalConfig.TIME, time);", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404739521", "createdAt": "2020-04-07T11:34:15Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -365,11 +368,14 @@ public static StreamThread create(final InternalTopologyBuilder builder,\n         log.info(\"Creating consumer client\");\n         final String applicationId = config.getString(StreamsConfig.APPLICATION_ID_CONFIG);\n         final Map<String, Object> consumerConfigs = config.getMainConsumerConfigs(applicationId, getConsumerClientId(threadId), threadIdx);\n+        consumerConfigs.put(InternalConfig.TIME, time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NDk1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *    they have been created with the right number of partitions. also verify and/or create\n          \n          \n            \n                 *    they have been created with the right number of partitions. Also verify and/or create", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404744955", "createdAt": "2020-04-07T11:44:54Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -252,22 +258,18 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n     /*\n      * This assigns tasks to consumer clients in the following steps.\n      *\n-     * 0. check all repartition source topics and use internal topic manager to make sure\n-     *    they have been created with the right number of partitions.\n+     * 0. decode the subscriptions to assemble the metadata for each client and check for version probing\n+     *\n+     * 1. check all repartition source topics and use internal topic manager to make sure\n+     *    they have been created with the right number of partitions. also verify and/or create", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MzY0NQ==", "bodyText": "prop: Please fix indentation of parameters.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404753645", "createdAt": "2020-04-07T12:01:39Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -683,10 +687,10 @@ private void checkAllPartitions(final Set<String> allSourceTopics,\n     }\n \n     /**\n-     * Assigns a set of tasks to each client (Streams instance) using the sticky assignor to prioritize clients\n-     * based on the previous state and overall lag.\n+     * Assigns a set of tasks to each client (Streams instance) using the configured task assignor\n+     * @return true if a followup rebalance should be triggered\n      */\n-    private void assignTasksToClients(final Set<String> allSourceTopics,\n+    private boolean assignTasksToClients(final Set<String> allSourceTopics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Nzk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (populateActiveTaskAndPartitionsLists(\n          \n          \n            \n                            activePartitionsList,\n          \n          \n            \n                            assignedActiveList,\n          \n          \n            \n                            consumer,\n          \n          \n            \n                            clientMetadata.state,\n          \n          \n            \n                            activeTasksForConsumer,\n          \n          \n            \n                            partitionsForTask,\n          \n          \n            \n                        if (populateActiveTaskAndPartitionsLists(\n          \n          \n            \n                                activePartitionsList,\n          \n          \n            \n                                assignedActiveList,\n          \n          \n            \n                                consumer,\n          \n          \n            \n                                clientMetadata.state,\n          \n          \n            \n                                activeTasksForConsumer,\n          \n          \n            \n                                partitionsForTask,", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404757944", "createdAt": "2020-04-07T12:09:51Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +974,69 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1ODQ4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            allOwnedPartitions)) {\n          \n          \n            \n                                allOwnedPartitions\n          \n          \n            \n                            )) {", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404758487", "createdAt": "2020-04-07T12:10:49Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +974,69 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NTMyMA==", "bodyText": "req: Could you please add unit tests for these two methods? I am aware that there isn't even a AssignorConfigurationTest class (which makes me a bit sad ;-)). We can add the unit tests for the other methods in a separate PR.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404775320", "createdAt": "2020-04-07T12:39:20Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -186,6 +189,44 @@ public AtomicInteger getAssignmentErrorCode(final Map<String, ?> configs) {\n         return (AtomicInteger) ai;\n     }\n \n+    public AtomicLong getNextProbingRebalanceMs(final Map<String, ?> configs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDIzNw==", "bodyText": "req: Please add a test that calls StreamThread#create() with a custom KafkaClientSupplier that provides a mock consumer and verify that the internal config is set.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404780237", "createdAt": "2020-04-07T12:47:06Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -365,11 +368,14 @@ public static StreamThread create(final InternalTopologyBuilder builder,\n         log.info(\"Creating consumer client\");\n         final String applicationId = config.getString(StreamsConfig.APPLICATION_ID_CONFIG);\n         final Map<String, Object> consumerConfigs = config.getMainConsumerConfigs(applicationId, getConsumerClientId(threadId), threadIdx);\n+        consumerConfigs.put(InternalConfig.TIME, time);\n         consumerConfigs.put(StreamsConfig.InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n         consumerConfigs.put(StreamsConfig.InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, streamsMetadataState);\n         consumerConfigs.put(StreamsConfig.InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n         final AtomicInteger assignmentErrorCode = new AtomicInteger();\n         consumerConfigs.put(StreamsConfig.InternalConfig.ASSIGNMENT_ERROR_CODE, assignmentErrorCode);\n+        final AtomicLong nextProbingRebalanceMs = new AtomicLong(Long.MAX_VALUE);\n+        consumerConfigs.put(StreamsConfig.InternalConfig.NEXT_PROBING_REBALANCE_MS, nextProbingRebalanceMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4OTI2Mw==", "bodyText": "req: I guess you could also verify this with a mock consumer.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404789263", "createdAt": "2020-04-07T13:00:49Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +563,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < time.milliseconds()) {\n+                    log.info(\"The probing rebalance interval has elapsed since the last rebalance, triggering a \" +\n+                                \"rebalance to probe for newly caught-up clients\");\n+                    mainConsumer.enforceRebalance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MTA3Mw==", "bodyText": "super-nit: nextRebalanceTimeShouldBeMxValueByDefault() -> nextRebalanceTimeShouldBeMaxValueByDefault()", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404791073", "createdAt": "2020-04-07T13:03:35Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfoTest.java", "diffHunk": "@@ -142,4 +152,23 @@ public void shouldEncodeAndDecodeSmallerCommonlySupportedVersion() {\n             activeAssignment, Collections.emptyMap(), 2);\n         assertEquals(expectedInfo, AssignmentInfo.decode(info.encode()));\n     }\n+\n+    @Test\n+    public void nextRebalanceTimeShouldBeMxValueByDefault() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cade0406e2d8ea1e3b10477eea22aea732c673d", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/2cade0406e2d8ea1e3b10477eea22aea732c673d", "committedDate": "2020-04-08T01:51:48Z", "message": "log stable assignmnet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd28772fd27366bb58fd31ff793b7bfe88a73d9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/bcd28772fd27366bb58fd31ff793b7bfe88a73d9", "committedDate": "2020-04-08T01:51:48Z", "message": "add config for rebalance time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45303d6959b8ff00b507cd59015e3d59efc16ab2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/45303d6959b8ff00b507cd59015e3d59efc16ab2", "committedDate": "2020-04-08T01:51:48Z", "message": "optional casting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "579a0c014ca25c80b7b808ed03816390d830c9e5", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/579a0c014ca25c80b7b808ed03816390d830c9e5", "committedDate": "2020-04-08T01:51:48Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d8148137c5c5f7f753d599270bafd3c6c9f4f5", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f2d8148137c5c5f7f753d599270bafd3c6c9f4f5", "committedDate": "2020-04-08T01:51:48Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c95a096ccb250d3204b6a3141d89810a2b8baea4", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c95a096ccb250d3204b6a3141d89810a2b8baea4", "committedDate": "2020-04-08T01:51:48Z", "message": "add to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1940c91eaa9dac27dfedd71846acee33c3672fa", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/d1940c91eaa9dac27dfedd71846acee33c3672fa", "committedDate": "2020-04-08T01:51:48Z", "message": "only trigger rebalance on failed fetch end offsets when HA is enabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060cc5e8e548a196ec240be69befe1209f75787a", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/060cc5e8e548a196ec240be69befe1209f75787a", "committedDate": "2020-04-08T01:51:48Z", "message": "repalce Optional with AtomicLong"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5fb66c564f3e41b407daa52fcd78e7af03a2a57", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/b5fb66c564f3e41b407daa52fcd78e7af03a2a57", "committedDate": "2020-04-08T01:51:48Z", "message": "fix SPAT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b42b1b57f92893b72561117389c5868853f5add5", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/b42b1b57f92893b72561117389c5868853f5add5", "committedDate": "2020-04-08T01:51:48Z", "message": "github comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672366a1eb6a7da4e246cd46932a40346e7b742a", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/672366a1eb6a7da4e246cd46932a40346e7b742a", "committedDate": "2020-04-08T01:51:48Z", "message": "github comments, add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6240f69b3ae5dc7de8fee167f900aa6369ef3066", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/6240f69b3ae5dc7de8fee167f900aa6369ef3066", "committedDate": "2020-04-08T01:51:48Z", "message": "formatting/wording suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6382a68f4d4279e74ac81e2f72137404b06af2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/ea6382a68f4d4279e74ac81e2f72137404b06af2", "committedDate": "2020-04-08T01:51:48Z", "message": "add new assignorConfiguration configs test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00cc2287194a255d9de97cd3047aef4e3ca94d62", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/00cc2287194a255d9de97cd3047aef4e3ca94d62", "committedDate": "2020-04-08T01:51:48Z", "message": "add test to verify enforceRebalance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/51cf963d8b8817cf7f617356b55fdfe1459a0760", "committedDate": "2020-04-08T01:53:55Z", "message": "merge with trunk and fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/51cf963d8b8817cf7f617356b55fdfe1459a0760", "committedDate": "2020-04-08T01:53:55Z", "message": "merge with trunk and fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzY3MzM2", "url": "https://github.com/apache/kafka/pull/8409#pullrequestreview-389767336", "createdAt": "2020-04-08T08:40:50Z", "commit": {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0MDo1MVrOGCk8kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0MDo1MVrOGCk8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NTY2NA==", "bodyText": "I was more thinking about a separate unit test class AssignorConfigurationTest with a more thorough testing of all code paths, but if we feel that this should also be a follow up task, that is also fine with me.", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405355664", "createdAt": "2020-04-08T08:40:51Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1845,6 +1845,28 @@ public void shouldSetAdminClientTimeout() {\n         assertThat(assignorConfiguration.getAdminClientTimeout(), is(2 * 60 * 1000));\n     }\n \n+    @Test\n+    public void shouldGetNextProbingRebalanceMs() {\n+        nextProbingRebalanceMs.set(5 * 60 * 1000L);\n+\n+        createDefaultMockTaskManager();\n+        final Map<String, Object> props = configProps();\n+        final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(props);\n+\n+        assertThat(assignorConfiguration.getNextProbingRebalanceMs(props).get(), equalTo(5 * 60 * 1000L));\n+    }\n+\n+    @Test\n+    public void shouldGetTime() {\n+        time.setCurrentTimeMs(Long.MAX_VALUE);\n+\n+        createDefaultMockTaskManager();\n+        final Map<String, Object> props = configProps();\n+        final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(props);\n+\n+        assertThat(assignorConfiguration.getTime(props).milliseconds(), equalTo(Long.MAX_VALUE));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzY3NzA0", "url": "https://github.com/apache/kafka/pull/8409#pullrequestreview-389767704", "createdAt": "2020-04-08T08:41:21Z", "commit": {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 57, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}