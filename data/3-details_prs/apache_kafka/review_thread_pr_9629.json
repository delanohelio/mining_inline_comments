{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NTA5NzYy", "number": 9629, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0NTozMlrOE7a5Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToyNjowMFrOE8XQeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQyMDE4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0NTozMlrOH3DxMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0NTozMlrOH3DxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTQ3NQ==", "bodyText": "forgot to put the kafkaStreams1 into the try resource block here", "url": "https://github.com/apache/kafka/pull/9629#discussion_r527495475", "createdAt": "2020-11-20T07:45:32Z", "author": {"login": "showuon"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -145,48 +142,12 @@ public void shouldShutdownClient() throws Exception {\n \n     @Test\n     public void shouldShutdownApplication() throws Exception {\n-        final Topology topology = builder.build();\n-\n-        try (final KafkaStreams kafkaStreams = new KafkaStreams(topology, properties)) {\n-            final KafkaStreams kafkaStreams1 = new KafkaStreams(topology, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQyMzc2OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0Njo0NFrOH3DzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0Njo0NFrOH3DzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTk4NQ==", "bodyText": "The start is async, and we didn't wait for it.", "url": "https://github.com/apache/kafka/pull/9629#discussion_r527495985", "createdAt": "2020-11-20T07:46:44Z", "author": {"login": "showuon"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -145,48 +142,12 @@ public void shouldShutdownClient() throws Exception {\n \n     @Test\n     public void shouldShutdownApplication() throws Exception {\n-        final Topology topology = builder.build();\n-\n-        try (final KafkaStreams kafkaStreams = new KafkaStreams(topology, properties)) {\n-            final KafkaStreams kafkaStreams1 = new KafkaStreams(topology, properties);\n-            final CountDownLatch latch = new CountDownLatch(1);\n-            kafkaStreams.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n-            kafkaStreams1.setUncaughtExceptionHandler((t, e) -> fail(\"should not hit old handler\"));\n-            kafkaStreams.setUncaughtExceptionHandler(exception -> SHUTDOWN_APPLICATION);\n-            kafkaStreams1.setUncaughtExceptionHandler(exception -> SHUTDOWN_APPLICATION);\n-\n-            kafkaStreams.start();\n-            kafkaStreams1.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODg3NDY1OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxNjowOFrOH3Rcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxNjowOFrOH3Rcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxOTU5OQ==", "bodyText": "delete unused latch", "url": "https://github.com/apache/kafka/pull/9629#discussion_r527719599", "createdAt": "2020-11-20T14:16:08Z", "author": {"login": "showuon"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -110,83 +110,45 @@ public void teardown() throws IOException {\n     }\n \n     @Test\n-    public void shouldShutdownThreadUsingOldHandler() throws Exception {\n+    public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n         try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n-            final CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODg4MjMyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxNzowM1rOH3Rghg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxNzowM1rOH3Rghg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMDU4Mg==", "bodyText": "We should throw a specific kind of exception, not an Exception.", "url": "https://github.com/apache/kafka/pull/9629#discussion_r527720582", "createdAt": "2020-11-20T14:17:03Z", "author": {"login": "showuon"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -903,16 +903,19 @@ public static void startApplicationAndWaitUntilRunning(final List<KafkaStreams>\n     }\n \n     /**\n-     * Waits for the given {@link KafkaStreams} instances to all be in a {@link State#RUNNING}\n-     * state. Prefer {@link #startApplicationAndWaitUntilRunning(List, Duration)} when possible\n+     * Waits for the given {@link KafkaStreams} instances to all be in a specific {@link State}.\n+     * Prefer {@link #startApplicationAndWaitUntilRunning(List, Duration)} when possible\n      * because this method uses polling, which can be more error prone and slightly slower.\n      *\n      * @param streamsList the list of streams instances to run.\n-     * @param timeout the time to wait for the streams to all be in {@link State#RUNNING} state.\n+     * @param state the expected state that all the streams to be in within timeout\n+     * @param timeout the time to wait for the streams to all be in the specific state.\n+     *\n+     * @throws InterruptedException if the streams doesn't change to the expected state in time.\n      */\n     public static void waitForApplicationState(final List<KafkaStreams> streamsList,\n                                                final State state,\n-                                               final Duration timeout) throws Exception {\n+                                               final Duration timeout) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTAyMDMyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo0OToxOVrOH3Sz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMjoxOFrOH4fM8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MTk0OA==", "bodyText": "We should wait for the uncaughtExceptionHandler got called before waiting for the streams state change.", "url": "https://github.com/apache/kafka/pull/9629#discussion_r527741948", "createdAt": "2020-11-20T14:49:19Z", "author": {"login": "showuon"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -110,83 +110,45 @@ public void teardown() throws IOException {\n     }\n \n     @Test\n-    public void shouldShutdownThreadUsingOldHandler() throws Exception {\n+    public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n         try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n-            final CountDownLatch latch = new CountDownLatch(1);\n             final AtomicBoolean flag = new AtomicBoolean(false);\n             kafkaStreams.setUncaughtExceptionHandler((t, e) -> flag.set(true));\n \n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n-\n             produceMessages(0L, inputTopic, \"A\");\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, Duration.ofSeconds(15));\n \n             TestUtils.waitForCondition(flag::get, \"Handler was called\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1c0c110c1f4f9eb42bea62f9129ae3a7083c81"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MzUyMw==", "bodyText": "The order is not really that important here, either way works", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528993523", "createdAt": "2020-11-23T21:02:18Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -110,83 +110,45 @@ public void teardown() throws IOException {\n     }\n \n     @Test\n-    public void shouldShutdownThreadUsingOldHandler() throws Exception {\n+    public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n         try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n-            final CountDownLatch latch = new CountDownLatch(1);\n             final AtomicBoolean flag = new AtomicBoolean(false);\n             kafkaStreams.setUncaughtExceptionHandler((t, e) -> flag.set(true));\n \n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n-\n             produceMessages(0L, inputTopic, \"A\");\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, Duration.ofSeconds(15));\n \n             TestUtils.waitForCondition(flag::get, \"Handler was called\");\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, DEFAULT_DURATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MTk0OA=="}, "originalCommit": {"oid": "0e1c0c110c1f4f9eb42bea62f9129ae3a7083c81"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzI5NDMzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToyMTo0MlrOH4b_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzo0Mzo0MVrOH4qvdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MDk1Mw==", "bodyText": "I think this was actually correct as it was (and ditto for the above). One alternative suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set the handler invoked when an {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG} internal thread\n          \n          \n            \n                 * Set the handler invoked when an internal {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG stream thread}", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528940953", "createdAt": "2020-11-23T19:21:42Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -379,13 +379,12 @@ public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler un\n     }\n \n     /**\n-     * Set the handler invoked when an {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread}\n+     * Set the handler invoked when an {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG} internal thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4MjU4MA==", "bodyText": "Updated. Thanks.", "url": "https://github.com/apache/kafka/pull/9629#discussion_r529182580", "createdAt": "2020-11-24T03:43:41Z", "author": {"login": "showuon"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -379,13 +379,12 @@ public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler un\n     }\n \n     /**\n-     * Set the handler invoked when an {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread}\n+     * Set the handler invoked when an {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG} internal thread", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MDk1Mw=="}, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzMwMzczOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToyNDoyN1rOH4cFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMDo1OFrOH4fKeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MjQwMQ==", "bodyText": "Hey @wcarlson5 , can you take a look at this? If we change the default number of threads to 1 will we be reducing test coverage or not testing the correct thing anymore?\nFWIW I think for tests where the number of threads doesn't matter, we should default to 1. But I'm not sure which tests do/do not rely on using multiple stream threads", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528942401", "createdAt": "2020-11-23T19:24:27Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -97,7 +97,7 @@ public void setup() {\n                 mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers()),\n                 mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, appId),\n                 mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath()),\n-                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2),\n+                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5Mjg4OQ==", "bodyText": "Yes, Both the old handler test and the close client should have 2 threads. We need to ensure that after a rebalance the old handler has attempted the process the record twice and the client shutdown only once. We can not be sure of that with only one thread.", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528992889", "createdAt": "2020-11-23T21:00:58Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -97,7 +97,7 @@ public void setup() {\n                 mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers()),\n                 mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, appId),\n                 mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath()),\n-                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2),\n+                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MjQwMQ=="}, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzMxMDY0OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOToyNjowMFrOH4cJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMToxMVrOH4fK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MzM4OQ==", "bodyText": "@wcarlson5 for example, this test probably should have multiple threads, right?", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528943389", "createdAt": "2020-11-23T19:26:00Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -110,83 +110,45 @@ public void teardown() throws IOException {\n     }\n \n     @Test\n-    public void shouldShutdownThreadUsingOldHandler() throws Exception {\n+    public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n         try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n-            final CountDownLatch latch = new CountDownLatch(1);\n             final AtomicBoolean flag = new AtomicBoolean(false);\n             kafkaStreams.setUncaughtExceptionHandler((t, e) -> flag.set(true));\n \n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n-\n             produceMessages(0L, inputTopic, \"A\");\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, Duration.ofSeconds(15));\n \n             TestUtils.waitForCondition(flag::get, \"Handler was called\");\n-            assertThat(processorValueCollector.size(), equalTo(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5Mjk4Ng==", "bodyText": "as above", "url": "https://github.com/apache/kafka/pull/9629#discussion_r528992986", "createdAt": "2020-11-23T21:01:11Z", "author": {"login": "wcarlson5"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -110,83 +110,45 @@ public void teardown() throws IOException {\n     }\n \n     @Test\n-    public void shouldShutdownThreadUsingOldHandler() throws Exception {\n+    public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n         try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n-            final CountDownLatch latch = new CountDownLatch(1);\n             final AtomicBoolean flag = new AtomicBoolean(false);\n             kafkaStreams.setUncaughtExceptionHandler((t, e) -> flag.set(true));\n \n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n-\n             produceMessages(0L, inputTopic, \"A\");\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, Duration.ofSeconds(15));\n \n             TestUtils.waitForCondition(flag::get, \"Handler was called\");\n-            assertThat(processorValueCollector.size(), equalTo(2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk0MzM4OQ=="}, "originalCommit": {"oid": "e6d39f6dc15a198a5a58d34d239a1021eeaf43b7"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3593, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}