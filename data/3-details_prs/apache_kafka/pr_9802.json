{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MTEwNDQy", "number": 9802, "title": "KAFKA-10894; Ensure PartitionInfo replicas are not null in client quota callback", "bodyText": "Previously offline replicas were included as null in the array of replicas in PartitionInfo when populated by the MetadataCache for the purpose of the client quota callback. This patch instead initializes empty non-null nodes, which is consistent with how PartitionInfo is constructed by the clients in MetadataResponse.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-12-30T22:44:30Z", "url": "https://github.com/apache/kafka/pull/9802", "merged": true, "mergeCommit": {"oid": "daad1cbf5555d20579953244481279594be1c845"}, "closed": true, "closedAt": "2021-01-05T21:02:56Z", "author": {"login": "hachikuji"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrXQtngH2gAyNTQ3MTEwNDQyOjgxZGQwMmJiMDE1ZDc1OTc1YWI2ZjI3ZTc4YmY3ZTVlYjBlNmEyMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtQq1tAFqTU2MjA5NjQxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224", "author": {"user": {"login": "hachikuji", "name": "Jason Gustafson"}}, "url": "https://github.com/apache/kafka/commit/81dd02bb015d75975ab6f27e78bf7e5eb0e6a224", "committedDate": "2020-12-30T22:42:03Z", "message": "KAFKA-10894; Ensure PartitionInfo replicas are not null in client quota callback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjczNzY0", "url": "https://github.com/apache/kafka/pull/9802#pullrequestreview-560273764", "createdAt": "2020-12-31T06:35:27Z", "commit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjozNToyN1rOIM6Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjozNToyN1rOIM6Tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw==", "bodyText": "How about using a helper method to create new Node(id, \"\", -1) ? It can be used by MetadataResponse also.", "url": "https://github.com/apache/kafka/pull/9802#discussion_r550409107", "createdAt": "2020-12-31T06:35:27Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDk2NDE1", "url": "https://github.com/apache/kafka/pull/9802#pullrequestreview-562096415", "createdAt": "2021-01-05T20:09:06Z", "commit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2412, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}