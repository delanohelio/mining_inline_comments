{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NzIyMzM2", "number": 9715, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTowNzowMVrOFCu3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoxMDozOVrOFO1ang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDA5MjUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTowNzowMVrOICCf5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTowNzowMVrOICCf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwODk5OQ==", "bodyText": "onComplete is unused.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539008999", "createdAt": "2020-12-09T05:07:01Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper class for request handlers. Provides common functionality around throttling, authorizations, and error handling\n+ */\n+class ApisUtils(val requestChannel: RequestChannel,\n+                val authorizer: Option[Authorizer],\n+                val quotas: QuotaManagers,\n+                val time: Time) extends Logging {\n+\n+  // private package for testing\n+  def authorize(requestContext: RequestContext,\n+                operation: AclOperation,\n+                resourceType: ResourceType,\n+                resourceName: String,\n+                logIfAllowed: Boolean = true,\n+                logIfDenied: Boolean = true,\n+                refCount: Int = 1): Boolean = {\n+    authorizer.forall { authZ =>\n+      val resource = new ResourcePattern(resourceType, resourceName, PatternType.LITERAL)\n+      val actions = Collections.singletonList(new Action(operation, resource, refCount, logIfAllowed, logIfDenied))\n+      authZ.authorize(requestContext, actions).get(0) == AuthorizationResult.ALLOWED\n+    }\n+  }\n+\n+  def authorizeClusterOperation(request: RequestChannel.Request, operation: AclOperation): Unit = {\n+    if (!authorize(request.context, operation, CLUSTER, CLUSTER_NAME))\n+      throw new ClusterAuthorizationException(s\"Request $request is not authorized.\")\n+  }\n+\n+  def authorizedOperations(request: RequestChannel.Request, resource: Resource): Int = {\n+    val supportedOps = AclEntry.supportedOperations(resource.resourceType).toList\n+    val authorizedOps = authorizer match {\n+      case Some(authZ) =>\n+        val resourcePattern = new ResourcePattern(resource.resourceType, resource.name, PatternType.LITERAL)\n+        val actions = supportedOps.map { op => new Action(op, resourcePattern, 1, false, false) }\n+        authZ.authorize(request.context, actions.asJava).asScala\n+          .zip(supportedOps)\n+          .filter(_._1 == AuthorizationResult.ALLOWED)\n+          .map(_._2).toSet\n+      case None =>\n+        supportedOps.toSet\n+    }\n+    Utils.to32BitField(authorizedOps.map(operation => operation.code.asInstanceOf[JByte]).asJava)\n+  }\n+\n+  def handleError(request: RequestChannel.Request, e: Throwable): Unit = {\n+    val mayThrottle = e.isInstanceOf[ClusterAuthorizationException] || !request.header.apiKey.clusterAction\n+    error(\"Error when handling request: \" +\n+      s\"clientId=${request.header.clientId}, \" +\n+      s\"correlationId=${request.header.correlationId}, \" +\n+      s\"api=${request.header.apiKey}, \" +\n+      s\"version=${request.header.apiVersion}, \" +\n+      s\"body=${request.body[AbstractRequest]}\", e)\n+    if (mayThrottle)\n+      sendErrorResponseMaybeThrottle(request, e)\n+    else\n+      sendErrorResponseExemptThrottle(request, e)\n+  }\n+\n+  def sendForwardedResponse(\n+    request: RequestChannel.Request,\n+    response: AbstractResponse\n+  ): Unit = {\n+    // For forwarded requests, we take the throttle time from the broker that\n+    // the request was forwarded to\n+    val throttleTimeMs = response.throttleTimeMs()\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n+    requestChannel.sendResponse(request, Some(response), None)\n+  }\n+\n+  // Throttle the channel if the request quota is enabled but has been violated. Regardless of throttling, send the\n+  // response immediately.\n+  def sendResponseMaybeThrottle(request: RequestChannel.Request,\n+                                createResponse: Int => AbstractResponse,\n+                                onComplete: Option[Send => Unit] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDA5MzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTowNzoxN1rOICCgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTowNzoxN1rOICCgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwOTExMg==", "bodyText": "ditto", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539009112", "createdAt": "2020-12-09T05:07:17Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper class for request handlers. Provides common functionality around throttling, authorizations, and error handling\n+ */\n+class ApisUtils(val requestChannel: RequestChannel,\n+                val authorizer: Option[Authorizer],\n+                val quotas: QuotaManagers,\n+                val time: Time) extends Logging {\n+\n+  // private package for testing\n+  def authorize(requestContext: RequestContext,\n+                operation: AclOperation,\n+                resourceType: ResourceType,\n+                resourceName: String,\n+                logIfAllowed: Boolean = true,\n+                logIfDenied: Boolean = true,\n+                refCount: Int = 1): Boolean = {\n+    authorizer.forall { authZ =>\n+      val resource = new ResourcePattern(resourceType, resourceName, PatternType.LITERAL)\n+      val actions = Collections.singletonList(new Action(operation, resource, refCount, logIfAllowed, logIfDenied))\n+      authZ.authorize(requestContext, actions).get(0) == AuthorizationResult.ALLOWED\n+    }\n+  }\n+\n+  def authorizeClusterOperation(request: RequestChannel.Request, operation: AclOperation): Unit = {\n+    if (!authorize(request.context, operation, CLUSTER, CLUSTER_NAME))\n+      throw new ClusterAuthorizationException(s\"Request $request is not authorized.\")\n+  }\n+\n+  def authorizedOperations(request: RequestChannel.Request, resource: Resource): Int = {\n+    val supportedOps = AclEntry.supportedOperations(resource.resourceType).toList\n+    val authorizedOps = authorizer match {\n+      case Some(authZ) =>\n+        val resourcePattern = new ResourcePattern(resource.resourceType, resource.name, PatternType.LITERAL)\n+        val actions = supportedOps.map { op => new Action(op, resourcePattern, 1, false, false) }\n+        authZ.authorize(request.context, actions.asJava).asScala\n+          .zip(supportedOps)\n+          .filter(_._1 == AuthorizationResult.ALLOWED)\n+          .map(_._2).toSet\n+      case None =>\n+        supportedOps.toSet\n+    }\n+    Utils.to32BitField(authorizedOps.map(operation => operation.code.asInstanceOf[JByte]).asJava)\n+  }\n+\n+  def handleError(request: RequestChannel.Request, e: Throwable): Unit = {\n+    val mayThrottle = e.isInstanceOf[ClusterAuthorizationException] || !request.header.apiKey.clusterAction\n+    error(\"Error when handling request: \" +\n+      s\"clientId=${request.header.clientId}, \" +\n+      s\"correlationId=${request.header.correlationId}, \" +\n+      s\"api=${request.header.apiKey}, \" +\n+      s\"version=${request.header.apiVersion}, \" +\n+      s\"body=${request.body[AbstractRequest]}\", e)\n+    if (mayThrottle)\n+      sendErrorResponseMaybeThrottle(request, e)\n+    else\n+      sendErrorResponseExemptThrottle(request, e)\n+  }\n+\n+  def sendForwardedResponse(\n+    request: RequestChannel.Request,\n+    response: AbstractResponse\n+  ): Unit = {\n+    // For forwarded requests, we take the throttle time from the broker that\n+    // the request was forwarded to\n+    val throttleTimeMs = response.throttleTimeMs()\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n+    requestChannel.sendResponse(request, Some(response), None)\n+  }\n+\n+  // Throttle the channel if the request quota is enabled but has been violated. Regardless of throttling, send the\n+  // response immediately.\n+  def sendResponseMaybeThrottle(request: RequestChannel.Request,\n+                                createResponse: Int => AbstractResponse,\n+                                onComplete: Option[Send => Unit] = None): Unit = {\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    // Only throttle non-forwarded requests\n+    if (!request.isForwarded)\n+      quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n+    requestChannel.sendResponse(request, Some(createResponse(throttleTimeMs)), None)\n+  }\n+\n+  def sendErrorResponseMaybeThrottle(request: RequestChannel.Request, error: Throwable): Unit = {\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    // Only throttle non-forwarded requests or cluster authorization failures\n+    if (error.isInstanceOf[ClusterAuthorizationException] || !request.isForwarded)\n+      quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n+    sendErrorOrCloseConnection(request, error, throttleTimeMs)\n+  }\n+\n+  private def maybeRecordAndGetThrottleTimeMs(request: RequestChannel.Request): Int = {\n+    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request, time.milliseconds())\n+    request.apiThrottleTimeMs = throttleTimeMs\n+    throttleTimeMs\n+  }\n+\n+  /**\n+   * Throttle the channel if the controller mutations quota or the request quota have been violated.\n+   * Regardless of throttling, send the response immediately.\n+   */\n+  def sendResponseMaybeThrottleWithControllerQuota(controllerMutationQuota: ControllerMutationQuota,\n+                                                   request: RequestChannel.Request,\n+                                                   createResponse: Int => AbstractResponse,\n+                                                   onComplete: Option[Send => Unit]): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDExMzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNToxNTo1MFrOICCrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjowODoxMlrOICcpYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxMTg4OQ==", "bodyText": "Instantiating a \"utils\" object is a bit weird to me. it seems to me we can make ApisUtils be a trait with self-type (this: KafkaApis) if the main purpose of this PR is to reduce the size of KafkaApis. The benefit of using self-type is that\n\nwe don't need to instantiate a \"utils\"\nwe can move some code from KafkaApis to ApisUtils\nwe don't need to change \"autxxx\" to \"apisUtils.autxxx\"", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539011889", "createdAt": "2020-12-09T05:15:50Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -98,6 +97,7 @@ import scala.annotation.nowarn\n  * Logic to handle the various Kafka requests\n  */\n class KafkaApis(val requestChannel: RequestChannel,\n+                val apisUtils: ApisUtils,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5NTkxOQ==", "bodyText": "Thanks, @chia7712, I like this suggestion. I'll see if I can figure this out (I wasn't too happy with the utility class needing to be instantiated either)", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539295919", "createdAt": "2020-12-09T13:15:09Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -98,6 +97,7 @@ import scala.annotation.nowarn\n  * Logic to handle the various Kafka requests\n  */\n class KafkaApis(val requestChannel: RequestChannel,\n+                val apisUtils: ApisUtils,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxMTg4OQ=="}, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5MDMyOQ==", "bodyText": "Is this an improvement? I am not sure. A couple of things:\n\nThe Utils suffix looks odd both in a trait as well as a class that is instantiated.\nUsing delegation allows for better separation of concerns than inheritance.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539390329", "createdAt": "2020-12-09T15:14:05Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -98,6 +97,7 @@ import scala.annotation.nowarn\n  * Logic to handle the various Kafka requests\n  */\n class KafkaApis(val requestChannel: RequestChannel,\n+                val apisUtils: ApisUtils,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxMTg4OQ=="}, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzNzQxMA==", "bodyText": "Agreed. I don't really like the name, but can't think of a better one.\n\n\nOriginally, I had hoped to remove some dependencies from KafkaApis when pulling out these methods, but it turns out they are all needed for other things as well. In the end it just adds a new dependency (which is fine). Seeing how I had to mess around with the type hierarchy to not break or complicate TestRaftRequestHandler, I'm leaning towards the delegation approach we had before.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539437410", "createdAt": "2020-12-09T16:08:12Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -98,6 +97,7 @@ import scala.annotation.nowarn\n  * Logic to handle the various Kafka requests\n  */\n class KafkaApis(val requestChannel: RequestChannel,\n+                val apisUtils: ApisUtils,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxMTg4OQ=="}, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDE4MjY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo0MToyOFrOICDQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo0MToyOFrOICDQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyMTUwMw==", "bodyText": "There is a another \"sendErrorOrCloseConnection\" in ApisUtils", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539021503", "createdAt": "2020-12-09T05:41:28Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -432,6 +432,43 @@ class RequestChannel(val queueSize: Int,\n     }\n   }\n \n+  def sendResponse(request: RequestChannel.Request,\n+                   responseOpt: Option[AbstractResponse],\n+                   onComplete: Option[Send => Unit]): Unit = {\n+    // Update error metrics for each error code in the response including Errors.NONE\n+    responseOpt.foreach(response => updateErrorMetrics(request.header.apiKey, response.errorCounts.asScala))\n+\n+    val response = responseOpt match {\n+      case Some(response) =>\n+        new RequestChannel.SendResponse(\n+          request,\n+          request.buildResponseSend(response),\n+          request.responseString(response),\n+          onComplete\n+        )\n+      case None =>\n+        new RequestChannel.NoOpResponse(request)\n+    }\n+\n+    sendResponse(response)\n+  }\n+\n+  def sendErrorOrCloseConnection(request: RequestChannel.Request, error: Throwable, throttleMs: Int): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05373f383304fec2303734647d8c0f1f32f0bc3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjI2NDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDowMToxMlrOICWERA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1ODoyNFrOICcI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyOTYwNA==", "bodyText": "Added this trait to avoid polluting TestRaftRequestHandler with the ApisUtils dependencies", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539329604", "createdAt": "2020-12-09T14:01:12Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -34,6 +34,10 @@ trait ApiRequestHandler {\n   def handle(request: RequestChannel.Request): Unit\n }\n \n+trait BaseApis extends ApiRequestHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "904235ef700c0907a7b0e5d63422fd8ce0430c29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MTkzOQ==", "bodyText": "not sure whether BaseApis  is required. KafkaApis can still extend ApiRequestHandler as you have added required variables to ApisUtils\n  val requestChannel: RequestChannel\n  val quotas: QuotaManagers\n  val time: Time\n  val authorizer: Option[Authorizer]", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539361939", "createdAt": "2020-12-09T14:41:21Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -34,6 +34,10 @@ trait ApiRequestHandler {\n   def handle(request: RequestChannel.Request): Unit\n }\n \n+trait BaseApis extends ApiRequestHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyOTYwNA=="}, "originalCommit": {"oid": "904235ef700c0907a7b0e5d63422fd8ce0430c29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5MTgyMw==", "bodyText": "BTW, my thought was\ntrait ApisUtils extends Logging {\n  this: KafkaApis =>", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539391823", "createdAt": "2020-12-09T15:15:50Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -34,6 +34,10 @@ trait ApiRequestHandler {\n   def handle(request: RequestChannel.Request): Unit\n }\n \n+trait BaseApis extends ApiRequestHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyOTYwNA=="}, "originalCommit": {"oid": "904235ef700c0907a7b0e5d63422fd8ce0430c29"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyOTA5Ng==", "bodyText": "Self types like this are an anti pattern, in my opinion. They were used years ago as a DI replacement (the cake pattern), but people have moved on since they tend to be hard to understand.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539429096", "createdAt": "2020-12-09T15:58:24Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/KafkaRequestHandler.scala", "diffHunk": "@@ -34,6 +34,10 @@ trait ApiRequestHandler {\n   def handle(request: RequestChannel.Request): Unit\n }\n \n+trait BaseApis extends ApiRequestHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyOTYwNA=="}, "originalCommit": {"oid": "904235ef700c0907a7b0e5d63422fd8ce0430c29"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjQ4MjY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0MjozMFrOICYGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMjowNjo1N1rOITFs4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2Mjk1OA==", "bodyText": "just curious. Why this method is located in RequestChannel rather than ApiUtils", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539362958", "createdAt": "2020-12-09T14:42:30Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -432,6 +432,43 @@ class RequestChannel(val queueSize: Int,\n     }\n   }\n \n+  def sendResponse(request: RequestChannel.Request,\n+                   responseOpt: Option[AbstractResponse],\n+                   onComplete: Option[Send => Unit]): Unit = {\n+    // Update error metrics for each error code in the response including Errors.NONE\n+    responseOpt.foreach(response => updateErrorMetrics(request.header.apiKey, response.errorCounts.asScala))\n+\n+    val response = responseOpt match {\n+      case Some(response) =>\n+        new RequestChannel.SendResponse(\n+          request,\n+          request.buildResponseSend(response),\n+          request.responseString(response),\n+          onComplete\n+        )\n+      case None =>\n+        new RequestChannel.NoOpResponse(request)\n+    }\n+\n+    sendResponse(response)\n+  }\n+\n+  def sendErrorOrCloseConnection(request: RequestChannel.Request, error: Throwable, throttleMs: Int): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fee421d8e3a459ee6c15d3bb8dcc315aec2d60f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg4NzI2NA==", "bodyText": "I suppose I put it here since it doesn't need any of the other objects that are provided by ApisUtils, it just needs the RequestChannel.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r556887264", "createdAt": "2021-01-13T22:06:57Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -432,6 +432,43 @@ class RequestChannel(val queueSize: Int,\n     }\n   }\n \n+  def sendResponse(request: RequestChannel.Request,\n+                   responseOpt: Option[AbstractResponse],\n+                   onComplete: Option[Send => Unit]): Unit = {\n+    // Update error metrics for each error code in the response including Errors.NONE\n+    responseOpt.foreach(response => updateErrorMetrics(request.header.apiKey, response.errorCounts.asScala))\n+\n+    val response = responseOpt match {\n+      case Some(response) =>\n+        new RequestChannel.SendResponse(\n+          request,\n+          request.buildResponseSend(response),\n+          request.responseString(response),\n+          onComplete\n+        )\n+      case None =>\n+        new RequestChannel.NoOpResponse(request)\n+    }\n+\n+    sendResponse(response)\n+  }\n+\n+  def sendErrorOrCloseConnection(request: RequestChannel.Request, error: Throwable, throttleMs: Int): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2Mjk1OA=="}, "originalCommit": {"oid": "6fee421d8e3a459ee6c15d3bb8dcc315aec2d60f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjQ4Nzg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0MzoyOVrOICYJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0MzoyOVrOICYJmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MzczOA==", "bodyText": "Is this change still valid?", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539363738", "createdAt": "2020-12-09T14:43:29Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -369,15 +369,17 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n             KafkaServer.MIN_INCREMENTAL_FETCH_SESSION_EVICTION_MS))\n \n         /* start processing requests */\n-        dataPlaneRequestProcessor = new KafkaApis(socketServer.dataPlaneRequestChannel, replicaManager, adminManager, groupCoordinator, transactionCoordinator,\n+        dataPlaneRequestProcessor = new KafkaApis(socketServer.dataPlaneRequestChannel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fee421d8e3a459ee6c15d3bb8dcc315aec2d60f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjQ4ODU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0MzozNVrOICYJ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0MzozNVrOICYJ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MzgzMQ==", "bodyText": "ditto", "url": "https://github.com/apache/kafka/pull/9715#discussion_r539363831", "createdAt": "2020-12-09T14:43:35Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/KafkaServer.scala", "diffHunk": "@@ -369,15 +369,17 @@ class KafkaServer(val config: KafkaConfig, time: Time = Time.SYSTEM, threadNameP\n             KafkaServer.MIN_INCREMENTAL_FETCH_SESSION_EVICTION_MS))\n \n         /* start processing requests */\n-        dataPlaneRequestProcessor = new KafkaApis(socketServer.dataPlaneRequestChannel, replicaManager, adminManager, groupCoordinator, transactionCoordinator,\n+        dataPlaneRequestProcessor = new KafkaApis(socketServer.dataPlaneRequestChannel,\n+          replicaManager, adminManager, groupCoordinator, transactionCoordinator,\n           kafkaController, forwardingManager, zkClient, config.brokerId, config, metadataCache, metrics, authorizer, quotaManagers,\n           fetchManager, brokerTopicStats, clusterId, time, tokenManager, brokerFeatures, featureCache)\n \n         dataPlaneRequestHandlerPool = new KafkaRequestHandlerPool(config.brokerId, socketServer.dataPlaneRequestChannel, dataPlaneRequestProcessor, time,\n           config.numIoThreads, s\"${SocketServer.DataPlaneMetricPrefix}RequestHandlerAvgIdlePercent\", SocketServer.DataPlaneThreadPrefix)\n \n         socketServer.controlPlaneRequestChannelOpt.foreach { controlPlaneRequestChannel =>\n-          controlPlaneRequestProcessor = new KafkaApis(controlPlaneRequestChannel, replicaManager, adminManager, groupCoordinator, transactionCoordinator,\n+          controlPlaneRequestProcessor = new KafkaApis(controlPlaneRequestChannel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fee421d8e3a459ee6c15d3bb8dcc315aec2d60f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTY3NTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0Nzo1NFrOITBfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0Nzo1NFrOITBfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxODM2Mg==", "bodyText": "Is this intentional?", "url": "https://github.com/apache/kafka/pull/9715#discussion_r556818362", "createdAt": "2021-01-13T20:47:54Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/network/RequestChannel.scala", "diffHunk": "@@ -412,8 +412,8 @@ class RequestChannel(val queueSize: Int,\n   }\n \n   def sendResponse(request: RequestChannel.Request,\n-                   responseOpt: Option[AbstractResponse],\n-                   onComplete: Option[Send => Unit]): Unit = {\n+                           responseOpt: Option[AbstractResponse],\n+                           onComplete: Option[Send => Unit]): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3966766a936e724266f7e349ef405bf69fc1295"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTY3NzA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0ODoyM1rOITBg7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0ODoyM1rOITBg7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxODY3MQ==", "bodyText": "Is this intentional?", "url": "https://github.com/apache/kafka/pull/9715#discussion_r556818671", "createdAt": "2021-01-13T20:48:23Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "diffHunk": "@@ -109,7 +106,7 @@ trait ApisUtils extends Logging {\n   // Throttle the channel if the request quota is enabled but has been violated. Regardless of throttling, send the\n   // response immediately.\n   def sendResponseMaybeThrottle(request: RequestChannel.Request,\n-                                createResponse: Int => AbstractResponse): Unit = {\n+                                        createResponse: Int => AbstractResponse): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3966766a936e724266f7e349ef405bf69fc1295"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNjc1MzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMTo1MzoxMFrOITMLUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDo0Mjo1N1rOITnt-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5MzM2Mg==", "bodyText": "Might be just me, but the plural Apis reads awkwardly to me. How about RequestHandlerUtils?", "url": "https://github.com/apache/kafka/pull/9715#discussion_r556993362", "createdAt": "2021-01-14T01:53:10Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "diffHunk": "@@ -0,0 +1,204 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.cluster.Partition\n+import kafka.coordinator.group.GroupCoordinator\n+import kafka.coordinator.transaction.TransactionCoordinator\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.internals.Topic\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{LogContext, Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper methods and helper class factories for request handlers. Provides common functionality around throttling,\n+ * authorizations, and error handling\n+ */\n+object ApisUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae52da177a814c87dbfeede8d81662f4596493a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ0NDYwMw==", "bodyText": "It is pretty awkward, but ApiUtils was taken. RequestHandlerUtils sounds good.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r557444603", "createdAt": "2021-01-14T14:42:57Z", "author": {"login": "mumrah"}, "path": "core/src/main/scala/kafka/server/ApisUtils.scala", "diffHunk": "@@ -0,0 +1,204 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.cluster.Partition\n+import kafka.coordinator.group.GroupCoordinator\n+import kafka.coordinator.transaction.TransactionCoordinator\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.internals.Topic\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{LogContext, Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper methods and helper class factories for request handlers. Provides common functionality around throttling,\n+ * authorizations, and error handling\n+ */\n+object ApisUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk5MzM2Mg=="}, "originalCommit": {"oid": "4ae52da177a814c87dbfeede8d81662f4596493a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTcwMTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/RequestHandlerUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTowMzoyNlrOITos9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTowMzoyNlrOITos9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MDcyNg==", "bodyText": "I would move this to its own file. It seems unrelated to the other things in this class.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r557460726", "createdAt": "2021-01-14T15:03:26Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/RequestHandlerUtils.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.cluster.Partition\n+import kafka.coordinator.group.GroupCoordinator\n+import kafka.coordinator.transaction.TransactionCoordinator\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.internals.Topic\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper methods for request handlers\n+ */\n+object RequestHandlerUtils {\n+  def onLeadershipChange(groupCoordinator: GroupCoordinator,\n+                         txnCoordinator: TransactionCoordinator,\n+                         updatedLeaders: Iterable[Partition],\n+                         updatedFollowers: Iterable[Partition]): Unit = {\n+    // for each new leader or follower, call coordinator to handle consumer group migration.\n+    // this callback is invoked under the replica state change lock to ensure proper order of\n+    // leadership changes\n+    updatedLeaders.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onElection(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onElection(partition.partitionId, partition.getLeaderEpoch)\n+    }\n+\n+    updatedFollowers.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onResignation(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onResignation(partition.partitionId, Some(partition.getLeaderEpoch))\n+    }\n+  }\n+}\n+\n+class AuthHelper(val requestChannel: RequestChannel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a77a9a03e78d20e5ebeb877b49f9032efef4152"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTcwNDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/RequestHandlerUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTowNDoxMVrOITou4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTowNDoxMVrOITou4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ2MTIxNw==", "bodyText": "Should this be RequestHandlerHelper then? Maybe we should ditch the Utils name and only have RequestHandlerHelper with the static methods in the companion.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r557461217", "createdAt": "2021-01-14T15:04:11Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/RequestHandlerUtils.scala", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.cluster.Partition\n+import kafka.coordinator.group.GroupCoordinator\n+import kafka.coordinator.transaction.TransactionCoordinator\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.internals.Topic\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse, RequestContext}\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.{Time, Utils}\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * Helper methods for request handlers\n+ */\n+object RequestHandlerUtils {\n+  def onLeadershipChange(groupCoordinator: GroupCoordinator,\n+                         txnCoordinator: TransactionCoordinator,\n+                         updatedLeaders: Iterable[Partition],\n+                         updatedFollowers: Iterable[Partition]): Unit = {\n+    // for each new leader or follower, call coordinator to handle consumer group migration.\n+    // this callback is invoked under the replica state change lock to ensure proper order of\n+    // leadership changes\n+    updatedLeaders.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onElection(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onElection(partition.partitionId, partition.getLeaderEpoch)\n+    }\n+\n+    updatedFollowers.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onResignation(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onResignation(partition.partitionId, Some(partition.getLeaderEpoch))\n+    }\n+  }\n+}\n+\n+class AuthHelper(val requestChannel: RequestChannel,\n+                 val authorizer: Option[Authorizer]) {\n+  def authorize(requestContext: RequestContext,\n+                operation: AclOperation,\n+                resourceType: ResourceType,\n+                resourceName: String,\n+                logIfAllowed: Boolean = true,\n+                logIfDenied: Boolean = true,\n+                refCount: Int = 1): Boolean = {\n+    authorizer.forall { authZ =>\n+      val resource = new ResourcePattern(resourceType, resourceName, PatternType.LITERAL)\n+      val actions = Collections.singletonList(new Action(operation, resource, refCount, logIfAllowed, logIfDenied))\n+      authZ.authorize(requestContext, actions).get(0) == AuthorizationResult.ALLOWED\n+    }\n+  }\n+\n+  def authorizeClusterOperation(request: RequestChannel.Request, operation: AclOperation): Unit = {\n+    if (!authorize(request.context, operation, CLUSTER, CLUSTER_NAME))\n+      throw new ClusterAuthorizationException(s\"Request $request is not authorized.\")\n+  }\n+\n+  def authorizedOperations(request: RequestChannel.Request, resource: Resource): Int = {\n+    val supportedOps = AclEntry.supportedOperations(resource.resourceType).toList\n+    val authorizedOps = authorizer match {\n+      case Some(authZ) =>\n+        val resourcePattern = new ResourcePattern(resource.resourceType, resource.name, PatternType.LITERAL)\n+        val actions = supportedOps.map { op => new Action(op, resourcePattern, 1, false, false) }\n+        authZ.authorize(request.context, actions.asJava).asScala\n+          .zip(supportedOps)\n+          .filter(_._1 == AuthorizationResult.ALLOWED)\n+          .map(_._2).toSet\n+      case None =>\n+        supportedOps.toSet\n+    }\n+    Utils.to32BitField(authorizedOps.map(operation => operation.code.asInstanceOf[JByte]).asJava)\n+  }\n+}\n+\n+class ChannelHelper(val requestChannel: RequestChannel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a77a9a03e78d20e5ebeb877b49f9032efef4152"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDk5MjcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/RequestHandlerHelper.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDowOTo1NFrOIT1aZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDowOTo1NFrOIT1aZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2ODk2Ng==", "bodyText": "Adding val to the constructor arguments makes them public members. Glancing at the code it doesn't look like this is needed.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r557668966", "createdAt": "2021-01-14T20:09:54Z", "author": {"login": "jsancio"}, "path": "core/src/main/scala/kafka/server/RequestHandlerHelper.scala", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import kafka.cluster.Partition\n+import kafka.coordinator.group.GroupCoordinator\n+import kafka.coordinator.transaction.TransactionCoordinator\n+import kafka.network.RequestChannel\n+import kafka.server.QuotaFactory.QuotaManagers\n+import kafka.utils.Logging\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.internals.Topic\n+import org.apache.kafka.common.network.Send\n+import org.apache.kafka.common.requests.{AbstractRequest, AbstractResponse}\n+import org.apache.kafka.common.utils.Time\n+\n+\n+object RequestHandlerHelper {\n+\n+  def onLeadershipChange(groupCoordinator: GroupCoordinator,\n+                         txnCoordinator: TransactionCoordinator,\n+                         updatedLeaders: Iterable[Partition],\n+                         updatedFollowers: Iterable[Partition]): Unit = {\n+    // for each new leader or follower, call coordinator to handle consumer group migration.\n+    // this callback is invoked under the replica state change lock to ensure proper order of\n+    // leadership changes\n+    updatedLeaders.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onElection(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onElection(partition.partitionId, partition.getLeaderEpoch)\n+    }\n+\n+    updatedFollowers.foreach { partition =>\n+      if (partition.topic == Topic.GROUP_METADATA_TOPIC_NAME)\n+        groupCoordinator.onResignation(partition.partitionId)\n+      else if (partition.topic == Topic.TRANSACTION_STATE_TOPIC_NAME)\n+        txnCoordinator.onResignation(partition.partitionId, Some(partition.getLeaderEpoch))\n+    }\n+  }\n+}\n+\n+\n+\n+class RequestHandlerHelper(val requestChannel: RequestChannel,\n+                           val quotas: QuotaManagers,\n+                           val time: Time,\n+                           val logPrefix: String) extends Logging {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bac0d2e645458fc31eb81e7de29ed4cd431cf"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDk5NTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/AuthHelper.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoxMDozOVrOIT1cFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoxMDozOVrOIT1cFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2OTM5Nw==", "bodyText": "Adding val to the constructor arguments makes the public members. Glancing at the code it doesn't look like this is needed.", "url": "https://github.com/apache/kafka/pull/9715#discussion_r557669397", "createdAt": "2021-01-14T20:10:39Z", "author": {"login": "jsancio"}, "path": "core/src/main/scala/kafka/server/AuthHelper.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import java.lang.{Byte => JByte}\n+import java.util.Collections\n+\n+import kafka.network.RequestChannel\n+import kafka.security.authorizer.AclEntry\n+import org.apache.kafka.common.acl.AclOperation\n+import org.apache.kafka.common.errors.ClusterAuthorizationException\n+import org.apache.kafka.common.requests.RequestContext\n+import org.apache.kafka.common.resource.Resource.CLUSTER_NAME\n+import org.apache.kafka.common.resource.ResourceType.CLUSTER\n+import org.apache.kafka.common.resource.{PatternType, Resource, ResourcePattern, ResourceType}\n+import org.apache.kafka.common.utils.Utils\n+import org.apache.kafka.server.authorizer.{Action, AuthorizationResult, Authorizer}\n+\n+import scala.jdk.CollectionConverters._\n+\n+\n+class AuthHelper(val requestChannel: RequestChannel,\n+                 val authorizer: Option[Authorizer]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80bac0d2e645458fc31eb81e7de29ed4cd431cf"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3721, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}