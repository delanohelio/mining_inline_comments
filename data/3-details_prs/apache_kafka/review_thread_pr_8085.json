{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDMwMTY1", "number": 8085, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowODo0NlrODeqVZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMDowOFrODfXUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc3NDc3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectWorkerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowODo0NlrOFn7FNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowODo0NlrOFn7FNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNjc3NA==", "bodyText": "Please skip this file and review: #8055 instead. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377406774", "createdAt": "2020-02-11T01:08:46Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectWorkerIntegrationTest.java", "diffHunk": "@@ -16,9 +16,7 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc3NTE2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowOTowNVrOFn7FfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowOTowNVrOFn7FfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNjg0NA==", "bodyText": "Please skip this file and review: #8055 instead. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377406844", "createdAt": "2020-02-11T01:09:05Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java", "diffHunk": "@@ -16,8 +16,6 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc3NTM2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/RestExtensionIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowOToxMlrOFn7Fng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTowOToxMlrOFn7Fng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNjg3OA==", "bodyText": "Please skip this file and review: #8055 instead. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377406878", "createdAt": "2020-02-11T01:09:12Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/RestExtensionIntegrationTest.java", "diffHunk": "@@ -16,14 +16,14 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc3ODE1OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMTowMFrOFn7HVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMTowMFrOFn7HVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNzMxNg==", "bodyText": "This file contains changes from both this PR and #8055\nPlease review #8055 first. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377407316", "createdAt": "2020-02-11T01:11:00Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -82,6 +85,7 @@\n     private final boolean maskExitProcedures;\n     private final String workerNamePrefix;\n     private final AtomicInteger nextWorkerId = new AtomicInteger(0);\n+    private final EmbeddedConnectClusterAssertions assertions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc3ODgzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectClusterAssertions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMToyNlrOFn7HwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMToyNlrOFn7HwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNzQyNA==", "bodyText": "This file contains changes from both this PR and #8055\nPlease review #8055 first. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377407424", "createdAt": "2020-02-11T01:11:26Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectClusterAssertions.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDc4MDE4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMjoyMVrOFn7IjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMToxMjoyMVrOFn7IjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwNzYyOA==", "bodyText": "Please skip this file and review: #8055 instead. Thanks!", "url": "https://github.com/apache/kafka/pull/8085#discussion_r377407628", "createdAt": "2020-02-11T01:12:21Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java", "diffHunk": "@@ -97,7 +97,7 @@ public EmbeddedKafkaCluster(final int numBrokers,\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU4NzIxOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorTopicsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0OTo0NVrOFo8W6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0OTo0NVrOFo8W6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NjI2NA==", "bodyText": "nit: indentation", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378476264", "createdAt": "2020-02-12T19:49:45Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/ConnectorTopicsIntegrationTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.integration;\n+\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.connect.storage.StringConverter;\n+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.apache.kafka.connect.integration.MonitorableSourceConnector.TOPIC_CONFIG;\n+import static org.apache.kafka.connect.runtime.ConnectorConfig.CONNECTOR_CLASS_CONFIG;\n+import static org.apache.kafka.connect.runtime.ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG;\n+import static org.apache.kafka.connect.runtime.ConnectorConfig.TASKS_MAX_CONFIG;\n+import static org.apache.kafka.connect.runtime.ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG;\n+import static org.apache.kafka.connect.runtime.WorkerConfig.CONNECTOR_CLIENT_POLICY_CLASS_CONFIG;\n+import static org.apache.kafka.connect.sink.SinkConnector.TOPICS_CONFIG;\n+\n+/**\n+ * Integration test for the endpoints that offer topic tracking of a connector's active\n+ * topics.\n+ */\n+@Category(IntegrationTest.class)\n+public class ConnectorTopicsIntegrationTest {\n+\n+    private static final int NUM_WORKERS = 3;\n+    private static final int NUM_TASKS = 2;\n+    private static final String FOO_TOPIC = \"foo-topic\";\n+    private static final String FOO_CONNECTOR = \"foo-source\";\n+    private static final String BAR_TOPIC = \"bar-topic\";\n+    private static final String BAR_CONNECTOR = \"bar-source\";\n+    private static final String SINK_CONNECTOR = \"baz-sink\";\n+    private static final int NUM_TOPIC_PARTITIONS = 3;\n+\n+    private EmbeddedConnectCluster.Builder connectBuilder;\n+    private EmbeddedConnectCluster connect;\n+    Map<String, String> workerProps = new HashMap<>();\n+    Properties brokerProps = new Properties();\n+\n+    @Before\n+    public void setup() {\n+        // setup Connect worker properties\n+        workerProps.put(CONNECTOR_CLIENT_POLICY_CLASS_CONFIG, \"All\");\n+\n+        // setup Kafka broker properties\n+        brokerProps.put(\"auto.create.topics.enable\", String.valueOf(false));\n+\n+        // build a Connect cluster backed by Kafka and Zk\n+        connectBuilder = new EmbeddedConnectCluster.Builder()\n+        .name(\"connect-cluster\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTYzODc3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/MonitorableSourceConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDowNjoxNVrOFo83pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MzozMFrOFpBOmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NDY0NQ==", "bodyText": "nit: value of stopped doesn't help much with clarity here. Maybe something like taskId?", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378484645", "createdAt": "2020-02-12T20:06:15Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/MonitorableSourceConnector.java", "diffHunk": "@@ -140,7 +140,10 @@ public void start(Map<String, String> props) {\n                                 Schema.STRING_SCHEMA,\n                                 \"value-\" + taskId + \"-\" + seqno))\n                         .collect(Collectors.toList());\n+            } else {\n+                log.info(\"Task stopped but still going: {}\", stopped);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjA1OQ==", "bodyText": "Good point. That was actually leftover from debugging. Removed.", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378556059", "createdAt": "2020-02-12T22:43:30Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/MonitorableSourceConnector.java", "diffHunk": "@@ -140,7 +140,10 @@ public void start(Map<String, String> props) {\n                                 Schema.STRING_SCHEMA,\n                                 \"value-\" + taskId + \"-\" + seqno))\n                         .collect(Collectors.toList());\n+            } else {\n+                log.info(\"Task stopped but still going: {}\", stopped);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NDY0NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTcxMDU2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMToyNlrOFo9kYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMToyNlrOFo9kYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NjA5OQ==", "bodyText": "nit: more descriptive name?", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378496099", "createdAt": "2020-02-12T20:31:26Z", "author": {"login": "ncliang"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "diffHunk": "@@ -45,21 +54,46 @@\n import static org.easymock.EasyMock.expectLastCall;\n import static org.easymock.EasyMock.newCapture;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n \n @SuppressWarnings(\"unchecked\")\n+@RunWith(PowerMockRunner.class)\n public class KafkaStatusBackingStoreTest extends EasyMockSupport {\n \n     private static final String STATUS_TOPIC = \"status-topic\";\n     private static final String WORKER_ID = \"localhost:8083\";\n     private static final String CONNECTOR = \"conn\";\n     private static final ConnectorTaskId TASK = new ConnectorTaskId(CONNECTOR, 0);\n \n+    private KafkaStatusBackingStore store;\n+    @Mock\n+    Converter converter;\n+    @Mock\n+    private KafkaBasedLog<String, byte[]> kafkaBasedLog;\n+    @Mock\n+    WorkerConfig workerConfig;\n+\n+    @Before\n+    public void setup() {\n+        store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n+    }\n+\n     @Test\n-    public void putConnectorState() {\n-        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n-        Converter converter = mock(Converter.class);\n-        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n+    public void configureStatusBackingStore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA4OTM2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0NjoyNVrOFpBTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowMToyOVrOFpBqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NzE5NA==", "bodyText": "workerConfig.getBoolean(String) is cached, but there's also the extra logic of tracking that the property was used. Given how this method is called on every record, it seems worth it to speed this up.\nHow about either pulling this out to a member variable here or in WorkerConfig and adding a getter method to just return the boolean value?", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378557194", "createdAt": "2020-02-12T22:46:25Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -505,7 +506,9 @@ private SinkRecord convertAndTransformRecord(final ConsumerRecord<byte[], byte[]\n                 headers);\n         log.trace(\"{} Applying transformations to record in topic '{}' partition {} at offset {} and timestamp {} with key {} and value {}\",\n                 this, msg.topic(), msg.partition(), msg.offset(), timestamp, keyAndSchema.value(), valueAndSchema.value());\n-        recordActiveTopic(origRecord.topic());\n+        if (workerConfig.getBoolean(TOPIC_TRACKING_ENABLE_CONFIG)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2MzE4Nw==", "bodyText": "Good observation. My thought was that JIT would take care of this pretty soon. But doesn't hurt to add this as a final member variable where it's used.", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378563187", "createdAt": "2020-02-12T23:01:29Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -505,7 +506,9 @@ private SinkRecord convertAndTransformRecord(final ConsumerRecord<byte[], byte[]\n                 headers);\n         log.trace(\"{} Applying transformations to record in topic '{}' partition {} at offset {} and timestamp {} with key {} and value {}\",\n                 this, msg.topic(), msg.partition(), msg.offset(), timestamp, keyAndSchema.value(), valueAndSchema.value());\n-        recordActiveTopic(origRecord.topic());\n+        if (workerConfig.getBoolean(TOPIC_TRACKING_ENABLE_CONFIG)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NzE5NA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjEzOTc0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowNzoyNFrOFpBytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzowNzoyNFrOFpBytQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NTMwMQ==", "bodyText": "Nit: this is a tad bit shorter and easier to read:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CONN1_CONFIG.put(SinkConnectorConfig.TOPICS_CONFIG, Utils.join(Arrays.asList(FOO_TOPIC, BAR_TOPIC), \",\"));\n          \n          \n            \n                    CONN1_CONFIG.put(SinkConnectorConfig.TOPICS_CONFIG, String.join(\",\", FOO_TOPIC, BAR_TOPIC));", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378565301", "createdAt": "2020-02-12T23:07:24Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "diffHunk": "@@ -118,21 +121,24 @@\n     private static final ConnectorTaskId TASK2 = new ConnectorTaskId(CONN1, 2);\n     private static final Integer MAX_TASKS = 3;\n     private static final Map<String, String> CONN1_CONFIG = new HashMap<>();\n+    private static final String FOO_TOPIC = \"foo\";\n+    private static final String BAR_TOPIC = \"bar\";\n+    private static final String BAZ_TOPIC = \"baz\";\n     static {\n         CONN1_CONFIG.put(ConnectorConfig.NAME_CONFIG, CONN1);\n         CONN1_CONFIG.put(ConnectorConfig.TASKS_MAX_CONFIG, MAX_TASKS.toString());\n-        CONN1_CONFIG.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n+        CONN1_CONFIG.put(SinkConnectorConfig.TOPICS_CONFIG, Utils.join(Arrays.asList(FOO_TOPIC, BAR_TOPIC), \",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjE0NTU4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxMDowOFrOFpB2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo1NzozMVrOFpD0mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NjIzMQ==", "bodyText": "We don't need the sleep here?", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378566231", "createdAt": "2020-02-12T23:10:08Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "diffHunk": "@@ -771,15 +777,32 @@ public void testDestroyConnector() throws Exception {\n         PowerMock.expectLastCall();\n         member.poll(EasyMock.anyInt());\n         PowerMock.expectLastCall();\n-        // No immediate action besides this -- change will be picked up via the config log\n \n+        // The change eventually is reflected to the config topic and the deleted connector and\n+        // tasks are revoked\n+        member.wakeup();\n+        PowerMock.expectLastCall();\n+        TopicStatus fooStatus = new TopicStatus(FOO_TOPIC, CONN1, 0, time.milliseconds());\n+        TopicStatus barStatus = new TopicStatus(BAR_TOPIC, CONN1, 0, time.milliseconds());\n+        EasyMock.expect(statusBackingStore.getAllTopics(EasyMock.eq(CONN1))).andReturn(new HashSet<>(Arrays.asList(fooStatus, barStatus))).times(2);\n+        statusBackingStore.deleteTopic(EasyMock.eq(CONN1), EasyMock.eq(FOO_TOPIC));\n+        PowerMock.expectLastCall().times(2);\n+        statusBackingStore.deleteTopic(EasyMock.eq(CONN1), EasyMock.eq(BAR_TOPIC));\n+        PowerMock.expectLastCall().times(2);\n+        expectRebalance(Arrays.asList(CONN1), Arrays.asList(TASK1),\n+                ConnectProtocol.Assignment.NO_ERROR, 2,\n+                Collections.emptyList(), Collections.emptyList(), 0);\n+        expectPostRebalanceCatchup(ClusterConfigState.EMPTY);\n+        member.requestRejoin();\n+        PowerMock.expectLastCall();\n         PowerMock.replayAll();\n \n         herder.deleteConnectorConfig(CONN1, putConnectorCallback);\n         herder.tick();\n-\n-        time.sleep(1000L);\n-        assertStatistics(3, 1, 100, 1000L);\n+        configUpdateListener.onConnectorConfigRemove(CONN1); // read updated config that removes the connector\n+        herder.configState = ClusterConfigState.EMPTY;\n+        herder.tick();\n+        assertStatistics(\"leaderUrl\", true, 3, 1, 100, 100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5ODU1NA==", "bodyText": "Added to match the other tests. Again the important part is to verify that correctly the tasks are removed and tombstones are sent.", "url": "https://github.com/apache/kafka/pull/8085#discussion_r378598554", "createdAt": "2020-02-13T00:57:31Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java", "diffHunk": "@@ -771,15 +777,32 @@ public void testDestroyConnector() throws Exception {\n         PowerMock.expectLastCall();\n         member.poll(EasyMock.anyInt());\n         PowerMock.expectLastCall();\n-        // No immediate action besides this -- change will be picked up via the config log\n \n+        // The change eventually is reflected to the config topic and the deleted connector and\n+        // tasks are revoked\n+        member.wakeup();\n+        PowerMock.expectLastCall();\n+        TopicStatus fooStatus = new TopicStatus(FOO_TOPIC, CONN1, 0, time.milliseconds());\n+        TopicStatus barStatus = new TopicStatus(BAR_TOPIC, CONN1, 0, time.milliseconds());\n+        EasyMock.expect(statusBackingStore.getAllTopics(EasyMock.eq(CONN1))).andReturn(new HashSet<>(Arrays.asList(fooStatus, barStatus))).times(2);\n+        statusBackingStore.deleteTopic(EasyMock.eq(CONN1), EasyMock.eq(FOO_TOPIC));\n+        PowerMock.expectLastCall().times(2);\n+        statusBackingStore.deleteTopic(EasyMock.eq(CONN1), EasyMock.eq(BAR_TOPIC));\n+        PowerMock.expectLastCall().times(2);\n+        expectRebalance(Arrays.asList(CONN1), Arrays.asList(TASK1),\n+                ConnectProtocol.Assignment.NO_ERROR, 2,\n+                Collections.emptyList(), Collections.emptyList(), 0);\n+        expectPostRebalanceCatchup(ClusterConfigState.EMPTY);\n+        member.requestRejoin();\n+        PowerMock.expectLastCall();\n         PowerMock.replayAll();\n \n         herder.deleteConnectorConfig(CONN1, putConnectorCallback);\n         herder.tick();\n-\n-        time.sleep(1000L);\n-        assertStatistics(3, 1, 100, 1000L);\n+        configUpdateListener.onConnectorConfigRemove(CONN1); // read updated config that removes the connector\n+        herder.configState = ClusterConfigState.EMPTY;\n+        herder.tick();\n+        assertStatistics(\"leaderUrl\", true, 3, 1, 100, 100L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2NjIzMQ=="}, "originalCommit": null, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}