{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzgwMzM3", "number": 9696, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoxNTozNlrOFCL2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowODozMVrOFCmMQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODM1NTc5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoxNTozNlrOIBMkJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoyMjowMVrOIBMydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNTM1MQ==", "bodyText": "It seems the number of elements is always 1. Is new ArrayDeque<>(1) more suitable for this case?", "url": "https://github.com/apache/kafka/pull/9696#discussion_r538125351", "createdAt": "2020-12-08T08:15:36Z", "author": {"login": "chia7712"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -235,11 +235,12 @@ public final Sensor threadLevelSensor(final String threadId,\n         final String key = threadSensorPrefix(threadId);\n         synchronized (threadLevelSensors) {\n             final String fullSensorName = key + SENSOR_NAME_DELIMITER + sensorName;\n-            return Optional.ofNullable(metrics.getSensor(fullSensorName))\n-                .orElseGet(() -> {\n-                    threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);\n-                    return metrics.sensor(fullSensorName, recordingLevel, parents);\n-                });\n+            final Sensor sensor = metrics.getSensor(fullSensorName);\n+            if (sensor == null) {\n+                threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e05a8746675dc88fb665413f7ef39779313a944"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyOTAxNQ==", "bodyText": "The number of elements is not always 1. Each created thread-level sensor is added to this queue, e.g., processLatencySensor, pollRecordsSensor, etc. Check out the callers of threadLevelSensor().\nEach queue contains all thread-level sensors for one single stream thread.", "url": "https://github.com/apache/kafka/pull/9696#discussion_r538129015", "createdAt": "2020-12-08T08:22:01Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -235,11 +235,12 @@ public final Sensor threadLevelSensor(final String threadId,\n         final String key = threadSensorPrefix(threadId);\n         synchronized (threadLevelSensors) {\n             final String fullSensorName = key + SENSOR_NAME_DELIMITER + sensorName;\n-            return Optional.ofNullable(metrics.getSensor(fullSensorName))\n-                .orElseGet(() -> {\n-                    threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);\n-                    return metrics.sensor(fullSensorName, recordingLevel, parents);\n-                });\n+            final Sensor sensor = metrics.getSensor(fullSensorName);\n+            if (sensor == null) {\n+                threadLevelSensors.computeIfAbsent(key, ignored -> new LinkedList<>()).push(fullSensorName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNTM1MQ=="}, "originalCommit": {"oid": "9e05a8746675dc88fb665413f7ef39779313a944"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjI2MDY2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyOTo1OVrOIByhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyOTo1OVrOIByhMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NzE4NA==", "bodyText": "We can also make this method private and not final, can't we?", "url": "https://github.com/apache/kafka/pull/9696#discussion_r538747184", "createdAt": "2020-12-08T19:29:59Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -926,6 +905,19 @@ public static void maybeMeasureLatency(final Runnable actionToMeasure,\n         }\n     }\n \n+    public final Sensor getSensors(final Map<String, Deque<String>> sensors,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f983d6857f81bcfe5d149cf5c5a4aa9905616b41"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY2Mzc1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowNjoyNFrOIB2MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowNjoyNFrOIB2MtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNzQ3Ng==", "bodyText": "nit: Could you fix the indentation?", "url": "https://github.com/apache/kafka/pull/9696#discussion_r538807476", "createdAt": "2020-12-08T21:06:24Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -926,6 +905,19 @@ public static void maybeMeasureLatency(final Runnable actionToMeasure,\n         }\n     }\n \n+    private Sensor getSensors(final Map<String, Deque<String>> sensors,\n+                                   final String fullSensorName,\n+                                   final String key,\n+                                   final RecordingLevel recordingLevel,\n+                                   final Sensor... parents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af261ad0cfc8babb9d37531749ce4cc36d761e2f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY3MjAwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowODozMVrOIB2RWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowODozMVrOIB2RWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwODY2Ng==", "bodyText": "I think you can also drag this line into getSensor(). Sorry for not noticing it before.", "url": "https://github.com/apache/kafka/pull/9696#discussion_r538808666", "createdAt": "2020-12-08T21:08:31Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.java", "diffHunk": "@@ -235,11 +235,7 @@ public final Sensor threadLevelSensor(final String threadId,\n         final String key = threadSensorPrefix(threadId);\n         synchronized (threadLevelSensors) {\n             final String fullSensorName = key + SENSOR_NAME_DELIMITER + sensorName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af261ad0cfc8babb9d37531749ce4cc36d761e2f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3692, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}