{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTI4MzYz", "number": 8864, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxMDo0MVrOEFN1gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0ODowNFrOEm1XXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1MDI1OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxMDo0MVrOGjUSQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo0MTowNVrOG0gQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTY5Ng==", "bodyText": "@cmccabe I think we can keep most of those test as-is until retries is removed -- the ones with @SuppressWarning should be rewritten if retries is removed IMHO, while the ones with @Deprecated should be remove. Let me know if this makes sense or if you think we should rewrite those tests right away.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r439685696", "createdAt": "2020-06-13T00:10:41Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -662,6 +662,7 @@ public void testInvalidTopicNames() throws Exception {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMzIyOQ==", "bodyText": "Thanks @mjsax. I agree we should keep testing the deprecated option. It does kind of seem like we should rewrite the tests you want to rewrite, now, though. I don't think this scheme of deprecating some tests and suppressing the warning on others is going to be remembered for very long after this is merged.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450533229", "createdAt": "2020-07-06T23:38:54Z", "author": {"login": "vvcephei"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -662,6 +662,7 @@ public void testInvalidTopicNames() throws Exception {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTY5Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NzQ3Mg==", "bodyText": "We can do that. Wanted to get input from @hachikuji and @cmccabe about it. Frankly, I am not always 100% sure atm how to exactly rewrite the tests and what test coverage is desired?", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451097472", "createdAt": "2020-07-07T19:36:41Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -662,6 +662,7 @@ public void testInvalidTopicNames() throws Exception {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTY5Ng=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNzY4OA==", "bodyText": "I dug into the test and I think I found ways to get rid for retries for the methods that suppress the deprecation warning. Let me know what you think.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r457707688", "createdAt": "2020-07-20T21:41:05Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -662,6 +662,7 @@ public void testInvalidTopicNames() throws Exception {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTY5Ng=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1MTcwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxMjoxNFrOGjUTIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyNjozM1rOG1CXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTkyMA==", "bodyText": "@rhauch @kkonstantine -- We deprecate retries via KIP-572. Not sure if we should rewrite this test right away so it does not use retries any longer?", "url": "https://github.com/apache/kafka/pull/8864#discussion_r439685920", "createdAt": "2020-06-13T00:12:14Z", "author": {"login": "mjsax"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -148,6 +148,7 @@ public KafkaStatusBackingStore(Time time, Converter converter) {\n         this.statusTopic = statusTopic;\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1NjQ3NA==", "bodyText": "Not sure if we should rewrite this test right away\n\nFirst of all, this is not test code. It's actually part of the Connect runtime.\nSecond, I'd have to look into what we would do differently and how we would set deliver.timeout.ms to work with the existing logic that handles retries. Since it's not clear, I suggest we keep the current behavior of setting retries=0 as long as that still function. We're using the ProducerConfig.RETRIES constant, so that can't be removed without changing this code.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451856474", "createdAt": "2020-07-08T22:19:14Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -148,6 +148,7 @@ public KafkaStatusBackingStore(Time time, Converter converter) {\n         this.statusTopic = statusTopic;\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTkyMA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwMzYwOA==", "bodyText": "@rhauch @kkonstantine As discussed in person, I create a ticket that is marked as blocker for 2.7 release to address this issue: https://issues.apache.org/jira/browse/KAFKA-10297", "url": "https://github.com/apache/kafka/pull/8864#discussion_r457703608", "createdAt": "2020-07-20T21:31:28Z", "author": {"login": "mjsax"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -148,6 +148,7 @@ public KafkaStatusBackingStore(Time time, Converter converter) {\n         this.statusTopic = statusTopic;\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTkyMA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NjQzMg==", "bodyText": "Btw: @hachikuji raise a concern about this issue, too: #8864 (review)\n\nI just had one question about the proposal. Using retries=0 in the producer allows the user to have \"at-most-once\" delivery. This allows the application to implement its own retry logic for example. Do we still have a way to do this once this configuration is gone?\n\nSo maybe we need to do some follow up work in the Producer to make it work for Connect. But I would defer this to the follow up work.\nMy original though was, that setting max.deliver.timeout.ms := request .timeout.ms might prevent internal retries. But we need to verify this. It was also brought to my attention, that this might not work if the network disconnects -- only retries=0 would prevent to re-open the connection but a low timeout would not prevent retries.\nIn KIP-572, we proposed for Kafka Streams itself, to treat task.timeout.ms = 0 as \"no retries\" -- maybe we can do a similar thing for the producer?\nThere is also max.block.ms that we should consider. Unfortunately, I am not an expert on the Producer. But I would like to move forward with KIP-572 for now and are happy to help to resolve those questions.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r458266432", "createdAt": "2020-07-21T17:26:33Z", "author": {"login": "mjsax"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -148,6 +148,7 @@ public KafkaStatusBackingStore(Time time, Converter converter) {\n         this.statusTopic = statusTopic;\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NTkyMA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1MzMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/ConsoleProducer.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxNDoyMFrOGjUUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTo0MDoxNVrOG0gPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjE4MQ==", "bodyText": "@hachikuji @cmccabe @vvcephei -- I think we should deprecate this flag (guess we should update the KIP accordingly) -- Thoughts?", "url": "https://github.com/apache/kafka/pull/8864#discussion_r439686181", "createdAt": "2020-06-13T00:14:20Z", "author": {"login": "mjsax"}, "path": "core/src/main/scala/kafka/tools/ConsoleProducer.scala", "diffHunk": "@@ -146,7 +148,7 @@ object ConsoleProducer {\n       .describedAs(\"size\")\n       .ofType(classOf[java.lang.Integer])\n       .defaultsTo(200)\n-    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")\n+    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"(Deprecated) Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMzU2NA==", "bodyText": "Sounds good to me.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450533564", "createdAt": "2020-07-06T23:40:04Z", "author": {"login": "vvcephei"}, "path": "core/src/main/scala/kafka/tools/ConsoleProducer.scala", "diffHunk": "@@ -146,7 +148,7 @@ object ConsoleProducer {\n       .describedAs(\"size\")\n       .ofType(classOf[java.lang.Integer])\n       .defaultsTo(200)\n-    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")\n+    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"(Deprecated) Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjE4MQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNzMzNQ==", "bodyText": "Updated the KIP and sent a mail to the VOTE thread on the dev list.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r457707335", "createdAt": "2020-07-20T21:40:15Z", "author": {"login": "mjsax"}, "path": "core/src/main/scala/kafka/tools/ConsoleProducer.scala", "diffHunk": "@@ -146,7 +148,7 @@ object ConsoleProducer {\n       .describedAs(\"size\")\n       .ofType(classOf[java.lang.Integer])\n       .defaultsTo(200)\n-    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")\n+    val messageSendMaxRetriesOpt = parser.accepts(\"message-send-max-retries\", \"(Deprecated) Brokers can fail receiving the message for multiple reasons, and being unavailable transiently is just one of them. This property specifies the number of retires before the producer give up and drop this message.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjE4MQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1NTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxNjo0NlrOGjUVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxNjo0NlrOGjUVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjU0Mw==", "bodyText": "Just some side cleanup. Method does not throw anything", "url": "https://github.com/apache/kafka/pull/8864#discussion_r439686543", "createdAt": "2020-06-13T00:16:46Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -188,7 +187,7 @@ void cleanupTest() throws Exception {\n         IntegrationTestUtils.purgeLocalStreamsState(streamsConfig);\n     }\n \n-    private void add10InputElements() throws java.util.concurrent.ExecutionException, InterruptedException {\n+    private void add10InputElements() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODYyOTg3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozOTowMlrOGtn9ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0MjozMVrOGuwgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mzc5Ng==", "bodyText": "nit: feels like overkill to deprecate test cases. Since they reference RETRIES directly, I don't think we need to worry about them not getting removed", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450493796", "createdAt": "2020-07-06T21:39:02Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1447,6 +1451,7 @@ public void testListConsumerGroupsWithStatesOlderBrokerVersion() throws Exceptio\n         }\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMzQ0Mg==", "bodyText": "I think the deprecation warning was part of a scheme to mark which tests should be rewritten: https://github.com/apache/kafka/pull/8864/files#r439685696", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450533442", "createdAt": "2020-07-06T23:39:35Z", "author": {"login": "vvcephei"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1447,6 +1451,7 @@ public void testListConsumerGroupsWithStatesOlderBrokerVersion() throws Exceptio\n         }\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mzc5Ng=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMzYxNg==", "bodyText": "Correct. To make the build pass, we either need to add a Suppress annotation of just deprecate the test itself. Deprecating the test itself is \"cleaner\" IMHO.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451103616", "createdAt": "2020-07-07T19:48:27Z", "author": {"login": "mjsax"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1447,6 +1451,7 @@ public void testListConsumerGroupsWithStatesOlderBrokerVersion() throws Exceptio\n         }\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mzc5Ng=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MjQ3MA==", "bodyText": "Fair enough.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451682470", "createdAt": "2020-07-08T16:42:31Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1447,6 +1451,7 @@ public void testListConsumerGroupsWithStatesOlderBrokerVersion() throws Exceptio\n         }\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mzc5Ng=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg5MjAxOnYy", "diffSide": "RIGHT", "path": "docs/streams/upgrade-guide.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0MToxMFrOGtqZ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0MToxMFrOGtqZ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMzg3OA==", "bodyText": "Did you mean to fill this in as part of this PR?", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450533878", "createdAt": "2020-07-06T23:41:10Z", "author": {"login": "vvcephei"}, "path": "docs/streams/upgrade-guide.html", "diffHunk": "@@ -86,6 +86,11 @@ <h1>Upgrade Guide and API Changes</h1>\n         More details about the new config <code>StreamsConfig#TOPOLOGY_OPTIMIZATION</code> can be found in <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-295%3A+Add+Streams+Configuration+Allowing+for+Optional+Topology+Optimization\">KIP-295</a>.\n     </p>\n \n+    <h3><a id=\"streams_api_changes_270\" href=\"#streams_api_changes_270\">Streams API changes in 2.7.0</a></h3>\n+    <p>\n+        TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODkwMzE2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0NzowNlrOGtqgbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxODowMVrOG17u1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTUzMw==", "bodyText": "Hey, sorry if this is picky, but are these also to be removed when we remove the config? If so, maybe we should just say it on every suppression.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450535533", "createdAt": "2020-07-06T23:47:06Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -159,6 +159,7 @@ public void testGetGroupInstanceIdConfigs() {\n         assertNull(returnedProps.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG));\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjk1MA==", "bodyText": "Not 100% sure yet how the test will be rewritten. My expectation is, that we remove the retries config and also remove the Suppress tag -- however, we can only do this, after streams code was changes.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451102950", "createdAt": "2020-07-07T19:47:10Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -159,6 +159,7 @@ public void testGetGroupInstanceIdConfigs() {\n         assertNull(returnedProps.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG));\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTUzMw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjM1Nw==", "bodyText": "Addressed via #9060", "url": "https://github.com/apache/kafka/pull/8864#discussion_r459206357", "createdAt": "2020-07-23T04:18:01Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -159,6 +159,7 @@ public void testGetGroupInstanceIdConfigs() {\n         assertNull(returnedProps.get(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG));\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTUzMw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODkwNDMyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0NzozN1rOGtqhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NjozNlrOG1HN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTY4OA==", "bodyText": "Thanks for adding the comment!", "url": "https://github.com/apache/kafka/pull/8864#discussion_r450535688", "createdAt": "2020-07-06T23:47:37Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -74,6 +74,7 @@\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n \n+    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNjg2Mg==", "bodyText": "Yes :) Added it as a reminder only first. Was expecting to get review comment anyway.", "url": "https://github.com/apache/kafka/pull/8864#discussion_r451106862", "createdAt": "2020-07-07T19:54:24Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -74,6 +74,7 @@\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n \n+    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTY4OA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NTk0Nw==", "bodyText": "Addressed via #9047", "url": "https://github.com/apache/kafka/pull/8864#discussion_r458345947", "createdAt": "2020-07-21T19:46:36Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -74,6 +74,7 @@\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n \n+    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTY4OA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIxMjU5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0Njo1NFrOG1HOjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0Njo1NFrOG1HOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NjEyNA==", "bodyText": "Addressed via #9047", "url": "https://github.com/apache/kafka/pull/8864#discussion_r458346124", "createdAt": "2020-07-21T19:46:54Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -612,6 +612,7 @@ public boolean lockGlobalState() throws IOException {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIxMzAyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NzowMlrOG1HOyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NzowMlrOG1HOyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NjE4Nw==", "bodyText": "Addressed via #9047", "url": "https://github.com/apache/kafka/pull/8864#discussion_r458346187", "createdAt": "2020-07-21T19:47:02Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java", "diffHunk": "@@ -645,6 +646,7 @@ public void shouldRetryWhenEndOffsetsThrowsTimeoutException() {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTcyNjA1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxMDoyM1rOG17orw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxMDoyM1rOG17orw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNDc4Mw==", "bodyText": "Addressed via #9060", "url": "https://github.com/apache/kafka/pull/8864#discussion_r459204783", "createdAt": "2020-07-23T04:10:23Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -55,6 +55,7 @@\n     private final int retries;\n     private final long retryBackOffMs;\n \n+    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczNzUwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxODoxN1rOG17u9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxODoxN1rOG17u9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjM5MQ==", "bodyText": "Addressed via #9060", "url": "https://github.com/apache/kafka/pull/8864#discussion_r459206391", "createdAt": "2020-07-23T04:18:17Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java", "diffHunk": "@@ -190,6 +191,7 @@ public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n         assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczOTQxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxOToyNlrOG17wBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxOToyNlrOG17wBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjY2MQ==", "bodyText": "Addressed via #9060", "url": "https://github.com/apache/kafka/pull/8864#discussion_r459206661", "createdAt": "2020-07-23T04:19:26Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -78,6 +78,7 @@\n     private MockAdminClient mockAdminClient;\n     private InternalTopicManager internalTopicManager;\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTU1NTk2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0NzozNVrOHXF8pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0NzozNVrOHXF8pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3Njc0Mw==", "bodyText": "Reverted via #9333", "url": "https://github.com/apache/kafka/pull/8864#discussion_r493976743", "createdAt": "2020-09-24T00:47:35Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java", "diffHunk": "@@ -45,6 +45,7 @@\n \n     private static final String SINK_TOPIC = \"streamsResilienceSink\";\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTU1NjE0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo0MFrOHXF8vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo0MFrOHXF8vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3Njc2NQ==", "bodyText": "Reverted via #9333", "url": "https://github.com/apache/kafka/pull/8864#discussion_r493976765", "createdAt": "2020-09-24T00:47:40Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsBrokerDownResilienceTest.java", "diffHunk": "@@ -122,6 +123,7 @@ public void apply(final String key, final String value) {\n         });\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTU1NjUxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo1MFrOHXF88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo1MFrOHXF88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NjgxOA==", "bodyText": "Reverted via #9333", "url": "https://github.com/apache/kafka/pull/8864#discussion_r493976818", "createdAt": "2020-09-24T00:47:50Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsOptimizedTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n public class StreamsOptimizedTest {\n \n-\n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTU1NjY2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo1OFrOHXF9CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0Nzo1OFrOHXF9CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3Njg0MA==", "bodyText": "Reverted via #9333", "url": "https://github.com/apache/kafka/pull/8864#discussion_r493976840", "createdAt": "2020-09-24T00:47:58Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java", "diffHunk": "@@ -43,6 +43,7 @@\n \n public class StreamsStandByReplicaTest {\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTU1Njc3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0ODowNFrOHXF9HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDo0ODowNFrOHXF9HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3Njg2MA==", "bodyText": "Reverted via #9333", "url": "https://github.com/apache/kafka/pull/8864#discussion_r493976860", "createdAt": "2020-09-24T00:48:04Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsStandByReplicaTest.java", "diffHunk": "@@ -158,6 +159,7 @@ private static void shutdown(final KafkaStreams streams) {\n         streams.close(Duration.ofSeconds(10));\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO revisit in follow up PR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c10d88f9c6fa9d89cc500112255898e2f24845"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}