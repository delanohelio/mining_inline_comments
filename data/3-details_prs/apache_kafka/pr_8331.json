{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTIwNTM5", "number": 8331, "title": "KAFKA-9748: extend EosIntegrationTest for EOS-beta", "bodyText": "Call for review @abbccdda @guozhangwang", "createdAt": "2020-03-23T02:23:43Z", "url": "https://github.com/apache/kafka/pull/8331", "merged": true, "mergeCommit": {"oid": "cc59150f408de6ffea277267ec7d2e3920fbe6b5"}, "closed": true, "closedAt": "2020-04-01T20:20:27Z", "author": {"login": "mjsax"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQU4RRAFqTM3OTA5OTkwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS2OVbgFqTM4NDI3MzcyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDk5OTAy", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379099902", "createdAt": "2020-03-23T02:28:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyODoyNlrOF51Q6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjoyODoyNlrOF51Q6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgzMw==", "bodyText": "Passing in the processId does not create unique transaction.id for all threads, because the processId is unique per KafkaStreams instance and the same over all threads within an instance. Thus, I propose to use the following transactional.id instead:\napplicationId + \"-\" + processId + \"-StreamThread-\" + threadIdx\n\nThis variable is the corresponding suffix processId + \"-StreamThread-\" + threadIdx", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396185833", "createdAt": "2020-03-23T02:28:26Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -79,7 +83,7 @@ private static String getTaskProducerClientId(final String threadClientId, final\n                       final Time time,\n                       final KafkaClientSupplier clientSupplier,\n                       final String threadId,\n-                      final UUID processId,\n+                      final String eosBetaTxIdSuffix,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAyMjkw", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379102290", "createdAt": "2020-03-23T02:39:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozOToyOVrOF51Y6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjozOToyOVrOF51Y6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Nzg4MQ==", "bodyText": "This issue was detected by the test: If we loose all tasks and close all of them it implies that the producer may have been fenced: hence, we try to abort the current transaction, close the thread producer and create a new one.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396187881", "createdAt": "2020-03-23T02:39:29Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -108,19 +113,34 @@ private static String getTaskProducerClientId(final String threadClientId, final\n             final String threadProducerClientId = getThreadProducerClientId(threadId);\n             final Map<String, Object> producerConfigs = config.getProducerConfigs(threadProducerClientId);\n \n-            if (processingMode == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n-                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, applicationId + \"-\" + processId);\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), true, logContext);\n+            if (processingMode == EXACTLY_ONCE_BETA) {\n+                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), EXACTLY_ONCE_BETA, logContext);\n             } else {\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), false, logContext);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), AT_LEAST_ONCE, logContext);\n             }\n             taskProducers = Collections.emptyMap();\n         }\n     }\n \n+    public void reInitializeProducer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAyODY2", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379102866", "createdAt": "2020-03-23T02:42:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0MjowNlrOF51awA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0MjowNlrOF51awA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODM1Mg==", "bodyText": "We duplicate each test for eos-alpha and eos-beta (I did not use parameterized tests, because I want to add one more upgrade test that does not need to be parameterized)", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396188352", "createdAt": "2020-03-23T02:42:06Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -127,13 +127,31 @@ public void createTopics() throws Exception {\n     }\n \n     @Test\n-    public void shouldBeAbleToRunWithEosEnabled() throws Exception {\n-        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRunWithEosAlphaEnabled() throws Exception {\n+        shouldBeAbleToRunWithEosEnabled(StreamsConfig.EXACTLY_ONCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAzMDgz", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379103083", "createdAt": "2020-03-23T02:43:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0MzowM1rOF51beA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0MzowM1rOF51beA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODUzNg==", "bodyText": "Because we run the only stateful test twice now, we need to delete the corresponding changelog topic, too.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396188536", "createdAt": "2020-03-23T02:43:03Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -612,6 +713,7 @@ private KafkaStreams getKafkaStreams(final boolean withState,\n                 .withCachingEnabled();\n \n             builder.addStateStore(storeBuilder);\n+            CLUSTER.deleteTopicsAndWait(applicationId + \"-\" + storeName + \"-changelog\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAzMzc4", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379103378", "createdAt": "2020-03-23T02:44:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NDoxOVrOF51cbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NDoxOVrOF51cbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODc4Mg==", "bodyText": "Adding more checks for this and other tests. Here: verify that we don't call put(...) (ie, don't set a transactional.id) for the non-eos case", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396188782", "createdAt": "2020-03-23T02:44:19Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreatorTest.java", "diffHunk": "@@ -85,9 +89,20 @@\n \n     @Test\n     public void shouldCreateThreadProducerIfEosDisabled() {\n+        final Map<String, Object> mockProducerConfig = mock(Map.class);\n+        expect(mockProducerConfig.containsKey(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(false);\n+        replay(mockProducerConfig);\n+\n+        config = new StreamsConfig(properties) {\n+            @Override\n+            public Map<String, Object> getProducerConfigs(final String clientId) {\n+                return mockProducerConfig;\n+            }\n+        };\n         createTasks();\n \n         assertThat(mockClientSupplier.producers.size(), is(1));\n+        verify(mockProducerConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAzNTM3", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379103537", "createdAt": "2020-03-23T02:45:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTowNFrOF51c9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTowNFrOF51c9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODkxNg==", "bodyText": "For eos-alpha, we set the transcational.id for each task", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396188916", "createdAt": "2020-03-23T02:45:04Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreatorTest.java", "diffHunk": "@@ -173,9 +200,24 @@ public void shouldThrowStreamsExceptionOnErrorCloseThreadProducerIfEosDisabled()\n     public void shouldCreateProducerPerTaskIfEosAlphaEnabled() {\n         properties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);\n         mockClientSupplier.setApplicationIdForProducer(\"appId\");\n+\n+        final Map<String, Object> mockProducerConfig = mock(Map.class);\n+        expect(mockProducerConfig.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n+        expect(mockProducerConfig.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_1\")).andReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAzNjM1", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379103635", "createdAt": "2020-03-23T02:45:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTozMFrOF51dPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0NTozMFrOF51dPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODk5MQ==", "bodyText": "For eos-beta we only set one transactional.id", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396188991", "createdAt": "2020-03-23T02:45:30Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreatorTest.java", "diffHunk": "@@ -305,9 +362,22 @@ public void shouldThrowStreamsExceptionOnErrorCloseTaskProducerIfEosAlphaEnabled\n     public void shouldCreateThreadProducerIfEosBetaEnabled() {\n         properties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE_BETA);\n         mockClientSupplier.setApplicationIdForProducer(\"appId\");\n+\n+        final Map<String, Object> mockProducerConfig = mock(Map.class);\n+        expect(mockProducerConfig.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-txId\")).andReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTAzODc4", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379103878", "createdAt": "2020-03-23T02:46:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0Njo0MlrOF51eJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0Njo0MlrOF51eJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTIyMw==", "bodyText": "This is just a bad diff (the test is not removed, but just the next after this new one)", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396189223", "createdAt": "2020-03-23T02:46:42Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -144,21 +152,81 @@ public void shouldFailIfProducerIsNull() {\n         {\n             final NullPointerException thrown = assertThrows(\n                 NullPointerException.class,\n-                () -> new StreamsProducer(null, true, logContext)\n+                () -> new StreamsProducer(null, EXACTLY_ONCE_ALPHA, logContext)\n+            );\n+\n+            assertThat(thrown.getMessage(), is(\"producer cannot be null\"));\n+        }\n+\n+        {\n+            final NullPointerException thrown = assertThrows(\n+                NullPointerException.class,\n+                () -> new StreamsProducer(null, EXACTLY_ONCE_BETA, logContext)\n             );\n \n             assertThat(thrown.getMessage(), is(\"producer cannot be null\"));\n         }\n     }\n \n     @Test\n-    public void shouldFailIfLogContextIsNull() {\n+    public void shouldFailIfProcessingModeIsNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTA0MTA0", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379104104", "createdAt": "2020-03-23T02:47:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0Nzo0MFrOF51eyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0Nzo0MFrOF51eyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTM4Ng==", "bodyText": "Missing test (added for both cases)", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396189386", "createdAt": "2020-03-23T02:47:40Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -419,12 +497,39 @@ public void shouldThrowTimeoutExceptionOnEosInitTxTimeout() {\n         assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n     }\n \n+    @Test\n+    public void shouldFailOnMaybeBeginTransactionIfTransactionsNotInitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 358}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTA0NDM5", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379104439", "createdAt": "2020-03-23T02:49:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0OToxMFrOF51gHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMjo0OToxMFrOF51gHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4OTcyNA==", "bodyText": "If the StreamsProducer flag would not be reset, this call would not be made below in eosBetaStreamsProducer.initTransaction();", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396189724", "createdAt": "2020-03-23T02:49:10Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -688,12 +793,55 @@ public void shouldThrowStreamsExceptionOnEosAbortTxError() {\n \n     @Test\n     public void shouldFailOnEosAbortTxFatal() {\n-        eosMockProducer.abortTransactionException = new RuntimeException(\"KABOOM!\");\n+        eosAlphaMockProducer.abortTransactionException = new RuntimeException(\"KABOOM!\");\n         // call `send()` to start a transaction\n-        eosStreamsProducer.send(record, null);\n+        eosAlphaStreamsProducer.send(record, null);\n \n-        final RuntimeException thrown = assertThrows(RuntimeException.class, eosStreamsProducer::abortTransaction);\n+        final RuntimeException thrown = assertThrows(RuntimeException.class, eosAlphaStreamsProducer::abortTransaction);\n \n         assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n     }\n+\n+\n+    // EOS beta test\n+\n+    // functional tests\n+\n+    @Test\n+    public void shouldSetSetNewProducerOnResetProducer() {\n+        final Producer<byte[], byte[]> producer = mock(Producer.class);\n+\n+        eosBetaStreamsProducer.resetProducer(producer);\n+\n+        assertThat(eosBetaStreamsProducer.kafkaProducer(), is(producer));\n+    }\n+\n+    @Test\n+    public void shouldResetTransactionInitializedOnResetProducer() {\n+        final Producer<byte[], byte[]> producer = mock(Producer.class);\n+\n+        eosBetaStreamsProducer.initTransaction();\n+        eosBetaStreamsProducer.resetProducer(producer);\n+\n+        producer.initTransactions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 674}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjQ2NDgw", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-379646480", "createdAt": "2020-03-23T17:19:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoxOTowOFrOF6PzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowMDo0MFrOF6X6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMDYzMA==", "bodyText": "Is this test added for the fix in this PR?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396620630", "createdAt": "2020-03-23T17:19:08Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java", "diffHunk": "@@ -456,6 +456,32 @@ public void shouldCloseActiveTasksWhenHandlingLostTasks() {\n         assertThat(taskManager.standbyTaskMap(), is(singletonMap(taskId01, task01)));\n     }\n \n+    @Test\n+    public void shouldReInitializeThreadProducerOnHandleLostAllIfEosBetaEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNzA4NA==", "bodyText": "I'm not entirely sure whether this is a good practice, but seems like we could just get 3 separate tests?\nhttps://stackoverflow.com/questions/5466974/multiple-open-and-close-curly-brackets-inside-method-java", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396627084", "createdAt": "2020-03-23T17:28:22Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -144,21 +152,81 @@ public void shouldFailIfProducerIsNull() {\n         {\n             final NullPointerException thrown = assertThrows(\n                 NullPointerException.class,\n-                () -> new StreamsProducer(null, true, logContext)\n+                () -> new StreamsProducer(null, EXACTLY_ONCE_ALPHA, logContext)\n+            );\n+\n+            assertThat(thrown.getMessage(), is(\"producer cannot be null\"));\n+        }\n+\n+        {\n+            final NullPointerException thrown = assertThrows(\n+                NullPointerException.class,\n+                () -> new StreamsProducer(null, EXACTLY_ONCE_BETA, logContext)\n             );\n \n             assertThat(thrown.getMessage(), is(\"producer cannot be null\"));\n         }\n     }\n \n     @Test\n-    public void shouldFailIfLogContextIsNull() {\n+    public void shouldFailIfProcessingModeIsNull() {\n         final NullPointerException thrown = assertThrows(\n             NullPointerException.class,\n-            () -> new StreamsProducer(nonEosMockProducer, false, null)\n+            () -> new StreamsProducer(nonEosMockProducer, null, logContext)\n         );\n \n-        assertThat(thrown.getMessage(), is(\"logContext cannot be null\"));\n+        assertThat(thrown.getMessage(), is(\"processingMode cannot be null\"));\n+    }\n+\n+    @Test\n+    public void shouldFailIfLogContextIsNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5ODg0Nw==", "bodyText": "Is there a unit test to ensure we have different txn.id for different stream threads?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396698847", "createdAt": "2020-03-23T19:21:39Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -79,7 +83,7 @@ private static String getTaskProducerClientId(final String threadClientId, final\n                       final Time time,\n                       final KafkaClientSupplier clientSupplier,\n                       final String threadId,\n-                      final UUID processId,\n+                      final String eosBetaTxIdSuffix,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgzMw=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwMDM1MQ==", "bodyText": "This should be private", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396700351", "createdAt": "2020-03-23T19:24:18Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -52,17 +55,19 @@\n     private final Logger log;\n     private final String logPrefix;\n \n-    private final Producer<byte[], byte[]> producer;\n+    private Producer<byte[], byte[]> producer;\n+    final StreamThread.ProcessingMode processingMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwOTAyMg==", "bodyText": "s/reInitializeProducer/reInitializeThreadProducer", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396709022", "createdAt": "2020-03-23T19:39:37Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -108,19 +113,34 @@ private static String getTaskProducerClientId(final String threadClientId, final\n             final String threadProducerClientId = getThreadProducerClientId(threadId);\n             final Map<String, Object> producerConfigs = config.getProducerConfigs(threadProducerClientId);\n \n-            if (processingMode == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n-                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, applicationId + \"-\" + processId);\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), true, logContext);\n+            if (processingMode == EXACTLY_ONCE_BETA) {\n+                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), EXACTLY_ONCE_BETA, logContext);\n             } else {\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), false, logContext);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), AT_LEAST_ONCE, logContext);\n             }\n             taskProducers = Collections.emptyMap();\n         }\n     }\n \n+    public void reInitializeProducer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4Nzg4MQ=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDgzNA==", "bodyText": "nit: now that we are passing in the processingMode, we could potentially use this check as a helper function as:\nprivate boolean0 eosEnabled() {\n  processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA;\n}", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396720834", "createdAt": "2020-03-23T19:58:07Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -52,17 +55,19 @@\n     private final Logger log;\n     private final String logPrefix;\n \n-    private final Producer<byte[], byte[]> producer;\n+    private Producer<byte[], byte[]> producer;\n+    final StreamThread.ProcessingMode processingMode;\n     private final boolean eosEnabled;\n \n     private boolean transactionInFlight = false;\n     private boolean transactionInitialized = false;\n \n     public StreamsProducer(final Producer<byte[], byte[]> producer,\n-                           final boolean eosEnabled,\n+                           final StreamThread.ProcessingMode processingMode,\n                            final LogContext logContext) {\n         this.producer = Objects.requireNonNull(producer, \"producer cannot be null\");\n-        this.eosEnabled = eosEnabled;\n+        this.processingMode = Objects.requireNonNull(processingMode, \"processingMode cannot be null\");\n+        this.eosEnabled = processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNjcxMg==", "bodyText": "could be named as processingMode", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396736712", "createdAt": "2020-03-23T20:29:03Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -159,35 +177,81 @@ public void shouldCommitCorrectOffsetIfInputTopicIsTransactional() throws Except\n     }\n \n     @Test\n-    public void shouldBeAbleToRestartAfterClose() throws Exception {\n-        runSimpleCopyTest(2, SINGLE_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRestartAfterCloseWithEosAlpha() throws Exception {\n+        shouldBeAbleToRestartAfterClose(StreamsConfig.EXACTLY_ONCE);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToRestartAfterCloseWithEosBeta() throws Exception {\n+        shouldBeAbleToRestartAfterClose(StreamsConfig.EXACTLY_ONCE_BETA);\n+    }\n+\n+    private void shouldBeAbleToRestartAfterClose(final String eosConfig) throws Exception {\n+        runSimpleCopyTest(2, SINGLE_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false, eosConfig);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToCommitToMultiplePartitionsWithEosAlpha() throws Exception {\n+        shouldBeAbleToCommitToMultiplePartitions(StreamsConfig.EXACTLY_ONCE);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToCommitToMultiplePartitionsWithEosBeta() throws Exception {\n+        shouldBeAbleToCommitToMultiplePartitions(StreamsConfig.EXACTLY_ONCE_BETA);\n+    }\n+\n+    private void shouldBeAbleToCommitToMultiplePartitions(final String eosConfig) throws Exception {\n+        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, null, MULTI_PARTITION_OUTPUT_TOPIC, false, eosConfig);\n     }\n \n     @Test\n-    public void shouldBeAbleToCommitToMultiplePartitions() throws Exception {\n-        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, null, MULTI_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToCommitMultiplePartitionOffsetsWitEosAlpha() throws Exception {\n+        shouldBeAbleToCommitMultiplePartitionOffsets(StreamsConfig.EXACTLY_ONCE);\n     }\n \n     @Test\n-    public void shouldBeAbleToCommitMultiplePartitionOffsets() throws Exception {\n-        runSimpleCopyTest(1, MULTI_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToCommitMultiplePartitionOffsetsWithEosBeta() throws Exception {\n+        shouldBeAbleToCommitMultiplePartitionOffsets(StreamsConfig.EXACTLY_ONCE_BETA);\n+    }\n+\n+    private void shouldBeAbleToCommitMultiplePartitionOffsets(final String eosConfig) throws Exception {\n+        runSimpleCopyTest(1, MULTI_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false, eosConfig);\n     }\n \n     @Test\n-    public void shouldBeAbleToRunWithTwoSubtopologies() throws Exception {\n-        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, SINGLE_PARTITION_THROUGH_TOPIC, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRunWithTwoSubtopologiesWithEosAlpha() throws Exception {\n+        shouldBeAbleToRunWithTwoSubtopologies(StreamsConfig.EXACTLY_ONCE);\n     }\n \n     @Test\n-    public void shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitions() throws Exception {\n-        runSimpleCopyTest(1, MULTI_PARTITION_INPUT_TOPIC, MULTI_PARTITION_THROUGH_TOPIC, MULTI_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRunWithTwoSubtopologiesWithEosBeta() throws Exception {\n+        shouldBeAbleToRunWithTwoSubtopologies(StreamsConfig.EXACTLY_ONCE_BETA);\n+    }\n+\n+    private void shouldBeAbleToRunWithTwoSubtopologies(final String eosConfig) throws Exception {\n+        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, SINGLE_PARTITION_THROUGH_TOPIC, SINGLE_PARTITION_OUTPUT_TOPIC, false, eosConfig);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitionsWithEosAlpha() throws Exception {\n+        shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitions(StreamsConfig.EXACTLY_ONCE);\n+    }\n+\n+    @Test\n+    public void shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitionsWithEosBeta() throws Exception {\n+        shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitions(StreamsConfig.EXACTLY_ONCE_BETA);\n+    }\n+\n+    private void shouldBeAbleToRunWithTwoSubtopologiesAndMultiplePartitions(final String eosConfig) throws Exception {\n+        runSimpleCopyTest(1, MULTI_PARTITION_INPUT_TOPIC, MULTI_PARTITION_THROUGH_TOPIC, MULTI_PARTITION_OUTPUT_TOPIC, false, eosConfig);\n     }\n \n     private void runSimpleCopyTest(final int numberOfRestarts,\n                                    final String inputTopic,\n                                    final String throughTopic,\n                                    final String outputTopic,\n-                                   final boolean inputTopicTransactional) throws Exception {\n+                                   final boolean inputTopicTransactional,\n+                                   final String eosConfig) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczNzg2OQ==", "bodyText": "I'm not sure whether it makes things simpler by just parameterizing the class, if only one upgrade test is the exception? The downside could be we need to add 3 times the same test we are doing here. Thoughts? @guozhangwang", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396737869", "createdAt": "2020-03-23T20:31:02Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -127,13 +127,31 @@ public void createTopics() throws Exception {\n     }\n \n     @Test\n-    public void shouldBeAbleToRunWithEosEnabled() throws Exception {\n-        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRunWithEosAlphaEnabled() throws Exception {\n+        shouldBeAbleToRunWithEosEnabled(StreamsConfig.EXACTLY_ONCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODM1Mg=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzU1OA==", "bodyText": "Shall we also add EXACTLY_ONCE_BETA to this test?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396743558", "createdAt": "2020-03-23T20:41:36Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/RecordCollectorTest.java", "diffHunk": "@@ -101,7 +103,7 @@\n \n     private final MockProducer<byte[], byte[]> mockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer streamsProducer = new StreamsProducer(mockProducer, false, logContext);\n+    private final StreamsProducer streamsProducer = new StreamsProducer(mockProducer, AT_LEAST_ONCE, logContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTU1OA==", "bodyText": "Sounds more like common tests", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396745558", "createdAt": "2020-03-23T20:45:33Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer eosStreamsProducer =\n-        new StreamsProducer(eosMockProducer, true, logContext);\n+    private final StreamsProducer eosAlphaStreamsProducer =\n+        new StreamsProducer(eosAlphaMockProducer, EXACTLY_ONCE_ALPHA, logContext);\n+\n+    private final MockProducer<byte[], byte[]> eosBetaMockProducer = new MockProducer<>(\n+        cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n+    private final StreamsProducer eosBetaStreamsProducer =\n+        new StreamsProducer(eosBetaMockProducer, EXACTLY_ONCE_BETA, logContext);\n \n     private final ProducerRecord<byte[], byte[]> record =\n         new ProducerRecord<>(topic, 0, 0L, new byte[0], new byte[0], new RecordHeaders());\n \n     @Before\n     public void before() {\n-        eosStreamsProducer.initTransaction();\n+        eosAlphaStreamsProducer.initTransaction();\n     }\n \n \n \n-    // generic tests (non-EOS and EOS)\n+    // generic tests (non-EOS and EOS-alpha/beta)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzM0NQ==", "bodyText": "I feel we could actually simplify the test by calling streamsProducer.kafkaProducer() every time for the check for the internal producer, instead of keeping a reference here, as the eosAlphaMockProducer and eosAlphaMockProducer look quite similar.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396747345", "createdAt": "2020-03-23T20:49:02Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzkyOQ==", "bodyText": "Also could we try to parameterize this part as well? Like passing processing mode flags to each test", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396747929", "createdAt": "2020-03-23T20:50:21Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer eosStreamsProducer =\n-        new StreamsProducer(eosMockProducer, true, logContext);\n+    private final StreamsProducer eosAlphaStreamsProducer =\n+        new StreamsProducer(eosAlphaMockProducer, EXACTLY_ONCE_ALPHA, logContext);\n+\n+    private final MockProducer<byte[], byte[]> eosBetaMockProducer = new MockProducer<>(\n+        cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n+    private final StreamsProducer eosBetaStreamsProducer =\n+        new StreamsProducer(eosBetaMockProducer, EXACTLY_ONCE_BETA, logContext);\n \n     private final ProducerRecord<byte[], byte[]> record =\n         new ProducerRecord<>(topic, 0, 0L, new byte[0], new byte[0], new RecordHeaders());\n \n     @Before\n     public void before() {\n-        eosStreamsProducer.initTransaction();\n+        eosAlphaStreamsProducer.initTransaction();\n     }\n \n \n \n-    // generic tests (non-EOS and EOS)\n+    // generic tests (non-EOS and EOS-alpha/beta)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjY3Ng==", "bodyText": "Could we use the StreamThread.eosAlpha/BetaEnabled check here?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396752676", "createdAt": "2020-03-23T20:59:04Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java", "diffHunk": "@@ -370,13 +370,21 @@ private StreamTask createStreamsTask(final StreamsConfig streamsConfig,\n                 clientSupplier.restoreConsumer,\n                 new MockStateRestoreListener()),\n             topology.storeToChangelogTopic(), partitions);\n-        final boolean eosEnabled = StreamsConfig.EXACTLY_ONCE.equals(streamsConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG));\n+        final StreamThread.ProcessingMode processingMode;\n+        final String eosConfig = streamsConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzUzMQ==", "bodyText": "TBH, Since we are adding public flags, could we just make the StreamThread helper functions public so that we don't need to manually write check every time?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r396753531", "createdAt": "2020-03-23T21:00:40Z", "author": {"login": "abbccdda"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -588,7 +598,7 @@ private void completeAllProcessableWork() {\n     }\n \n     private void commit(final Map<TopicPartition, OffsetAndMetadata> offsets) {\n-        if (eosEnabled) {\n+        if (processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTQ5MzA0", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-380549304", "createdAt": "2020-03-24T17:40:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MDowOFrOF671mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNjozOFrOF685Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MjEwNQ==", "bodyText": "Do we need to pass in the suffix if we've decided to go with this form? The thread-name should be client-id-StreamThread-threadIdx. So we can trim the client-id from the thread-name and replace with the application-id-process-id?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397342105", "createdAt": "2020-03-24T17:40:08Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -79,7 +83,7 @@ private static String getTaskProducerClientId(final String threadClientId, final\n                       final Time time,\n                       final KafkaClientSupplier clientSupplier,\n                       final String threadId,\n-                      final UUID processId,\n+                      final String eosBetaTxIdSuffix,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgzMw=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MjU3NQ==", "bodyText": "See my previous comment above.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397342575", "createdAt": "2020-03-24T17:40:50Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -95,8 +99,9 @@ private static String getTaskProducerClientId(final String threadClientId, final\n \n         createTaskSensor = ThreadMetrics.createTaskSensor(threadId, streamsMetrics);\n         applicationId = config.getString(StreamsConfig.APPLICATION_ID_CONFIG);\n+        transactionalId = applicationId + \"-\" + eosBetaTxIdSuffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MjA0Mg==", "bodyText": "This is a meta question: I understand that with txn.id, we should handle ProducerFencedException as fatal and close the producer. However with eos-beta, there should be no other producers configured with the same txn.id like eos-alpha, so we should only get here from the CommitFailedException in sendOffsetsToTxn fenced by the group coordinator, in which case we do not need to close the producer either.\nOr did I miss any other scenarios here?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397352042", "createdAt": "2020-03-24T17:55:01Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -108,19 +113,34 @@ private static String getTaskProducerClientId(final String threadClientId, final\n             final String threadProducerClientId = getThreadProducerClientId(threadId);\n             final Map<String, Object> producerConfigs = config.getProducerConfigs(threadProducerClientId);\n \n-            if (processingMode == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n-                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, applicationId + \"-\" + processId);\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), true, logContext);\n+            if (processingMode == EXACTLY_ONCE_BETA) {\n+                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), EXACTLY_ONCE_BETA, logContext);\n             } else {\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), false, logContext);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), AT_LEAST_ONCE, logContext);\n             }\n             taskProducers = Collections.emptyMap();\n         }\n     }\n \n+    public void reInitializeThreadProducer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mjc1Mw==", "bodyText": "We should have always called abortTxn in recordCollector#close as part of task closure right?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397352753", "createdAt": "2020-03-24T17:56:04Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -108,19 +113,34 @@ private static String getTaskProducerClientId(final String threadClientId, final\n             final String threadProducerClientId = getThreadProducerClientId(threadId);\n             final Map<String, Object> producerConfigs = config.getProducerConfigs(threadProducerClientId);\n \n-            if (processingMode == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n-                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, applicationId + \"-\" + processId);\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), true, logContext);\n+            if (processingMode == EXACTLY_ONCE_BETA) {\n+                producerConfigs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), EXACTLY_ONCE_BETA, logContext);\n             } else {\n-                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), false, logContext);\n+                threadProducer = new StreamsProducer(clientSupplier.getProducer(producerConfigs), AT_LEAST_ONCE, logContext);\n             }\n             taskProducers = Collections.emptyMap();\n         }\n     }\n \n+    public void reInitializeThreadProducer() {\n+        if (processingMode != EXACTLY_ONCE_BETA) {\n+            throw new IllegalStateException(\"Exactly-once beta is not enabled.\");\n+        }\n+\n+        threadProducer.abortTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NjAwNA==", "bodyText": "Why we need to keep both processingMode and eosEnabled?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397356004", "createdAt": "2020-03-24T18:01:04Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -52,17 +55,19 @@\n     private final Logger log;\n     private final String logPrefix;\n \n-    private final Producer<byte[], byte[]> producer;\n+    private Producer<byte[], byte[]> producer;\n+    private final StreamThread.ProcessingMode processingMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Njg3Ng==", "bodyText": "See my other comment above: with eos-beta I think this should not be triggered by ProducerFencedException ever?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397356876", "createdAt": "2020-03-24T18:02:20Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -465,6 +467,10 @@ void handleLostAll() {\n                 partitionToTask.remove(inputPartition);\n             }\n         }\n+\n+        if (processingMode == EXACTLY_ONCE_BETA) {\n+            activeTaskCreator.reInitializeThreadProducer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1ODAyOQ==", "bodyText": "I think parameterize this class with eos-alpha and eos-beta is a better idea --- for some tests that do not rely on the flag and hence would be a duplicated one, we can move it to a separate non-parameterized class.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397358029", "createdAt": "2020-03-24T18:04:13Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -127,13 +127,31 @@ public void createTopics() throws Exception {\n     }\n \n     @Test\n-    public void shouldBeAbleToRunWithEosEnabled() throws Exception {\n-        runSimpleCopyTest(1, SINGLE_PARTITION_INPUT_TOPIC, null, SINGLE_PARTITION_OUTPUT_TOPIC, false);\n+    public void shouldBeAbleToRunWithEosAlphaEnabled() throws Exception {\n+        shouldBeAbleToRunWithEosEnabled(StreamsConfig.EXACTLY_ONCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODM1Mg=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1OTM4Nw==", "bodyText": "Good call, thanks for the improved coverage.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r397359387", "createdAt": "2020-03-24T18:06:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreatorTest.java", "diffHunk": "@@ -173,9 +200,24 @@ public void shouldThrowStreamsExceptionOnErrorCloseThreadProducerIfEosDisabled()\n     public void shouldCreateProducerPerTaskIfEosAlphaEnabled() {\n         properties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);\n         mockClientSupplier.setApplicationIdForProducer(\"appId\");\n+\n+        final Map<String, Object> mockProducerConfig = mock(Map.class);\n+        expect(mockProducerConfig.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n+        expect(mockProducerConfig.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_1\")).andReturn(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODkxNg=="}, "originalCommit": null, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDk5NDgz", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-381499483", "createdAt": "2020-03-25T20:12:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoxMjozN1rOF7seDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDozNzo0NVrOF7tV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzODg5NQ==", "bodyText": "I think Guozhang's point above is to maintain only one flag instead of two. Using a helper could solve it IMHO.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398138895", "createdAt": "2020-03-25T20:12:37Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -52,17 +55,19 @@\n     private final Logger log;\n     private final String logPrefix;\n \n-    private final Producer<byte[], byte[]> producer;\n+    private Producer<byte[], byte[]> producer;\n+    final StreamThread.ProcessingMode processingMode;\n     private final boolean eosEnabled;\n \n     private boolean transactionInFlight = false;\n     private boolean transactionInitialized = false;\n \n     public StreamsProducer(final Producer<byte[], byte[]> producer,\n-                           final boolean eosEnabled,\n+                           final StreamThread.ProcessingMode processingMode,\n                            final LogContext logContext) {\n         this.producer = Objects.requireNonNull(producer, \"producer cannot be null\");\n-        this.eosEnabled = eosEnabled;\n+        this.processingMode = Objects.requireNonNull(processingMode, \"processingMode cannot be null\");\n+        this.eosEnabled = processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcyMDgzNA=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NzExMQ==", "bodyText": "For the test completeness, we could optionally duplicate the cases for EOS-alpha and beta just to make sure the passing in processing-mode is taking effect.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398147111", "createdAt": "2020-03-25T20:27:12Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/RecordCollectorTest.java", "diffHunk": "@@ -101,7 +103,7 @@\n \n     private final MockProducer<byte[], byte[]> mockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer streamsProducer = new StreamsProducer(mockProducer, false, logContext);\n+    private final StreamsProducer streamsProducer = new StreamsProducer(mockProducer, AT_LEAST_ONCE, logContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MzU1OA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0ODA4Mw==", "bodyText": "It's simplified because we have a clear mapping from eosAlphaStreamsProducer to its corresponding internal producer, which in the existing code reader always has to build this mapping manually by checking the initialization code.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398148083", "createdAt": "2020-03-25T20:28:54Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzM0NQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0OTIxNA==", "bodyText": "Not necessarily, we could pass in both processing mode and the expected output as parameters, if the test workflow looks essentially the same.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398149214", "createdAt": "2020-03-25T20:30:45Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer eosStreamsProducer =\n-        new StreamsProducer(eosMockProducer, true, logContext);\n+    private final StreamsProducer eosAlphaStreamsProducer =\n+        new StreamsProducer(eosAlphaMockProducer, EXACTLY_ONCE_ALPHA, logContext);\n+\n+    private final MockProducer<byte[], byte[]> eosBetaMockProducer = new MockProducer<>(\n+        cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n+    private final StreamsProducer eosBetaStreamsProducer =\n+        new StreamsProducer(eosBetaMockProducer, EXACTLY_ONCE_BETA, logContext);\n \n     private final ProducerRecord<byte[], byte[]> record =\n         new ProducerRecord<>(topic, 0, 0L, new byte[0], new byte[0], new RecordHeaders());\n \n     @Before\n     public void before() {\n-        eosStreamsProducer.initTransaction();\n+        eosAlphaStreamsProducer.initTransaction();\n     }\n \n \n \n-    // generic tests (non-EOS and EOS)\n+    // generic tests (non-EOS and EOS-alpha/beta)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzkyOQ=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1MTY3Nw==", "bodyText": "From the comparison here: https://wikidiff.com/common/generic, the opposite of generic is specific, which in this case I guess you want to express is mutual. So IMHO common or mutual tests are more accurate here.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398151677", "createdAt": "2020-03-25T20:35:09Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -74,24 +77,29 @@\n     private final MockProducer<byte[], byte[]> nonEosMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n     private final StreamsProducer nonEosStreamsProducer =\n-        new StreamsProducer(nonEosMockProducer, false, logContext);\n+        new StreamsProducer(nonEosMockProducer, AT_LEAST_ONCE, logContext);\n \n-    private final MockProducer<byte[], byte[]> eosMockProducer = new MockProducer<>(\n+    private final MockProducer<byte[], byte[]> eosAlphaMockProducer = new MockProducer<>(\n         cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n-    private final StreamsProducer eosStreamsProducer =\n-        new StreamsProducer(eosMockProducer, true, logContext);\n+    private final StreamsProducer eosAlphaStreamsProducer =\n+        new StreamsProducer(eosAlphaMockProducer, EXACTLY_ONCE_ALPHA, logContext);\n+\n+    private final MockProducer<byte[], byte[]> eosBetaMockProducer = new MockProducer<>(\n+        cluster, true, new DefaultPartitioner(), byteArraySerializer, byteArraySerializer);\n+    private final StreamsProducer eosBetaStreamsProducer =\n+        new StreamsProducer(eosBetaMockProducer, EXACTLY_ONCE_BETA, logContext);\n \n     private final ProducerRecord<byte[], byte[]> record =\n         new ProducerRecord<>(topic, 0, 0L, new byte[0], new byte[0], new RecordHeaders());\n \n     @Before\n     public void before() {\n-        eosStreamsProducer.initTransaction();\n+        eosAlphaStreamsProducer.initTransaction();\n     }\n \n \n \n-    // generic tests (non-EOS and EOS)\n+    // generic tests (non-EOS and EOS-alpha/beta)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTU1OA=="}, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1MzIwNg==", "bodyText": "Why do we only have one error handling test for eos-beta?", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398153206", "createdAt": "2020-03-25T20:37:45Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -688,12 +791,55 @@ public void shouldThrowStreamsExceptionOnEosAbortTxError() {\n \n     @Test\n     public void shouldFailOnEosAbortTxFatal() {\n-        eosMockProducer.abortTransactionException = new RuntimeException(\"KABOOM!\");\n+        eosAlphaMockProducer.abortTransactionException = new RuntimeException(\"KABOOM!\");\n         // call `send()` to start a transaction\n-        eosStreamsProducer.send(record, null);\n+        eosAlphaStreamsProducer.send(record, null);\n \n-        final RuntimeException thrown = assertThrows(RuntimeException.class, eosStreamsProducer::abortTransaction);\n+        final RuntimeException thrown = assertThrows(RuntimeException.class, eosAlphaStreamsProducer::abortTransaction);\n \n         assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n     }\n+\n+\n+    // EOS beta test\n+\n+    // functional tests\n+\n+    @Test\n+    public void shouldSetSetNewProducerOnResetProducer() {\n+        final Producer<byte[], byte[]> producer = mock(Producer.class);\n+\n+        eosBetaStreamsProducer.resetProducer(producer);\n+\n+        assertThat(eosBetaStreamsProducer.kafkaProducer(), is(producer));\n+    }\n+\n+    @Test\n+    public void shouldResetTransactionInitializedOnResetProducer() {\n+        final Producer<byte[], byte[]> producer = mock(Producer.class);\n+\n+        eosBetaStreamsProducer.initTransaction();\n+        eosBetaStreamsProducer.resetProducer(producer);\n+\n+        producer.initTransactions();\n+        expectLastCall();\n+        replay(producer);\n+\n+        eosBetaStreamsProducer.initTransaction();\n+\n+        verify(producer);\n+    }\n+\n+    // error handling tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 700}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjg4OTUw", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-382288950", "createdAt": "2020-03-26T18:20:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDozN1rOF8Ubrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDozN1rOF8Ubrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MzY0Ng==", "bodyText": "I realized that the test setup was actually incorrect. We try to use a unique application.id per test method and with parallel test execution the variable cannot be static", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398793646", "createdAt": "2020-03-26T18:20:37Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -93,7 +98,7 @@\n         Utils.mkProperties(Collections.singletonMap(\"auto.create.topics.enable\", \"false\"))\n     );\n \n-    private static String applicationId;\n+    private String applicationId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjg5MTg0", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-382289184", "createdAt": "2020-03-26T18:20:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDo1NVrOF8UcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDo1NVrOF8UcUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MzgxMQ==", "bodyText": "Make this static and atomic for parallel test execution", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398793811", "createdAt": "2020-03-26T18:20:55Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -110,11 +115,22 @@\n     private AtomicInteger commitRequested;\n     private Throwable uncaughtException;\n \n-    private int testNumber = 0;\n+    private static final AtomicInteger TEST_NUMBER = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzk4OTU5", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-382398959", "createdAt": "2020-03-26T20:38:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDozODo1MVrOF8ZgZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDozODo1MVrOF8ZgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3Njc3Mg==", "bodyText": "I think it is somewhat subjective :) My rationale is that it's better to not pass in parameters for a specific mode into the task creator which may not be used at all; i.e. we encapsulate the logic of creating transaction.id when eos-alpha / beta is used only inside the callee (the constructor) rather than letting the caller to prepare for it without knowing if it would really be needed or not.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r398876772", "createdAt": "2020-03-26T20:38:51Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreator.java", "diffHunk": "@@ -79,7 +83,7 @@ private static String getTaskProducerClientId(final String threadClientId, final\n                       final Time time,\n                       final KafkaClientSupplier clientSupplier,\n                       final String threadId,\n-                      final UUID processId,\n+                      final String eosBetaTxIdSuffix,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4NTgzMw=="}, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b81bc6ed9657a0436cbcb15fb0c281f996de4589", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/b81bc6ed9657a0436cbcb15fb0c281f996de4589", "committedDate": "2020-03-27T22:04:17Z", "message": "MINOR: extend EosIntegrationTest for EOS-beta"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b81bc6ed9657a0436cbcb15fb0c281f996de4589", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/b81bc6ed9657a0436cbcb15fb0c281f996de4589", "committedDate": "2020-03-27T22:04:17Z", "message": "MINOR: extend EosIntegrationTest for EOS-beta"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjAxMzI4", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-384201328", "createdAt": "2020-03-30T20:23:23Z", "commit": {"oid": "b81bc6ed9657a0436cbcb15fb0c281f996de4589"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDoyMzoyNFrOF96x8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDoyMzoyNFrOF96x8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3MDUxNQ==", "bodyText": "nit: remove system println", "url": "https://github.com/apache/kafka/pull/8331#discussion_r400470515", "createdAt": "2020-03-30T20:23:24Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -536,6 +553,7 @@ public void shouldNotViolateEosIfOneTaskGetsFencedUsingIsolatedAppInstances() th\n             checkResultPerKey(committedRecords, committedDataBeforeGC);\n             checkResultPerKey(uncommittedRecords, dataBeforeGC);\n \n+            System.err.println(\"mjsax: start GC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81bc6ed9657a0436cbcb15fb0c281f996de4589"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01468233fc24b2deb017a7bdf80dc2c644d92fc", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/c01468233fc24b2deb017a7bdf80dc2c644d92fc", "committedDate": "2020-03-30T21:40:39Z", "message": "Github comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjczNzIw", "url": "https://github.com/apache/kafka/pull/8331#pullrequestreview-384273720", "createdAt": "2020-03-30T22:20:55Z", "commit": {"oid": "c01468233fc24b2deb017a7bdf80dc2c644d92fc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoyMDo1NVrOF9-YDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoyNjo0OFrOF9-hig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTQyMg==", "bodyText": "Sounds great.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r400529422", "createdAt": "2020-03-30T22:20:55Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ActiveTaskCreatorTest.java", "diffHunk": "@@ -85,9 +89,20 @@\n \n     @Test\n     public void shouldCreateThreadProducerIfEosDisabled() {\n+        final Map<String, Object> mockProducerConfig = mock(Map.class);\n+        expect(mockProducerConfig.containsKey(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(false);\n+        replay(mockProducerConfig);\n+\n+        config = new StreamsConfig(properties) {\n+            @Override\n+            public Map<String, Object> getProducerConfigs(final String clientId) {\n+                return mockProducerConfig;\n+            }\n+        };\n         createTasks();\n \n         assertThat(mockClientSupplier.producers.size(), is(1));\n+        verify(mockProducerConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE4ODc4Mg=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMTg1MA==", "bodyText": "@mjsax has the fair point here, I think we can defer for future PRs to have a StreamsUtil like function for such static functions.", "url": "https://github.com/apache/kafka/pull/8331#discussion_r400531850", "createdAt": "2020-03-30T22:26:48Z", "author": {"login": "guozhangwang"}, "path": "streams/test-utils/src/main/java/org/apache/kafka/streams/TopologyTestDriver.java", "diffHunk": "@@ -588,7 +598,7 @@ private void completeAllProcessableWork() {\n     }\n \n     private void commit(final Map<TopicPartition, OffsetAndMetadata> offsets) {\n-        if (eosEnabled) {\n+        if (processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzUzMQ=="}, "originalCommit": null, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 359, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}