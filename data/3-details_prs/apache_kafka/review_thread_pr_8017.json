{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzUyMTE0", "number": 8017, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MzoyNlrODbs0lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0Nzo0MlrODbvv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcyNTAwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MzoyNlrOFjVjXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MzoyNlrOFjVjXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NzU5Ng==", "bodyText": "note: That's a simple rename, because the member variable topic is easy to be masked by a local variable with this new feature.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372597596", "createdAt": "2020-01-29T19:53:26Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -82,25 +86,46 @@\n \n     private static final String TASK_STATUS_PREFIX = \"status-task-\";\n     private static final String CONNECTOR_STATUS_PREFIX = \"status-connector-\";\n+    private static final String TOPIC_STATUS_PREFIX = \"status-topic-\";\n+    private static final String TOPIC_STATUS_SEPARATOR = \":connector-\";\n \n     public static final String STATE_KEY_NAME = \"state\";\n     public static final String TRACE_KEY_NAME = \"trace\";\n     public static final String WORKER_ID_KEY_NAME = \"worker_id\";\n     public static final String GENERATION_KEY_NAME = \"generation\";\n \n+    public static final String TOPIC_STATE_KEY = \"topic\";\n+    public static final String TOPIC_NAME_KEY = \"name\";\n+    public static final String TOPIC_CONNECTOR_KEY = \"connector\";\n+    public static final String TOPIC_TASK_KEY = \"task\";\n+    public static final String TOPIC_DISCOVER_TIMESTAMP_KEY = \"discoverTimestamp\";\n+\n     private static final Schema STATUS_SCHEMA_V0 = SchemaBuilder.struct()\n             .field(STATE_KEY_NAME, Schema.STRING_SCHEMA)\n             .field(TRACE_KEY_NAME, SchemaBuilder.string().optional().build())\n             .field(WORKER_ID_KEY_NAME, Schema.STRING_SCHEMA)\n             .field(GENERATION_KEY_NAME, Schema.INT32_SCHEMA)\n             .build();\n \n+    private static final Schema TOPIC_STATUS_VALUE_SCHEMA_V0 = SchemaBuilder.struct()\n+            .field(TOPIC_NAME_KEY, Schema.STRING_SCHEMA)\n+            .field(TOPIC_CONNECTOR_KEY, Schema.STRING_SCHEMA)\n+            .field(TOPIC_TASK_KEY, Schema.INT32_SCHEMA)\n+            .field(TOPIC_DISCOVER_TIMESTAMP_KEY, Schema.INT64_SCHEMA)\n+            .build();\n+\n+    private static final Schema TOPIC_STATUS_SCHEMA_V0 = SchemaBuilder.map(\n+            Schema.STRING_SCHEMA,\n+            TOPIC_STATUS_VALUE_SCHEMA_V0\n+    ).build();\n+\n     private final Time time;\n     private final Converter converter;\n     private final Table<String, Integer, CacheEntry<TaskStatus>> tasks;\n     private final Map<String, CacheEntry<ConnectorStatus>> connectors;\n+    private final ConcurrentMap<String, ConcurrentMap<String, TopicStatus>> topics;\n \n-    private String topic;\n+    private String statusTopic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDAzMjE4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0MzozNVrOFjYj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMTowOToxM1rOFjcuFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Njg2OA==", "bodyText": "These new methods are in the runtime and not the public API, but I still would like to ask: have you thought about whether or not it makes to add default methods, just to be a bit more friendly if there are other implementations outside of the AK project? Might be good to at least capture that decision here, even if it is to leave the methods as abstract.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372646868", "createdAt": "2020-01-29T21:43:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -66,6 +67,12 @@\n      */\n     void putSafe(TaskStatus status);\n \n+    /**\n+     * Set the state of a connector's topic to the given value.\n+     * @param status the status of the topic used by a connector\n+     */\n+    void put(TopicStatus status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NDMzNA==", "bodyText": "Indeed, I though initially about adding default methods for these new interface methods, but seems like put wouldn't have a reasonable default implementation. Therefore, since we'll need to extend at least one method, to maintain parity across all methods, I'm suggesting skipping defaults here. Upgrading to this version of Connect will require you to extend this interface.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372694334", "createdAt": "2020-01-29T23:52:06Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -66,6 +67,12 @@\n      */\n     void putSafe(TaskStatus status);\n \n+    /**\n+     * Set the state of a connector's topic to the given value.\n+     * @param status the status of the topic used by a connector\n+     */\n+    void put(TopicStatus status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Njg2OA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNTAzMA==", "bodyText": "That makes sense. I'm fine with the current approach of keeping all of the new methods abstract.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372715030", "createdAt": "2020-01-30T01:09:13Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -66,6 +67,12 @@\n      */\n     void putSafe(TaskStatus status);\n \n+    /**\n+     * Set the state of a connector's topic to the given value.\n+     * @param status the status of the topic used by a connector\n+     */\n+    void put(TopicStatus status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0Njg2OA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE4NzYwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MTowM1rOFjaDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo1OToxNVrOFjaehQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTM4Mg==", "bodyText": "Why return a map keyed by the connector name when ActiveTopicsInfo has the connector name in it? I understand that the ConnectorsResource is simply calling this, but maybe it'd be better to just return ActiveTopicsInfo here -- which seems closer to matching what this method is actually doing, and the fact that ConnectorsResource needs a map can be done in that class:\n    @GET\n    @Path(\"/{connector}/topics\")\n    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n        return herder.connectorActiveTopics(connector);\n    }\n\nto\n    @GET\n    @Path(\"/{connector}/topics\")\n    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n        ActiveTopicsInfo result = herder.connectorActiveTopics(connector);\n        return Collections.singletonMap(result.connector(), result);\n    }\n\nThis is kind of a minor thing, but since this is an (internal) API it seems better to reflect the actual behavior. WDYT?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671382", "createdAt": "2020-01-29T22:41:03Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java", "diffHunk": "@@ -144,6 +146,24 @@\n      */\n     ConnectorStateInfo connectorStatus(String connName);\n \n+    /**\n+     * Lookup the set of topics currently used by a connector.\n+     * @param connName name of the connector\n+     */\n+    Map<String, ActiveTopicsInfo> connectorActiveTopics(String connName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3ODI3Nw==", "bodyText": "I see your point. Yeah, the requirement to return a map comes from the json definition in KIP-558. But what you suggest will lead to a cleaner interface extension in the herder.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372678277", "createdAt": "2020-01-29T22:59:15Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java", "diffHunk": "@@ -144,6 +146,24 @@\n      */\n     ConnectorStateInfo connectorStatus(String connName);\n \n+    /**\n+     * Lookup the set of topics currently used by a connector.\n+     * @param connName name of the connector\n+     */\n+    Map<String, ActiveTopicsInfo> connectorActiveTopics(String connName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTM4Mg=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE4Nzg4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MToxMFrOFjaDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MToxMFrOFjaDxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTQzMA==", "bodyText": "Should be something like:\n* Request to asynchronously reset the active topics for the named connector.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671430", "createdAt": "2020-01-29T22:41:10Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java", "diffHunk": "@@ -144,6 +146,24 @@\n      */\n     ConnectorStateInfo connectorStatus(String connName);\n \n+    /**\n+     * Lookup the set of topics currently used by a connector.\n+     * @param connName name of the connector\n+     */\n+    Map<String, ActiveTopicsInfo> connectorActiveTopics(String connName);\n+\n+    /**\n+     * Lookup the set of topics currently used by a connector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE4ODc2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MTozMFrOFjaETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzoxNDoyMlrOFjaxuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTU2NA==", "bodyText": "How about replacing these four lines with:\nthis(topic, Objects.requireNotNull(task).connector(), task.task(), discoverTimestamp);\n\nand then removing the TODO line?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671564", "createdAt": "2020-01-29T22:41:30Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+public class TopicStatus {\n+    private final String topic;\n+    private final String connector;\n+    private final int task;\n+    private final long discoverTimestamp;\n+\n+    public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) {\n+        //TODO: check non-null\n+        this.topic = topic;\n+        this.connector = task.connector();\n+        this.task = task.task();\n+        this.discoverTimestamp = discoverTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY4MzE5Mw==", "bodyText": "This remained like this because I was undecided which constructor type to keep. Both make sense so, I'll call this now. \ud83d\udc4d", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372683193", "createdAt": "2020-01-29T23:14:22Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+public class TopicStatus {\n+    private final String topic;\n+    private final String connector;\n+    private final int task;\n+    private final long discoverTimestamp;\n+\n+    public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) {\n+        //TODO: check non-null\n+        this.topic = topic;\n+        this.connector = task.connector();\n+        this.task = task.task();\n+        this.discoverTimestamp = discoverTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTU2NA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE4OTcwOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MTo1MVrOFjaE4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MTo1MVrOFjaE4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTcxMw==", "bodyText": "How about ensuring the topic and connector names are not null:\n        this.topic = Objects.requireNonNull(topic);\n        this.connector = Objects.requireNonNull(connector);", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671713", "createdAt": "2020-01-29T22:41:51Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+public class TopicStatus {\n+    private final String topic;\n+    private final String connector;\n+    private final int task;\n+    private final long discoverTimestamp;\n+\n+    public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) {\n+        //TODO: check non-null\n+        this.topic = topic;\n+        this.connector = task.connector();\n+        this.task = task.task();\n+        this.discoverTimestamp = discoverTimestamp;\n+    }\n+\n+    public TopicStatus(String topic, String connector, int task, long discoverTimestamp) {\n+        this.topic = topic;\n+        this.connector = connector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5MDE2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjowMVrOFjaFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjowMVrOFjaFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTc4Ng==", "bodyText": "Might be good to add JavaDoc, if only to say:\n/*\n * Get the name of the topic.\n * \n * @return the topic name; never null\n */\n\nSimilar for the other getters.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671786", "createdAt": "2020-01-29T22:42:01Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+public class TopicStatus {\n+    private final String topic;\n+    private final String connector;\n+    private final int task;\n+    private final long discoverTimestamp;\n+\n+    public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) {\n+        //TODO: check non-null\n+        this.topic = topic;\n+        this.connector = task.connector();\n+        this.task = task.task();\n+        this.discoverTimestamp = discoverTimestamp;\n+    }\n+\n+    public TopicStatus(String topic, String connector, int task, long discoverTimestamp) {\n+        this.topic = topic;\n+        this.connector = connector;\n+        this.task = task;\n+        this.discoverTimestamp = discoverTimestamp;\n+    }\n+\n+    public String topic() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5MDM0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjowNlrOFjaFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjowNlrOFjaFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTgxNA==", "bodyText": "What about adding a toString() method in case this gets logged?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671814", "createdAt": "2020-01-29T22:42:06Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/TopicStatus.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.connect.runtime;\n+\n+import org.apache.kafka.connect.util.ConnectorTaskId;\n+\n+public class TopicStatus {\n+    private final String topic;\n+    private final String connector;\n+    private final int task;\n+    private final long discoverTimestamp;\n+\n+    public TopicStatus(String topic, ConnectorTaskId task, long discoverTimestamp) {\n+        //TODO: check non-null\n+        this.topic = topic;\n+        this.connector = task.connector();\n+        this.task = task.task();\n+        this.discoverTimestamp = discoverTimestamp;\n+    }\n+\n+    public TopicStatus(String topic, String connector, int task, long discoverTimestamp) {\n+        this.topic = topic;\n+        this.connector = connector;\n+        this.task = task;\n+        this.discoverTimestamp = discoverTimestamp;\n+    }\n+\n+    public String topic() {\n+        return topic;\n+    }\n+\n+    public String connector() {\n+        return connector;\n+    }\n+\n+    public int task() {\n+        return task;\n+    }\n+\n+    public long discoverTimestamp() {\n+        return discoverTimestamp;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5MDg3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjoyMFrOFjaFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyOTo0NVrOFjdBZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTg5Mg==", "bodyText": "I'm wondering if we really want to pass in the StatusBackingStore interface, or whether we should define a new interface? It'd be nice to constrain future developers to only use the methods related to active topics. It's a bit more complicated, but better captures the current intent to just allow the worker tasks to check whether a topic is considered active for a connector and if not to record that a topic has been used.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671892", "createdAt": "2020-01-29T22:42:20Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -70,7 +73,9 @@ public WorkerTask(ConnectorTaskId id,\n                       TargetState initialState,\n                       ClassLoader loader,\n                       ConnectMetrics connectMetrics,\n-                      RetryWithToleranceOperator retryWithToleranceOperator) {\n+                      RetryWithToleranceOperator retryWithToleranceOperator,\n+                      Time time,\n+                      StatusBackingStore statusBackingStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMTU5OQ==", "bodyText": "My main issue is that the new methods seem to belong to the StatusBackingStore interface. Fleshing them out to a different one (let's say TopicTracker) would would separate concerns here, but would also add a step of redirection that might be more complex to follow. wdyt?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372701599", "createdAt": "2020-01-30T00:17:09Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -70,7 +73,9 @@ public WorkerTask(ConnectorTaskId id,\n                       TargetState initialState,\n                       ClassLoader loader,\n                       ConnectMetrics connectMetrics,\n-                      RetryWithToleranceOperator retryWithToleranceOperator) {\n+                      RetryWithToleranceOperator retryWithToleranceOperator,\n+                      Time time,\n+                      StatusBackingStore statusBackingStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTg5Mg=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTk3Mg==", "bodyText": "Neither approach is terribly clean. I think the current approach certainly works, but as you point out if we add something like TopicTracker as a superinterface of StatusBackingStore then we'd be inconsistent with the pre-existing status methods.\nLet's keep things simple.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372719972", "createdAt": "2020-01-30T01:29:45Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerTask.java", "diffHunk": "@@ -70,7 +73,9 @@ public WorkerTask(ConnectorTaskId id,\n                       TargetState initialState,\n                       ClassLoader loader,\n                       ConnectMetrics connectMetrics,\n-                      RetryWithToleranceOperator retryWithToleranceOperator) {\n+                      RetryWithToleranceOperator retryWithToleranceOperator,\n+                      Time time,\n+                      StatusBackingStore statusBackingStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTg5Mg=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5MTM5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MjozNVrOFjaF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMTozNzoyMlrOFjdIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTk3Mw==", "bodyText": "Should this method return an error if the worker is configured to not enable the active topic feature?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372671973", "createdAt": "2020-01-29T22:42:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "diffHunk": "@@ -173,6 +176,24 @@ public ConnectorStateInfo getConnectorStatus(final @PathParam(\"connector\") Strin\n         return herder.connectorStatus(connector);\n     }\n \n+    @GET\n+    @Path(\"/{connector}/topics\")\n+    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n+        return herder.connectorActiveTopics(connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5MDExOA==", "bodyText": "Yes. This was missed. Probably should amend slightly the KIP to describe this too.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372690118", "createdAt": "2020-01-29T23:37:19Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "diffHunk": "@@ -173,6 +176,24 @@ public ConnectorStateInfo getConnectorStatus(final @PathParam(\"connector\") Strin\n         return herder.connectorStatus(connector);\n     }\n \n+    @GET\n+    @Path(\"/{connector}/topics\")\n+    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n+        return herder.connectorActiveTopics(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTk3Mw=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5MTUzMg==", "bodyText": "However, it's tricky because we currently return a map with the connector's name as a key. Leaving as is for now.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372691532", "createdAt": "2020-01-29T23:42:19Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "diffHunk": "@@ -173,6 +176,24 @@ public ConnectorStateInfo getConnectorStatus(final @PathParam(\"connector\") Strin\n         return herder.connectorStatus(connector);\n     }\n \n+    @GET\n+    @Path(\"/{connector}/topics\")\n+    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n+        return herder.connectorActiveTopics(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTk3Mw=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzE1Mg==", "bodyText": "Many of the other methods don't involve an optional feature. It may be possible to change the return type to Response, and then when the feature is disabled return an error response like in resetConnectorActiveTopics(...) but then when the feature is enabled build the map to be returned and then:\nreturn Response.ok(map).build();", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372717152", "createdAt": "2020-01-30T01:18:08Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "diffHunk": "@@ -173,6 +176,24 @@ public ConnectorStateInfo getConnectorStatus(final @PathParam(\"connector\") Strin\n         return herder.connectorStatus(connector);\n     }\n \n+    @GET\n+    @Path(\"/{connector}/topics\")\n+    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n+        return herder.connectorActiveTopics(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTk3Mw=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyMTcwMg==", "bodyText": "Good point!\nChanged the return type to Response to return an error as well.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372721702", "createdAt": "2020-01-30T01:37:22Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResource.java", "diffHunk": "@@ -173,6 +176,24 @@ public ConnectorStateInfo getConnectorStatus(final @PathParam(\"connector\") Strin\n         return herder.connectorStatus(connector);\n     }\n \n+    @GET\n+    @Path(\"/{connector}/topics\")\n+    public Map<String, ActiveTopicsInfo> getConnectorActiveTopics(final @PathParam(\"connector\") String connector) throws Throwable {\n+        return herder.connectorActiveTopics(connector);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MTk3Mw=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5MzY0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MzoyMFrOFjaHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxOToyMFrOFjc3mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjMxNg==", "bodyText": "Do we need to pass the connector name and topic name if we could instead just get them from the TopicStatus object?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672316", "createdAt": "2020-01-29T22:43:20Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -218,6 +249,25 @@ private void sendTaskStatus(final TaskStatus status, boolean safeWrite) {\n         send(key, status, entry, safeWrite);\n     }\n \n+    private void sendTopicStatus(final String connector, final String topic, final TopicStatus status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5MjYxNw==", "bodyText": "status may be null when we need to represent deletes.\nAnd I've kept it this way to avoid constructing another object, partially defined, to represent deletes/tombstones.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372692617", "createdAt": "2020-01-29T23:46:13Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -218,6 +249,25 @@ private void sendTaskStatus(final TaskStatus status, boolean safeWrite) {\n         send(key, status, entry, safeWrite);\n     }\n \n+    private void sendTopicStatus(final String connector, final String topic, final TopicStatus status) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjMxNg=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzQ2Ng==", "bodyText": "Good point. I saw this method is called with a null topic status, but didn't put the two together. It's fine as-is.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372717466", "createdAt": "2020-01-30T01:19:20Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -218,6 +249,25 @@ private void sendTaskStatus(final TaskStatus status, boolean safeWrite) {\n         send(key, status, entry, safeWrite);\n     }\n \n+    private void sendTopicStatus(final String connector, final String topic, final TopicStatus status) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjMxNg=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NDA2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MzoyOFrOFjaHcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzo0Njo1OFrOFjbXiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjM2OA==", "bodyText": "Would be nice to add a unit test for this method, which would require this to be protected for visibility to unit tests.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672368", "createdAt": "2020-01-29T22:43:28Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -356,14 +433,56 @@ private TaskStatus parseTaskStatus(ConnectorTaskId taskId, byte[] data) {\n         }\n     }\n \n+    private TopicStatus parseTopicStatus(byte[] data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5Mjg3Mw==", "bodyText": "True. I'm adding one which I'll extend during integration testing more.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372692873", "createdAt": "2020-01-29T23:46:58Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -356,14 +433,56 @@ private TaskStatus parseTaskStatus(ConnectorTaskId taskId, byte[] data) {\n         }\n     }\n \n+    private TopicStatus parseTopicStatus(byte[] data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjM2OA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NDM2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0MzozNVrOFjaHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyMDoxNVrOFjc4YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjQxMA==", "bodyText": "Should we be a bit more fault tolerant here in case the active record is missing the task key -- or any other fields that are required? I understand that the current code will never write such a record, but it seems easy to do just in case users need/want to manually write active topic records with missing fields.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672410", "createdAt": "2020-01-29T22:43:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -356,14 +433,56 @@ private TaskStatus parseTaskStatus(ConnectorTaskId taskId, byte[] data) {\n         }\n     }\n \n+    private TopicStatus parseTopicStatus(byte[] data) {\n+        try {\n+            SchemaAndValue schemaAndValue = converter.toConnectData(statusTopic, data);\n+            if (!(schemaAndValue.value() instanceof Map)) {\n+                log.error(\"Invalid topic status value {}\", schemaAndValue.value());\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Object innerValue = ((Map<String, Object>) schemaAndValue.value()).get(TOPIC_STATE_KEY);\n+            if (!(innerValue instanceof Map)) {\n+                log.error(\"Invalid topic status value {} for field {}\", innerValue, TOPIC_STATE_KEY);\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> topicStatusMetadata = (Map<String, Object>) innerValue;\n+            return new TopicStatus((String) topicStatusMetadata.get(TOPIC_NAME_KEY),\n+                    (String) topicStatusMetadata.get(TOPIC_CONNECTOR_KEY),\n+                    ((Long) topicStatusMetadata.get(TOPIC_TASK_KEY)).intValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjc5Ng==", "bodyText": "My intention was also to be more fault tolerant. But I also didn't want to diverge from the pattern used for the rest of the values here (e.g. #parseConnectorStatus). I'd suggest refactoring in a separate PR for all.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372702796", "createdAt": "2020-01-30T00:21:15Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -356,14 +433,56 @@ private TaskStatus parseTaskStatus(ConnectorTaskId taskId, byte[] data) {\n         }\n     }\n \n+    private TopicStatus parseTopicStatus(byte[] data) {\n+        try {\n+            SchemaAndValue schemaAndValue = converter.toConnectData(statusTopic, data);\n+            if (!(schemaAndValue.value() instanceof Map)) {\n+                log.error(\"Invalid topic status value {}\", schemaAndValue.value());\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Object innerValue = ((Map<String, Object>) schemaAndValue.value()).get(TOPIC_STATE_KEY);\n+            if (!(innerValue instanceof Map)) {\n+                log.error(\"Invalid topic status value {} for field {}\", innerValue, TOPIC_STATE_KEY);\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> topicStatusMetadata = (Map<String, Object>) innerValue;\n+            return new TopicStatus((String) topicStatusMetadata.get(TOPIC_NAME_KEY),\n+                    (String) topicStatusMetadata.get(TOPIC_CONNECTOR_KEY),\n+                    ((Long) topicStatusMetadata.get(TOPIC_TASK_KEY)).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjQxMA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzY2NA==", "bodyText": "That works. Refactoring existing code is probably best in a simple but separate PR.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372717664", "createdAt": "2020-01-30T01:20:15Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/KafkaStatusBackingStore.java", "diffHunk": "@@ -356,14 +433,56 @@ private TaskStatus parseTaskStatus(ConnectorTaskId taskId, byte[] data) {\n         }\n     }\n \n+    private TopicStatus parseTopicStatus(byte[] data) {\n+        try {\n+            SchemaAndValue schemaAndValue = converter.toConnectData(statusTopic, data);\n+            if (!(schemaAndValue.value() instanceof Map)) {\n+                log.error(\"Invalid topic status value {}\", schemaAndValue.value());\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Object innerValue = ((Map<String, Object>) schemaAndValue.value()).get(TOPIC_STATE_KEY);\n+            if (!(innerValue instanceof Map)) {\n+                log.error(\"Invalid topic status value {} for field {}\", innerValue, TOPIC_STATE_KEY);\n+                return null;\n+            }\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> topicStatusMetadata = (Map<String, Object>) innerValue;\n+            return new TopicStatus((String) topicStatusMetadata.get(TOPIC_NAME_KEY),\n+                    (String) topicStatusMetadata.get(TOPIC_CONNECTOR_KEY),\n+                    ((Long) topicStatusMetadata.get(TOPIC_TASK_KEY)).intValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjQxMA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NTEzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0Mzo1MFrOFjaIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzo1Njo0MVrOFjbizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjUyOQ==", "bodyText": "Might be nice to say that these parameters can never be null", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672529", "createdAt": "2020-01-29T22:43:50Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NTc1OA==", "bodyText": "Added note and runtime requirements to non-null in the implementations.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372695758", "createdAt": "2020-01-29T23:56:41Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjUyOQ=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NTQyOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0Mzo1OFrOFjaIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzo1ODo0NVrOFjblNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjU3Ng==", "bodyText": "Might be nice to say that the connector name parameter may not be null", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672576", "createdAt": "2020-01-29T22:43:58Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NjM3NQ==", "bodyText": "Added note and runtime requirements to non-null in the implementations.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372696375", "createdAt": "2020-01-29T23:58:45Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjU3Ng=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NTY3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0NDowM1rOFjaIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMzo1ODo1OFrOFjbleg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjYxNQ==", "bodyText": "Can this ever be null?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672615", "createdAt": "2020-01-29T22:44:03Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name\n+     * @return a collection of topic states", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NjQ0Mg==", "bodyText": "Only empty", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372696442", "createdAt": "2020-01-29T23:58:58Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name\n+     * @return a collection of topic states", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjYxNQ=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NTg0OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0NDowN1rOFjaIiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDowMDozMlrOFjbnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjY0OA==", "bodyText": "Might be nice to say that these parameters can never be null", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672648", "createdAt": "2020-01-29T22:44:07Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name\n+     * @return a collection of topic states\n+     */\n+    Collection<TopicStatus> getAllTopics(String connector);\n+\n+    /**\n+     * Delete this topic from the connector's set of active topics\n+     * @param connector the connector name\n+     * @param topic the topic name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NjkyMw==", "bodyText": "Added note and runtime requirements to non-null in the implementations.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372696923", "createdAt": "2020-01-30T00:00:32Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/storage/StatusBackingStore.java", "diffHunk": "@@ -87,6 +94,28 @@\n      */\n     Collection<TaskStatus> getAll(String connector);\n \n+    /**\n+     * Get the status of a connector's topic if the connector is actively using this topic\n+     * @param connector the connector name\n+     * @param topic the topic name\n+     * @return the state or null if there is none\n+     */\n+    TopicStatus getTopic(String connector, String topic);\n+\n+    /**\n+     * Get the states of all topics that a connector is using.\n+     * @param connector the connector name\n+     * @return a collection of topic states\n+     */\n+    Collection<TopicStatus> getAllTopics(String connector);\n+\n+    /**\n+     * Delete this topic from the connector's set of active topics\n+     * @param connector the connector name\n+     * @param topic the topic name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjY0OA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDE5NjIzOnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0NDoxNlrOFjaIwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDowMToxOVrOFjboUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjcwNA==", "bodyText": "Maybe I'm missing it, but I don't see a difference between these two blocks, unlike the other two occurrences. Should this return expect.AndAnswer(...)?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372672704", "createdAt": "2020-01-29T22:44:16Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java", "diffHunk": "@@ -361,6 +365,29 @@ private void expectInitializeTask() throws Exception {\n         PowerMock.expectLastCall();\n     }\n \n+    private void expectTaskGetTopic(boolean anyTimes) {\n+        final Capture<String> connectorCapture = EasyMock.newCapture();\n+        final Capture<String> topicCapture = EasyMock.newCapture();\n+        IExpectationSetters<TopicStatus> expect = EasyMock.expect(statusBackingStore.getTopic(\n+                EasyMock.capture(connectorCapture),\n+                EasyMock.capture(topicCapture)));\n+        if (anyTimes) {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));\n+        } else {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5NzE2OA==", "bodyText": "Correct. I remember noticing that, but missed to amend.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372697168", "createdAt": "2020-01-30T00:01:19Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java", "diffHunk": "@@ -361,6 +365,29 @@ private void expectInitializeTask() throws Exception {\n         PowerMock.expectLastCall();\n     }\n \n+    private void expectTaskGetTopic(boolean anyTimes) {\n+        final Capture<String> connectorCapture = EasyMock.newCapture();\n+        final Capture<String> topicCapture = EasyMock.newCapture();\n+        IExpectationSetters<TopicStatus> expect = EasyMock.expect(statusBackingStore.getTopic(\n+                EasyMock.capture(connectorCapture),\n+                EasyMock.capture(topicCapture)));\n+        if (anyTimes) {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));\n+        } else {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3MjcwNA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDIwMjk2OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0NzowMVrOFjaM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNzozNVrOFjc_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3Mzc4NA==", "bodyText": "WDYT about doing something like the following to reduce the duplicate code:\nSupplier<TopicStatus> returnStatus = () -> new TopicStatus(\n        topicCapture.getValue(),\n        new ConnectorTaskId(connectorCapture.getValue(), 0),\n        Time.SYSTEM.milliseconds());\nif (anyTimes) {\n    expect.AndStubAnswer(returnStatus);\n} else {\n    expect.AndAnswer(returnStatus);\n}\n\nand doing the same in the other two similar methods?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372673784", "createdAt": "2020-01-29T22:47:01Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java", "diffHunk": "@@ -695,6 +706,29 @@ public Object answer() throws Throwable {\n         return capturedCallback;\n     }\n \n+    private void expectTaskGetTopic(boolean anyTimes) {\n+        final Capture<String> connectorCapture = EasyMock.newCapture();\n+        final Capture<String> topicCapture = EasyMock.newCapture();\n+        IExpectationSetters<TopicStatus> expect = EasyMock.expect(statusBackingStore.getTopic(\n+                EasyMock.capture(connectorCapture),\n+                EasyMock.capture(topicCapture)));\n+        if (anyTimes) {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));\n+        } else {\n+            expect.andAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5ODkwNA==", "bodyText": "I'm fuzzy on the details right now, but seems that it can't be inferred if it's not given inline.\nMaybe we can optimize in a follow up that will include the other calls that add two implementations of IAnswer", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372698904", "createdAt": "2020-01-30T00:07:30Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java", "diffHunk": "@@ -695,6 +706,29 @@ public Object answer() throws Throwable {\n         return capturedCallback;\n     }\n \n+    private void expectTaskGetTopic(boolean anyTimes) {\n+        final Capture<String> connectorCapture = EasyMock.newCapture();\n+        final Capture<String> topicCapture = EasyMock.newCapture();\n+        IExpectationSetters<TopicStatus> expect = EasyMock.expect(statusBackingStore.getTopic(\n+                EasyMock.capture(connectorCapture),\n+                EasyMock.capture(topicCapture)));\n+        if (anyTimes) {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));\n+        } else {\n+            expect.andAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3Mzc4NA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTU1MA==", "bodyText": "Yeah, this was a minor change while leaving the fact there were still two other similar methods. We maybe should refactor later.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372719550", "createdAt": "2020-01-30T01:27:35Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java", "diffHunk": "@@ -695,6 +706,29 @@ public Object answer() throws Throwable {\n         return capturedCallback;\n     }\n \n+    private void expectTaskGetTopic(boolean anyTimes) {\n+        final Capture<String> connectorCapture = EasyMock.newCapture();\n+        final Capture<String> topicCapture = EasyMock.newCapture();\n+        IExpectationSetters<TopicStatus> expect = EasyMock.expect(statusBackingStore.getTopic(\n+                EasyMock.capture(connectorCapture),\n+                EasyMock.capture(topicCapture)));\n+        if (anyTimes) {\n+            expect.andStubAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));\n+        } else {\n+            expect.andAnswer(() -> new TopicStatus(\n+                    topicCapture.getValue(),\n+                    new ConnectorTaskId(connectorCapture.getValue(), 0),\n+                    Time.SYSTEM.milliseconds()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3Mzc4NA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDIwNDM4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0Nzo0MFrOFjaN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDowODo1NVrOFjbwhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDAyMA==", "bodyText": "Is this test really writing new active topic state?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372674020", "createdAt": "2020-01-29T22:47:40Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "diffHunk": "@@ -394,6 +395,63 @@ public void readTaskState() {\n         verifyAll();\n     }\n \n+    @Test\n+    public void putTopicState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTI3MA==", "bodyText": "Hmm. Not yet. Removing for now. Will add in the follow up.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372699270", "createdAt": "2020-01-30T00:08:55Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "diffHunk": "@@ -394,6 +395,63 @@ public void readTaskState() {\n         verifyAll();\n     }\n \n+    @Test\n+    public void putTopicState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDAyMA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDIwNDQ4OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjo0Nzo0MlrOFjaN9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDowOTowOVrOFjbwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDAzOA==", "bodyText": "Does this method really read the topic state?", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372674038", "createdAt": "2020-01-29T22:47:42Z", "author": {"login": "rhauch"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "diffHunk": "@@ -394,6 +395,63 @@ public void readTaskState() {\n         verifyAll();\n     }\n \n+    @Test\n+    public void putTopicState() {\n+        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n+        Converter converter = mock(JsonConverter.class);\n+        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n+\n+        byte[] value = new byte[0];\n+        expect(converter.fromConnectData(eq(STATUS_TOPIC), anyObject(Schema.class), anyObject(Struct.class)))\n+                .andStubReturn(value);\n+\n+        final Capture<Callback> callbackCapture = newCapture();\n+        kafkaBasedLog.send(eq(\"status-connector-conn\"), eq(value), capture(callbackCapture));\n+        expectLastCall()\n+                .andAnswer(new IAnswer<Void>() {\n+                    @Override\n+                    public Void answer() throws Throwable {\n+                        callbackCapture.getValue().onCompletion(null, null);\n+                        return null;\n+                    }\n+                });\n+        replayAll();\n+\n+        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n+        store.put(status);\n+\n+        // state is not visible until read back from the log\n+        assertEquals(null, store.get(CONNECTOR));\n+\n+        verifyAll();\n+    }\n+\n+    @Test\n+    public void readTopicState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY5OTMzNg==", "bodyText": "Hmm. Good catch. Not yet. Removing for now. Will add in the follow up.", "url": "https://github.com/apache/kafka/pull/8017#discussion_r372699336", "createdAt": "2020-01-30T00:09:09Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java", "diffHunk": "@@ -394,6 +395,63 @@ public void readTaskState() {\n         verifyAll();\n     }\n \n+    @Test\n+    public void putTopicState() {\n+        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n+        Converter converter = mock(JsonConverter.class);\n+        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n+\n+        byte[] value = new byte[0];\n+        expect(converter.fromConnectData(eq(STATUS_TOPIC), anyObject(Schema.class), anyObject(Struct.class)))\n+                .andStubReturn(value);\n+\n+        final Capture<Callback> callbackCapture = newCapture();\n+        kafkaBasedLog.send(eq(\"status-connector-conn\"), eq(value), capture(callbackCapture));\n+        expectLastCall()\n+                .andAnswer(new IAnswer<Void>() {\n+                    @Override\n+                    public Void answer() throws Throwable {\n+                        callbackCapture.getValue().onCompletion(null, null);\n+                        return null;\n+                    }\n+                });\n+        replayAll();\n+\n+        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n+        store.put(status);\n+\n+        // state is not visible until read back from the log\n+        assertEquals(null, store.get(CONNECTOR));\n+\n+        verifyAll();\n+    }\n+\n+    @Test\n+    public void readTopicState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDAzOA=="}, "originalCommit": {"oid": "ec119b9ad4fbe6e30eabe165d5ba7818b3dcf652"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4149, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}