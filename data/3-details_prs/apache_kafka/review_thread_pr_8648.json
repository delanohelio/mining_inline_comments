{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDQxNTIw", "number": 8648, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo0NTowOFrOD71h5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MToyNlrOD73KdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY5NjA0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo0NTowOFrOGUaFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMToxMlrOGUbA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MjA1OQ==", "bodyText": "Why do we use getLogPrefix() -- our code style always omit the get prefix -- should be just logPrefix() (Similar below for other methods)", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424052059", "createdAt": "2020-05-12T21:45:08Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -185,24 +187,25 @@ public String toString() {\n     public void configure(final Map<String, ?> configs) {\n         final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(configs);\n \n-        logPrefix = assignorConfiguration.logPrefix();\n+        logPrefix = assignorConfiguration.getLogPrefix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzMxNQ==", "bodyText": "I guess I thought there was a reason getXX was used in this class and figured all the methods should conform. Idk. I'll remove the get", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424067315", "createdAt": "2020-05-12T22:21:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -185,24 +187,25 @@ public String toString() {\n     public void configure(final Map<String, ?> configs) {\n         final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(configs);\n \n-        logPrefix = assignorConfiguration.logPrefix();\n+        logPrefix = assignorConfiguration.getLogPrefix();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MjA1OQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg1NjYxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1MDowN1rOGUbp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1MDowN1rOGUbp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NzgwOA==", "bodyText": "This is the only non-cosmetic change in this class, along with the interface added below", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424077808", "createdAt": "2020-05-12T22:50:07Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -340,6 +319,27 @@ public TaskAssignor getTaskAssignor() {\n         }\n     }\n \n+    public AssignmentListener assignmentListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg2MzgyOnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1MzoxNlrOGUbuXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0NDowNlrOGUcueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw==", "bodyText": "Sorry for all the lines of changes here, but the inconsistent method signatures and object construction was making this class hard to follow. All I'm doing here is making the methods conform to the same style, and moving the construction of any config that isn't needed elsewhere to its getter method. This allows us to remove a lot of these class variables", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424078943", "createdAt": "2020-05-12T22:53:16Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -47,59 +47,21 @@\n \n     private final String logPrefix;\n     private final Logger log;\n-    private final AssignmentConfigs assignmentConfigs;\n-    @SuppressWarnings(\"deprecation\")\n-    private final org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n-    private final String userEndPoint;\n     private final TaskManager taskManager;\n-    private final StreamsMetadataState streamsMetadataState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTA1NA==", "bodyText": "Do we know if the corresponding \"getters\" are called often or not? I guess the main idea behind having those member variables was to \"parse\" the config once as it's immutable anyway instead of each time a getter is called?", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424091054", "createdAt": "2020-05-12T23:30:04Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -47,59 +47,21 @@\n \n     private final String logPrefix;\n     private final Logger log;\n-    private final AssignmentConfigs assignmentConfigs;\n-    @SuppressWarnings(\"deprecation\")\n-    private final org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n-    private final String userEndPoint;\n     private final TaskManager taskManager;\n-    private final StreamsMetadataState streamsMetadataState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTM1NA==", "bodyText": "They are not. We construct the AssignorConfiguration object once in StreamsPartitionAssignor#configure and call the getters immediately afterwards, and only there", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424095354", "createdAt": "2020-05-12T23:44:06Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -47,59 +47,21 @@\n \n     private final String logPrefix;\n     private final Logger log;\n-    private final AssignmentConfigs assignmentConfigs;\n-    @SuppressWarnings(\"deprecation\")\n-    private final org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n-    private final String userEndPoint;\n     private final TaskManager taskManager;\n-    private final StreamsMetadataState streamsMetadataState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk0Mw=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg2ODg3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NTo0MVrOGUbxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMzo1MVrOGUciEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTczNQ==", "bodyText": "This one actually might not be necessary, but I thought it was useful as a sanity check especially since we're trying to access the stores in some places", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424079735", "createdAt": "2020-05-12T22:55:41Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjE3Nw==", "bodyText": "Agreed.", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092177", "createdAt": "2020-05-12T23:33:51Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTczNQ=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk0OTYzOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNDozNFrOGUci0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNTo1NVrOGUdQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjM3MA==", "bodyText": "Seems this could fail if observed is empty?\nAlso, could we simplify this? We are only interested in RUNNING  state, right? So no need to check the previous state?", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092370", "createdAt": "2020-05-12T23:34:34Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {\n         waitForCondition(\n-            () -> observed.equals(expected),\n+            () -> observed.get(observed.size() - 1).equals(new KeyValue<>(State.REBALANCING, State.RUNNING)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNDE5MA==", "bodyText": "True, I'll fix this", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424104190", "createdAt": "2020-05-13T00:15:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -906,29 +912,22 @@ public void close() { }\n         return streams;\n     }\n \n-    private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n-                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n-            throws Exception {\n-\n+    private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed) throws Exception {\n         waitForCondition(\n-            () -> observed.equals(expected),\n+            () -> observed.get(observed.size() - 1).equals(new KeyValue<>(State.REBALANCING, State.RUNNING)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjM3MA=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk1MzM0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozNjoyNFrOGUclCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyMDoyM1rOGUdVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjkzOA==", "bodyText": "Why this change?", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424092938", "createdAt": "2020-05-12T23:36:24Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1274,6 +1274,7 @@ public void shouldThrowExceptionIfApplicationServerConfigIsNotHostPortPair() {\n \n     @Test\n     public void shouldThrowExceptionIfApplicationServerConfigPortIsNotAnInteger() {\n+        createDefaultMockTaskManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTM0OA==", "bodyText": "If we don't configure the TaskManager then we'll throw (the wrong kind of) exception during configure. Previously this test just happened to pass because we processed the user endpoint before we processed the TaskManager, so we never got to the TaskManager", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424105348", "createdAt": "2020-05-13T00:20:23Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1274,6 +1274,7 @@ public void shouldThrowExceptionIfApplicationServerConfigIsNotHostPortPair() {\n \n     @Test\n     public void shouldThrowExceptionIfApplicationServerConfigPortIsNotAnInteger() {\n+        createDefaultMockTaskManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjkzOA=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk1OTA2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozOTowM1rOGUcoaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoyNTo0M1rOGUda2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ==", "bodyText": "So far we always pass in assignmentListener.numStableAssignments() + 1 -- hence, I am wondering if we need to pass it at all?", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424093801", "createdAt": "2020-05-12T23:39:03Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -261,24 +241,24 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             streams1Alpha.setStateListener(\n                 (newState, oldState) -> stateTransitions1.add(KeyValue.pair(oldState, newState))\n             );\n+            int expectedNumStableAssignments = assignmentListener.numStableAssignments() + 1;\n             streams1Alpha.cleanUp();\n             streams1Alpha.start();\n-            waitForStateTransition(\n-                stateTransitions1,\n-                Arrays.asList(\n-                    KeyValue.pair(KafkaStreams.State.CREATED, KafkaStreams.State.REBALANCING),\n-                    KeyValue.pair(KafkaStreams.State.REBALANCING, KafkaStreams.State.RUNNING)\n-                )\n-            );\n+            assignmentListener.waitForNextStableAssignment(expectedNumStableAssignments, MAX_WAIT_TIME_MS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzE3NA==", "bodyText": "Well we need to record it before doing whatever action causes the group to rebalance. But maybe we can do something like prepareForRebalance if that seems easier?", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424103174", "createdAt": "2020-05-13T00:12:06Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -261,24 +241,24 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             streams1Alpha.setStateListener(\n                 (newState, oldState) -> stateTransitions1.add(KeyValue.pair(oldState, newState))\n             );\n+            int expectedNumStableAssignments = assignmentListener.numStableAssignments() + 1;\n             streams1Alpha.cleanUp();\n             streams1Alpha.start();\n-            waitForStateTransition(\n-                stateTransitions1,\n-                Arrays.asList(\n-                    KeyValue.pair(KafkaStreams.State.CREATED, KafkaStreams.State.REBALANCING),\n-                    KeyValue.pair(KafkaStreams.State.REBALANCING, KafkaStreams.State.RUNNING)\n-                )\n-            );\n+            assignmentListener.waitForNextStableAssignment(expectedNumStableAssignments, MAX_WAIT_TIME_MS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNjcxNQ==", "bodyText": "I see. Guess it's good as-is.", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424106715", "createdAt": "2020-05-13T00:25:43Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -261,24 +241,24 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             streams1Alpha.setStateListener(\n                 (newState, oldState) -> stateTransitions1.add(KeyValue.pair(oldState, newState))\n             );\n+            int expectedNumStableAssignments = assignmentListener.numStableAssignments() + 1;\n             streams1Alpha.cleanUp();\n             streams1Alpha.start();\n-            waitForStateTransition(\n-                stateTransitions1,\n-                Arrays.asList(\n-                    KeyValue.pair(KafkaStreams.State.CREATED, KafkaStreams.State.REBALANCING),\n-                    KeyValue.pair(KafkaStreams.State.REBALANCING, KafkaStreams.State.RUNNING)\n-                )\n-            );\n+            assignmentListener.waitForNextStableAssignment(expectedNumStableAssignments, MAX_WAIT_TIME_MS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MzgwMQ=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDk2MzczOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo0MToyNlrOGUcrLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxNDowOFrOGUdO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDUwOA==", "bodyText": "Why do we need this? If we don't inject an error, we start phase 6 in RUNNING state and it should not rebalance.", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424094508", "createdAt": "2020-05-12T23:41:26Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -466,6 +452,9 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 verifyCommitted(expectedCommittedResult);\n                 expectedUncommittedResult.addAll(expectedCommittedResult);\n             } else {\n+                waitForRunning(stateTransitions1);\n+                waitForRunning(stateTransitions2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzY3Ng==", "bodyText": "Good point", "url": "https://github.com/apache/kafka/pull/8648#discussion_r424103676", "createdAt": "2020-05-13T00:14:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -466,6 +452,9 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 verifyCommitted(expectedCommittedResult);\n                 expectedUncommittedResult.addAll(expectedCommittedResult);\n             } else {\n+                waitForRunning(stateTransitions1);\n+                waitForRunning(stateTransitions2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDUwOA=="}, "originalCommit": {"oid": "c4c3ed65adbf43cc76b7ae42169cba32d9bc59f2"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2568, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}