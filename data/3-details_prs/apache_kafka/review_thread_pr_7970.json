{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDg3MjY2", "number": 7970, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NzoxMFrODYh_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MDoxMVrODYkY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDQ5MjcyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NzoxMFrOFecOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxNTo1NVrOFefJdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2Mzk1NQ==", "bodyText": "Does this test fail without the fix?", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367463955", "createdAt": "2020-01-16T14:57:10Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "diffHunk": "@@ -248,6 +248,55 @@ class FetchRequestTest extends BaseRequestTest {\n     assertResponseErrorForEpoch(Errors.FENCED_LEADER_EPOCH, followerId, Optional.of(secondLeaderEpoch - 1))\n   }\n \n+  @Test\n+  def testEpochValidationWithinFetchSession(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMTkyNQ==", "bodyText": "Yes", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367511925", "createdAt": "2020-01-16T16:15:55Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/server/FetchRequestTest.scala", "diffHunk": "@@ -248,6 +248,55 @@ class FetchRequestTest extends BaseRequestTest {\n     assertResponseErrorForEpoch(Errors.FENCED_LEADER_EPOCH, followerId, Optional.of(secondLeaderEpoch - 1))\n   }\n \n+  @Test\n+  def testEpochValidationWithinFetchSession(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2Mzk1NQ=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg1MzAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FetchSession.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjozMTowOVrOFeft9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxODowMFrOFehT7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMTI2OA==", "bodyText": "The decision not to use TopicPartition was actually deliberate here.  TP has an extra \"hash\" field which we don't need, which would add 4 bytes of overhead per partition.  It also adds the overhead of a Java object, which is probably at least 8 bytes per partition.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367521268", "createdAt": "2020-01-16T16:31:09Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],\n                       var fetcherLogStartOffset: Long,\n                       var localLogStartOffset: Long)\n     extends ImplicitLinkedHashCollection.Element {\n \n   var cachedNext: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n   var cachedPrev: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n \n-  override def next = cachedNext\n-  override def setNext(next: Int) = this.cachedNext = next\n-  override def prev = cachedPrev\n-  override def setPrev(prev: Int) = this.cachedPrev = prev\n+  override def next: Int = cachedNext\n+  override def setNext(next: Int): Unit = this.cachedNext = next\n+  override def prev: Int = cachedPrev\n+  override def setPrev(prev: Int): Unit = this.cachedPrev = prev\n \n   def this(topic: String, partition: Int) =\n-    this(topic, partition, -1, -1, -1, -1, -1)\n+    this(new TopicPartition(topic, partition), -1, -1, -1, Optional.empty(), -1, -1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNTA0NA==", "bodyText": "Ok, I'll revert this change and add a comment.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367535044", "createdAt": "2020-01-16T16:54:40Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],\n                       var fetcherLogStartOffset: Long,\n                       var localLogStartOffset: Long)\n     extends ImplicitLinkedHashCollection.Element {\n \n   var cachedNext: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n   var cachedPrev: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n \n-  override def next = cachedNext\n-  override def setNext(next: Int) = this.cachedNext = next\n-  override def prev = cachedPrev\n-  override def setPrev(prev: Int) = this.cachedPrev = prev\n+  override def next: Int = cachedNext\n+  override def setNext(next: Int): Unit = this.cachedNext = next\n+  override def prev: Int = cachedPrev\n+  override def setPrev(prev: Int): Unit = this.cachedPrev = prev\n \n   def this(topic: String, partition: Int) =\n-    this(topic, partition, -1, -1, -1, -1, -1)\n+    this(new TopicPartition(topic, partition), -1, -1, -1, Optional.empty(), -1, -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMTI2OA=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NzM3NA==", "bodyText": "There already was a comment (which I had ignored \ud83d\ude1d ).", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367547374", "createdAt": "2020-01-16T17:18:00Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],\n                       var fetcherLogStartOffset: Long,\n                       var localLogStartOffset: Long)\n     extends ImplicitLinkedHashCollection.Element {\n \n   var cachedNext: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n   var cachedPrev: Int = ImplicitLinkedHashCollection.INVALID_INDEX\n \n-  override def next = cachedNext\n-  override def setNext(next: Int) = this.cachedNext = next\n-  override def prev = cachedPrev\n-  override def setPrev(prev: Int) = this.cachedPrev = prev\n+  override def next: Int = cachedNext\n+  override def setNext(next: Int): Unit = this.cachedNext = next\n+  override def prev: Int = cachedPrev\n+  override def setPrev(prev: Int): Unit = this.cachedPrev = prev\n \n   def this(topic: String, partition: Int) =\n-    this(topic, partition, -1, -1, -1, -1, -1)\n+    this(new TopicPartition(topic, partition), -1, -1, -1, Optional.empty(), -1, -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMTI2OA=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg4NjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/FetchSession.scala", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MDoxMVrOFegC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo1MzozMVrOFfDovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjYxOQ==", "bodyText": "It seems like rather than use None for older fetch requests, we could just initialize the leaderEpoch to the current leader epoch.  That way, we could at least detect epoch changes.  Although we'd have to figure out how to handle the error-- probably just by dropping the session.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367526619", "createdAt": "2020-01-16T16:40:11Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0OTg0NA==", "bodyText": "Can you elaborate a little bit? I think the validation only has value if it comes from the client making the request.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367549844", "createdAt": "2020-01-16T17:23:05Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjYxOQ=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjU4OA==", "bodyText": "Discussed offline. It's an interesting thought. The problem is we don't have an error that would force a follower to go through the truncation phase. We could force a retry and we could drop the session, but the follower would still be able to continue.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r367556588", "createdAt": "2020-01-16T17:37:36Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjYxOQ=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwMDI4NA==", "bodyText": "Can we file a separate JIRA for this idea?", "url": "https://github.com/apache/kafka/pull/7970#discussion_r368100284", "createdAt": "2020-01-17T19:30:05Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjYxOQ=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwOTc1OQ==", "bodyText": "Thinking about this more, I'm not sure it's worth it.  Without true leader epoch awareness in the client, we don't have a way to force the client to refresh metadata and use a different leader, which is what we would need here.  So maybe my initial idea was a bit half-baked-- sorry.", "url": "https://github.com/apache/kafka/pull/7970#discussion_r368109759", "createdAt": "2020-01-17T19:53:31Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/FetchSession.scala", "diffHunk": "@@ -71,49 +71,46 @@ object FetchSession {\n   * Note that fetcherLogStartOffset is the LSO of the follower performing the fetch, whereas\n   * localLogStartOffset is the log start offset of the partition on this broker.\n   */\n-class CachedPartition(val topic: String,\n-                      val partition: Int,\n+class CachedPartition(val topicPartition: TopicPartition,\n                       var maxBytes: Int,\n                       var fetchOffset: Long,\n                       var highWatermark: Long,\n+                      var leaderEpoch: Optional[Integer],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjYxOQ=="}, "originalCommit": {"oid": "006492904d26dac2662166cb39748999cd51b216"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4382, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}