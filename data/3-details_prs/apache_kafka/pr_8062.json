{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk2Njc2", "number": 8062, "title": "KAFKA-9498; Topic validation during the topic creation triggers unnecessary TopicChange events", "bodyText": "This PR avoids generating unnecessary TopicChange events during the topic validation. It does so by adding a registerWatch field in the GetChildrenRequest request. This allows to not register the watch when topics are queried from the topic validation logic.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-07T20:55:03Z", "url": "https://github.com/apache/kafka/pull/8062", "merged": true, "mergeCommit": {"oid": "dd22b3f01b6bab41dce4d608f405ec6c78f7759e"}, "closed": true, "closedAt": "2020-02-26T01:45:13Z", "author": {"login": "dajac"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCFuE3gH2gAyMzcyNTk2Njc2OjRlOWE5MmFkMTljZjBjNjRjYTg3M2JkZTBlMWE5MzA0NDJiYjU3ZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGiykVAH2gAyMzcyNTk2Njc2OjEyMTU2MzQzMmMzNDEzZDIxMzAwN2QzY2M0MjE3MWFlNWFmZDNjMGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/4e9a92ad19cf0c64ca873bde0e1a930442bb57e4", "committedDate": "2020-02-07T20:53:47Z", "message": "KAFKA-9498; Topic validation during the creation trigger unnecessary TopicChange events"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTMyMjM5", "url": "https://github.com/apache/kafka/pull/8062#pullrequestreview-355532239", "createdAt": "2020-02-08T05:52:55Z", "commit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNTo1Mjo1NVrOFnPV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNTo1NDozOFrOFnPWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDE1Nw==", "bodyText": "Overloads like this are generally not done in Scala since you can use default arguments. But maybe it's best to explicit here.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376690157", "createdAt": "2020-02-08T05:52:55Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MDIzNg==", "bodyText": "This seems unnecessary given where we use this a few lines above.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r376690236", "createdAt": "2020-02-08T05:54:38Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -497,45 +497,61 @@ sealed trait AsyncRequest {\n   type Response <: AsyncResponse\n   def path: String\n   def ctx: Option[Any]\n+  def registerWatch: Boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e9a92ad19cf0c64ca873bde0e1a930442bb57e4"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5496c7a4972e21eccfc3ec902afb125c1556f5fe", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/5496c7a4972e21eccfc3ec902afb125c1556f5fe", "committedDate": "2020-02-10T08:06:09Z", "message": "simplify implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjQxMTM3", "url": "https://github.com/apache/kafka/pull/8062#pullrequestreview-357641137", "createdAt": "2020-02-12T17:21:53Z", "commit": {"oid": "5496c7a4972e21eccfc3ec902afb125c1556f5fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo1M1rOFo3lJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo1M1rOFo3lJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Nzk5MA==", "bodyText": "I would remove the default since it has serious implications. It should be chosen explicitly.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r378397990", "createdAt": "2020-02-12T17:21:53Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala", "diffHunk": "@@ -528,7 +528,7 @@ case class SetAclRequest(path: String, acl: Seq[ACL], version: Int, ctx: Option[\n   type Response = SetAclResponse\n }\n \n-case class GetChildrenRequest(path: String, ctx: Option[Any] = None) extends AsyncRequest {\n+case class GetChildrenRequest(path: String, registerWatch: Boolean = true, ctx: Option[Any] = None) extends AsyncRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5496c7a4972e21eccfc3ec902afb125c1556f5fe"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/167db190cb4a33c092d8aa690b0224dd2572555b", "committedDate": "2020-02-13T09:15:56Z", "message": "refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjkzNDA1", "url": "https://github.com/apache/kafka/pull/8062#pullrequestreview-361293405", "createdAt": "2020-02-19T17:34:05Z", "commit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozNDowNVrOFrwvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODoxOToxNlrOFrySBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMTY5OQ==", "bodyText": "Do we need the // ?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381431699", "createdAt": "2020-02-19T17:34:05Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not\n    * @return sequence of topics in the cluster.\n    */\n-  def getAllTopicsInCluster: Set[String] = {\n-    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(TopicsZNode.path))\n+  def getAllTopicsInCluster(registerWatch: Boolean = false): Set[String] = {\n+    val getChildrenResponse = retryRequestUntilConnected(\n+      GetChildrenRequest(TopicsZNode.path, registerWatch))\n     getChildrenResponse.resultCode match {\n       case Code.OK => getChildrenResponse.children.toSet\n       case Code.NONODE => Set.empty\n       case _ => throw getChildrenResponse.resultException.get\n     }\n-\n   }\n \n+  /**\n+   * Gets all topics in the cluster. It does not register a watch.\n+   * @return sequence of topics in the cluster.\n+   */\n+//  def getAllTopicsInCluster(): Set[String] = getAllTopicsInCluster(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzgwNA==", "bodyText": "what => watch?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381437804", "createdAt": "2020-02-19T17:44:44Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/zk/KafkaZkClient.scala", "diffHunk": "@@ -457,18 +457,25 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo\n \n   /**\n    * Gets all topics in the cluster.\n+   * @param registerWatch indicates if a what must be registered or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDA1NQ==", "bodyText": "This means this unit test always needs to wait for 5 secs? That's probably too long.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381454055", "createdAt": "2020-02-19T18:14:17Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -421,13 +421,39 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n     val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n     val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n     assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n   }\n \n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertFalse(\"Child change notification received\",\n+      zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjU4Nw==", "bodyText": "This means this unit test always needs to wait for 5 secs? That's probably too long.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381456587", "createdAt": "2020-02-19T18:18:44Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NjkwMw==", "bodyText": "Could this method be private?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r381456903", "createdAt": "2020-02-19T18:19:16Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(5, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  def registerChildChangeHandler(count: Int): CountDownLatch = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167db190cb4a33c092d8aa690b0224dd2572555b"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/a20cc84408c7fa5a2e7aeba1cebedcf953a8952a", "committedDate": "2020-02-20T19:58:09Z", "message": "Address Jun's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjkwNDY3", "url": "https://github.com/apache/kafka/pull/8062#pullrequestreview-362290467", "createdAt": "2020-02-20T22:48:07Z", "commit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0ODowN1rOFsl3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo0ODoxN1rOFsl36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjEyMw==", "bodyText": "A unit test always taking 1 sec is still long. Could we reduce this to 100ms?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382302123", "createdAt": "2020-02-20T22:48:07Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))\n+\n+    assertTrue(zkClient.topicExists(topic1))\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterDoesNotTriggerWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and don't register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertFalse(\"Received watch notification\",\n+      latch.await(1, TimeUnit.SECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwMjE4Ng==", "bodyText": "A unit test always taking 1 sec is still long. Could we reduce this to 100ms?", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382302186", "createdAt": "2020-02-20T22:48:17Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(1, TimeUnit.SECONDS))\n+  }\n+\n+  @Test\n+  def testZNodeChildChangeHandlerForChildChangeNotTriggered(): Unit = {\n+    import scala.collection.JavaConverters._\n+    val zNodeChildChangeHandlerCountDownLatch = new CountDownLatch(1)\n+    val zNodeChildChangeHandler = new ZNodeChildChangeHandler {\n+      override def handleChildChange(): Unit = {\n+        zNodeChildChangeHandlerCountDownLatch.countDown()\n+      }\n+      override val path: String = mockPath\n+    }\n+\n+    val child1 = \"child1\"\n+    val child1Path = mockPath + \"/\" + child1\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n     zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n-    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath))\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = false))\n     assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n-    val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n     assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n-    assertTrue(\"Failed to receive child change notification\", zNodeChildChangeHandlerCountDownLatch.await(5, TimeUnit.SECONDS))\n+    assertFalse(\"Child change notification received\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20cc84408c7fa5a2e7aeba1cebedcf953a8952a"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10a31622b4890cf3ceb8d82066f08c5f10813c39", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/10a31622b4890cf3ceb8d82066f08c5f10813c39", "committedDate": "2020-02-21T08:24:57Z", "message": "Tweak timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/d372dc6547dbee59b7037c61a1b7361ecc9137f6", "committedDate": "2020-02-21T09:37:13Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzYxNzIw", "url": "https://github.com/apache/kafka/pull/8062#pullrequestreview-362761720", "createdAt": "2020-02-21T16:38:27Z", "commit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozODoyOFrOFs9M_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjozOTozMFrOFs9PBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDQxMw==", "bodyText": "In this case, normally the test will complete well below the timeout. So, we could set the timeout to be sth more generous like 5 secs to avoid flakiness.\nIn the other cases where the test always wait for the timeout, then we want to set the timeout to a much smaller value to control the testing time.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382684413", "createdAt": "2020-02-21T16:38:28Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala", "diffHunk": "@@ -194,7 +194,56 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {\n \n     zkClient.createTopicAssignment(topic2, secondAssignment)\n \n-    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster.toSet)\n+    assertEquals(Set(topic1, topic2), zkClient.getAllTopicsInCluster())\n+  }\n+\n+  @Test\n+  def testGetAllTopicsInClusterTriggersWatch(): Unit = {\n+    zkClient.createTopLevelPaths()\n+    val latch = registerChildChangeHandler(1)\n+\n+    // Listing all the topics and register the watch\n+    assertTrue(zkClient.getAllTopicsInCluster(true).isEmpty)\n+\n+    // Verifies that listing all topics without registering the watch does\n+    // not interfere with the previous registered watcher\n+    assertTrue(zkClient.getAllTopicsInCluster(false).isEmpty)\n+\n+    zkClient.createTopicAssignment(topic1, Map.empty)\n+\n+    assertTrue(\"Failed to receive watch notification\",\n+      latch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDkzMw==", "bodyText": "This is another case where we can set a more generous timeout.", "url": "https://github.com/apache/kafka/pull/8062#discussion_r382684933", "createdAt": "2020-02-21T16:39:30Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -418,14 +418,43 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n     val child1 = \"child1\"\n     val child1Path = mockPath + \"/\" + child1\n-    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    val createResponse = zooKeeperClient.handleRequest(\n+      CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create should be OK\", Code.OK, createResponse.resultCode)\n+    zooKeeperClient.registerZNodeChildChangeHandler(zNodeChildChangeHandler)\n+    val getChildrenResponse = zooKeeperClient.handleRequest(GetChildrenRequest(mockPath, registerWatch = true))\n+    assertEquals(\"Response code for getChildren should be OK\", Code.OK, getChildrenResponse.resultCode)\n+    val createResponseChild1 = zooKeeperClient.handleRequest(\n+      CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))\n+    assertEquals(\"Response code for create child1 should be OK\", Code.OK, createResponseChild1.resultCode)\n+    assertTrue(\"Failed to receive child change notification\",\n+      zNodeChildChangeHandlerCountDownLatch.await(100, TimeUnit.MILLISECONDS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d372dc6547dbee59b7037c61a1b7361ecc9137f6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "121563432c3413d213007d3cc42171ae5afd3c0c", "author": {"user": {"login": "dajac", "name": "David Jacot"}}, "url": "https://github.com/apache/kafka/commit/121563432c3413d213007d3cc42171ae5afd3c0c", "committedDate": "2020-02-21T17:01:38Z", "message": "change timeouts"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1802, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}