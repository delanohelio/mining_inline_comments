{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjkzMTI0", "number": 9639, "title": "KAFKA-10677; Complete fetches in purgatory immediately after resigning", "bodyText": "More detailed description of your change\nIf the condition of fetch is satisfied, BROKER_NOT_AVAILABLE or NOT_LEADER_OR_FOLLOWER is returned when the leader is shutting down. so we just return BROKER_NOT_AVAILABLE with a message.\nSummary of testing strategy\nA simple unit test to verify fetches in purgatory is completed after resigning.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-11-22T14:36:20Z", "url": "https://github.com/apache/kafka/pull/9639", "merged": true, "mergeCommit": {"oid": "125d5ea0fb80a82ee23fe3e354981b75db1a4756"}, "closed": true, "closedAt": "2020-12-10T17:25:05Z", "author": {"login": "dengziming"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfBbt4AH2gAyNTI1MjkzMTI0OmQ0NzY1OTlhNmE2NzRhODEyZjUwOGFhYWZmOWE1YjhjYzJkN2VlMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkmbHRgFqTU0ODY2NDM2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d476599a6a674a812f508aaaff9a5b8cc2d7ee1a", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/d476599a6a674a812f508aaaff9a5b8cc2d7ee1a", "committedDate": "2020-11-22T14:29:04Z", "message": "KAFKA-10677; Complete fetches in purgatory immediately after raft leader resigns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/d822329dae031bbb63b0e59b8ce69424020fbf6e", "committedDate": "2020-11-22T14:50:42Z", "message": "KAFKA-10677; Complete fetches in purgatory immediately after raft leader resigns"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzQyNTk5", "url": "https://github.com/apache/kafka/pull/9639#pullrequestreview-547742599", "createdAt": "2020-12-09T00:23:14Z", "commit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyMzoxNFrOIB8cIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyNDozNFrOIB8eCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwOTczMA==", "bodyText": "I wonder if we need this. Is it not good enough to verify the response was received?", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538909730", "createdAt": "2020-12-09T00:23:14Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());\n+        assertEquals(context.client.numWaitingFetch(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDIxNw==", "bodyText": "Maybe we can add a helper to RaftClientTestContext similar to assertElectedLeader and get rid of quorumState()?", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538910217", "createdAt": "2020-12-09T00:24:34Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85ab2470e7871fabcd9033dca09d24da779b7fb", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/c85ab2470e7871fabcd9033dca09d24da779b7fb", "committedDate": "2020-12-09T03:59:01Z", "message": "KAFKA-10677; Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19464f111b90aa5efc1984b6798391dec86496b3", "author": {"user": {"login": "hachikuji", "name": "Jason Gustafson"}}, "url": "https://github.com/apache/kafka/commit/19464f111b90aa5efc1984b6798391dec86496b3", "committedDate": "2020-12-09T22:23:17Z", "message": "Fix argument alignment in `RaftClientTestContext`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjY0MzY1", "url": "https://github.com/apache/kafka/pull/9639#pullrequestreview-548664365", "createdAt": "2020-12-09T22:24:32Z", "commit": {"oid": "19464f111b90aa5efc1984b6798391dec86496b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2447, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}