{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODk0NTg4", "number": 8260, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMjowMVrODmwEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNToyNTo1MVrODoF_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYwMDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMjowMVrOF0WM8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDowMDo0N1rOF1tRNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA==", "bodyText": "Hmm... we don't want to re-apply configurations that haven't changed between the new and the old set of configs.  We want to generate a map that includes only the changes (whether they are additions or removals.)", "url": "https://github.com/apache/kafka/pull/8260#discussion_r390434034", "createdAt": "2020-03-10T16:12:01Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTI2Ng==", "bodyText": "In the case of only deletions though, how would this work? For example, as in the test, if we first configured all the configs and then deleted them, my understanding was that we have to update the configs by applying all the configs in the original configs without the deleted configs.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r390475266", "createdAt": "2020-03-10T17:11:26Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MjY4NA==", "bodyText": "After thinking about it some more, I realize that the edge case that the test has is that if there are only delete operations done in a call to incrementalAlterConfigs, then updatedConfigs only returns an empty map, which then doesn't actually delete any of the configs. I've fixed this now by checking in updatedConfigs whether or not the new configs is a subset of the old configs, and if it is, simply return that as the updatedMap, if not, the old logic stands. I also wrote a new test that tests a mixture of operations (delete and set in one call). Please let me know what you think of this approach.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r390552684", "createdAt": "2020-03-10T19:16:26Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNTA1OQ==", "bodyText": "There are other cases that need to be handled here.  For example, maybe some things are deleted and some things are added.  In that case, the approach in the PR now still doesn't work, since it falls back on the original incorrect logic.\nThe fundamental problem is that the updatedMap doesn't have entries for deleted elements, but there are parts of the code that equivocate between the updatedMap, and the set of all change deltas.  Either the `updatedMap needs to represent deleted elements somehow, or we need a separate data structure that does.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391125059", "createdAt": "2020-03-11T17:04:59Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MDE1OQ==", "bodyText": "I believe the problem with the previous logic was that it wasn't handling the edge case of when an incrementalAlterConfig operation has only DELETE operations. I did write a test when it deletes some configs but changes another config (in the same incrementalAlterConfig operation) in this PR: https://github.com/apache/kafka/pull/8260/files#diff-90c82107f654d6ec91c2d22c183b78c5R1728-R1766\nThe old logic just checks if the value of the old configs is not equal to the value of the new config, add that config to the updatedMap. I believe this covers all cases except the case of only DELETE operations, which is why I added a check to see if newConfigs were a subset of currentConfigs. If this is the case we can deduce that configs have only been deleted, so we only care about applying the newConfigs for the broker configuration. By applying the new configuration, we can effectively \"delete\" the configurations by reapplying all the new configs.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391150159", "createdAt": "2020-03-11T17:41:58Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyOTYzNQ==", "bodyText": "Think about the case where some things are added and some things are removed.  In this case, your PR will fall back on the original incorrect logic.  As an example, let's say the old config is (foo -> 123, bar -> 345) and the new config is (bar -> 345, baz -> 678).  The current logic in the PR will determine that the new config is not a subset of the old, and then generate an updated configuration that is (foo -> 123, bar -> 345, baz -> 678).  Notice that foo is included even though it shouldn't be.\nThe reason why foo is included even though it shouldn't be is that needsReconfiguration uses the updatedMap to determine what needs to be reconfigured, and you never put foo in that map.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391829635", "createdAt": "2020-03-12T18:59:41Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2MDUzNQ==", "bodyText": "I just modified the test I linked above to be the exact case you described, and it passes with the correct logic in the code. The test is as follows:\n  @Test\n  def testIncrementalAlterConfigsDeleteAndSetBrokerConfigs(): Unit = {\n    client = Admin.create(createConfig())\n    val broker0Resource = new ConfigResource(ConfigResource.Type.BROKER, \"0\")\n// LeaderReplicationThrottledRateProp and FollowerReplicationThrottledRateProp are \n// foo and bar as described in your example\n    client.incrementalAlterConfigs(Map(broker0Resource ->\n      Seq(new AlterConfigOp(new ConfigEntry(DynamicConfig.Broker.LeaderReplicationThrottledRateProp, \"123\"),\n          AlterConfigOp.OpType.SET),\n        new AlterConfigOp(new ConfigEntry(DynamicConfig.Broker.FollowerReplicationThrottledRateProp, \"456\"),\n          AlterConfigOp.OpType.SET)\n      ).asJavaCollection).asJava).all().get()\n    TestUtils.waitUntilTrue(() => {\n      val broker0Configs = client.describeConfigs(Seq(broker0Resource).asJava).\n        all().get().get(broker0Resource).entries().asScala.map {\n        case entry => (entry.name, entry.value)\n      }.toMap\n      (\"123\".equals(broker0Configs.getOrElse(DynamicConfig.Broker.LeaderReplicationThrottledRateProp, \"\")) && \n\n\"456\".equals(broker0Configs.getOrElse(DynamicConfig.Broker.FollowerReplicationThrottledRateProp, \"\")))\n    }, \"Expected to see the broker properties we just set\", pause=25)\n// Now we delete LeaderReplicationThrottledRateProp and change \n// FollowerReplicationThrottledRateProp\n// We also add ReplicaAlterLogDirsIoMaxBytesPerSecondProp, which would be baz as in your \n// example\n    client.incrementalAlterConfigs(Map(broker0Resource ->\n      Seq(new AlterConfigOp(new ConfigEntry(DynamicConfig.Broker.LeaderReplicationThrottledRateProp, \"\"),\n        AlterConfigOp.OpType.DELETE),\n        new AlterConfigOp(new ConfigEntry(DynamicConfig.Broker.FollowerReplicationThrottledRateProp, \"654\"),\n          AlterConfigOp.OpType.SET),\n        new AlterConfigOp(new ConfigEntry(DynamicConfig.Broker.ReplicaAlterLogDirsIoMaxBytesPerSecondProp, \"987\"),\n          AlterConfigOp.OpType.SET)\n      ).asJavaCollection).asJava).all().get()\n    TestUtils.waitUntilTrue(() => {\n      val broker0Configs = client.describeConfigs(Seq(broker0Resource).asJava).\n        all().get().get(broker0Resource).entries().asScala.map {\n        case entry => (entry.name, entry.value)\n      }.toMap\n      (\"\".equals(broker0Configs.getOrElse(DynamicConfig.Broker.LeaderReplicationThrottledRateProp, \"\")) &&\n        \"654\".equals(broker0Configs.getOrElse(DynamicConfig.Broker.FollowerReplicationThrottledRateProp, \"\")) &&\n        \"987\".equals(broker0Configs.getOrElse(DynamicConfig.Broker.ReplicaAlterLogDirsIoMaxBytesPerSecondProp, \"\")))\n    }, \"Expected to see the broker properties we just modified\", pause=25)\n  }\nThe logic for updatedConfigs isn't incorrect, it was missing out on the edge case of if an incrementalAlterConfigs request had only delete operations - that's why the check for subset is there, as if the new config is a subset of the old configs (where we can deduce the only alterations done were DELETE operations), then only the new configs should apply so that the old configs can be deleted. The old logic in question is here:\n      newProps.asScala.filter {\n        case (k, v) => v != currentProps.get(k)\n      }\nThis logic filters the newProps on whether or not each key in newProps retrieved from currentProps has the same value as in newProps. Thus in the case you described, when the old config is foo -> 123, bar -> 345) and the new config is (bar -> 345, baz -> 678), the logic will determine that the new config is not a subset of the old config, and generate an updated configuration by iterating through the keys of the new config.\nThere are only 2 keys in the new config it goes through, bar and baz. It checks the value of bar in the old config, and finds that the value of bar in the old config is not the same as the value in the new config, therefore this key-value pair is added. Similarly, it checks the value of baz in the old config, and since there is no entry for that key, it returns null, which is also not the same as the value of baz in the new config. Therefore that key-value pair is also added. Thus the updatedMap is returned as (bar -> 345, baz -> 678), which is correct, as that is what we want applied.\nHowever if we were filtering by iterating through currentProps, then we would run into the bug you mentioned.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391860535", "createdAt": "2020-03-12T20:00:47Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -507,7 +507,7 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n+    val updatedMap = newConfig.originalsFromThisConfig.asScala", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDAzNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTE0MDU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0NTowNFrOF1yZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDowMzowNVrOF1zuAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDYyOA==", "bodyText": "This isn't quite deleted keys, right?  This is keys that are in the current map, but have a different value (or no value) in the new map.\nDeleted keys would be something like currentProps.asScala.filter(!newProps.contains(_))", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391944628", "createdAt": "2020-03-12T22:45:04Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -465,10 +465,15 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n       reconfigurable.reconfigure(newConfig)\n   }\n \n-  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[_, _]): mutable.Map[String, _] = {\n-    newProps.asScala.filter {\n+  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[String, _]):\n+  (mutable.Map[String, _], Set[String]) = {\n+    val deletedKeySet = currentProps.asScala.filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NjIwOA==", "bodyText": "Ah yes that's right, my bad. I've fixed this to reflect what deletedKeys should be.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r391966208", "createdAt": "2020-03-13T00:03:05Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -465,10 +465,15 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n       reconfigurable.reconfigure(newConfig)\n   }\n \n-  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[_, _]): mutable.Map[String, _] = {\n-    newProps.asScala.filter {\n+  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[String, _]):\n+  (mutable.Map[String, _], Set[String]) = {\n+    val deletedKeySet = currentProps.asScala.filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDYyOA=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzY3NzUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNToyMzo1OVrOF2dAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzoyMTowNVrOF2dWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjczOQ==", "bodyText": "We should have JavaDoc for this function to identify what it returns.  Also, this is a nitpick, but considering that deletedKeySet is returned as the second part of the tuple, why not put the code for calculating it second in the function?", "url": "https://github.com/apache/kafka/pull/8260#discussion_r392642739", "createdAt": "2020-03-15T05:23:59Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -469,10 +469,15 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n       reconfigurable.reconfigure(newConfig)\n   }\n \n-  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[_, _]): mutable.Map[String, _] = {\n-    newProps.asScala.filter {\n+  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[String, _]):", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0ODIxMg==", "bodyText": "Just pushed a new version that computes deletedKeySet second and has a javadoc for the function.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r392648212", "createdAt": "2020-03-15T07:21:05Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -469,10 +469,15 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n       reconfigurable.reconfigure(newConfig)\n   }\n \n-  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[_, _]): mutable.Map[String, _] = {\n-    newProps.asScala.filter {\n+  private def updatedConfigs(newProps: java.util.Map[String, _], currentProps: java.util.Map[String, _]):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjczOQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzY3ODE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNToyNTo1MVrOF2dA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwNzoyMToyNVrOF2dWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjgxNA==", "bodyText": "This works, but it looks a little nicer from a scala point of view to have val (changeMap, deletedKeySet) = updatedConfigs(...).  It's a bit of an adjustment coming from Java, I know.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r392642814", "createdAt": "2020-03-15T05:25:51Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -511,23 +516,25 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n-    if (updatedMap.nonEmpty) {\n+    val updatedConfig = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0ODIyNg==", "bodyText": "Ah okay wasn't sure if I could do that - good to know. I have just made the change and pushed.", "url": "https://github.com/apache/kafka/pull/8260#discussion_r392648226", "createdAt": "2020-03-15T07:21:25Z", "author": {"login": "skaundinya15"}, "path": "core/src/main/scala/kafka/server/DynamicBrokerConfig.scala", "diffHunk": "@@ -511,23 +516,25 @@ class DynamicBrokerConfig(private val kafkaConfig: KafkaConfig) extends Logging\n \n   private def processReconfiguration(newProps: Map[String, String], validateOnly: Boolean): (KafkaConfig, List[BrokerReconfigurable]) = {\n     val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)\n-    val updatedMap = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)\n-    if (updatedMap.nonEmpty) {\n+    val updatedConfig = updatedConfigs(newConfig.originalsFromThisConfig, currentConfig.originals)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjgxNA=="}, "originalCommit": null, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3290, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}