{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDc3OTM4", "number": 8285, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozMzozMFrODozCUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNDoyOFrODpjpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA1ODEwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozMzozMFrOF3kZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozMzozMFrOF3kZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjM0NQ==", "bodyText": "It seems like we are duplicating a lot of the logic of the code in this comment. This is likely to get stale over time. Can we make the comment more concise and refer to the non test code for more detail?", "url": "https://github.com/apache/kafka/pull/8285#discussion_r393812345", "createdAt": "2020-03-17T16:33:30Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            float expected;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio, float expected) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+                this.expected = expected;\n+            }\n+        }\n+\n+        // Method updateEstimation is to update compressionRatioForTopic according to observedRatio and currentEstimation.\n+        // If currentEstimation is smaller than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP, observedRatio)\n+        // If currentEstimation is larger than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP, observedRatio).\n+        // COMPRESSION_RATIO_DETERIORATE_STEP is 0.05f. COMPRESSION_RATIO_IMPROVING_STEP is 0.005f.\n+        // There are four cases:\n+        // 1. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) < observedRatio\n+        // 2. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) > observedRatio\n+        // 3. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) > observedRatio\n+        // 4. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) < observedRatio\n+        // In all cases, updatedCompressionRatio shouldn't smaller than observedRatio", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0153dc7837dd95c456b4bf6048df19b0f86d7291"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA2MTIwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozNDoxNlrOF3kbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozNDoxNlrOF3kbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMjg4MQ==", "bodyText": "It seems that expected is always the same as observed? If so, why do we have 3 parameters instead of 2?", "url": "https://github.com/apache/kafka/pull/8285#discussion_r393812881", "createdAt": "2020-03-17T16:34:16Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            float expected;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio, float expected) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+                this.expected = expected;\n+            }\n+        }\n+\n+        // Method updateEstimation is to update compressionRatioForTopic according to observedRatio and currentEstimation.\n+        // If currentEstimation is smaller than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP, observedRatio)\n+        // If currentEstimation is larger than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP, observedRatio).\n+        // COMPRESSION_RATIO_DETERIORATE_STEP is 0.05f. COMPRESSION_RATIO_IMPROVING_STEP is 0.005f.\n+        // There are four cases:\n+        // 1. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) < observedRatio\n+        // 2. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) > observedRatio\n+        // 3. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) > observedRatio\n+        // 4. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) < observedRatio\n+        // In all cases, updatedCompressionRatio shouldn't smaller than observedRatio\n+        EstimationsObservedRatios[] currentEstimationsObservedRatios = new EstimationsObservedRatios[] {\n+            new EstimationsObservedRatios(0.8f, 0.84f, 0.84f),\n+            new EstimationsObservedRatios(0.6f, 0.7f, 0.7f),\n+            new EstimationsObservedRatios(0.6f, 0.4f, 0.4f),\n+            new EstimationsObservedRatios(0.004f, 0.001f, 0.001f)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0153dc7837dd95c456b4bf6048df19b0f86d7291"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTA2Mzg3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozNTowMVrOF3kdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjozNTowMVrOF3kdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxMzM2OQ==", "bodyText": "If we use a List, we should be able to simplify the logic below by using an enhanced for loop.", "url": "https://github.com/apache/kafka/pull/8285#discussion_r393813369", "createdAt": "2020-03-17T16:35:01Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            float expected;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio, float expected) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+                this.expected = expected;\n+            }\n+        }\n+\n+        // Method updateEstimation is to update compressionRatioForTopic according to observedRatio and currentEstimation.\n+        // If currentEstimation is smaller than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP, observedRatio)\n+        // If currentEstimation is larger than observedRatio, update compressionRatioForTopic to\n+        // Math.max(currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP, observedRatio).\n+        // COMPRESSION_RATIO_DETERIORATE_STEP is 0.05f. COMPRESSION_RATIO_IMPROVING_STEP is 0.005f.\n+        // There are four cases:\n+        // 1. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) < observedRatio\n+        // 2. currentEstimation < observedRatio && (currentEstimation + COMPRESSION_RATIO_DETERIORATE_STEP) > observedRatio\n+        // 3. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) > observedRatio\n+        // 4. currentEstimation > observedRatio && (currentEstimation - COMPRESSION_RATIO_IMPROVING_STEP) < observedRatio\n+        // In all cases, updatedCompressionRatio shouldn't smaller than observedRatio\n+        EstimationsObservedRatios[] currentEstimationsObservedRatios = new EstimationsObservedRatios[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0153dc7837dd95c456b4bf6048df19b0f86d7291"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTAxNjIxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyMzoxOVrOF4zmag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyMzoxOVrOF4zmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwOTk5NA==", "bodyText": "Nit: please add a line before @test.", "url": "https://github.com/apache/kafka/pull/8285#discussion_r395109994", "createdAt": "2020-03-19T15:23:19Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a34d39d5b76dbc3543853e71192a885801a81d2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTAxOTUyOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyMzo1N1rOF4zohA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyMzo1N1rOF4zohA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDUzMg==", "bodyText": "Nit: this can be written more concisely by using Arrays.asList.", "url": "https://github.com/apache/kafka/pull/8285#discussion_r395110532", "createdAt": "2020-03-19T15:23:57Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+            }\n+        }\n+\n+        // If currentEstimation is smaller than observedRatio, the updatedCompressionRatio is currentEstimation plus\n+        // COMPRESSION_RATIO_DETERIORATE_STEP 0.05, otherwise currentEstimation minus COMPRESSION_RATIO_IMPROVING_STEP\n+        // 0.005. There are four cases,and updatedCompressionRatio shouldn't smaller than observedRatio in all of cases.\n+        // Refer to non test code for more details.\n+        ArrayList<EstimationsObservedRatios> estimationsObservedRatios = new ArrayList<EstimationsObservedRatios>();\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.8f, 0.84f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.7f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.4f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.004f, 0.001f));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a34d39d5b76dbc3543853e71192a885801a81d2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTAyMDU2OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNDoxMFrOF4zpJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNDoxMFrOF4zpJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDY5NA==", "bodyText": "Nit: this brace should be on the previous line.", "url": "https://github.com/apache/kafka/pull/8285#discussion_r395110694", "createdAt": "2020-03-19T15:24:10Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+            }\n+        }\n+\n+        // If currentEstimation is smaller than observedRatio, the updatedCompressionRatio is currentEstimation plus\n+        // COMPRESSION_RATIO_DETERIORATE_STEP 0.05, otherwise currentEstimation minus COMPRESSION_RATIO_IMPROVING_STEP\n+        // 0.005. There are four cases,and updatedCompressionRatio shouldn't smaller than observedRatio in all of cases.\n+        // Refer to non test code for more details.\n+        ArrayList<EstimationsObservedRatios> estimationsObservedRatios = new ArrayList<EstimationsObservedRatios>();\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.8f, 0.84f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.7f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.4f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.004f, 0.001f));\n+        float updatedCompressionRatio;\n+        for(EstimationsObservedRatios estimationsObservedRatio:estimationsObservedRatios)\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a34d39d5b76dbc3543853e71192a885801a81d2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTAyMjE4OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNDoyOFrOF4zqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToyNDoyOFrOF4zqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMDkzNA==", "bodyText": "Nit: there should be a space before and after the colon.", "url": "https://github.com/apache/kafka/pull/8285#discussion_r395110934", "createdAt": "2020-03-19T15:24:28Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/CompressionRatioEstimatorTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.record;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+\n+public class CompressionRatioEstimatorTest {\n+    @Test\n+    public void testUpdateEstimation() {\n+        String topic = \"tp\";\n+        class EstimationsObservedRatios {\n+            float currentEstimation;\n+            float observedRatio;\n+            EstimationsObservedRatios(float currentEstimation, float observedRatio) {\n+                this.currentEstimation = currentEstimation;\n+                this.observedRatio = observedRatio;\n+            }\n+        }\n+\n+        // If currentEstimation is smaller than observedRatio, the updatedCompressionRatio is currentEstimation plus\n+        // COMPRESSION_RATIO_DETERIORATE_STEP 0.05, otherwise currentEstimation minus COMPRESSION_RATIO_IMPROVING_STEP\n+        // 0.005. There are four cases,and updatedCompressionRatio shouldn't smaller than observedRatio in all of cases.\n+        // Refer to non test code for more details.\n+        ArrayList<EstimationsObservedRatios> estimationsObservedRatios = new ArrayList<EstimationsObservedRatios>();\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.8f, 0.84f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.7f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.6f, 0.4f));\n+        estimationsObservedRatios.add(new EstimationsObservedRatios(0.004f, 0.001f));\n+        float updatedCompressionRatio;\n+        for(EstimationsObservedRatios estimationsObservedRatio:estimationsObservedRatios)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a34d39d5b76dbc3543853e71192a885801a81d2"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3323, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}