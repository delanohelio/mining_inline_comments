{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTU0NjM3", "number": 8376, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0MzoxMlrODvq_Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo0NjozMFrOD-_tNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzEzOTc0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0MzoxMlrOGCO9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxOTowNlrOGCSgLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NTUxMA==", "bodyText": "This seems unused?", "url": "https://github.com/apache/kafka/pull/8376#discussion_r404995510", "createdAt": "2020-04-07T17:43:12Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -178,11 +179,13 @@ public synchronized boolean updateLastSeenEpochIfNewer(TopicPartition topicParti\n      * @param topicPartition       topic+partition to update the epoch for\n      * @param epoch                the new epoch\n      * @param epochTest            a predicate to determine if the old epoch should be replaced\n+     * @param overwriteNullEpoch   if we should allow overwriting a missing epoch\n      * @return true if the epoch was updated, false otherwise\n      */\n     private synchronized boolean updateLastSeenEpoch(TopicPartition topicPartition,\n                                                      int epoch,\n-                                                     Predicate<Integer> epochTest) {\n+                                                     Predicate<Integer> epochTest,\n+                                                     boolean overwriteNullEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a461ec53379fd32dbb7142e7791bcdb51c53262"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MzQ4NA==", "bodyText": "Yea, sorry i mistakenly left out the actual changes in this commit. Will push with the tests shortly.", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405053484", "createdAt": "2020-04-07T19:19:06Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -178,11 +179,13 @@ public synchronized boolean updateLastSeenEpochIfNewer(TopicPartition topicParti\n      * @param topicPartition       topic+partition to update the epoch for\n      * @param epoch                the new epoch\n      * @param epochTest            a predicate to determine if the old epoch should be replaced\n+     * @param overwriteNullEpoch   if we should allow overwriting a missing epoch\n      * @return true if the epoch was updated, false otherwise\n      */\n     private synchronized boolean updateLastSeenEpoch(TopicPartition topicPartition,\n                                                      int epoch,\n-                                                     Predicate<Integer> epochTest) {\n+                                                     Predicate<Integer> epochTest,\n+                                                     boolean overwriteNullEpoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NTUxMA=="}, "originalCommit": {"oid": "4a461ec53379fd32dbb7142e7791bcdb51c53262"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzE2NjQwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo1MDowNlrOGCPOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo1MDowNlrOGCPOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5OTgyNg==", "bodyText": "I think we can simplify this a little bit. The common case is that we will have an active connection and api version information available. If we are not connected, could we just go through maybeValidatePositionForCurrentLeader. as before?", "url": "https://github.com/apache/kafka/pull/8376#discussion_r404999826", "createdAt": "2020-04-07T17:50:06Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1096,9 +1096,26 @@ Node selectReadReplica(TopicPartition partition, Node leaderReplica, long curren\n     private Map<Node, FetchSessionHandler.FetchRequestData> prepareFetchRequests() {\n         Map<Node, FetchSessionHandler.Builder> fetchable = new LinkedHashMap<>();\n \n-        // Ensure the position has an up-to-date leader\n-        subscriptions.assignedPartitions().forEach(\n-            tp -> subscriptions.maybeValidatePositionForCurrentLeader(tp, metadata.currentLeader(tp)));\n+        // Ensure the position has an up-to-date leader, if the leader is set and it's ApiVersion is new enough\n+        subscriptions.assignedPartitions().forEach(tp -> {\n+            Metadata.LeaderAndEpoch leaderAndEpoch = metadata.currentLeader(tp);\n+            final boolean offsetForEpochAvailable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a461ec53379fd32dbb7142e7791bcdb51c53262"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkwNjI1OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNjoyNFrOGCWcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNjoyNFrOGCWcjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODA5Mw==", "bodyText": "I removed this since at this point the two callers have different needs for updating the epoch and adding a flag felt pretty kludgy", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405118093", "createdAt": "2020-04-07T21:16:24Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -172,29 +189,6 @@ public synchronized boolean updateLastSeenEpochIfNewer(TopicPartition topicParti\n         return Optional.ofNullable(lastSeenLeaderEpochs.get(topicPartition));\n     }\n \n-    /**\n-     * Conditionally update the leader epoch for a partition\n-     *\n-     * @param topicPartition       topic+partition to update the epoch for\n-     * @param epoch                the new epoch\n-     * @param epochTest            a predicate to determine if the old epoch should be replaced\n-     * @return true if the epoch was updated, false otherwise\n-     */\n-    private synchronized boolean updateLastSeenEpoch(TopicPartition topicPartition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48605dc90f953f89def1c055272e4696dfbd4779"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkxMjYzOnYy", "diffSide": "LEFT", "path": "clients/src/test/java/org/apache/kafka/clients/MetadataTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxODozMFrOGCWgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTo0NjoxMlrOGW9Gbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExOTEwMg==", "bodyText": "After removing the updateLastSeenEpoch private method, there wasn't much point in this test. The epoch update is covered better in other tests anyways", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405119102", "createdAt": "2020-04-07T21:18:30Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/MetadataTest.java", "diffHunk": "@@ -378,26 +382,6 @@ public void testRejectOldMetadata() {\n         }\n     }\n \n-    @Test\n-    public void testMaybeRequestUpdate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48605dc90f953f89def1c055272e4696dfbd4779"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzUyMQ==", "bodyText": "Why would removal of a private method make this test less relevant? Which test case already covers this?", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405703521", "createdAt": "2020-04-08T17:47:00Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/MetadataTest.java", "diffHunk": "@@ -378,26 +382,6 @@ public void testRejectOldMetadata() {\n         }\n     }\n \n-    @Test\n-    public void testMaybeRequestUpdate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExOTEwMg=="}, "originalCommit": {"oid": "48605dc90f953f89def1c055272e4696dfbd4779"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODMxNg==", "bodyText": "Removing the private updateLastSeenEpoch isn't really relevant actually, you're right. This test was simulating the epoch getting updated by something other than the metadata response. This is now covered by the new test cases in FetcherTest, but that's an indirect test.\nI'll revert this and update the test", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405718316", "createdAt": "2020-04-08T18:12:12Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/MetadataTest.java", "diffHunk": "@@ -378,26 +382,6 @@ public void testRejectOldMetadata() {\n         }\n     }\n \n-    @Test\n-    public void testMaybeRequestUpdate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExOTEwMg=="}, "originalCommit": {"oid": "48605dc90f953f89def1c055272e4696dfbd4779"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMjkyNw==", "bodyText": "I ended up writing a new test testUpdateLastEpoch", "url": "https://github.com/apache/kafka/pull/8376#discussion_r426722927", "createdAt": "2020-05-18T15:46:12Z", "author": {"login": "mumrah"}, "path": "clients/src/test/java/org/apache/kafka/clients/MetadataTest.java", "diffHunk": "@@ -378,26 +382,6 @@ public void testRejectOldMetadata() {\n         }\n     }\n \n-    @Test\n-    public void testMaybeRequestUpdate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExOTEwMg=="}, "originalCommit": {"oid": "48605dc90f953f89def1c055272e4696dfbd4779"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzU2NDg1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMDozM1rOGC5mbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMDozM1rOGC5mbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NDA2MA==", "bodyText": "It might be useful to mention here that this method is reserved for cases where the leader epoch is derived from some external source (such as committed offsets or fetched records). Maybe also document the returned value.", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405694060", "createdAt": "2020-04-08T17:30:33Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -156,14 +155,31 @@ public synchronized int requestUpdateForNewTopics() {\n     }\n \n     /**\n-     * Request an update for the partition metadata iff the given leader epoch is newer than the last seen leader epoch\n+     * Request an update for the partition metadata iff we encounter a leader epoch that is newer than the last seen leader epoch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzU3MzIwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMjo1OFrOGC5rvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMjo1OFrOGC5rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NTQyMw==", "bodyText": "nit: add partition to this message?", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405695423", "createdAt": "2020-04-08T17:32:58Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -156,14 +155,31 @@ public synchronized int requestUpdateForNewTopics() {\n     }\n \n     /**\n-     * Request an update for the partition metadata iff the given leader epoch is newer than the last seen leader epoch\n+     * Request an update for the partition metadata iff we encounter a leader epoch that is newer than the last seen leader epoch\n      */\n     public synchronized boolean updateLastSeenEpochIfNewer(TopicPartition topicPartition, int leaderEpoch) {\n         Objects.requireNonNull(topicPartition, \"TopicPartition cannot be null\");\n         if (leaderEpoch < 0)\n             throw new IllegalArgumentException(\"Invalid leader epoch \" + leaderEpoch + \" (must be non-negative)\");\n \n-        boolean updated = updateLastSeenEpoch(topicPartition, leaderEpoch, oldEpoch -> leaderEpoch > oldEpoch);\n+        Integer oldEpoch = lastSeenLeaderEpochs.get(topicPartition);\n+        log.trace(\"Determining if we should replace existing epoch {} with new epoch {}\", oldEpoch, leaderEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzU3NjY0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMzo1NlrOGC5t8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozMzo1NlrOGC5t8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NTk4NQ==", "bodyText": "nit: could we collapse this with else if", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405695985", "createdAt": "2020-04-08T17:33:56Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/Metadata.java", "diffHunk": "@@ -156,14 +155,31 @@ public synchronized int requestUpdateForNewTopics() {\n     }\n \n     /**\n-     * Request an update for the partition metadata iff the given leader epoch is newer than the last seen leader epoch\n+     * Request an update for the partition metadata iff we encounter a leader epoch that is newer than the last seen leader epoch\n      */\n     public synchronized boolean updateLastSeenEpochIfNewer(TopicPartition topicPartition, int leaderEpoch) {\n         Objects.requireNonNull(topicPartition, \"TopicPartition cannot be null\");\n         if (leaderEpoch < 0)\n             throw new IllegalArgumentException(\"Invalid leader epoch \" + leaderEpoch + \" (must be non-negative)\");\n \n-        boolean updated = updateLastSeenEpoch(topicPartition, leaderEpoch, oldEpoch -> leaderEpoch > oldEpoch);\n+        Integer oldEpoch = lastSeenLeaderEpochs.get(topicPartition);\n+        log.trace(\"Determining if we should replace existing epoch {} with new epoch {}\", oldEpoch, leaderEpoch);\n+\n+        final boolean updated;\n+        if (oldEpoch == null) {\n+            log.debug(\"Not replacing null epoch with new epoch {} for partition {}\", leaderEpoch, topicPartition);\n+            updated = false;\n+        } else {\n+            if (leaderEpoch > oldEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzYwNjkwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0MjoyOVrOGC6Bew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTowNjo0OFrOGXuq-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMDk4Nw==", "bodyText": "Would it make sense to push this check into maybeValidatePositionForCurrentLeader by passing through ApiVersions?  Otherwise, some of the checks here are redundant.", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405700987", "createdAt": "2020-04-08T17:42:29Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1098,8 +1098,20 @@ Node selectReadReplica(TopicPartition partition, Node leaderReplica, long curren\n         Map<Node, FetchSessionHandler.Builder> fetchable = new LinkedHashMap<>();\n \n         // Ensure the position has an up-to-date leader\n-        subscriptions.assignedPartitions().forEach(\n-            tp -> subscriptions.maybeValidatePositionForCurrentLeader(tp, metadata.currentLeader(tp)));\n+        subscriptions.assignedPartitions().forEach(tp -> {\n+            Metadata.LeaderAndEpoch leaderAndEpoch = metadata.currentLeader(tp);\n+            if (leaderAndEpoch.leader.isPresent()) {\n+                NodeApiVersions nodeApiVersions = apiVersions.get(leaderAndEpoch.leader.get().idString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTY5Ng==", "bodyText": "If we do this, do you think we should automatically call completeValidation from maybeValidatePositionForCurrentLeader (if the checks pass)", "url": "https://github.com/apache/kafka/pull/8376#discussion_r405711696", "createdAt": "2020-04-08T18:00:49Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1098,8 +1098,20 @@ Node selectReadReplica(TopicPartition partition, Node leaderReplica, long curren\n         Map<Node, FetchSessionHandler.Builder> fetchable = new LinkedHashMap<>();\n \n         // Ensure the position has an up-to-date leader\n-        subscriptions.assignedPartitions().forEach(\n-            tp -> subscriptions.maybeValidatePositionForCurrentLeader(tp, metadata.currentLeader(tp)));\n+        subscriptions.assignedPartitions().forEach(tp -> {\n+            Metadata.LeaderAndEpoch leaderAndEpoch = metadata.currentLeader(tp);\n+            if (leaderAndEpoch.leader.isPresent()) {\n+                NodeApiVersions nodeApiVersions = apiVersions.get(leaderAndEpoch.leader.get().idString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMDk4Nw=="}, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNTA5OA==", "bodyText": "Yes, that makes sense to me.", "url": "https://github.com/apache/kafka/pull/8376#discussion_r427535098", "createdAt": "2020-05-19T19:06:48Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -1098,8 +1098,20 @@ Node selectReadReplica(TopicPartition partition, Node leaderReplica, long curren\n         Map<Node, FetchSessionHandler.Builder> fetchable = new LinkedHashMap<>();\n \n         // Ensure the position has an up-to-date leader\n-        subscriptions.assignedPartitions().forEach(\n-            tp -> subscriptions.maybeValidatePositionForCurrentLeader(tp, metadata.currentLeader(tp)));\n+        subscriptions.assignedPartitions().forEach(tp -> {\n+            Metadata.LeaderAndEpoch leaderAndEpoch = metadata.currentLeader(tp);\n+            if (leaderAndEpoch.leader.isPresent()) {\n+                NodeApiVersions nodeApiVersions = apiVersions.get(leaderAndEpoch.leader.get().idString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMDk4Nw=="}, "originalCommit": {"oid": "45c20d8a53ef02b40b953d14c7f6f03e72c7fa05"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzgyMDY5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo0NjozMFrOGZb0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo0OToxNFrOGZb6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyMzM5NQ==", "bodyText": "I wonder, do we really need this call here? If the leader is not present the epoch shouldn't be present either -- right? If that's the case, then the call to maybeValidatePosition will short circuit\n        private boolean maybeValidatePosition(Metadata.LeaderAndEpoch currentLeaderAndEpoch) {\n            if (this.fetchState.equals(FetchStates.AWAIT_RESET)) {\n                return false;\n            }\n\n            if (!currentLeaderAndEpoch.leader.isPresent() && !currentLeaderAndEpoch.epoch.isPresent()) {\n                return false;\n            }\n\n            if (position != null && !position.currentLeader.equals(currentLeaderAndEpoch)) {\n                FetchPosition newPosition = new FetchPosition(position.offset, position.offsetEpoch, currentLeaderAndEpoch);\n                validatePosition(newPosition);\n                preferredReadReplica = null;\n            }\n            return this.fetchState.equals(FetchStates.AWAIT_VALIDATION);\n        }", "url": "https://github.com/apache/kafka/pull/8376#discussion_r429323395", "createdAt": "2020-05-22T15:46:30Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -422,8 +427,29 @@ public synchronized void position(TopicPartition tp, FetchPosition position) {\n         assignedState(tp).position(position);\n     }\n \n-    public synchronized boolean maybeValidatePositionForCurrentLeader(TopicPartition tp, Metadata.LeaderAndEpoch leaderAndEpoch) {\n-        return assignedState(tp).maybeValidatePosition(leaderAndEpoch);\n+    /**\n+     * Enter the offset validation state if the leader for this partition is known to support a usable version of the\n+     * OffsetsForLeaderEpoch API. If the leader node does not support the API, simply complete the offset validation.\n+     *\n+     * @param apiVersions\n+     * @param tp\n+     * @param leaderAndEpoch\n+     * @return true if we enter the offset validation state\n+     */\n+    public synchronized boolean maybeValidatePositionForCurrentLeader(ApiVersions apiVersions, TopicPartition tp,\n+                                                                      Metadata.LeaderAndEpoch leaderAndEpoch) {\n+        if (leaderAndEpoch.leader.isPresent()) {\n+            NodeApiVersions nodeApiVersions = apiVersions.get(leaderAndEpoch.leader.get().idString());\n+            if (nodeApiVersions == null || hasUsableOffsetForLeaderEpochVersion(nodeApiVersions)) {\n+                return assignedState(tp).maybeValidatePosition(leaderAndEpoch);\n+            } else {\n+                // If the broker does not support a newer version of OffsetsForLeaderEpoch, we skip validation\n+                completeValidation(tp);\n+                return false;\n+            }\n+        } else {\n+            return assignedState(tp).maybeValidatePosition(leaderAndEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa87a4bd9d37323dc1eafd83f7d23308ceaa14c7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNTA0OQ==", "bodyText": "Oh, actually looking at the javadoc for LeaderAndEpoch, I see\n\nIt is also possible that we know of the leader epoch, but not the leader when it is derived from an external source (e.g. a committed offset).\n\nAlso in Metadata, we do return a LeaderAndEpoch with the last-seen epoch, but no leader if the metadata is stale. So, I guess it makes sense to keep this call in maybeValidatePositionForCurrentLeader", "url": "https://github.com/apache/kafka/pull/8376#discussion_r429325049", "createdAt": "2020-05-22T15:49:14Z", "author": {"login": "mumrah"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -422,8 +427,29 @@ public synchronized void position(TopicPartition tp, FetchPosition position) {\n         assignedState(tp).position(position);\n     }\n \n-    public synchronized boolean maybeValidatePositionForCurrentLeader(TopicPartition tp, Metadata.LeaderAndEpoch leaderAndEpoch) {\n-        return assignedState(tp).maybeValidatePosition(leaderAndEpoch);\n+    /**\n+     * Enter the offset validation state if the leader for this partition is known to support a usable version of the\n+     * OffsetsForLeaderEpoch API. If the leader node does not support the API, simply complete the offset validation.\n+     *\n+     * @param apiVersions\n+     * @param tp\n+     * @param leaderAndEpoch\n+     * @return true if we enter the offset validation state\n+     */\n+    public synchronized boolean maybeValidatePositionForCurrentLeader(ApiVersions apiVersions, TopicPartition tp,\n+                                                                      Metadata.LeaderAndEpoch leaderAndEpoch) {\n+        if (leaderAndEpoch.leader.isPresent()) {\n+            NodeApiVersions nodeApiVersions = apiVersions.get(leaderAndEpoch.leader.get().idString());\n+            if (nodeApiVersions == null || hasUsableOffsetForLeaderEpochVersion(nodeApiVersions)) {\n+                return assignedState(tp).maybeValidatePosition(leaderAndEpoch);\n+            } else {\n+                // If the broker does not support a newer version of OffsetsForLeaderEpoch, we skip validation\n+                completeValidation(tp);\n+                return false;\n+            }\n+        } else {\n+            return assignedState(tp).maybeValidatePosition(leaderAndEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyMzM5NQ=="}, "originalCommit": {"oid": "aa87a4bd9d37323dc1eafd83f7d23308ceaa14c7"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3141, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}