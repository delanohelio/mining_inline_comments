{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzEyNTEy", "number": 8769, "title": "KAFKA-10074: Improve performance of `matchingAcls`", "bodyText": "This PR reduces allocations by using a plain old foreach in\nmatchingAcls and improves AclSeqs.find to only search the inner\ncollections that are required to find a match (instead of searching all\nof them).\nA recent change (90bbeed) in matchingAcls to remove filterKeys in\nfavor of filtering inside flatMap caused a performance regression in\ncases where there are large number of topics, prefix ACLs and\nTreeMap.from/to filtering is ineffective. In such cases, we rely on\nstring comparisons to exclude entries from the ACL cache that are not\nrelevant.\nThis issue is not present in any release yet, so we should include the\nsimple fix in the 2.6 branch.\nThe original benchmark did not show a performance difference, so I\nadjusted the benchmark to stress the relevant code more. More\nspecifically, aclCacheSnapshot.from(...).to(...) returns nearly 20000\nentries where each map value contains 1000 AclEntries. Out of the 200k\nAclEntries, only 1050 are retained due to the startsWith filtering.\nThis is the case where the implementation in master is least\nefficient when compared to the previous version and the version in this\nPR.\nThe adjusted benchmark results for testAuthorizer are 4.532ms for\nmaster, 2.903ms for the previous version and 2.877ms for this PR.\nNormalized allocation rate was 593 KB/op for master, 597 KB/op for the\nprevious version and 101 KB/s for this PR. Full results follow:\nmaster with adjusted benchmark:\nBenchmark                                                                 (aclCount)  (resourceCount)  Mode  Cnt          Score          Error   Units\nAclAuthorizerBenchmark.testAclsIterator                                           50           200000  avgt    5        680.805 \u00b1       44.318   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate                            50           200000  avgt    5        549.879 \u00b1       36.259  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm                       50           200000  avgt    5  411457042.000 \u00b1     4805.461    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space                   50           200000  avgt    5        331.110 \u00b1       95.821  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm              50           200000  avgt    5  247799480.320 \u00b1 72877192.319    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space               50           200000  avgt    5          0.891 \u00b1        3.183  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm          50           200000  avgt    5     667593.387 \u00b1  2369888.357    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count                                 50           200000  avgt    5         28.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time                                  50           200000  avgt    5       3458.000                     ms\nAclAuthorizerBenchmark.testAuthorizer                                             50           200000  avgt    5          4.532 \u00b1        0.546   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate                              50           200000  avgt    5        119.036 \u00b1       14.261  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm                         50           200000  avgt    5     593524.310 \u00b1       22.452    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space                     50           200000  avgt    5        117.091 \u00b1     1008.188  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space.norm                50           200000  avgt    5     598574.303 \u00b1  5153905.271    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Survivor_Space                 50           200000  avgt    5          0.034 \u00b1        0.291  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Survivor_Space.norm            50           200000  avgt    5        173.001 \u00b1     1489.593    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count                                   50           200000  avgt    5          1.000                 counts\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.time                                    50           200000  avgt    5         13.000                     ms\n\nmaster with filterKeys like 90bbeed and adjusted benchmark:\nBenchmark                                                                 (aclCount)  (resourceCount)  Mode  Cnt          Score          Error   Units\nAclAuthorizerBenchmark.testAclsIterator                                           50           200000  avgt    5        729.163 \u00b1       20.842   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate                            50           200000  avgt    5        513.005 \u00b1       13.966  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm                       50           200000  avgt    5  411459778.400 \u00b1     3178.045    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space                   50           200000  avgt    5        307.041 \u00b1       94.544  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm              50           200000  avgt    5  246385400.686 \u00b1 82294899.881    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space               50           200000  avgt    5          1.571 \u00b1        2.590  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm          50           200000  avgt    5    1258291.200 \u00b1  2063669.849    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count                                 50           200000  avgt    5         33.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time                                  50           200000  avgt    5       3266.000                     ms\nAclAuthorizerBenchmark.testAuthorizer                                             50           200000  avgt    5          2.903 \u00b1        0.175   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate                              50           200000  avgt    5        187.088 \u00b1       11.301  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm                         50           200000  avgt    5     597962.743 \u00b1       14.237    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space                     50           200000  avgt    5        118.602 \u00b1     1021.202  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space.norm                50           200000  avgt    5     383359.632 \u00b1  3300842.044    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count                                   50           200000  avgt    5          1.000                 counts\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.time                                    50           200000  avgt    5         14.000                     ms\n\nThis PR with adjusted benchmark:\nBenchmark                                                                 (aclCount)  (resourceCount)  Mode  Cnt          Score          Error   Units\nAclAuthorizerBenchmark.testAclsIterator                                           50           200000  avgt    5        706.774 \u00b1       32.353   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate                            50           200000  avgt    5        529.879 \u00b1       25.416  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm                       50           200000  avgt    5  411458751.497 \u00b1     4424.187    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space                   50           200000  avgt    5        310.559 \u00b1      112.310  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm              50           200000  avgt    5  241364219.611 \u00b1 97317733.967    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Old_Gen                      50           200000  avgt    5          0.690 \u00b1        5.937  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Old_Gen.norm                 50           200000  avgt    5     531278.507 \u00b1  4574468.166    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space               50           200000  avgt    5          2.550 \u00b1       17.243  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm          50           200000  avgt    5    1969325.592 \u00b1 13278191.648    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count                                 50           200000  avgt    5         32.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time                                  50           200000  avgt    5       3489.000                     ms\nAclAuthorizerBenchmark.testAuthorizer                                             50           200000  avgt    5          2.877 \u00b1        0.530   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate                              50           200000  avgt    5         31.963 \u00b1        5.912  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm                         50           200000  avgt    5     101057.225 \u00b1        9.468    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count                                   50           200000  avgt    5            \u2248 0                 counts\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-01T02:06:06Z", "url": "https://github.com/apache/kafka/pull/8769", "merged": true, "mergeCommit": {"oid": "e2e2c628b9f2368ca253cc00b99f85899afc9cc7"}, "closed": true, "closedAt": "2020-06-01T14:01:19Z", "author": {"login": "ijuma"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcm2dzjAH2gAyNDI1NzEyNTEyOmJhZTJjYTc4MjQwYTI1YjNiNDdmM2Y0NTA3NmUyMGFkNmZkYTY4M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnAqDsAH2gAyNDI1NzEyNTEyOjEwMGE2NDUxODhmY2JhODE1YTdlMTE4MGJkYzdkZTVjYjA3MGMyNTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bae2ca78240a25b3b47f3f45076e20ad6fda683c", "author": {"user": {"login": "ijuma", "name": "Ismael Juma"}}, "url": "https://github.com/apache/kafka/commit/bae2ca78240a25b3b47f3f45076e20ad6fda683c", "committedDate": "2020-06-01T02:02:38Z", "message": "KAFKA-10074: Improve performance of `matchingAcls`\n\nThis PR reduces allocations by using a plain old `foreach` in\n`matchingAcls` and improves `AclSeqs.find` to only search the inner\ncollections that are required to find a match (instead of searching all\nof them).\n\nA recent change (90bbeedf52) in `matchingAcls` to remove `filterKeys` in\nfavor of filtering inside `flatMap` caused a performance regression in\ncases where there are large number of topics, prefix ACLs and\nTreeMap.from/to filtering is ineffective. In such cases, we rely on\nstring comparisons to exclude entries from the ACL cache that are not\nrelevant.\n\nThis issue is not present in any release yet, so we should include the\nsimple fix in the 2.6 branch.\n\nThe original benchmark did not show a performance difference, so I\nadjusted the benchmark to stress the relevant code more. More\nspecifically, `aclCacheSnapshot.from(...).to(...)` returns nearly 20000\nentries where each map value contains 1000 AclEntries. Out of the 200k\nAclEntries, only 1050 are retained due to the `startsWith` filtering.\n\nThis is the case where the implementation in master is least\nefficient when compared to the previous version and the version in this\nPR.\n\nThe adjusted benchmark results for testAuthorizer are 4.532ms for\nmaster, 2.903ms for the previous version and 2.877ms for this PR.\nNormalized allocation rate was 593 KB/op for master, 597 KB/op for the\nprevious version and 101 KB/s for this PR. Full results follow:\n\nmaster with adjusted benchmark:\n(aclCount)  (resourceCount)  Mode  Cnt          Score          Error\nUnits\nAclAuthorizerBenchmark.testAclsIterator\n50           200000  avgt    5        680.805 \u00b1       44.318   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate\n50           200000  avgt    5        549.879 \u00b1       36.259  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5  411457042.000 \u00b1     4805.461    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space\n50           200000  avgt    5        331.110 \u00b1       95.821  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm\n50           200000  avgt    5  247799480.320 \u00b1 72877192.319    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space\n50           200000  avgt    5          0.891 \u00b1        3.183  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm\n50           200000  avgt    5     667593.387 \u00b1  2369888.357    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count\n50           200000  avgt    5         28.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time\n50           200000  avgt    5       3458.000                     ms\nAclAuthorizerBenchmark.testAuthorizer\n50           200000  avgt    5          4.532 \u00b1        0.546   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate\n50           200000  avgt    5        119.036 \u00b1       14.261  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5     593524.310 \u00b1       22.452    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space\n50           200000  avgt    5        117.091 \u00b1     1008.188  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space.norm\n50           200000  avgt    5     598574.303 \u00b1  5153905.271    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Survivor_Space\n50           200000  avgt    5          0.034 \u00b1        0.291  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Survivor_Space.norm\n50           200000  avgt    5        173.001 \u00b1     1489.593    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count\n50           200000  avgt    5          1.000                 counts\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.time\n\nmaster with filterKeys like 90bbeedf52 and adjusted benchmark:\nAclAuthorizerBenchmark.testAclsIterator\n50           200000  avgt    5        729.163 \u00b1       20.842   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate\n50           200000  avgt    5        513.005 \u00b1       13.966  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5  411459778.400 \u00b1     3178.045    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space\n50           200000  avgt    5        307.041 \u00b1       94.544  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm\n50           200000  avgt    5  246385400.686 \u00b1 82294899.881    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space\n50           200000  avgt    5          1.571 \u00b1        2.590  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm\n50           200000  avgt    5    1258291.200 \u00b1  2063669.849    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count\n50           200000  avgt    5         33.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time\n50           200000  avgt    5       3266.000                     ms\nAclAuthorizerBenchmark.testAuthorizer\n50           200000  avgt    5          2.903 \u00b1        0.175   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate\n50           200000  avgt    5        187.088 \u00b1       11.301  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5     597962.743 \u00b1       14.237    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space\n50           200000  avgt    5        118.602 \u00b1     1021.202  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.churn.G1_Eden_Space.norm\n50           200000  avgt    5     383359.632 \u00b1  3300842.044    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count\n50           200000  avgt    5          1.000                 counts\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.time\n50           200000  avgt    5         14.000                     ms\n\nThis PR with adjusted benchmark:\n(aclCount)  (resourceCount)  Mode  Cnt          Score          Error\nUnits\nAclAuthorizerBenchmark.testAclsIterator\n50           200000  avgt    5        706.774 \u00b1       32.353   ms/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate\n50           200000  avgt    5        529.879 \u00b1       25.416  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5  411458751.497 \u00b1     4424.187    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space\n50           200000  avgt    5        310.559 \u00b1      112.310  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Eden_Space.norm\n50           200000  avgt    5  241364219.611 \u00b1 97317733.967    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Old_Gen\n50           200000  avgt    5          0.690 \u00b1        5.937  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Old_Gen.norm\n50           200000  avgt    5     531278.507 \u00b1  4574468.166    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space\n50           200000  avgt    5          2.550 \u00b1       17.243  MB/sec\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.churn.G1_Survivor_Space.norm\n50           200000  avgt    5    1969325.592 \u00b1 13278191.648    B/op\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.count\n50           200000  avgt    5         32.000                 counts\nAclAuthorizerBenchmark.testAclsIterator:\u00b7gc.time\n50           200000  avgt    5       3489.000                     ms\nAclAuthorizerBenchmark.testAuthorizer\n50           200000  avgt    5          2.877 \u00b1        0.530   ms/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate\n50           200000  avgt    5         31.963 \u00b1        5.912  MB/sec\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.alloc.rate.norm\n50           200000  avgt    5     101057.225 \u00b1        9.468    B/op\nAclAuthorizerBenchmark.testAuthorizer:\u00b7gc.count\n50           200000  avgt    5            \u2248 0                 counts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjk4MjMy", "url": "https://github.com/apache/kafka/pull/8769#pullrequestreview-421698232", "createdAt": "2020-06-01T09:08:11Z", "commit": {"oid": "bae2ca78240a25b3b47f3f45076e20ad6fda683c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowODoxMVrOGdDyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowODoxMVrOGdDyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzg5Ng==", "bodyText": "Should it need comment to remind reader that this style is for optimization.", "url": "https://github.com/apache/kafka/pull/8769#discussion_r433123896", "createdAt": "2020-06-01T09:08:11Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/security/authorizer/AclAuthorizer.scala", "diffHunk": "@@ -63,9 +64,14 @@ object AclAuthorizer {\n     def exists: Boolean = zkVersion != ZkVersion.UnknownVersion\n   }\n \n-  class AclSeqs(classes: Seq[AclEntry]*) {\n-    def find(p: AclEntry => Boolean): Option[AclEntry] = classes.flatMap(_.find(p)).headOption\n-    def isEmpty: Boolean = !classes.exists(_.nonEmpty)\n+  class AclSeqs(seqs: Seq[AclEntry]*) {\n+    def find(p: AclEntry => Boolean): Option[AclEntry] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae2ca78240a25b3b47f3f45076e20ad6fda683c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzk5ODg1", "url": "https://github.com/apache/kafka/pull/8769#pullrequestreview-421799885", "createdAt": "2020-06-01T12:21:43Z", "commit": {"oid": "bae2ca78240a25b3b47f3f45076e20ad6fda683c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "100a645188fcba815a7e1180bdc7de5cb070c250", "author": {"user": {"login": "ijuma", "name": "Ismael Juma"}}, "url": "https://github.com/apache/kafka/commit/100a645188fcba815a7e1180bdc7de5cb070c250", "committedDate": "2020-06-01T13:55:04Z", "message": "Add clarifying comment."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 808, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}