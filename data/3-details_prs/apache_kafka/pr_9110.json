{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzA1MTQ2", "number": 9110, "title": "MINOR: Ensure a reason is logged for all segment deletion operations", "bodyText": "This PR improves the logging for segment deletion to ensure that a reason is logged for segment deletions via all code paths. It also updates the logging so we can log a reason for an entire batch of deletions instead of logging one message per segment.\nSample log output:\n[2020-08-05 11:56:35,826] INFO [Log partition=foo-0, dir=/tmp/kafka-logs] Deleting segment LogSegment(baseOffset=219030, size=1042252, lastModifiedTime=1596653795000, largestRecordTimestamp=Some(1596653795374)) due to retention time 1ms breach based on the largest record timestamp in the segment (kafka.log.Log)\n[2020-08-05 11:56:35,826] INFO [Log partition=foo-0, dir=/tmp/kafka-logs] Deleting segment LogSegment(baseOffset=220035, size=1042252, lastModifiedTime=1596653795000, largestRecordTimestamp=Some(1596653795384)) due to retention time 1ms breach based on the largest record timestamp in the segment (kafka.log.Log)\n...", "createdAt": "2020-08-01T02:21:28Z", "url": "https://github.com/apache/kafka/pull/9110", "merged": true, "mergeCommit": {"oid": "6f0ab89b9204e86cd49d44d6b9f97ee1939c50c6"}, "closed": true, "closedAt": "2020-08-07T17:59:42Z", "author": {"login": "dhruvilshah3"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6fR00gH2gAyNDYwNzA1MTQ2OjM0MzFiODQ2NTE4MzcxZTZmOTdiYzBmZmM0NDA1MzYyZWJhM2Q4MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8oRgqAFqTQ2MzUwMDI0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3431b846518371e6f97bc0ffc4405362eba3d802", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/3431b846518371e6f97bc0ffc4405362eba3d802", "committedDate": "2020-08-01T02:20:13Z", "message": "MINOR: Ensure a reason is logged for every segment deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149f6ae5355b85f13152a17b595cf8f775109dd3", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/149f6ae5355b85f13152a17b595cf8f775109dd3", "committedDate": "2020-08-01T02:23:04Z", "message": "Better names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTQ3NjE2", "url": "https://github.com/apache/kafka/pull/9110#pullrequestreview-459547616", "createdAt": "2020-08-01T03:11:25Z", "commit": {"oid": "149f6ae5355b85f13152a17b595cf8f775109dd3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxMToyNlrOG6bEZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxMToyNlrOG6bEZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDA4Nw==", "bodyText": "If we passed in the deletion reason further into the deleteSegmentFiles method, it seems we can print the reason string just once for a batch of segments being deleted. And within the reason string, we can provide the reason for deleting the batch:\nhttps://github.com/confluentinc/ce-kafka/blob/master/core/src/main/scala/kafka/log/Log.scala#L2519\nhttps://github.com/confluentinc/ce-kafka/blob/master/core/src/main/scala/kafka/log/Log.scala#L2526\nex: info(\"Deleting segments due to $reason: ${segments.mkString(\",\")}\"\nwhere $reason provides due to retention time 1200000ms breach.\nThe drawback is that sometimes we can not print segment-specific information since the error message is at a batch level. But generally it may be that segment-level deletion information could bloat our server logging, so it may be better to batch the logging instead.\nWhat are your thoughts?", "url": "https://github.com/apache/kafka/pull/9110#discussion_r463914087", "createdAt": "2020-08-01T03:11:26Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2227,14 +2210,17 @@ class Log(@volatile private var _dir: File,\n    * @param segments The log segments to schedule for deletion\n    * @param asyncDelete Whether the segment files should be deleted asynchronously\n    */\n-  private def removeAndDeleteSegments(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n+  private def removeAndDeleteSegments(segments: Iterable[LogSegment],\n+                                      asyncDelete: Boolean,\n+                                      reason: SegmentDeletionReason): Unit = {\n     if (segments.nonEmpty) {\n       lock synchronized {\n         // As most callers hold an iterator into the `segments` collection and `removeAndDeleteSegment` mutates it by\n         // removing the deleted segment, we should force materialization of the iterator here, so that results of the\n         // iteration remain valid and deterministic.\n         val toDelete = segments.toList\n         toDelete.foreach { segment =>\n+          info(s\"${reason.reasonString(this, segment)}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "149f6ae5355b85f13152a17b595cf8f775109dd3"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6660f983228be51def8064d03286c0afb6c8834a", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/6660f983228be51def8064d03286c0afb6c8834a", "committedDate": "2020-08-01T15:53:04Z", "message": "remove redundant logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d931425cb85d89ff3fe79af357856486120087a", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/6d931425cb85d89ff3fe79af357856486120087a", "committedDate": "2020-08-02T17:16:06Z", "message": "Single log message per batch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjEwNjg2", "url": "https://github.com/apache/kafka/pull/9110#pullrequestreview-459610686", "createdAt": "2020-08-02T00:05:46Z", "commit": {"oid": "6660f983228be51def8064d03286c0afb6c8834a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQwMDowNTo0NlrOG6hGKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjoxODoyOFrOG6tXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxMjg0Mg==", "bodyText": "@dhruvilshah3 Sounds good!", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464012842", "createdAt": "2020-08-02T00:05:46Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2227,14 +2210,17 @@ class Log(@volatile private var _dir: File,\n    * @param segments The log segments to schedule for deletion\n    * @param asyncDelete Whether the segment files should be deleted asynchronously\n    */\n-  private def removeAndDeleteSegments(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n+  private def removeAndDeleteSegments(segments: Iterable[LogSegment],\n+                                      asyncDelete: Boolean,\n+                                      reason: SegmentDeletionReason): Unit = {\n     if (segments.nonEmpty) {\n       lock synchronized {\n         // As most callers hold an iterator into the `segments` collection and `removeAndDeleteSegment` mutates it by\n         // removing the deleted segment, we should force materialization of the iterator here, so that results of the\n         // iteration remain valid and deterministic.\n         val toDelete = segments.toList\n         toDelete.foreach { segment =>\n+          info(s\"${reason.reasonString(this, segment)}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDA4Nw=="}, "originalCommit": {"oid": "149f6ae5355b85f13152a17b595cf8f775109dd3"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMzI4Nw==", "bodyText": "Should we keep largestTime from LHS, and, print both largestRecordTimestamp and largestTime ?", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464213287", "createdAt": "2020-08-03T06:16:34Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/LogSegment.scala", "diffHunk": "@@ -413,7 +413,7 @@ class LogSegment private[log] (val log: FileRecords,\n   override def toString: String = \"LogSegment(baseOffset=\" + baseOffset +\n     \", size=\" + size +\n     \", lastModifiedTime=\" + lastModified +\n-    \", largestTime=\" + largestTimestamp +\n+    \", largestRecordTimestamp=\" + largestRecordTimestamp +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d931425cb85d89ff3fe79af357856486120087a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMzc3Mg==", "bodyText": "nit: replace \".\" with \":\"\ns\"Current log size is ${log.size}: ${toDelete.mkString(\",\")}\"", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464213772", "createdAt": "2020-08-03T06:18:13Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2686,3 +2670,50 @@ object LogMetricNames {\n     List(NumLogSegments, LogStartOffset, LogEndOffset, Size)\n   }\n }\n+\n+sealed trait SegmentDeletionReason {\n+  def reasonString(log: Log, toDelete: Iterable[LogSegment]): String\n+}\n+\n+case object RetentionMsBreachDeletion extends SegmentDeletionReason {\n+  override def reasonString(log: Log, toDelete: Iterable[LogSegment]): String = {\n+    s\"Deleting segments due to retention time ${log.config.retentionMs}ms breach: ${toDelete.mkString(\",\")}\"\n+  }\n+}\n+\n+case object RetentionSizeBreachDeletion extends SegmentDeletionReason {\n+  override def reasonString(log: Log, toDelete: Iterable[LogSegment]): String = {\n+    s\"Deleting segments due to retention size ${log.config.retentionSize} breach. \" +\n+      s\"Current log size is ${log.size}. ${toDelete.mkString(\",\")}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d931425cb85d89ff3fe79af357856486120087a"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMzg0MA==", "bodyText": "Did you mean to use info level logging?", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464213840", "createdAt": "2020-08-03T06:18:28Z", "author": {"login": "kowshik"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2227,13 +2210,16 @@ class Log(@volatile private var _dir: File,\n    * @param segments The log segments to schedule for deletion\n    * @param asyncDelete Whether the segment files should be deleted asynchronously\n    */\n-  private def removeAndDeleteSegments(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n+  private def removeAndDeleteSegments(segments: Iterable[LogSegment],\n+                                      asyncDelete: Boolean,\n+                                      reason: SegmentDeletionReason): Unit = {\n     if (segments.nonEmpty) {\n       lock synchronized {\n         // As most callers hold an iterator into the `segments` collection and `removeAndDeleteSegment` mutates it by\n         // removing the deleted segment, we should force materialization of the iterator here, so that results of the\n         // iteration remain valid and deterministic.\n         val toDelete = segments.toList\n+        println(s\"${reason.reasonString(this, toDelete)}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d931425cb85d89ff3fe79af357856486120087a"}, "originalPosition": 171}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93268010181f510c2ea3b3397781323047ea3ec", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/d93268010181f510c2ea3b3397781323047ea3ec", "committedDate": "2020-08-03T07:20:02Z", "message": "println -> info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTk0OTA5", "url": "https://github.com/apache/kafka/pull/9110#pullrequestreview-460194909", "createdAt": "2020-08-03T17:08:26Z", "commit": {"oid": "d93268010181f510c2ea3b3397781323047ea3ec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowODoyNlrOG7Blpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxNjoyOVrOG7B2QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NTE5MA==", "bodyText": "A little annoying to need to pass through segments just to be added to each log message individually. Maybe we could do it like this instead\ninfo(s\"Deleting segments due to ${reason.reasonString(this)}: $toDelete\")", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464545190", "createdAt": "2020-08-03T17:08:26Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2227,13 +2210,16 @@ class Log(@volatile private var _dir: File,\n    * @param segments The log segments to schedule for deletion\n    * @param asyncDelete Whether the segment files should be deleted asynchronously\n    */\n-  private def removeAndDeleteSegments(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n+  private def removeAndDeleteSegments(segments: Iterable[LogSegment],\n+                                      asyncDelete: Boolean,\n+                                      reason: SegmentDeletionReason): Unit = {\n     if (segments.nonEmpty) {\n       lock synchronized {\n         // As most callers hold an iterator into the `segments` collection and `removeAndDeleteSegment` mutates it by\n         // removing the deleted segment, we should force materialization of the iterator here, so that results of the\n         // iteration remain valid and deterministic.\n         val toDelete = segments.toList\n+        info(s\"${reason.reasonString(this, toDelete)}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93268010181f510c2ea3b3397781323047ea3ec"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0Njg4Mg==", "bodyText": "nit: is it necessary to add Deletion to all of these? Maybe only LogDeletion needs it since it is referring to deletion of the log itself.", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464546882", "createdAt": "2020-08-03T17:11:37Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2686,3 +2670,50 @@ object LogMetricNames {\n     List(NumLogSegments, LogStartOffset, LogEndOffset, Size)\n   }\n }\n+\n+sealed trait SegmentDeletionReason {\n+  def reasonString(log: Log, toDelete: Iterable[LogSegment]): String\n+}\n+\n+case object RetentionMsBreachDeletion extends SegmentDeletionReason {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93268010181f510c2ea3b3397781323047ea3ec"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTQ0MA==", "bodyText": "I'm ok with the change. I think it's better to reflect the underlying fields directly and redundant information just adds noise to the logs.", "url": "https://github.com/apache/kafka/pull/9110#discussion_r464549440", "createdAt": "2020-08-03T17:16:29Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/LogSegment.scala", "diffHunk": "@@ -413,7 +413,7 @@ class LogSegment private[log] (val log: FileRecords,\n   override def toString: String = \"LogSegment(baseOffset=\" + baseOffset +\n     \", size=\" + size +\n     \", lastModifiedTime=\" + lastModified +\n-    \", largestTime=\" + largestTimestamp +\n+    \", largestRecordTimestamp=\" + largestRecordTimestamp +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMzI4Nw=="}, "originalCommit": {"oid": "6d931425cb85d89ff3fe79af357856486120087a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77dae70b9f7ffc5dcd03194a8d8ebae1c35a1905", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/77dae70b9f7ffc5dcd03194a8d8ebae1c35a1905", "committedDate": "2020-08-03T17:38:36Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3254664556a9693d50c065ffeb39c2ab77781754", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/3254664556a9693d50c065ffeb39c2ab77781754", "committedDate": "2020-08-05T18:35:38Z", "message": "Address review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjk5MjI2", "url": "https://github.com/apache/kafka/pull/9110#pullrequestreview-462699226", "createdAt": "2020-08-06T16:53:39Z", "commit": {"oid": "3254664556a9693d50c065ffeb39c2ab77781754"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1MzozOVrOG87-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1MzozOVrOG87-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDQ5Mg==", "bodyText": "Don't we need to get rid of the call to info here?", "url": "https://github.com/apache/kafka/pull/9110#discussion_r466550492", "createdAt": "2020-08-06T16:53:39Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2227,13 +2210,16 @@ class Log(@volatile private var _dir: File,\n    * @param segments The log segments to schedule for deletion\n    * @param asyncDelete Whether the segment files should be deleted asynchronously\n    */\n-  private def removeAndDeleteSegments(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n+  private def removeAndDeleteSegments(segments: Iterable[LogSegment],\n+                                      asyncDelete: Boolean,\n+                                      reason: SegmentDeletionReason): Unit = {\n     if (segments.nonEmpty) {\n       lock synchronized {\n         // As most callers hold an iterator into the `segments` collection and `removeAndDeleteSegment` mutates it by\n         // removing the deleted segment, we should force materialization of the iterator here, so that results of the\n         // iteration remain valid and deterministic.\n         val toDelete = segments.toList\n+        info(s\"${reason.logReason(this, toDelete)}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3254664556a9693d50c065ffeb39c2ab77781754"}, "originalPosition": 171}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6df3797e99ad6354c69bab545862c9590e4a9aad", "author": {"user": {"login": "dhruvilshah3", "name": "Dhruvil Shah"}}, "url": "https://github.com/apache/kafka/commit/6df3797e99ad6354c69bab545862c9590e4a9aad", "committedDate": "2020-08-06T18:18:09Z", "message": "Remove unneeded `info` call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTAwMjQw", "url": "https://github.com/apache/kafka/pull/9110#pullrequestreview-463500240", "createdAt": "2020-08-07T17:56:52Z", "commit": {"oid": "6df3797e99ad6354c69bab545862c9590e4a9aad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1033, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}