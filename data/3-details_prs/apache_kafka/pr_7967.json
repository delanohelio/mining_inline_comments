{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMjg3OTY5", "number": 7967, "title": "KAFKA-9449: Adds support for closing the producer's BufferPool.", "bodyText": "Committer Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-01-15T18:59:26Z", "url": "https://github.com/apache/kafka/pull/7967", "merged": true, "mergeCommit": {"oid": "9eface2e731ac53037bfa29b191171dae8c44d41"}, "closed": true, "closedAt": "2020-01-17T22:27:32Z", "author": {"login": "bdbyrne"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6qRdOgH2gAyMzYzMjg3OTY5OjNjOTJjNTc4NmEwYTE1NDg2MDc1NzlhODViODkyNDEyYWViOTA3MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb79rZKAFqTM0NTAyMjkxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c92c5786a0a1548607579a85b892412aeb90734", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/3c92c5786a0a1548607579a85b892412aeb90734", "committedDate": "2020-01-15T18:57:37Z", "message": "MINOR: Adds support for closing the producer's BufferPool."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk2NTAy", "url": "https://github.com/apache/kafka/pull/7967#pullrequestreview-344696502", "createdAt": "2020-01-17T16:30:52Z", "commit": {"oid": "3c92c5786a0a1548607579a85b892412aeb90734"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMDo1MlrOFe-eeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNjowN1rOFe-o7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTIxMA==", "bodyText": "nit: use assertThrows?", "url": "https://github.com/apache/kafka/pull/7967#discussion_r368025210", "createdAt": "2020-01-17T16:30:52Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java", "diffHunk": "@@ -377,4 +378,58 @@ public void run() {\n         }\n     }\n \n+    @Test\n+    public void testCloseAllocations() throws Exception {\n+        BufferPool pool = new BufferPool(10, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, maxBlockTimeMs);\n+\n+        // Close the buffer pool. This should prevent any further allocations.\n+        pool.close();\n+\n+        try {\n+            pool.allocate(1, maxBlockTimeMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c92c5786a0a1548607579a85b892412aeb90734"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzg4NA==", "bodyText": "If we used an executor with callables, we could propagate this directly to a future, which could be awaited in the test case.", "url": "https://github.com/apache/kafka/pull/7967#discussion_r368027884", "createdAt": "2020-01-17T16:36:07Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java", "diffHunk": "@@ -377,4 +378,58 @@ public void run() {\n         }\n     }\n \n+    @Test\n+    public void testCloseAllocations() throws Exception {\n+        BufferPool pool = new BufferPool(10, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, maxBlockTimeMs);\n+\n+        // Close the buffer pool. This should prevent any further allocations.\n+        pool.close();\n+\n+        try {\n+            pool.allocate(1, maxBlockTimeMs);\n+            fail(\"Should have thrown KafkaException\");\n+        } catch (KafkaException e) {\n+            // Expected.\n+        }\n+\n+        // Ensure deallocation still works.\n+        pool.deallocate(buffer);\n+    }\n+\n+    @Test\n+    public void testCloseNotifyWaiters() throws Exception {\n+        BufferPool pool = new BufferPool(10, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(10, Long.MAX_VALUE);\n+\n+        CountDownLatch waiter1 = asyncAllocateClose(pool, 10);\n+        CountDownLatch waiter2 = asyncAllocateClose(pool, 10);\n+\n+        assertEquals(\"Allocation shouldn't have happened yet, waiting on memory\", 2L, waiter1.getCount() + waiter2.getCount());\n+\n+        // Close the buffer pool. This should notify all waiters.\n+        pool.close();\n+\n+        assertTrue(\"Allocation should fail soon after close\", waiter1.await(1, TimeUnit.SECONDS) && waiter2.await(1, TimeUnit.SECONDS));\n+\n+        pool.deallocate(buffer);\n+    }\n+\n+    private CountDownLatch asyncAllocateClose(final BufferPool pool, final int size) {\n+        final CountDownLatch completed = new CountDownLatch(1);\n+        Thread thread = new Thread() {\n+            public void run() {\n+                try {\n+                    pool.allocate(size, maxBlockTimeMs);\n+                    fail(\"Unexpected allocation\");\n+                } catch (KafkaException e) {\n+                    completed.countDown();\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c92c5786a0a1548607579a85b892412aeb90734"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caed6c2ff8713f875e805ba1b947fdb37083ffb8", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/caed6c2ff8713f875e805ba1b947fdb37083ffb8", "committedDate": "2020-01-17T17:57:49Z", "message": "Address review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7f6760cc9180f207858200656c902c164954ed", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/5c7f6760cc9180f207858200656c902c164954ed", "committedDate": "2020-01-17T18:04:29Z", "message": "Simplify test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzU4MTMy", "url": "https://github.com/apache/kafka/pull/7967#pullrequestreview-344758132", "createdAt": "2020-01-17T18:21:56Z", "commit": {"oid": "5c7f6760cc9180f207858200656c902c164954ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoyMTo1NlrOFfBWQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoyMTo1NlrOFfBWQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjI1Nw==", "bodyText": "I'm a bit concerned that this timeout might be too tight for the shaky jenkins build environment. I think there's no harm increasing to 15s or so to be one the safe side.", "url": "https://github.com/apache/kafka/pull/7967#discussion_r368072257", "createdAt": "2020-01-17T18:21:56Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java", "diffHunk": "@@ -377,4 +382,48 @@ public void run() {\n         }\n     }\n \n+    @Test\n+    public void testCloseAllocations() throws Exception {\n+        BufferPool pool = new BufferPool(10, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, maxBlockTimeMs);\n+\n+        // Close the buffer pool. This should prevent any further allocations.\n+        pool.close();\n+\n+        assertThrows(KafkaException.class, () -> pool.allocate(1, maxBlockTimeMs));\n+\n+        // Ensure deallocation still works.\n+        pool.deallocate(buffer);\n+    }\n+\n+    @Test\n+    public void testCloseNotifyWaiters() throws Exception {\n+        final int numWorkers = 2;\n+\n+        BufferPool pool = new BufferPool(1, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, Long.MAX_VALUE);\n+\n+        CountDownLatch completed = new CountDownLatch(numWorkers);\n+        ExecutorService executor = Executors.newFixedThreadPool(numWorkers);\n+        Callable<Void> work = new Callable<Void>() {\n+                public Void call() throws Exception {\n+                    assertThrows(KafkaException.class, () -> pool.allocate(1, maxBlockTimeMs));\n+                    completed.countDown();\n+                    return null;\n+                }\n+            };\n+        for (int i = 0; i < numWorkers; ++i) {\n+            executor.submit(work);\n+        }\n+\n+        assertEquals(\"Allocation shouldn't have happened yet, waiting on memory\", numWorkers, completed.getCount());\n+\n+        // Close the buffer pool. This should notify all waiters.\n+        pool.close();\n+\n+        completed.await(200, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7f6760cc9180f207858200656c902c164954ed"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4c63d11596d51b9ddd8907fc23eefdb1f0588306", "committedDate": "2020-01-17T18:24:45Z", "message": "Increase timeouts."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODY1MzI4", "url": "https://github.com/apache/kafka/pull/7967#pullrequestreview-344865328", "createdAt": "2020-01-17T22:01:44Z", "commit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTQ4ODc3", "url": "https://github.com/apache/kafka/pull/7967#pullrequestreview-344948877", "createdAt": "2020-01-18T15:40:15Z", "commit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNTo0MDoxNlrOFfLKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNTo0MDoxNlrOFfLKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMzAyNw==", "bodyText": "I stepped through this test a few times.\n                public Void call() throws Exception {\n                    System.out.println(\"allocating\");\n                    assertThrows(KafkaException.class, () -> pool.allocate(1, Long.MAX_VALUE));\n                    System.out.println(\"allocated\");\n\nBufferPool is already closed by the time work#call is executed:\nclosing\nallocating\nallocating\nallocated\nallocated\n\nSo the test doesn't exercise line 150 in BufferPool.", "url": "https://github.com/apache/kafka/pull/7967#discussion_r368233027", "createdAt": "2020-01-18T15:40:16Z", "author": {"login": "tedyu"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java", "diffHunk": "@@ -377,4 +382,48 @@ public void run() {\n         }\n     }\n \n+    @Test\n+    public void testCloseAllocations() throws Exception {\n+        BufferPool pool = new BufferPool(10, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, maxBlockTimeMs);\n+\n+        // Close the buffer pool. This should prevent any further allocations.\n+        pool.close();\n+\n+        assertThrows(KafkaException.class, () -> pool.allocate(1, maxBlockTimeMs));\n+\n+        // Ensure deallocation still works.\n+        pool.deallocate(buffer);\n+    }\n+\n+    @Test\n+    public void testCloseNotifyWaiters() throws Exception {\n+        final int numWorkers = 2;\n+\n+        BufferPool pool = new BufferPool(1, 1, metrics, Time.SYSTEM, metricGroup);\n+        ByteBuffer buffer = pool.allocate(1, Long.MAX_VALUE);\n+\n+        CountDownLatch completed = new CountDownLatch(numWorkers);\n+        ExecutorService executor = Executors.newFixedThreadPool(numWorkers);\n+        Callable<Void> work = new Callable<Void>() {\n+                public Void call() throws Exception {\n+                    assertThrows(KafkaException.class, () -> pool.allocate(1, Long.MAX_VALUE));\n+                    completed.countDown();\n+                    return null;\n+                }\n+            };\n+        for (int i = 0; i < numWorkers; ++i) {\n+            executor.submit(work);\n+        }\n+\n+        assertEquals(\"Allocation shouldn't have happened yet, waiting on memory\", numWorkers, completed.getCount());\n+\n+        // Close the buffer pool. This should notify all waiters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDIyOTEx", "url": "https://github.com/apache/kafka/pull/7967#pullrequestreview-345022911", "createdAt": "2020-01-19T20:08:01Z", "commit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMDowODowMlrOFfQX4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMDowODowMlrOFfQX4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxODQzMg==", "bodyText": "@bdbyrne @hachikuji Currently on Producer.send our javadoc mentioned \"If a Kafka related error occurs that does not belong to the public API exceptions.\" for KafkaException and most callers default it to fatal. However if we consider the pattern where thread A blocked on send#bufferPool, and then thread B calls producer.close which would cause thread A to be unblocked by throwing a KafkaException to be a recommended pattern, should we use a different exception than KafkaException to differentiate it with other other fatal exceptions?\nI'm thinking for Streams if we eventually want to move to this pattern, i.e. the stream thread blocked on producer.send while the closing thread calls producer.close then stream thread would throw KafkaException that in turn would be interpreted as fatal and then the stream thread tries to shutdown itself as \"shutdown unclean\" whereas here since we are indeed closing we should just proceed with \"shutdown clean\" --- of course this is still doable with some extra check but I'm wondering if such complexity would be universal for any callers like Streams.", "url": "https://github.com/apache/kafka/pull/7967#discussion_r368318432", "createdAt": "2020-01-19T20:08:02Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java", "diffHunk": "@@ -138,6 +147,9 @@ public ByteBuffer allocate(int size, long maxTimeToBlockMs) throws InterruptedEx\n                             recordWaitTime(timeNs);\n                         }\n \n+                        if (this.closed)\n+                            throw new KafkaException(\"Producer closed while allocating memory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c63d11596d51b9ddd8907fc23eefdb1f0588306"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2019, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}