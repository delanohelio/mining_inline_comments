{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDc0NDAy", "number": 8530, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo1OToxOVrOD0vlUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoyMTowMFrOD035pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjMyMTQ1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo1OToxOVrOGJ1DzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo1OToxOVrOGJ1DzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1OTY5Mw==", "bodyText": "the following app id should be changed as well. (I can't add comment to the line for this PR)\n    private void setCommittedOffset(final String topic, final int limitDelta) {\n        final Properties consumerConfig = new Properties();\t        final Properties consumerConfig = new Properties();\n        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\t        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG, APPID);\t        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG, APPID);", "url": "https://github.com/apache/kafka/pull/8530#discussion_r412959693", "createdAt": "2020-04-22T12:59:19Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "diffHunk": "@@ -119,7 +124,7 @@ public void shouldRestoreStateFromSourceTopic() throws Exception {\n         final AtomicInteger numReceived = new AtomicInteger(0);\n         final StreamsBuilder builder = new StreamsBuilder();\n \n-        final Properties props = props(APPID);\n+        final Properties props = props(APPID + name.getMethodName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863ea2921cdada0102b627f6b5b9811be6f77378"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjMzMjY3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMTo0MVrOGJ1Krw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowMTo0MVrOGJ1Krw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MTQ1NQ==", "bodyText": "the changelog topics are created by BeforeClass so it seems we need to add Before to create changelog for different method name.", "url": "https://github.com/apache/kafka/pull/8530#discussion_r412961455", "createdAt": "2020-04-22T13:01:41Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "diffHunk": "@@ -107,6 +109,9 @@ private Properties props(final String applicationId) {\n         return streamsConfiguration;\n     }\n \n+    @Rule\n+    public TestName name = new TestName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863ea2921cdada0102b627f6b5b9811be6f77378"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY3NDA5OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinPseudoTopicTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxODozOFrOGKB1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxODozOFrOGKB1UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2ODk3Ng==", "bodyText": "I moved this test into the non-integration unit tests.", "url": "https://github.com/apache/kafka/pull/8530#discussion_r413168976", "createdAt": "2020-04-22T17:18:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinPseudoTopicTest.java", "diffHunk": "@@ -1,138 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.integration;\n-\n-import org.apache.kafka.common.serialization.Serdes;\n-import org.apache.kafka.common.serialization.StringSerializer;\n-import org.apache.kafka.streams.StreamsBuilder;\n-import org.apache.kafka.streams.StreamsConfig;\n-import org.apache.kafka.streams.TestInputTopic;\n-import org.apache.kafka.streams.Topology;\n-import org.apache.kafka.streams.TopologyTestDriver;\n-import org.apache.kafka.streams.kstream.Consumed;\n-import org.apache.kafka.streams.kstream.KTable;\n-import org.apache.kafka.streams.kstream.Materialized;\n-import org.apache.kafka.streams.utils.UniqueTopicSerdeScope;\n-import org.apache.kafka.test.TestUtils;\n-import org.junit.Test;\n-\n-import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Properties;\n-\n-import static org.apache.kafka.common.utils.Utils.mkEntry;\n-import static org.apache.kafka.common.utils.Utils.mkMap;\n-import static org.apache.kafka.common.utils.Utils.mkProperties;\n-import static org.apache.kafka.common.utils.Utils.mkSet;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-\n-\n-public class KTableKTableForeignKeyJoinPseudoTopicTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcd1db9aff9c52e0aca5dd788000f748ab477c9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY3NzU2OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxOToyNlrOGKB3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoxOToyNlrOGKB3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2OTUyOQ==", "bodyText": "I merged this test with another as a non-integration test, since it uses TTD and does not really creates a cluster :)", "url": "https://github.com/apache/kafka/pull/8530#discussion_r413169529", "createdAt": "2020-04-22T17:19:26Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.kafka.streams.integration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcd1db9aff9c52e0aca5dd788000f748ab477c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY4MTQ5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableSourceTopicRestartIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoyMDoyM1rOGKB59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoyMDoyM1rOGKB59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3MDE2NA==", "bodyText": "For this test, we did need to reuse the created topics and hence I reduced the session / heartbeat timeout so that their rebalance timeout could be much smaller.", "url": "https://github.com/apache/kafka/pull/8530#discussion_r413170164", "createdAt": "2020-04-22T17:20:23Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableSourceTopicRestartIntegrationTest.java", "diffHunk": "@@ -80,14 +83,18 @@ public static void setUpBeforeAllTests() throws Exception {\n         STREAMS_CONFIG.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n         STREAMS_CONFIG.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 5);\n         STREAMS_CONFIG.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG, WallclockTimestampExtractor.class);\n+        STREAMS_CONFIG.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcd1db9aff9c52e0aca5dd788000f748ab477c9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzY4NDIyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoyMTowMFrOGKB7mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzoyMTowMFrOGKB7mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3MDU4NA==", "bodyText": "Similar here, for this test I reduced the session / heartbeat timeout so that their rebalance timeout could be much smaller. I think it is simpler than changing a bunch of changelogs / source / sink / and app ids.", "url": "https://github.com/apache/kafka/pull/8530#discussion_r413170584", "createdAt": "2020-04-22T17:21:00Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java", "diffHunk": "@@ -104,6 +104,8 @@ private Properties props(final String applicationId) {\n         streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n         streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n         streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bcd1db9aff9c52e0aca5dd788000f748ab477c9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}