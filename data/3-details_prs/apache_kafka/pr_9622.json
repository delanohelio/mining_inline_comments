{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODk2Nzky", "number": 9622, "title": "KAFKA-10547; add topicId in MetadataResp", "bodyText": "More detailed description of your change\n\nBump the version of MetadataReq and MetadataResp, add topicId in MetadataResp\nAlter describeTopic in AdminClientTopicService and ZookeeperTopicService\nTopicMetadata is cached in MetadataCache, so we need to add topicId to MetadataCache\nMetadataCache is updated by UpdateMetadataRequest, bump the version of UpdateMetadataReq and UpdateMetadataResp, add topicId in UpdateMetadataReq.\n\nSummary of testing strategy (including rationale)\nTested locally, here is some result:\nNew server + new Client :\nkafka-topics.sh --describe --zookeeper localhost:2181 --topic old-version-topic\nTopic: old-version-topic\tTopicId: wRPl6VAlQeyE77bDxEESzg\tPartitionCount: 2\tReplicationFactor: 1\tConfigs:\nTopic: old-version-topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\nTopic: old-version-topic\tPartition: 1\tLeader: 0\tReplicas: 0\tIsr: 0\nkafka-topics.sh --describe --bootstrap-server localhost:9092 --topic old-version-topic\nTopic: old-version-topic\tTopicId: wRPl6VAlQeyE77bDxEESzg\tPartitionCount: 2\tReplicationFactor: 1\tConfigs: segment.bytes=1073741824\nTopic: old-version-topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\nTopic: old-version-topic\tPartition: 1\tLeader: 0\tReplicas: 0\tIsr: 0\nOld Server + new Client\nkafka-topics.sh --describe --bootstrap-server localhost:9092 --topic old-version-topic\nTopic: old-version-topic\tPartitionCount: 2\tReplicationFactor: 1\tConfigs: segment.bytes=1073741824\nTopic: old-version-topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\nTopic: old-version-topic\tPartition: 1\tLeader: 0\tReplicas: 0\tIsr: 0\nNew server + old client\nkafka-topics.sh --describe --bootstrap-server localhost:9092 --topic old-version-topic\nTopic: old-version-topic\tPartitionCount: 2\tReplicationFactor: 1\tConfigs: segment.bytes=1073741824\nTopic: old-version-topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\nTopic: old-version-topic\tPartition: 1\tLeader: 0\tReplicas: 0\tIsr: 0\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-11-19T11:59:14Z", "url": "https://github.com/apache/kafka/pull/9622", "merged": true, "mergeCommit": {"oid": "5c921afa4a593478f7d1c49e5db9d787558d0d5e"}, "closed": true, "closedAt": "2020-12-18T21:30:53Z", "author": {"login": "dengziming"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeWU1hABqjQwMjA2Mjk1ODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdncVGMAH2gAyNTIzODk2NzkyOmI0OGFhN2Y0Zjk0OWIyMzRmNDg2YjQ2MmY5MGRkZWFhZGNhNTU2YmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDgzNTQz", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-536083543", "createdAt": "2020-11-22T17:26:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxNzoyNjozN1rOH345-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxNzoyNjozN1rOH345-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw==", "bodyText": "nit: Uuid topicId", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528366073", "createdAt": "2020-11-22T17:26:37Z", "author": {"login": "jolshan"}, "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -327,6 +350,18 @@ public Node controller() {\n         return controller;\n     }\n \n+    public Collection<Uuid> topicIds() {\n+        return topicIds.values();\n+    }\n+\n+    public Uuid getTopicId(String topic) {\n+        return topicIds.getOrDefault(topic, Uuid.ZERO_UUID);\n+    }\n+\n+    public String getTopicName(Uuid topiId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTEyOTk3", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-536112997", "createdAt": "2020-11-22T20:42:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo0Mjo1MlrOH37EoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo0Mjo1MlrOH37EoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMTU2OA==", "bodyText": "Do we want to print an empty string for TopicId? Would it make sense to include the Zero Uuid or not print a topic ID label at all?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528401568", "createdAt": "2020-11-22T20:42:52Z", "author": {"login": "jolshan"}, "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -113,6 +114,7 @@ object TopicCommand extends Logging {\n     def printDescription(): Unit = {\n       val configsAsString = config.entries.asScala.filter(!_.isDefault).map { ce => s\"${ce.name}=${ce.value}\" }.mkString(\",\")\n       print(s\"Topic: $topic\")\n+      print(s\"\\tTopicId: ${if(topicId == Uuid.ZERO_UUID) \"\" else topicId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTE0OTk3", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-536114997", "createdAt": "2020-11-22T21:06:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMTowNjoxM1rOH37Pmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMTowNjoxM1rOH37Pmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwNDM3OA==", "bodyText": "nit: this should be KAFKA_2_8_IV0, or KAFKA_2_8_IV1 if #9601 merges", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528404378", "createdAt": "2020-11-22T21:06:13Z", "author": {"login": "jolshan"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -424,6 +426,13 @@ case object KAFKA_2_7_IV2 extends DefaultApiVersion {\n   val id: Int = 30\n }\n \n+case object KAFKA_2_7_IV3 extends DefaultApiVersion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTE3MjQ1", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-536117245", "createdAt": "2020-11-22T21:31:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMTozMTowM1rOH37cKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMTozMTowM1rOH37cKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwNzU5NA==", "bodyText": "As discussed in the mailing thread and the KIP writeup, this should be \"nullable\" rather than ignorable", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528407594", "createdAt": "2020-11-22T21:31:03Z", "author": {"login": "jolshan"}, "path": "clients/src/main/resources/common/message/MetadataRequest.json", "diffHunk": "@@ -31,9 +31,11 @@\n     // Starting in version 8, authorized operations can be requested for cluster and topic resource.\n     //\n     // Version 9 is the first flexible version.\n+    // Version 10 add topicId\n     { \"name\": \"Topics\", \"type\": \"[]MetadataRequestTopic\", \"versions\": \"0+\", \"nullableVersions\": \"1+\",\n       \"about\": \"The topics to fetch metadata for.\", \"fields\": [\n-      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n+      { \"name\": \"TopicId\", \"type\": \"uuid\", \"versions\": \"10+\", \"ignorable\": true, \"about\": \"The topic id.\" },\n+      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\", \"ignorable\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "54a2236a79cd1dc8c7208d253ca128cf6571953f", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/54a2236a79cd1dc8c7208d253ca128cf6571953f", "committedDate": "2020-11-23T13:53:29Z", "message": "KAFKA-10547; add topicId in metadata resp"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa82c714fa1f588478c3f162a16a2ba3d989a563", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/aa82c714fa1f588478c3f162a16a2ba3d989a563", "committedDate": "2020-11-27T14:29:25Z", "message": "KAFKA-10547; Add topicNames in MetadataCache"}, "afterCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/6b3a0e6ebedc36413445a18df902694298e3de7a", "committedDate": "2020-12-11T05:17:41Z", "message": "KAFKA-10547; Add topicNames in MetadataCache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjk0NDMx", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-552294431", "createdAt": "2020-12-15T10:11:00Z", "commit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoxMTowMVrOIGDEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDoyODozM1rOIGD1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMjcxMQ==", "bodyText": "Was this file checked in by mistake? Can we remove?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543212711", "createdAt": "2020-12-15T10:11:01Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/log4j.properties", "diffHunk": "@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# Unspecified loggers and loggers with additivity=true output to server.log and stdout\n+# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\n+log4j.rootLogger=INFO, stdout, kafkaAppender", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzkwOA==", "bodyText": "It seems unnecessary to include both topicIds and topicNames in the constructor of this case class. We can add val topicNames inside this class that creates the second map from the first.", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543213908", "createdAt": "2020-12-15T10:12:41Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -372,6 +380,8 @@ class MetadataCache(brokerId: Int) extends Logging {\n   }\n \n   case class MetadataSnapshot(partitionStates: mutable.AnyRefMap[String, mutable.LongMap[UpdateMetadataPartitionState]],\n+                              topicIds: Map[String, Uuid],\n+                              topicNames: Map[Uuid, String],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNTExOQ==", "bodyText": "Couldn't we just do this instead of the for loop:\n topicIds.foreach { case (name, id) => context.addTopicId(name, id) }", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543215119", "createdAt": "2020-12-15T10:14:35Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala", "diffHunk": "@@ -873,6 +883,11 @@ class ControllerChannelManagerTest {\n       context.updatePartitionFullReplicaAssignment(partition, ReplicaAssignment(replicas))\n       leaderIndex += 1\n     }\n+\n+    context.allTopics ++= topics\n+    for (topic <- topics if topicIds.contains(topic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNDA5Mw==", "bodyText": "Do we have a use case that requires both maps to be stored in Cluster for fast lookups? Or would it be sufficient to store it one-way and look up the single map for the other way?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543224093", "createdAt": "2020-12-15T10:26:57Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -46,6 +46,8 @@\n     private final Map<Integer, List<PartitionInfo>> partitionsByNode;\n     private final Map<Integer, Node> nodesById;\n     private final ClusterResource clusterResource;\n+    private final Map<String, Uuid> topicIds;\n+    private final Map<Uuid, String> topicNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNDcxNg==", "bodyText": "Also same question as for Cluster: Do we have a use case that requires both maps to be stored for fast lookups? Or would it be sufficient to store it one-way and look up the single map for the other way?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543224716", "createdAt": "2020-12-15T10:27:51Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -372,6 +380,8 @@ class MetadataCache(brokerId: Int) extends Logging {\n   }\n \n   case class MetadataSnapshot(partitionStates: mutable.AnyRefMap[String, mutable.LongMap[UpdateMetadataPartitionState]],\n+                              topicIds: Map[String, Uuid],\n+                              topicNames: Map[Uuid, String],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzkwOA=="}, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw==", "bodyText": "We seem to be adding to the topicIds/topicNames map, but never removing anything.", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543225157", "createdAt": "2020-12-15T10:28:33Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -314,9 +315,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n           error(s\"Listeners are not identical across brokers: $aliveNodes\")\n       }\n \n+      val newTopicIds = updateMetadataRequest.topicStates().asScala\n+        .map(topicState => (topicState.topicName(), topicState.topicId()))\n+        .filter(_._2 != Uuid.ZERO_UUID).toMap\n+      val topicIds = mutable.Map.empty[String, Uuid]\n+      topicIds.addAll(metadataSnapshot.topicIds)\n+      topicIds.addAll(newTopicIds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTg1MjA2", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-552585206", "createdAt": "2020-12-15T15:34:58Z", "commit": {"oid": "dac9503351a8bc952e108ce69a819a79a64bfbec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTozNDo1OFrOIGRkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoyMzoxMVrOIG-Jqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MDI1Mg==", "bodyText": "nit: toString() unnecessary", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543450252", "createdAt": "2020-12-15T15:34:58Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/MetadataResponse.java", "diffHunk": "@@ -320,6 +333,7 @@ public String toString() {\n             return \"TopicMetadata{\" +\n                 \"error=\" + error +\n                 \", topic='\" + topic + '\\'' +\n+                \", topicId='\" + topicId.toString() + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac9503351a8bc952e108ce69a819a79a64bfbec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MDAzMA==", "bodyText": "we probably also want to assert that the topic id is not null here (even though we currently never return null).", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544150030", "createdAt": "2020-12-16T09:38:46Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala", "diffHunk": "@@ -223,6 +224,31 @@ class MetadataRequestTest extends BaseRequestTest {\n     assertEquals(\"V1 Response should have 2 (all) topics\", 2, metadataResponseV1.topicMetadata.size())\n   }\n \n+  @Test\n+  def testTopicIdsInResponse(): Unit = {\n+    val replicaAssignment = Map(0 -> Seq(1, 2, 0), 1 -> Seq(2, 0, 1))\n+    val topic1 = \"topic1\"\n+    val topic2 = \"topic2\"\n+    createTopic(topic1, replicaAssignment)\n+    createTopic(topic2, replicaAssignment)\n+\n+    // if version < 9, return ZERO_UUID in MetadataResponse\n+    val resp1 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true, 0, 9).build(), Some(controllerSocketServer))\n+    assertEquals(2, resp1.topicMetadata.size)\n+    resp1.topicMetadata.forEach { topicMetadata =>\n+      assertEquals(Errors.NONE, topicMetadata.error)\n+      assertEquals(Uuid.ZERO_UUID, topicMetadata.topicId())\n+    }\n+\n+    // from version 10, UUID will be included in MetadataResponse\n+    val resp2 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true, 10, 10).build(), Some(notControllerSocketServer))\n+    assertEquals(2, resp2.topicMetadata.size)\n+    resp2.topicMetadata.forEach { topicMetadata =>\n+      assertEquals(Errors.NONE, topicMetadata.error)\n+      assertNotEquals(Uuid.ZERO_UUID, topicMetadata.topicId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac9503351a8bc952e108ce69a819a79a64bfbec"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4MDY1MQ==", "bodyText": "When a topic is deleted, brokers process UpdateMetadataRequest and remove deleted topics from their cache. We track deletion state in ZooKeeper and as you mentioned, you can get this information by directly going to ZK in kafka-topics.sh. But we don't retain that information in every broker. I would remove topic id in the code segment just below this when the partition state is removed from the MetadataCache since we cannot clearly have a map that keeps growing in brokers. Is there a reason why we would want to retain topic id in every broker even after the topic has been deleted? We can't get this information through existing metadata request from brokers anyway. I guess in future, we can add additional metadata to track deleted topic ids if we wanted to, but for now it seems better to delete topic ids from MetadataCache when we delete the partition from the cache.  What do you think?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544180651", "createdAt": "2020-12-16T10:23:11Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -314,9 +315,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n           error(s\"Listeners are not identical across brokers: $aliveNodes\")\n       }\n \n+      val newTopicIds = updateMetadataRequest.topicStates().asScala\n+        .map(topicState => (topicState.topicName(), topicState.topicId()))\n+        .filter(_._2 != Uuid.ZERO_UUID).toMap\n+      val topicIds = mutable.Map.empty[String, Uuid]\n+      topicIds.addAll(metadataSnapshot.topicIds)\n+      topicIds.addAll(newTopicIds)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}, "originalCommit": {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dac9503351a8bc952e108ce69a819a79a64bfbec", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/dac9503351a8bc952e108ce69a819a79a64bfbec", "committedDate": "2020-12-15T12:05:21Z", "message": "resolve comments"}, "afterCommit": {"oid": "5e599379a465658b52656aa67f46f3caa9e7bf12", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/5e599379a465658b52656aa67f46f3caa9e7bf12", "committedDate": "2020-12-17T03:06:41Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e599379a465658b52656aa67f46f3caa9e7bf12", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/5e599379a465658b52656aa67f46f3caa9e7bf12", "committedDate": "2020-12-17T03:06:41Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}, "afterCommit": {"oid": "680308e856ee95a1895e16ec4f07efcf089ba42b", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/680308e856ee95a1895e16ec4f07efcf089ba42b", "committedDate": "2020-12-17T03:17:27Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDY3OTcw", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-554467970", "createdAt": "2020-12-17T10:26:39Z", "commit": {"oid": "680308e856ee95a1895e16ec4f07efcf089ba42b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoyNjozOVrOIHuyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoyNjozOVrOIHuyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ==", "bodyText": "nit: We don't use get prefix in other methods. Since this is part of the public API, can we change this to topicId(String topic) before merging?", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544977551", "createdAt": "2020-12-17T10:26:39Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -327,6 +346,14 @@ public Node controller() {\n         return controller;\n     }\n \n+    public Collection<Uuid> topicIds() {\n+        return topicIds.values();\n+    }\n+\n+    public Uuid getTopicId(String topic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680308e856ee95a1895e16ec4f07efcf089ba42b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587c0e0652e8386126460ab4c4508349e24afa22", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/587c0e0652e8386126460ab4c4508349e24afa22", "committedDate": "2020-12-17T10:41:15Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "680308e856ee95a1895e16ec4f07efcf089ba42b", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/680308e856ee95a1895e16ec4f07efcf089ba42b", "committedDate": "2020-12-17T03:17:27Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}, "afterCommit": {"oid": "587c0e0652e8386126460ab4c4508349e24afa22", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/587c0e0652e8386126460ab4c4508349e24afa22", "committedDate": "2020-12-17T10:41:15Z", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDg3NTkw", "url": "https://github.com/apache/kafka/pull/9622#pullrequestreview-554487590", "createdAt": "2020-12-17T10:51:37Z", "commit": {"oid": "587c0e0652e8386126460ab4c4508349e24afa22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48aa7f4f949b234f486b462f90ddeaadca556ba", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/b48aa7f4f949b234f486b462f90ddeaadca556ba", "committedDate": "2020-12-18T18:20:40Z", "message": "Fix Scala 2.12 build"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2830, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}