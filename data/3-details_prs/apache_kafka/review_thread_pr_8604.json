{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTg1ODM0", "number": 8604, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNToyNzoyNlrOEH0Wbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0NDo1NVrOEKZo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjMzMTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNToyNzoyNlrOGnZyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1OToxMFrOGn6baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ==", "bodyText": "do we risk NPE here?", "url": "https://github.com/apache/kafka/pull/8604#discussion_r443970065", "createdAt": "2020-06-23T05:27:26Z", "author": {"login": "kkonstantine"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,16 +561,15 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = configs.get(\"topic\").toString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f4470ea41d1e02a753e01bae6c4ddd8619a560"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDU2OQ==", "bodyText": "can we add a test?", "url": "https://github.com/apache/kafka/pull/8604#discussion_r443970569", "createdAt": "2020-06-23T05:28:49Z", "author": {"login": "kkonstantine"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,16 +561,15 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = configs.get(\"topic\").toString", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ=="}, "originalCommit": {"oid": "60f4470ea41d1e02a753e01bae6c4ddd8619a560"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDkzOQ==", "bodyText": "Good catch! I've pushed a change to address it", "url": "https://github.com/apache/kafka/pull/8604#discussion_r444504939", "createdAt": "2020-06-23T20:59:10Z", "author": {"login": "mimaison"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,16 +561,15 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = configs.get(\"topic\").toString", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ=="}, "originalCommit": {"oid": "60f4470ea41d1e02a753e01bae6c4ddd8619a560"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzM5NzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0MDowN1rOGrad2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1NToyOFrOGsuB_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ==", "bodyText": "asScala.asJava looks a bit weird here. I understand that you are using this trick to convert the Properties to a Scala Map and then a Java Map. How about loading formatterArgs as a Map directly?", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448175579", "createdAt": "2020-07-01T07:40:07Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -309,7 +308,7 @@ object ConsoleConsumer extends Logging {\n       formatterArgs.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer)\n     }\n \n-    formatter.init(formatterArgs)\n+    formatter.configure(formatterArgs.asScala.asJava)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTU5Ng==", "bodyText": "This trick is used in a couple of other places. I took a quick look at switching to a Map directly but it's used in a bunch of places so ended up being a larger change. I'd prefer keeping this PR focussed on the new formatter and maybe do some refactoring in a follow up PR. WDYT?", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448979596", "createdAt": "2020-07-02T12:54:25Z", "author": {"login": "mimaison"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -309,7 +308,7 @@ object ConsoleConsumer extends Logging {\n       formatterArgs.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer)\n     }\n \n-    formatter.init(formatterArgs)\n+    formatter.configure(formatterArgs.asScala.asJava)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ=="}, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0NDcwMw==", "bodyText": "I was thinking about adding a second utility method CommandLineUtils.parseKeyValueArgsAsMap and keep the existing one unchanged. We can do this as a follow up for sure.", "url": "https://github.com/apache/kafka/pull/8604#discussion_r449544703", "createdAt": "2020-07-03T11:55:28Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -309,7 +308,7 @@ object ConsoleConsumer extends Logging {\n       formatterArgs.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer)\n     }\n \n-    formatter.init(formatterArgs)\n+    formatter.configure(formatterArgs.asScala.asJava)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ=="}, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQwNTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0Mjo0MlrOGrajPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTo1ODoyOVrOGsuGsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw==", "bodyText": "Can't we use configs directly instead of building props?", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448176957", "createdAt": "2020-07-01T07:42:42Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -466,7 +465,9 @@ class DefaultMessageFormatter extends MessageFormatter {\n   var keyDeserializer: Option[Deserializer[_]] = None\n   var valueDeserializer: Option[Deserializer[_]] = None\n \n-  override def init(props: Properties): Unit = {\n+  override def configure(configs: Map[String, _]): Unit = {\n+    val props = new java.util.Properties()\n+    configs.asScala.foreach { case (key, value) => props.put(key, value.toString) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDU5MQ==", "bodyText": "I initially was doing this but this forces casting the value to strings everywhere due to the type of the Map here [String, _]. Keeping the Properties object turned out way simpler.", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448980591", "createdAt": "2020-07-02T12:56:00Z", "author": {"login": "mimaison"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -466,7 +465,9 @@ class DefaultMessageFormatter extends MessageFormatter {\n   var keyDeserializer: Option[Deserializer[_]] = None\n   var valueDeserializer: Option[Deserializer[_]] = None\n \n-  override def init(props: Properties): Unit = {\n+  override def configure(configs: Map[String, _]): Unit = {\n+    val props = new java.util.Properties()\n+    configs.asScala.foreach { case (key, value) => props.put(key, value.toString) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw=="}, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0NTkwNQ==", "bodyText": "That's a good point. Probably, the correct way to do this in the future would be to define a ConfigDef to parse the Map. We can tackle this as part of #8909.", "url": "https://github.com/apache/kafka/pull/8604#discussion_r449545905", "createdAt": "2020-07-03T11:58:29Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -466,7 +465,9 @@ class DefaultMessageFormatter extends MessageFormatter {\n   var keyDeserializer: Option[Deserializer[_]] = None\n   var valueDeserializer: Option[Deserializer[_]] = None\n \n-  override def init(props: Properties): Unit = {\n+  override def configure(configs: Map[String, _]): Unit = {\n+    val props = new java.util.Properties()\n+    configs.asScala.foreach { case (key, value) => props.put(key, value.toString) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw=="}, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQxMjk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo0NDo1NVrOGranrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo1OTowM1rOGsLt6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3ODA5NQ==", "bodyText": "nit: We could use containsKey.", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448178095", "createdAt": "2020-07-01T07:44:55Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,20 +561,18 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n-    if (topicStr != null)\n-      topicStr = topicStr + \":\"\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = if (configs.get(\"topic\") != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MjUwNQ==", "bodyText": "\ud83d\udc4d done", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448982505", "createdAt": "2020-07-02T12:59:03Z", "author": {"login": "mimaison"}, "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,20 +561,18 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n-    if (topicStr != null)\n-      topicStr = topicStr + \":\"\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = if (configs.get(\"topic\") != null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3ODA5NQ=="}, "originalCommit": {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2867, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}