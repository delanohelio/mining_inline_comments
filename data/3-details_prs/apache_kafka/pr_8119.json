{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTkzMDgy", "number": 8119, "title": "KAFKA-9558: Fixing retry logic for getListOffsetsCalls", "bodyText": "https://issues.apache.org/jira/browse/KAFKA-9558\nThis PR is to fix the retry logic for getListOffsetsCalls. Previously, if there were partitions with errors, it would only pass in the current call object to retry after a metadata refresh. However this is incorrect as if there's a leader change, the call object never gets updated with the correct leader node to query. This PR fixes this by making another call to getListOffsetsCalls with only the error topic partitions as the next calls to be made after the metadata refresh. In addition there is an additional test to test the scenario where a leader change occurs.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-14T22:10:45Z", "url": "https://github.com/apache/kafka/pull/8119", "merged": true, "mergeCommit": {"oid": "eb7dfef2452bf7975cde4e44baa0c9b9ea193401"}, "closed": true, "closedAt": "2020-02-19T17:11:45Z", "author": {"login": "skaundinya15"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEW-cpAH2gAyMzc1NTkzMDgyOmUzMzUzZGI5MjFjMjEzYjllMzgzZDJjODdlZjI1NzA3ZDcwMGUwODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF5tT3gFqTM2MTI3NTIxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3353db921c213b9e383d2c87ef25707d700e081", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/e3353db921c213b9e383d2c87ef25707d700e081", "committedDate": "2020-02-14T22:07:54Z", "message": "KAFKA-9558: Fixing retry logic for getListOffsetsCalls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a52e1bf412570603250f74b9ab3b37d19e13b89", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/7a52e1bf412570603250f74b9ab3b37d19e13b89", "committedDate": "2020-02-15T07:00:35Z", "message": "renaming tests for clarity and putting correct error in mock client response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzYwNzc2", "url": "https://github.com/apache/kafka/pull/8119#pullrequestreview-359360776", "createdAt": "2020-02-15T18:58:16Z", "commit": {"oid": "7a52e1bf412570603250f74b9ab3b37d19e13b89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODo1ODoxNlrOFqQKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODo1ODoxNlrOFqQKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0OTM2MA==", "bodyText": "Hmm.. I don't think it's safe to modify topicPartitionOffsets. This is shared by multiple calls following the initial getListOffsetsCalls. It would be better to create a new map. It might bee worth having a test case which uses two partitions with different leaders to verify this case is handled correctly.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r379849360", "createdAt": "2020-02-15T18:58:16Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3803,11 +3803,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n                     }\n \n                     if (!partitionsWithErrors.isEmpty()) {\n-                        partitionsToQuery.keySet().retainAll(partitionsWithErrors);\n                         Set<String> retryTopics = partitionsWithErrors.stream().map(tp -> tp.topic()).collect(Collectors.toSet());\n+                        topicPartitionOffsets.keySet().retainAll(partitionsWithErrors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a52e1bf412570603250f74b9ab3b37d19e13b89"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161854296db3897472e766b965880a1b3ce2407f", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/161854296db3897472e766b965880a1b3ce2407f", "committedDate": "2020-02-16T08:46:04Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTA3Njc5", "url": "https://github.com/apache/kafka/pull/8119#pullrequestreview-360507679", "createdAt": "2020-02-18T16:56:00Z", "commit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1NjowMVrOFrKc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1ODoyMFrOFrKidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNDMzOA==", "bodyText": "There's a bit of redundancy between this and partitionsWithErrors. Do we need both?", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380804338", "createdAt": "2020-02-18T16:56:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNTc0OA==", "bodyText": "This code reads a bit awkwardly because we only have the check for the first branch. It seems like we are trying to handle the case that the broker has sent us responses for partitions that we did not ask for. Perhaps that should be a fatal error and we can call completeExceptionally?", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380805748", "createdAt": "2020-02-18T16:58:20Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n+                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/01b4eedd6af9e61fa1e6488076855209c06c09c3", "committedDate": "2020-02-18T20:57:26Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjc3Njk0", "url": "https://github.com/apache/kafka/pull/8119#pullrequestreview-360677694", "createdAt": "2020-02-18T21:15:29Z", "commit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNTozMFrOFrSraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNTozMFrOFrSraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTExMw==", "bodyText": "Would this be any clearer?\nOffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\nif (offsetRequestSpec == null) {\n  future.completeExceptionally(error.exception());\n} else if (shouldRefreshMetadata(error) {\n  retryTopicPartitionOffsets.put(tp, offsetRequestSpec);\n} else {\n...\nAlso, in the case of that we got back an unexpected partition, I think we can raise a new KafkaException and provide a clear message indicating what happened.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380939113", "createdAt": "2020-02-18T21:15:30Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3794,8 +3793,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {\n-                            partitionsWithErrors.add(tp);\n+                        if (topicPartitionOffsets.get(tp) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/58a8d11bdfa0b95d00a497d305c0b3826088275a", "committedDate": "2020-02-18T21:35:51Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjk0MjMz", "url": "https://github.com/apache/kafka/pull/8119#pullrequestreview-360694233", "createdAt": "2020-02-18T21:42:41Z", "commit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0Mjo0MVrOFrTfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0Mzo0MFrOFrTg7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjMyMQ==", "bodyText": "The slf4j {} placeholders will not work here since we are constructing the message ourselves.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380952321", "createdAt": "2020-02-18T21:42:41Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjgxMg==", "bodyText": "nit: conventionally, we put the else on the same level as the previous branch\n} else if (...", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380952812", "createdAt": "2020-02-18T21:43:40Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));\n+                        }\n+                        else if (MetadataOperationContext.shouldRefreshMetadata(error)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a8095c5b325c60512bfca4cb392e9ff222863e", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/d5a8095c5b325c60512bfca4cb392e9ff222863e", "committedDate": "2020-02-18T21:55:23Z", "message": "addressing PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f831fdac8787238674e96282ca77437c95c90a84", "author": {"user": {"login": "skaundinya15", "name": "Sanjana Kaundinya"}}, "url": "https://github.com/apache/kafka/commit/f831fdac8787238674e96282ca77437c95c90a84", "committedDate": "2020-02-19T00:42:40Z", "message": "fixing checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjc1MjE1", "url": "https://github.com/apache/kafka/pull/8119#pullrequestreview-361275215", "createdAt": "2020-02-19T17:09:47Z", "commit": {"oid": "f831fdac8787238674e96282ca77437c95c90a84"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1445, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}