{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTI4MjE2", "number": 8279, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoxOFrODsx4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowMzo0NlrODsyn8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgxMjUxOnYy", "diffSide": "RIGHT", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoxOFrOF90pjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowNjo0NVrOF917ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDA2MQ==", "bodyText": "nit: remove blank line", "url": "https://github.com/apache/kafka/pull/8279#discussion_r400370061", "createdAt": "2020-03-30T17:33:18Z", "author": {"login": "kkonstantine"}, "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "diffHunk": "@@ -297,4 +297,32 @@ public void testOptionalAndDefaultValuesNested() {\n         Schema transformedOptFieldSchema = SchemaBuilder.string().optional().defaultValue(\"child_default\").build();\n         assertEquals(transformedOptFieldSchema, transformedSchema.field(\"opt_field\").schema());\n     }\n+\n+    @Test\n+    public void tombstoneEventWithoutSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94942a8e18e04b52ccf9d5a698c4d0145cb89a8f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5MTA5OA==", "bodyText": "Leaving some blank lines to highlight semantic grouping between code blocks is reasonable, but 1 empty line per line of code might be excessive.", "url": "https://github.com/apache/kafka/pull/8279#discussion_r400391098", "createdAt": "2020-03-30T18:06:45Z", "author": {"login": "kkonstantine"}, "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "diffHunk": "@@ -297,4 +297,32 @@ public void testOptionalAndDefaultValuesNested() {\n         Schema transformedOptFieldSchema = SchemaBuilder.string().optional().defaultValue(\"child_default\").build();\n         assertEquals(transformedOptFieldSchema, transformedSchema.field(\"opt_field\").schema());\n     }\n+\n+    @Test\n+    public void tombstoneEventWithoutSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDA2MQ=="}, "originalCommit": {"oid": "94942a8e18e04b52ccf9d5a698c4d0145cb89a8f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgxMzA2OnYy", "diffSide": "RIGHT", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoyM1rOF90p2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoyM1rOF90p2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDEzNg==", "bodyText": "nit: remove blank line", "url": "https://github.com/apache/kafka/pull/8279#discussion_r400370136", "createdAt": "2020-03-30T17:33:23Z", "author": {"login": "kkonstantine"}, "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "diffHunk": "@@ -297,4 +297,32 @@ public void testOptionalAndDefaultValuesNested() {\n         Schema transformedOptFieldSchema = SchemaBuilder.string().optional().defaultValue(\"child_default\").build();\n         assertEquals(transformedOptFieldSchema, transformedSchema.field(\"opt_field\").schema());\n     }\n+\n+    @Test\n+    public void tombstoneEventWithoutSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, null);\n+\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n+\n+        assertEquals(null, transformedRecord.value());\n+        assertEquals(null, transformedRecord.valueSchema());\n+    }\n+\n+    @Test\n+    public void tombstoneEventWithSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94942a8e18e04b52ccf9d5a698c4d0145cb89a8f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjgxMzQ4OnYy", "diffSide": "RIGHT", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoyN1rOF90qDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozMzoyN1rOF90qDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDE5MQ==", "bodyText": "nit: remove blank line", "url": "https://github.com/apache/kafka/pull/8279#discussion_r400370191", "createdAt": "2020-03-30T17:33:27Z", "author": {"login": "kkonstantine"}, "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "diffHunk": "@@ -297,4 +297,32 @@ public void testOptionalAndDefaultValuesNested() {\n         Schema transformedOptFieldSchema = SchemaBuilder.string().optional().defaultValue(\"child_default\").build();\n         assertEquals(transformedOptFieldSchema, transformedSchema.field(\"opt_field\").schema());\n     }\n+\n+    @Test\n+    public void tombstoneEventWithoutSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, null);\n+\n+        final SourceRecord transformedRecord = xformValue.apply(record);\n+\n+        assertEquals(null, transformedRecord.value());\n+        assertEquals(null, transformedRecord.valueSchema());\n+    }\n+\n+    @Test\n+    public void tombstoneEventWithSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final Schema simpleStructSchema = SchemaBuilder.struct().name(\"name\").version(1).doc(\"doc\").field(\"magic\", Schema.OPTIONAL_INT64_SCHEMA).build();\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            simpleStructSchema, null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94942a8e18e04b52ccf9d5a698c4d0145cb89a8f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjkzMzYzOnYy", "diffSide": "RIGHT", "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowMzo0N1rOF910qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODowMzo0N1rOF910qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4OTI5MQ==", "bodyText": "in AK tab space is equal to 4 single spaces. We need two tabs here. Checkstyle might not complain because it's tests. But line 139 has an example of correct indentation.", "url": "https://github.com/apache/kafka/pull/8279#discussion_r400389291", "createdAt": "2020-03-30T18:03:47Z", "author": {"login": "kkonstantine"}, "path": "connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java", "diffHunk": "@@ -297,4 +297,32 @@ public void testOptionalAndDefaultValuesNested() {\n         Schema transformedOptFieldSchema = SchemaBuilder.string().optional().defaultValue(\"child_default\").build();\n         assertEquals(transformedOptFieldSchema, transformedSchema.field(\"opt_field\").schema());\n     }\n+\n+    @Test\n+    public void tombstoneEventWithoutSchemaShouldPassThrough() {\n+        xformValue.configure(Collections.<String, String>emptyMap());\n+\n+        final SourceRecord record = new SourceRecord(null, null, \"test\", 0,\n+            null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94942a8e18e04b52ccf9d5a698c4d0145cb89a8f"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3317, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}