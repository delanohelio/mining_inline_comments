{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODM2Mjc2", "number": 9338, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxNTo0N1rOEtNMpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMDoyOVrOEtOcMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODM3NjA3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxNTo0N1rOHg3rMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozNjozMVrOHk11Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyODY1OQ==", "bodyText": "This can be private", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504228659", "createdAt": "2020-10-13T20:15:47Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -103,6 +104,13 @@ public void init(final StateStoreContext context,\n         // register and possibly restore the state from the logs\n         maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n     }\n+    protected Serde<K> prepareKeySerde(final Serde<K> keySerde, final Serde<?> contextKeySerde, final Serde<?> contextValueSerde) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MjczNQ==", "bodyText": "Removed the method completely and added a static import as you proposed in your PR.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r508392735", "createdAt": "2020-10-20T10:36:31Z", "author": {"login": "thake"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -103,6 +104,13 @@ public void init(final StateStoreContext context,\n         // register and possibly restore the state from the logs\n         maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n     }\n+    protected Serde<K> prepareKeySerde(final Serde<K> keySerde, final Serde<?> contextKeySerde, final Serde<?> contextValueSerde) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyODY1OQ=="}, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODM3ODA3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxNjoyMVrOHg3scA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozNTo0OFrOHk1zfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyODk3Ng==", "bodyText": "This (and the StateStoreContext one) can be private now. Thanks for factoring out the smallest chunk that needs to be overridden in the subclass. I wish I'd thought of it.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504228976", "createdAt": "2020-10-13T20:16:21Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -112,28 +120,26 @@ private void registerMetrics() {\n     }\n \n     @Deprecated\n-    @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MjMxNw==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/9338#discussion_r508392317", "createdAt": "2020-10-20T10:35:48Z", "author": {"login": "thake"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -112,28 +120,26 @@ private void registerMetrics() {\n     }\n \n     @Deprecated\n-    @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyODk3Ng=="}, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODUxNjc0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDistributedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDo1MTowNlrOHg5BZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDozNjowMFrOHk1z6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MDcyNA==", "bodyText": "It would be good to also clean up the local disk and the topics after the test: org.apache.kafka.streams.integration.utils.IntegrationTestUtils#quietlyCleanStateAfterTest\nNot always necessary, but it keeps tests from becoming flaky after seemingly unrelated changes.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504250724", "createdAt": "2020-10-13T20:51:06Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDistributedTest.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster;\n+import org.apache.kafka.streams.integration.utils.IntegrationTestUtils;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.ValueJoiner;\n+import org.apache.kafka.streams.processor.ThreadMetadata;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.apache.kafka.streams.integration.utils.IntegrationTestUtils.safeUniqueTestName;\n+import static org.junit.Assert.assertEquals;\n+\n+@Category({IntegrationTest.class})\n+public class KTableKTableForeignKeyJoinDistributedTest {\n+    private static final int NUM_BROKERS = 1;\n+    private static final String LEFT_TABLE = \"left_table\";\n+    private static final String RIGHT_TABLE = \"right_table\";\n+    private static final String OUTPUT = \"output-topic\";\n+    @ClassRule\n+    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(NUM_BROKERS);\n+    private static final Properties CONSUMER_CONFIG = new Properties();\n+\n+    @Rule\n+    public TestName testName = new TestName();\n+\n+\n+    private static final String INPUT_TOPIC = \"input-topic\";\n+\n+    private KafkaStreams client1;\n+    private KafkaStreams client2;\n+\n+    private volatile boolean client1IsOk = false;\n+    private volatile boolean client2IsOk = false;\n+\n+    @BeforeClass\n+    public static void createTopics() throws InterruptedException {\n+        CLUSTER.createTopic(INPUT_TOPIC, 2, 1);\n+    }\n+\n+    @Before\n+    public void setupTopics() throws InterruptedException {\n+        CLUSTER.createTopic(LEFT_TABLE, 1, 1);\n+        CLUSTER.createTopic(RIGHT_TABLE, 1, 1);\n+        CLUSTER.createTopic(OUTPUT, 11, 1);\n+\n+        //Fill test tables\n+        final Properties producerConfig = new Properties();\n+        producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n+        producerConfig.put(ProducerConfig.ACKS_CONFIG, \"all\");\n+        producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        final List<KeyValue<String, String>> leftTable = Arrays.asList(\n+                new KeyValue<>(\"lhsValue1\", \"lhsValue1|rhs1\"),\n+                new KeyValue<>(\"lhsValue2\", \"lhsValue2|rhs2\"),\n+                new KeyValue<>(\"lhsValue3\", \"lhsValue3|rhs3\"),\n+                new KeyValue<>(\"lhsValue4\", \"lhsValue4|rhs4\")\n+        );\n+        final List<KeyValue<String, String>> rightTable = Arrays.asList(\n+                new KeyValue<>(\"rhs1\", \"rhsValue1\"),\n+                new KeyValue<>(\"rhs2\", \"rhsValue2\"),\n+                new KeyValue<>(\"rhs3\", \"rhsValue3\")\n+        );\n+\n+        IntegrationTestUtils.produceKeyValuesSynchronously(LEFT_TABLE, leftTable, producerConfig, CLUSTER.time);\n+        IntegrationTestUtils.produceKeyValuesSynchronously(RIGHT_TABLE, rightTable, producerConfig, CLUSTER.time);\n+\n+        CONSUMER_CONFIG.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n+        CONSUMER_CONFIG.put(ConsumerConfig.GROUP_ID_CONFIG, \"ktable-ktable-distributed-consumer\");\n+        CONSUMER_CONFIG.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        CONSUMER_CONFIG.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+    }\n+\n+    @After\n+    public void after() {\n+        client1.close();\n+        client2.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MjQyNQ==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/9338#discussion_r508392425", "createdAt": "2020-10-20T10:36:00Z", "author": {"login": "thake"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDistributedTest.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster;\n+import org.apache.kafka.streams.integration.utils.IntegrationTestUtils;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.ValueJoiner;\n+import org.apache.kafka.streams.processor.ThreadMetadata;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.apache.kafka.test.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.apache.kafka.streams.integration.utils.IntegrationTestUtils.safeUniqueTestName;\n+import static org.junit.Assert.assertEquals;\n+\n+@Category({IntegrationTest.class})\n+public class KTableKTableForeignKeyJoinDistributedTest {\n+    private static final int NUM_BROKERS = 1;\n+    private static final String LEFT_TABLE = \"left_table\";\n+    private static final String RIGHT_TABLE = \"right_table\";\n+    private static final String OUTPUT = \"output-topic\";\n+    @ClassRule\n+    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(NUM_BROKERS);\n+    private static final Properties CONSUMER_CONFIG = new Properties();\n+\n+    @Rule\n+    public TestName testName = new TestName();\n+\n+\n+    private static final String INPUT_TOPIC = \"input-topic\";\n+\n+    private KafkaStreams client1;\n+    private KafkaStreams client2;\n+\n+    private volatile boolean client1IsOk = false;\n+    private volatile boolean client2IsOk = false;\n+\n+    @BeforeClass\n+    public static void createTopics() throws InterruptedException {\n+        CLUSTER.createTopic(INPUT_TOPIC, 2, 1);\n+    }\n+\n+    @Before\n+    public void setupTopics() throws InterruptedException {\n+        CLUSTER.createTopic(LEFT_TABLE, 1, 1);\n+        CLUSTER.createTopic(RIGHT_TABLE, 1, 1);\n+        CLUSTER.createTopic(OUTPUT, 11, 1);\n+\n+        //Fill test tables\n+        final Properties producerConfig = new Properties();\n+        producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n+        producerConfig.put(ProducerConfig.ACKS_CONFIG, \"all\");\n+        producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        final List<KeyValue<String, String>> leftTable = Arrays.asList(\n+                new KeyValue<>(\"lhsValue1\", \"lhsValue1|rhs1\"),\n+                new KeyValue<>(\"lhsValue2\", \"lhsValue2|rhs2\"),\n+                new KeyValue<>(\"lhsValue3\", \"lhsValue3|rhs3\"),\n+                new KeyValue<>(\"lhsValue4\", \"lhsValue4|rhs4\")\n+        );\n+        final List<KeyValue<String, String>> rightTable = Arrays.asList(\n+                new KeyValue<>(\"rhs1\", \"rhsValue1\"),\n+                new KeyValue<>(\"rhs2\", \"rhsValue2\"),\n+                new KeyValue<>(\"rhs3\", \"rhsValue3\")\n+        );\n+\n+        IntegrationTestUtils.produceKeyValuesSynchronously(LEFT_TABLE, leftTable, producerConfig, CLUSTER.time);\n+        IntegrationTestUtils.produceKeyValuesSynchronously(RIGHT_TABLE, rightTable, producerConfig, CLUSTER.time);\n+\n+        CONSUMER_CONFIG.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n+        CONSUMER_CONFIG.put(ConsumerConfig.GROUP_ID_CONFIG, \"ktable-ktable-distributed-consumer\");\n+        CONSUMER_CONFIG.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+        CONSUMER_CONFIG.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n+    }\n+\n+    @After\n+    public void after() {\n+        client1.close();\n+        client2.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MDcyNA=="}, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODU3OTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableSerde.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxMDoyOVrOHg5ngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1Nzo1MlrOHhi4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDQ4Mg==", "bodyText": "This is probably hypocritical, since I've surely written similar code, but this makes me a little uncomfortable, since there's no guarantee that serializer() would return the same reference every time it's called. I'd propose to make this an abstract class instead so we can make this guarantee ourselves.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504260482", "createdAt": "2020-10-13T21:10:29Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableSerde.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+public interface WrappingNullableSerde<T, InnerK, InnerV> extends Serde<T> {\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    default void setIfUnset(final Serde<InnerK> defaultKeySerde, final Serde<InnerV> defaultValueSerde) {\n+        final Serializer<T> serializer = this.serializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDkyMA==", "bodyText": "Ah, my bad. I didn't get the API right. I propably have worked too much on kotlin code with a lot of immutables :) The abstract class is a good idea to circumvent this problem. I'll check the PR and comment on it directly.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504924920", "createdAt": "2020-10-14T19:36:50Z", "author": {"login": "thake"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableSerde.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+public interface WrappingNullableSerde<T, InnerK, InnerV> extends Serde<T> {\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    default void setIfUnset(final Serde<InnerK> defaultKeySerde, final Serde<InnerV> defaultValueSerde) {\n+        final Serializer<T> serializer = this.serializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDQ4Mg=="}, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzNjUyNA==", "bodyText": "No worries, I think this is actually always ok in practice, since I think that all the Wrapping implementations keep their de/serializers in fields anyway. But then again, we've had so many bugs with serdes that I feel a bit twitchy about just ignoring the potential for a future bug that I happened to notice here.", "url": "https://github.com/apache/kafka/pull/9338#discussion_r504936524", "createdAt": "2020-10-14T19:57:52Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableSerde.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+public interface WrappingNullableSerde<T, InnerK, InnerV> extends Serde<T> {\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    default void setIfUnset(final Serde<InnerK> defaultKeySerde, final Serde<InnerV> defaultValueSerde) {\n+        final Serializer<T> serializer = this.serializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDQ4Mg=="}, "originalCommit": {"oid": "8630ff5e5cb2d5fca1b9d3be46efdaf193590382"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1866, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}