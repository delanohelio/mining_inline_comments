{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTUyNTI3", "number": 9632, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozNTo0NFrOE7vAZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozNTo0NFrOE7vAZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDcxNTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/log/ProducerStateManager.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozNTo0NFrOH3i_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjozNzo1M1rOH3jB1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjkzNQ==", "bodyText": "Could you check my understanding? If we have a a non-empty currentTxnFirstOffset value (indicating a non-empty transaction), we'll return a valid CompletedTxn, otherwise we will return None. For the empty transactions this means that we aren't accumulating completed transactions. This saves us from having to call lastStableOffset on every empty completed transaction https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/log/Log.scala#L1240?", "url": "https://github.com/apache/kafka/pull/9632#discussion_r528006935", "createdAt": "2020-11-20T22:35:44Z", "author": {"login": "lbradstreet"}, "path": "core/src/main/scala/kafka/log/ProducerStateManager.scala", "diffHunk": "@@ -301,26 +304,28 @@ private[log] class ProducerAppendInfo(val topicPartition: TopicPartition,\n     }\n   }\n \n-  def appendEndTxnMarker(endTxnMarker: EndTransactionMarker,\n-                         producerEpoch: Short,\n-                         offset: Long,\n-                         timestamp: Long): CompletedTxn = {\n+  def appendEndTxnMarker(\n+    endTxnMarker: EndTransactionMarker,\n+    producerEpoch: Short,\n+    offset: Long,\n+    timestamp: Long\n+  ): Option[CompletedTxn] = {\n     checkProducerEpoch(producerEpoch, offset)\n     checkCoordinatorEpoch(endTxnMarker, offset)\n \n-    val firstOffset = updatedEntry.currentTxnFirstOffset match {\n-      case Some(txnFirstOffset) => txnFirstOffset\n-      case None =>\n-        transactions += new TxnMetadata(producerId, offset)\n-        offset\n+    // Only emit the `CompletedTxn` for non-empty transactions. A transaction marker\n+    // without any associated data will not have any impact on the last stable offset\n+    // and would not need to be reflected in the transaction index.\n+    val completedTxn = updatedEntry.currentTxnFirstOffset.map { firstOffset =>\n+      CompletedTxn(producerId, firstOffset, offset, endTxnMarker.controlType == ControlRecordType.ABORT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a61c530b8f331eea0dc80eb31bae26a36f52d6b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNzYzNw==", "bodyText": "Yes, that is right. Additionally, we are not adding the transaction to the list of started transactions which are accumulated in the ProducerAppendInfo.", "url": "https://github.com/apache/kafka/pull/9632#discussion_r528007637", "createdAt": "2020-11-20T22:37:53Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/log/ProducerStateManager.scala", "diffHunk": "@@ -301,26 +304,28 @@ private[log] class ProducerAppendInfo(val topicPartition: TopicPartition,\n     }\n   }\n \n-  def appendEndTxnMarker(endTxnMarker: EndTransactionMarker,\n-                         producerEpoch: Short,\n-                         offset: Long,\n-                         timestamp: Long): CompletedTxn = {\n+  def appendEndTxnMarker(\n+    endTxnMarker: EndTransactionMarker,\n+    producerEpoch: Short,\n+    offset: Long,\n+    timestamp: Long\n+  ): Option[CompletedTxn] = {\n     checkProducerEpoch(producerEpoch, offset)\n     checkCoordinatorEpoch(endTxnMarker, offset)\n \n-    val firstOffset = updatedEntry.currentTxnFirstOffset match {\n-      case Some(txnFirstOffset) => txnFirstOffset\n-      case None =>\n-        transactions += new TxnMetadata(producerId, offset)\n-        offset\n+    // Only emit the `CompletedTxn` for non-empty transactions. A transaction marker\n+    // without any associated data will not have any impact on the last stable offset\n+    // and would not need to be reflected in the transaction index.\n+    val completedTxn = updatedEntry.currentTxnFirstOffset.map { firstOffset =>\n+      CompletedTxn(producerId, firstOffset, offset, endTxnMarker.controlType == ControlRecordType.ABORT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwNjkzNQ=="}, "originalCommit": {"oid": "4a61c530b8f331eea0dc80eb31bae26a36f52d6b"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3602, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}