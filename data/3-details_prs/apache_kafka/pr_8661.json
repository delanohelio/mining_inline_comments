{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTM3Nzgw", "number": 8661, "title": "KAFKA-9603: Do not turn on bulk loading for segmented stores on stand-by tasks", "bodyText": "Segmented state stores turn on bulk loading of the underlying RocksDB\nwhen restoring. This is correct for segmented state stores that\nare in restore mode on active tasks and the onRestoreStart() and\nonRestoreEnd() in RocksDBSegmentsBatchingRestoreCallback take care\nof toggling bulk loading mode on and off. However, restoreAll()\nin RocksDBSegmentsBatchingRestoreCallback might also turn on bulk loading\nmode. When this happens on a stand-by task bulk loading mode is never\nturned off. That leads to steadily increasing open file descriptors\nin RocksDB because in bulk loading mode RocksDB creates continuously new\nfiles but never compacts them (which is the intended behaviour).\nThis PR checks whether the task is an active task before turning on bulk\nloading mode in restoreAll() for segmented state stores.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-12T19:57:30Z", "url": "https://github.com/apache/kafka/pull/8661", "merged": true, "mergeCommit": {"oid": "9a47d7e35fb2849ae58d7443a5b854c37cc34479"}, "closed": true, "closedAt": "2020-05-20T22:11:16Z", "author": {"login": "cadonna"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgp59-gFqTQxMDM3ODQ0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjP_zjAFqTQxNTcyOTUyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzc4NDQ2", "url": "https://github.com/apache/kafka/pull/8661#pullrequestreview-410378446", "createdAt": "2020-05-12T20:00:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDowMDo1NVrOGUWzsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDowMDo1NVrOGUWzsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5ODM4NQ==", "bodyText": "This code is either redundant or wrong. If on an active task it is redundant because bulk loading is turned on and off by onRestoreStart() and onRestoreEnd() in RocksDBSegmentsBatchingRestoreCallback. If on a stand-by task it is wrong because bulk loading is turned on but never off leading to an ever increasing number of open file descriptors.", "url": "https://github.com/apache/kafka/pull/8661#discussion_r423998385", "createdAt": "2020-05-12T20:00:55Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStore.java", "diffHunk": "@@ -248,17 +243,6 @@ void restoreAllInternal(final Collection<KeyValue<byte[], byte[]>> records) {\n             final long segmentId = segments.segmentId(timestamp);\n             final S segment = segments.getOrCreateSegmentIfLive(segmentId, context, observedStreamTime);\n             if (segment != null) {\n-                // This handles the case that state store is moved to a new client and does not\n-                // have the local RocksDB instance for the segment. In this case, toggleDBForBulkLoading\n-                // will only close the database and open it again with bulk loading enabled.\n-                if (!bulkLoadSegments.contains(segment)) {\n-                    segment.toggleDbForBulkLoading(true);\n-                    // If the store does not exist yet, the getOrCreateSegmentIfLive will call openDB that\n-                    // makes the open flag for the newly created store.\n-                    // if the store does exist already, then toggleDbForBulkLoading will make sure that\n-                    // the store is already open here.\n-                    bulkLoadSegments = new HashSet<>(segments.allSegments());\n-                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdd278fa943ddf9d10b9910c0fb9aa8af10855d", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/8bdd278fa943ddf9d10b9910c0fb9aa8af10855d", "committedDate": "2020-05-19T08:08:57Z", "message": "KAFKA-9603: Do not turn on bulk loading for segmented stores on standby tasks\n\nSegmented state stores turn on bulk loading of the underlying RocksDB\nwhen restoring. This is correct for segmented state stores that\nare in restore mode on active tasks and the onRestoreStart() and\nonRestoreEnd() in RocksDBSegmentsBatchingRestoreCallback take care\nof toggling bulk loading mode on and off. However, restoreAll()\nin RocksDBSegmentsBatchingRestoreCallback might also turn on bulk loading\nmode. When this happens on a stand-by task bulk loading mode is never\nturned off. That leads to steadily increasing open file decriptors\nin RocksDB because in bulk loading mode RocksDB creates continuously new\nfiles but never compacts them (which is the intended behaviour).\n\nThis PR removes the code that turns on bulk loading mode in restoreAll()\nfor segemented state stores because it is redundant. If the state store\nis in restoring mode on an active task bulk loading is turned on and off\nanyways. On stand-by tasks bulk loading mode should never be turned on."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae11cc84d8daa53cefe66e751feee8502c85d55", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/1ae11cc84d8daa53cefe66e751feee8502c85d55", "committedDate": "2020-05-19T08:11:32Z", "message": "Revert \"KAFKA-9603: Do not turn on bulk loading for segmented stores on standby tasks\"\n\nThis reverts commit 8bdd278fa943ddf9d10b9910c0fb9aa8af10855d."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31707876d03eb2448189518ed4cf056ce4952a6b", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/31707876d03eb2448189518ed4cf056ce4952a6b", "committedDate": "2020-05-19T09:24:35Z", "message": "Use consolidated processor context to check for type of task"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "31707876d03eb2448189518ed4cf056ce4952a6b", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/31707876d03eb2448189518ed4cf056ce4952a6b", "committedDate": "2020-05-19T09:24:35Z", "message": "Use consolidated processor context to check for type of task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjMyMzI5", "url": "https://github.com/apache/kafka/pull/8661#pullrequestreview-415632329", "createdAt": "2020-05-20T19:03:00Z", "commit": {"oid": "31707876d03eb2448189518ed4cf056ce4952a6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzI5NTI2", "url": "https://github.com/apache/kafka/pull/8661#pullrequestreview-415729526", "createdAt": "2020-05-20T21:31:42Z", "commit": {"oid": "31707876d03eb2448189518ed4cf056ce4952a6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 974, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}