{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDM1Njg4", "number": 9568, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NToyM1rOE4axvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NTo0NFrOE4ax9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTk0NDI5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NToyM1rOHyUzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzozMToyMVrOHyYdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTcxMA==", "bodyText": "Would it be easier to do\n  if (!progressMadeThisIteration) {\n    throw new TaskAssignmentException(\"Failed to compute number of partitions for all repartition topics\");\n  }\n} while (numPartitionsNeeded);\n\n(and don't have the if (numPartitionsNeeded) after the while loop)\nI guess both is correct and it might be a matter of taste. Also don't have a strong opinion about it. It's just an idea.", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522531710", "createdAt": "2020-11-13T00:45:23Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -575,17 +577,22 @@ private void setRepartitionTopicMetadataNumberOfPartitions(final Map<String, Int\n                             }\n                         }\n \n-                        // if we still have not found the right number of partitions,\n-                        // another iteration is needed\n                         if (numPartitions == null) {\n                             numPartitionsNeeded = true;\n+                            log.trace(\"Unable to determine number of partitions for {}, another iteration is needed\",\n+                                      repartitionSourceTopic);\n                         } else {\n-                            repartitionTopicMetadata.get(topicName).setNumberOfPartitions(numPartitions);\n+                            repartitionTopicMetadata.get(repartitionSourceTopic).setNumberOfPartitions(numPartitions);\n+                            progressMadeThisIteration = true;\n                         }\n                     }\n                 }\n             }\n-        } while (numPartitionsNeeded);\n+        } while (numPartitionsNeeded && progressMadeThisIteration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MTY0NQ==", "bodyText": "Mm yeah that does sound cleaner, will do", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522591645", "createdAt": "2020-11-13T03:31:21Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -575,17 +577,22 @@ private void setRepartitionTopicMetadataNumberOfPartitions(final Map<String, Int\n                             }\n                         }\n \n-                        // if we still have not found the right number of partitions,\n-                        // another iteration is needed\n                         if (numPartitions == null) {\n                             numPartitionsNeeded = true;\n+                            log.trace(\"Unable to determine number of partitions for {}, another iteration is needed\",\n+                                      repartitionSourceTopic);\n                         } else {\n-                            repartitionTopicMetadata.get(topicName).setNumberOfPartitions(numPartitions);\n+                            repartitionTopicMetadata.get(repartitionSourceTopic).setNumberOfPartitions(numPartitions);\n+                            progressMadeThisIteration = true;\n                         }\n                     }\n                 }\n             }\n-        } while (numPartitionsNeeded);\n+        } while (numPartitionsNeeded && progressMadeThisIteration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTcxMA=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTk0NDg1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NTo0NFrOHyUz2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMzo0NzowOVrOHyYs1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg==", "bodyText": "Do we need this commet?", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522531802", "createdAt": "2020-11-13T00:45:44Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java", "diffHunk": "@@ -135,6 +141,37 @@ private Admin createAdminClient() {\n         return Admin.create(adminClientConfig);\n     }\n \n+    /*\n+     * This test just ensures that that the assignor does not get stuck during partition number resolution\n+     *  for internal repartition topics. See KAFKA-10689\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5NDkzMw==", "bodyText": "I'd prefer to leave it in because otherwise the test looks totally out of place and doesn't seem to test anything. Historical context can be useful \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522594933", "createdAt": "2020-11-13T03:44:36Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java", "diffHunk": "@@ -135,6 +141,37 @@ private Admin createAdminClient() {\n         return Admin.create(adminClientConfig);\n     }\n \n+    /*\n+     * This test just ensures that that the assignor does not get stuck during partition number resolution\n+     *  for internal repartition topics. See KAFKA-10689\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5NTU0Mw==", "bodyText": "To quote a very salty developer in the comments of the leaked Windows Media Player source code:\n/* The reason for requiring the following test is now lost\n         * in the mists of time.  Now this app is 32-bit, these\n         * bogus timer callbacks (if they really do still occur)\n         * could be 16-bit, so we need to add yet more ugliness\n         * in the form of assembler to an app which is already\n         * hardly a paragon of pulchritude.\n         *\n         * A plea:\n         *\n         * If you add some obscure code such as below, to this or\n         * any other app, even if it has only the teeniest chance\n         * of being less blindingly obvious to someone else than\n         * it is to you at the time of writing, please please please\n         * add a f***ing comment.\n         *\n         * Respectfully,\n         * A Developer\n         */\n\n\ud83d\ude02", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522595543", "createdAt": "2020-11-13T03:47:09Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java", "diffHunk": "@@ -135,6 +141,37 @@ private Admin createAdminClient() {\n         return Admin.create(adminClientConfig);\n     }\n \n+    /*\n+     * This test just ensures that that the assignor does not get stuck during partition number resolution\n+     *  for internal repartition topics. See KAFKA-10689\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg=="}, "originalCommit": null, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3815, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}