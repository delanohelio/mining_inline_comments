{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDU1NTcz", "number": 8245, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjozMToxOFrODmBiew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjozMToxOFrODmBiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk3NjkxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjozMToxOFrOFzO69g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMDo1NzoyMVrOFzRspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjE2Ng==", "bodyText": "nit: add an error log entry as well?", "url": "https://github.com/apache/kafka/pull/8245#discussion_r389266166", "createdAt": "2020-03-07T16:31:18Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -321,13 +320,107 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n             clientMetadata.addPreviousTasks(info);\n         }\n \n+        final boolean versionProbing =\n+            checkMetadataVersions(minReceivedMetadataVersion, minSupportedMetadataVersion, futureMetadataVersion);\n+\n+        log.debug(\"Constructed client metadata {} from the member subscriptions.\", clientMetadataMap);\n+\n+        // ---------------- Step One ---------------- //\n+\n+        // parse the topology to determine the repartition source topics,\n+        // making sure they are created with the number of partitions as\n+        // the maximum of the depending sub-topologies source topics' number of partitions\n+        final Map<Integer, InternalTopologyBuilder.TopicsInfo> topicGroups = taskManager.builder().topicGroups();\n+\n+        final Map<TopicPartition, PartitionInfo> allRepartitionTopicPartitions;\n+        try {\n+            allRepartitionTopicPartitions = prepareRepartitionTopics(topicGroups, metadata);\n+        } catch (final TaskAssignmentException e) {\n+            return new GroupAssignment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0acd802317eb6dbc008a8959d82c4b64b715aff5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxMTY1NQ==", "bodyText": "We actually log an exception before throwing it in the inner method", "url": "https://github.com/apache/kafka/pull/8245#discussion_r389311655", "createdAt": "2020-03-07T20:57:21Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -321,13 +320,107 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n             clientMetadata.addPreviousTasks(info);\n         }\n \n+        final boolean versionProbing =\n+            checkMetadataVersions(minReceivedMetadataVersion, minSupportedMetadataVersion, futureMetadataVersion);\n+\n+        log.debug(\"Constructed client metadata {} from the member subscriptions.\", clientMetadataMap);\n+\n+        // ---------------- Step One ---------------- //\n+\n+        // parse the topology to determine the repartition source topics,\n+        // making sure they are created with the number of partitions as\n+        // the maximum of the depending sub-topologies source topics' number of partitions\n+        final Map<Integer, InternalTopologyBuilder.TopicsInfo> topicGroups = taskManager.builder().topicGroups();\n+\n+        final Map<TopicPartition, PartitionInfo> allRepartitionTopicPartitions;\n+        try {\n+            allRepartitionTopicPartitions = prepareRepartitionTopics(topicGroups, metadata);\n+        } catch (final TaskAssignmentException e) {\n+            return new GroupAssignment(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjE2Ng=="}, "originalCommit": {"oid": "0acd802317eb6dbc008a8959d82c4b64b715aff5"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3242, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}