{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjIyNDA4", "number": 8764, "title": "KAFKA-10049: Fixed FKJ bug where wrapped serdes are set incorrectly when using default StreamsConfig serdes", "bodyText": "Bug Details:\nMistakenly setting the value serde to the key serde for an internal wrapped serde in the FKJ workflow.\nTesting:\nAdded integration test to use a non-primitive Serde, in this case the JSONSerde that the original bug finder reported using. Expanded integration test to ensure that the default Serdes work for the entire happy path of the FKJ.\nIntroduces a testing dependency on com.fasterxml.jackson, though this is already the case in other modules so I suspect it won't be a big issue.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-05-31T14:48:35Z", "url": "https://github.com/apache/kafka/pull/8764", "merged": true, "mergeCommit": {"oid": "bcf45b09d34607d53e17d1f75a3097f3a8157903"}, "closed": true, "closedAt": "2020-06-12T15:00:39Z", "author": {"login": "bellemare"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnBknvAFqTQyMTkxMjU3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqT81sgFqTQyOTI1MTM3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTEyNTcy", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-421912572", "createdAt": "2020-06-01T14:56:05Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NjowNVrOGdNkQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Nzo1OVrOGdNo1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDE2MQ==", "bodyText": "Please use the safeTestName", "url": "https://github.com/apache/kafka/pull/8764#discussion_r433284161", "createdAt": "2020-06-01T14:56:05Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinMaterializationIntegrationTest.java", "diffHunk": "@@ -77,11 +83,12 @@ public KTableKTableForeignKeyJoinMaterializationIntegrationTest(final boolean ma\n     @Before\n     public void before() {\n         final String safeTestName = safeUniqueTestName(getClass(), testName);\n-        streamsConfig = mkProperties(mkMap(\n-            mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName),\n-            mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"asdf:0000\"),\n-            mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath())\n-        ));\n+        streamsConfig = new Properties();\n+        streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG, \"my-stream-processing-application-2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NTMzMg==", "bodyText": "Hey @bellemare , do we need to add a new test? It looks like this condition was intended to be covered already in KTableKTableForeignKeyJoinScenarioTest . Should we just fix that test instead?", "url": "https://github.com/apache/kafka/pull/8764#discussion_r433285332", "createdAt": "2020-06-01T14:57:59Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinMaterializationIntegrationTest.java", "diffHunk": "@@ -94,15 +101,49 @@ public void before() {\n         );\n     }\n \n+    @Test\n+    public void shouldEmitRecordWhenJoiningWithDefaultSerdes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTQ0MTU5", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-422144159", "createdAt": "2020-06-01T20:07:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTc3MjI1", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-422177225", "createdAt": "2020-06-01T20:58:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo1ODo0MFrOGdZ6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo1OTowMFrOGdZ67Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjQxOA==", "bodyText": "@guozhangwang This is 1/2 of the areas that needed the fix. The valueSerde was being passed into the underlying Serde, despite it really needing the keySerde.", "url": "https://github.com/apache/kafka/pull/8764#discussion_r433486418", "createdAt": "2020-06-01T20:58:40Z", "author": {"login": "bellemare"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java", "diffHunk": "@@ -66,10 +66,13 @@ public void init(final InternalProcessorContext context) {\n             valSerializer = (Serializer<V>) context.valueSerde().serializer();\n         }\n \n-        // if value serializers are internal wrapping serializers that may need to be given the default serializer\n+        // if serializers are internal wrapping serializers that may need to be given the default serializer\n         // then pass it the default one from the context\n         if (valSerializer instanceof WrappingNullableSerializer) {\n-            ((WrappingNullableSerializer) valSerializer).setIfUnset(context.valueSerde().serializer());\n+            ((WrappingNullableSerializer) valSerializer).setIfUnset(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjU3Mw==", "bodyText": "@guozhangwang This is 2/2 of the areas that needed the fix. Same thing, the valueSerde was being passed into the underlying Serde, despite it really needing the keySerde.", "url": "https://github.com/apache/kafka/pull/8764#discussion_r433486573", "createdAt": "2020-06-01T20:59:00Z", "author": {"login": "bellemare"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java", "diffHunk": "@@ -87,10 +87,13 @@ public void init(final InternalProcessorContext context) {\n             this.valDeserializer = (Deserializer<V>) context.valueSerde().deserializer();\n         }\n \n-        // if value deserializers are internal wrapping deserializers that may need to be given the default\n+        // if deserializers are internal wrapping deserializers that may need to be given the default\n         // then pass it the default one from the context\n         if (valDeserializer instanceof WrappingNullableDeserializer) {\n-            ((WrappingNullableDeserializer) valDeserializer).setIfUnset(context.valueSerde().deserializer());\n+            ((WrappingNullableDeserializer) valDeserializer).setIfUnset(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTc3OTkw", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-422177990", "createdAt": "2020-06-01T20:59:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo1OTo0OVrOGdZ8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo1OTo0OVrOGdZ8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NzAzMQ==", "bodyText": "@guozhangwang , this (and L128) is the \"actual fix\". Previously, the actual default serde we would pass in was the value serde (in SinkNode/SourceNode), but this one particular serde needs the key serde. If you look at the other serdes that changed in this diff, you'll note that they all actually do need the value serde. Only this one is different.", "url": "https://github.com/apache/kafka/pull/8764#discussion_r433487031", "createdAt": "2020-06-01T20:59:49Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapperSerde.java", "diffHunk": "@@ -63,9 +63,9 @@ public SubscriptionWrapperSerde(final Supplier<String> primaryKeySerializationPs\n         }\n \n         @Override\n-        public void setIfUnset(final Serializer<K> defaultSerializer) {\n+        public void setIfUnset(final Serializer<K> defaultKeySerializer, final Serializer<Void> defaultValueSerializer) {\n             if (primaryKeySerializer == null) {\n-                primaryKeySerializer = Objects.requireNonNull(defaultSerializer, \"defaultSerializer cannot be null\");\n+                primaryKeySerializer = Objects.requireNonNull(defaultKeySerializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDQwMTMz", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-426440133", "createdAt": "2020-06-08T17:03:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowMzoxM1rOGgnrnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDo0M1rOGgnwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1Nzc1Nw==", "bodyText": "Might be nice for demonstration purposes if the two records actually have different keys. Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        aTopic.pipeInput(1, \"1-alpha\");\n          \n          \n            \n                        bTopic.pipeInput(1, \"beta\");\n          \n          \n            \n                        aTopic.pipeInput(1, \"999-alpha\");\n          \n          \n            \n                        bTopic.pipeInput(999, \"beta\");", "url": "https://github.com/apache/kafka/pull/8764#discussion_r436857757", "createdAt": "2020-06-08T17:03:13Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "diffHunk": "@@ -243,17 +244,17 @@ private void validateTopologyCanProcessData(final StreamsBuilder builder) {\n         final String safeTestName = safeUniqueTestName(getClass(), testName);\n         config.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"dummy-\" + safeTestName);\n         config.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\");\n-        config.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName());\n+        config.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.IntegerSerde.class.getName());\n         config.setProperty(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName());\n         config.setProperty(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getAbsolutePath());\n         try (final TopologyTestDriver topologyTestDriver = new TopologyTestDriver(builder.build(), config)) {\n-            final TestInputTopic<String, String> aTopic = topologyTestDriver.createInputTopic(\"A\", new StringSerializer(), new StringSerializer());\n-            final TestInputTopic<String, String> bTopic = topologyTestDriver.createInputTopic(\"B\", new StringSerializer(), new StringSerializer());\n-            final TestOutputTopic<String, String> output = topologyTestDriver.createOutputTopic(\"output\", new StringDeserializer(), new StringDeserializer());\n-            aTopic.pipeInput(\"a1\", \"b1-alpha\");\n-            bTopic.pipeInput(\"b1\", \"beta\");\n-            final Map<String, String> x = output.readKeyValuesToMap();\n-            assertThat(x, is(Collections.singletonMap(\"a1\", \"(b1-alpha,(b1-alpha,beta))\")));\n+            final TestInputTopic<Integer, String> aTopic = topologyTestDriver.createInputTopic(\"A\", new IntegerSerializer(), new StringSerializer());\n+            final TestInputTopic<Integer, String> bTopic = topologyTestDriver.createInputTopic(\"B\", new IntegerSerializer(), new StringSerializer());\n+            final TestOutputTopic<Integer, String> output = topologyTestDriver.createOutputTopic(\"output\", new IntegerDeserializer(), new StringDeserializer());\n+            aTopic.pipeInput(1, \"1-alpha\");\n+            bTopic.pipeInput(1, \"beta\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODkzOQ==", "bodyText": "It'd be better to avoid reformatting code to change indentation settings. AFAIK, in Streams at least, we tend to use indents of 4 spaces.", "url": "https://github.com/apache/kafka/pull/8764#discussion_r436858939", "createdAt": "2020-06-08T17:04:43Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java", "diffHunk": "@@ -181,60 +182,60 @@ public void shouldWorkWithDefaultAndProducedSerdes() {\n     public void shouldUseExpectedTopicsWithSerde() {\n         final String applicationId = \"ktable-ktable-joinOnForeignKey\";\n         final Properties streamsConfig = mkProperties(mkMap(\n-            mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, applicationId),\n-            mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"asdf:0000\"),\n-            mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath())\n+                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, applicationId),\n+                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"asdf:0000\"),\n+                mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath())\n         ));\n \n         final UniqueTopicSerdeScope serdeScope = new UniqueTopicSerdeScope();\n         final StreamsBuilder builder = new StreamsBuilder();\n \n-        final KTable<String, String> left = builder.table(\n-            LEFT_TABLE,\n-            Consumed.with(serdeScope.decorateSerde(Serdes.String(), streamsConfig, true),\n-                          serdeScope.decorateSerde(Serdes.String(), streamsConfig, false))\n+        final KTable<Integer, String> left = builder.table(\n+                LEFT_TABLE,\n+                Consumed.with(serdeScope.decorateSerde(Serdes.Integer(), streamsConfig, true),\n+                        serdeScope.decorateSerde(Serdes.String(), streamsConfig, false))\n         );\n-        final KTable<String, String> right = builder.table(\n-            RIGHT_TABLE,\n-            Consumed.with(serdeScope.decorateSerde(Serdes.String(), streamsConfig, true),\n-                          serdeScope.decorateSerde(Serdes.String(), streamsConfig, false))\n+        final KTable<Integer, String> right = builder.table(\n+                RIGHT_TABLE,\n+                Consumed.with(serdeScope.decorateSerde(Serdes.Integer(), streamsConfig, true),\n+                        serdeScope.decorateSerde(Serdes.String(), streamsConfig, false))\n         );\n \n         left.join(\n-            right,\n-            value -> value.split(\"\\\\|\")[1],\n-            (value1, value2) -> \"(\" + value1 + \",\" + value2 + \")\",\n-            Materialized.with(null, serdeScope.decorateSerde(Serdes.String(), streamsConfig, false)\n-            ))\n-            .toStream()\n-            .to(OUTPUT);\n+                right,\n+                value -> Integer.parseInt(value.split(\"\\\\|\")[1]),\n+                (value1, value2) -> \"(\" + value1 + \",\" + value2 + \")\",\n+                Materialized.with(null, serdeScope.decorateSerde(Serdes.String(), streamsConfig, false)\n+                ))\n+                .toStream()\n+                .to(OUTPUT);\n \n \n         final Topology topology = builder.build(streamsConfig);\n         try (final TopologyTestDriver driver = new TopologyTestDriver(topology, streamsConfig)) {\n-            final TestInputTopic<String, String> leftInput = driver.createInputTopic(LEFT_TABLE, new StringSerializer(), new StringSerializer());\n-            final TestInputTopic<String, String> rightInput = driver.createInputTopic(RIGHT_TABLE, new StringSerializer(), new StringSerializer());\n-            leftInput.pipeInput(\"lhs1\", \"lhsValue1|rhs1\");\n-            rightInput.pipeInput(\"rhs1\", \"rhsValue1\");\n+            final TestInputTopic<Integer, String> leftInput = driver.createInputTopic(LEFT_TABLE, new IntegerSerializer(), new StringSerializer());\n+            final TestInputTopic<Integer, String> rightInput = driver.createInputTopic(RIGHT_TABLE, new IntegerSerializer(), new StringSerializer());\n+            leftInput.pipeInput(2, \"lhsValue1|1\");\n+            rightInput.pipeInput(1, \"rhsValue1\");\n         }\n         // verifying primarily that no extra pseudo-topics were used, but it's nice to also verify the rest of the\n         // topics our serdes serialize data for\n         assertThat(serdeScope.registeredTopics(), is(mkSet(\n-            // expected pseudo-topics\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-fk--key\",\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-pk--key\",\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-vh--value\",\n-            // internal topics\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic--key\",\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-RESPONSE-0000000014-topic--key\",\n-            applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-RESPONSE-0000000014-topic--value\",\n-            applicationId + \"-left_table-STATE-STORE-0000000000-changelog--key\",\n-            applicationId + \"-left_table-STATE-STORE-0000000000-changelog--value\",\n-            applicationId + \"-right_table-STATE-STORE-0000000003-changelog--key\",\n-            applicationId + \"-right_table-STATE-STORE-0000000003-changelog--value\",\n-            // output topics\n-            \"output-topic--key\",\n-            \"output-topic--value\"\n+                // expected pseudo-topics\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-fk--key\",\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-pk--key\",\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic-vh--value\",\n+                // internal topics\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-REGISTRATION-0000000006-topic--key\",\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-RESPONSE-0000000014-topic--key\",\n+                applicationId + \"-KTABLE-FK-JOIN-SUBSCRIPTION-RESPONSE-0000000014-topic--value\",\n+                applicationId + \"-left_table-STATE-STORE-0000000000-changelog--key\",\n+                applicationId + \"-left_table-STATE-STORE-0000000000-changelog--value\",\n+                applicationId + \"-right_table-STATE-STORE-0000000003-changelog--key\",\n+                applicationId + \"-right_table-STATE-STORE-0000000003-changelog--value\",\n+                // output topics\n+                \"output-topic--key\",\n+                \"output-topic--value\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 269}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a5395a888b6ac5f16d8f602f9066d439f5a991", "author": {"user": {"login": "bellemare", "name": "Adam Bellemare"}}, "url": "https://github.com/apache/kafka/commit/29a5395a888b6ac5f16d8f602f9066d439f5a991", "committedDate": "2020-06-08T22:44:26Z", "message": "KAFKA-10049: Fixed FKJ bug where wrapped serdes are set incorrectly when using default StreamsConfig serdes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "29a5395a888b6ac5f16d8f602f9066d439f5a991", "author": {"user": {"login": "bellemare", "name": "Adam Bellemare"}}, "url": "https://github.com/apache/kafka/commit/29a5395a888b6ac5f16d8f602f9066d439f5a991", "committedDate": "2020-06-08T22:44:26Z", "message": "KAFKA-10049: Fixed FKJ bug where wrapped serdes are set incorrectly when using default StreamsConfig serdes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47f1948d6e43857ce87a6207c78eb0e363152fe", "author": {"user": {"login": "bellemare", "name": "Adam Bellemare"}}, "url": "https://github.com/apache/kafka/commit/e47f1948d6e43857ce87a6207c78eb0e363152fe", "committedDate": "2020-06-09T16:28:36Z", "message": "KAFKA-10049: Changed primary key from 1 to 999 to further clarify the join mechanisms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjUxMzc5", "url": "https://github.com/apache/kafka/pull/8764#pullrequestreview-429251379", "createdAt": "2020-06-11T20:05:33Z", "commit": {"oid": "e47f1948d6e43857ce87a6207c78eb0e363152fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 796, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}