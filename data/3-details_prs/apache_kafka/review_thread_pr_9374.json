{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTM4MDg1", "number": 9374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoyMFrOEqXzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzowMzo1MFrOExxW1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY1NzI5OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoyMFrOHcihqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoyMFrOHcihqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Nzg0OA==", "bodyText": "users.stream() is the NPE source", "url": "https://github.com/apache/kafka/pull/9374#discussion_r499687848", "createdAt": "2020-10-05T15:32:20Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjIxMzgwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjo0OToyN1rOHoCiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToxMDozNFrOHoGb1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjczMA==", "bodyText": "nit: I suggest to continue using the stream api here. It keeps the code smaller.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511746730", "createdAt": "2020-10-26T06:49:27Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->\n-                                new DescribeUserScramCredentialsRequestData.UserName().setName(user)).collect(Collectors.toList())));\n+            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {\n+                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n+\n+                if (users != null && !users.isEmpty()) {\n+                    final List<UserName> userNames = new ArrayList<>(users.size());\n+\n+                    for (final String user : users) {\n+                        if (user != null) {\n+                            userNames.add(new UserName().setName(user));\n+                        }\n+                    }\n+\n+                    requestData.setUsers(userNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3NDc1NQ==", "bodyText": "Not really, if we keep all checks in place it will only be a little shorter but definitely less efficient:\nfinal DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n\nif (users != null && !users.isEmpty()) {\n    requestData.setUsers(users.stream()\n        .filter(Objects::nonNull)\n        .map(it -> new UserName().setName(it))\n        .collect(Collectors.toList())\n    );\n}\n\nreturn new DescribeUserScramCredentialsRequest.Builder(requestData);", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511774755", "createdAt": "2020-10-26T08:04:16Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->\n-                                new DescribeUserScramCredentialsRequestData.UserName().setName(user)).collect(Collectors.toList())));\n+            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {\n+                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n+\n+                if (users != null && !users.isEmpty()) {\n+                    final List<UserName> userNames = new ArrayList<>(users.size());\n+\n+                    for (final String user : users) {\n+                        if (user != null) {\n+                            userNames.add(new UserName().setName(user));\n+                        }\n+                    }\n+\n+                    requestData.setUsers(userNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjczMA=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNDUwMg==", "bodyText": "We tend to use the steam api for such small transformations but I don't feel strong about this.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511804502", "createdAt": "2020-10-26T09:00:18Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->\n-                                new DescribeUserScramCredentialsRequestData.UserName().setName(user)).collect(Collectors.toList())));\n+            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {\n+                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n+\n+                if (users != null && !users.isEmpty()) {\n+                    final List<UserName> userNames = new ArrayList<>(users.size());\n+\n+                    for (final String user : users) {\n+                        if (user != null) {\n+                            userNames.add(new UserName().setName(user));\n+                        }\n+                    }\n+\n+                    requestData.setUsers(userNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjczMA=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxMDUxNw==", "bodyText": "I have no feelings regarding this either, for me Java is always just clunky no matter which API you use. A normal loop is just faster, that's all I can say, but I doubt that it matters at all.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511810517", "createdAt": "2020-10-26T09:10:34Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -4166,10 +4167,22 @@ public DescribeUserScramCredentialsResult describeUserScramCredentials(List<Stri\n         Call call = new Call(\"describeUserScramCredentials\", calcDeadlineMs(now, options.timeoutMs()),\n                 new LeastLoadedNodeProvider()) {\n             @Override\n-            public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {\n-                return new DescribeUserScramCredentialsRequest.Builder(\n-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->\n-                                new DescribeUserScramCredentialsRequestData.UserName().setName(user)).collect(Collectors.toList())));\n+            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {\n+                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();\n+\n+                if (users != null && !users.isEmpty()) {\n+                    final List<UserName> userNames = new ArrayList<>(users.size());\n+\n+                    for (final String user : users) {\n+                        if (user != null) {\n+                            userNames.add(new UserName().setName(user));\n+                        }\n+                    }\n+\n+                    requestData.setUsers(userNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjczMA=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjI0MzQwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzowMzo1MFrOHoCzrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowMzoxMlrOHoGLKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA4Nw==", "bodyText": "Would it make sense to extract these into separate unit tests? testDescribeUserScramCredentials could receive users as a argument such that we could reuse the code logic.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511751087", "createdAt": "2020-10-26T07:03:50Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -4505,50 +4505,57 @@ public void testDescribeUserScramCredentials() throws Exception {\n             user0CredentialInfo1.setIterations(user0Iterations1);\n \n             final String user1Name = \"user1\";\n-            ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n-            int user1Iterations = 4096;\n+            final ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n+            final int user1Iterations = 4096;\n \n             final CredentialInfo user1CredentialInfo = new CredentialInfo();\n             user1CredentialInfo.setMechanism(user1ScramMechanism.type());\n             user1CredentialInfo.setIterations(user1Iterations);\n \n-            DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n+            final DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n             responseData.setResults(Arrays.asList(\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user0Name)\n                             .setCredentialInfos(Arrays.asList(user0CredentialInfo0, user0CredentialInfo1)),\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user1Name)\n-                            .setCredentialInfos(Arrays.asList(user1CredentialInfo))));\n-\n-            env.kafkaClient().prepareResponse(new DescribeUserScramCredentialsResponse(responseData));\n-\n-            List<String> usersRequestedList = asList(user0Name, user1Name);\n-            Set<String> usersRequestedSet = usersRequestedList.stream().collect(Collectors.toSet());\n-            DescribeUserScramCredentialsResult result = env.adminClient().describeUserScramCredentials(usersRequestedList);\n-            Map<String, UserScramCredentialsDescription> descriptionResults = result.all().get();\n-            KafkaFuture<UserScramCredentialsDescription> user0DescriptionFuture = result.description(user0Name);\n-            KafkaFuture<UserScramCredentialsDescription> user1DescriptionFuture = result.description(user1Name);\n-            Set<String> usersDescribedFromUsersSet = result.users().get().stream().collect(Collectors.toSet());\n-            assertEquals(usersRequestedSet, usersDescribedFromUsersSet);\n-            Set<String> usersDescribedFromMapKeySet = descriptionResults.keySet();\n-            assertEquals(usersRequestedSet, usersDescribedFromMapKeySet);\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription0 = descriptionResults.get(user0Name);\n-            assertEquals(user0Name, userScramCredentialsDescription0.name());\n-            assertEquals(2, userScramCredentialsDescription0.credentialInfos().size());\n-            assertEquals(user0ScramMechanism0, userScramCredentialsDescription0.credentialInfos().get(0).mechanism());\n-            assertEquals(user0Iterations0, userScramCredentialsDescription0.credentialInfos().get(0).iterations());\n-            assertEquals(user0ScramMechanism1, userScramCredentialsDescription0.credentialInfos().get(1).mechanism());\n-            assertEquals(user0Iterations1, userScramCredentialsDescription0.credentialInfos().get(1).iterations());\n-            assertEquals(userScramCredentialsDescription0, user0DescriptionFuture.get());\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription1 = descriptionResults.get(user1Name);\n-            assertEquals(user1Name, userScramCredentialsDescription1.name());\n-            assertEquals(1, userScramCredentialsDescription1.credentialInfos().size());\n-            assertEquals(user1ScramMechanism, userScramCredentialsDescription1.credentialInfos().get(0).mechanism());\n-            assertEquals(user1Iterations, userScramCredentialsDescription1.credentialInfos().get(0).iterations());\n-            assertEquals(userScramCredentialsDescription1, user1DescriptionFuture.get());\n+                            .setCredentialInfos(singletonList(user1CredentialInfo))));\n+            final DescribeUserScramCredentialsResponse response = new DescribeUserScramCredentialsResponse(responseData);\n+\n+            final Set<String> usersRequestedSet = new HashSet<>();\n+            usersRequestedSet.add(user0Name);\n+            usersRequestedSet.add(user1Name);\n+\n+            for (final List<String> users : asList(null, new ArrayList<String>(), asList(user0Name, null, user1Name))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3MTY4Nw==", "bodyText": "We could but I do not see where we could reuse it, YAGNI?", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511771687", "createdAt": "2020-10-26T07:57:23Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -4505,50 +4505,57 @@ public void testDescribeUserScramCredentials() throws Exception {\n             user0CredentialInfo1.setIterations(user0Iterations1);\n \n             final String user1Name = \"user1\";\n-            ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n-            int user1Iterations = 4096;\n+            final ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n+            final int user1Iterations = 4096;\n \n             final CredentialInfo user1CredentialInfo = new CredentialInfo();\n             user1CredentialInfo.setMechanism(user1ScramMechanism.type());\n             user1CredentialInfo.setIterations(user1Iterations);\n \n-            DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n+            final DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n             responseData.setResults(Arrays.asList(\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user0Name)\n                             .setCredentialInfos(Arrays.asList(user0CredentialInfo0, user0CredentialInfo1)),\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user1Name)\n-                            .setCredentialInfos(Arrays.asList(user1CredentialInfo))));\n-\n-            env.kafkaClient().prepareResponse(new DescribeUserScramCredentialsResponse(responseData));\n-\n-            List<String> usersRequestedList = asList(user0Name, user1Name);\n-            Set<String> usersRequestedSet = usersRequestedList.stream().collect(Collectors.toSet());\n-            DescribeUserScramCredentialsResult result = env.adminClient().describeUserScramCredentials(usersRequestedList);\n-            Map<String, UserScramCredentialsDescription> descriptionResults = result.all().get();\n-            KafkaFuture<UserScramCredentialsDescription> user0DescriptionFuture = result.description(user0Name);\n-            KafkaFuture<UserScramCredentialsDescription> user1DescriptionFuture = result.description(user1Name);\n-            Set<String> usersDescribedFromUsersSet = result.users().get().stream().collect(Collectors.toSet());\n-            assertEquals(usersRequestedSet, usersDescribedFromUsersSet);\n-            Set<String> usersDescribedFromMapKeySet = descriptionResults.keySet();\n-            assertEquals(usersRequestedSet, usersDescribedFromMapKeySet);\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription0 = descriptionResults.get(user0Name);\n-            assertEquals(user0Name, userScramCredentialsDescription0.name());\n-            assertEquals(2, userScramCredentialsDescription0.credentialInfos().size());\n-            assertEquals(user0ScramMechanism0, userScramCredentialsDescription0.credentialInfos().get(0).mechanism());\n-            assertEquals(user0Iterations0, userScramCredentialsDescription0.credentialInfos().get(0).iterations());\n-            assertEquals(user0ScramMechanism1, userScramCredentialsDescription0.credentialInfos().get(1).mechanism());\n-            assertEquals(user0Iterations1, userScramCredentialsDescription0.credentialInfos().get(1).iterations());\n-            assertEquals(userScramCredentialsDescription0, user0DescriptionFuture.get());\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription1 = descriptionResults.get(user1Name);\n-            assertEquals(user1Name, userScramCredentialsDescription1.name());\n-            assertEquals(1, userScramCredentialsDescription1.credentialInfos().size());\n-            assertEquals(user1ScramMechanism, userScramCredentialsDescription1.credentialInfos().get(0).mechanism());\n-            assertEquals(user1Iterations, userScramCredentialsDescription1.credentialInfos().get(0).iterations());\n-            assertEquals(userScramCredentialsDescription1, user1DescriptionFuture.get());\n+                            .setCredentialInfos(singletonList(user1CredentialInfo))));\n+            final DescribeUserScramCredentialsResponse response = new DescribeUserScramCredentialsResponse(responseData);\n+\n+            final Set<String> usersRequestedSet = new HashSet<>();\n+            usersRequestedSet.add(user0Name);\n+            usersRequestedSet.add(user1Name);\n+\n+            for (final List<String> users : asList(null, new ArrayList<String>(), asList(user0Name, null, user1Name))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA4Nw=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwMDM2MA==", "bodyText": "Sorry, I was not clear. It would be great if we could define separate unit tests for the different cases that we want to test. In case of failure, we would know directly which one of the cases has failed. This is why I suggested to pass an argument users as an argument to testDescribeUserScramCredentials.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511800360", "createdAt": "2020-10-26T08:53:03Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -4505,50 +4505,57 @@ public void testDescribeUserScramCredentials() throws Exception {\n             user0CredentialInfo1.setIterations(user0Iterations1);\n \n             final String user1Name = \"user1\";\n-            ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n-            int user1Iterations = 4096;\n+            final ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n+            final int user1Iterations = 4096;\n \n             final CredentialInfo user1CredentialInfo = new CredentialInfo();\n             user1CredentialInfo.setMechanism(user1ScramMechanism.type());\n             user1CredentialInfo.setIterations(user1Iterations);\n \n-            DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n+            final DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n             responseData.setResults(Arrays.asList(\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user0Name)\n                             .setCredentialInfos(Arrays.asList(user0CredentialInfo0, user0CredentialInfo1)),\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user1Name)\n-                            .setCredentialInfos(Arrays.asList(user1CredentialInfo))));\n-\n-            env.kafkaClient().prepareResponse(new DescribeUserScramCredentialsResponse(responseData));\n-\n-            List<String> usersRequestedList = asList(user0Name, user1Name);\n-            Set<String> usersRequestedSet = usersRequestedList.stream().collect(Collectors.toSet());\n-            DescribeUserScramCredentialsResult result = env.adminClient().describeUserScramCredentials(usersRequestedList);\n-            Map<String, UserScramCredentialsDescription> descriptionResults = result.all().get();\n-            KafkaFuture<UserScramCredentialsDescription> user0DescriptionFuture = result.description(user0Name);\n-            KafkaFuture<UserScramCredentialsDescription> user1DescriptionFuture = result.description(user1Name);\n-            Set<String> usersDescribedFromUsersSet = result.users().get().stream().collect(Collectors.toSet());\n-            assertEquals(usersRequestedSet, usersDescribedFromUsersSet);\n-            Set<String> usersDescribedFromMapKeySet = descriptionResults.keySet();\n-            assertEquals(usersRequestedSet, usersDescribedFromMapKeySet);\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription0 = descriptionResults.get(user0Name);\n-            assertEquals(user0Name, userScramCredentialsDescription0.name());\n-            assertEquals(2, userScramCredentialsDescription0.credentialInfos().size());\n-            assertEquals(user0ScramMechanism0, userScramCredentialsDescription0.credentialInfos().get(0).mechanism());\n-            assertEquals(user0Iterations0, userScramCredentialsDescription0.credentialInfos().get(0).iterations());\n-            assertEquals(user0ScramMechanism1, userScramCredentialsDescription0.credentialInfos().get(1).mechanism());\n-            assertEquals(user0Iterations1, userScramCredentialsDescription0.credentialInfos().get(1).iterations());\n-            assertEquals(userScramCredentialsDescription0, user0DescriptionFuture.get());\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription1 = descriptionResults.get(user1Name);\n-            assertEquals(user1Name, userScramCredentialsDescription1.name());\n-            assertEquals(1, userScramCredentialsDescription1.credentialInfos().size());\n-            assertEquals(user1ScramMechanism, userScramCredentialsDescription1.credentialInfos().get(0).mechanism());\n-            assertEquals(user1Iterations, userScramCredentialsDescription1.credentialInfos().get(0).iterations());\n-            assertEquals(userScramCredentialsDescription1, user1DescriptionFuture.get());\n+                            .setCredentialInfos(singletonList(user1CredentialInfo))));\n+            final DescribeUserScramCredentialsResponse response = new DescribeUserScramCredentialsResponse(responseData);\n+\n+            final Set<String> usersRequestedSet = new HashSet<>();\n+            usersRequestedSet.add(user0Name);\n+            usersRequestedSet.add(user1Name);\n+\n+            for (final List<String> users : asList(null, new ArrayList<String>(), asList(user0Name, null, user1Name))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA4Nw=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNjI1MQ==", "bodyText": "We can rewrite it to a test factory, this way we can keep it in one function and reuse the initialization logic but will have n different tests being executed so that it is clear which one failed.", "url": "https://github.com/apache/kafka/pull/9374#discussion_r511806251", "createdAt": "2020-10-26T09:03:12Z", "author": {"login": "Fleshgrinder"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -4505,50 +4505,57 @@ public void testDescribeUserScramCredentials() throws Exception {\n             user0CredentialInfo1.setIterations(user0Iterations1);\n \n             final String user1Name = \"user1\";\n-            ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n-            int user1Iterations = 4096;\n+            final ScramMechanism user1ScramMechanism = ScramMechanism.SCRAM_SHA_256;\n+            final int user1Iterations = 4096;\n \n             final CredentialInfo user1CredentialInfo = new CredentialInfo();\n             user1CredentialInfo.setMechanism(user1ScramMechanism.type());\n             user1CredentialInfo.setIterations(user1Iterations);\n \n-            DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n+            final DescribeUserScramCredentialsResponseData responseData = new DescribeUserScramCredentialsResponseData();\n             responseData.setResults(Arrays.asList(\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user0Name)\n                             .setCredentialInfos(Arrays.asList(user0CredentialInfo0, user0CredentialInfo1)),\n                     new DescribeUserScramCredentialsResponseData.DescribeUserScramCredentialsResult()\n                             .setUser(user1Name)\n-                            .setCredentialInfos(Arrays.asList(user1CredentialInfo))));\n-\n-            env.kafkaClient().prepareResponse(new DescribeUserScramCredentialsResponse(responseData));\n-\n-            List<String> usersRequestedList = asList(user0Name, user1Name);\n-            Set<String> usersRequestedSet = usersRequestedList.stream().collect(Collectors.toSet());\n-            DescribeUserScramCredentialsResult result = env.adminClient().describeUserScramCredentials(usersRequestedList);\n-            Map<String, UserScramCredentialsDescription> descriptionResults = result.all().get();\n-            KafkaFuture<UserScramCredentialsDescription> user0DescriptionFuture = result.description(user0Name);\n-            KafkaFuture<UserScramCredentialsDescription> user1DescriptionFuture = result.description(user1Name);\n-            Set<String> usersDescribedFromUsersSet = result.users().get().stream().collect(Collectors.toSet());\n-            assertEquals(usersRequestedSet, usersDescribedFromUsersSet);\n-            Set<String> usersDescribedFromMapKeySet = descriptionResults.keySet();\n-            assertEquals(usersRequestedSet, usersDescribedFromMapKeySet);\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription0 = descriptionResults.get(user0Name);\n-            assertEquals(user0Name, userScramCredentialsDescription0.name());\n-            assertEquals(2, userScramCredentialsDescription0.credentialInfos().size());\n-            assertEquals(user0ScramMechanism0, userScramCredentialsDescription0.credentialInfos().get(0).mechanism());\n-            assertEquals(user0Iterations0, userScramCredentialsDescription0.credentialInfos().get(0).iterations());\n-            assertEquals(user0ScramMechanism1, userScramCredentialsDescription0.credentialInfos().get(1).mechanism());\n-            assertEquals(user0Iterations1, userScramCredentialsDescription0.credentialInfos().get(1).iterations());\n-            assertEquals(userScramCredentialsDescription0, user0DescriptionFuture.get());\n-\n-            UserScramCredentialsDescription userScramCredentialsDescription1 = descriptionResults.get(user1Name);\n-            assertEquals(user1Name, userScramCredentialsDescription1.name());\n-            assertEquals(1, userScramCredentialsDescription1.credentialInfos().size());\n-            assertEquals(user1ScramMechanism, userScramCredentialsDescription1.credentialInfos().get(0).mechanism());\n-            assertEquals(user1Iterations, userScramCredentialsDescription1.credentialInfos().get(0).iterations());\n-            assertEquals(userScramCredentialsDescription1, user1DescriptionFuture.get());\n+                            .setCredentialInfos(singletonList(user1CredentialInfo))));\n+            final DescribeUserScramCredentialsResponse response = new DescribeUserScramCredentialsResponse(responseData);\n+\n+            final Set<String> usersRequestedSet = new HashSet<>();\n+            usersRequestedSet.add(user0Name);\n+            usersRequestedSet.add(user1Name);\n+\n+            for (final List<String> users : asList(null, new ArrayList<String>(), asList(user0Name, null, user1Name))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTA4Nw=="}, "originalCommit": {"oid": "2d769ba80365f6aedef35fe3e5872d1a97389381"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1700, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}