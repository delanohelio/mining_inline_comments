{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTUxODA5", "number": 9388, "title": "KAFKA-10562: Properly invoke new StateStoreContext init", "bodyText": "all wrapping stores should pass StateStoreContext init through to the same\nmethod on the wrapped store and not translate it to ProcessorContext init\nbase-level stores should handle StateStoreContext init so that callers passing\na non-InternalProcessorContext implementation will be able to initialize the store\nextra tests are added to verify the desired behavior\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-07T03:23:35Z", "url": "https://github.com/apache/kafka/pull/9388", "merged": true, "mergeCommit": {"oid": "2804257fe221f37e5098bd3f633a5d76ca890634"}, "closed": true, "closedAt": "2020-10-08T04:06:54Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPqFWEgH2gAyNDk4OTUxODA5OjU5ZTNlMzRiNDRhNjg2Mjc3MThhN2Y3NmFlMzliMDg5MDZlOTdlZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQU8-2AFqTUwNDE1OTIwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "59e3e34b44a68627718a7f76ae39b08906e97ef5", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/59e3e34b44a68627718a7f76ae39b08906e97ef5", "committedDate": "2020-10-05T20:47:57Z", "message": "KAFKA-10562: Delegate store wrappers to new init method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e53cdf44111b9ca2a38424452bdb6f57b88498ff", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/e53cdf44111b9ca2a38424452bdb6f57b88498ff", "committedDate": "2020-10-05T21:13:51Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af662e15bdea5688b49d489ca8c2ce087dcaa2d6", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/af662e15bdea5688b49d489ca8c2ce087dcaa2d6", "committedDate": "2020-10-06T14:36:39Z", "message": "asdf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4448fd066d2839e8f15c29a7f91015023eb06f0", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/f4448fd066d2839e8f15c29a7f91015023eb06f0", "committedDate": "2020-10-06T16:58:05Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/4452d1b9337249d2cc6c801a9e08675425cdcbcf", "committedDate": "2020-10-07T03:19:03Z", "message": "done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430ca223ae45388809d6a258292aebfdd94a83ab", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/430ca223ae45388809d6a258292aebfdd94a83ab", "committedDate": "2020-10-07T03:32:10Z", "message": "remove redundant check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/ab093bc0610dfee1ccfa7199de59e1b2c417a3d0", "committedDate": "2020-10-07T03:33:21Z", "message": "use shared init method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDk4OTIx", "url": "https://github.com/apache/kafka/pull/9388#pullrequestreview-503498921", "createdAt": "2020-10-07T03:24:18Z", "commit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzoyNDoxOVrOHdhQtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzo0Njo1MlrOHdhkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTcwMg==", "bodyText": "This ticket needs to go in to 2.7.0 also, but I split it out for reviewability.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500715702", "createdAt": "2020-10-07T03:24:19Z", "author": {"login": "vvcephei"}, "path": "streams/examples/src/test/java/org/apache/kafka/streams/examples/wordcount/WordCountProcessorTest.java", "diffHunk": "@@ -34,6 +34,7 @@\n  * Demonstrate the use of {@link MockProcessorContext} for testing the {@link Processor} in the {@link WordCountProcessorDemo}.\n  */\n public class WordCountProcessorTest {\n+    @SuppressWarnings(\"deprecation\") // TODO will be fixed in KAFKA-10437", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNTg1Mg==", "bodyText": "Adding the deprecation tag right now lets us be sure we encountered all places this method appears in the codebase.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500715852", "createdAt": "2020-10-07T03:24:57Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/StateStore.java", "diffHunk": "@@ -65,7 +65,11 @@\n      *\n      * @throws IllegalStateException If store gets registered after initialized is already finished\n      * @throws StreamsException if the store's change log does not contain the partition\n+     * @deprecated Since 2.7.0. Callers should invoke {@link this#init(StateStoreContext, StateStore)} instead.\n+     *             Implementers may choose to implement this method for backward compatibility or to throw an\n+     *             informative exception instead.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjMyNg==", "bodyText": "There are going to be a lot of duplicated init methods. It's not great, but hopefully we can drop the old API before too long.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716326", "createdAt": "2020-10-07T03:27:01Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractReadOnlyDecorator.java", "diffHunk": "@@ -45,12 +46,19 @@ public void flush() {\n         throw new UnsupportedOperationException(ERROR_MESSAGE);\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n         throw new UnsupportedOperationException(ERROR_MESSAGE);\n     }\n \n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        throw new UnsupportedOperationException(ERROR_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjQ3Mg==", "bodyText": "Added a bunch of duplicated extractors here to help keep the implementation classes clean.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716472", "createdAt": "2020-10-07T03:27:45Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -47,9 +48,42 @@ public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context)\n         return (StreamsMetricsImpl) context.metrics();\n     }\n \n+    /**\n+     * Should be removed as part of KAFKA-10217\n+     */\n+    public static StreamsMetricsImpl getMetricsImpl(final StateStoreContext context) {\n+        return (StreamsMetricsImpl) context.metrics();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjYzNw==", "bodyText": "I replaced a lot of casts with this checked-cast method, which also lets us get rid of a lot of similar cast-checking blocks, which were inconsistently applied.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716637", "createdAt": "2020-10-07T03:28:28Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -47,9 +48,42 @@ public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context)\n         return (StreamsMetricsImpl) context.metrics();\n     }\n \n+    /**\n+     * Should be removed as part of KAFKA-10217\n+     */\n+    public static StreamsMetricsImpl getMetricsImpl(final StateStoreContext context) {\n+        return (StreamsMetricsImpl) context.metrics();\n+    }\n+\n     public static String changelogFor(final ProcessorContext context, final String storeName) {\n         return context instanceof InternalProcessorContext\n             ? ((InternalProcessorContext) context).changelogFor(storeName)\n             : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n     }\n+\n+    public static String changelogFor(final StateStoreContext context, final String storeName) {\n+        return context instanceof InternalProcessorContext\n+            ? ((InternalProcessorContext) context).changelogFor(storeName)\n+            : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n+    }\n+\n+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {\n+        if (context instanceof InternalProcessorContext) {\n+            return (InternalProcessorContext) context;\n+        } else {\n+            throw new IllegalArgumentException(\n+                \"This component requires internal features of Kafka Streams and must be disabled for unit tests.\"\n+            );\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjczMg==", "bodyText": "There are a handful of these also, just passing the deprecation on to the callers.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500716732", "createdAt": "2020-10-07T03:28:59Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/AbstractRocksDBSegmentedBytesStore.java", "diffHunk": "@@ -225,6 +225,7 @@ public String name() {\n         return name;\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODg3MQ==", "bodyText": "I was able to remove the type-dependency of the context by re-specifying the interface in terms of the only two properties it needed.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500718871", "createdAt": "2020-10-07T03:38:37Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/KeyValueSegment.java", "diffHunk": "@@ -45,10 +46,9 @@ public int compareTo(final KeyValueSegment segment) {\n     }\n \n     @Override\n-    public void openDB(final ProcessorContext context) {\n-        super.openDB(context);\n+    public void openDB(final Map<String, Object> configs, final File stateDir) {\n+        super.openDB(configs, stateDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ==", "bodyText": "I wasn't able to extract out quite as much common code in the Metered implementations because they need to work regardless of whether the context is an InternalProcessorContext or whether it's a straight mock (for unit tests).", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719195", "createdAt": "2020-10-07T03:40:11Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTMxNg==", "bodyText": "Here's the interface change that saved us from needing two openDB methods.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719316", "createdAt": "2020-10-07T03:40:44Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java", "diffHunk": "@@ -122,7 +122,7 @@\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    void openDB(final ProcessorContext context) {\n+    void openDB(final Map<String, Object> configs, final File stateDir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTcyMQ==", "bodyText": "This was actually a bug before, which this PR fixes: the wrapping layers should transmit the init call straight down, rather than translating it. There are a whole set of new unit tests making sure that this works properly for both the new and old init methods.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500719721", "createdAt": "2020-10-07T03:42:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalProcessorContextImplTest.java", "diffHunk": "@@ -147,7 +147,7 @@ public void shouldNotAllowToSchedulePunctuations() {\n     public void shouldNotAllowInitForKeyValueStore() {\n         final StateStore store = globalContext.getStateStore(GLOBAL_KEY_VALUE_STORE_NAME);\n         try {\n-            store.init((ProcessorContext) null, null);\n+            store.init((StateStoreContext) null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyMDc4Mg==", "bodyText": "These are the new unit tests I added to make sure that all the store builder wrappers transmit init calls correctly. They are frustratingly similar, but not exactly the same across different test classes because the test classes follow different idioms.\nI think it'd be nice to follow up with a general store-verification test that's parameterized by the exact store types so we can specify this test logic once and apply it to all the stores. That would also be handy for most of the rest of these tests. But I don't think we need to distract this PR with that concern.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r500720782", "createdAt": "2020-10-07T03:46:52Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/CachingKeyValueStoreTest.java", "diffHunk": "@@ -100,6 +100,31 @@ public void after() {\n         return store;\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void shouldDelegateDeprecatedInit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTU5MjA2", "url": "https://github.com/apache/kafka/pull/9388#pullrequestreview-504159206", "createdAt": "2020-10-07T18:30:53Z", "commit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDo1M1rOHeAa0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjozNzo1OFrOHeH8RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNjE5NQ==", "bodyText": "Thanks!", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501226195", "createdAt": "2020-10-07T18:30:53Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -47,9 +48,42 @@ public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context)\n         return (StreamsMetricsImpl) context.metrics();\n     }\n \n+    /**\n+     * Should be removed as part of KAFKA-10217\n+     */\n+    public static StreamsMetricsImpl getMetricsImpl(final StateStoreContext context) {\n+        return (StreamsMetricsImpl) context.metrics();\n+    }\n+\n     public static String changelogFor(final ProcessorContext context, final String storeName) {\n         return context instanceof InternalProcessorContext\n             ? ((InternalProcessorContext) context).changelogFor(storeName)\n             : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n     }\n+\n+    public static String changelogFor(final StateStoreContext context, final String storeName) {\n+        return context instanceof InternalProcessorContext\n+            ? ((InternalProcessorContext) context).changelogFor(storeName)\n+            : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName);\n+    }\n+\n+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {\n+        if (context instanceof InternalProcessorContext) {\n+            return (InternalProcessorContext) context;\n+        } else {\n+            throw new IllegalArgumentException(\n+                \"This component requires internal features of Kafka Streams and must be disabled for unit tests.\"\n+            );\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNjYzNw=="}, "originalCommit": {"oid": "4452d1b9337249d2cc6c801a9e08675425cdcbcf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyMjQ0Ng==", "bodyText": "Why not import static the function directly like in other classes?", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501322446", "createdAt": "2020-10-07T21:32:50Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryTimeOrderedKeyValueBuffer.java", "diffHunk": "@@ -29,7 +29,9 @@\n import org.apache.kafka.streams.kstream.internals.FullChangeSerde;\n import org.apache.kafka.streams.processor.ProcessorContext;\n import org.apache.kafka.streams.processor.StateStore;\n+import org.apache.kafka.streams.processor.StateStoreContext;\n import org.apache.kafka.streams.processor.internals.InternalProcessorContext;\n+import org.apache.kafka.streams.processor.internals.ProcessorContextUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NDUyOA==", "bodyText": "this.context seems only used in the e2e latency as\nfinal long e2eLatency =  currentTime - context.timestamp();\n\nAnd in that case we may throw a NPE. Should we augment the condition as\nif (e2eLatencySensor.shouldRecord() && context != null)", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501344528", "createdAt": "2020-10-07T22:25:17Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ=="}, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0NzIyOA==", "bodyText": "Actually I think we should remove the restoreSensor since we no longer restore the state upon init any more? In KIP-444 we no longer have it as a state-store level metric.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501347228", "createdAt": "2020-10-07T22:32:16Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();\n+        final Sensor restoreSensor =\n+            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n+\n+        // register and possibly restore the state from the logs\n+        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n+    }\n+\n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n+        taskId = context.taskId().toString();\n+        initStoreSerde(context);\n+        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n+\n+        registerMetrics();\n+        final Sensor restoreSensor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODY3MQ==", "bodyText": "NVM, I saw you already did this :)", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501348671", "createdAt": "2020-10-07T22:35:53Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -83,14 +85,40 @@\n         this.valueSerde = valueSerde;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         taskId = context.taskId().toString();\n         initStoreSerde(context);\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n+        registerMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxOTE5NQ=="}, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODc0MA==", "bodyText": "Ditto here.", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501348740", "createdAt": "2020-10-07T22:36:07Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java", "diffHunk": "@@ -68,26 +70,47 @@\n         this.time = time;\n     }\n \n+    @Deprecated\n     @Override\n     public void init(final ProcessorContext context,\n                      final StateStore root) {\n-        this.context = context;\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n         initStoreSerde(context);\n         taskId = context.taskId().toString();\n         streamsMetrics = (StreamsMetricsImpl) context.metrics();\n \n-        putSensor = StateStoreMetrics.putSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        fetchSensor = StateStoreMetrics.fetchSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        flushSensor = StateStoreMetrics.flushSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        removeSensor = StateStoreMetrics.removeSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n-        e2eLatencySensor = StateStoreMetrics.e2ELatencySensor(taskId, metricsScope, name(), streamsMetrics);\n+        registerMetrics();\n         final Sensor restoreSensor =\n             StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n \n         // register and possibly restore the state from the logs\n         maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n     }\n \n+    @Override\n+    public void init(final StateStoreContext context,\n+                     final StateStore root) {\n+        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n+        initStoreSerde(context);\n+        taskId = context.taskId().toString();\n+        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n+\n+        registerMetrics();\n+        final Sensor restoreSensor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTQ0NA==", "bodyText": "Thinking about this a bit more: is this.context only null in unit tests? It seems a bit overkill to let non-testing code to cope with testing code if yes..\nCould we let the mock class to extend from InternalProcessorContext as well?", "url": "https://github.com/apache/kafka/pull/9388#discussion_r501349444", "createdAt": "2020-10-07T22:37:58Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java", "diffHunk": "@@ -122,7 +158,7 @@ public boolean setFlushListener(final CacheFlushListener<Windowed<K>, V> listene\n     @Override\n     public void put(final K key,\n                     final V value) {\n-        put(key, value, context.timestamp());\n+        put(key, value, context != null ? context.timestamp() : 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab093bc0610dfee1ccfa7199de59e1b2c417a3d0"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 470, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}