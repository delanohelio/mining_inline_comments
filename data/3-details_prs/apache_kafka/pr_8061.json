{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTY1Mzkw", "number": 8061, "title": "KAFKA-9517: Fix default serdes with FK join", "bodyText": "During the KIP-213 implementation and verification, we neglected to test the code path for falling back to default serdes if none are given in the topology.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-02-07T19:30:45Z", "url": "https://github.com/apache/kafka/pull/8061", "merged": true, "mergeCommit": {"oid": "520a76155c66486cbcd0c519ef2980359964fd7c"}, "closed": true, "closedAt": "2020-02-10T21:33:23Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCEgaKgH2gAyMzcyNTY1MzkwOjBkZWViYzZjZmRmMmQxZDNiN2M4YTI5NzdhMWQ3OTY2NDIwYTQ0MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCva1pgH2gAyMzcyNTY1MzkwOjJjYzEzZTM4Njk2ZTM4MmE2OTk0M2E4NmQ3N2RjZGI1ODI2ZDFjZTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d", "committedDate": "2020-02-07T19:28:57Z", "message": "KAFKA-9517: Fix default serdes with FK join"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzkwMjkx", "url": "https://github.com/apache/kafka/pull/8061#pullrequestreview-355390291", "createdAt": "2020-02-07T19:37:24Z", "commit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTozNzoyNFrOFnIC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOTo0NTo0OVrOFnIRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDU4Mw==", "bodyText": "FK Join serialization utilities face the same challenge that we previously addressed in Changed(De)Serializer. Namely, that the wrapper (de)serializer is constructed during topology building, before the default serdes are available from config, so it needs to have a mechanism for updating the inner serde at run time, once the default serde is available.\nFK Join actually introduces several of these wrapper serdes, so rather than just pile on extra type-check branches, I created the concept of a (De)Serializer that wraps potentially null (De)Serializers. In the case that the inner serde is null, it could be set (once) to the default serde.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376570583", "createdAt": "2020-02-07T19:37:24Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java", "diffHunk": "@@ -66,10 +66,10 @@ public void init(final InternalProcessorContext context) {\n             valSerializer = (Serializer<V>) context.valueSerde().serializer();\n         }\n \n-        // if value serializers are for {@code Change} values, set the inner serializer when necessary\n-        if (valSerializer instanceof ChangedSerializer &&\n-                ((ChangedSerializer) valSerializer).inner() == null) {\n-            ((ChangedSerializer) valSerializer).setInner(context.valueSerde().serializer());\n+        // if value serializers are internal wrapping serializers that may need to be given the default serializer\n+        // then pass it the default one from the context\n+        if (valSerializer instanceof WrappingNullableSerializer) {\n+            ((WrappingNullableSerializer) valSerializer).setIfUnset(context.valueSerde().serializer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTAxNw==", "bodyText": "Having generalized this concept, I'm switching Changed(De)Serializer over to the general strategy.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376571017", "createdAt": "2020-02-07T19:38:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/ChangedDeserializer.java", "diffHunk": "@@ -35,8 +36,11 @@ public ChangedDeserializer(final Deserializer<T> inner) {\n         return inner;\n     }\n \n-    public void setInner(final Deserializer<T> inner) {\n-        this.inner = inner;\n+    @Override\n+    public void setIfUnset(final Deserializer<T> defaultDeserializer) {\n+        if (inner == null) {\n+            inner = Objects.requireNonNull(defaultDeserializer, \"defaultDeserializer cannot be null\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTY4Nw==", "bodyText": "In addition to the \"wrapping serializer\" change, there were several places where we would directly throw an NPE while attempting to get the serializer from the current DSL operator's nullable valSerde.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376571687", "createdAt": "2020-02-07T19:39:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java", "diffHunk": "@@ -969,7 +969,7 @@ boolean sendingOldValueEnabled() {\n                     foreignKeyExtractor,\n                     foreignKeySerde,\n                     subscriptionTopicName,\n-                    valSerde.serializer(),\n+                    valSerde == null ? null : valSerde.serializer(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MjI4OQ==", "bodyText": "This is a mixin that we can add to any internal serde that wraps external serdes, all of which are nullable at topology-build time, and would need to be set to the default serde later from the ProcessorContext.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376572289", "createdAt": "2020-02-07T19:41:19Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WrappingNullableSerializer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.common.serialization.Serializer;\n+\n+public interface WrappingNullableSerializer<Outer, Inner> extends Serializer<Outer> {\n+    void setIfUnset(final Serializer<Inner> defaultSerializer);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3Mjc1NA==", "bodyText": "In addition to the other issues I've pointed out, we also have a few places where we didn't account for nullability in the processors themselves.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376572754", "createdAt": "2020-02-07T19:42:24Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/ForeignJoinSubscriptionSendProcessorSupplier.java", "diffHunk": "@@ -77,6 +77,9 @@ public void init(final ProcessorContext context) {\n             if (foreignKeySerializer == null) {\n                 foreignKeySerializer = (Serializer<KO>) context.keySerde().serializer();\n             }\n+            if (valueSerializer == null ) {\n+                valueSerializer = (Serializer<V>) context.valueSerde().serializer();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MzM4OQ==", "bodyText": "The shema object isn't a Serde, but it's similar in that it wraps nullable user-provided (de)serializers, so it also needs to allow defaulting.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376573389", "createdAt": "2020-02-07T19:43:55Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionStoreReceiveProcessorSupplier.java", "diffHunk": "@@ -68,6 +68,8 @@ public void init(final ProcessorContext context) {\n                     internalProcessorContext.metrics()\n                 );\n                 store = internalProcessorContext.getStateStore(storeBuilder);\n+\n+                keySchema.init(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MzcxMw==", "bodyText": "Added this test in a separate class because the other tests are parameterized, but this one doesn't need to be.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376573713", "createdAt": "2020-02-07T19:44:43Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDefaultSerdeTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.TestInputTopic;\n+import org.apache.kafka.streams.TestOutputTopic;\n+import org.apache.kafka.streams.TopologyTestDriver;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KTableKTableForeignKeyJoinDefaultSerdeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDAyMQ==", "bodyText": "Pretty straightforward test; just make sure we can process some data end-to-end while relying on the default (de)serializer.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376574021", "createdAt": "2020-02-07T19:45:20Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDefaultSerdeTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.TestInputTopic;\n+import org.apache.kafka.streams.TestOutputTopic;\n+import org.apache.kafka.streams.TopologyTestDriver;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KTableKTableForeignKeyJoinDefaultSerdeTest {\n+    @Test\n+    public void shouldWorkWithDefaultSerdes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDI1Ng==", "bodyText": "Suggested change", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376574256", "createdAt": "2020-02-07T19:45:49Z", "author": {"login": "vvcephei"}, "path": "streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java", "diffHunk": "@@ -1209,7 +1209,7 @@ private void pipeInput(final String topic, final String key, final Long value, f\n         testDriver.pipeRecord(topic, new TestRecord<>(key, value, null, time),\n                 new StringSerializer(), new LongSerializer(), null);\n     }\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0deebc6cfdf2d1d3b7c8a2977a1d7966420a440d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afcf118a061d41d4ec1d8f7b582c757b87a19096", "author": {"user": {"login": "vvcephei", "name": "John Roesler"}}, "url": "https://github.com/apache/kafka/commit/afcf118a061d41d4ec1d8f7b582c757b87a19096", "committedDate": "2020-02-07T19:47:06Z", "message": "Update streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4f945ad1beaca21ca18c073b4fa4ec5cd8a10b", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/dd4f945ad1beaca21ca18c073b4fa4ec5cd8a10b", "committedDate": "2020-02-07T22:06:09Z", "message": "formatting fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjMzNTc3", "url": "https://github.com/apache/kafka/pull/8061#pullrequestreview-355633577", "createdAt": "2020-02-09T21:06:56Z", "commit": {"oid": "dd4f945ad1beaca21ca18c073b4fa4ec5cd8a10b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowNjo1NlrOFnW_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowNjo1NlrOFnW_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTQxOQ==", "bodyText": "Thanks for the test @vvcephei.  Just for a sanity check, what do think about adding some additional tests where we do some permutations with default vs. provided serdes.  For example Table 1 provides serdes via consumed but writes using defaults etc.", "url": "https://github.com/apache/kafka/pull/8061#discussion_r376815419", "createdAt": "2020-02-09T21:06:56Z", "author": {"login": "bbejeck"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KTableKTableForeignKeyJoinDefaultSerdeTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.TestInputTopic;\n+import org.apache.kafka.streams.TestOutputTopic;\n+import org.apache.kafka.streams.TopologyTestDriver;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class KTableKTableForeignKeyJoinDefaultSerdeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd4f945ad1beaca21ca18c073b4fa4ec5cd8a10b"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc13e38696e382a69943a86d77dcdb5826d1ce8", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/2cc13e38696e382a69943a86d77dcdb5826d1ce8", "committedDate": "2020-02-09T21:28:47Z", "message": "add extra test cases"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1798, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}