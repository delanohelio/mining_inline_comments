{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzEwMjQ4", "number": 9606, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1NTo1MlrOE6RR9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0OTo0NlrOFIthCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM1OTg5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1NTo1MlrOH1O4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyNDo1OFrOH_e4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDM0Mw==", "bodyText": "Should apply the same improvement to reduce() and count() overloads? Also for CogroupedKStream#aggregate()?\nWhat about TimeWindowedKStream and TimeWindowedCogroupedKStream ?\nAlso StreamsBuilder#table() (and #globalTable()) might need an update?", "url": "https://github.com/apache/kafka/pull/9606#discussion_r525580343", "createdAt": "2020-11-17T22:55:52Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -381,7 +381,8 @@\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by\n+     * an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MzUxMQ==", "bodyText": "Yes, this should be probably done. But since I don't know how they work and what to write there, I'd prefer to do it in another PR (or someone else should do it).", "url": "https://github.com/apache/kafka/pull/9606#discussion_r525873511", "createdAt": "2020-11-18T07:48:44Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -381,7 +381,8 @@\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by\n+     * an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDM0Mw=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5NjY4NA==", "bodyText": "reduce() and count() are similar to aggregate(): reduce only does not allow you to change the value type (ie, output type == input type) and count, well implements an aggregate() that counts :)\nAnd they all work the same for KGroupedStream, CogroupedKStream, TimeWindowedKStream and TimeWindowedCoGroupedKStream.\ntable() and globalTable() just read a topic and upsert the data into a state store / table.\nSo it would be great to do them all in one PR?", "url": "https://github.com/apache/kafka/pull/9606#discussion_r532996684", "createdAt": "2020-12-01T00:40:01Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -381,7 +381,8 @@\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by\n+     * an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDM0Mw=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NjgyNQ==", "bodyText": "I'd prefer to commit this chages and create an issue referring to this PR. What do you think?", "url": "https://github.com/apache/kafka/pull/9606#discussion_r534476825", "createdAt": "2020-12-02T20:58:18Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -381,7 +381,8 @@\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by\n+     * an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDM0Mw=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODI0Mg==", "bodyText": "We can still do multiple PRs -- feel free to open them in parallel reusing the existing JIRA ticket.\nWill hold off to merge this because if we can detect other things we need to change in the other PRs, we can keep the applied changes in-sync more easily.", "url": "https://github.com/apache/kafka/pull/9606#discussion_r536328242", "createdAt": "2020-12-04T19:24:58Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -381,7 +381,8 @@\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by\n+     * an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDM0Mw=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM2MTk1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo1NjozMVrOH1O5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMDo0MDozNVrOH8TjJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDY0Mg==", "bodyText": "{@materialized} is not valid markup as far as I know. Should we {@code materialized}? (same below)", "url": "https://github.com/apache/kafka/pull/9606#discussion_r525580642", "createdAt": "2020-11-17T22:56:31Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -438,7 +439,8 @@\n      * query the value of the key on a parallel running instance of your Kafka Streams application.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore} -- regardless of what\n+     * is specified in the parameter {@materialized}) will be backed by an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MzgzMQ==", "bodyText": "Yes, actually, I wanted to write this but somehow... I will correct it. Shoudl I then squash the commits?", "url": "https://github.com/apache/kafka/pull/9606#discussion_r525873831", "createdAt": "2020-11-18T07:49:25Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -438,7 +439,8 @@\n      * query the value of the key on a parallel running instance of your Kafka Streams application.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore} -- regardless of what\n+     * is specified in the parameter {@materialized}) will be backed by an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDY0Mg=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjM5OQ==", "bodyText": "Done", "url": "https://github.com/apache/kafka/pull/9606#discussion_r525882399", "createdAt": "2020-11-18T08:06:08Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -438,7 +439,8 @@\n      * query the value of the key on a parallel running instance of your Kafka Streams application.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore} -- regardless of what\n+     * is specified in the parameter {@materialized}) will be backed by an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDY0Mg=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5NjkwMQ==", "bodyText": "No need to squash commits. We squash them automatically when merging.", "url": "https://github.com/apache/kafka/pull/9606#discussion_r532996901", "createdAt": "2020-12-01T00:40:35Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KGroupedStream.java", "diffHunk": "@@ -438,7 +439,8 @@\n      * query the value of the key on a parallel running instance of your Kafka Streams application.\n      *\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore} -- regardless of what\n+     * is specified in the parameter {@materialized}) will be backed by an internal changelog topic that will be created in Kafka.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDY0Mg=="}, "originalCommit": {"oid": "f353f285f34564c35145083a0005593df5de086f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njc4MTY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedCogroupedKStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0ODo0N1rOIKyRjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMjowNjoxMlrOIK4ZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MDM2NA==", "bodyText": "For time-windows, it would be a TimestampedWindowStore (not tkv-store). (same below for the other method of this class)\nNote the signature of Materialized<K, V, WindowStore<Bytes, byte[]>> that uses WindowStore, not KeyValueStore.", "url": "https://github.com/apache/kafka/pull/9606#discussion_r548180364", "createdAt": "2020-12-23T19:48:47Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedCogroupedKStream.java", "diffHunk": "@@ -77,7 +77,8 @@\n      * {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG cache size}, and\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf0ecaff26572b416beffeab6d12dc85a1e8f4b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI4MDU4OA==", "bodyText": "Updated", "url": "https://github.com/apache/kafka/pull/9606#discussion_r548280588", "createdAt": "2020-12-23T22:06:12Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedCogroupedKStream.java", "diffHunk": "@@ -77,7 +77,8 @@\n      * {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG cache size}, and\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MDM2NA=="}, "originalCommit": {"oid": "bbf0ecaff26572b416beffeab6d12dc85a1e8f4b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njc4NjY1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedKStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0OTo0NlrOIKyU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMjowNjoyM1rOIK4Zfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MTIxOA==", "bodyText": "As above. Should we TimestampedWindowStore for this class.", "url": "https://github.com/apache/kafka/pull/9606#discussion_r548181218", "createdAt": "2020-12-23T19:49:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedKStream.java", "diffHunk": "@@ -67,7 +67,8 @@\n      * {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG cache size}, and\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf0ecaff26572b416beffeab6d12dc85a1e8f4b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI4MDcwMg==", "bodyText": "Updated", "url": "https://github.com/apache/kafka/pull/9606#discussion_r548280702", "createdAt": "2020-12-23T22:06:23Z", "author": {"login": "fml2"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedKStream.java", "diffHunk": "@@ -67,7 +67,8 @@\n      * {@link StreamsConfig#CACHE_MAX_BYTES_BUFFERING_CONFIG cache size}, and\n      * {@link StreamsConfig#COMMIT_INTERVAL_MS_CONFIG commit intervall}.\n      * <p>\n-     * For failure and recovery the store will be backed by an internal changelog topic that will be created in Kafka.\n+     * For failure and recovery the store (which always will be of type {@link TimestampedKeyValueStore}) will be backed by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE4MTIxOA=="}, "originalCommit": {"oid": "bbf0ecaff26572b416beffeab6d12dc85a1e8f4b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3869, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}