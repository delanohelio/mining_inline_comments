{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDc2Njg3", "number": 8629, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowMzoyNVrOD6UTmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0MTowNlrOD6VNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDc2Njk2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowMzoyNVrOGSFmwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjowMzoyNVrOGSFmwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxOTM5Mw==", "bodyText": "I assume this was unintentional.", "url": "https://github.com/apache/kafka/pull/8629#discussion_r421619393", "createdAt": "2020-05-07T16:03:25Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -260,7 +260,7 @@ public synchronized int sendFetches() {\n             }\n             RequestFuture<ClientResponse> future = client.send(fetchTarget, request);\n             // We add the node to the set of nodes with pending fetch requests before adding the\n-            // listener because the future may have been fulfilled on another thread (e.g. during a\n+            // listenerbecause the future may have been fulfilled on another thread (e.g. during a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662364f34c93783cf9ef99377443c102b30afa7d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDkxNDA0OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo0MTowNlrOGSHFBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1OTozN1rOGSHxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0MzUyNg==", "bodyText": "I feel logging all of the records even at TRACE level will be too much. For example, our system tests often have TRACE enabled. Huge single-line log messages are difficult to consume both visually and in systems like elastic.", "url": "https://github.com/apache/kafka/pull/8629#discussion_r421643526", "createdAt": "2020-05-07T16:41:06Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -676,13 +676,15 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n             if (completedFetch.nextFetchOffset == position.offset) {\n                 List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n \n+                log.trace(\"Returning fetched records {} at offset {} for assigned partition {}\",\n+                        partRecords, position, completedFetch.partition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662364f34c93783cf9ef99377443c102b30afa7d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDkzMg==", "bodyText": "Makes sense, it is primarily for my local debugging of an integration test which only sends a couple records. I will only print the num.records instead.", "url": "https://github.com/apache/kafka/pull/8629#discussion_r421654932", "createdAt": "2020-05-07T16:59:37Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java", "diffHunk": "@@ -676,13 +676,15 @@ private ListOffsetResult fetchOffsetsByTimes(Map<TopicPartition, Long> timestamp\n             if (completedFetch.nextFetchOffset == position.offset) {\n                 List<ConsumerRecord<K, V>> partRecords = completedFetch.fetchRecords(maxRecords);\n \n+                log.trace(\"Returning fetched records {} at offset {} for assigned partition {}\",\n+                        partRecords, position, completedFetch.partition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY0MzUyNg=="}, "originalCommit": {"oid": "662364f34c93783cf9ef99377443c102b30afa7d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2911, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}