{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTEyNjU2", "number": 9083, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo0OToyM1rOEj3aMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxNTo1NFrOEpJiZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQzNDQyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo0OToyNFrOHSeFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo0OToyNFrOHSeFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyOTM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If the checkpoint has been loaded form the file and has never been re-written (empty map), then we should re-write the checkpoint;\n          \n          \n            \n                 * If the checkpoint has been loaded from the file and has never been re-written (empty map), then we should re-write the checkpoint;", "url": "https://github.com/apache/kafka/pull/9083#discussion_r489129386", "createdAt": "2020-09-16T02:49:24Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java", "diffHunk": "@@ -37,6 +37,7 @@\n \n     /**\n      * If the checkpoint has not been loaded from the file yet (null), then we should not overwrite the checkpoint;\n+     * If the checkpoint has been loaded form the file and has never been re-written (empty map), then we should re-write the checkpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ0MTg4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1MzoyNVrOHSeJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMzoyMTowN1rOHU3uOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDQ5Mg==", "bodyText": "Rebasing error?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r489130492", "createdAt": "2020-09-16T02:53:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,7 +217,7 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);\n+                final ProcessorNode child = currentNode().getChild(sendTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0NjUyMw==", "bodyText": "This is because I added the typing in line 98 of ProcessorNode below, I will revert it back and update the line below in forward.", "url": "https://github.com/apache/kafka/pull/9083#discussion_r491646523", "createdAt": "2020-09-20T03:21:07Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,7 +217,7 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);\n+                final ProcessorNode child = currentNode().getChild(sendTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDQ5Mg=="}, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ0NDY4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1NTowMVrOHSeLrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1NTowMVrOHSeLrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMDkyNg==", "bodyText": "Should we throwIfClosed() at the beginning of close() too?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r489130926", "createdAt": "2020-09-16T02:55:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "diffHunk": "@@ -149,10 +155,20 @@ public void close() {\n         } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ0NzM1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1NjoyM1rOHSeNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMzo0Mjo1NVrOHU3zaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTMxOQ==", "bodyText": "Why does this need to change?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r489131319", "createdAt": "2020-09-16T02:56:23Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1310,9 +1310,11 @@ public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n         EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n         stateManager.checkpoint();\n         EasyMock.expectLastCall().once();\n+        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0Nzg0OA==", "bodyText": "My bad, will revert.", "url": "https://github.com/apache/kafka/pull/9083#discussion_r491647848", "createdAt": "2020-09-20T03:42:55Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1310,9 +1310,11 @@ public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n         EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n         stateManager.checkpoint();\n         EasyMock.expectLastCall().once();\n+        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTMxOQ=="}, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ1MDI2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjo1ODowOFrOHSeO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMzo0Mjo0OFrOHU3zXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTc1MA==", "bodyText": "Should we assert that it's in closed when init is called?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r489131750", "createdAt": "2020-09-16T02:58:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "diffHunk": "@@ -118,6 +120,10 @@ public void init(final InternalProcessorContext context) {\n         } catch (final Exception e) {\n             throw new StreamsException(String.format(\"failed to initialize processor %s\", name), e);\n         }\n+\n+        // revived tasks could re-initialize the topology,\n+        // in which case we should reset the flag\n+        closed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0NzgzNw==", "bodyText": "SG.", "url": "https://github.com/apache/kafka/pull/9083#discussion_r491647837", "createdAt": "2020-09-20T03:42:48Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java", "diffHunk": "@@ -118,6 +120,10 @@ public void init(final InternalProcessorContext context) {\n         } catch (final Exception e) {\n             throw new StreamsException(String.format(\"failed to initialize processor %s\", name), e);\n         }\n+\n+        // revived tasks could re-initialize the topology,\n+        // in which case we should reset the flag\n+        closed = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTc1MA=="}, "originalCommit": {"oid": "007dde706d72a2cfb9175111abd2ee2d8174b00c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDcxOTgyOnYy", "diffSide": "LEFT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTowNDoyOFrOHVeijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyMzo1M1rOHWG8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MjUxMQ==", "bodyText": "Why change the K, V to ?, ? -- and if we don't do that, do we still need the cast in the forward call down below?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492282511", "createdAt": "2020-09-21T19:04:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,12 +217,12 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MjE0MQ==", "bodyText": "+1", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492942141", "createdAt": "2020-09-22T18:20:11Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,12 +217,12 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MjUxMQ=="}, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDUwNA==", "bodyText": "I made the change in ProcessorNode to add back the template types: https://github.com/apache/kafka/pull/9083/files/82b6f6f5d238401097e0906c8135c5c189524666#diff-705bfd0ed3f214048b76d775708cc7d2L96\nBut since currentNode()'s template is <?, ?, ?, ?> its templated getChild and that's why I need to weaken it here --- as you can see from the above if branch, it now aligns consistently on the typing.", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492944504", "createdAt": "2020-09-22T18:23:53Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,12 +217,12 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MjUxMQ=="}, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTAwNjQyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoxODo1NlrOHWGwiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoxODo1NlrOHWGwiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MTQ0OA==", "bodyText": "nit: not necessary", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492941448", "createdAt": "2020-09-22T18:18:56Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1566,6 +1566,7 @@ public void shouldCheckpointForSuspendedTask() {\n         EasyMock.verify(stateManager);\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTAxODQwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamFlatTransformValues.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyMjowMlrOHWG35w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMjo1MlrOHWHSOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MzMzNQ==", "bodyText": "Could you elaborate why this is better than Processor?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492943335", "createdAt": "2020-09-22T18:22:02Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamFlatTransformValues.java", "diffHunk": "@@ -44,19 +45,18 @@ public KStreamFlatTransformValues(final ValueTransformerWithKeySupplier<KIn, VIn\n         return valueTransformerSupplier.stores();\n     }\n \n-    public static class KStreamFlatTransformValuesProcessor<KIn, VIn, VOut> implements Processor<KIn, VIn> {\n+    public static class KStreamFlatTransformValuesProcessor<KIn, VIn, VOut> extends AbstractProcessor<KIn, VIn> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MDA3Mw==", "bodyText": "As described in at the top, Let all built-in processors to extend from AbstractProcessor. The main reason is that AbstractProcessor provides some basic functionalities and hence it's better to let our own impl to base on them.", "url": "https://github.com/apache/kafka/pull/9083#discussion_r492950073", "createdAt": "2020-09-22T18:32:52Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamFlatTransformValues.java", "diffHunk": "@@ -44,19 +45,18 @@ public KStreamFlatTransformValues(final ValueTransformerWithKeySupplier<KIn, VIn\n         return valueTransformerSupplier.stores();\n     }\n \n-    public static class KStreamFlatTransformValuesProcessor<KIn, VIn, VOut> implements Processor<KIn, VIn> {\n+    public static class KStreamFlatTransformValuesProcessor<KIn, VIn, VOut> extends AbstractProcessor<KIn, VIn> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MzMzNQ=="}, "originalCommit": {"oid": "82b6f6f5d238401097e0906c8135c5c189524666"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTgzMzM0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxNTo1NFrOHapwsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxNTo1NFrOHapwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwOTIzNQ==", "bodyText": "@guozhangwang It's weird to remove the types above and add a cast here. Seems like a step backward with regard to type safety. Not sure if @vvcephei's changes would fix it?", "url": "https://github.com/apache/kafka/pull/9083#discussion_r497709235", "createdAt": "2020-09-30T18:15:54Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -217,12 +217,12 @@ public StateStore getStateStore(final String name) {\n                     forward((ProcessorNode<K, V, ?, ?>) child, key, value);\n                 }\n             } else {\n-                final ProcessorNode<K, V, ?, ?> child = currentNode().getChild(sendTo);\n+                final ProcessorNode<?, ?, ?, ?> child = currentNode().getChild(sendTo);\n                 if (child == null) {\n                     throw new StreamsException(\"Unknown downstream node: \" + sendTo\n                         + \" either does not exist or is not connected to this processor.\");\n                 }\n-                forward(child, key, value);\n+                forward((ProcessorNode<K, V, ?, ?>) child, key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ca04a7452c3aa18a4995e8a8c8a65d3a5354ed"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2025, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}