{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMTE2NTkx", "number": 8039, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MDo0NVrODdL9HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozMzozOFrODeUafQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTMxMTY1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MDo0NVrOFlpWig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTo0NTowOFrOFmP3IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTE0Ng==", "bodyText": "This added test will fail without the fix.", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375019146", "createdAt": "2020-02-05T01:40:45Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -132,7 +141,49 @@ public void shouldCreateRequiredTopics() throws Exception {\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_DELETE), mockAdminClient.describeConfigs(Collections.singleton(resource)).values().get(resource).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT), mockAdminClient.describeConfigs(Collections.singleton(resource2)).values().get(resource2).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT + \",\" + TopicConfig.CLEANUP_POLICY_DELETE), mockAdminClient.describeConfigs(Collections.singleton(resource3)).values().get(resource3).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n+    }\n \n+    @Test\n+    public void shouldRetryValidatingTopics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e301c73ef96947f5c8e026ff61ae58cfdb656e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MDA4MA==", "bodyText": "nit: Can we rename to topicValidationShouldCompleteOnRetry (or something)?", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375650080", "createdAt": "2020-02-06T05:45:08Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopicManagerTest.java", "diffHunk": "@@ -132,7 +141,49 @@ public void shouldCreateRequiredTopics() throws Exception {\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_DELETE), mockAdminClient.describeConfigs(Collections.singleton(resource)).values().get(resource).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT), mockAdminClient.describeConfigs(Collections.singleton(resource2)).values().get(resource2).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n         assertEquals(new ConfigEntry(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT + \",\" + TopicConfig.CLEANUP_POLICY_DELETE), mockAdminClient.describeConfigs(Collections.singleton(resource3)).values().get(resource3).get().get(TopicConfig.CLEANUP_POLICY_CONFIG));\n+    }\n \n+    @Test\n+    public void shouldRetryValidatingTopics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTE0Ng=="}, "originalCommit": {"oid": "61e301c73ef96947f5c8e026ff61ae58cfdb656e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTMxMjgxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MToyOFrOFlpXSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTo0NTo1NlrOFmP35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTMzOA==", "bodyText": "This is the actual fix: we should not loop over the global topic-map but only the remaining topics-to-validate. cc @ableegoldman", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375019338", "createdAt": "2020-02-05T01:41:28Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {\n+            throw new IllegalStateException(\"The topics map \" + topicsMap + \" does not contain all the topics \" +\n+                topicsToValidate + \" trying to validate.\");\n+        }\n \n         final Map<String, Integer> existedTopicPartition = getNumPartitions(topicsToValidate);\n \n         final Set<String> topicsToCreate = new HashSet<>();\n-        for (final Map.Entry<String, InternalTopicConfig> entry : topicsMap.entrySet()) {\n-            final String topicName = entry.getKey();\n-            final Optional<Integer> numberOfPartitions = entry.getValue().numberOfPartitions();\n+        for (final String topicName : topicsToValidate) {\n+            final Optional<Integer> numberOfPartitions = topicsMap.get(topicName).numberOfPartitions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e301c73ef96947f5c8e026ff61ae58cfdb656e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MDI3Nw==", "bodyText": "Yikes, nice find! I'm pretty sure this is behind that C3 issue. I'm sure there's a good reason for them to race against Streams in the internal topic creation...", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375650277", "createdAt": "2020-02-06T05:45:56Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {\n+            throw new IllegalStateException(\"The topics map \" + topicsMap + \" does not contain all the topics \" +\n+                topicsToValidate + \" trying to validate.\");\n+        }\n \n         final Map<String, Integer> existedTopicPartition = getNumPartitions(topicsToValidate);\n \n         final Set<String> topicsToCreate = new HashSet<>();\n-        for (final Map.Entry<String, InternalTopicConfig> entry : topicsMap.entrySet()) {\n-            final String topicName = entry.getKey();\n-            final Optional<Integer> numberOfPartitions = entry.getValue().numberOfPartitions();\n+        for (final String topicName : topicsToValidate) {\n+            final Optional<Integer> numberOfPartitions = topicsMap.get(topicName).numberOfPartitions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTMzOA=="}, "originalCommit": {"oid": "61e301c73ef96947f5c8e026ff61ae58cfdb656e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTMxNDYyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MjozMFrOFlpYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTo0MjozMFrOFlpYTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxOTU5OQ==", "bodyText": "I found this debug line very crucial; and in other clients (producer, consumer) the same line indicating when we actual put the request to the send queue was set at debug level as well, so I've changed it to also debug.", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375019599", "createdAt": "2020-02-05T01:42:30Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1037,7 +1037,7 @@ private long sendEligibleCalls(long now) {\n                 }\n                 ClientRequest clientRequest = client.newClientRequest(node.idString(), requestBuilder, now,\n                         true, requestTimeoutMs, null);\n-                log.trace(\"Sending {} to {}. correlationId={}\", requestBuilder, node, clientRequest.correlationId());\n+                log.debug(\"Sending {} to {}. correlationId={}\", requestBuilder, node, clientRequest.correlationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e301c73ef96947f5c8e026ff61ae58cfdb656e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTU4ODM3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToxMDo1NlrOFlr9fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMToxNDoxNlrOFnYQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTg4Ng==", "bodyText": "I'd have to make these constructors public in order to mock the response in the unit test", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375061886", "createdAt": "2020-02-05T05:10:56Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private final Map<String, KafkaFuture<TopicMetadataAndConfig>> futures;\n \n-    CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {\n+    public CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03157b73037f6d08824137af9c07b2da3b0cc44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzMzYwNA==", "bodyText": "What about making it protected instead and mock a sub-class? CreateTopicsResults is part of the public API and we might not want to make them public (would this be a public API change?)", "url": "https://github.com/apache/kafka/pull/8039#discussion_r376833604", "createdAt": "2020-02-10T00:48:49Z", "author": {"login": "mjsax"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private final Map<String, KafkaFuture<TopicMetadataAndConfig>> futures;\n \n-    CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {\n+    public CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTg4Ng=="}, "originalCommit": {"oid": "c03157b73037f6d08824137af9c07b2da3b0cc44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgzNjE2MQ==", "bodyText": "Yeah that's a good idea! Let me try that out.", "url": "https://github.com/apache/kafka/pull/8039#discussion_r376836161", "createdAt": "2020-02-10T01:14:16Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private final Map<String, KafkaFuture<TopicMetadataAndConfig>> futures;\n \n-    CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {\n+    public CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> futures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTg4Ng=="}, "originalCommit": {"oid": "c03157b73037f6d08824137af9c07b2da3b0cc44"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjAwMjUwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo1Mzo1NFrOFmDPgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowODozN1rOFmDslQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MzMyOQ==", "bodyText": "Do we still need to pass in the topicsMap, as we are no longer looping it?", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375443329", "createdAt": "2020-02-05T18:53:54Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c71acfbbd5a1f36508ad4a969b3513fa21a3471"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDIyNg==", "bodyText": "Yes we need the InternalTopicConfig object from it :)", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375450226", "createdAt": "2020-02-05T19:07:28Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MzMyOQ=="}, "originalCommit": {"oid": "8c71acfbbd5a1f36508ad4a969b3513fa21a3471"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDc3Mw==", "bodyText": "More specifically we need the numberOfPartitions to compare.", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375450773", "createdAt": "2020-02-05T19:08:37Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MzMyOQ=="}, "originalCommit": {"oid": "8c71acfbbd5a1f36508ad4a969b3513fa21a3471"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzMxMzgzOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozNzoxMlrOFmPw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTozNzoxMlrOFmPw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0ODQ5MA==", "bodyText": "req: Can we log an error with the two topics sets (topicsMap.keySet and topicsToValidate), and then just say what happened in the exception message? Logging the entire map in the exception message will be pretty ugly", "url": "https://github.com/apache/kafka/pull/8039#discussion_r375648490", "createdAt": "2020-02-06T05:37:12Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -217,15 +216,17 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n     /**\n      * Check the existing topics to have correct number of partitions; and return the remaining topics that needs to be created\n      */\n-    private Set<String> validateTopics(final Set<String> topicsToValidate,\n-                                       final Map<String, InternalTopicConfig> topicsMap) {\n+    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n+        if (!topicsMap.keySet().containsAll(topicsToValidate)) {\n+            throw new IllegalStateException(\"The topics map \" + topicsMap + \" does not contain all the topics \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c71acfbbd5a1f36508ad4a969b3513fa21a3471"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTE4MzMzOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozMzozOFrOFnY74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwMjozMzozOFrOFnY74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg0NzMzMQ==", "bodyText": "This still needs to be public: I looked at other similar objects in XXXResult in admin.", "url": "https://github.com/apache/kafka/pull/8039#discussion_r376847331", "createdAt": "2020-02-10T02:33:38Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -94,7 +94,7 @@\n         return futures.get(topic).thenApply(TopicMetadataAndConfig::replicationFactor);\n     }\n \n-    static class TopicMetadataAndConfig {\n+    public static class TopicMetadataAndConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5020282dc4feaf9eee4e71c2d5a788171138234"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4188, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}