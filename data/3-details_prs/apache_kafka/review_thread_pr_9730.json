{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDAyNDM0", "number": 9730, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDo1NFrOFDziIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDo1NFrOFDziIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTM0MzY5OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDoxMDo1NFrOIDoTLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzoxNTo1MVrOIGrk0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjkwOA==", "bodyText": "How about using .collect(Collectors.joining(\",\")?", "url": "https://github.com/apache/kafka/pull/9730#discussion_r540676908", "createdAt": "2020-12-11T04:10:54Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1045,8 +1045,8 @@ private void checkResultPerKey(final List<KeyValue<Long, Long>> result,\n                 assertThat(getAllRecordPerKey(key, result), equalTo(getAllRecordPerKey(key, expectedResult)));\n             } catch (final AssertionError error) {\n                 throw new AssertionError(\n-                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv) +\n-                    \"\\nreceived records: \" + result.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv),\n+                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (str, kv) -> str.isEmpty() ? kv : str + \", \" + kv) +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a83dfc3927af6f390b95a576f63decd98c786c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3MTU5OQ==", "bodyText": "Still a noob using the JavaStream API... Does this only use the separator if there are more than one element?", "url": "https://github.com/apache/kafka/pull/9730#discussion_r543871599", "createdAt": "2020-12-16T03:09:01Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1045,8 +1045,8 @@ private void checkResultPerKey(final List<KeyValue<Long, Long>> result,\n                 assertThat(getAllRecordPerKey(key, result), equalTo(getAllRecordPerKey(key, expectedResult)));\n             } catch (final AssertionError error) {\n                 throw new AssertionError(\n-                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv) +\n-                    \"\\nreceived records: \" + result.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv),\n+                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (str, kv) -> str.isEmpty() ? kv : str + \", \" + kv) +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjkwOA=="}, "originalCommit": {"oid": "4a83dfc3927af6f390b95a576f63decd98c786c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3NjMwNQ==", "bodyText": "Does this only use the separator if there are more than one element?\n\nyep", "url": "https://github.com/apache/kafka/pull/9730#discussion_r543876305", "createdAt": "2020-12-16T03:15:51Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1045,8 +1045,8 @@ private void checkResultPerKey(final List<KeyValue<Long, Long>> result,\n                 assertThat(getAllRecordPerKey(key, result), equalTo(getAllRecordPerKey(key, expectedResult)));\n             } catch (final AssertionError error) {\n                 throw new AssertionError(\n-                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv) +\n-                    \"\\nreceived records: \" + result.stream().map(KeyValue::toString).reduce(\"\", (kv, str) -> str.isEmpty() ? kv : str + \", \" + kv),\n+                    \"expected result: \" + expectedResult.stream().map(KeyValue::toString).reduce(\"\", (str, kv) -> str.isEmpty() ? kv : str + \", \" + kv) +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY3NjkwOA=="}, "originalCommit": {"oid": "4a83dfc3927af6f390b95a576f63decd98c786c4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3459, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}