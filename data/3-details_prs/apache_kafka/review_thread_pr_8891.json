{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTY1Njg5", "number": 8891, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDowM1rOEG1xOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTowMzoxNlrOEsO3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA3ODY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDowM1rOGl4nQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMDowM1rOGl4nQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODA0OA==", "bodyText": "It would be good to include the flags needed to pass in a throttle in this message", "url": "https://github.com/apache/kafka/pull/8891#discussion_r442378048", "createdAt": "2020-06-18T17:10:03Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -930,6 +935,38 @@ object ReassignPartitionsCommand extends Logging {\n     (brokerListToReassign, topicsToReassign)\n   }\n \n+  /**\n+   * The entry point for --alter-throttles. At least one throttle value must be provided.\n+   *\n+   * @param admin The Admin instance to use\n+   * @param interBrokerThrottle The new inter-broker throttle or -1 to leave it unchanged\n+   * @param logDirThrottle The new alter-log-dir throttle or -1 to leave it unchanged\n+   */\n+  def alterThrottles(admin: Admin,\n+                     interBrokerThrottle: Long,\n+                     logDirThrottle: Long): Unit = {\n+    if (interBrokerThrottle < 0 && logDirThrottle < 0) {\n+      throw new TerseReassignmentFailureException(\"No valid throttle values provided to --alter-throttle\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzAzMjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyMTo1NlrOGmCGcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxMDoyNVrOGmdZ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMzQ4OA==", "bodyText": "seems to break the symmetry a bit, doesn't it?  Although, I don't feel strongly about this.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r442533488", "createdAt": "2020-06-18T22:21:56Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -1685,10 +1702,9 @@ object ReassignPartitionsCommand extends Logging {\n       opts.cancelOpt -> collection.immutable.Seq(\n         opts.reassignmentJsonFileOpt\n       ),\n-      opts.listOpt -> collection.immutable.Seq(\n-      )\n+      opts.listOpt -> collection.immutable.Seq.empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MDg1NQ==", "bodyText": "I can revert. It looked a little more reasonable when next to the suggested alter command.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r442980855", "createdAt": "2020-06-19T18:10:25Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -1685,10 +1702,9 @@ object ReassignPartitionsCommand extends Logging {\n       opts.cancelOpt -> collection.immutable.Seq(\n         opts.reassignmentJsonFileOpt\n       ),\n-      opts.listOpt -> collection.immutable.Seq(\n-      )\n+      opts.listOpt -> collection.immutable.Seq.empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMzQ4OA=="}, "originalCommit": null, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzA0NTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyODoxOVrOGmCOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDoxODowMlrOG57frQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNTYzMA==", "bodyText": "It seems like the thing to agree on is the final state, right?  This comparison is taking into account the current replica set which may change over the course of the reassignment...", "url": "https://github.com/apache/kafka/pull/8891#discussion_r442535630", "createdAt": "2020-06-18T22:28:19Z", "author": {"login": "cmccabe"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -647,8 +647,14 @@ class KafkaController(val config: KafkaConfig,\n         info(s\"Skipping reassignment of $tp since the topic is currently being deleted\")\n         new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n       } else {\n-        val assignedReplicas = controllerContext.partitionReplicaAssignment(tp)\n-        if (assignedReplicas.nonEmpty) {\n+        val assignment = controllerContext.partitionFullReplicaAssignment(tp)\n+        if (assignment == ReplicaAssignment.empty) {\n+          new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n+        } else if (assignment == reassignment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTI4MQ==", "bodyText": "I don't think there's a difference. The reassignment here is computed with respect to the current assignment. So if the target states match, then so will these.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r442981281", "createdAt": "2020-06-19T18:11:36Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -647,8 +647,14 @@ class KafkaController(val config: KafkaConfig,\n         info(s\"Skipping reassignment of $tp since the topic is currently being deleted\")\n         new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n       } else {\n-        val assignedReplicas = controllerContext.partitionReplicaAssignment(tp)\n-        if (assignedReplicas.nonEmpty) {\n+        val assignment = controllerContext.partitionFullReplicaAssignment(tp)\n+        if (assignment == ReplicaAssignment.empty) {\n+          new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n+        } else if (assignment == reassignment) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNTYzMA=="}, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5Njc4MQ==", "bodyText": "I ended up reverting this change because the controller integration tests were failing. I'll consider opening a separate jira for the problem of avoiding the epoch bump when the reassignment does not change.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r463396781", "createdAt": "2020-07-31T04:18:02Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/controller/KafkaController.scala", "diffHunk": "@@ -647,8 +647,14 @@ class KafkaController(val config: KafkaConfig,\n         info(s\"Skipping reassignment of $tp since the topic is currently being deleted\")\n         new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n       } else {\n-        val assignedReplicas = controllerContext.partitionReplicaAssignment(tp)\n-        if (assignedReplicas.nonEmpty) {\n+        val assignment = controllerContext.partitionFullReplicaAssignment(tp)\n+        if (assignment == ReplicaAssignment.empty) {\n+          new ApiError(Errors.UNKNOWN_TOPIC_OR_PARTITION, \"The partition does not exist.\")\n+        } else if (assignment == reassignment) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNTYzMA=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU1NTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzozOTo1NlrOGmsCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0NDozMFrOGtpYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMDUzNQ==", "bodyText": "It does nothing now when the value is equal to 0. Does it break compatibility (Although we had said that  The throttle rate should be at least 1 KB/s.)?  By contrast, the new method modifyInterBrokerThrottle send request even if the value is 0. why?", "url": "https://github.com/apache/kafka/pull/8891#discussion_r443220535", "createdAt": "2020-06-21T13:39:56Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -962,22 +963,18 @@ object ReassignPartitionsCommand extends Logging {\n     verifyBrokerIds(adminClient, proposedParts.values.flatten.toSet)\n     val currentParts = getReplicaAssignmentForPartitions(adminClient, proposedParts.keySet.toSet)\n     println(currentPartitionReplicaAssignmentToString(proposedParts, currentParts))\n-    if (interBrokerThrottle >= 0 || logDirThrottle >= 0) {\n+\n+    if (interBrokerThrottle > 0 || logDirThrottle > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNzAzMQ==", "bodyText": "I'll revert this change. I thought I had noticed an inconsistency, but maybe it was just the comment in the command description.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r450517031", "createdAt": "2020-07-06T22:44:30Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -962,22 +963,18 @@ object ReassignPartitionsCommand extends Logging {\n     verifyBrokerIds(adminClient, proposedParts.values.flatten.toSet)\n     val currentParts = getReplicaAssignmentForPartitions(adminClient, proposedParts.keySet.toSet)\n     println(currentPartitionReplicaAssignmentToString(proposedParts, currentParts))\n-    if (interBrokerThrottle >= 0 || logDirThrottle >= 0) {\n+\n+    if (interBrokerThrottle > 0 || logDirThrottle > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMDUzNQ=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE1ODYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDo1NjoxNFrOHfb35g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDo1NjoxNFrOHfb35g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNDU4Mg==", "bodyText": "Nit: this can go on the line above?", "url": "https://github.com/apache/kafka/pull/8891#discussion_r502724582", "createdAt": "2020-10-10T00:56:14Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -1213,22 +1211,38 @@ object ReassignPartitionsCommand extends Logging {\n    * @return                  A map from partition objects to error strings.\n    */\n   def cancelPartitionReassignments(adminClient: Admin,\n-                                  reassignments: Set[TopicPartition])\n+                                   reassignments: Set[TopicPartition])\n   : Map[TopicPartition, Throwable] = {\n     val results: Map[TopicPartition, KafkaFuture[Void]] =\n       adminClient.alterPartitionReassignments(reassignments.map {\n           (_, (None: Option[NewPartitionReassignment]).asJava)\n         }.toMap.asJava).values().asScala\n     results.flatMap {\n-      case (part, future) => {\n+      case (part, future) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE2MDc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/admin/ReassignPartitionsIntegrationTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDo1ODo1MlrOHfb5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDo1ODo1MlrOHfb5Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNDg3MA==", "bodyText": "Nit: if you're using triple quotes, you don't need to end them at every line.", "url": "https://github.com/apache/kafka/pull/8891#discussion_r502724870", "createdAt": "2020-10-10T00:58:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/admin/ReassignPartitionsIntegrationTest.scala", "diffHunk": "@@ -162,6 +162,39 @@ class ReassignPartitionsIntegrationTest extends ZooKeeperTestHarness {\n       localLogOrException(part).highWatermark)\n   }\n \n+  @Test\n+  def testAlterReassignmentThrottle(): Unit = {\n+    cluster = new ReassignPartitionsTestCluster(zkConnect)\n+    cluster.setup()\n+    cluster.produceMessages(\"foo\", 0, 50)\n+    cluster.produceMessages(\"baz\", 2, 60)\n+    val assignment = \"\"\"{\"version\":1,\"partitions\":\"\"\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE2MzQ1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/admin/ReassignPartitionsIntegrationTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTowMTo1MlrOHfb6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTowMTo1MlrOHfb6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNTIwNA==", "bodyText": "Nit: can we just use string interpolation?", "url": "https://github.com/apache/kafka/pull/8891#discussion_r502725204", "createdAt": "2020-10-10T01:01:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/admin/ReassignPartitionsIntegrationTest.scala", "diffHunk": "@@ -407,17 +423,90 @@ class ReassignPartitionsIntegrationTest extends ZooKeeperTestHarness {\n     waitForBrokerLevelThrottles(unthrottledBrokerConfigs)\n \n     // Wait for the directory movement to complete.\n-    waitForVerifyAssignment(cluster.adminClient, assignment, true,\n+    waitForVerifyAssignment(cluster.adminClient, reassignment.json, true,\n         VerifyAssignmentResult(Map(\n-          new TopicPartition(\"foo\", 0) -> PartitionReassignmentState(Seq(0, 1, 2), Seq(0, 1, 2), true)\n+          topicPartition -> PartitionReassignmentState(Seq(0, 1, 2), Seq(0, 1, 2), true)\n         ), false, Map(\n-          new TopicPartitionReplica(\"foo\", 0, 0) -> CompletedMoveState(newFoo1Dir)\n+          new TopicPartitionReplica(topicPartition.topic, topicPartition.partition, 0) ->\n+            CompletedMoveState(reassignment.targetDir)\n         ), false))\n \n     val info1 = new BrokerDirs(cluster.adminClient.describeLogDirs(0.to(4).\n         map(_.asInstanceOf[Integer]).asJavaCollection), 0)\n-    assertEquals(newFoo1Dir,\n-      info1.curLogDirs.getOrElse(new TopicPartition(\"foo\", 0), \"\"))\n+    assertEquals(reassignment.targetDir,\n+      info1.curLogDirs.getOrElse(topicPartition, \"\"))\n+  }\n+\n+  @Test\n+  def testAlterLogDirReassignmentThrottle(): Unit = {\n+    val topicPartition = new TopicPartition(\"foo\", 0)\n+\n+    cluster = new ReassignPartitionsTestCluster(zkConnect)\n+    cluster.setup()\n+    cluster.produceMessages(topicPartition.topic, topicPartition.partition, 700)\n+\n+    val targetBrokerId = 0\n+    val replicas = Seq(0, 1, 2)\n+    val reassignment = buildLogDirReassignment(topicPartition, targetBrokerId, replicas)\n+\n+    // Start the replica move with a low throttle so it does not complete\n+    val initialLogDirThrottle = 1L\n+    runExecuteAssignment(cluster.adminClient, false, reassignment.json,\n+      interBrokerThrottle = -1L, initialLogDirThrottle)\n+    waitForLogDirThrottle(Set(0), initialLogDirThrottle)\n+\n+    // Now increase the throttle and verify that the log dir movement completes\n+    val updatedLogDirThrottle = 3000000L\n+    runExecuteAssignment(cluster.adminClient, additional = true, reassignment.json,\n+      interBrokerThrottle = -1L, replicaAlterLogDirsThrottle = updatedLogDirThrottle)\n+    waitForLogDirThrottle(Set(0), updatedLogDirThrottle)\n+\n+    waitForVerifyAssignment(cluster.adminClient, reassignment.json, true,\n+      VerifyAssignmentResult(Map(\n+        topicPartition -> PartitionReassignmentState(Seq(0, 1, 2), Seq(0, 1, 2), true)\n+      ), false, Map(\n+        new TopicPartitionReplica(topicPartition.topic, topicPartition.partition, targetBrokerId) ->\n+          CompletedMoveState(reassignment.targetDir)\n+      ), false))\n+  }\n+\n+  case class LogDirReassignment(json: String, currentDir: String, targetDir: String)\n+\n+  private def buildLogDirReassignment(topicPartition: TopicPartition,\n+                                      brokerId: Int,\n+                                      replicas: Seq[Int]): LogDirReassignment = {\n+\n+    val describeLogDirsResult = cluster.adminClient.describeLogDirs(\n+      0.to(4).map(_.asInstanceOf[Integer]).asJavaCollection)\n+\n+    val logDirInfo = new BrokerDirs(describeLogDirsResult, brokerId)\n+    assertTrue(logDirInfo.futureLogDirs.isEmpty)\n+\n+    val currentDir = logDirInfo.curLogDirs(topicPartition)\n+    val newDir = logDirInfo.logDirs.find(!_.equals(currentDir)).get\n+\n+    val logDirs = replicas.map { replicaId =>\n+      if (replicaId == brokerId)\n+        \"\\\"%s\\\"\".format(newDir)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE2NDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTowMzoxNlrOHfb62g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTowMzoxNlrOHfb62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyNTMzOA==", "bodyText": "Nit: move replica to the previous line?", "url": "https://github.com/apache/kafka/pull/8891#discussion_r502725338", "createdAt": "2020-10-10T01:03:16Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala", "diffHunk": "@@ -1213,22 +1211,38 @@ object ReassignPartitionsCommand extends Logging {\n    * @return                  A map from partition objects to error strings.\n    */\n   def cancelPartitionReassignments(adminClient: Admin,\n-                                  reassignments: Set[TopicPartition])\n+                                   reassignments: Set[TopicPartition])\n   : Map[TopicPartition, Throwable] = {\n     val results: Map[TopicPartition, KafkaFuture[Void]] =\n       adminClient.alterPartitionReassignments(reassignments.map {\n           (_, (None: Option[NewPartitionReassignment]).asJava)\n         }.toMap.asJava).values().asScala\n     results.flatMap {\n-      case (part, future) => {\n+      case (part, future) =>\n         try {\n           future.get()\n           None\n         } catch {\n           case t: ExecutionException => Some(part, t.getCause())\n         }\n+    }\n+  }\n+\n+  private def calculateCurrentMoveMap(currentReassignments: Map[TopicPartition, PartitionReassignment]): MoveMap = {\n+    val moveMap = new mutable.HashMap[String, mutable.Map[Int, PartitionMove]]()\n+    // Add the current reassignments to the move map.\n+    currentReassignments.foreach { case (part, reassignment) =>\n+      val move = PartitionMove(new mutable.HashSet[Int](), new mutable.HashSet[Int]())\n+      reassignment.replicas.forEach {\n+        replica => move.sources += replica", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2397, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}