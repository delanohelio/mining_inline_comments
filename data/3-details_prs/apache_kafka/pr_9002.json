{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTIwMDI3", "number": 9002, "title": "MINOR: Add ApiMessageTypeGenerator", "bodyText": "Previously, we had some code hard-coded to generate message type classes\nfor RPCs.  We might want to generate message type classes for other\nthings as well, so make it more generic.", "createdAt": "2020-07-09T15:04:45Z", "url": "https://github.com/apache/kafka/pull/9002", "merged": true, "mergeCommit": {"oid": "e5335bcb58f0892d8cd6222fc14d6458922a6c2e"}, "closed": true, "closedAt": "2020-07-15T16:03:51Z", "author": {"login": "cmccabe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczQZwZAH2gAyNDQ2OTIwMDI3OmM1ZmMxZDRiNzc4OGI4YWVhMWE2OGU2NzlkY2RmZjcyMDhjZGUyM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1M2zFgFqTQ0OTA5OTMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d", "author": {"user": {"login": "cmccabe", "name": "Colin Patrick McCabe"}}, "url": "https://github.com/apache/kafka/commit/c5fc1d4b7788b8aea1a68e679dcdff7208cde23d", "committedDate": "2020-07-09T15:02:50Z", "message": "MINOR: Add ApiMessageTypeGenerator\n\nPreviously, we had some code hard-coded to generate message type classes\nfor RPCs.  We might want to generate message type classes for other\nthings as well, so make it more generic."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDMwMzA0", "url": "https://github.com/apache/kafka/pull/9002#pullrequestreview-446030304", "createdAt": "2020-07-09T23:21:33Z", "commit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNDozMFrOGvk_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzozNjowOVrOGvlNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjI0Mw==", "bodyText": "Generate the type and write it out to the internal state.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452542243", "createdAt": "2020-07-09T23:24:30Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/TypeClassGenerator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.message;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+\n+public interface TypeClassGenerator {\n+    /**\n+     * The short name of the type class file we are generating. For example,\n+     * ApiMessageType.java.\n+     */\n+    String outputName();\n+\n+    /**\n+     * Registers a message spec with the generator.\n+     *\n+     * @param spec      The spec to register.\n+     */\n+    void registerMessageType(MessageSpec spec);\n+\n+    /**\n+     * Write out the internal state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTI3Mg==", "bodyText": "Instead of using null ptr, maybe we could get a NoOpTypeClassGenerator which will do nothing for generateAndWrite, and remove the outputName() to make one single API. Something like\nString outputFileName = typeClassGenerator.generateAndWrite(outputDir, writer);\n\nI don't feel strong about this change, ideally it should look better, but up to you.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452545272", "createdAt": "2020-07-09T23:34:14Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTk2OQ==", "bodyText": "Why we need separate exit code for mis-used arguments?", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452545969", "createdAt": "2020-07-09T23:36:09Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -267,10 +283,10 @@ public static void main(String[] args) throws Exception {\n         if (args.length == 0) {\n             System.out.println(USAGE);\n             System.exit(0);\n-        } else if (args.length != 3) {\n+        } else if (args.length != 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fc1d4b7788b8aea1a68e679dcdff7208cde23d"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d", "author": {"user": {"login": "cmccabe", "name": "Colin Patrick McCabe"}}, "url": "https://github.com/apache/kafka/commit/2be8944d4f0b5b11e931d2994b807728a543b21d", "committedDate": "2020-07-10T15:09:50Z", "message": "Change JavaDoc for TypeClassGenerator#generateAndWrite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTExNjI1", "url": "https://github.com/apache/kafka/pull/9002#pullrequestreview-446511625", "createdAt": "2020-07-10T15:51:14Z", "commit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MToxNVrOGv8h6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MToxNVrOGv8h6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNzk3OA==", "bodyText": "Why we remove the counter here? Actually my q is whether this is correct behavior before.", "url": "https://github.com/apache/kafka/pull/9002#discussion_r452927978", "createdAt": "2020-07-10T15:51:15Z", "author": {"login": "abbccdda"}, "path": "generator/src/main/java/org/apache/kafka/message/MessageGenerator.java", "diffHunk": "@@ -169,20 +185,20 @@ public static void processDirectories(String packageName, String outputDir, Stri\n                         generator.write(writer);\n                     }\n                     numProcessed++;\n-                    messageTypeGenerator.registerMessageType(spec);\n+                    if (typeClassGenerator != null) {\n+                        typeClassGenerator.registerMessageType(spec);\n+                    }\n                 } catch (Exception e) {\n                     throw new RuntimeException(\"Exception while processing \" + inputPath.toString(), e);\n                 }\n             }\n         }\n-        if (messageTypeGenerator.hasRegisteredTypes()) {\n-            Path factoryOutputPath = Paths.get(outputDir, API_MESSAGE_TYPE_JAVA);\n-            outputFileNames.add(API_MESSAGE_TYPE_JAVA);\n+        if (typeClassGenerator != null) {\n+            outputFileNames.add(typeClassGenerator.outputName());\n+            Path factoryOutputPath = Paths.get(outputDir, typeClassGenerator.outputName());\n             try (BufferedWriter writer = Files.newBufferedWriter(factoryOutputPath)) {\n-                messageTypeGenerator.generate();\n-                messageTypeGenerator.write(writer);\n+                typeClassGenerator.generateAndWrite(writer);\n             }\n-            numProcessed++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDk5MzM2", "url": "https://github.com/apache/kafka/pull/9002#pullrequestreview-449099336", "createdAt": "2020-07-15T16:02:47Z", "commit": {"oid": "2be8944d4f0b5b11e931d2994b807728a543b21d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1245, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}