{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjkzMTI0", "number": 9639, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyMzoxNFrOFCqdBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyNDozNFrOFCqeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzM3MDMwOnYy", "diffSide": "RIGHT", "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyMzoxNFrOIB8cIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDowMzo1MFrOICBTQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwOTczMA==", "bodyText": "I wonder if we need this. Is it not good enough to verify the response was received?", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538909730", "createdAt": "2020-12-09T00:23:14Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());\n+        assertEquals(context.client.numWaitingFetch(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk4OTM3Nw==", "bodyText": "This is just a double-check, it's better to be removed.", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538989377", "createdAt": "2020-12-09T04:03:50Z", "author": {"login": "dengziming"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());\n+        assertEquals(context.client.numWaitingFetch(), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwOTczMA=="}, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzM3Mzc1OnYy", "diffSide": "RIGHT", "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyNDozNFrOIB8eCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozODo1NlrOICB9yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDIxNw==", "bodyText": "Maybe we can add a helper to RaftClientTestContext similar to assertElectedLeader and get rid of quorumState()?", "url": "https://github.com/apache/kafka/pull/9639#discussion_r538910217", "createdAt": "2020-12-09T00:24:34Z", "author": {"login": "hachikuji"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwMDI2Nw==", "bodyText": "Thank you for your suggestion, I added a method to RaftClientTestContext.", "url": "https://github.com/apache/kafka/pull/9639#discussion_r539000267", "createdAt": "2020-12-09T04:38:56Z", "author": {"login": "dengziming"}, "path": "raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java", "diffHunk": "@@ -207,6 +208,41 @@ public void testEndQuorumEpochRetriesWhileResigned() throws Exception {\n         assertEquals(1, retries.size());\n     }\n \n+    @Test\n+    public void testResignWillCompleteFetchPurgatory() throws Exception {\n+        int localId = 0;\n+        int otherNodeId = 1;\n+        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n+\n+        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n+                .build();\n+\n+        context.becomeLeader();\n+        assertEquals(OptionalInt.of(localId), context.currentLeader());\n+\n+        // send fetch request when become leader\n+        int epoch = context.currentEpoch();\n+        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, context.log.endOffset().offset, epoch, 1000));\n+        context.client.poll();\n+        assertEquals(context.client.numWaitingFetch(), 1);\n+\n+        // append some record, but the fetch in purgatory will still fail\n+        context.log.appendAsLeader(Collections.singleton(new SimpleRecord(\"raft\".getBytes())), epoch);\n+\n+        // when transition to resign, all request in fetchPurgatory will fail\n+        context.client.shutdown(1000);\n+        context.client.poll();\n+        assertTrue(context.client.quorumState().isResigned());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDIxNw=="}, "originalCommit": {"oid": "d822329dae031bbb63b0e59b8ce69424020fbf6e"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3605, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}