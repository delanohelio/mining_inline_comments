{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjA2NDg2", "number": 8048, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjo0MlrODdgD9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyODoyMlrODdiagg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYwNTk5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxNjo0MlrOFmJGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyNjo0OVrOFmJWWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTIyMA==", "bodyText": "Do we need to do these one at a time or could we start all these connectors together and then wait for them to come up? Does it matter?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375539220", "createdAt": "2020-02-05T22:16:42Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MzM4NQ==", "bodyText": "We definitely can start all the connectors together and then wait for them to come up. In either case I don't think it necessarily matters. What I did notice though was that once configureConnector is called, if you hit the REST endpoint that lists all the connectors, it almost immediately lists that connector that was just configured. However, what the bottle neck here seems to be is the actual REST url being served for that specific connector takes a while to come up. Since we have to check if the tasks for each connector are up one at a time, I figured for consistency's sake in the code we could also check for the connector to be up one at time. What do you think is the better way to go here?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375543385", "createdAt": "2020-02-05T22:26:49Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTIyMA=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYwOTQ1OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxODowNlrOFmJIWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1NjoxNlrOFmMP-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ==", "bodyText": "If we let this take a set of connector names, we could test them all at once.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375539801", "createdAt": "2020-02-05T22:18:06Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MzYzMA==", "bodyText": "Yes, this is correct, we could change this to take in a set of connector names, but as I mentioned in my previous comment, I separated it out for consistency sake with checking tasks. However, happy to change it to a set if that makes more sense.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375543630", "createdAt": "2020-02-05T22:27:28Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2ODA0OQ==", "bodyText": "I'm mostly concerned about the time to run tests. If it does not make a substantial difference either way, then we can leave it.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375568049", "createdAt": "2020-02-05T23:33:34Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODczNA==", "bodyText": "With the latest code that I pushed, I still check after each connector is configured, however the new method checks both that the connector is up and that the tasks are running as well. Checking that the tasks are running has to be done separately for each connector anyway, which is the main bottleneck in this case. Having this in mind, I think we might not be able to get around checking that the connector and tasks are up individually - what do you think?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375578734", "createdAt": "2020-02-06T00:10:35Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4OTA4Mw==", "bodyText": "Yes, you have to check each task individually, but nothing prevents you from submitting them all at the same time. I am assuming that any overhead here is really associated with task startup time, so this allows for it to be parallelized.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375589083", "createdAt": "2020-02-06T00:49:27Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDkwNg==", "bodyText": "Fair enough, I'll change it to make the submission per connect cluster.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375590906", "createdAt": "2020-02-06T00:56:16Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzOTgwMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYxMDg4OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxODozN1rOFmJJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjozMDozMFrOFmJcCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDAzMQ==", "bodyText": "Could we use TestUtils.waitForCondition? Similarly in waitForTasksToBeUp.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540031", "createdAt": "2020-02-05T22:18:37Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NDg0MQ==", "bodyText": "Ah I was not aware of TestUtils.waitForCondition. That can definitely be used in this case. I'll make the change.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375544841", "createdAt": "2020-02-05T22:30:30Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDAzMQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYxMzQ3OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxOTo0MFrOFmJLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjozMjo0OFrOFmJfYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDQ4MQ==", "bodyText": "I think this could be shorter. We don't want to add unnecessarily to build time. maybe 100ms?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540481", "createdAt": "2020-02-05T22:19:40Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NTY5OQ==", "bodyText": "Sure we can definitely do that. After running the test a bunch of times, I found that on average it took about 3 seconds for the tasks to come up, so I tried to optimize for CPU usage (by not constantly hitting the REST endpoint until the tasks were up) instead of build time, but in this case if we don't want to add unnecessarily to build time we can definitely shorten it. With respect to how long we want to sleep, do you think 100ms is good enough to not put a lot of load on the REST endpoint or do you think we could go a bit higher?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375545699", "createdAt": "2020-02-05T22:32:48Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDQ4MQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjYxNDc5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoyMDoxMVrOFmJLzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMzowODoyOVrOFmKVcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ==", "bodyText": "nit: waitForTasksToBeUp -> waitForTasksToStart?", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375540685", "createdAt": "2020-02-05T22:20:11Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NTg0Ng==", "bodyText": "That does make it a lot more readable, will make the change.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375545846", "createdAt": "2020-02-05T22:33:07Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MzczNA==", "bodyText": "I'd suggest copying and using what we've been using elsewhere to assert that a connector and its tasks are up and running:\nhttps://github.com/apache/kafka/blob/trunk/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java#L324-L337\nIt works fine with the waitForCondition method that accepts a timeout.\nEventually (maybe soon) this type of assertion will go to EmbeddedConnectCluster and will be made available for every Connect integration test. However, I suggest we don't take on this refactoring now and we just copy the method from the test above.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375553734", "createdAt": "2020-02-05T22:53:15Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1OTUzOQ==", "bodyText": "Thanks for the suggestion @kkonstantine - this is super useful! I'll incorporate it into the code.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375559539", "createdAt": "2020-02-05T23:08:29Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +152,73 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorSourceConnector\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorCheckpointConnector\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(backup, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(backup, \"MirrorHeartbeatConnector\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorSourceConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorSourceConnector\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorCheckpointConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorCheckpointConnector\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        waitForConnectorToBeUp(primary, \"MirrorHeartbeatConnector\");\n+        waitForTasksToBeUp(primary, \"MirrorHeartbeatConnector\");\n+\n+    }\n+\n+    private void waitForConnectorToBeUp(EmbeddedConnectCluster connectCluster, String connName)\n+        throws InterruptedException {\n+        Collection<String> connectors = connectCluster.connectors();\n+        while (!connectors.contains(connName)) {\n+            // this means the connector hasn't been registered yet in the REST endpoint, so we\n+            // sleep for 3 seconds and try again\n+            Thread.sleep(3_000);\n+            connectors = connectCluster.connectors();\n+        }\n+    }\n+\n+    private void waitForTasksToBeUp(EmbeddedConnectCluster connectCluster, String connectorName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MDY4NQ=="}, "originalCommit": {"oid": "353f550377fe76f60eec1fa59b9d47cd0477b8d5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg3MjExOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoxNzoyNFrOFmLn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDoyMjowMVrOFmLsow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MDYzMQ==", "bodyText": "If you need to assert that at least numTasks are running, probably it's safer to use >= here. If you are starting more than 1 tasks, these tasks might start fast enough and you might miss your assertion, e.g. the number will go from 0 to 4. Again assuming that your assertion is that at least the connector and 1 task are running.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375580631", "createdAt": "2020-02-06T00:17:24Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() == numTasks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6d3e754698340627c6882f96cfefb9589d473aa"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MTg1OQ==", "bodyText": "Ah good point, I think in this case we are trying to assert at least the connector and 1 task are running (when running the tasks I always only saw 1 task running even though max.tasks=10, but I guess with this small volume of messages the Connect framework only spawns 1 task). I'll make the change.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375581859", "createdAt": "2020-02-06T00:22:01Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() == numTasks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4MDYzMQ=="}, "originalCommit": {"oid": "a6d3e754698340627c6882f96cfefb9589d473aa"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg5NzU3OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDozMjoyNFrOFmL3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToxMTo0MlrOFmMgXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg==", "bodyText": "One more comment that I missed.\nisPresent is not perfectly correct here. You'll need to use orElse(false)\nBasically the idea is that this is successful only if it returns true. But if it's Optional.empty() or false then the assertion is not ready yet.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375584652", "createdAt": "2020-02-06T00:32:24Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NjIwOA==", "bodyText": "Just for my understanding, why would isPresent() not work as well as orElse(false)? I thought isPresent() only returns true when there is a value, and false otherwise? Does that not do the same thing as doing orElse(false)? I could definitely be missing something here, but just trying to better understand.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375586208", "createdAt": "2020-02-06T00:38:25Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NzgyNA==", "bodyText": "This assertion tries to capture 3 cases:\n\nAll good, return Optional.of(true)\nThe boolean logic in the method is false (e.g. tasks are not ready, connector is not ready, an error response was returned etc). Please return Optional.of(false)\nException was thrown and I can't say. Return Optional.empty()\n\nSo based on this, how you'll interpret (3) is up to you on the waitForCondition. And here you want to treat it as false. That's why orElse(false) is more appropriate.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375587824", "createdAt": "2020-02-06T00:44:36Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4ODIyNA==", "bodyText": "Ah okay that makes sense. isPresent() would only cover the Optional.empty() case and would give a false positive if it returned Optional.of(false). orElse(false) would make it wait until it's true. I'll make the change.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375588224", "createdAt": "2020-02-06T00:46:19Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MjQzNw==", "bodyText": "After looking at @hachikuji's suggestion, I think it might just be easier (and cleaner) to return the actual boolean instead of an Optional.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375592437", "createdAt": "2020-02-06T01:01:46Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5NTEwMA==", "bodyText": "That's fine. There are cases that you might want to invert the answer that says \"I can't say\". But we haven't finalized the design, that's why this helper method hasn't found its way to the base class yet. Still the goal will be to provide generic methods.\nAs a reference, here's an example of negation of the above with orElse(true):\nhttps://github.com/apache/kafka/blob/trunk/connect/runtime/src/test/java/org/apache/kafka/connect/integration/RebalanceSourceConnectorsIntegrationTest.java#L227\nIt's fine to simplify here. We can change if we ever generalize this checks.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375595100", "createdAt": "2020-02-06T01:11:42Z", "author": {"login": "kkonstantine"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4NDY1Mg=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjkyNDY5OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo0ODoyNVrOFmMHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1NToyMVrOFmMPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4ODgxNA==", "bodyText": "Unless I'm missing something, we are not actually using the boolean value anywhere. All we do is check if the optional is present. Would it be simpler to just return the boolean directly?\nalso nit: having assert in the name is misleading since there are no assertions. I would suggest isConnectorAndTasksRunning or checkConnectorAndTasksRunning", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375588814", "createdAt": "2020-02-06T00:48:25Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDY4NA==", "bodyText": "I'll change the method name to isConnectorAndTasksRunning. With respect to the boolean value, As @kkonstantine mentioned, the condition to be checking should be TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup, \"MirrorHeartbeatConnector\", MIN_TASKS).orElse(false)\nHowever, to your point, I think it might just be simpler and more readable to return the actual boolean instead of an Optional. I'll make that change.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375590684", "createdAt": "2020-02-06T00:55:21Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -150,23 +156,67 @@ public void setup() throws IOException {\n         mm2Props.put(\"backup.bootstrap.servers\", backup.kafka().bootstrapServers());\n         mm2Config = new MirrorMakerConfig(mm2Props);\n \n+        // we wait for the connector and tasks to come up for each connector, so that when we do the\n+        // actual testing, we are certain that the tasks are up and running; this will prevent\n+        // flaky tests where the connector and tasks didn't start up in time for the tests to be\n+        // run\n         backup.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" backup cluster!\");\n \n         backup.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"primary\", \"backup\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(backup,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" backup cluster!\");\n \n         primary.configureConnector(\"MirrorSourceConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorSourceConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorSourceConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorSourceConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorCheckpointConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorCheckpointConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorCheckpointConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorCheckpointConnector was up on\"\n+                + \" primary cluster!\");\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+        TestUtils.waitForCondition(() -> assertConnectorAndTasksRunning(primary,\n+            \"MirrorHeartbeatConnector\", MIN_TASKS).isPresent(),\n+            \"Timed out trying to verify connector MirrorHeartbeatConnector was up on\"\n+                + \" primary cluster!\");\n+    }\n+\n+    private Optional<Boolean> assertConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU4ODgxNA=="}, "originalCommit": {"oid": "5cff8b1f15813712ae7670ad3a1d549a034ac445"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk4NjQxOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNTowNFrOFmMtkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyOToxNFrOFmMxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODQ4Mg==", "bodyText": "nit: can we make this debug level? Otherwise it will make this test a little spammy.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375598482", "createdAt": "2020-02-06T01:25:04Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() >= numTasks\n+                && info.connector().state().equals(AbstractStatus.State.RUNNING.toString())\n+                && info.tasks().stream().allMatch(s -> s.state().equals(AbstractStatus.State.RUNNING.toString()));\n+            log.info(\"Found connector and tasks running: {}\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTQ2MQ==", "bodyText": "Sure, will make it debug.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375599461", "createdAt": "2020-02-06T01:29:14Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {\n+        try {\n+            ConnectorStateInfo info = connectCluster.connectorStatus(connectorName);\n+            boolean result = info != null\n+                && info.tasks().size() >= numTasks\n+                && info.connector().state().equals(AbstractStatus.State.RUNNING.toString())\n+                && info.tasks().stream().allMatch(s -> s.state().equals(AbstractStatus.State.RUNNING.toString()));\n+            log.info(\"Found connector and tasks running: {}\", result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODQ4Mg=="}, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk4ODkwOnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyNjozNVrOFmMvCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyOTozN1rOFmMxug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODg1OQ==", "bodyText": "nit: do we need the numTasks argument since the only caller is passing MIN_TASKS? Alternatively, we could replace info.tasks().size() >= numTasks with !info.tasks().isEmpty() and get rid of MIN_TASKS.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375598859", "createdAt": "2020-02-06T01:26:35Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTU0Ng==", "bodyText": "That's a good idea, I'll replace it with !info.tasks().isEmpty() and get rid of MIN_TASKS.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375599546", "createdAt": "2020-02-06T01:29:37Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+\n+    }\n+\n+    private boolean areConnectorAndTasksRunning(EmbeddedConnectCluster connectCluster,\n+        String connectorName, int numTasks) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5ODg1OQ=="}, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjk5MTM4OnYy", "diffSide": "RIGHT", "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyODoyMlrOFmMwmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMToyOTo0NlrOFmMx1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTI1Ng==", "bodyText": "nit: unneeded newline", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375599256", "createdAt": "2020-02-06T01:28:22Z", "author": {"login": "hachikuji"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTU3Mw==", "bodyText": "Will remove it.", "url": "https://github.com/apache/kafka/pull/8048#discussion_r375599573", "createdAt": "2020-02-06T01:29:46Z", "author": {"login": "skaundinya15"}, "path": "connect/mirror/src/test/java/org/apache/kafka/connect/mirror/MirrorConnectorsIntegrationTest.java", "diffHunk": "@@ -167,6 +182,35 @@ public void setup() throws IOException {\n \n         primary.configureConnector(\"MirrorHeartbeatConnector\", mm2Config.connectorBaseConfig(new SourceAndTarget(\"backup\", \"primary\"),\n             MirrorHeartbeatConnector.class));\n+\n+        waitUntilMirrorMakerIsRunning(primary, connectorNames);\n+    }\n+\n+\n+    private void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster,\n+        Set<String> connNames) throws InterruptedException {\n+        for (String connector : connNames) {\n+            TestUtils.waitForCondition(() -> areConnectorAndTasksRunning(connectCluster,\n+                connector, MIN_TASKS), \"Timed out trying to verify connector \" +\n+                connector + \" was up!\" );\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5OTI1Ng=="}, "originalCommit": {"oid": "4f120fc774ad03ac0463d7d2d737d6807a634d3f"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4201, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}