{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzAyNDA4", "number": 9671, "title": "KAFKA-10793: move handling of FindCoordinatorFuture to fix race condition", "bodyText": "A race condition between the consumer and hb thread can lead to a failed but non-null findCoordinatorFuture, causing the AbstractCoordinator to wait endlessly on the request which it thinks is still in flight. We should move the handling of this future out of the listener callbacks and into the ensureCoordinatorReady() method where we can check the exception and clear the future all in one place.\nSee ticket for full analysis.\nAlso starts logging a warning if the consumer is unable to connect to the coordinator for longer than the max poll interval.", "createdAt": "2020-12-02T02:43:04Z", "url": "https://github.com/apache/kafka/pull/9671", "merged": true, "mergeCommit": {"oid": "35b1e76ffd7a2d03beb5d17710e670aa3717d12e"}, "closed": true, "closedAt": "2021-01-27T03:05:37Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiSzxZAFqTU0MzEwODE5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0D5xhgH2gAyNTMwNzAyNDA4OjVkMTExZDg4OWU3Yjk5NGIyYzlkNmYyZDUyMmRjMDMyZmY3MjM3ZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTA4MTky", "url": "https://github.com/apache/kafka/pull/9671#pullrequestreview-543108192", "createdAt": "2020-12-02T18:10:30Z", "commit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMDozMFrOH9n0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyNDoyNVrOH9oXag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NzY3Ng==", "bodyText": "nit: I think it's better to just print the e.message in a single line.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534377676", "createdAt": "2020-12-02T18:10:30Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -853,7 +844,7 @@ public void onSuccess(ClientResponse resp, RequestFuture<Void> future) {\n \n         @Override\n         public void onFailure(RuntimeException e, RequestFuture<Void> future) {\n-            clearFindCoordinatorFuture();\n+            log.debug(\"FindCoordinator request failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzQzNA==", "bodyText": "The main reason for https://github.com/apache/kafka/pull/7312/files#diff-15efe9b844f78b686393b6c2e2ad61306c3473225742caed05c7edab9a138832R230-R234 is the following:\n\ninside ensureCoordinatorReady called by the main thread, we may break out of the loop at line 248 below, without knowing what's the final state of the future.\nand that future could be completed by the other thread (hb) later, and replaced by a new future object.\n\nIn that case, when the main thread calls ensureCoordinatorReady again, it will \"miss\" the previous future's contained fatal error.\nSo thinking about it again, I think we would still want to maintain the exception but only if it is a fatal one inside the handler (i.e. we do not probably need to register another listener just to bookkeep that exception, but just piggy-back this logic inside the handler listener directly), and then inside the while loop, we check if a previous future already gets a fatal exception and if yes, throw it to fail the whole client.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534383434", "createdAt": "2020-12-02T18:19:28Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -235,11 +235,6 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n             return true;\n \n         do {\n-            if (findCoordinatorException != null && !(findCoordinatorException instanceof RetriableException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4MzU2Mw==", "bodyText": "nit: extra space.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534383563", "createdAt": "2020-12-02T18:19:39Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NjUzOA==", "bodyText": "I think this is a better approach, but we need to be careful about the callee inside hb thread:\nif (findCoordinatorFuture != null || lookupCoordinator().failed())\n\ni.e. a hb thread sending a discover-coordinator request would also cause a future to be assigned, but that future would only be cleared by the main thread caller. Thinking about that for a sec I think this is okay, but maybe worth having a second pair of eyes over it.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r534386538", "createdAt": "2020-12-02T18:24:25Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -248,18 +243,26 @@ protected synchronized boolean ensureCoordinatorReady(final Timer timer) {\n                 break;\n             }\n \n+            RuntimeException fatalException = null;\n+\n             if (future.failed()) {\n                 if (future.isRetriable()) {\n                     log.debug(\"Coordinator discovery failed, refreshing metadata\", future.exception());\n                     client.awaitMetadataUpdate(timer);\n-                } else\n-                    throw future.exception();\n+                } else {\n+                    log.info(\"FindCoordinator request hit fatal  exception\", fatalException);\n+                    fatalException = future.exception();\n+                }\n             } else if (coordinator != null && client.isUnavailable(coordinator)) {\n                 // we found the coordinator, but the connection has failed, so mark\n                 // it dead and backoff before retrying discovery\n                 markCoordinatorUnknown();\n                 timer.sleep(rebalanceConfig.retryBackoffMs);\n             }\n+\n+            clearFindCoordinatorFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa2d0fcaa56868288ee6488f7e7736884152826"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NjgwOTE4", "url": "https://github.com/apache/kafka/pull/9671#pullrequestreview-569680918", "createdAt": "2021-01-15T22:23:56Z", "commit": {"oid": "5ef5f05b6daf001b68920a5480ac8ddf9ca68f8c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMjoyMzo1NlrOIUvsRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMjoyMzo1NlrOIUvsRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODYyMzgxNQ==", "bodyText": "The nested condition is a bit awkward, how about this:\nif (findCoordinatorFuture != null) {\n    // if it has failed, clear it so that hb thread can try discover again in the next loop in case main thread is busy\n    if (findCoordinatorFuture.failed()) {\n        clearFindCoordinatorFuture();\n    } \n\n    // backoff properly\n    AbstractCoordinator.this.wait(rebalanceConfig.retryBackoffMs);\n} else {\n    lookupCoordinator();\n}", "url": "https://github.com/apache/kafka/pull/9671#discussion_r558623815", "createdAt": "2021-01-15T22:23:56Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1342,10 +1351,17 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n+                            if (findCoordinatorFuture != null || lookupCoordinator().failed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef5f05b6daf001b68920a5480ac8ddf9ca68f8c"}, "originalPosition": 114}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9c1ecd73c1c249a090ff7364119e04f8bf152ed", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/b9c1ecd73c1c249a090ff7364119e04f8bf152ed", "committedDate": "2021-01-20T00:58:10Z", "message": "logic refactoring"}, "afterCommit": {"oid": "797e4025177a78175b1b636c5bdb9b8dcd8ca1c9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/797e4025177a78175b1b636c5bdb9b8dcd8ca1c9", "committedDate": "2021-01-20T00:58:21Z", "message": "logic refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "797e4025177a78175b1b636c5bdb9b8dcd8ca1c9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/797e4025177a78175b1b636c5bdb9b8dcd8ca1c9", "committedDate": "2021-01-20T00:58:21Z", "message": "logic refactoring"}, "afterCommit": {"oid": "0ec29c4c98d219e9e030abe9cbb9ecb63737bcd2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/0ec29c4c98d219e9e030abe9cbb9ecb63737bcd2", "committedDate": "2021-01-20T19:32:21Z", "message": "logic refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6022afc2a03a4c8f52311944c79db8756fc2dc8", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/a6022afc2a03a4c8f52311944c79db8756fc2dc8", "committedDate": "2021-01-20T23:59:53Z", "message": "move handling of future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deec9a2fca29c661d0ad5bf8754aa936d8b6ed4e", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/deec9a2fca29c661d0ad5bf8754aa936d8b6ed4e", "committedDate": "2021-01-20T23:59:53Z", "message": "review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b39c6646597fe03650b3be500b4d958dde19d4", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/84b39c6646597fe03650b3be500b4d958dde19d4", "committedDate": "2021-01-20T23:59:53Z", "message": "find checkstyle, add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5e9d2c0b5bc1a30a35df7e515880b475c1a5bb", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/3e5e9d2c0b5bc1a30a35df7e515880b475c1a5bb", "committedDate": "2021-01-20T23:59:53Z", "message": "logging suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd921db0e23d7eb024106f53ab76bb10dcd9f2a9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/bd921db0e23d7eb024106f53ab76bb10dcd9f2a9", "committedDate": "2021-01-20T23:59:53Z", "message": "logic refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ec29c4c98d219e9e030abe9cbb9ecb63737bcd2", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/0ec29c4c98d219e9e030abe9cbb9ecb63737bcd2", "committedDate": "2021-01-20T19:32:21Z", "message": "logic refactoring"}, "afterCommit": {"oid": "bd921db0e23d7eb024106f53ab76bb10dcd9f2a9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/bd921db0e23d7eb024106f53ab76bb10dcd9f2a9", "committedDate": "2021-01-20T23:59:53Z", "message": "logic refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92777103e0c4637a0aac4cf1165ff4d71814091b", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/92777103e0c4637a0aac4cf1165ff4d71814091b", "committedDate": "2021-01-26T03:48:21Z", "message": "fix for hanging #testCoordinatorFailover"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2ODQyMDkx", "url": "https://github.com/apache/kafka/pull/9671#pullrequestreview-576842091", "createdAt": "2021-01-26T23:06:49Z", "commit": {"oid": "92777103e0c4637a0aac4cf1165ff4d71814091b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjo0OVrOIauvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMzowNjo0OVrOIauvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg5OTc3Ng==", "bodyText": "I think the issue is spot-on! The logic here becomes a bit hard to understand for other readers now and I'd suggest update the cmment as:\n\"Clear the future so that after the backoff in the next iteration, if hb still sees coordinator unknown it will try re-discover the coordinator in case the main thread cannot\"\nOtherwise, LGTM.", "url": "https://github.com/apache/kafka/pull/9671#discussion_r564899776", "createdAt": "2021-01-26T23:06:49Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1359,10 +1368,15 @@ public void run() {\n                         long now = time.milliseconds();\n \n                         if (coordinatorUnknown()) {\n-                            if (findCoordinatorFuture != null || lookupCoordinator().failed())\n-                                // the immediate future check ensures that we backoff properly in the case that no\n-                                // brokers are available to connect to.\n+                            if (findCoordinatorFuture != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92777103e0c4637a0aac4cf1165ff4d71814091b"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d111d889e7b994b2c9d6f2d522dc032ff7237d9", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/5d111d889e7b994b2c9d6f2d522dc032ff7237d9", "committedDate": "2021-01-26T23:14:07Z", "message": "improve code comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2509, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}