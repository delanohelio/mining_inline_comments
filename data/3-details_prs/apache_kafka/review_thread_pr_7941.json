{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODQ5MTg5", "number": 7941, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozOTo0MFrODXs6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoyMjo0M1rODaOzkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc5NzM4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozOTo0MFrOFdJIIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozOTo0MFrOFdJIIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMjU2MA==", "bodyText": "Do we need this? Seems like we have access to the SubscriptionState object already in the test case.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r366102560", "createdAt": "2020-01-14T00:39:40Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1386,4 +1387,8 @@ public void invoke() {\n     RebalanceProtocol getProtocol() {\n         return protocol;\n     }\n+\n+    SubscriptionState subscriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTg2NzY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToyNToyNFrOFdJyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToxNjowMVrOFgf1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw==", "bodyText": "I'm confused about a couple things. First, if a subscription changes while we are in the middle of a rebalance, do we need to call onJoinPrepare again? With the old semantics, we probably didn't need to because we revoked everything, but with \"cooperative\" rebalancing, perhaps we should?  cc @guozhangwang\nThe second thing is that it seems surprising that we raise auth errors from the \"group subscription.\" If consumer 1 has subscribed to \"A\" and consumer 2 has subscribed to \"B,\" I probably wouldn't expect to get any auth errors for topic \"B\" from consumer 1. So maybe we should be ignoring auth errors not part of subscription()? Not sure if that is straightforward or if there are any additional implications.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r366113303", "createdAt": "2020-01-14T01:25:24Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTM3Mg==", "bodyText": "@hachikuji Thanks for the review. If we decide that we always need to do onJoinPrepare, then we won't need this fix.\nIt is odd to propagate authorization failures from the group subscription since that feels more like an implementation detail. But at the same time, if we don't get metadata for some topics, is there any point in adding topics from group subscription to the ConsumerMetadata? We probably need to update javadoc for poll() if we don't change the current behaviour.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r366509372", "createdAt": "2020-01-14T18:45:57Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MjMxMg==", "bodyText": "Regarding the first question, if a subscription changes while we are in the middle of a rebalance we would call onPartitionsRevoked immediately on those still-assigned partitions that are not part of the new subscription any more, and for the returned assignment we check if they match our join-subscription and if not we trigger another rebalance (this is pre-429). So I think we still do not need to re-trigger onJoinPrepare when subscription changes in the middle.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r367082312", "createdAt": "2020-01-15T20:08:46Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4NDIyMA==", "bodyText": "@rajinisivaram I think I understand the problem a little better now and I'm coming around to the approach in this PR. It does make sense to me to reset the group subscription at the time that we set joinedSubscription in ConsumerCoordinator. Then I guess my only question is whether we still need to reset it inside onJoinPrepare as well?\nAnother (possibly worse) idea I had is to change the implementation of resetGroupSubscription. Perhaps instead of setting it equal to the current local subscription, we should set it to null or empty. We could try to maintain a cleaner separation between the local and group subscriptions. We would then need to update ConsumerMetadata to work with both the local and group subscription.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r367784220", "createdAt": "2020-01-17T06:20:22Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMDIzOA==", "bodyText": "@hachikuji Thanks for the reviews. I pushed two commits. The first one just removes reset from onJoinPrepare since we don't need it any more. I also wanted to try out your suggestion of maintaining clean separation between local and group subscriptions. The last commit does this. Do you think it is worth making that change?", "url": "https://github.com/apache/kafka/pull/7941#discussion_r369620238", "createdAt": "2020-01-22T15:16:01Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -211,6 +211,7 @@ public String protocolType() {\n     protected JoinGroupRequestData.JoinGroupRequestProtocolCollection metadata() {\n         log.debug(\"Joining group with current subscription: {}\", subscriptions.subscription());\n         this.joinedSubscription = subscriptions.subscription();\n+        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMwMw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTIyMTU4OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo0MToyOFrOFgm09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDozNToyM1rOFgqHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDkwMQ==", "bodyText": "It might borderline overkill, but I'm considering if we could avoid the copy here with logic like the following:\nif (!groupSubscription.isEmpty())\n  return groupSubscription;\nelse\n  return subscription;\n\nBasically relying on the the group subscription being a superset of the local subscription when it is defined.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r369734901", "createdAt": "2020-01-22T18:41:28Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -335,22 +329,24 @@ synchronized boolean matchesSubscribedPattern(String topic) {\n     }\n \n     /**\n-     * Get the subscription for the group. For the leader, this will include the union of the\n-     * subscriptions of all group members. For followers, it is just that member's subscription.\n-     * This is used when querying topic metadata to detect the metadata changes which would\n+     * Get the subcription topics for which metadata is required . For the leader, this will include\n+     * the union of the subscriptions of all group members. For followers, it is just that member's\n+     * subscription. This is used when querying topic metadata to detect the metadata changes which would\n      * require rebalancing. The leader fetches metadata for all topics in the group so that it\n      * can do the partition assignment (which requires at least partition counts for all topics\n      * to be assigned).\n      *\n      * @return The union of all subscribed topics in the group if this member is the leader\n      *   of the current generation; otherwise it returns the same set as {@link #subscription()}\n      */\n-    synchronized Set<String> groupSubscription() {\n-        return this.groupSubscription;\n+    synchronized Set<String> metadataTopics() {\n+        Set<String> topics = new HashSet<>(groupSubscription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4ODc1MQ==", "bodyText": "@hachikuji Thanks for the review, updated. I had to update one unit test since it wasn't using a superset for group subscription, but think that is ok.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r369788751", "createdAt": "2020-01-22T20:35:23Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/SubscriptionState.java", "diffHunk": "@@ -335,22 +329,24 @@ synchronized boolean matchesSubscribedPattern(String topic) {\n     }\n \n     /**\n-     * Get the subscription for the group. For the leader, this will include the union of the\n-     * subscriptions of all group members. For followers, it is just that member's subscription.\n-     * This is used when querying topic metadata to detect the metadata changes which would\n+     * Get the subcription topics for which metadata is required . For the leader, this will include\n+     * the union of the subscriptions of all group members. For followers, it is just that member's\n+     * subscription. This is used when querying topic metadata to detect the metadata changes which would\n      * require rebalancing. The leader fetches metadata for all topics in the group so that it\n      * can do the partition assignment (which requires at least partition counts for all topics\n      * to be assigned).\n      *\n      * @return The union of all subscribed topics in the group if this member is the leader\n      *   of the current generation; otherwise it returns the same set as {@link #subscription()}\n      */\n-    synchronized Set<String> groupSubscription() {\n-        return this.groupSubscription;\n+    synchronized Set<String> metadataTopics() {\n+        Set<String> topics = new HashSet<>(groupSubscription);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDkwMQ=="}, "originalCommit": {"oid": "6f574eaaa40d40b530808a50ced0f328012ade99"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODMyMTQ1OnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoyMjo0M1rOFhEZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjozODo0MVrOFhE-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxOTI3OQ==", "bodyText": "I guess we could restore this location with the change to the group subscription maintenance? I don't feel too strongly since the new location works also.", "url": "https://github.com/apache/kafka/pull/7941#discussion_r370219279", "createdAt": "2020-01-23T16:22:43Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -689,7 +690,6 @@ protected void onJoinPrepare(int generation, String memberId) {\n         }\n \n         isLeader = false;\n-        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57765e11ecfa34b51048e1f1c361ecf1ab63dbd2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyODgxNg==", "bodyText": "@hachikuji Thanks for the review. Restored this so that the only change from this PR is the clean separation of group and local subscriptions", "url": "https://github.com/apache/kafka/pull/7941#discussion_r370228816", "createdAt": "2020-01-23T16:38:41Z", "author": {"login": "rajinisivaram"}, "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -689,7 +690,6 @@ protected void onJoinPrepare(int generation, String memberId) {\n         }\n \n         isLeader = false;\n-        subscriptions.resetGroupSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxOTI3OQ=="}, "originalCommit": {"oid": "57765e11ecfa34b51048e1f1c361ecf1ab63dbd2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4343, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}