{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzk1OTMw", "number": 9688, "title": "KAFKA-10017: fix flaky EOS-beta upgrade test", "bodyText": "Call for review @abbccdda @ableegoldman @guozhangwang\nThis PR is for trunk and 2.7. PR for 2.6 is slightly different: #9690", "createdAt": "2020-12-04T09:10:05Z", "url": "https://github.com/apache/kafka/pull/9688", "merged": true, "mergeCommit": {"oid": "567a2ec737ca48cbeeb9c47e90ff3eca8c2b9967"}, "closed": true, "closedAt": "2020-12-11T01:32:31Z", "author": {"login": "mjsax"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiz-vggH2gAyNTMyMzk1OTMwOmU5NGNlNzU5YTBlYTBmOTM4MmZlY2IyODhjZDEwNWFmMjg3NzExZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkUWJYAH2gAyNTMyMzk1OTMwOjdlOWQzNjY3NjRjODA4MjIxOTY1YmFiMzJhYmUzNmJhMmEwYjQ3NWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/e94ce759a0ea0f9382fecb288cd105af287711eb", "committedDate": "2020-12-04T09:04:21Z", "message": "KAFKA-10017: fix flaky EOS-beta upgrade test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc3OTg4", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544777988", "createdAt": "2020-12-04T09:14:30Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNDozMVrOH_Hsig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNDozMVrOH_Hsig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODQyNg==", "bodyText": "Side cleanup", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535948426", "createdAt": "2020-12-04T09:14:31Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -105,8 +100,8 @@\n     public boolean injectError;\n \n     private static final int NUM_BROKERS = 3;\n-    private static final int MAX_POLL_INTERVAL_MS = 100 * 1000;\n-    private static final int MAX_WAIT_TIME_MS = 60 * 1000;\n+    private static final int MAX_POLL_INTERVAL_MS = (int) Duration.ofSeconds(100L).toMillis();\n+    private static final long MAX_WAIT_TIME_MS = Duration.ofMinutes(1L).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc4NTQz", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544778543", "createdAt": "2020-12-04T09:15:11Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNToxMVrOH_HuWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNToxMVrOH_HuWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODg5MA==", "bodyText": "This punctuator was an attempt to stabilize the test, but without success. Removing it as this should be a proper fix now.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535948890", "createdAt": "2020-12-04T09:15:11Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -152,27 +147,6 @@\n     private final AtomicInteger commitCounterClient2 = new AtomicInteger(-1);\n     private final AtomicInteger commitRequested = new AtomicInteger(0);\n \n-    // Note: this pattern only works when we just have a single instance running with a single thread\n-    // If we want to extend the test or reuse this CommitPunctuator we should tighten it up\n-    private final AtomicBoolean requestCommit = new AtomicBoolean(false);\n-    private static class CommitPunctuator implements Punctuator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc5MDgy", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544779082", "createdAt": "2020-12-04T09:15:50Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNTo1MVrOH_HwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNTo1MVrOH_HwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0OTMxOQ==", "bodyText": "Added some more details/explanations and also renames a few variables below", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535949319", "createdAt": "2020-12-04T09:15:51Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -319,24 +293,26 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             //   p-2: 10 rec + C ---> 5 rec (pending)\n             //   p-3: 10 rec + C ---> 5 rec (pending)\n             // crash case: (we just assumes that we inject the error for p-0; in reality it might be a different partition)\n+            //             (we don't crash right away and write one record less)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc5Nzk3", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544779797", "createdAt": "2020-12-04T09:16:49Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNjo0OVrOH_HyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNjo0OVrOH_HyiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0OTk2MA==", "bodyText": "This is the first fix: ie how we compute those keys.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535949960", "createdAt": "2020-12-04T09:16:49Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -440,15 +419,18 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             waitForRunning(stateTransitions1);\n             waitForRunning(stateTransitions2);\n \n-            final Set<Long> committedKeys = mkSet(0L, 1L, 2L, 3L);\n+            final Set<Long> newlyCommittedKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgwNDIx", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544780421", "createdAt": "2020-12-04T09:17:39Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNzozOVrOH_H0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxNzozOVrOH_H0pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDUwMQ==", "bodyText": "This is the second fix: depending on task movement, we have different set of committed records.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535950501", "createdAt": "2020-12-04T09:17:39Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -457,33 +439,46 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // phase 6: (complete second batch of data; crash: let second client fail on commit)\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n-            // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            // crash case:\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n+            // stop case: (both client commit regularly)\n+            //            (depending on the task movement in phase 5, we may or may not get newly committed data;\n+            //             we show the case for which p-2 and p-3 are newly committed below)\n+            //   p-0: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            // crash case: (second/alpha client fails and both TX are aborted)\n+            //             (first/beta client reprocessed the 10 records and commits TX)\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n             commitCounterClient1.set(0);\n \n             if (!injectError) {\n-                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade =\n-                    prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n-                writeInputData(committedInputDataDuringUpgrade);\n+                final List<KeyValue<Long, Long>> finishSecondBatch = prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n+                writeInputData(finishSecondBatch);\n \n+                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeFirstUpgrade", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 256}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgxMTQy", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544781142", "createdAt": "2020-12-04T09:18:36Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxODozNlrOH_H25w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxODozNlrOH_H25w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTA3OQ==", "bodyText": "For this, we needed to preserve old uncommittedState further above.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535951079", "createdAt": "2020-12-04T09:18:36Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -457,33 +439,46 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // phase 6: (complete second batch of data; crash: let second client fail on commit)\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n-            // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            // crash case:\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n+            // stop case: (both client commit regularly)\n+            //            (depending on the task movement in phase 5, we may or may not get newly committed data;\n+            //             we show the case for which p-2 and p-3 are newly committed below)\n+            //   p-0: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            // crash case: (second/alpha client fails and both TX are aborted)\n+            //             (first/beta client reprocessed the 10 records and commits TX)\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n             commitCounterClient1.set(0);\n \n             if (!injectError) {\n-                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade =\n-                    prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n-                writeInputData(committedInputDataDuringUpgrade);\n+                final List<KeyValue<Long, Long>> finishSecondBatch = prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n+                writeInputData(finishSecondBatch);\n \n+                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeFirstUpgrade\n+                    .stream()\n+                    .filter(pair -> !keysFirstClientAlpha.contains(pair.key))\n+                    .filter(pair -> !newlyCommittedKeys.contains(pair.key))\n+                    .collect(Collectors.toList());\n+                committedInputDataDuringUpgrade.addAll(\n+                    finishSecondBatch\n+                );\n+\n+                expectedUncommittedResult.addAll(\n+                    computeExpectedResult(finishSecondBatch, uncommittedState)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgxNzE0", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544781714", "createdAt": "2020-12-04T09:19:20Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxOToyMFrOH_H46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxOToyMFrOH_H46w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTU5NQ==", "bodyText": "Similar fix as above: we compute those keys differently now.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535951595", "createdAt": "2020-12-04T09:19:20Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -774,15 +769,18 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             waitForRunning(stateTransitions1);\n             waitForRunning(stateTransitions2);\n \n-            committedKeys.addAll(mkSet(0L, 1L, 2L, 3L));\n+            newlyCommittedKeys.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 499}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgyMTM0", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544782134", "createdAt": "2020-12-04T09:19:55Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxOTo1NVrOH_H6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxOTo1NVrOH_H6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTkzOA==", "bodyText": "Similar to above: we need to be more flexible (ie, depend on actual task movement)", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535951938", "createdAt": "2020-12-04T09:19:55Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -792,24 +790,35 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n             // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n             // crash case:  (we just assumes that we inject the error for p-2; in reality it might be a different partition)\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   5 rec + A + 5 rec + C ---> 5 rec + C\n             commitCounterClient1.set(-1);\n             commitCounterClient2.set(-1);\n \n-            final List<KeyValue<Long, Long>> committedInputDataAfterUpgrade =\n+            final List<KeyValue<Long, Long>> finishLastBatch =\n                 prepareData(35L, 40L, 0L, 1L, 2L, 3L);\n-            writeInputData(committedInputDataAfterUpgrade);\n+            writeInputData(finishLastBatch);\n+\n+            final Set<Long> uncommittedKeys = mkSet(0L, 1L, 2L, 3L);\n+            uncommittedKeys.removeAll(keysSecondClientAlphaTwo);\n+            uncommittedKeys.removeAll(newlyCommittedKeys);\n+            final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeSecondUpgrade", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 549}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgyNzMw", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544782730", "createdAt": "2020-12-04T09:20:47Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMDo0N1rOH_H8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMDo0N1rOH_H8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjQ4MQ==", "bodyText": "I also increase the TX timeout from the to low default of 10 seconds, to avoid broker side TX-abort during the test.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535952481", "createdAt": "2020-12-04T09:20:47Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -916,11 +917,12 @@ public void close() {\n         properties.put(StreamsConfig.CLIENT_ID_CONFIG, appDir);\n         properties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, processingGuarantee);\n         properties.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, Long.MAX_VALUE);\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.METADATA_MAX_AGE_CONFIG), \"1000\");\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.METADATA_MAX_AGE_CONFIG), Duration.ofSeconds(1L).toMillis());\n         properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG), 5 * 1000);\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG), 5 * 1000 - 1);\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG), (int) Duration.ofSeconds(5L).toMillis());\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG), (int) Duration.ofSeconds(5L).minusMillis(1L).toMillis());\n         properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG), MAX_POLL_INTERVAL_MS);\n+        properties.put(StreamsConfig.producerPrefix(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG), (int) Duration.ofMinutes(5L).toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 606}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgyODUy", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544782852", "createdAt": "2020-12-04T09:20:58Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMDo1OFrOH_H8zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMDo1OFrOH_H8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjU5MQ==", "bodyText": "Increase wait time here, too.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535952591", "createdAt": "2020-12-04T09:20:58Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1019,7 +1021,8 @@ private void verifyUncommitted(final List<KeyValue<Long, Long>> expectedResult)\n                     )\n                 ),\n                 MULTI_PARTITION_OUTPUT_TOPIC,\n-                numberOfRecords\n+                numberOfRecords,\n+                MAX_WAIT_TIME_MS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 616}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgzNDEx", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544783411", "createdAt": "2020-12-04T09:21:45Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMTo0NVrOH_H-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMTo0NVrOH_H-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MzA4Mg==", "bodyText": "This is another fix (we did see some error for getting the state stores, too).", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535953082", "createdAt": "2020-12-04T09:21:45Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1074,19 +1077,27 @@ private void addAllKeys(final Set<Long> allKeys, final List<KeyValue<Long, Long>\n     }\n \n     private Set<Long> keysFromInstance(final KafkaStreams streams) throws Exception {\n-        final ReadOnlyKeyValueStore<Long, Long> store = getStore(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 624}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzgzNTg1", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544783585", "createdAt": "2020-12-04T09:21:58Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMTo1OFrOH_H_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMTo1OFrOH_H_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MzI0Mg==", "bodyText": "Side cleanup", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535953242", "createdAt": "2020-12-04T09:21:58Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -1132,7 +1143,7 @@ public ErrorInjector(final Map<String, Object> configs) {\n         }\n \n         @Override\n-        public void commitTransaction() throws ProducerFencedException {\n+        public void commitTransaction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 664}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzg0NzA5", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-544784709", "createdAt": "2020-12-04T09:23:22Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMzoyMlrOH_IDGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToyMzoyMlrOH_IDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NDIwMQ==", "bodyText": "We have cases when we pass in 0 and for this case, the old code did loop forever until the timeout hits and the test fails. Seems this logic was wrong from the beginning on an we should stop fetching if maxMessages <= 0 instead of looping forever.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r535954201", "createdAt": "2020-12-04T09:23:22Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -1161,7 +1161,7 @@ public static void verifyKeyValueTimestamps(final Properties consumerConfig,\n     }\n \n     private static boolean continueConsuming(final int messagesConsumed, final int maxMessages) {\n-        return maxMessages <= 0 || messagesConsumed < maxMessages;\n+        return maxMessages > 0 && messagesConsumed < maxMessages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MjI4NDE3", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-545228417", "createdAt": "2020-12-04T19:11:51Z", "commit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToxMTo1MVrOH_eUaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyNToxMVrOH_e4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxOTA4Mw==", "bodyText": "I'm guessing the root source of this all is a bad assumption that the assignment would be stable if a stable CLIENT_ID was used? I remember we discussed that back when you first wrote this test, I'm sorry for any misinformation I supplied based on my own assumption about how the CLIENT_ID would be used :/", "url": "https://github.com/apache/kafka/pull/9688#discussion_r536319083", "createdAt": "2020-12-04T19:11:51Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -792,24 +790,35 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n             // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n             // crash case:  (we just assumes that we inject the error for p-2; in reality it might be a different partition)\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   5 rec + A + 5 rec + C ---> 5 rec + C\n             commitCounterClient1.set(-1);\n             commitCounterClient2.set(-1);\n \n-            final List<KeyValue<Long, Long>> committedInputDataAfterUpgrade =\n+            final List<KeyValue<Long, Long>> finishLastBatch =\n                 prepareData(35L, 40L, 0L, 1L, 2L, 3L);\n-            writeInputData(committedInputDataAfterUpgrade);\n+            writeInputData(finishLastBatch);\n+\n+            final Set<Long> uncommittedKeys = mkSet(0L, 1L, 2L, 3L);\n+            uncommittedKeys.removeAll(keysSecondClientAlphaTwo);\n+            uncommittedKeys.removeAll(newlyCommittedKeys);\n+            final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeSecondUpgrade", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTkzOA=="}, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyMTU5NQ==", "bodyText": "5 minutes seems kind of long, the whole test should take only a few minutes and it has 11 phases.  Would 1 minute be more reasonable? Or do we actually need this timeout to cover more than one or two phases?", "url": "https://github.com/apache/kafka/pull/9688#discussion_r536321595", "createdAt": "2020-12-04T19:14:21Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -916,11 +917,12 @@ public void close() {\n         properties.put(StreamsConfig.CLIENT_ID_CONFIG, appDir);\n         properties.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, processingGuarantee);\n         properties.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, Long.MAX_VALUE);\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.METADATA_MAX_AGE_CONFIG), \"1000\");\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.METADATA_MAX_AGE_CONFIG), Duration.ofSeconds(1L).toMillis());\n         properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG), 5 * 1000);\n-        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG), 5 * 1000 - 1);\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG), (int) Duration.ofSeconds(5L).toMillis());\n+        properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG), (int) Duration.ofSeconds(5L).minusMillis(1L).toMillis());\n         properties.put(StreamsConfig.consumerPrefix(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG), MAX_POLL_INTERVAL_MS);\n+        properties.put(StreamsConfig.producerPrefix(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG), (int) Duration.ofMinutes(5L).toMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MjQ4MQ=="}, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 606}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODM0MQ==", "bodyText": "Thanks for cleaning up the variable names \ud83d\ude42", "url": "https://github.com/apache/kafka/pull/9688#discussion_r536328341", "createdAt": "2020-12-04T19:25:11Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -319,24 +293,26 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             //   p-2: 10 rec + C ---> 5 rec (pending)\n             //   p-3: 10 rec + C ---> 5 rec (pending)\n             // crash case: (we just assumes that we inject the error for p-0; in reality it might be a different partition)\n+            //             (we don't crash right away and write one record less)\n             //   p-0: 10 rec + C ---> 4 rec (pending)\n             //   p-1: 10 rec + C ---> 5 rec (pending)\n             //   p-2: 10 rec + C ---> 5 rec (pending)\n             //   p-3: 10 rec + C ---> 5 rec (pending)\n             final Set<Long> cleanKeys = mkSet(0L, 1L, 2L, 3L);\n-            final Set<Long> keyFilterFirstClient = keysFromInstance(streams1Alpha);\n-            final long potentiallyFirstFailingKey = keyFilterFirstClient.iterator().next();\n-            cleanKeys.remove(potentiallyFirstFailingKey);\n+            final Set<Long> keysFirstClientAlpha = keysFromInstance(streams1Alpha);\n+            final long firstFailingKeyForCrashCase = keysFirstClientAlpha.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64283cbbfbcc569b1cbbd52d936c3836f45fde0", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/e64283cbbfbcc569b1cbbd52d936c3836f45fde0", "committedDate": "2020-12-04T23:36:41Z", "message": "Github comment: reduce TX timeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzY5MDcw", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-545369070", "createdAt": "2020-12-04T23:53:10Z", "commit": {"oid": "e64283cbbfbcc569b1cbbd52d936c3836f45fde0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzczNDQ1", "url": "https://github.com/apache/kafka/pull/9688#pullrequestreview-546773445", "createdAt": "2020-12-08T06:14:54Z", "commit": {"oid": "e64283cbbfbcc569b1cbbd52d936c3836f45fde0"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoxNDo1NFrOIBIvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoxNzoyNlrOIBIy5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2MjYxMA==", "bodyText": "Are these changes intentional?", "url": "https://github.com/apache/kafka/pull/9688#discussion_r538062610", "createdAt": "2020-12-08T06:14:54Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -540,18 +535,18 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             }\n \n             // 7. only for crash case:\n-            //     7a. restart the second client in eos-alpha mode and wait until rebalance stabilizes\n+            //     7a. restart the failed second client in eos-alpha mode and wait until rebalance stabilizes\n             //     7b. write third batch of input data\n             //         * fail the first (i.e., eos-beta) client during commit\n             //         * the eos-alpha client should not pickup the pending offsets\n             //         * verify uncommitted and committed result\n             //     7c. restart the first client in eos-beta mode and wait until rebalance stabilizes\n             //\n             // crash case:\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C + 5 rec + C ---> 10 rec + A + 10 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C + 5 rec + C ---> 10 rec + A + 10 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C ---> 10 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C ---> 10 rec + C\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C + 5 rec + C ---> 10 rec + A + 10 rec + C", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64283cbbfbcc569b1cbbd52d936c3836f45fde0"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2MjY1NA==", "bodyText": "nit: second failed client?", "url": "https://github.com/apache/kafka/pull/9688#discussion_r538062654", "createdAt": "2020-12-08T06:15:06Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -540,18 +535,18 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             }\n \n             // 7. only for crash case:\n-            //     7a. restart the second client in eos-alpha mode and wait until rebalance stabilizes\n+            //     7a. restart the failed second client in eos-alpha mode and wait until rebalance stabilizes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64283cbbfbcc569b1cbbd52d936c3836f45fde0"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2MzA5NQ==", "bodyText": "Nice catch.\nReminds me though, why the second rebalance may not be deterministic in migrating tasks back? I thought our algorithm should produce deterministic results? cc @ableegoldman", "url": "https://github.com/apache/kafka/pull/9688#discussion_r538063095", "createdAt": "2020-12-08T06:16:19Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -457,33 +439,46 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // phase 6: (complete second batch of data; crash: let second client fail on commit)\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n-            // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + C\n-            // crash case:\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C ---> 5 rec + A + 5 rec + C\n+            // stop case: (both client commit regularly)\n+            //            (depending on the task movement in phase 5, we may or may not get newly committed data;\n+            //             we show the case for which p-2 and p-3 are newly committed below)\n+            //   p-0: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec     ---> 5 rec + C\n+            // crash case: (second/alpha client fails and both TX are aborted)\n+            //             (first/beta client reprocessed the 10 records and commits TX)\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C             ---> 5 rec + A + 5 rec + C\n             commitCounterClient1.set(0);\n \n             if (!injectError) {\n-                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade =\n-                    prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n-                writeInputData(committedInputDataDuringUpgrade);\n+                final List<KeyValue<Long, Long>> finishSecondBatch = prepareData(15L, 20L, 0L, 1L, 2L, 3L);\n+                writeInputData(finishSecondBatch);\n \n+                final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeFirstUpgrade", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MDUwMQ=="}, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2MzU5MQ==", "bodyText": "@ableegoldman is it related to the UUID randomness? If yes please ignore my other question above.", "url": "https://github.com/apache/kafka/pull/9688#discussion_r538063591", "createdAt": "2020-12-08T06:17:26Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -792,24 +790,35 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n             // expected end state per output partition (C == COMMIT; A == ABORT; ---> indicate the changes):\n             //\n             // stop case:\n-            //   p-0: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + C + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + C   +   5 rec + C ---> 5 rec + C\n             // crash case:  (we just assumes that we inject the error for p-2; in reality it might be a different partition)\n-            //   p-0: 10 rec + C + 4 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-1: 10 rec + C + 5 rec + A + 5 rec + C + 5 rec + C + 10 rec + A + 10 rec + C + 5 rec + C ---> 5 rec + C\n-            //   p-2: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 4 rec + A + 5 rec + C ---> 5 rec + C\n-            //   p-3: 10 rec + C + 5 rec + C + 5 rec + A + 5 rec + C + 10 rec + C + 5 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-0: 10 rec + C   +   4 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-1: 10 rec + C   +   5 rec + A + 5 rec + C + 5 rec + C   +   10 rec + A + 10 rec + C   +   5 rec + C             ---> 5 rec + C\n+            //   p-2: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   4 rec + A + 5 rec + C ---> 5 rec + C\n+            //   p-3: 10 rec + C   +   5 rec + C + 5 rec + A + 5 rec + C   +   10 rec + C                +   5 rec + A + 5 rec + C ---> 5 rec + C\n             commitCounterClient1.set(-1);\n             commitCounterClient2.set(-1);\n \n-            final List<KeyValue<Long, Long>> committedInputDataAfterUpgrade =\n+            final List<KeyValue<Long, Long>> finishLastBatch =\n                 prepareData(35L, 40L, 0L, 1L, 2L, 3L);\n-            writeInputData(committedInputDataAfterUpgrade);\n+            writeInputData(finishLastBatch);\n+\n+            final Set<Long> uncommittedKeys = mkSet(0L, 1L, 2L, 3L);\n+            uncommittedKeys.removeAll(keysSecondClientAlphaTwo);\n+            uncommittedKeys.removeAll(newlyCommittedKeys);\n+            final List<KeyValue<Long, Long>> committedInputDataDuringUpgrade = uncommittedInputDataBeforeSecondUpgrade", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1MTkzOA=="}, "originalCommit": {"oid": "e94ce759a0ea0f9382fecb288cd105af287711eb"}, "originalPosition": 549}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9d366764c808221965bab32abe36ba2a0b475c", "author": {"user": {"login": "mjsax", "name": "Matthias J. Sax"}}, "url": "https://github.com/apache/kafka/commit/7e9d366764c808221965bab32abe36ba2a0b475c", "committedDate": "2020-12-09T01:20:48Z", "message": "improve error message for debugging"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2544, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}