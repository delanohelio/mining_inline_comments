{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MTEwNDQy", "number": 9802, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjozNToyN1rOFKO4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjozNToyN1rOFKO4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MjczODYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNjozNToyN1rOIM6Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTo1MTo0MVrOIOlC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw==", "bodyText": "How about using a helper method to create new Node(id, \"\", -1) ? It can be used by MetadataResponse also.", "url": "https://github.com/apache/kafka/pull/9802#discussion_r550409107", "createdAt": "2020-12-31T06:35:27Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0MTIzNQ==", "bodyText": "That's not a bad idea. I think Node is public, though we haven't always been strict about requiring KIPs for new methods. A couple options are to add a new constructor or a static factory. We could also add a utility somewhere, but that feels a little clumsy. Thoughts?", "url": "https://github.com/apache/kafka/pull/9802#discussion_r551641235", "createdAt": "2021-01-05T00:04:11Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw=="}, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4ODk0MA==", "bodyText": "I think Node is public, though we haven't always been strict about requiring KIPs for new methods. A couple options are to add a new constructor or a static factory. We could also add a utility somewhere, but that feels a little clumsy. Thoughts?\n\nYou are right.\nFor another, is this a kind of behavior change to ClientQuotaCallback (if custom ClientQuotaCallback does depend on the null value)? If so, how we keep the compatibility or should we offer a helper method to enable ClientQuotaCallback to validate the \"new Node(id, \"\", -1)\"?", "url": "https://github.com/apache/kafka/pull/9802#discussion_r551688940", "createdAt": "2021-01-05T02:55:13Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw=="}, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4OTQxNQ==", "bodyText": "I think what we are implementing here is what is documented in PartitionInfo:\n    /**\n     * The complete set of replicas for this partition regardless of whether they are alive or up-to-date\n     */\n    public Node[] replicas() {\n        return replicas;\n    }\nEven the internal logic in PartitionInfo assumes non-null values in the array (I caught this issue because of an NPE in the toString). We probably can't 100% guarantee that all quota callbacks have appropriate isEmpty checks, but my guess is that usage of this plugin is rare in any case and reliance on the replica set is less likely than reliance on the leader. All in all, I think we're better fixing the bug.", "url": "https://github.com/apache/kafka/pull/9802#discussion_r552089415", "createdAt": "2021-01-05T17:43:17Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw=="}, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1NzkzMA==", "bodyText": "my guess is that usage of this plugin is rare in any case and reliance on the replica set is less likely than reliance on the leader. All in all, I think we're better fixing the bug.\n\nmake sense to me. Thanks for your explanation!", "url": "https://github.com/apache/kafka/pull/9802#discussion_r552157930", "createdAt": "2021-01-05T19:51:41Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -266,8 +266,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n \n   def getClusterMetadata(clusterId: String, listenerName: ListenerName): Cluster = {\n     val snapshot = metadataSnapshot\n-    val nodes = snapshot.aliveNodes.map { case (id, nodes) => (id, nodes.get(listenerName).orNull) }\n-    def node(id: Integer): Node = nodes.get(id.toLong).orNull\n+    val nodes = snapshot.aliveNodes.flatMap { case (id, nodesByListener) =>\n+      nodesByListener.get(listenerName).map { node =>\n+        id -> node\n+      }\n+    }\n+\n+    def node(id: Integer): Node = {\n+      nodes.getOrElse(id.toLong, new Node(id, \"\", -1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQwOTEwNw=="}, "originalCommit": {"oid": "81dd02bb015d75975ab6f27e78bf7e5eb0e6a224"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3575, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}