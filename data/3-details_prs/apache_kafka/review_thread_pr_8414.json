{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTIyODM5", "number": 8414, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowMjoyNFrODuMyrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozMDowNFrODupQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcwNjY4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/Transformer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowMjoyNVrOGAEXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0OToxM1rOGBx4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNDY0Mw==", "bodyText": "In the KIP, I proposed to leave the existing Processor and Transformer init methods with a raw ProcessorContext argument. This will give all users a rawtypes warning with no recourse. Instead, in this PR, I'm adding <Object, Object> bounds instead. This at least allows users to also add the generics if they desire, while not changing the practical bounds at all. If this proves acceptable, I'll update the KIP.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402724643", "createdAt": "2020-04-03T04:02:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/Transformer.java", "diffHunk": "@@ -64,7 +64,7 @@\n      *\n      * @param context the context\n      */\n-    void init(final ProcessorContext context);\n+    void init(final ProcessorContext<Object, Object> context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMTU3NA==", "bodyText": "Not sure if I understand this. Can you elaborate?\nBtw: to we think we will have any path forward to let user specify the actually return type (that is currently only R but does not specify the actually key or value type), such that we would pass in ProcessorContext<K, V>? Can't remember if we discussed this on the KIP (just a side question).", "url": "https://github.com/apache/kafka/pull/8414#discussion_r403411574", "createdAt": "2020-04-04T02:26:04Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/Transformer.java", "diffHunk": "@@ -64,7 +64,7 @@\n      *\n      * @param context the context\n      */\n-    void init(final ProcessorContext context);\n+    void init(final ProcessorContext<Object, Object> context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNDY0Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1ODQ3Mg==", "bodyText": "Good question. Yes, it's been forever, but we did (myself, I had to look back over the KIP to figure this out when I wrote the comment).\nThe idea is to discuss separately how to migrate to a version of Transformer that allows bounding the output types. The ticket for this is https://issues.apache.org/jira/browse/KAFKA-8396. This KIP was already sweeping enough in its design and implementation scope that we wanted to give Transformer its own discussion. Accordingly, this KIP only has to deal with the Processor API change and the consequences that are necessary/convenient to tackle at the same time.\nPart of the reason to give Transformer its own discussion is that there are other opportunities to simplify transform() use cases (see the ticket for more info), so it really would be its own conversation.\nWhat I was talking about above is that I proposed in this KIP only to leave Transformer completely alone, so this would still be a raw type: void init(final ProcessorContext context). But what I realized just now is that anyone who implements the interface will get a \"raw types\" warning from javac, and there is nothing they can do about it but ignore it. If they try to add the equivalent <Object, Object> or <?, ?> parameters, their implementation would clash with our interface.\nOTOH, if we go ahead and add the parameters as I proposed above, then at least they can also add the <Object, Object> parameters to their code to resolve the warning. They can not bound the types tighter than that, and neither can we, until we pick up KAFKA-8396. So, it doesn't provide any additional type safety, just a way to resolve the warning without resolving to ignoring it. AFAICT, there is no way to compatibly migrate the interface to accommodate greater type safety. KAFKA-8396 will have to include deprecating something in any case.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r404358472", "createdAt": "2020-04-06T20:11:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/Transformer.java", "diffHunk": "@@ -64,7 +64,7 @@\n      *\n      * @param context the context\n      */\n-    void init(final ProcessorContext context);\n+    void init(final ProcessorContext<Object, Object> context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNDY0Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxOTA3Mg==", "bodyText": "Thanks for clarification.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r404519072", "createdAt": "2020-04-07T03:49:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/Transformer.java", "diffHunk": "@@ -64,7 +64,7 @@\n      *\n      * @param context the context\n      */\n-    void init(final ProcessorContext context);\n+    void init(final ProcessorContext<Object, Object> context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNDY0Mw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcwNzMyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowMjo0OFrOGAEXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowMjo0OFrOGAEXgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNDczNw==", "bodyText": "As proposed, Void types indicate that you can't forward anything.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402724737", "createdAt": "2020-04-03T04:02:48Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformer.java", "diffHunk": "@@ -69,7 +69,7 @@\n      * @throws IllegalStateException If store gets registered after initialization is already finished\n      * @throws StreamsException if the store's change log does not contain the partition\n      */\n-    void init(final ProcessorContext context);\n+    void init(final ProcessorContext<Void, Void> context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcxMDA1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowNDoyN1rOGAEY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDowNDoyN1rOGAEY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNTExOA==", "bodyText": "Even in this first PR, we expose some bugs. In this case, ValueGetters and ValueTransformers shouldn't be able to forward anything, but nothing previously prevented them from doing it. Now, the new bounds force us to wire in a context that has Void bounds.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402725118", "createdAt": "2020-04-03T04:04:27Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamKTableJoinProcessor.java", "diffHunk": "@@ -49,11 +50,11 @@\n     }\n \n     @Override\n-    public void init(final ProcessorContext context) {\n+    public void init(final ProcessorContext<Object, Object> context) {\n         super.init(context);\n         metrics = (StreamsMetricsImpl) context.metrics();\n         droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(Thread.currentThread().getName(), context.taskId().toString(), metrics);\n-        valueGetter.init(context);\n+        valueGetter.init(new ForwardingDisabledProcessorContext(context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcxODcxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/SessionCacheFlushListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxMDoyMFrOGAEd5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxMDoyMFrOGAEd5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNjM3NQ==", "bodyText": "You'll notice that sometimes, I use wildcard (?) generic parameter bounds and other times, Object. The reason is a little subtle. It's because the InternalProcessorContext has a method that takes a ProcessorNode argument. We want to let (ourselves) pass in any ProcessorNode, not just an exactly <Object, Object> one. But for all the ProcessorContext references, we pass the context in, and we have to do it untyped anyway, so the type bound doesn't matter. It results in less mind-bending code for users to declare types using the Object,Object bounds, and it makes no difference to them, as far as the calls to forward, since the parameterized types are only upper bounds anyway.\nPunchline, it doesn't really matter, but there are considerations that led me to use ? in some cases and Object in others.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402726375", "createdAt": "2020-04-03T04:10:20Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/SessionCacheFlushListener.java", "diffHunk": "@@ -24,11 +24,11 @@\n import org.apache.kafka.streams.state.internals.CacheFlushListener;\n \n class SessionCacheFlushListener<K, V> implements CacheFlushListener<Windowed<K>, V> {\n-    private final InternalProcessorContext context;\n-    private final ProcessorNode myNode;\n+    private final InternalProcessorContext<Object, Object> context;\n+    private final ProcessorNode<?, ?> myNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcyMjc4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/ProcessorContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxMzoyMFrOGAEgQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxMzoyMFrOGAEgQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNjk3Ng==", "bodyText": "Not part of the KIP, and no difference whatsoever to the public API, but (unlike the javadoc I added), declaring that a method throws an unchecked exception is a totally ineffective way to inform users that it might get thrown (since they'll only ever see the declaraction if they read the source of this file). At least, the javadoc will show up in their IDE.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402726976", "createdAt": "2020-04-03T04:13:20Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/ProcessorContext.java", "diffHunk": "@@ -158,11 +161,12 @@ Cancellable schedule(final long intervalMs,\n      * @param interval the time interval between punctuations (supported minimum is 1 millisecond)\n      * @param type one of: {@link PunctuationType#STREAM_TIME}, {@link PunctuationType#WALL_CLOCK_TIME}\n      * @param callback a function consuming timestamps representing the current stream or system time\n+     * @throws IllegalArgumentException if the interval is under 1 millisecond\n      * @return a handle allowing cancellation of the punctuation schedule established by this method\n      */\n     Cancellable schedule(final Duration interval,\n                          final PunctuationType type,\n-                         final Punctuator callback) throws IllegalArgumentException;\n+                         final Punctuator callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzcyNTc2OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ForwardingDisabledProcessorContextTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDoxNTowMVrOGAEh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozMToxMVrOGAuUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNzM4NA==", "bodyText": "This test doesn't even compile now, because the compiler checks all these constraints for us. There's no way to express the things we wanted to forbid.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r402727384", "createdAt": "2020-04-03T04:15:01Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ForwardingDisabledProcessorContextTest.java", "diffHunk": "@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.processor.internals;\n-\n-import org.apache.kafka.streams.errors.StreamsException;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n-import org.apache.kafka.streams.processor.To;\n-import org.easymock.EasyMockRunner;\n-import org.easymock.Mock;\n-import org.easymock.MockType;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-@RunWith(EasyMockRunner.class)\n-public class ForwardingDisabledProcessorContextTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjEwNQ==", "bodyText": "Sweet!", "url": "https://github.com/apache/kafka/pull/8414#discussion_r403412105", "createdAt": "2020-04-04T02:31:11Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ForwardingDisabledProcessorContextTest.java", "diffHunk": "@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.kafka.streams.processor.internals;\n-\n-import org.apache.kafka.streams.errors.StreamsException;\n-import org.apache.kafka.streams.processor.ProcessorContext;\n-import org.apache.kafka.streams.processor.To;\n-import org.easymock.EasyMockRunner;\n-import org.easymock.Mock;\n-import org.easymock.MockType;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-\n-@RunWith(EasyMockRunner.class)\n-public class ForwardingDisabledProcessorContextTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNzM4NA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjM3MTU2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjozMDowNFrOGAuUMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoxMjo1MFrOGBoHfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjAxNg==", "bodyText": "nit: fix indention (similar below)", "url": "https://github.com/apache/kafka/pull/8414#discussion_r403412016", "createdAt": "2020-04-04T02:30:04Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -126,15 +126,15 @@ public StateStore getStateStore(final String name) {\n     }\n \n     @Override\n-    public <K, V> void forward(final K key,\n-                               final V value) {\n+    public <K1 extends K, V1 extends V> void forward(final K1 key,\n+                               final V1 value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a680111fba7f3517afa248a9c718cb348e8c480"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTAzNg==", "bodyText": "Ah, forgot to reformat. Thanks for the catch.", "url": "https://github.com/apache/kafka/pull/8414#discussion_r404359036", "createdAt": "2020-04-06T20:12:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -126,15 +126,15 @@ public StateStore getStateStore(final String name) {\n     }\n \n     @Override\n-    public <K, V> void forward(final K key,\n-                               final V value) {\n+    public <K1 extends K, V1 extends V> void forward(final K1 key,\n+                               final V1 value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMjAxNg=="}, "originalCommit": {"oid": "2a680111fba7f3517afa248a9c718cb348e8c480"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3197, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}