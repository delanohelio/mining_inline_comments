{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTUxMzYx", "number": 8902, "title": "KAFKA-10179: Pass correct changelog topic to state serdes", "bodyText": "Until now we always passed the default changelog topic name\nto the state serdes. However, for optimized source tables\nand global tables the changelog topic is the source topic.\nMost serdes do not use the topic name passed to them.\nHowever, if the serdes actually use the topic name for\n(de)serialization, e.g., when Kafka Streams is used with\nConfluent's Schema Registry, a\norg.apache.kafka.common.errors.SerializationException is thrown.\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-19T15:04:12Z", "url": "https://github.com/apache/kafka/pull/8902", "merged": true, "mergeCommit": {"oid": "813f92c21ad4bd7ffdd8acc66c20d31927e7a67f"}, "closed": true, "closedAt": "2020-07-09T18:50:32Z", "author": {"login": "cadonna"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs6NLJAFqTQzNDM1MzQxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczNypFAH2gAyNDM3MTUxMzYxOmJmYWNiNjliODg5NWI0YzcyODc0OTQyZDM3ZmFhOWEzNmNhMzU3ZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzUzNDE2", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-434353416", "createdAt": "2020-06-19T21:40:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0MDoxOFrOGmh3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTo0NTo0MVrOGmh9Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MzkxMg==", "bodyText": "It seems this is a slight change in behavior? Before, we would only get a topic name returned in register was called, as we build up a local map. Now, we only rely on stateManager that might contain a topic name for a store, even if register was never called (even if the call to super.register call stateManager.register -- hence, I am wondering if we loose a guard?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r443053912", "createdAt": "2020-06-19T21:40:18Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -120,7 +118,7 @@ public void logChange(final String storeName,\n         throwUnsupportedOperationExceptionIfStandby(\"logChange\");\n         // Sending null headers to changelog topics (KIP-244)\n         collector.send(\n-            storeToChangelogTopic.get(storeName),\n+            stateManager.changelogFor(storeName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NDAwOQ==", "bodyText": "If we only pass through, we can remove the overwrite of the method completely.", "url": "https://github.com/apache/kafka/pull/8902#discussion_r443054009", "createdAt": "2020-06-19T21:40:37Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -103,7 +102,6 @@ public ProcessorStateManager stateManager() {\n     @Override\n     public void register(final StateStore store,\n                          final StateRestoreCallback stateRestoreCallback) {\n-        storeToChangelogTopic.put(store.name(), ProcessorStateManager.storeChangelogTopic(applicationId(), store.name()));\n         super.register(store, stateRestoreCallback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NDQzMQ==", "bodyText": "For which case would it be null?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r443054431", "createdAt": "2020-06-19T21:42:20Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -103,8 +104,12 @@ public void init(final ProcessorContext context,\n \n     @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {\n+        final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n+        final String storeName = name();\n+        final String changelogTopic = internalProcessorContext.changelogFor(storeName);\n         serdes = new StateSerdes<>(\n-            ProcessorStateManager.storeChangelogTopic(context.applicationId(), name()),\n+            changelogTopic != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NDg5Mg==", "bodyText": "nit: move ? to the line above and move ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName), to its own line.\nPreferred formatting (makes it easy to read):\ncondition ?\n  then :\n  else", "url": "https://github.com/apache/kafka/pull/8902#discussion_r443054892", "createdAt": "2020-06-19T21:43:57Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -103,8 +104,12 @@ public void init(final ProcessorContext context,\n \n     @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {\n+        final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n+        final String storeName = name();\n+        final String changelogTopic = internalProcessorContext.changelogFor(storeName);\n         serdes = new StateSerdes<>(\n-            ProcessorStateManager.storeChangelogTopic(context.applicationId(), name()),\n+            changelogTopic != null\n+                ? changelogTopic : ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NTM2Mw==", "bodyText": "Can we add a test for the other (non-optimized) case, too?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r443055363", "createdAt": "2020-06-19T21:45:41Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/TableSourceNodeTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import org.apache.kafka.streams.kstream.Consumed;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+import org.apache.kafka.streams.kstream.internals.KTableSource;\n+import org.apache.kafka.streams.kstream.internals.MaterializedInternal;\n+import org.apache.kafka.streams.kstream.internals.graph.TableSourceNode.TableSourceNodeBuilder;\n+import org.apache.kafka.streams.processor.internals.InternalTopologyBuilder;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.easymock.PowerMock;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({InternalTopologyBuilder.class})\n+public class TableSourceNodeTest {\n+\n+    @Test\n+    public void shouldConnectStateStoreToInputTopicIfInputTopicIsUsedAsChangelog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjAwNTQw", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-436200540", "createdAt": "2020-06-23T22:21:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyMTo0MlrOGn8oaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoyODowMlrOGn8w0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MTAzMw==", "bodyText": "Should we better throw an exception as this method should never be called for global state stores?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r444541033", "createdAt": "2020-06-23T22:21:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -402,4 +402,9 @@ public TaskType taskType() {\n     public Map<TopicPartition, Long> changelogOffsets() {\n         return Collections.unmodifiableMap(checkpointFileCache);\n     }\n+\n+    @Override\n+    public TopicPartition changelogTopicPartitionFor(final String storeName) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MTU1Mg==", "bodyText": "I thinks the store could still be registered, but just does not have a changelog topic? Wondering if the error message might be miss leading?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r444541552", "createdAt": "2020-06-23T22:23:11Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextImpl.java", "diffHunk": "@@ -118,16 +111,24 @@ public void logChange(final String storeName,\n                           final byte[] value,\n                           final long timestamp) {\n         throwUnsupportedOperationExceptionIfStandby(\"logChange\");\n+\n+        final TopicPartition changelogPartition = stateManager().changelogTopicPartitionFor(storeName);\n+        if (changelogPartition == null) {\n+            throw new IllegalStateException(\"Sending records to state store \" + storeName +\n+                \" which has not been registered.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MTgwOQ==", "bodyText": "Cf. my comment from above: we could raise the exception if storeMetadata == null", "url": "https://github.com/apache/kafka/pull/8902#discussion_r444541809", "createdAt": "2020-06-23T22:23:59Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorStateManager.java", "diffHunk": "@@ -578,4 +577,10 @@ private StateStoreMetadata findStore(final TopicPartition changelogPartition) {\n \n         return found.isEmpty() ? null : found.get(0);\n     }\n+\n+    @Override\n+    public TopicPartition changelogTopicPartitionFor(final String storeName) {\n+        final StateStoreMetadata storeMetadata = stores.get(storeName);\n+        return storeMetadata == null ? null : storeMetadata.changelogPartition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0MzE4NQ==", "bodyText": "As above: should we throw here?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r444543185", "createdAt": "2020-06-23T22:28:02Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/test/GlobalStateManagerStub.java", "diffHunk": "@@ -88,4 +88,14 @@ public StateStore getGlobalStore(final String name) {\n     public TaskType taskType() {\n         return TaskType.GLOBAL;\n     }\n+\n+    @Override\n+    public String changelogFor(final String storeName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public TopicPartition changelogTopicPartitionFor(final String storeName) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjE1Mzc1", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-436215375", "createdAt": "2020-06-23T22:57:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjo1NzoyOFrOGn9WwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjo1NzoyOFrOGn9WwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1Mjg5Nw==", "bodyText": "Do we really need this? It seems like overkill to add this abstract class just for one trivial shared method. I'm also wondering if we really need changelogFor at all -- can't we just use changelogTopicPartitionFor and get the topic name from that?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r444552897", "createdAt": "2020-06-23T22:57:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorStateManager.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import java.util.Map;\n+\n+public abstract class AbstractProcessorStateManager implements StateManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTk0NTU5", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-437994559", "createdAt": "2020-06-26T03:42:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo0Mjo0OFrOGpSulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMzo1NjozM1rOGpS5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MTYzOQ==", "bodyText": "I know you've already had a conversation about this in the last cycle of reviews and defended the idea. So, I'm sorry to say that I also disagree with adding this class.\nWe've recently spent several months in an extremely costly refactoring effort clearing up a bunch of unmaintainable code in this exact module. There were many flaws that we had to correct, but one of them was excessive abstraction. There's nothing excessive about this class right now, but experience says it will become so over time. I'd avoid adding abstract classes unless there's an extremely compelling reason to do it. Right now, it just looks like we're saving the concrete classes from storing one field, which doesn't seem too compelling.\nI really want to emphasize that your choice to add this class is very normal, and in some codebases, it would be required style. But, given my experience with maintaining this codebase, I'd really like to inline this and keep the class hierarchy absolutely as flat as possible.", "url": "https://github.com/apache/kafka/pull/8902#discussion_r445951639", "createdAt": "2020-06-26T03:42:48Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractStateManager.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import java.util.Map;\n+\n+public abstract class AbstractStateManager implements StateManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1MzAzNw==", "bodyText": "We discussed this offline. When you revise this to branch based on the context type, you might want to follow the same Util strategy as I proposed here: #8927", "url": "https://github.com/apache/kafka/pull/8902#discussion_r445953037", "createdAt": "2020-06-26T03:49:38Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -103,8 +104,13 @@ public void init(final ProcessorContext context,\n \n     @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {\n+        final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n+        final String storeName = name();\n+        final String changelogTopic = internalProcessorContext.changelogFor(storeName);\n         serdes = new StateSerdes<>(\n-            ProcessorStateManager.storeChangelogTopic(context.applicationId(), name()),\n+            changelogTopic != null ?\n+                changelogTopic :\n+                ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDI5Mg==", "bodyText": "Unless we're actually verifying these interactions, we should probably use the MockInternalProcessorContext instead, and save ourselves from having to tweak these expectations every time we change the implementation details.", "url": "https://github.com/apache/kafka/pull/8902#discussion_r445954292", "createdAt": "2020-06-26T03:55:54Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java", "diffHunk": "@@ -124,18 +141,19 @@ public void before() {\n             Serdes.String()\n         );\n         metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n-        expect(context.metrics())\n-            .andReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion)).anyTimes();\n-        expect(context.taskId()).andReturn(taskId).anyTimes();\n-        expect(inner.name()).andReturn(\"metered\").anyTimes();\n+        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n+        expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion));\n+        expect(context.taskId()).andStubReturn(taskId);\n+        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NDQzNA==", "bodyText": "It looks like these are only used in one method. Can we define them inline instead?\nThis feedback also applies to the other tests.", "url": "https://github.com/apache/kafka/pull/8902#discussion_r445954434", "createdAt": "2020-06-26T03:56:33Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java", "diffHunk": "@@ -91,13 +103,18 @@\n     private KeyValueStore<Bytes, byte[]> inner;\n     @Mock(type = MockType.NICE)\n     private InternalProcessorContext context;\n+    @Mock(type = MockType.NICE)\n+    private Serde<String> keySerde;\n+    @Mock(type = MockType.DEFAULT)\n+    private Serializer<String> keySerializer;\n+    @Mock(type = MockType.NICE)\n+    private Serde<String> valueSerde;\n+    @Mock(type = MockType.DEFAULT)\n+    private Deserializer<String> valueDeserializer;\n+    @Mock(type = MockType.DEFAULT)\n+    private Serializer<String> valueSerializer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7ef6a57f836920be219dd360241319e03b0417", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/8e7ef6a57f836920be219dd360241319e03b0417", "committedDate": "2020-07-07T09:29:27Z", "message": "KAFKA-10179: Pass correct changelog topic to state serdes\n\nUntil now we always passed the default changelog topic name\nto the state serdes. However, for optimized source tables\nand global tables the changelog topic is the source topic.\n\nMost serdes do not use the topic name passed to them.\nHowever, if the serdes actually use the topic name for\n(de)serialization, e.g., when Kafka Streams is used with\nConfluent's Schema Registry, a\norg.apache.kafka.common.errors.SerializationException is thrown.\n\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e068389cabf31cc9cf7c30b36841fa9717b01733", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/e068389cabf31cc9cf7c30b36841fa9717b01733", "committedDate": "2020-07-07T09:31:57Z", "message": "Added exception for changelogging of not registered stores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf3abc7ecae74658a9b6c963a812518499bba94", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/ccf3abc7ecae74658a9b6c963a812518499bba94", "committedDate": "2020-07-07T09:31:57Z", "message": "Add unit test for non-optimized case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33eadcbc781df36839f1017b00f60899b62b7eeb", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/33eadcbc781df36839f1017b00f60899b62b7eeb", "committedDate": "2020-07-07T09:32:07Z", "message": "Include feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc23fa59e993949198bf2271d8eef0f0c047bdc", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/dbc23fa59e993949198bf2271d8eef0f0c047bdc", "committedDate": "2020-07-07T09:32:07Z", "message": "Add exceptions to registeredChangelogPartitionFor()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/1302e2577eee582b143ae0adad74a9f7e09d989e", "committedDate": "2020-07-07T09:33:39Z", "message": "Include feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/1302e2577eee582b143ae0adad74a9f7e09d989e", "committedDate": "2020-07-07T09:33:39Z", "message": "Include feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDQxMTg3", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-444041187", "createdAt": "2020-07-07T16:08:34Z", "commit": {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowODozNFrOGuFoIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowOToxNlrOGuFqBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTg3NQ==", "bodyText": "Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected StateManagerStub stateManager() {\n          \n          \n            \n                protected StateManager stateManager() {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r450979875", "createdAt": "2020-07-07T16:08:34Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/test/InternalMockProcessorContext.java", "diffHunk": "@@ -193,6 +194,11 @@ public InternalMockProcessorContext(final File stateDir,\n         this.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(new SystemTime()));\n     }\n \n+    @Override\n+    protected StateManagerStub stateManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MDM1Nw==", "bodyText": "and here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected StateManagerStub stateManager() {\n          \n          \n            \n                protected StateManager stateManager() {", "url": "https://github.com/apache/kafka/pull/8902#discussion_r450980357", "createdAt": "2020-07-07T16:09:16Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/test/NoOpProcessorContext.java", "diffHunk": "@@ -55,6 +58,11 @@ private static StreamsConfig streamsConfig() {\n         return new StreamsConfig(props);\n     }\n \n+    @Override\n+    protected StateManagerStub stateManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1302e2577eee582b143ae0adad74a9f7e09d989e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b34c1750c216f252e7e18d01a657f61f224de18", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/6b34c1750c216f252e7e18d01a657f61f224de18", "committedDate": "2020-07-07T16:20:26Z", "message": "Apply suggestions from code review\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c741f2f88c5f619259ad8e5a2a3b5a32567c07da", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/c741f2f88c5f619259ad8e5a2a3b5a32567c07da", "committedDate": "2020-07-07T19:32:42Z", "message": "Revert last change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4", "committedDate": "2020-07-08T10:15:28Z", "message": "Re-apply suggestion from code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODIxOTcz", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-444821973", "createdAt": "2020-07-08T14:27:12Z", "commit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjIwNjUy", "url": "https://github.com/apache/kafka/pull/8902#pullrequestreview-445220652", "createdAt": "2020-07-09T00:52:21Z", "commit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1MjoyMVrOGu9-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowMDo1MVrOGu-GWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzEyNg==", "bodyText": "Not sure why we need to move this from the abstract class into the child classes?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451903126", "createdAt": "2020-07-09T00:52:21Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractProcessorContext.java", "diffHunk": "@@ -45,24 +45,23 @@\n     protected ProcessorNode<?, ?> currentNode;\n     private long currentSystemTimeMs;\n \n-    final StateManager stateManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDExNA==", "bodyText": "It seems we don't need this if-then-else any longer as it's already taken care of within ProcessorContextUtils.changelogFor? (Similar for other classes.)", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451904114", "createdAt": "2020-07-09T00:56:41Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -103,8 +104,12 @@ public void init(final ProcessorContext context,\n \n     @SuppressWarnings(\"unchecked\")\n     void initStoreSerde(final ProcessorContext context) {\n+        final String storeName = name();\n+        final String changelogTopic = ProcessorContextUtils.changelogFor(context, storeName);\n         serdes = new StateSerdes<>(\n-            ProcessorStateManager.storeChangelogTopic(context.applicationId(), name()),\n+             changelogTopic != null ?\n+                changelogTopic :\n+                ProcessorStateManager.storeChangelogTopic(context.applicationId(), storeName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNTExMg==", "bodyText": "Wondering if we should pass storeToChangelogTopic() and .globalStateStores() into the constructor instead of ProcessorTopology ?", "url": "https://github.com/apache/kafka/pull/8902#discussion_r451905112", "createdAt": "2020-07-09T01:00:51Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImpl.java", "diffHunk": "@@ -73,22 +73,23 @@\n     private final Set<String> globalNonPersistentStoresTopics = new HashSet<>();\n     private final OffsetCheckpoint checkpointFile;\n     private final Map<TopicPartition, Long> checkpointFileCache;\n+    private final Map<String, String> storeToChangelogTopic;\n \n     public GlobalStateManagerImpl(final LogContext logContext,\n                                   final ProcessorTopology topology,\n                                   final Consumer<byte[], byte[]> globalConsumer,\n                                   final StateDirectory stateDirectory,\n                                   final StateRestoreListener stateRestoreListener,\n                                   final StreamsConfig config) {\n+        storeToChangelogTopic = topology.storeToChangelogTopic();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948b13d7c105cc8bc8c2dcadf8e1e6d2785247f4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfacb69b8895b4c72874942d37faa9a36ca357e9", "author": {"user": {"login": "cadonna", "name": "Bruno Cadonna"}}, "url": "https://github.com/apache/kafka/commit/bfacb69b8895b4c72874942d37faa9a36ca357e9", "committedDate": "2020-07-09T12:00:18Z", "message": "Include feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 679, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}