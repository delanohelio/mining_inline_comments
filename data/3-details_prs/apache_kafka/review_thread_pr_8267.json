{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDA3NzE2", "number": 8267, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxNTowNVrODm43LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDoxNjo0OFrODntYTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA0MTA5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxNTowNVrOF0kQPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxNTowNVrOF0kQPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NDI1Mg==", "bodyText": "This is a minor code clean up.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r390664252", "createdAt": "2020-03-10T23:15:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -294,61 +302,69 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n+                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs || manualUserCall) {\n-                            if (!manualUserCall) {\n-                                log.info(\n-                                    \"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                    logPrefix(),\n-                                    dirName,\n-                                    id,\n-                                    now - lastModifiedMs,\n-                                    cleanupDelayMs);\n-                            } else {\n-                                log.info(\n-                                        \"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                        logPrefix(),\n-                                        dirName,\n-                                        id);\n-                            }\n-                            Utils.delete(taskDir);\n+                        if (now > lastModifiedMs + cleanupDelayMs) {\n+                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n+                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                        } else if (manualUserCall) {\n+                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException e) {\n-                    // locked by another thread\n-                    if (manualUserCall) {\n-                        log.error(\"{} Failed to get the state directory lock.\", logPrefix(), e);\n-                        throw e;\n-                    }\n-                } catch (final IOException e) {\n-                    log.error(\"{} Failed to delete the state directory.\", logPrefix(), e);\n-                    if (manualUserCall) {\n-                        throw e;\n-                    }\n+                } catch (final OverlappingFileLockException | IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA0NDQyOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxNjoxNFrOF0kR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMjoyMzo1OVrOF2b3qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NDY5OQ==", "bodyText": "This is a bit tricky: for the root file, we only consider deleting it if there's no specified skipping sub-files; otherwise we never try to delete since it would doom with DirectoryNotEmpty.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r390664699", "createdAt": "2020-03-10T23:16:14Z", "author": {"login": "guozhangwang"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -736,29 +736,56 @@ public static Properties mkProperties(final Map<String, String> properties) {\n     /**\n      * Recursively delete the given file/directory and any subfiles (if any exist)\n      *\n-     * @param file The root file at which to begin deleting\n+     * @param rootFile The root file at which to begin deleting\n      */\n-    public static void delete(final File file) throws IOException {\n-        if (file == null)\n+    public static void delete(final File rootFile) throws IOException {\n+        delete(rootFile, Collections.emptyList());\n+    }\n+\n+    /**\n+     * Recursively delete the subfiles (if any exist) of the passed in root file that are not included\n+     * in the list to keep\n+     *\n+     * @param rootFile The root file at which to begin deleting\n+     * @param filesToKeep The subfiles to keep (note that if a subfile is to be kept, so are all its parent\n+     *                    files in its pat)h; if empty we would also delete the root file\n+     */\n+    public static void delete(final File rootFile, final List<File> filesToKeep) throws IOException {\n+        if (rootFile == null)\n             return;\n-        Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(rootFile.toPath(), new SimpleFileVisitor<Path>() {\n             @Override\n             public FileVisitResult visitFileFailed(Path path, IOException exc) throws IOException {\n                 // If the root path did not exist, ignore the error; otherwise throw it.\n-                if (exc instanceof NoSuchFileException && path.toFile().equals(file))\n+                if (exc instanceof NoSuchFileException && path.toFile().equals(rootFile))\n                     return FileVisitResult.TERMINATE;\n                 throw exc;\n             }\n \n             @Override\n             public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {\n-                Files.delete(path);\n+                if (!filesToKeep.contains(path.toFile())) {\n+                    Files.delete(path);\n+                }\n                 return FileVisitResult.CONTINUE;\n             }\n \n             @Override\n             public FileVisitResult postVisitDirectory(Path path, IOException exc) throws IOException {\n-                Files.delete(path);\n+                // KAFKA-8999: if there's an exception thrown previously already, we should throw it\n+                if (exc != null) {\n+                    throw exc;\n+                }\n+\n+                if (rootFile.toPath().equals(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyNDA0Mw==", "bodyText": "It would be good to avoid the unnecessary conversions in this method (rootFile.toPath, path.toFile). We can do some work at the start of the method to improve efficiency.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392624043", "createdAt": "2020-03-14T22:23:59Z", "author": {"login": "ijuma"}, "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -736,29 +736,56 @@ public static Properties mkProperties(final Map<String, String> properties) {\n     /**\n      * Recursively delete the given file/directory and any subfiles (if any exist)\n      *\n-     * @param file The root file at which to begin deleting\n+     * @param rootFile The root file at which to begin deleting\n      */\n-    public static void delete(final File file) throws IOException {\n-        if (file == null)\n+    public static void delete(final File rootFile) throws IOException {\n+        delete(rootFile, Collections.emptyList());\n+    }\n+\n+    /**\n+     * Recursively delete the subfiles (if any exist) of the passed in root file that are not included\n+     * in the list to keep\n+     *\n+     * @param rootFile The root file at which to begin deleting\n+     * @param filesToKeep The subfiles to keep (note that if a subfile is to be kept, so are all its parent\n+     *                    files in its pat)h; if empty we would also delete the root file\n+     */\n+    public static void delete(final File rootFile, final List<File> filesToKeep) throws IOException {\n+        if (rootFile == null)\n             return;\n-        Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(rootFile.toPath(), new SimpleFileVisitor<Path>() {\n             @Override\n             public FileVisitResult visitFileFailed(Path path, IOException exc) throws IOException {\n                 // If the root path did not exist, ignore the error; otherwise throw it.\n-                if (exc instanceof NoSuchFileException && path.toFile().equals(file))\n+                if (exc instanceof NoSuchFileException && path.toFile().equals(rootFile))\n                     return FileVisitResult.TERMINATE;\n                 throw exc;\n             }\n \n             @Override\n             public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {\n-                Files.delete(path);\n+                if (!filesToKeep.contains(path.toFile())) {\n+                    Files.delete(path);\n+                }\n                 return FileVisitResult.CONTINUE;\n             }\n \n             @Override\n             public FileVisitResult postVisitDirectory(Path path, IOException exc) throws IOException {\n-                Files.delete(path);\n+                // KAFKA-8999: if there's an exception thrown previously already, we should throw it\n+                if (exc != null) {\n+                    throw exc;\n+                }\n+\n+                if (rootFile.toPath().equals(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NDY5OQ=="}, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTIwMzI3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo0Mjo0OFrOF0lxhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMjo0NlrOF2KczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4OTE1OA==", "bodyText": "What do you think about renaming this, eg  something like isStateful, hasStatefulTopology`, etc?\nIt's really confusing to reason about in its usage, for example why createStateDirectory => #lock returns true.  You have to backtrack to where createStateDirectory is set to understand this. However, I think it's easy to reason about why isStateful => should create state directory.\nAlternatively, what if we have a stateless version of the StateDirectory class that just stubs things where appropriate. Then we could get rid of this altogether. WDYT?", "url": "https://github.com/apache/kafka/pull/8267#discussion_r390689158", "createdAt": "2020-03-11T00:42:48Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -50,11 +51,12 @@\n     static final String LOCK_FILE_NAME = \".lock\";\n     private static final Logger log = LoggerFactory.getLogger(StateDirectory.class);\n \n+    private final Time time;\n+    private final String appId;\n     private final File stateDir;\n     private final boolean createStateDirectory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODYzNg==", "bodyText": "That makes sense, I will do the renaming.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392338636", "createdAt": "2020-03-13T16:32:46Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -50,11 +51,12 @@\n     static final String LOCK_FILE_NAME = \".lock\";\n     private static final Logger log = LoggerFactory.getLogger(StateDirectory.class);\n \n+    private final Time time;\n+    private final String appId;\n     private final File stateDir;\n     private final boolean createStateDirectory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4OTE1OA=="}, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTIxOTE2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo1Mjo1MFrOF0l7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo1Mjo1MFrOF0l7Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5MTY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                File[] lisAllTaskDirectories() {\n          \n          \n            \n                File[] listAllTaskDirectories() {", "url": "https://github.com/apache/kafka/pull/8267#discussion_r390691655", "createdAt": "2020-03-11T00:52:50Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -294,61 +302,69 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n+                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs || manualUserCall) {\n-                            if (!manualUserCall) {\n-                                log.info(\n-                                    \"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                    logPrefix(),\n-                                    dirName,\n-                                    id,\n-                                    now - lastModifiedMs,\n-                                    cleanupDelayMs);\n-                            } else {\n-                                log.info(\n-                                        \"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                        logPrefix(),\n-                                        dirName,\n-                                        id);\n-                            }\n-                            Utils.delete(taskDir);\n+                        if (now > lastModifiedMs + cleanupDelayMs) {\n+                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n+                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                        } else if (manualUserCall) {\n+                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException e) {\n-                    // locked by another thread\n-                    if (manualUserCall) {\n-                        log.error(\"{} Failed to get the state directory lock.\", logPrefix(), e);\n-                        throw e;\n-                    }\n-                } catch (final IOException e) {\n-                    log.error(\"{} Failed to delete the state directory.\", logPrefix(), e);\n-                    if (manualUserCall) {\n-                        throw e;\n-                    }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    exception = e;\n                 } finally {\n                     try {\n                         unlock(id);\n-                    } catch (final IOException e) {\n-                        log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+\n+                        // for manual user call, stream threads are not running so it is safe to delete\n+                        // the whole directory\n                         if (manualUserCall) {\n-                            throw e;\n+                            Utils.delete(taskDir);\n                         }\n+                    } catch (final IOException e) {\n+                        exception = e;\n                     }\n                 }\n+\n+                if (exception != null && manualUserCall) {\n+                    log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+                    throw exception;\n+                }\n             }\n         }\n     }\n \n+    /**\n+     * List all of the task directories that are non-empty\n+     * @return The list of all the non-empty local directories for stream tasks\n+     */\n+    File[] listNonEmptyTaskDirectories() {\n+        return !stateDir.exists() ? new File[0] :\n+            stateDir.listFiles(pathname -> {\n+                if (!pathname.isDirectory() || !PATH_NAME.matcher(pathname.getName()).matches()) {\n+                    return false;\n+                } else {\n+                    return !taskDirEmpty(pathname);\n+                }\n+            });\n+    }\n+\n     /**\n      * List all of the task directories\n      * @return The list of all the existing local directories for stream tasks\n      */\n-    File[] listTaskDirectories() {\n+    File[] lisAllTaskDirectories() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22844d00ccdf50a003f4407d5ba167969c3014dd"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTYzOTEyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDoxMTozMlrOF13IHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo0MTozOFrOF2KzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMjA0NA==", "bodyText": "Is the double negative intentional here?", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392022044", "createdAt": "2020-03-13T04:11:32Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -290,15 +307,21 @@ public void shouldNotRemoveNonTaskDirectoriesAndFiles() {\n     }\n \n     @Test\n-    public void shouldListAllTaskDirectories() {\n+    public void shouldNotListNonEmptyTaskDirectories() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9618b165e97b3f54d5cff0a43ab7d812212896d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NDMyMg==", "bodyText": "Good call, will change.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392344322", "createdAt": "2020-03-13T16:41:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -290,15 +307,21 @@ public void shouldNotRemoveNonTaskDirectoriesAndFiles() {\n     }\n \n     @Test\n-    public void shouldListAllTaskDirectories() {\n+    public void shouldNotListNonEmptyTaskDirectories() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMjA0NA=="}, "originalCommit": {"oid": "e9618b165e97b3f54d5cff0a43ab7d812212896d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTY0NTU3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDoxNjo0OFrOF13L-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyMDozMFrOF2N-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMzAzMw==", "bodyText": "This comment makes me wonder why we even bother with locking at all for manual calls. If we know there\u2019s no app running, why not just delete the whole state directory and not bother with locks?", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392023033", "createdAt": "2020-03-13T04:16:48Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -294,61 +302,69 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n+                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs || manualUserCall) {\n-                            if (!manualUserCall) {\n-                                log.info(\n-                                    \"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                    logPrefix(),\n-                                    dirName,\n-                                    id,\n-                                    now - lastModifiedMs,\n-                                    cleanupDelayMs);\n-                            } else {\n-                                log.info(\n-                                        \"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                        logPrefix(),\n-                                        dirName,\n-                                        id);\n-                            }\n-                            Utils.delete(taskDir);\n+                        if (now > lastModifiedMs + cleanupDelayMs) {\n+                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n+                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                        } else if (manualUserCall) {\n+                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException e) {\n-                    // locked by another thread\n-                    if (manualUserCall) {\n-                        log.error(\"{} Failed to get the state directory lock.\", logPrefix(), e);\n-                        throw e;\n-                    }\n-                } catch (final IOException e) {\n-                    log.error(\"{} Failed to delete the state directory.\", logPrefix(), e);\n-                    if (manualUserCall) {\n-                        throw e;\n-                    }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    exception = e;\n                 } finally {\n                     try {\n                         unlock(id);\n-                    } catch (final IOException e) {\n-                        log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+\n+                        // for manual user call, stream threads are not running so it is safe to delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9618b165e97b3f54d5cff0a43ab7d812212896d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0NjE2Nw==", "bodyText": "I thought about that too, and tried it out, it's just that based on manualUserCall to decide whether lock / unlock the block, we ended up with either much more code duplicates or clumsy and finer-grained if else condition, neither of which I like. On the other hand, since streams.cleanUp is usually a one-time thing compared with the periodic internal clean I think having two delete calls are okay to same some code duplication here.", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392346167", "createdAt": "2020-03-13T16:44:30Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -294,61 +302,69 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n+                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs || manualUserCall) {\n-                            if (!manualUserCall) {\n-                                log.info(\n-                                    \"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                    logPrefix(),\n-                                    dirName,\n-                                    id,\n-                                    now - lastModifiedMs,\n-                                    cleanupDelayMs);\n-                            } else {\n-                                log.info(\n-                                        \"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                        logPrefix(),\n-                                        dirName,\n-                                        id);\n-                            }\n-                            Utils.delete(taskDir);\n+                        if (now > lastModifiedMs + cleanupDelayMs) {\n+                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n+                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                        } else if (manualUserCall) {\n+                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException e) {\n-                    // locked by another thread\n-                    if (manualUserCall) {\n-                        log.error(\"{} Failed to get the state directory lock.\", logPrefix(), e);\n-                        throw e;\n-                    }\n-                } catch (final IOException e) {\n-                    log.error(\"{} Failed to delete the state directory.\", logPrefix(), e);\n-                    if (manualUserCall) {\n-                        throw e;\n-                    }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    exception = e;\n                 } finally {\n                     try {\n                         unlock(id);\n-                    } catch (final IOException e) {\n-                        log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+\n+                        // for manual user call, stream threads are not running so it is safe to delete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMzAzMw=="}, "originalCommit": {"oid": "e9618b165e97b3f54d5cff0a43ab7d812212896d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NjQ5Mg==", "bodyText": "Ok!", "url": "https://github.com/apache/kafka/pull/8267#discussion_r392396492", "createdAt": "2020-03-13T18:20:30Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -294,61 +302,69 @@ private synchronized void cleanRemovedTasks(final long cleanupDelayMs,\n             final String dirName = taskDir.getName();\n             final TaskId id = TaskId.parse(dirName);\n             if (!locks.containsKey(id)) {\n+                Exception exception = null;\n                 try {\n                     if (lock(id)) {\n                         final long now = time.milliseconds();\n                         final long lastModifiedMs = taskDir.lastModified();\n-                        if (now > lastModifiedMs + cleanupDelayMs || manualUserCall) {\n-                            if (!manualUserCall) {\n-                                log.info(\n-                                    \"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n-                                    logPrefix(),\n-                                    dirName,\n-                                    id,\n-                                    now - lastModifiedMs,\n-                                    cleanupDelayMs);\n-                            } else {\n-                                log.info(\n-                                        \"{} Deleting state directory {} for task {} as user calling cleanup.\",\n-                                        logPrefix(),\n-                                        dirName,\n-                                        id);\n-                            }\n-                            Utils.delete(taskDir);\n+                        if (now > lastModifiedMs + cleanupDelayMs) {\n+                            log.info(\"{} Deleting obsolete state directory {} for task {} as {}ms has elapsed (cleanup delay is {}ms).\",\n+                                logPrefix(), dirName, id, now - lastModifiedMs, cleanupDelayMs);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n+                        } else if (manualUserCall) {\n+                            log.info(\"{} Deleting state directory {} for task {} as user calling cleanup.\",\n+                                logPrefix(), dirName, id);\n+\n+                            Utils.delete(taskDir, Collections.singletonList(new File(taskDir, LOCK_FILE_NAME)));\n                         }\n                     }\n-                } catch (final OverlappingFileLockException e) {\n-                    // locked by another thread\n-                    if (manualUserCall) {\n-                        log.error(\"{} Failed to get the state directory lock.\", logPrefix(), e);\n-                        throw e;\n-                    }\n-                } catch (final IOException e) {\n-                    log.error(\"{} Failed to delete the state directory.\", logPrefix(), e);\n-                    if (manualUserCall) {\n-                        throw e;\n-                    }\n+                } catch (final OverlappingFileLockException | IOException e) {\n+                    exception = e;\n                 } finally {\n                     try {\n                         unlock(id);\n-                    } catch (final IOException e) {\n-                        log.error(\"{} Failed to release the state directory lock.\", logPrefix());\n+\n+                        // for manual user call, stream threads are not running so it is safe to delete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMzAzMw=="}, "originalCommit": {"oid": "e9618b165e97b3f54d5cff0a43ab7d812212896d"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3305, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}