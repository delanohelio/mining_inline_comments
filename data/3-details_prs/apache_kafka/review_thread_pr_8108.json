{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDA2OTc2", "number": 8108, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NDo0OFrODggJ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1Njo1NFrODg0HLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDA3ODUxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/KStreamTransformIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NDo0OFrOFqvf2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDo1NDo0OFrOFqvf2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MjcxMw==", "bodyText": "req: Please add a unit test in KStreamTransformValuesTest instead of this integration test. A unit test is simpler to maintain in this case. Have a look at KStreamFlatTransformValuesTest#shouldEmitNoRecordIfTransformReturnsNull() for an example.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380362713", "createdAt": "2020-02-17T20:54:48Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KStreamTransformIntegrationTest.java", "diffHunk": "@@ -244,6 +244,43 @@ public void close() {\n         verifyResult(expected);\n     }\n \n+    @Test\n+    public void shouldNotFowardNullTransformValuesWithValueTransformerWithKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDExMzk2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/KStreamTransformIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMToxNDozMFrOFqv0cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMToxNDozMFrOFqv0cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2Nzk4NQ==", "bodyText": "req: Please use 4 spaces indentation.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380367985", "createdAt": "2020-02-17T21:14:30Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/KStreamTransformIntegrationTest.java", "diffHunk": "@@ -244,6 +244,43 @@ public void close() {\n         verifyResult(expected);\n     }\n \n+    @Test\n+    public void shouldNotFowardNullTransformValuesWithValueTransformerWithKey() {\n+        stream\n+                .transformValues(() -> new ValueTransformerWithKey<Integer, Integer, Integer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTM1MDk2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTozODoxM1rOFq7TNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowNzowMVrOFrK25Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1NjA4Nw==", "bodyText": "req: I guess, I was not clear enough in my previous comment. Sorry for that! I see that the other unit tests in KStreamTransformValuesTest are also TopologyTestDriver tests. However, I think that is not needed in this case. TopologyTestDriver tests are harder to maintain and slower to run as a simple unit test like KStreamFlatTransformValuesTest#shouldEmitNoRecordIfTransformReturnsNull(). We need to rewrite TopologyTestDriver tests in KStreamTransformValueTest to simple unit tests at some point (not in this PR). Please use a simple unit test similar to the following.\n    @Test\n    public void shouldEmitNoRecordIfTransformReturnsNull() {\n        final ProcessorContext context = mock(ProcessorContext.class);\n        final ValueTransformerWithKey<Integer, Integer, Iterable<String>> valueTransformer = mock(ValueTransformerWithKey.class);\n        EasyMock.expect(valueTransformer.transform(inputKey, inputValue)).andReturn(null);\n        EasyMock.replay(context, valueTransfomer);\n        final Integer inputKey = 1;\n        final Integer inputValue = 10;\n        final KStreamFlatTransformValuesProcessor<Integer, Integer, String> processor = new KStreamFlatTransformValuesProcessor<>(valueTransformer);\n        processor.init(context);\n\n        processor.process(inputKey, inputValue);\n\n        EasyMock.verify(context, valueTransformer);\n    }", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380556087", "createdAt": "2020-02-18T09:38:13Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +138,54 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efedf8d78fd2742f0c702f14ab1007c023a783b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMDk4MQ==", "bodyText": "Not a problem. Updated.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380810981", "createdAt": "2020-02-18T17:07:01Z", "author": {"login": "mviamari"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +138,54 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1NjA4Nw=="}, "originalCommit": {"oid": "8efedf8d78fd2742f0c702f14ab1007c023a783b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMzMDM2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MTo0OFrOFrORpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo1OTowMVrOFrh2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Njk4MQ==", "bodyText": "req: Could you please remove context from the reset()? Since we did not specify any behavior for it, we also do not need to reset it.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380866981", "createdAt": "2020-02-18T18:51:48Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);\n+        processor.init(context);\n+        EasyMock.reset(context, valueTransformer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyMTY4NQ==", "bodyText": "I think that the valueTransformer is not strictly needed to be reset either, since it's not being verified, but there is a call to ValueTransformer#init, so I left it in the reset anyway.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380921685", "createdAt": "2020-02-18T20:39:16Z", "author": {"login": "mviamari"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);\n+        processor.init(context);\n+        EasyMock.reset(context, valueTransformer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Njk4MQ=="}, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4NzgzMg==", "bodyText": "Good catch! I would prefer to remove it then.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r381187832", "createdAt": "2020-02-19T09:59:01Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);\n+        processor.init(context);\n+        EasyMock.reset(context, valueTransformer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Njk4MQ=="}, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMzODQwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1NDowMlrOFrOWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1NDowMlrOFrOWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2ODIzMw==", "bodyText": "req: Could you please put new KStreamTransformValues... in the next line?", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380868233", "createdAt": "2020-02-18T18:54:02Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzM0MDIwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1NDozNlrOFrOXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1NDozNlrOFrOXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2ODUyNA==", "bodyText": "req: Could you please replace .andReturn() with .andStubReturn()? This avoids the verification of the call to valueTransformer.transform(inputKey, inputValue) which I consider setup and not validation.", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380868524", "createdAt": "2020-02-18T18:54:36Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);\n+        processor.init(context);\n+        EasyMock.reset(context, valueTransformer);\n+\n+        final Integer inputKey = 1;\n+        final Integer inputValue = 10;\n+        EasyMock.expect(valueTransformer.transform(inputKey, inputValue)).andReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzM0ODMwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1Njo1NFrOFrOcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1Njo1NFrOFrOcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2OTc5Nw==", "bodyText": "req: Since we do not need to validate valueTransformer, could you please remove it from the verify().", "url": "https://github.com/apache/kafka/pull/8108#discussion_r380869797", "createdAt": "2020-02-18T18:56:54Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java", "diffHunk": "@@ -138,6 +140,24 @@ public void close() { }\n         assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n     }\n \n+    @Test\n+    public void shouldEmitNoRecordIfTransformReturnsNull() {\n+        final ProcessorContext context = mock(ProcessorContext.class);\n+        final ValueTransformerWithKey<Integer, Integer, Integer> valueTransformer = mock(ValueTransformerWithKey.class);\n+        final KStreamTransformValues.KStreamTransformValuesProcessor<Integer, Integer, Integer> processor = new KStreamTransformValues.KStreamTransformValuesProcessor<>(valueTransformer);\n+        processor.init(context);\n+        EasyMock.reset(context, valueTransformer);\n+\n+        final Integer inputKey = 1;\n+        final Integer inputValue = 10;\n+        EasyMock.expect(valueTransformer.transform(inputKey, inputValue)).andReturn(null);\n+        EasyMock.replay(context, valueTransformer);\n+\n+        processor.process(inputKey, inputValue);\n+\n+        EasyMock.verify(context, valueTransformer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e835f4787a4591bdcab28521b0ba9a83aeee3706"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4286, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}