{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTkzMzEz", "number": 8252, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzowNFrODpozjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0NDowNFrODqBbwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg2NzY1OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1NzowNFrOF48PpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1MzowMFrOF5kMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default ListOffsetsResult  listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {\n          \n          \n            \n                default ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395251621", "createdAt": "2020-03-19T18:57:04Z", "author": {"login": "vvcephei"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -1119,7 +1119,7 @@ default AlterConsumerGroupOffsetsResult alterConsumerGroupOffsets(String groupId\n      * @param topicPartitionOffsets The mapping from partition to the OffsetSpec to look up.\n      * @return The ListOffsetsResult.\n      */\n-    default ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {\n+    default ListOffsetsResult  listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNjIyNg==", "bodyText": "Whoops", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395906226", "createdAt": "2020-03-20T21:53:00Z", "author": {"login": "ableegoldman"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/Admin.java", "diffHunk": "@@ -1119,7 +1119,7 @@ default AlterConsumerGroupOffsetsResult alterConsumerGroupOffsets(String groupId\n      * @param topicPartitionOffsets The mapping from partition to the OffsetSpec to look up.\n      * @return The ListOffsetsResult.\n      */\n-    default ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {\n+    default ListOffsetsResult  listOffsets(Map<TopicPartition, OffsetSpec> topicPartitionOffsets) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1MTYyMQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzc1NjQ1OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo0MDo1MFrOF5ikyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMDo0Mjo1NVrOF5yYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3OTYyNg==", "bodyText": "The fact that this is static and has nothing in particular to do with the KafkaStreams class indicates that it probably belongs in a util class for use by KafkaStreams and StreamsPartitionAssignor.", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395879626", "createdAt": "2020-03-20T20:40:50Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1244,4 +1238,28 @@ public void cleanUp() {\n \n         return Collections.unmodifiableMap(localStorePartitionLags);\n     }\n+\n+    static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsetsWithoutTimeout(final Collection<TopicPartition> partitions,\n+                                                                                    final Admin adminClient) {\n+        return fetchEndOffsets(partitions, adminClient, null);\n+    }\n+\n+    public static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsets(final Collection<TopicPartition> partitions,\n+                                                                             final Admin adminClient,\n+                                                                             final Duration timeout) {\n+        final Map<TopicPartition, ListOffsetsResultInfo> endOffsets;\n+        try {\n+            final KafkaFuture<Map<TopicPartition, ListOffsetsResultInfo>> future =  adminClient.listOffsets(\n+                partitions.stream().collect(Collectors.toMap(Function.identity(), tp -> OffsetSpec.latest())))\n+                                                                                        .all();\n+            if (timeout == null) {\n+                endOffsets = future.get();\n+            } else {\n+                endOffsets = future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            }\n+        } catch (final TimeoutException | RuntimeException | InterruptedException | ExecutionException e) {\n+            throw new StreamsException(\"Unable to obtain end offsets from kafka\", e);\n+        }\n+        return endOffsets;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNTY3Nw==", "bodyText": "Ack", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395915677", "createdAt": "2020-03-20T22:25:01Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1244,4 +1238,28 @@ public void cleanUp() {\n \n         return Collections.unmodifiableMap(localStorePartitionLags);\n     }\n+\n+    static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsetsWithoutTimeout(final Collection<TopicPartition> partitions,\n+                                                                                    final Admin adminClient) {\n+        return fetchEndOffsets(partitions, adminClient, null);\n+    }\n+\n+    public static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsets(final Collection<TopicPartition> partitions,\n+                                                                             final Admin adminClient,\n+                                                                             final Duration timeout) {\n+        final Map<TopicPartition, ListOffsetsResultInfo> endOffsets;\n+        try {\n+            final KafkaFuture<Map<TopicPartition, ListOffsetsResultInfo>> future =  adminClient.listOffsets(\n+                partitions.stream().collect(Collectors.toMap(Function.identity(), tp -> OffsetSpec.latest())))\n+                                                                                        .all();\n+            if (timeout == null) {\n+                endOffsets = future.get();\n+            } else {\n+                endOffsets = future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            }\n+        } catch (final TimeoutException | RuntimeException | InterruptedException | ExecutionException e) {\n+            throw new StreamsException(\"Unable to obtain end offsets from kafka\", e);\n+        }\n+        return endOffsets;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3OTYyNg=="}, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzODU4OA==", "bodyText": "See #8328", "url": "https://github.com/apache/kafka/pull/8252#discussion_r396138588", "createdAt": "2020-03-22T20:42:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1244,4 +1238,28 @@ public void cleanUp() {\n \n         return Collections.unmodifiableMap(localStorePartitionLags);\n     }\n+\n+    static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsetsWithoutTimeout(final Collection<TopicPartition> partitions,\n+                                                                                    final Admin adminClient) {\n+        return fetchEndOffsets(partitions, adminClient, null);\n+    }\n+\n+    public static Map<TopicPartition, ListOffsetsResultInfo> fetchEndOffsets(final Collection<TopicPartition> partitions,\n+                                                                             final Admin adminClient,\n+                                                                             final Duration timeout) {\n+        final Map<TopicPartition, ListOffsetsResultInfo> endOffsets;\n+        try {\n+            final KafkaFuture<Map<TopicPartition, ListOffsetsResultInfo>> future =  adminClient.listOffsets(\n+                partitions.stream().collect(Collectors.toMap(Function.identity(), tp -> OffsetSpec.latest())))\n+                                                                                        .all();\n+            if (timeout == null) {\n+                endOffsets = future.get();\n+            } else {\n+                endOffsets = future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            }\n+        } catch (final TimeoutException | RuntimeException | InterruptedException | ExecutionException e) {\n+            throw new StreamsException(\"Unable to obtain end offsets from kafka\", e);\n+        }\n+        return endOffsets;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3OTYyNg=="}, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzgwMTkxOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1ODo0MVrOF5jBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMToxN1rOF5kXBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4Njg3Ng==", "bodyText": "I couldn't find the reason these needed to change. What did I miss? Is it just that they are nullable if the config is unspecified?", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395886876", "createdAt": "2020-03-20T20:58:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -263,11 +276,11 @@ public AssignmentConfigs getAssignmentConfigs() {\n     }\n \n     public static class AssignmentConfigs {\n-        public final long acceptableRecoveryLag;\n-        public final int balanceFactor;\n-        public final int maxWarmupReplicas;\n-        public final int numStandbyReplicas;\n-        public final long probingRebalanceIntervalMs;\n+        public final Long acceptableRecoveryLag;\n+        public final Integer balanceFactor;\n+        public final Integer maxWarmupReplicas;\n+        public final Integer numStandbyReplicas;\n+        public final Long probingRebalanceIntervalMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODg2OQ==", "bodyText": "Uhh...hm. I remember doing it for a reason, but not what that reason was (probably something-something-testing?).\nWhatever it was it doesn't seem to be relevant anymore, I'll revert this", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395908869", "createdAt": "2020-03-20T22:01:17Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -263,11 +276,11 @@ public AssignmentConfigs getAssignmentConfigs() {\n     }\n \n     public static class AssignmentConfigs {\n-        public final long acceptableRecoveryLag;\n-        public final int balanceFactor;\n-        public final int maxWarmupReplicas;\n-        public final int numStandbyReplicas;\n-        public final long probingRebalanceIntervalMs;\n+        public final Long acceptableRecoveryLag;\n+        public final Integer balanceFactor;\n+        public final Integer maxWarmupReplicas;\n+        public final Integer numStandbyReplicas;\n+        public final Long probingRebalanceIntervalMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4Njg3Ng=="}, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkwMjc0OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo0NDowNFrOF5kBIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo0MDoxN1rOF5l2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzI2NA==", "bodyText": "Does this test pass on the current code base, or is it a consequence of this PR?", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395903264", "createdAt": "2020-03-20T21:44:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java", "diffHunk": "@@ -674,6 +674,19 @@ public void shouldAssignTasksToNewClientWithoutFlippingAssignmentBetweenExisting\n         assertThat(newClient.activeTaskCount(), equalTo(2));\n     }\n \n+    @Test\n+    public void shouldViolateBalanceToPreserveActiveTaskStickiness() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMjk4MQ==", "bodyText": "It's testing the newly added #preservePreviousTaskAssignment: this is sort of a temporary hack to force the StickyTaskAssignor to return a \"completely sticky\" active task assignment, in the case the admin listOffsets request fails or times out.\nThe default StickyTaskAssignor behavior is unchanged in this PR, to leave the code in a stable state and avoid adding a huge refactoring of StickyTaskAssignorTest to an already large PR.", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395912981", "createdAt": "2020-03-20T22:15:55Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java", "diffHunk": "@@ -674,6 +674,19 @@ public void shouldAssignTasksToNewClientWithoutFlippingAssignmentBetweenExisting\n         assertThat(newClient.activeTaskCount(), equalTo(2));\n     }\n \n+    @Test\n+    public void shouldViolateBalanceToPreserveActiveTaskStickiness() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzI2NA=="}, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzI5Nw==", "bodyText": "Ok, thanks. The subtlety was a bit lost on me.", "url": "https://github.com/apache/kafka/pull/8252#discussion_r395933297", "createdAt": "2020-03-20T23:40:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java", "diffHunk": "@@ -674,6 +674,19 @@ public void shouldAssignTasksToNewClientWithoutFlippingAssignmentBetweenExisting\n         assertThat(newClient.activeTaskCount(), equalTo(2));\n     }\n \n+    @Test\n+    public void shouldViolateBalanceToPreserveActiveTaskStickiness() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzI2NA=="}, "originalCommit": {"oid": "3cf72e06965a476424cd40f213958c67306f66ea"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3260, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}