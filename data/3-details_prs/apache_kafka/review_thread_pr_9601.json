{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTA2OTE5", "number": 9601, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo1MzozN1rOE5tXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozNzowNVrOE-7Obw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTQ3NjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTo1MzozN1rOH0VRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMToxMjo1NVrOH0gfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNjQ2Mg==", "bodyText": "2.7 has been branched. It should be 2.8, right?", "url": "https://github.com/apache/kafka/pull/9601#discussion_r524636462", "createdAt": "2020-11-16T21:53:37Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -424,6 +426,13 @@ case object KAFKA_2_7_IV2 extends DefaultApiVersion {\n   val id: Int = 30\n }\n \n+case object KAFKA_2_7_IV3 extends DefaultApiVersion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyMDM4OA==", "bodyText": "Thanks, that makes more sense.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r524820388", "createdAt": "2020-11-17T01:12:55Z", "author": {"login": "gardnervickers"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -424,6 +426,13 @@ case object KAFKA_2_7_IV2 extends DefaultApiVersion {\n   val id: Int = 30\n }\n \n+case object KAFKA_2_7_IV3 extends DefaultApiVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNjQ2Mg=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDU4NDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1Nzo0N1rOH2oUOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1Nzo0N1rOH2oUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NTY4OQ==", "bodyText": "For what it's worth, WriteTxnMarkers and OffsetsForLeaderEpoch are also inter-broker APIs.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r527045689", "createdAt": "2020-11-19T16:57:47Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -108,7 +108,9 @@ object ApiVersion {\n     // Bup Fetch protocol for Raft protocol (KIP-595)\n     KAFKA_2_7_IV1,\n     // Introduced AlterIsr (KIP-497)\n-    KAFKA_2_7_IV2\n+    KAFKA_2_7_IV2,\n+    // Flexible versioning on ListOffsets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38f27474b831bc3bfb0c8b35ec13ba7aea05551f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODkyNDQ0OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxODo0NTowMlrOH7l63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxODo0NTowMlrOH7l63w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0OTMxMQ==", "bodyText": "This is to fix testThrottlingNotEnabledForConnectionToOlderBroker. The test forces ApiVersionsResponse to version 5, but relied on the fact that nothing really changed between version 5 and version 8 for PRODUCE responses. With flex versions we need to ensure the response matches the ApiVersions response", "url": "https://github.com/apache/kafka/pull/9601#discussion_r532249311", "createdAt": "2020-11-29T18:45:02Z", "author": {"login": "gardnervickers"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -613,12 +613,12 @@ private void sendResponse(ResponseHeader respHeader, Struct response) {\n         selector.completeReceive(new NetworkReceive(node.idString(), buffer));\n     }\n \n-    private void sendThrottledProduceResponse(int correlationId, int throttleMs) {\n+    private void sendThrottledProduceResponse(int correlationId, int throttleMs, short version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODkyNjkyOnYy", "diffSide": "LEFT", "path": "clients/src/main/java/org/apache/kafka/common/requests/AlterReplicaLogDirsResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxODo0Njo1N1rOH7l8AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxODo0Njo1N1rOH7l8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0OTYwMQ==", "bodyText": "Having this override seemed a bit error prone, and was causing failures for the NetworkClientTest. I opted to remove it entirely in favor of forcing the caller to specify the response version.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r532249601", "createdAt": "2020-11-29T18:46:57Z", "author": {"login": "gardnervickers"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/AlterReplicaLogDirsResponse.java", "diffHunk": "@@ -38,10 +38,6 @@\n \n     private final AlterReplicaLogDirsResponseData data;\n \n-    public AlterReplicaLogDirsResponse(Struct struct) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODkyOTcyOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxODo1MDowOFrOH7l9Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMzoxN1rOH8_qnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0OTk0Mw==", "bodyText": "Admittedly I'm not sure why we check the version of the last OffsetForLeaderEpoch response is 3 here. I decided to widen the check a bit so this won't break for future versions.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r532249943", "createdAt": "2020-11-29T18:50:08Z", "author": {"login": "gardnervickers"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala", "diffHunk": "@@ -437,8 +437,8 @@ class ReplicaFetcherThreadTest {\n     thread.doWork()\n     assertEquals(2, mockNetwork.epochFetchCount)\n     assertEquals(1, mockNetwork.fetchCount)\n-    assertEquals(\"OffsetsForLeaderEpochRequest version.\",\n-      3, mockNetwork.lastUsedOffsetForLeaderEpochVersion)\n+    assertTrue(\"OffsetsForLeaderEpochRequest version.\",\n+      mockNetwork.lastUsedOffsetForLeaderEpochVersion >= 3)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxOTcwOA==", "bodyText": "I think this was originally using 1 in order to ensure that we were using a version which included the epoch in the response. Since then it looks like it has been updated blindly every time we've bumped the protocol. I'm ok leaving this as is, but we could probably also get rid of it.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r533719708", "createdAt": "2020-12-01T21:03:17Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala", "diffHunk": "@@ -437,8 +437,8 @@ class ReplicaFetcherThreadTest {\n     thread.doWork()\n     assertEquals(2, mockNetwork.epochFetchCount)\n     assertEquals(1, mockNetwork.fetchCount)\n-    assertEquals(\"OffsetsForLeaderEpochRequest version.\",\n-      3, mockNetwork.lastUsedOffsetForLeaderEpochVersion)\n+    assertTrue(\"OffsetsForLeaderEpochRequest version.\",\n+      mockNetwork.lastUsedOffsetForLeaderEpochVersion >= 3)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0OTk0Mw=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDE2MjM3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozMDozNFrOH8Vuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozMDozNFrOH8Vuxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMjY0Ng==", "bodyText": "I wonder if we may as well make this the default case. Not sure we're getting much by forcing ourselves to update this logic after each bump. Maybe the range validation is still useful, but that could be done by using oldestVersion and latestVersion.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r533032646", "createdAt": "2020-12-01T02:30:34Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java", "diffHunk": "@@ -286,6 +286,7 @@ public static byte requiredMagicForVersion(short produceRequestVersion) {\n             case 6:\n             case 7:\n             case 8:\n+            case 9:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f0ed0421c676368e0238152a58ea2a29ca4fd76"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDE3MDczOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/requests/WriteTxnMarkersRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozNTowNFrOH8Vzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozNTowNFrOH8Vzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzMzkyNw==", "bodyText": "I think this is probably ok, but it is a little inconsistent with how we handle the versions for other inter-broker RPCs. Since we rely on the IBP, we always set the version explicitly in the caller, which means there is exactly one allowable version for the builder to use. See for example LeaderAndIsrRequest.Builder.", "url": "https://github.com/apache/kafka/pull/9601#discussion_r533033927", "createdAt": "2020-12-01T02:35:04Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/WriteTxnMarkersRequest.java", "diffHunk": "@@ -105,8 +105,8 @@ public int hashCode() {\n \n         public final WriteTxnMarkersRequestData data;\n \n-        public Builder(final List<TxnMarkerEntry> markers) {\n-            super(ApiKeys.WRITE_TXN_MARKERS);\n+        public Builder(final List<TxnMarkerEntry> markers, short latestAllowedVersion) {\n+            super(ApiKeys.WRITE_TXN_MARKERS, ApiKeys.WRITE_TXN_MARKERS.oldestVersion(), latestAllowedVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f0ed0421c676368e0238152a58ea2a29ca4fd76"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDE3NTE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozNzowNVrOH8V2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjozNzowNVrOH8V2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzNDU1Mg==", "bodyText": "nit: maybe add a comment that this field is for the number of tagged fields?", "url": "https://github.com/apache/kafka/pull/9601#discussion_r533034552", "createdAt": "2020-12-01T02:37:05Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala", "diffHunk": "@@ -84,19 +85,24 @@ class EdgeCaseRequestTest extends KafkaServerTestHarness {\n   }\n \n   // Custom header serialization so that protocol assumptions are not forced\n-  private def requestHeaderBytes(apiKey: Short, apiVersion: Short, clientId: String = \"\", correlationId: Int = -1): Array[Byte] = {\n+  def requestHeaderBytes(apiKey: Short, apiVersion: Short, clientId: String = \"\", correlationId: Int = -1): Array[Byte] = {\n+    // Check for flex versions, some tests here verify that an invalid apiKey is detected properly, so if -1 is used,\n+    // assume the request is not using flex versions.\n+    val flexVersion = if (apiKey >= 0) ApiKeys.forId(apiKey).requestHeaderVersion(apiVersion) >= 2 else false\n     val size = {\n       2 /* apiKey */ +\n         2 /* version id */ +\n         4 /* correlation id */ +\n-        Type.NULLABLE_STRING.sizeOf(clientId) /* client id */\n+        Type.NULLABLE_STRING.sizeOf(clientId)  /* client id */ +\n+        (if (flexVersion) ByteUtils.sizeOfUnsignedVarint(0) else 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f0ed0421c676368e0238152a58ea2a29ca4fd76"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3867, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}