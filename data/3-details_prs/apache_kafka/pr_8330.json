{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDkwMDIy", "number": 8330, "title": "KAFKA-9742: Fix broken StandbyTaskEOSIntegrationTest", "bodyText": "Relax the requirement that tasks' reported offsetSum is less than the endOffsetSum for those\ntasks. This was surfaced by a test for corrupted tasks, but it can happen with real corrupted\ntasks. Rather than throw an exception on the leader, we now de-prioritize the corrupted task.\nIdeally, that instance will not get assigned the task and the stateDirCleaner will make\nthe problem \"go away\". If it does get assigned the task, then it will detect the corruption and\ndelete the task directory before recovering the entire changelog. Thus, the estimate we provide\naccurately reflects the amount of lag such a corrupted task would have to recover (the whole log).\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-03-22T23:21:49Z", "url": "https://github.com/apache/kafka/pull/8330", "merged": true, "mergeCommit": {"oid": "f538caf13819c79b37fcdd300d7dacd724180197"}, "closed": true, "closedAt": "2020-03-23T22:58:15Z", "author": {"login": "vvcephei"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQR8NIgH2gAyMzkyMDkwMDIyOjI2OWJjZjY2YWM5ZmUxYTQwNGQ1ZDU1NzFkZmQzY2JjZDBiMjcwN2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQl_g-AH2gAyMzkyMDkwMDIyOjA2YzE3MzUwZGFjMDljOGI0YTM1ZWRlYjFiM2M4ZTI5MTMyZGZhMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c", "committedDate": "2020-03-22T23:03:01Z", "message": "KAFKA-9742: Fix broken StandbyTaskEOSIntegrationTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDY2NDIw", "url": "https://github.com/apache/kafka/pull/8330#pullrequestreview-379066420", "createdAt": "2020-03-22T23:23:45Z", "commit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzoyMzo0NlrOF5znHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzozMDowNFrOF5zpbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1ODc1MA==", "bodyText": "I moved this into a try-with-resources so that the instances would get closed even if the assertions fail.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396158750", "createdAt": "2020-03-22T23:23:46Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -82,29 +82,27 @@ public void surviveWithOneTaskAsStandby() throws ExecutionException, Interrupted\n \n         final CountDownLatch instanceLatch = new CountDownLatch(1);\n \n-        final String stateDirPathOne = stateDirPath + \"/\" + appId + \"-1/\";\n-        final KafkaStreams streamInstanceOne =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathOne, instanceLatch);\n+        try (\n+            final KafkaStreams streamInstanceOne = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-1/\", instanceLatch);\n+            final KafkaStreams streamInstanceTwo = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-2/\", instanceLatch);\n+        ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1ODg4NQ==", "bodyText": "Close them both asynchronously so we can tear them down in parallel. The try-with-resources will block until they are really closed.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396158885", "createdAt": "2020-03-22T23:25:12Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -82,29 +82,27 @@ public void surviveWithOneTaskAsStandby() throws ExecutionException, Interrupted\n \n         final CountDownLatch instanceLatch = new CountDownLatch(1);\n \n-        final String stateDirPathOne = stateDirPath + \"/\" + appId + \"-1/\";\n-        final KafkaStreams streamInstanceOne =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathOne, instanceLatch);\n+        try (\n+            final KafkaStreams streamInstanceOne = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-1/\", instanceLatch);\n+            final KafkaStreams streamInstanceTwo = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-2/\", instanceLatch);\n+        ) {\n \n-        final String stateDirPathTwo = stateDirPath + \"/\" + appId + \"-2/\";\n-        final KafkaStreams streamInstanceTwo =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathTwo, instanceLatch);\n \n-        streamInstanceOne.start();\n+            streamInstanceOne.start();\n \n-        streamInstanceTwo.start();\n+            streamInstanceTwo.start();\n \n-        // Wait for the record to be processed\n-        assertTrue(instanceLatch.await(15, TimeUnit.SECONDS));\n+            // Wait for the record to be processed\n+            assertTrue(instanceLatch.await(15, TimeUnit.SECONDS));\n \n-        waitForCondition(() -> streamInstanceOne.state().equals(KafkaStreams.State.RUNNING),\n-            \"Stream instance one should be up and running by now\");\n-        waitForCondition(() -> streamInstanceTwo.state().equals(KafkaStreams.State.RUNNING),\n-            \"Stream instance one should be up and running by now\");\n-\n-        streamInstanceOne.close(Duration.ofSeconds(30));\n-        streamInstanceTwo.close(Duration.ofSeconds(30));\n+            waitForCondition(() -> streamInstanceOne.state().equals(KafkaStreams.State.RUNNING),\n+                             \"Stream instance one should be up and running by now\");\n+            waitForCondition(() -> streamInstanceTwo.state().equals(KafkaStreams.State.RUNNING),\n+                             \"Stream instance one should be up and running by now\");\n \n+            streamInstanceOne.close(Duration.ZERO);\n+            streamInstanceTwo.close(Duration.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1ODk5Nw==", "bodyText": "This test isn't logically changed, but I noticed a couple of problems with it that I fixed on the side.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396158997", "createdAt": "2020-03-22T23:26:08Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -82,29 +82,27 @@ public void surviveWithOneTaskAsStandby() throws ExecutionException, Interrupted\n \n         final CountDownLatch instanceLatch = new CountDownLatch(1);\n \n-        final String stateDirPathOne = stateDirPath + \"/\" + appId + \"-1/\";\n-        final KafkaStreams streamInstanceOne =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathOne, instanceLatch);\n+        try (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1OTI5Nw==", "bodyText": "This is the fix, to return an accurate estimate instead of throwing an exception. I felt a warning was appropriate, given that this does indicate task corruption, or some other unexpected situation.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396159297", "createdAt": "2020-03-22T23:29:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -194,11 +199,12 @@ public void computeTaskLags(final Map<TaskId, Long> allTaskEndOffsetSums) {\n             final Long offsetSum = taskOffsetSums.getOrDefault(task, 0L);\n \n             if (endOffsetSum < offsetSum) {\n-                throw new IllegalStateException(\"Task \" + task + \" had endOffsetSum=\" + endOffsetSum +\n-                                                    \" smaller than offsetSum=\" + offsetSum);\n-            }\n-\n-            if (offsetSum == Task.LATEST_OFFSET) {\n+                LOG.warn(\"Task \" + task + \" had endOffsetSum=\" + endOffsetSum +\n+                             \" smaller than offsetSum=\" + offsetSum + \". This probably means the task is corrupted,\" +\n+                             \" which in turn indicates that it will need to restore from scratch, so we pin the lag\" +\n+                             \" to the end offset of the log.\");\n+                taskLagTotals.put(task, endOffsetSum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1OTM0Mg==", "bodyText": "The test for the affected code of course has to change.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396159342", "createdAt": "2020-03-22T23:30:04Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java", "diffHunk": "@@ -233,11 +233,12 @@ public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n     }\n \n     @Test\n-    public void shouldThrowIllegalStateExceptionIfOffsetSumIsGreaterThanEndOffsetSum() {\n+    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n         final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, 5L);\n         final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 1L);\n         client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n-        assertThrows(IllegalStateException.class, () -> client.computeTaskLags(allTaskEndOffsetSums));\n+        client.computeTaskLags(allTaskEndOffsetSums);\n+        assertThat(client.lagFor(taskId01), equalTo(1L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTg1NTA1", "url": "https://github.com/apache/kafka/pull/8330#pullrequestreview-379185505", "createdAt": "2020-03-23T07:37:51Z", "commit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzozNzo1MlrOF55jQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzozNzo1MlrOF55jQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1NjA2Ng==", "bodyText": "Stream instance \"one\" -> \"two\"", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396256066", "createdAt": "2020-03-23T07:37:52Z", "author": {"login": "chia7712"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -82,29 +82,27 @@ public void surviveWithOneTaskAsStandby() throws ExecutionException, Interrupted\n \n         final CountDownLatch instanceLatch = new CountDownLatch(1);\n \n-        final String stateDirPathOne = stateDirPath + \"/\" + appId + \"-1/\";\n-        final KafkaStreams streamInstanceOne =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathOne, instanceLatch);\n+        try (\n+            final KafkaStreams streamInstanceOne = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-1/\", instanceLatch);\n+            final KafkaStreams streamInstanceTwo = buildStreamWithDirtyStateDir(appId, stateDirPath + \"/\" + appId + \"-2/\", instanceLatch);\n+        ) {\n \n-        final String stateDirPathTwo = stateDirPath + \"/\" + appId + \"-2/\";\n-        final KafkaStreams streamInstanceTwo =\n-            buildStreamWithDirtyStateDir(appId, stateDirPathTwo, instanceLatch);\n \n-        streamInstanceOne.start();\n+            streamInstanceOne.start();\n \n-        streamInstanceTwo.start();\n+            streamInstanceTwo.start();\n \n-        // Wait for the record to be processed\n-        assertTrue(instanceLatch.await(15, TimeUnit.SECONDS));\n+            // Wait for the record to be processed\n+            assertTrue(instanceLatch.await(15, TimeUnit.SECONDS));\n \n-        waitForCondition(() -> streamInstanceOne.state().equals(KafkaStreams.State.RUNNING),\n-            \"Stream instance one should be up and running by now\");\n-        waitForCondition(() -> streamInstanceTwo.state().equals(KafkaStreams.State.RUNNING),\n-            \"Stream instance one should be up and running by now\");\n-\n-        streamInstanceOne.close(Duration.ofSeconds(30));\n-        streamInstanceTwo.close(Duration.ofSeconds(30));\n+            waitForCondition(() -> streamInstanceOne.state().equals(KafkaStreams.State.RUNNING),\n+                             \"Stream instance one should be up and running by now\");\n+            waitForCondition(() -> streamInstanceTwo.state().equals(KafkaStreams.State.RUNNING),\n+                             \"Stream instance one should be up and running by now\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjkwMTU0", "url": "https://github.com/apache/kafka/pull/8330#pullrequestreview-379290154", "createdAt": "2020-03-23T10:14:50Z", "commit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxNDo1MVrOF5-tsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxNDo1MVrOF5-tsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MDY1Ng==", "bodyText": "prop: Could you explain a bit better what the warning is about? If somebody does not know the code, it is hard to understand what is going on.", "url": "https://github.com/apache/kafka/pull/8330#discussion_r396340656", "createdAt": "2020-03-23T10:14:51Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/ClientState.java", "diffHunk": "@@ -194,11 +199,12 @@ public void computeTaskLags(final Map<TaskId, Long> allTaskEndOffsetSums) {\n             final Long offsetSum = taskOffsetSums.getOrDefault(task, 0L);\n \n             if (endOffsetSum < offsetSum) {\n-                throw new IllegalStateException(\"Task \" + task + \" had endOffsetSum=\" + endOffsetSum +\n-                                                    \" smaller than offsetSum=\" + offsetSum);\n-            }\n-\n-            if (offsetSum == Task.LATEST_OFFSET) {\n+                LOG.warn(\"Task \" + task + \" had endOffsetSum=\" + endOffsetSum +\n+                             \" smaller than offsetSum=\" + offsetSum + \". This probably means the task is corrupted,\" +\n+                             \" which in turn indicates that it will need to restore from scratch, so we pin the lag\" +\n+                             \" to the end offset of the log.\");\n+                taskLagTotals.put(task, endOffsetSum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTgxNjIy", "url": "https://github.com/apache/kafka/pull/8330#pullrequestreview-379581622", "createdAt": "2020-03-23T16:09:00Z", "commit": {"oid": "269bcf66ac9fe1a404d5d5571dfd3cbcd0b2707c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c17350dac09c8b4a35edeb1b3c8e29132dfa17", "author": {"user": null}, "url": "https://github.com/apache/kafka/commit/06c17350dac09c8b4a35edeb1b3c8e29132dfa17", "committedDate": "2020-03-23T22:24:44Z", "message": "CR feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 355, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}