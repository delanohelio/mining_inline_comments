{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTg4MTU3", "number": 8929, "title": "KAFKA-4996: Fix findbugs multithreaded correctness warnings for streams", "bodyText": "Fix findbugs multithreaded correctness warnings for streams, updated variables to be threadsafe\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-06-25T18:30:20Z", "url": "https://github.com/apache/kafka/pull/8929", "merged": true, "mergeCommit": {"oid": "c4ec765af51cfce8a09bcc2446c6ad33cae69ba1"}, "closed": true, "closedAt": "2020-06-30T17:15:29Z", "author": {"login": "lct45"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuxxFzAH2gAyNDQwMTg4MTU3OmJkMzFlNTEzZjg0ZGU3MmUyNmJiNmNkYmQ5OTVjYWFhNGY0NTMzZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwDjQIAH2gAyNDQwMTg4MTU3OjIxY2E3MWE0YmIwOGFkMTdiZDJjY2RjZGI2MWRjZTQ3Zjk1OGQyOWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd31e513f84de72e26bb6cdbd995caaa4f4533d6", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/bd31e513f84de72e26bb6cdbd995caaa4f4533d6", "committedDate": "2020-06-25T17:05:34Z", "message": "update spotbugs exclude for ticket 4996"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/801d60184a2969c1539126972e51a13ab20e4ed0", "committedDate": "2020-06-25T17:45:46Z", "message": "updated maxObservedTimestamp and localMetadata to be threadsafe"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODkxOTQw", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-437891940", "createdAt": "2020-06-25T22:05:57Z", "commit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowNTo1N1rOGpNb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowNTo1N1rOGpNb6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw==", "bodyText": "Interesting... which value is it? Looking at the class, it seems like it's probably the builder methods, which should all be called before passing the pre-built topology to the StreamThreads. I agree this should be safe, but it still might be nice to clean up the class so that this suppression isn't necessary.\nCan you expand this XML comment a little to explain what would need to be done to resolve this suppression?", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445864937", "createdAt": "2020-06-25T22:05:57Z", "author": {"login": "vvcephei"}, "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -348,14 +348,11 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n     </Match>\n \n     <Match>\n-        <!-- TODO: fix this (see KAFKA-4996) -->\n-        <Or>\n-            <Package name=\"org.apache.kafka.streams.state.internals\"/>\n+        <!-- Suppress warning about a value that gets initialized\n+             before any other threads are created. -->\n             <Package name=\"org.apache.kafka.streams.processor.internals\"/>\n-            <Package name=\"org.apache.kafka.streams.processor\"/>\n-            <Package name=\"org.apache.kafka.streams\"/>\n-        </Or>\n-        <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>\n+            <Source name=\"InternalTopologyBuilder.java\"/>\n+            <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk2Mjk3", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-437896297", "createdAt": "2020-06-25T22:15:05Z", "commit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxNTowNVrOGpNp4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxNjo1NlrOGpNsiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ==", "bodyText": "Will this get us NullPointer? Do we need to get an initial value for localMetadata?", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445868515", "createdAt": "2020-06-25T22:15:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -226,7 +227,7 @@ public StreamsMetadata getLocalMetadata() {\n             if (thisHost.equals(UNKNOWN_HOST)) {\n                 return new KeyQueryMetadata(allMetadata.get(0).hostInfo(), Collections.emptySet(), -1);\n             }\n-            return new KeyQueryMetadata(localMetadata.hostInfo(), Collections.emptySet(), -1);\n+            return new KeyQueryMetadata(localMetadata.get().hostInfo(), Collections.emptySet(), -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2OTE5Mg==", "bodyText": "What are we suppressing here?", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445869192", "createdAt": "2020-06-25T22:16:56Z", "author": {"login": "abbccdda"}, "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -348,14 +348,11 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n     </Match>\n \n     <Match>\n-        <!-- TODO: fix this (see KAFKA-4996) -->\n-        <Or>\n-            <Package name=\"org.apache.kafka.streams.state.internals\"/>\n+        <!-- Suppress warning about a value that gets initialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTAxMDA0", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-437901004", "createdAt": "2020-06-25T22:25:45Z", "commit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoyNTo0NVrOGpN42Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoyNzoyOFrOGpN7OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MjM0NQ==", "bodyText": "We need to actually initialize this now, although we can just initialize the value to null. ie\nprivate AtomicReference<StreamsMetadata> localMetadata = new AtomicReference<>(null);", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872345", "createdAt": "2020-06-25T22:25:45Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final HostInfo thisHost;\n     private List<StreamsMetadata> allMetadata = Collections.emptyList();\n     private Cluster clusterMetadata;\n-    private StreamsMetadata localMetadata;\n+    private AtomicReference<StreamsMetadata> localMetadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3Mjc3MQ==", "bodyText": "It's the applicationId -- I guess we should specify in the comment since both you and Boyang asked", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872771", "createdAt": "2020-06-25T22:26:58Z", "author": {"login": "ableegoldman"}, "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -348,14 +348,11 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n     </Match>\n \n     <Match>\n-        <!-- TODO: fix this (see KAFKA-4996) -->\n-        <Or>\n-            <Package name=\"org.apache.kafka.streams.state.internals\"/>\n+        <!-- Suppress warning about a value that gets initialized\n+             before any other threads are created. -->\n             <Package name=\"org.apache.kafka.streams.processor.internals\"/>\n-            <Package name=\"org.apache.kafka.streams.processor\"/>\n-            <Package name=\"org.apache.kafka.streams\"/>\n-        </Or>\n-        <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>\n+            <Source name=\"InternalTopologyBuilder.java\"/>\n+            <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw=="}, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3Mjk1Mw==", "bodyText": "Yeah good catch, see above", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872953", "createdAt": "2020-06-25T22:27:28Z", "author": {"login": "ableegoldman"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -226,7 +227,7 @@ public StreamsMetadata getLocalMetadata() {\n             if (thisHost.equals(UNKNOWN_HOST)) {\n                 return new KeyQueryMetadata(allMetadata.get(0).hostInfo(), Collections.emptySet(), -1);\n             }\n-            return new KeyQueryMetadata(localMetadata.hostInfo(), Collections.emptySet(), -1);\n+            return new KeyQueryMetadata(localMetadata.get().hostInfo(), Collections.emptySet(), -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/2c5f1080bd7d36a6392627eb0562a0e6d62d5a86", "committedDate": "2020-06-26T16:14:31Z", "message": "fixed initialization and updated comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDMyOTc3", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-438432977", "createdAt": "2020-06-26T16:27:59Z", "commit": {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDYyNDM1", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-438462435", "createdAt": "2020-06-26T17:12:31Z", "commit": {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTg4MDY3", "url": "https://github.com/apache/kafka/pull/8929#pullrequestreview-438588067", "createdAt": "2020-06-26T20:52:07Z", "commit": {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1MjowN1rOGpuXKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDo1NjozNFrOGpuedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDM5Mw==", "bodyText": "This could be final", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446404393", "createdAt": "2020-06-26T20:52:07Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final HostInfo thisHost;\n     private List<StreamsMetadata> allMetadata = Collections.emptyList();\n     private Cluster clusterMetadata;\n-    private StreamsMetadata localMetadata;\n+    private AtomicReference<StreamsMetadata> localMetadata = new AtomicReference<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNjI2MQ==", "bodyText": "Hmm, why do we still keep it? Based on the reviews for previous version, I believe that there is some strict ordering for getting localMetadata initialized to be non-null on L352 first before hitting this logic, but still a null check sound more resilient to me, unless we want to have a NullPointerException to be thrown explicitly.", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446406261", "createdAt": "2020-06-26T20:56:34Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -226,7 +227,7 @@ public StreamsMetadata getLocalMetadata() {\n             if (thisHost.equals(UNKNOWN_HOST)) {\n                 return new KeyQueryMetadata(allMetadata.get(0).hostInfo(), Collections.emptySet(), -1);\n             }\n-            return new KeyQueryMetadata(localMetadata.hostInfo(), Collections.emptySet(), -1);\n+            return new KeyQueryMetadata(localMetadata.get().hostInfo(), Collections.emptySet(), -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, "originalCommit": {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ca71a4bb08ad17bd2ccdcdb61dce47f958d29e", "author": {"user": {"login": "lct45", "name": "leah"}}, "url": "https://github.com/apache/kafka/commit/21ca71a4bb08ad17bd2ccdcdb61dce47f958d29e", "committedDate": "2020-06-29T16:22:40Z", "message": "fixed localMetadata initialization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 739, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}