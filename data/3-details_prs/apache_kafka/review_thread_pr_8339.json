{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODIwMzYz", "number": 8339, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MDoxOFrODqwOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNzowN1rODq8QkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU2OTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MDoxOFrOF6sV6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODo0MjozNFrOF6-PDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4ODIzMw==", "bodyText": "May be useful to add a comment since this has a slightly unusual usage", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397088233", "createdAt": "2020-03-24T11:40:18Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -66,7 +66,7 @@ private[group] class MemberMetadata(var memberId: String,\n   var assignment: Array[Byte] = Array.empty[Byte]\n   var awaitingJoinCallback: JoinGroupResult => Unit = null\n   var awaitingSyncCallback: SyncGroupResult => Unit = null\n-  var latestHeartbeat: Long = -1\n+  var heartbeatSatisfied: Boolean = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNzY3OQ==", "bodyText": "I will add a comment. I struggled to find a simpler way to map heartbeat expiration onto purgatory semantics. This was the best I could come up with, though I agree it is a little unusual.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397307679", "createdAt": "2020-03-24T16:50:45Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -66,7 +66,7 @@ private[group] class MemberMetadata(var memberId: String,\n   var assignment: Array[Byte] = Array.empty[Byte]\n   var awaitingJoinCallback: JoinGroupResult => Unit = null\n   var awaitingSyncCallback: SyncGroupResult => Unit = null\n-  var latestHeartbeat: Long = -1\n+  var heartbeatSatisfied: Boolean = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4ODIzMw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTM5MA==", "bodyText": "I had a different idea about this, but after second thought I think it's better to just make it hard-explicit, rather than embedding in a less-readable math equation. Now I feel it's better to be unusual than bug-vulnerable.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397381390", "createdAt": "2020-03-24T18:42:34Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -66,7 +66,7 @@ private[group] class MemberMetadata(var memberId: String,\n   var assignment: Array[Byte] = Array.empty[Byte]\n   var awaitingJoinCallback: JoinGroupResult => Unit = null\n   var awaitingSyncCallback: SyncGroupResult => Unit = null\n-  var latestHeartbeat: Long = -1\n+  var heartbeatSatisfied: Boolean = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4ODIzMw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTU3OTMyOnYy", "diffSide": "LEFT", "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo0MzoxN1rOF6sb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNTowNFrOF64Cqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4OTc4Nw==", "bodyText": "Sad to see this go since it was useful when things went wrong. But since it is not used anymore, I guess it must go.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397089787", "createdAt": "2020-03-24T11:43:17Z", "author": {"login": "rajinisivaram"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -66,7 +66,7 @@ private[group] class MemberMetadata(var memberId: String,\n   var assignment: Array[Byte] = Array.empty[Byte]\n   var awaitingJoinCallback: JoinGroupResult => Unit = null\n   var awaitingSyncCallback: SyncGroupResult => Unit = null\n-  var latestHeartbeat: Long = -1", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3OTkxNA==", "bodyText": "I think its current usage was a bit error-prone. However, if it's useful for debugging, we can find a way to keep it. It did help us understand this bug after all. Perhaps we could have a separate field for the last time a request was received?", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397279914", "createdAt": "2020-03-24T16:15:04Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -66,7 +66,7 @@ private[group] class MemberMetadata(var memberId: String,\n   var assignment: Array[Byte] = Array.empty[Byte]\n   var awaitingJoinCallback: JoinGroupResult => Unit = null\n   var awaitingSyncCallback: SyncGroupResult => Unit = null\n-  var latestHeartbeat: Long = -1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4OTc4Nw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzM5MTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODo1Mzo0MlrOF6-o1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo1MFrOF7F5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Nzk4OA==", "bodyText": "Hmm, do we still need to rely on isNew here? Could the condition just be heartbeatSatisfied || isAwaitingJoin || isAwaitingSync?", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397387988", "createdAt": "2020-03-24T18:53:42Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -85,16 +85,16 @@ private[group] class MemberMetadata(var memberId: String,\n     }\n   }\n \n-  def shouldKeepAlive(deadlineMs: Long): Boolean = {\n+  def hasSatisfiedHeartbeat: Boolean = {\n     if (isNew) {\n-      // New members are expired after the static join timeout\n-      latestHeartbeat + GroupCoordinator.NewMemberJoinTimeoutMs > deadlineMs\n+      // New members can be expired while awaiting join, so we have to check this first", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTk4MQ==", "bodyText": "The awkward thing about the isNew case is that we want the member to fail while isAwaitingJoin is true. This is attempting to handle the case for old versions of the protocol where a client sends JoinGroup with empty memberId and then times out. I was debating how important this logic is, but I seem to recall a case in the past where the group grew very large because new members kept timing out and retrying.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397409981", "createdAt": "2020-03-24T19:32:42Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -85,16 +85,16 @@ private[group] class MemberMetadata(var memberId: String,\n     }\n   }\n \n-  def shouldKeepAlive(deadlineMs: Long): Boolean = {\n+  def hasSatisfiedHeartbeat: Boolean = {\n     if (isNew) {\n-      // New members are expired after the static join timeout\n-      latestHeartbeat + GroupCoordinator.NewMemberJoinTimeoutMs > deadlineMs\n+      // New members can be expired while awaiting join, so we have to check this first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Nzk4OA=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjk1MQ==", "bodyText": "Fair enough; originally I thought we can now just remove this isNew flag now but I think I buy your arguments now.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397506951", "createdAt": "2020-03-24T22:45:50Z", "author": {"login": "guozhangwang"}, "path": "core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala", "diffHunk": "@@ -85,16 +85,16 @@ private[group] class MemberMetadata(var memberId: String,\n     }\n   }\n \n-  def shouldKeepAlive(deadlineMs: Long): Boolean = {\n+  def hasSatisfiedHeartbeat: Boolean = {\n     if (isNew) {\n-      // New members are expired after the static join timeout\n-      latestHeartbeat + GroupCoordinator.NewMemberJoinTimeoutMs > deadlineMs\n+      // New members can be expired while awaiting join, so we have to check this first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Nzk4OA=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzM5NzIzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODo1NToxNlrOF6-sWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNDoxOVrOF7AB8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4ODg4OQ==", "bodyText": "Not sure if this test covers the original bug, could you elaborate a bit more?", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397388889", "createdAt": "2020-03-24T18:55:16Z", "author": {"login": "guozhangwang"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -381,6 +381,41 @@ class GroupCoordinatorTest {\n     assertEquals(firstMemberId, group.allMembers.head)\n   }\n \n+  @Test\n+  def testLeaderFailsBeforeSyncGroup(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMDgwMA==", "bodyText": "Probably need to rename this. I'll add a comment as well. The test fails without the patch because the group is stuck in the PreparingRebalance state and does not make the transition to Empty as expected.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397410800", "createdAt": "2020-03-24T19:34:19Z", "author": {"login": "hachikuji"}, "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala", "diffHunk": "@@ -381,6 +381,41 @@ class GroupCoordinatorTest {\n     assertEquals(firstMemberId, group.allMembers.head)\n   }\n \n+  @Test\n+  def testLeaderFailsBeforeSyncGroup(): Unit = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4ODg4OQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzU0MDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNzowN1rOF7AHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1ODoyNFrOF7A12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMjIyNw==", "bodyText": "why to complete Heartbeat here?", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397412227", "createdAt": "2020-03-24T19:37:07Z", "author": {"login": "chia7712"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -1167,25 +1170,23 @@ class GroupCoordinator(val brokerId: Int,\n         if (group.has(memberId)) {\n           forceComplete()\n         } else false\n-      } else {\n-        if (shouldCompleteNonPendingHeartbeat(group, memberId, heartbeatDeadline)) {\n-          forceComplete()\n-        } else false\n-      }\n+      } else if (shouldCompleteNonPendingHeartbeat(group, memberId)) {\n+        forceComplete()\n+      } else false\n     }\n   }\n \n-  def shouldCompleteNonPendingHeartbeat(group: GroupMetadata, memberId: String, heartbeatDeadline: Long): Boolean = {\n+  def shouldCompleteNonPendingHeartbeat(group: GroupMetadata, memberId: String): Boolean = {\n     if (group.has(memberId)) {\n       val member = group.get(memberId)\n-      member.shouldKeepAlive(heartbeatDeadline) || member.isLeaving\n+      member.hasSatisfiedHeartbeat || member.isLeaving\n     } else {\n-      info(s\"Member id $memberId was not found in ${group.groupId} during heartbeat expiration.\")\n-      false\n+      info(s\"Member id $memberId was not found in ${group.groupId} during heartbeat completion check\")\n+      true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDA4OQ==", "bodyText": "Heartbeat \"completion\" is a really confusing notion in this code. If the delayed heartbeat gets completed, that just means we do not need its expiration any longer. In this case if a member has already been removed from the group, then we do not need to wait for expiration of the delayed heartbeat to remove it.", "url": "https://github.com/apache/kafka/pull/8339#discussion_r397424089", "createdAt": "2020-03-24T19:58:24Z", "author": {"login": "hachikuji"}, "path": "core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala", "diffHunk": "@@ -1167,25 +1170,23 @@ class GroupCoordinator(val brokerId: Int,\n         if (group.has(memberId)) {\n           forceComplete()\n         } else false\n-      } else {\n-        if (shouldCompleteNonPendingHeartbeat(group, memberId, heartbeatDeadline)) {\n-          forceComplete()\n-        } else false\n-      }\n+      } else if (shouldCompleteNonPendingHeartbeat(group, memberId)) {\n+        forceComplete()\n+      } else false\n     }\n   }\n \n-  def shouldCompleteNonPendingHeartbeat(group: GroupMetadata, memberId: String, heartbeatDeadline: Long): Boolean = {\n+  def shouldCompleteNonPendingHeartbeat(group: GroupMetadata, memberId: String): Boolean = {\n     if (group.has(memberId)) {\n       val member = group.get(memberId)\n-      member.shouldKeepAlive(heartbeatDeadline) || member.isLeaving\n+      member.hasSatisfiedHeartbeat || member.isLeaving\n     } else {\n-      info(s\"Member id $memberId was not found in ${group.groupId} during heartbeat expiration.\")\n-      false\n+      info(s\"Member id $memberId was not found in ${group.groupId} during heartbeat completion check\")\n+      true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMjIyNw=="}, "originalCommit": null, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3079, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}