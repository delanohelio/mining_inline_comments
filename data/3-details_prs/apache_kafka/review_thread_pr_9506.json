{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjk1Mzg2", "number": 9506, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDoyMDoxN1rOEyItSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozODowOVrOEyK4bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDA2OTIwOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDoyMDoxN1rOHonBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoxMTowOFrOHot9Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDM3Mw==", "bodyText": "nit: A better general pattern is to use assertEquals comparing against empty list. Then if the assertion fails, the message will show what was in the collection.", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512344373", "createdAt": "2020-10-27T00:20:17Z", "author": {"login": "hachikuji"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -46,6 +46,30 @@\n     private final TopicPartition tp2 = new TopicPartition(\"bar\", 2);\n     private final Optional<String> groupInstanceId = Optional.of(\"instance.id\");\n \n+    @Test\n+    public void serializeDeserializeSubscriptionAllVersions() {\n+        List<TopicPartition> ownedPartitions = Arrays.asList(\n+            new TopicPartition(\"foo\", 0),\n+            new TopicPartition(\"bar\", 0));\n+        Subscription subscription = new Subscription(Arrays.asList(\"foo\", \"bar\"),\n+            ByteBuffer.wrap(\"hello\".getBytes()), ownedPartitions);\n+\n+        for (short version = ConsumerProtocolSubscription.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolSubscription.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeSubscription(subscription, version);\n+            Subscription parsedSubscription = ConsumerProtocol.deserializeSubscription(buffer);\n+\n+            assertEquals(subscription.topics(), parsedSubscription.topics());\n+            assertEquals(subscription.userData(), parsedSubscription.userData());\n+            assertFalse(parsedSubscription.groupInstanceId().isPresent());\n+\n+            if (version >= 1) {\n+                assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));\n+            } else {\n+                assertTrue(parsedSubscription.ownedPartitions().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1ODA3OA==", "bodyText": "Good point.", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512458078", "createdAt": "2020-10-27T07:11:08Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -46,6 +46,30 @@\n     private final TopicPartition tp2 = new TopicPartition(\"bar\", 2);\n     private final Optional<String> groupInstanceId = Optional.of(\"instance.id\");\n \n+    @Test\n+    public void serializeDeserializeSubscriptionAllVersions() {\n+        List<TopicPartition> ownedPartitions = Arrays.asList(\n+            new TopicPartition(\"foo\", 0),\n+            new TopicPartition(\"bar\", 0));\n+        Subscription subscription = new Subscription(Arrays.asList(\"foo\", \"bar\"),\n+            ByteBuffer.wrap(\"hello\".getBytes()), ownedPartitions);\n+\n+        for (short version = ConsumerProtocolSubscription.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolSubscription.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeSubscription(subscription, version);\n+            Subscription parsedSubscription = ConsumerProtocol.deserializeSubscription(buffer);\n+\n+            assertEquals(subscription.topics(), parsedSubscription.topics());\n+            assertEquals(subscription.userData(), parsedSubscription.userData());\n+            assertFalse(parsedSubscription.groupInstanceId().isPresent());\n+\n+            if (version >= 1) {\n+                assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));\n+            } else {\n+                assertTrue(parsedSubscription.ownedPartitions().isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDM3Mw=="}, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDQyNTQxOnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMzozODowOVrOHoqRJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoxMToxOFrOHot9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzYwNw==", "bodyText": "Does it compare to incorrect object (maybe assignment.userData())?", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512397607", "createdAt": "2020-10-27T03:38:09Z", "author": {"login": "chia7712"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -137,6 +161,19 @@ public void deserializeFutureSubscriptionVersion() {\n         assertEquals(groupInstanceId, subscription.groupInstanceId());\n     }\n \n+    @Test\n+    public void serializeDeserializeAssignmentAllVersions() {\n+        List<TopicPartition> partitions = Arrays.asList(tp1, tp2);\n+        Assignment assignment = new Assignment(partitions, ByteBuffer.wrap(\"hello\".getBytes()));\n+\n+        for (short version = ConsumerProtocolAssignment.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolAssignment.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeAssignment(assignment, version);\n+            Assignment parsedAssignment = ConsumerProtocol.deserializeAssignment(buffer);\n+            assertEquals(toSet(partitions), toSet(parsedAssignment.partitions()));\n+            assertEquals(parsedAssignment.userData(), parsedAssignment.userData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1ODE1MQ==", "bodyText": "Good catch!", "url": "https://github.com/apache/kafka/pull/9506#discussion_r512458151", "createdAt": "2020-10-27T07:11:18Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java", "diffHunk": "@@ -137,6 +161,19 @@ public void deserializeFutureSubscriptionVersion() {\n         assertEquals(groupInstanceId, subscription.groupInstanceId());\n     }\n \n+    @Test\n+    public void serializeDeserializeAssignmentAllVersions() {\n+        List<TopicPartition> partitions = Arrays.asList(tp1, tp2);\n+        Assignment assignment = new Assignment(partitions, ByteBuffer.wrap(\"hello\".getBytes()));\n+\n+        for (short version = ConsumerProtocolAssignment.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolAssignment.HIGHEST_SUPPORTED_VERSION; version++) {\n+            ByteBuffer buffer = ConsumerProtocol.serializeAssignment(assignment, version);\n+            Assignment parsedAssignment = ConsumerProtocol.deserializeAssignment(buffer);\n+            assertEquals(toSet(partitions), toSet(parsedAssignment.partitions()));\n+            assertEquals(parsedAssignment.userData(), parsedAssignment.userData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzYwNw=="}, "originalCommit": {"oid": "e8b70d04e1b600e14dec888b3000626074630703"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3977, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}