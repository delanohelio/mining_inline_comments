{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Nzk5OTc3", "number": 8567, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzoyOFrOD30reg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxMjo0MlrOD31YsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYxMzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzoyOFrOGOTM4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyOTozN1rOGOUnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzg0MQ==", "bodyText": "I guess this is not intended?", "url": "https://github.com/apache/kafka/pull/8567#discussion_r417647841", "createdAt": "2020-04-29T22:23:28Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -3012,17 +3010,24 @@ class KafkaApis(val requestChannel: RequestChannel,\n   private def sendResponseMaybeThrottle(request: RequestChannel.Request,\n                                         createResponse: Int => AbstractResponse,\n                                         onComplete: Option[Send => Unit] = None): Unit = {\n-    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request)\n-    quotas.request.throttle(request, throttleTimeMs, sendResponse)\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n     sendResponse(request, Some(createResponse(throttleTimeMs)), onComplete)\n   }\n \n   private def sendErrorResponseMaybeThrottle(request: RequestChannel.Request, error: Throwable): Unit = {\n-    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request)\n-    quotas.request.throttle(request, throttleTimeMs, sendResponse)\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n     sendErrorOrCloseConnection(request, error, throttleTimeMs)\n   }\n \n+  private def maybeRecordAndGetThrottleTimeMs(request: RequestChannel.Request): Int = {\n+    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request, time.milliseconds())\n+    println(s\"api throttle ms $throttleTimeMs ${request.header} ${request.header.clientId}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a78e099b4fa8f47fb0839738c6930d65e25d38ec"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDk0Ng==", "bodyText": "Yes, sorry, forgot to remove.", "url": "https://github.com/apache/kafka/pull/8567#discussion_r417670946", "createdAt": "2020-04-29T23:29:37Z", "author": {"login": "ijuma"}, "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -3012,17 +3010,24 @@ class KafkaApis(val requestChannel: RequestChannel,\n   private def sendResponseMaybeThrottle(request: RequestChannel.Request,\n                                         createResponse: Int => AbstractResponse,\n                                         onComplete: Option[Send => Unit] = None): Unit = {\n-    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request)\n-    quotas.request.throttle(request, throttleTimeMs, sendResponse)\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n     sendResponse(request, Some(createResponse(throttleTimeMs)), onComplete)\n   }\n \n   private def sendErrorResponseMaybeThrottle(request: RequestChannel.Request, error: Throwable): Unit = {\n-    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request)\n-    quotas.request.throttle(request, throttleTimeMs, sendResponse)\n+    val throttleTimeMs = maybeRecordAndGetThrottleTimeMs(request)\n+    quotas.request.throttle(request, throttleTimeMs, requestChannel.sendResponse)\n     sendErrorOrCloseConnection(request, error, throttleTimeMs)\n   }\n \n+  private def maybeRecordAndGetThrottleTimeMs(request: RequestChannel.Request): Int = {\n+    val throttleTimeMs = quotas.request.maybeRecordAndGetThrottleTimeMs(request, time.milliseconds())\n+    println(s\"api throttle ms $throttleTimeMs ${request.header} ${request.header.clientId}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzg0MQ=="}, "originalCommit": {"oid": "a78e099b4fa8f47fb0839738c6930d65e25d38ec"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODcyOTQ1OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxMjo0MlrOGOURzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzo0MTo1OFrOGOU2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTQ4NQ==", "bodyText": "Could this be private?", "url": "https://github.com/apache/kafka/pull/8567#discussion_r417665485", "createdAt": "2020-04-29T23:12:42Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "diffHunk": "@@ -235,14 +240,29 @@ abstract class QuotaTestClients(topic: String,\n     numConsumed\n   }\n \n-  def verifyProduceThrottle(expectThrottle: Boolean, verifyClientMetric: Boolean = true): Unit = {\n+  def verifyThrottleTimeRequestChannelMetric(apiKey: ApiKeys, metricNameSuffix: String,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a78e099b4fa8f47fb0839738c6930d65e25d38ec"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NDgxOA==", "bodyText": "Yes. I also restricted access to a few other methods in this class where possible.", "url": "https://github.com/apache/kafka/pull/8567#discussion_r417674818", "createdAt": "2020-04-29T23:41:58Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala", "diffHunk": "@@ -235,14 +240,29 @@ abstract class QuotaTestClients(topic: String,\n     numConsumed\n   }\n \n-  def verifyProduceThrottle(expectThrottle: Boolean, verifyClientMetric: Boolean = true): Unit = {\n+  def verifyThrottleTimeRequestChannelMetric(apiKey: ApiKeys, metricNameSuffix: String,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTQ4NQ=="}, "originalCommit": {"oid": "a78e099b4fa8f47fb0839738c6930d65e25d38ec"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2807, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}