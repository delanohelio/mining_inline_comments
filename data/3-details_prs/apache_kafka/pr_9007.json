{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDU0Mzgw", "number": 9007, "title": "KAFKA-10120: Deprecate DescribeLogDirsResult.all() and .values()", "bodyText": "As per KIP-621. Also added some tests in KafkaAdminClientTest", "createdAt": "2020-07-10T13:54:39Z", "url": "https://github.com/apache/kafka/pull/9007", "merged": true, "mergeCommit": {"oid": "819cd454f9b3078515a86e43a4486794df0a7971"}, "closed": true, "closedAt": "2020-07-30T13:10:31Z", "author": {"login": "tombentley"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcznItlAFqTQ0NjQ2NTQxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc58MNGAFqTQ1ODIzNjQwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDY1NDE2", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-446465416", "createdAt": "2020-07-10T14:50:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1MDoyOVrOGv6XRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzozMToyNFrOGv_nIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjQ4NA==", "bodyText": "nit: We usually use parenthesis instead of curly braces.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452892484", "createdAt": "2020-07-10T14:50:29Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/LogDirDescription.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.ApiException;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * A description of a log directory on a particular broker.\n+ */\n+public class LogDirDescription {\n+    private final Map<TopicPartition, ReplicaInfo> replicaInfos;\n+    private final ApiException error;\n+\n+    public LogDirDescription(ApiException error, Map<TopicPartition, ReplicaInfo> replicaInfos) {\n+        this.error = error;\n+        this.replicaInfos = replicaInfos;\n+    }\n+\n+    /**\n+     * A KafkaStorageException if this log directory is offline,\n+     * possibly some other exception if there were problems describing the log directory\n+     * or null if the directory is online.\n+     */\n+    public ApiException error() {\n+        return error;\n+    }\n+\n+    /**\n+     * A map from topic partition to replica information for that partition\n+     * in this log directory.\n+     */\n+    public Map<TopicPartition, ReplicaInfo> replicaInfos() {\n+        return unmodifiableMap(replicaInfos);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"LogDirDescription{\" +\n+                \"replicaInfos=\" + replicaInfos +\n+                \", error=\" + error +\n+                '}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjY5NA==", "bodyText": "nit: curly braces instead of parenthesis.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452892694", "createdAt": "2020-07-10T14:50:49Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/ReplicaInfo.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+/**\n+ * A description of a replica on a particular broker.\n+ */\n+public class ReplicaInfo {\n+\n+    private final long size;\n+    private final long offsetLag;\n+    private final boolean isFuture;\n+\n+    public ReplicaInfo(long size, long offsetLag, boolean isFuture) {\n+        this.size = size;\n+        this.offsetLag = offsetLag;\n+        this.isFuture = isFuture;\n+    }\n+\n+    /**\n+     * The total size of the log segments in this replica in bytes.\n+     */\n+    public long size() {\n+        return size;\n+    }\n+\n+    /**\n+     * The lag of the log's LEO with respect to the partition's\n+     * high watermark (if it is the current log for the partition)\n+     * or the current replica's LEO (if it is the {@linkplain #isFuture() future log}\n+     * for the partition).\n+     */\n+    public long offsetLag() {\n+        return offsetLag;\n+    }\n+\n+    /**\n+     * Whether this replica has been created by a AlterReplicaLogDirsRequest\n+     * but not yet replaced the current replica on the broker.\n+     *\n+     * @return true if this log is created by AlterReplicaLogDirsRequest and will replace the current log\n+     * of the replica at some time in the future.\n+     */\n+    public boolean isFuture() {\n+        return isFuture;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ReplicaInfo{\" +\n+                \"size=\" + size +\n+                \", offsetLag=\" + offsetLag +\n+                \", isFuture=\" + isFuture +\n+                '}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Mzc4Mg==", "bodyText": "nit: Can't we use map instead of flatMap and remove the Some?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452893782", "createdAt": "2020-07-10T14:52:32Z", "author": {"login": "dajac"}, "path": "core/src/main/scala/kafka/admin/LogDirsCommand.scala", "diffHunk": "@@ -64,7 +63,7 @@ object LogDirsCommand {\n                     \"logDirs\" -> logDirInfos.map { case (logDir, logDirInfo) =>\n                         Map(\n                             \"logDir\" -> logDir,\n-                            \"error\" -> logDirInfo.error.exceptionName(),\n+                            \"error\" -> Option(logDirInfo.error).flatMap(ex => Some(ex.getClass.getName)).orNull,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMDgyNA==", "bodyText": "nit: topics is not nullable in the protocol so it should never be null, does it?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452910824", "createdAt": "2020-07-10T15:20:46Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2308,6 +2312,24 @@ void handleFailure(Throwable throwable) {\n         return new DescribeLogDirsResult(new HashMap<>(futures));\n     }\n \n+    private Map<String, LogDirDescription> logDirDescriptions(DescribeLogDirsResponse response) {\n+        HashMap<String, LogDirDescription> result = new HashMap<>(response.data().results().size());\n+        for (DescribeLogDirsResponseData.DescribeLogDirsResult logDirResult : response.data().results()) {\n+            Map<TopicPartition, ReplicaInfo> replicaInfoMap = new HashMap<>();\n+            if (logDirResult.topics() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMjAwOA==", "bodyText": "Not related to your PR but this look weird. It seems that we fail all the futures if an unexpected replica is provided by the broker in the response. I think that we should log a warning when this happen like we do in the other methods (e.g. createTopics). What do you think?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452912008", "createdAt": "2020-07-10T15:22:49Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2356,32 +2378,32 @@ public DescribeReplicaLogDirsResult describeReplicaLogDirs(Collection<TopicParti\n                 @Override\n                 public void handleResponse(AbstractResponse abstractResponse) {\n                     DescribeLogDirsResponse response = (DescribeLogDirsResponse) abstractResponse;\n-                    for (Map.Entry<String, DescribeLogDirsResponse.LogDirInfo> responseEntry: response.logDirInfos().entrySet()) {\n+                    for (Map.Entry<String, LogDirDescription> responseEntry: logDirDescriptions(response).entrySet()) {\n                         String logDir = responseEntry.getKey();\n-                        DescribeLogDirsResponse.LogDirInfo logDirInfo = responseEntry.getValue();\n+                        LogDirDescription logDirInfo = responseEntry.getValue();\n \n                         // No replica info will be provided if the log directory is offline\n-                        if (logDirInfo.error == Errors.KAFKA_STORAGE_ERROR)\n+                        if (logDirInfo.error() instanceof KafkaStorageException)\n                             continue;\n-                        if (logDirInfo.error != Errors.NONE)\n+                        if (logDirInfo.error() != null)\n                             handleFailure(new IllegalStateException(\n-                                \"The error \" + logDirInfo.error + \" for log directory \" + logDir + \" in the response from broker \" + brokerId + \" is illegal\"));\n+                                \"The error \" + logDirInfo.error().getClass().getName() + \" for log directory \" + logDir + \" in the response from broker \" + brokerId + \" is illegal\"));\n \n-                        for (Map.Entry<TopicPartition, DescribeLogDirsResponse.ReplicaInfo> replicaInfoEntry: logDirInfo.replicaInfos.entrySet()) {\n+                        for (Map.Entry<TopicPartition, ReplicaInfo> replicaInfoEntry: logDirInfo.replicaInfos().entrySet()) {\n                             TopicPartition tp = replicaInfoEntry.getKey();\n-                            DescribeLogDirsResponse.ReplicaInfo replicaInfo = replicaInfoEntry.getValue();\n+                            ReplicaInfo replicaInfo = replicaInfoEntry.getValue();\n                             ReplicaLogDirInfo replicaLogDirInfo = replicaDirInfoByPartition.get(tp);\n                             if (replicaLogDirInfo == null) {\n                                 handleFailure(new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzczMw==", "bodyText": "These blocks of assertions are quite hard to read. Can we try to make them more digestable? We could perhaps extract temporary variable to reduce the number of .get(). We could also define an verifyDescription helper that verify a LogDirDescription for instance. It may be worth having dedicated unit tests for the new and the old APIs as well.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452913733", "createdAt": "2020-07-10T15:25:46Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1055,6 +1059,154 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(Collections.singleton(0), descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), descriptions.get(0).get().keySet());\n+            assertNull(descriptions.get(0).get().get(\"/var/data/kafka\").error());\n+            assertEquals(Collections.singleton(tp), descriptions.get(0).get().get(\"/var/data/kafka\").replicaInfos().keySet());\n+            assertEquals(1234567890, descriptions.get(0).get().get(\"/var/data/kafka\").replicaInfos().get(tp).size());\n+            assertEquals(0, descriptions.get(0).get().get(\"/var/data/kafka\").replicaInfos().get(tp).offsetLag());\n+            assertFalse(descriptions.get(0).get().get(\"/var/data/kafka\").replicaInfos().get(tp).isFuture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3ODQ2NQ==", "bodyText": "That's a pity that we have to redefine there classes here. Couldn't we update the test to work with the plain response instead?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r452978465", "createdAt": "2020-07-10T17:31:24Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/DescribeLogDirsRequestTest.scala", "diffHunk": "@@ -46,15 +48,23 @@ class DescribeLogDirsRequestTest extends BaseRequestTest {\n \n     val request = new DescribeLogDirsRequest.Builder(new DescribeLogDirsRequestData().setTopics(null)).build()\n     val response = connectAndReceive[DescribeLogDirsResponse](request, destination = controllerSocketServer)\n-    val logDirInfos = response.logDirInfos()\n+    case class ReplicaInfo(size: Long, offsetLag: Long, isFuture: Boolean)\n+    case class LogDirInfo(error: Errors, replicaInfos: Map[TopicPartition, ReplicaInfo])", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTIzNTc2", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448123576", "createdAt": "2020-07-14T13:48:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo0ODo1OFrOGxUhyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo0ODo1OFrOGxUhyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2OTczOA==", "bodyText": "+1 for the Option way. \ud83d\ude04", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454369738", "createdAt": "2020-07-14T13:48:58Z", "author": {"login": "dongjinleekr"}, "path": "core/src/main/scala/kafka/admin/LogDirsCommand.scala", "diffHunk": "@@ -64,7 +63,7 @@ object LogDirsCommand {\n                     \"logDirs\" -> logDirInfos.map { case (logDir, logDirInfo) =>\n                         Map(\n                             \"logDir\" -> logDir,\n-                            \"error\" -> logDirInfo.error.exceptionName(),\n+                            \"error\" -> Option(logDirInfo.error).map(ex => ex.getClass.getName).orNull,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTU1NDAy", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448155402", "createdAt": "2020-07-14T14:23:04Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMzowNFrOGxWAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMzowNFrOGxWAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDAwNQ==", "bodyText": "How about this? (in consistency with current DescribeLogDirsResponse.LogDirInfo):\nReturns `ApiException` if the log directory is offline or an error occurred. If not, returns null.\n<p><ul>\n<li> KafkaStorageException - The log directory is offline.\n<li> UnknownServerException - The server experienced an unexpected error when processing the request.\n</ul><p>\n\n(Description of UnknownServerException was from Errors.UNKNOWN_SERVER_ERROR)", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454394005", "createdAt": "2020-07-14T14:23:04Z", "author": {"login": "dongjinleekr"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/LogDirDescription.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.ApiException;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * A description of a log directory on a particular broker.\n+ */\n+public class LogDirDescription {\n+    private final Map<TopicPartition, ReplicaInfo> replicaInfos;\n+    private final ApiException error;\n+\n+    public LogDirDescription(ApiException error, Map<TopicPartition, ReplicaInfo> replicaInfos) {\n+        this.error = error;\n+        this.replicaInfos = replicaInfos;\n+    }\n+\n+    /**\n+     * A KafkaStorageException if this log directory is offline,\n+     * possibly some other exception if there were problems describing the log directory\n+     * or null if the directory is online.\n+     */\n+    public ApiException error() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb214ca84c27ec9f691392c12532017d7b5785c", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/dcb214ca84c27ec9f691392c12532017d7b5785c", "committedDate": "2020-07-14T15:18:02Z", "message": "KAFKA-10120: Deprecate and replace DescribeLogDirsResult.all() and .values()\n\nAs per KIP-621. Also added some tests in KafkaAdminClientTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05c63fbd74f313f9ee48e1b96821e60f868c1757", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/05c63fbd74f313f9ee48e1b96821e60f868c1757", "committedDate": "2020-07-14T15:18:02Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2232b7e08b00509505cf36dec1bb83618448f0d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/f2232b7e08b00509505cf36dec1bb83618448f0d", "committedDate": "2020-07-14T15:18:02Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/ba2160ca834c6ebdca26d708500560972b4baebc", "committedDate": "2020-07-14T15:20:57Z", "message": "Review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/ba2160ca834c6ebdca26d708500560972b4baebc", "committedDate": "2020-07-14T15:20:57Z", "message": "Review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjY0ODUx", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448264851", "createdAt": "2020-07-14T16:22:40Z", "commit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyMjo0MVrOGxbTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyMjo0MVrOGxbTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MDc1MQ==", "bodyText": "Is it better to have package-private visibility?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454480751", "createdAt": "2020-07-14T16:22:41Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/LogDirDescription.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.ApiException;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * A description of a log directory on a particular broker.\n+ */\n+public class LogDirDescription {\n+    private final Map<TopicPartition, ReplicaInfo> replicaInfos;\n+    private final ApiException error;\n+\n+    public LogDirDescription(ApiException error, Map<TopicPartition, ReplicaInfo> replicaInfos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjcyODI2", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448272826", "createdAt": "2020-07-14T16:32:13Z", "commit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozMjoxNFrOGxbsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjozMjoxNFrOGxbsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4NzE0NA==", "bodyText": "Does it need comment to describe the replacement? for example\n@deprecated Deprecated Since Kafka 2.7. Use {@link LogDirDescription}.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454487144", "createdAt": "2020-07-14T16:32:14Z", "author": {"login": "chia7712"}, "path": "clients/src/main/java/org/apache/kafka/common/requests/DescribeLogDirsResponse.java", "diffHunk": "@@ -95,6 +76,7 @@ public static DescribeLogDirsResponse parse(ByteBuffer buffer, short version) {\n      * KAFKA_STORAGE_ERROR (56)\n      * UNKNOWN (-1)\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/590d9e57ad0c308b3f851d31a8563f46777aa54d", "committedDate": "2020-07-14T17:41:12Z", "message": "Review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzcwMDc4", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448370078", "createdAt": "2020-07-14T18:43:12Z", "commit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0MzoxMlrOGxglPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxOToxNTo1NlrOGxhsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NzIyOA==", "bodyText": "nit: shall we remove response/?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454567228", "createdAt": "2020-07-14T18:43:12Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2286,13 +2288,15 @@ public DescribeLogDirsResult describeLogDirs(Collection<Integer> brokers, Descri\n                     return new DescribeLogDirsRequest.Builder(new DescribeLogDirsRequestData().setTopics(null));\n                 }\n \n+                @SuppressWarnings(\"deprecation\")\n                 @Override\n                 public void handleResponse(AbstractResponse abstractResponse) {\n                     DescribeLogDirsResponse response = (DescribeLogDirsResponse) abstractResponse;\n-                    if (response.logDirInfos().size() > 0) {\n-                        future.complete(response.logDirInfos());\n+                    Map<String, LogDirDescription> descriptions = logDirDescriptions(response);\n+                    if (descriptions.size() > 0) {\n+                        future.complete(descriptions);\n                     } else {\n-                        // response.logDirInfos() will be empty if and only if the user is not authorized to describe clsuter resource.\n+                        // response/descriptions will be empty if and only if the user is not authorized to describe cluster resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NzgyOQ==", "bodyText": "I suggest to add a unit test to cover this change. I think that the previous behaviour was a bug so it would be great to not reintroduce it in the future.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454567829", "createdAt": "2020-07-14T18:44:19Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2354,32 +2374,31 @@ public DescribeReplicaLogDirsResult describeReplicaLogDirs(Collection<TopicParti\n                 @Override\n                 public void handleResponse(AbstractResponse abstractResponse) {\n                     DescribeLogDirsResponse response = (DescribeLogDirsResponse) abstractResponse;\n-                    for (Map.Entry<String, DescribeLogDirsResponse.LogDirInfo> responseEntry: response.logDirInfos().entrySet()) {\n+                    for (Map.Entry<String, LogDirDescription> responseEntry: logDirDescriptions(response).entrySet()) {\n                         String logDir = responseEntry.getKey();\n-                        DescribeLogDirsResponse.LogDirInfo logDirInfo = responseEntry.getValue();\n+                        LogDirDescription logDirInfo = responseEntry.getValue();\n \n                         // No replica info will be provided if the log directory is offline\n-                        if (logDirInfo.error == Errors.KAFKA_STORAGE_ERROR)\n+                        if (logDirInfo.error() instanceof KafkaStorageException)\n                             continue;\n-                        if (logDirInfo.error != Errors.NONE)\n+                        if (logDirInfo.error() != null)\n                             handleFailure(new IllegalStateException(\n-                                \"The error \" + logDirInfo.error + \" for log directory \" + logDir + \" in the response from broker \" + brokerId + \" is illegal\"));\n+                                \"The error \" + logDirInfo.error().getClass().getName() + \" for log directory \" + logDir + \" in the response from broker \" + brokerId + \" is illegal\"));\n \n-                        for (Map.Entry<TopicPartition, DescribeLogDirsResponse.ReplicaInfo> replicaInfoEntry: logDirInfo.replicaInfos.entrySet()) {\n+                        for (Map.Entry<TopicPartition, ReplicaInfo> replicaInfoEntry: logDirInfo.replicaInfos().entrySet()) {\n                             TopicPartition tp = replicaInfoEntry.getKey();\n-                            DescribeLogDirsResponse.ReplicaInfo replicaInfo = replicaInfoEntry.getValue();\n+                            ReplicaInfo replicaInfo = replicaInfoEntry.getValue();\n                             ReplicaLogDirInfo replicaLogDirInfo = replicaDirInfoByPartition.get(tp);\n                             if (replicaLogDirInfo == null) {\n-                                handleFailure(new IllegalStateException(\n-                                    \"The partition \" + tp + \" in the response from broker \" + brokerId + \" is not in the request\"));\n-                            } else if (replicaInfo.isFuture) {\n+                                log.warn(\"Server response from broker {} mentioned unknown partition {}\", brokerId, tp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2OTAwMw==", "bodyText": "That's great point. At the moment, I think that we are not consistent about this. Some are package private and some are not. The advantage of keeping it public is that it allows to use the class in unit tests which resides in other packages.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454569003", "createdAt": "2020-07-14T18:46:17Z", "author": {"login": "dajac"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/LogDirDescription.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.ApiException;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * A description of a log directory on a particular broker.\n+ */\n+public class LogDirDescription {\n+    private final Map<TopicPartition, ReplicaInfo> replicaInfos;\n+    private final ApiException error;\n+\n+    public LogDirDescription(ApiException error, Map<TopicPartition, ReplicaInfo> replicaInfos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MDc1MQ=="}, "originalCommit": {"oid": "ba2160ca834c6ebdca26d708500560972b4baebc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MjAwOA==", "bodyText": "nit: What about extracting the construction in a small helper method prepareDescribeLogDirsResponse that create a response for one LogDir and TopicPartition? It seems that the same block of code is used in many tests.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454572008", "createdAt": "2020-07-14T18:51:34Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,205 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NTkyNg==", "bodyText": "nit: In some of the other tests, you have an empty line after calling the method of the admin client. Shall we add one everywhere in order to be consistent? I personally like to have one before and after to separate blocks of code. I leave this up to you.", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454575926", "createdAt": "2020-07-14T18:58:34Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,205 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3OTYxNA==", "bodyText": "nit: You can reuse brokers here. Would it make sense to allow extract the other constants in local variables?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454579614", "createdAt": "2020-07-14T19:05:22Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,205 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(Collections.singleton(0), descriptions.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MzkyOQ==", "bodyText": "This block of assertions is used multiple times. Would it make sense to extract it in a helper method, say assertDescriptions, that verifies a descriptions map contains the information about a single log dir/topic partition?\nSomething like assertDescriptionContains(descriptionsMap, logDir, tp, size, offsetLag, isFuture).", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454583929", "createdAt": "2020-07-14T19:13:23Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,205 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(Collections.singleton(0), descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            Map<String, LogDirDescription> descriptionsMap = descriptions.get(0).get();\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), descriptionsMap.keySet());\n+            assertNull(descriptionsMap.get(\"/var/data/kafka\").error());\n+            Map<TopicPartition, ReplicaInfo> descriptionsReplicaInfos = descriptionsMap.get(\"/var/data/kafka\").replicaInfos();\n+            assertEquals(Collections.singleton(tp), descriptionsReplicaInfos.keySet());\n+            assertEquals(1234567890, descriptionsReplicaInfos.get(tp).size());\n+            assertEquals(0, descriptionsReplicaInfos.get(tp).offsetLag());\n+            assertFalse(descriptionsReplicaInfos.get(tp).isFuture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4NTM3NQ==", "bodyText": "This is not due to your PR but shall we add a unit test which uses multiple brokers?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r454585375", "createdAt": "2020-07-14T19:15:56Z", "author": {"login": "dajac"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,205 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(Collections.singleton(0), descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            Map<String, LogDirDescription> descriptionsMap = descriptions.get(0).get();\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), descriptionsMap.keySet());\n+            assertNull(descriptionsMap.get(\"/var/data/kafka\").error());\n+            Map<TopicPartition, ReplicaInfo> descriptionsReplicaInfos = descriptionsMap.get(\"/var/data/kafka\").replicaInfos();\n+            assertEquals(Collections.singleton(tp), descriptionsReplicaInfos.keySet());\n+            assertEquals(1234567890, descriptionsReplicaInfos.get(tp).size());\n+            assertEquals(0, descriptionsReplicaInfos.get(tp).offsetLag());\n+            assertFalse(descriptionsReplicaInfos.get(tp).isFuture());\n+\n+            Map<Integer, Map<String, LogDirDescription>> allDescriptions = result.allDescriptions().get();\n+            assertEquals(Collections.singleton(0), allDescriptions.keySet());\n+            assertNotNull(allDescriptions.get(0));\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), allDescriptions.get(0).keySet());\n+            assertNull(allDescriptions.get(0).get(\"/var/data/kafka\").error());\n+            Map<TopicPartition, ReplicaInfo> allDescriptionsReplicInfos = allDescriptions.get(0).get(\"/var/data/kafka\").replicaInfos();\n+            assertEquals(Collections.singleton(tp), allDescriptionsReplicInfos.keySet());\n+            assertEquals(1234567890, allDescriptionsReplicInfos.get(tp).size());\n+            assertEquals(0, allDescriptionsReplicInfos.get(tp).offsetLag());\n+            assertFalse(allDescriptionsReplicInfos.get(tp).isFuture());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testDescribeLogDirsDeprecated() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.NONE.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsTopic()\n+                                    .setName(tp.topic())\n+                                    .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                                            .setPartitionIndex(tp.partition())\n+                                            .setPartitionSize(1234567890)\n+                                            .setIsFutureKey(false)\n+                                            .setOffsetLag(0)))))\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+\n+            Map<Integer, KafkaFuture<Map<String, DescribeLogDirsResponse.LogDirInfo>>> deprecatedValues = result.values();\n+            assertEquals(Collections.singleton(0), deprecatedValues.keySet());\n+            assertNotNull(deprecatedValues.get(0));\n+            Map<String, DescribeLogDirsResponse.LogDirInfo> valuesMap = deprecatedValues.get(0).get();\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), valuesMap.keySet());\n+            assertEquals(Errors.NONE, valuesMap.get(\"/var/data/kafka\").error);\n+            Map<TopicPartition, DescribeLogDirsResponse.ReplicaInfo> valuesReplicaInfos =\n+                    valuesMap.get(\"/var/data/kafka\").replicaInfos;\n+            assertEquals(Collections.singleton(tp), valuesReplicaInfos.keySet());\n+            assertEquals(1234567890, valuesReplicaInfos.get(tp).size);\n+            assertEquals(0, valuesReplicaInfos.get(tp).offsetLag);\n+            assertFalse(valuesReplicaInfos.get(tp).isFuture);\n+\n+            Map<Integer, Map<String, DescribeLogDirsResponse.LogDirInfo>> deprecatedAll = result.all().get();\n+            assertEquals(Collections.singleton(0), deprecatedAll.keySet());\n+            assertNotNull(deprecatedAll.get(0));\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), deprecatedAll.get(0).keySet());\n+            assertEquals(Errors.NONE, deprecatedAll.get(0).get(\"/var/data/kafka\").error);\n+            Map<TopicPartition, DescribeLogDirsResponse.ReplicaInfo> allReplicaInfos =\n+                    deprecatedAll.get(0).get(\"/var/data/kafka\").replicaInfos;\n+            assertEquals(Collections.singleton(tp), allReplicaInfos.keySet());\n+            assertEquals(1234567890, allReplicaInfos.get(tp).size);\n+            assertEquals(0, allReplicaInfos.get(tp).offsetLag);\n+            assertFalse(allReplicaInfos.get(tp).isFuture);\n+        }\n+    }\n+\n+    @Test\n+    public void testDescribeLogDirsOfflineDir() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(asList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.KAFKA_STORAGE_ERROR.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(emptyList())\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(Collections.singleton(0), descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            Map<String, LogDirDescription> descriptionsMap = descriptions.get(0).get();\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), descriptionsMap.keySet());\n+            assertEquals(KafkaStorageException.class, descriptionsMap.get(\"/var/data/kafka\").error().getClass());\n+            assertEquals(emptySet(), descriptionsMap.get(\"/var/data/kafka\").replicaInfos().keySet());\n+\n+            Map<Integer, Map<String, LogDirDescription>> allDescriptions = result.allDescriptions().get();\n+            assertEquals(Collections.singleton(0), allDescriptions.keySet());\n+            Map<String, LogDirDescription> allMap = allDescriptions.get(0);\n+            assertNotNull(allMap);\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), allMap.keySet());\n+            assertEquals(KafkaStorageException.class, allMap.get(\"/var/data/kafka\").error().getClass());\n+            assertEquals(emptySet(), allMap.get(\"/var/data/kafka\").replicaInfos().keySet());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testDescribeLogDirsOfflineDirDeprecated() throws ExecutionException, InterruptedException {\n+        List<Integer> brokers = singletonList(0);\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(new DescribeLogDirsResponse(\n+                    new DescribeLogDirsResponseData().setResults(asList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                            .setErrorCode(Errors.KAFKA_STORAGE_ERROR.code())\n+                            .setLogDir(\"/var/data/kafka\")\n+                            .setTopics(emptyList())\n+                    ))), env.cluster().nodeById(0));\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+\n+            Map<Integer, KafkaFuture<Map<String, DescribeLogDirsResponse.LogDirInfo>>> deprecatedValues = result.values();\n+            assertEquals(Collections.singleton(0), deprecatedValues.keySet());\n+            assertNotNull(deprecatedValues.get(0));\n+            Map<String, DescribeLogDirsResponse.LogDirInfo> valuesMap = deprecatedValues.get(0).get();\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), valuesMap.keySet());\n+            assertEquals(Errors.KAFKA_STORAGE_ERROR, valuesMap.get(\"/var/data/kafka\").error);\n+            assertEquals(emptySet(), valuesMap.get(\"/var/data/kafka\").replicaInfos.keySet());\n+\n+            Map<Integer, Map<String, DescribeLogDirsResponse.LogDirInfo>> deprecatedAll = result.all().get();\n+            assertEquals(Collections.singleton(0), deprecatedAll.keySet());\n+            Map<String, DescribeLogDirsResponse.LogDirInfo> allMap = deprecatedAll.get(0);\n+            assertNotNull(allMap);\n+            assertEquals(Collections.singleton(\"/var/data/kafka\"), allMap.keySet());\n+            assertEquals(Errors.KAFKA_STORAGE_ERROR, allMap.get(\"/var/data/kafka\").error);\n+            assertEquals(emptySet(), allMap.get(\"/var/data/kafka\").replicaInfos.keySet());\n+        }\n+    }\n+\n+    @Test\n+    public void testDescribeReplicaLogDirs() throws ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "590d9e57ad0c308b3f851d31a8563f46777aa54d"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5224e02573157c183e7c5d5c9609b9592d5763", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/af5224e02573157c183e7c5d5c9609b9592d5763", "committedDate": "2020-07-15T09:35:44Z", "message": "Code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cad6e6347ea76177446c3423e04aec39fd49d36b", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/cad6e6347ea76177446c3423e04aec39fd49d36b", "committedDate": "2020-07-15T10:08:06Z", "message": "Review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTExMzcy", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448911372", "createdAt": "2020-07-15T12:39:27Z", "commit": {"oid": "cad6e6347ea76177446c3423e04aec39fd49d36b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozOToyN1rOGx8KqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjozOToyN1rOGx8KqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxOTE3Ng==", "bodyText": "For consistency with the other Javadoc it seems like we should use a single <p> only when between the paragraphs. Please remove the <p> tags. (Sorry, I was also confused.)", "url": "https://github.com/apache/kafka/pull/9007#discussion_r455019176", "createdAt": "2020-07-15T12:39:27Z", "author": {"login": "dongjinleekr"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/LogDirDescription.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.admin;\n+\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.ApiException;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.unmodifiableMap;\n+\n+/**\n+ * A description of a log directory on a particular broker.\n+ */\n+public class LogDirDescription {\n+    private final Map<TopicPartition, ReplicaInfo> replicaInfos;\n+    private final ApiException error;\n+\n+    public LogDirDescription(ApiException error, Map<TopicPartition, ReplicaInfo> replicaInfos) {\n+        this.error = error;\n+        this.replicaInfos = replicaInfos;\n+    }\n+\n+    /**\n+     * A KafkaStorageException if this log directory is offline,\n+     * possibly some other exception if there were problems describing the log directory\n+     * or null if the directory is online.\n+     */\n+    public ApiException error() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDAwNQ=="}, "originalCommit": null, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb3f1201e0803300c9d4d5a2aed949069761dd8", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/7fb3f1201e0803300c9d4d5a2aed949069761dd8", "committedDate": "2020-07-15T12:46:34Z", "message": "Review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/637e7dbe9d888f41d9cbe9ff97de179eab5584a2", "committedDate": "2020-07-15T13:50:39Z", "message": "Review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTc4NTIz", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-448978523", "createdAt": "2020-07-15T13:56:04Z", "commit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODI0NDg0", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-449824484", "createdAt": "2020-07-16T13:03:02Z", "commit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODM0Mzkz", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-449834393", "createdAt": "2020-07-16T13:14:48Z", "commit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MjU2OTY0", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-454256964", "createdAt": "2020-07-23T15:34:05Z", "commit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozNDowNVrOG2QI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjowNTowOVrOG2RbLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDczMw==", "bodyText": "This can be static. Also should we keep it in DescribeLogDirsResponse?", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459540733", "createdAt": "2020-07-23T15:34:05Z", "author": {"login": "mimaison"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2306,6 +2310,22 @@ void handleFailure(Throwable throwable) {\n         return new DescribeLogDirsResult(new HashMap<>(futures));\n     }\n \n+    private Map<String, LogDirDescription> logDirDescriptions(DescribeLogDirsResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDk0NA==", "bodyText": "The left side can be Map", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459540944", "createdAt": "2020-07-23T15:34:24Z", "author": {"login": "mimaison"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -2306,6 +2310,22 @@ void handleFailure(Throwable throwable) {\n         return new DescribeLogDirsResult(new HashMap<>(futures));\n     }\n \n+    private Map<String, LogDirDescription> logDirDescriptions(DescribeLogDirsResponse response) {\n+        HashMap<String, LogDirDescription> result = new HashMap<>(response.data().results().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODA3Mw==", "bodyText": "This can be static", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459558073", "createdAt": "2020-07-23T15:59:23Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,263 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir, TopicPartition tp, long partitionSize, long offsetLag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODE1MA==", "bodyText": "This can be static", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459558150", "createdAt": "2020-07-23T15:59:33Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,263 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir, TopicPartition tp, long partitionSize, long offsetLag) {\n+        return prepareDescribeLogDirsResponse(error, logDir,\n+                prepareDescribeLogDirsTopics(partitionSize, offsetLag, tp.topic(), tp.partition(), false));\n+    }\n+\n+    private List<DescribeLogDirsTopic> prepareDescribeLogDirsTopics(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODY2OQ==", "bodyText": "This can be static", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459558669", "createdAt": "2020-07-23T16:00:17Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,263 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir, TopicPartition tp, long partitionSize, long offsetLag) {\n+        return prepareDescribeLogDirsResponse(error, logDir,\n+                prepareDescribeLogDirsTopics(partitionSize, offsetLag, tp.topic(), tp.partition(), false));\n+    }\n+\n+    private List<DescribeLogDirsTopic> prepareDescribeLogDirsTopics(\n+            long partitionSize, long offsetLag, String topic, int partition, boolean isFuture) {\n+        return singletonList(new DescribeLogDirsTopic()\n+                .setName(topic)\n+                .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                        .setPartitionIndex(partition)\n+                        .setPartitionSize(partitionSize)\n+                        .setIsFutureKey(isFuture)\n+                        .setOffsetLag(offsetLag))));\n+    }\n+\n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTY4OQ==", "bodyText": "This can be static", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459561689", "createdAt": "2020-07-23T16:04:57Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,263 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir, TopicPartition tp, long partitionSize, long offsetLag) {\n+        return prepareDescribeLogDirsResponse(error, logDir,\n+                prepareDescribeLogDirsTopics(partitionSize, offsetLag, tp.topic(), tp.partition(), false));\n+    }\n+\n+    private List<DescribeLogDirsTopic> prepareDescribeLogDirsTopics(\n+            long partitionSize, long offsetLag, String topic, int partition, boolean isFuture) {\n+        return singletonList(new DescribeLogDirsTopic()\n+                .setName(topic)\n+                .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                        .setPartitionIndex(partition)\n+                        .setPartitionSize(partitionSize)\n+                        .setIsFutureKey(isFuture)\n+                        .setOffsetLag(offsetLag))));\n+    }\n+\n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir,\n+                                                                   List<DescribeLogDirsTopic> topics) {\n+        return new DescribeLogDirsResponse(\n+                new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                        .setErrorCode(error.code())\n+                        .setLogDir(logDir)\n+                        .setTopics(topics)\n+                )));\n+    }\n+\n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        Set<Integer> brokers = Collections.singleton(0);\n+        String logDir = \"/var/data/kafka\";\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+        long partitionSize = 1234567890;\n+        long offsetLag = 24;\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(\n+                    prepareDescribeLogDirsResponse(Errors.NONE, logDir, tp, partitionSize, offsetLag),\n+                    env.cluster().nodeById(0));\n+\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(brokers, descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            assertDescriptionContains(descriptions.get(0).get(), logDir, tp, partitionSize, offsetLag);\n+\n+            Map<Integer, Map<String, LogDirDescription>> allDescriptions = result.allDescriptions().get();\n+            assertEquals(brokers, allDescriptions.keySet());\n+            assertDescriptionContains(allDescriptions.get(0), logDir, tp, partitionSize, offsetLag);\n+        }\n+    }\n+\n+    private void assertDescriptionContains(Map<String, LogDirDescription> descriptionsMap, String logDir,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MTc3Mg==", "bodyText": "This can be static", "url": "https://github.com/apache/kafka/pull/9007#discussion_r459561772", "createdAt": "2020-07-23T16:05:09Z", "author": {"login": "mimaison"}, "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -1057,6 +1059,263 @@ public void testDescribeConfigsUnrequested() throws Exception {\n         }\n     }\n \n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir, TopicPartition tp, long partitionSize, long offsetLag) {\n+        return prepareDescribeLogDirsResponse(error, logDir,\n+                prepareDescribeLogDirsTopics(partitionSize, offsetLag, tp.topic(), tp.partition(), false));\n+    }\n+\n+    private List<DescribeLogDirsTopic> prepareDescribeLogDirsTopics(\n+            long partitionSize, long offsetLag, String topic, int partition, boolean isFuture) {\n+        return singletonList(new DescribeLogDirsTopic()\n+                .setName(topic)\n+                .setPartitions(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsPartition()\n+                        .setPartitionIndex(partition)\n+                        .setPartitionSize(partitionSize)\n+                        .setIsFutureKey(isFuture)\n+                        .setOffsetLag(offsetLag))));\n+    }\n+\n+    private DescribeLogDirsResponse prepareDescribeLogDirsResponse(Errors error, String logDir,\n+                                                                   List<DescribeLogDirsTopic> topics) {\n+        return new DescribeLogDirsResponse(\n+                new DescribeLogDirsResponseData().setResults(singletonList(new DescribeLogDirsResponseData.DescribeLogDirsResult()\n+                        .setErrorCode(error.code())\n+                        .setLogDir(logDir)\n+                        .setTopics(topics)\n+                )));\n+    }\n+\n+    @Test\n+    public void testDescribeLogDirs() throws ExecutionException, InterruptedException {\n+        Set<Integer> brokers = Collections.singleton(0);\n+        String logDir = \"/var/data/kafka\";\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+        long partitionSize = 1234567890;\n+        long offsetLag = 24;\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(\n+                    prepareDescribeLogDirsResponse(Errors.NONE, logDir, tp, partitionSize, offsetLag),\n+                    env.cluster().nodeById(0));\n+\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+\n+            Map<Integer, KafkaFuture<Map<String, LogDirDescription>>> descriptions = result.descriptions();\n+            assertEquals(brokers, descriptions.keySet());\n+            assertNotNull(descriptions.get(0));\n+            assertDescriptionContains(descriptions.get(0).get(), logDir, tp, partitionSize, offsetLag);\n+\n+            Map<Integer, Map<String, LogDirDescription>> allDescriptions = result.allDescriptions().get();\n+            assertEquals(brokers, allDescriptions.keySet());\n+            assertDescriptionContains(allDescriptions.get(0), logDir, tp, partitionSize, offsetLag);\n+        }\n+    }\n+\n+    private void assertDescriptionContains(Map<String, LogDirDescription> descriptionsMap, String logDir,\n+                                           TopicPartition tp, long partitionSize, long offsetLag) {\n+        assertNotNull(descriptionsMap);\n+        assertEquals(Collections.singleton(logDir), descriptionsMap.keySet());\n+        assertNull(descriptionsMap.get(logDir).error());\n+        Map<TopicPartition, ReplicaInfo> descriptionsReplicaInfos = descriptionsMap.get(logDir).replicaInfos();\n+        assertEquals(Collections.singleton(tp), descriptionsReplicaInfos.keySet());\n+        assertEquals(partitionSize, descriptionsReplicaInfos.get(tp).size());\n+        assertEquals(offsetLag, descriptionsReplicaInfos.get(tp).offsetLag());\n+        assertFalse(descriptionsReplicaInfos.get(tp).isFuture());\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testDescribeLogDirsDeprecated() throws ExecutionException, InterruptedException {\n+        Set<Integer> brokers = Collections.singleton(0);\n+        TopicPartition tp = new TopicPartition(\"topic\", 12);\n+        String logDir = \"/var/data/kafka\";\n+        Errors error = Errors.NONE;\n+        int offsetLag = 24;\n+        long partitionSize = 1234567890;\n+\n+        try (AdminClientUnitTestEnv env = mockClientEnv()) {\n+            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n+            env.kafkaClient().prepareResponseFrom(\n+                    prepareDescribeLogDirsResponse(error, logDir, tp, partitionSize, offsetLag),\n+                    env.cluster().nodeById(0));\n+\n+            DescribeLogDirsResult result = env.adminClient().describeLogDirs(brokers);\n+\n+            Map<Integer, KafkaFuture<Map<String, DescribeLogDirsResponse.LogDirInfo>>> deprecatedValues = result.values();\n+            assertEquals(brokers, deprecatedValues.keySet());\n+            assertNotNull(deprecatedValues.get(0));\n+            assertDescriptionContains(deprecatedValues.get(0).get(), logDir, tp, error, offsetLag, partitionSize);\n+\n+            Map<Integer, Map<String, DescribeLogDirsResponse.LogDirInfo>> deprecatedAll = result.all().get();\n+            assertEquals(brokers, deprecatedAll.keySet());\n+            assertDescriptionContains(deprecatedAll.get(0), logDir, tp, error, offsetLag, partitionSize);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private void assertDescriptionContains(Map<String, DescribeLogDirsResponse.LogDirInfo> descriptionsMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "637e7dbe9d888f41d9cbe9ff97de179eab5584a2"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d17d02f31f30ed64acc8609e0339cb9883a19316", "author": {"user": {"login": "tombentley", "name": "Tom Bentley"}}, "url": "https://github.com/apache/kafka/commit/d17d02f31f30ed64acc8609e0339cb9883a19316", "committedDate": "2020-07-28T07:41:11Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjM2NDAx", "url": "https://github.com/apache/kafka/pull/9007#pullrequestreview-458236401", "createdAt": "2020-07-30T09:27:24Z", "commit": {"oid": "d17d02f31f30ed64acc8609e0339cb9883a19316"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1257, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}