{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDA5Njkx", "number": 8963, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyNjo0N1rOEK66FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOToxNTo0MFrOELZuBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg2MzU2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyNjo0N1rOGsPVeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0Nzo0MVrOGsd7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MTc4NA==", "bodyText": "Would it speed up the test to choose a smaller number here?", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449041784", "createdAt": "2020-07-02T14:26:47Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(\n+                            Duration.ofSeconds(5),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMzA0OA==", "bodyText": "I suppose it would. Does 100ms seem reasonable?", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449223048", "createdAt": "2020-07-02T19:23:04Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(\n+                            Duration.ofSeconds(5),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MTc4NA=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MDg3NA==", "bodyText": "Yeah, that's what I was thinking", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449280874", "createdAt": "2020-07-02T21:47:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(\n+                            Duration.ofSeconds(5),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MTc4NA=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg3NjcxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyOTo0MFrOGsPdxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTo0ODowNlrOGsd77Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzkwOQ==", "bodyText": "There should never be multiple requests, right? If there were, a second request might arrive between 168 and 169, violating the desired property. In that case, we should grab a lock instead. As long as there's only one requesting thread, and it always waits for the commit right after requesting, then we should be good.", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449043909", "createdAt": "2020-07-02T14:29:40Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -147,6 +152,25 @@\n     private final AtomicInteger commitCounterClient2 = new AtomicInteger(-1);\n     private final AtomicInteger commitRequested = new AtomicInteger(0);\n \n+    private final AtomicBoolean requestCommit = new AtomicBoolean(false);\n+    private static class CommitPunctuator implements Punctuator {\n+        final ProcessorContext context;\n+        final AtomicBoolean requestCommit;\n+\n+        public CommitPunctuator(final ProcessorContext context, final AtomicBoolean requestCommit) {\n+            this.context = context;\n+            this.requestCommit = requestCommit;\n+        }\n+\n+        @Override\n+        public void punctuate(final long timestamp) {\n+            if (requestCommit.get()) {\n+                context.commit();\n+                requestCommit.set(false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMDQ0Nw==", "bodyText": "This is only meant to be used when there's a single thread (and single instance running). I just wanted to put in a quick fix for now--I'll leave a comment to warn our future selves that we'll have to tighten this up if we want to extend the test or use it elsewhere with multiple threads/instances", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449220447", "createdAt": "2020-07-02T19:17:13Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -147,6 +152,25 @@\n     private final AtomicInteger commitCounterClient2 = new AtomicInteger(-1);\n     private final AtomicInteger commitRequested = new AtomicInteger(0);\n \n+    private final AtomicBoolean requestCommit = new AtomicBoolean(false);\n+    private static class CommitPunctuator implements Punctuator {\n+        final ProcessorContext context;\n+        final AtomicBoolean requestCommit;\n+\n+        public CommitPunctuator(final ProcessorContext context, final AtomicBoolean requestCommit) {\n+            this.context = context;\n+            this.requestCommit = requestCommit;\n+        }\n+\n+        @Override\n+        public void punctuate(final long timestamp) {\n+            if (requestCommit.get()) {\n+                context.commit();\n+                requestCommit.set(false);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzkwOQ=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MTAwNQ==", "bodyText": "sounds good", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449281005", "createdAt": "2020-07-02T21:48:06Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -147,6 +152,25 @@\n     private final AtomicInteger commitCounterClient2 = new AtomicInteger(-1);\n     private final AtomicInteger commitRequested = new AtomicInteger(0);\n \n+    private final AtomicBoolean requestCommit = new AtomicBoolean(false);\n+    private static class CommitPunctuator implements Punctuator {\n+        final ProcessorContext context;\n+        final AtomicBoolean requestCommit;\n+\n+        public CommitPunctuator(final ProcessorContext context, final AtomicBoolean requestCommit) {\n+            this.context = context;\n+            this.requestCommit = requestCommit;\n+        }\n+\n+        @Override\n+        public void punctuate(final long timestamp) {\n+            if (requestCommit.get()) {\n+                context.commit();\n+                requestCommit.set(false);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MzkwOQ=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg4MzczOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDozMTowNVrOGsPiBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOToxNDo1MFrOGs9gQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NDk5OQ==", "bodyText": "There's going to be a separate punctuator per task, right? Does the test account for this?", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449044999", "createdAt": "2020-07-02T14:31:05Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxOTYyMQ==", "bodyText": "Sort of; with eos-beta when you need to commit one task, you need to commit all of them, so requesting a commit at all should be sufficient. It's kind of a subtle point, but I think it's actually preferable to just request a commit on one task so this test can also verify that we commit all tasks together", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449219621", "createdAt": "2020-07-02T19:15:25Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NDk5OQ=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4MjMzNA==", "bodyText": "Ok, I was thinking more along the lines that we have just one requestCommit instance while we would have multiple punctuator instances all using it. It looked like a bug, but it seems like it'll be fine.", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449282334", "createdAt": "2020-07-02T21:52:19Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NDk5OQ=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODIxMQ==", "bodyText": "In this test we would have multiple punctuator indeed but they would be executed by a single thread sequentially so that's fine.", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449798211", "createdAt": "2020-07-04T19:14:50Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -837,6 +866,11 @@ public void init(final ProcessorContext context) {\n                             crash = errorInjectedClient2;\n                             sharedCommit = commitCounterClient2;\n                         }\n+                        punctuator = context.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NDk5OQ=="}, "originalCommit": {"oid": "4186531247e56862f0f74ed002a995e77b7eff99"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzkxMTcyOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOToxNTo0MFrOGs9gkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOToxNTo0MFrOGs9gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5ODI5MQ==", "bodyText": "Makes sense to me.", "url": "https://github.com/apache/kafka/pull/8963#discussion_r449798291", "createdAt": "2020-07-04T19:15:40Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java", "diffHunk": "@@ -1273,7 +1273,7 @@ public void prepareForRebalance() {\n          */\n         public void waitForNextStableAssignment(final long maxWaitMs) throws InterruptedException {\n             waitForCondition(\n-                () -> nextExpectedNumStableAssignments == numStableAssignments(),\n+                () -> numStableAssignments() >= nextExpectedNumStableAssignments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4b8c635c2887902f405bcfbb6e252678700290"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2330, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}