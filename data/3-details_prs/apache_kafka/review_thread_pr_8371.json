{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDkwOTA1", "number": 8371, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1MDozOVrODtuCTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDowMTo0OFrODvJG8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY2NzY2OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1MDozOVrOF_T7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1MDozOVrOF_T7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzMTE5OQ==", "bodyText": "Bummer that Stream.count forces us to round-trip through a long, but whatever.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r401931199", "createdAt": "2020-04-01T21:50:39Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -762,6 +762,9 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n             storeProviders.add(new StreamThreadStateStoreProvider(threads[i], internalTopologyBuilder));\n         }\n \n+        ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, (metricsConfig, now) ->\n+            Math.toIntExact(Arrays.stream(threads).filter(thread -> thread.state().isAlive()).count()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY3NTg5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1MzoyNVrOF_UAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1MzoyNVrOF_UAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzMjQ4Ng==", "bodyText": "Since StreamThreads have a number of states that people are familiar with watching, it might be worth being specific about what \"alive\" means. In particular, it seems like many will wonder if this just means \"running\", which it does not.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r401932486", "createdAt": "2020-04-01T21:53:25Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java", "diffHunk": "@@ -58,6 +60,8 @@ private ClientMetrics() {}\n     private static final String TOPOLOGY_DESCRIPTION_DESCRIPTION =\n         \"The description of the topology executed in the Kafka Streams client\";\n     private static final String STATE_DESCRIPTION = \"The state of the Kafka Streams client\";\n+    private static final String ALIVE_STREAM_THREADS_DESCRIPTION = \"The number of alive stream threads\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY4NTQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1Njo0MVrOF_UGdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1Njo0MVrOF_UGdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzMzk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PROCESS_MAX_RECORDS_DESCRIPTION = \"The maximum number of records polled  within an iteration\";\n          \n          \n            \n                private static final String PROCESS_MAX_RECORDS_DESCRIPTION = \"The maximum number of records processed within an iteration\";", "url": "https://github.com/apache/kafka/pull/8371#discussion_r401933942", "createdAt": "2020-04-01T21:56:41Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -64,11 +65,15 @@ private ThreadMetrics() {}\n     private static final String POLL_RATE_DESCRIPTION = RATE_DESCRIPTION + POLL_DESCRIPTION;\n     private static final String POLL_AVG_LATENCY_DESCRIPTION = \"The average poll latency\";\n     private static final String POLL_MAX_LATENCY_DESCRIPTION = \"The maximum poll latency\";\n+    private static final String POLL_AVG_RECORDS_DESCRIPTION = \"The average number of records polled within an iteration\";\n+    private static final String POLL_MAX_RECORDS_DESCRIPTION = \"The maximum number of records polled within an iteration\";\n     private static final String PROCESS_DESCRIPTION = \"calls to process\";\n     private static final String PROCESS_TOTAL_DESCRIPTION = TOTAL_DESCRIPTION + PROCESS_DESCRIPTION;\n     private static final String PROCESS_RATE_DESCRIPTION = RATE_DESCRIPTION + PROCESS_DESCRIPTION;\n     private static final String PROCESS_AVG_LATENCY_DESCRIPTION = \"The average process latency\";\n     private static final String PROCESS_MAX_LATENCY_DESCRIPTION = \"The maximum process latency\";\n+    private static final String PROCESS_AVG_RECORDS_DESCRIPTION = \"The average number of records processed  within an iteration\";\n+    private static final String PROCESS_MAX_RECORDS_DESCRIPTION = \"The maximum number of records polled  within an iteration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjY4NjA4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1Njo1M1rOF_UG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTo1Njo1M1rOF_UG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzNDAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PROCESS_AVG_RECORDS_DESCRIPTION = \"The average number of records processed  within an iteration\";\n          \n          \n            \n                private static final String PROCESS_AVG_RECORDS_DESCRIPTION = \"The average number of records processed within an iteration\";", "url": "https://github.com/apache/kafka/pull/8371#discussion_r401934033", "createdAt": "2020-04-01T21:56:53Z", "author": {"login": "vvcephei"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -64,11 +65,15 @@ private ThreadMetrics() {}\n     private static final String POLL_RATE_DESCRIPTION = RATE_DESCRIPTION + POLL_DESCRIPTION;\n     private static final String POLL_AVG_LATENCY_DESCRIPTION = \"The average poll latency\";\n     private static final String POLL_MAX_LATENCY_DESCRIPTION = \"The maximum poll latency\";\n+    private static final String POLL_AVG_RECORDS_DESCRIPTION = \"The average number of records polled within an iteration\";\n+    private static final String POLL_MAX_RECORDS_DESCRIPTION = \"The maximum number of records polled within an iteration\";\n     private static final String PROCESS_DESCRIPTION = \"calls to process\";\n     private static final String PROCESS_TOTAL_DESCRIPTION = TOTAL_DESCRIPTION + PROCESS_DESCRIPTION;\n     private static final String PROCESS_RATE_DESCRIPTION = RATE_DESCRIPTION + PROCESS_DESCRIPTION;\n     private static final String PROCESS_AVG_LATENCY_DESCRIPTION = \"The average process latency\";\n     private static final String PROCESS_MAX_LATENCY_DESCRIPTION = \"The maximum process latency\";\n+    private static final String PROCESS_AVG_RECORDS_DESCRIPTION = \"The average number of records processed  within an iteration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDEzNjQ4OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1NjoyNlrOF_hppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMDowNVrOGAA8yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NTk0MQ==", "bodyText": "req: Please add unit tests to ClientMetricsTest for this methods.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402155941", "createdAt": "2020-04-02T08:56:26Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java", "diffHunk": "@@ -113,4 +117,25 @@ public static void addStateMetric(final StreamsMetricsImpl streamsMetrics,\n             stateProvider\n         );\n     }\n+\n+    public static void addNumAliveStreamThreadMetric(final StreamsMetricsImpl streamsMetrics,\n+                                                     final Gauge<Integer> stateProvider) {\n+        streamsMetrics.addClientLevelMutableMetric(\n+            ALIVE_STREAM_THREADS,\n+            ALIVE_STREAM_THREADS_DESCRIPTION,\n+            RecordingLevel.INFO,\n+            stateProvider\n+        );\n+    }\n+\n+    public static void addNumAliveCleanupThreadMetric(final StreamsMetricsImpl streamsMetrics,\n+                                                      final Gauge<Integer> stateProvider) {\n+        streamsMetrics.addClientLevelMutableMetric(\n+            ALIVE_CLEANUP_THREADS,\n+            ALIVE_CLEANUP_THREADS_DESCRIPTION,\n+            RecordingLevel.INFO,\n+            stateProvider\n+        );\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2ODc0Ng==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402668746", "createdAt": "2020-04-03T00:20:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/internals/metrics/ClientMetrics.java", "diffHunk": "@@ -113,4 +117,25 @@ public static void addStateMetric(final StreamsMetricsImpl streamsMetrics,\n             stateProvider\n         );\n     }\n+\n+    public static void addNumAliveStreamThreadMetric(final StreamsMetricsImpl streamsMetrics,\n+                                                     final Gauge<Integer> stateProvider) {\n+        streamsMetrics.addClientLevelMutableMetric(\n+            ALIVE_STREAM_THREADS,\n+            ALIVE_STREAM_THREADS_DESCRIPTION,\n+            RecordingLevel.INFO,\n+            stateProvider\n+        );\n+    }\n+\n+    public static void addNumAliveCleanupThreadMetric(final StreamsMetricsImpl streamsMetrics,\n+                                                      final Gauge<Integer> stateProvider) {\n+        streamsMetrics.addClientLevelMutableMetric(\n+            ALIVE_CLEANUP_THREADS,\n+            ALIVE_CLEANUP_THREADS_DESCRIPTION,\n+            RecordingLevel.INFO,\n+            stateProvider\n+        );\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NTk0MQ=="}, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE2NDY5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzozN1rOF_h7oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzozN1rOF_h7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MDU0NA==", "bodyText": "req: Please add unit tests to TaskMetricsTest for this methods.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402160544", "createdAt": "2020-04-02T09:03:37Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "diffHunk": "@@ -117,6 +120,21 @@ public static Sensor activeProcessRatioSensor(final String threadId,\n         return sensor;\n     }\n \n+    public static Sensor activeBufferedRecordsSensor(final String threadId,\n+                                                     final String taskId,\n+                                                     final StreamsMetricsImpl streamsMetrics) {\n+        final String name = ACTIVE_TASK_PREFIX + BUFFERED + StreamsMetricsImpl.RECORDS_SUFFIX;\n+        final Sensor sensor = streamsMetrics.taskLevelSensor(threadId, taskId, name, Sensor.RecordingLevel.DEBUG);\n+        addValueMetricToSensor(\n+            sensor,\n+            TASK_LEVEL_GROUP,\n+            streamsMetrics.taskLevelTagMap(threadId, taskId),\n+            name,\n+            NUM_BUFFERED_RECORDS_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE4Mjg3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODoyMVrOF_iHHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDo0MjowOVrOF_8UoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzQ4Ng==", "bodyText": "prop: For the suppression buffer, we used -count as a suffix instead of -records to measure the number of records.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402163486", "createdAt": "2020-04-02T09:08:21Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "diffHunk": "@@ -117,6 +120,21 @@ public static Sensor activeProcessRatioSensor(final String threadId,\n         return sensor;\n     }\n \n+    public static Sensor activeBufferedRecordsSensor(final String threadId,\n+                                                     final String taskId,\n+                                                     final StreamsMetricsImpl streamsMetrics) {\n+        final String name = ACTIVE_TASK_PREFIX + BUFFERED + StreamsMetricsImpl.RECORDS_SUFFIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5MjkyOQ==", "bodyText": "Ack, that makes sense!", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402592929", "createdAt": "2020-04-02T20:42:09Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "diffHunk": "@@ -117,6 +120,21 @@ public static Sensor activeProcessRatioSensor(final String threadId,\n         return sensor;\n     }\n \n+    public static Sensor activeBufferedRecordsSensor(final String threadId,\n+                                                     final String taskId,\n+                                                     final StreamsMetricsImpl streamsMetrics) {\n+        final String name = ACTIVE_TASK_PREFIX + BUFFERED + StreamsMetricsImpl.RECORDS_SUFFIX;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzQ4Ng=="}, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDg3MzY0OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyODoxMFrOF_o2fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyODoxMFrOF_o2fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MzkxOQ==", "bodyText": "prop: Could you please rename this method to reflect the new recording inside?", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402273919", "createdAt": "2020-04-02T12:28:10Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -628,6 +630,7 @@ public void recordProcessBatchTime(final long processBatchTime) {\n \n     @Override\n     public void recordProcessTimeRatio(final long allTaskProcessMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDg4MzcyOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMDo1MlrOF_o8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMDo1MlrOF_o8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTUxNQ==", "bodyText": "req: When reading this description, it is not immediately clear where those records are buffered. Could you please add some reference to the input or similar?", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402275515", "createdAt": "2020-04-02T12:30:52Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "diffHunk": "@@ -82,8 +82,11 @@ private TaskMetrics() {}\n     private static final String PROCESS_AVG_LATENCY_DESCRIPTION = AVG_LATENCY_DESCRIPTION + PROCESS_DESCRIPTION;\n     private static final String PROCESS_MAX_LATENCY_DESCRIPTION = MAX_LATENCY_DESCRIPTION + PROCESS_DESCRIPTION;\n \n+    private static final String BUFFERED = \"buffered\";\n+\n     private static final String PROCESS_RATIO_DESCRIPTION = \"The fraction of time the thread spent \" +\n         \"on processing this task among all assigned active tasks\";\n+    private static final String NUM_BUFFERED_RECORDS_DESCRIPTION = \"Number of buffered records for this active task\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDg4NzY3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMjowNlrOF_o_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMjowNlrOF_o_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjE4Mg==", "bodyText": "req: Please add unit tests in ThreadMetricsTest.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402276182", "createdAt": "2020-04-02T12:32:06Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java", "diffHunk": "@@ -175,6 +180,40 @@ public static Sensor processLatencySensor(final String threadId,\n         return sensor;\n     }\n \n+    public static Sensor pollRecordsSensor(final String threadId,\n+                                           final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor =\n+            streamsMetrics.threadLevelSensor(threadId, POLL + RECORDS_SUFFIX, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        addAvgAndMaxToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            POLL + RECORDS_SUFFIX,\n+            POLL_AVG_RECORDS_DESCRIPTION,\n+            POLL_MAX_RECORDS_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+\n+    public static Sensor processRecordsSensor(final String threadId,\n+                                              final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor =\n+            streamsMetrics.threadLevelSensor(threadId, PROCESS + RECORDS_SUFFIX, RecordingLevel.INFO);\n+        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n+        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n+        addAvgAndMaxToSensor(\n+            sensor,\n+            threadLevelGroup,\n+            tagMap,\n+            PROCESS + RECORDS_SUFFIX,\n+            PROCESS_AVG_RECORDS_DESCRIPTION,\n+            PROCESS_MAX_RECORDS_DESCRIPTION\n+        );\n+        return sensor;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6641dfaed2f8b1cb5a04424f8e2161364cac333"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODczMjAwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/internals/metrics/ClientMetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyMjo0NFrOGANe2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNzo0OFrOGAsNEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NDA3NQ==", "bodyText": "prop: Could you please add a private method like setUpAndVerifyMetric() for mutable metrics to avoid code duplications? Best would be to rename setUpAndVerifyMetric() to setUpAndVerifyImmutableMetric() and to call the new method setUpAndVerifyMutableMetric().", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402874075", "createdAt": "2020-04-03T09:22:44Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/internals/metrics/ClientMetricsTest.java", "diffHunk": "@@ -91,6 +91,42 @@ public void shouldAddStateMetric() {\n         verify(streamsMetrics);\n     }\n \n+    @Test\n+    public void shouldAddAliveStreamThreadsMetric() {\n+        final String name = \"alive-stream-threads\";\n+        final String description = \"The current number of alive stream threads that are running or participating in rebalance\";\n+        final Gauge<Integer> stateProvider = (config, now) -> 1;\n+        streamsMetrics.addClientLevelMutableMetric(\n+            eq(name),\n+            eq(description),\n+            eq(RecordingLevel.INFO),\n+            eq(stateProvider)\n+        );\n+        replay(streamsMetrics);\n+\n+        ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, stateProvider);\n+\n+        verify(streamsMetrics);\n+    }\n+\n+    @Test\n+    public void shouldAddAliveCleanupThreadsMetric() {\n+        final String name = \"alive-cleanup-threads\";\n+        final String description = \"The current number of alive local store directory cleanup threads\";\n+        final Gauge<Integer> stateProvider = (config, now) -> 1;\n+        streamsMetrics.addClientLevelMutableMetric(\n+            eq(name),\n+            eq(description),\n+            eq(RecordingLevel.INFO),\n+            eq(stateProvider)\n+        );\n+        replay(streamsMetrics);\n+\n+        ClientMetrics.addNumAliveCleanupThreadMetric(streamsMetrics, stateProvider);\n+\n+        verify(streamsMetrics);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzQyNg==", "bodyText": "Good call! Will do.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403377426", "createdAt": "2020-04-03T23:07:48Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/internals/metrics/ClientMetricsTest.java", "diffHunk": "@@ -91,6 +91,42 @@ public void shouldAddStateMetric() {\n         verify(streamsMetrics);\n     }\n \n+    @Test\n+    public void shouldAddAliveStreamThreadsMetric() {\n+        final String name = \"alive-stream-threads\";\n+        final String description = \"The current number of alive stream threads that are running or participating in rebalance\";\n+        final Gauge<Integer> stateProvider = (config, now) -> 1;\n+        streamsMetrics.addClientLevelMutableMetric(\n+            eq(name),\n+            eq(description),\n+            eq(RecordingLevel.INFO),\n+            eq(stateProvider)\n+        );\n+        replay(streamsMetrics);\n+\n+        ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, stateProvider);\n+\n+        verify(streamsMetrics);\n+    }\n+\n+    @Test\n+    public void shouldAddAliveCleanupThreadsMetric() {\n+        final String name = \"alive-cleanup-threads\";\n+        final String description = \"The current number of alive local store directory cleanup threads\";\n+        final Gauge<Integer> stateProvider = (config, now) -> 1;\n+        streamsMetrics.addClientLevelMutableMetric(\n+            eq(name),\n+            eq(description),\n+            eq(RecordingLevel.INFO),\n+            eq(stateProvider)\n+        );\n+        replay(streamsMetrics);\n+\n+        ClientMetrics.addNumAliveCleanupThreadMetric(streamsMetrics, stateProvider);\n+\n+        verify(streamsMetrics);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NDA3NQ=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODgwNjEwOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0MzowNFrOGAOMWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzowNjowMVrOGAsLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NTcyMA==", "bodyText": "req: We expect the addition of the metric exactly once. Could you please remove line 196?", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402885720", "createdAt": "2020-04-03T09:43:04Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -192,6 +192,10 @@ private void prepareStreams() throws Exception {\n         ClientMetrics.addApplicationIdMetric(anyObject(StreamsMetricsImpl.class), EasyMock.eq(APPLICATION_ID));\n         ClientMetrics.addTopologyDescriptionMetric(anyObject(StreamsMetricsImpl.class), anyString());\n         ClientMetrics.addStateMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        ClientMetrics.addNumAliveStreamThreadMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        EasyMock.expectLastCall().anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzAyMw==", "bodyText": "Actually this is added intentionally since there are three tests in which we only created the instance without calling its start() function -- thinking about it, I will move the registration logic back to constructor and then we can remove it.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403377023", "createdAt": "2020-04-03T23:06:01Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -192,6 +192,10 @@ private void prepareStreams() throws Exception {\n         ClientMetrics.addApplicationIdMetric(anyObject(StreamsMetricsImpl.class), EasyMock.eq(APPLICATION_ID));\n         ClientMetrics.addTopologyDescriptionMetric(anyObject(StreamsMetricsImpl.class), anyString());\n         ClientMetrics.addStateMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        ClientMetrics.addNumAliveStreamThreadMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        EasyMock.expectLastCall().anyTimes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NTcyMA=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODgwNjc3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0MzoxNVrOGAOMvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0MzoxNVrOGAOMvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NTgyMA==", "bodyText": "req: same as above", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402885820", "createdAt": "2020-04-03T09:43:15Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -192,6 +192,10 @@ private void prepareStreams() throws Exception {\n         ClientMetrics.addApplicationIdMetric(anyObject(StreamsMetricsImpl.class), EasyMock.eq(APPLICATION_ID));\n         ClientMetrics.addTopologyDescriptionMetric(anyObject(StreamsMetricsImpl.class), anyString());\n         ClientMetrics.addStateMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        ClientMetrics.addNumAliveStreamThreadMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        EasyMock.expectLastCall().anyTimes();\n+        ClientMetrics.addNumAliveCleanupThreadMetric(anyObject(StreamsMetricsImpl.class), anyObject());\n+        EasyMock.expectLastCall().anyTimes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg1NDQ3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1NjoyN1rOGAOp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoyNDo0MVrOGAsd1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MzMxMA==", "bodyText": "req: Could you please add verifications of the creation of those metrics in StreamThreadTest#shouldCreateMetricsAtStartup()?", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402893310", "createdAt": "2020-04-03T09:56:27Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -445,12 +447,14 @@ public StreamThread(final Time time,\n         this.streamsMetrics = streamsMetrics;\n         this.commitSensor = ThreadMetrics.commitSensor(threadId, streamsMetrics);\n         this.pollSensor = ThreadMetrics.pollSensor(threadId, streamsMetrics);\n+        this.pollRecordsSensor = ThreadMetrics.pollRecordsSensor(threadId, streamsMetrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MTcxNw==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403381717", "createdAt": "2020-04-03T23:24:41Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -445,12 +447,14 @@ public StreamThread(final Time time,\n         this.streamsMetrics = streamsMetrics;\n         this.commitSensor = ThreadMetrics.commitSensor(threadId, streamsMetrics);\n         this.pollSensor = ThreadMetrics.pollSensor(threadId, streamsMetrics);\n+        this.pollRecordsSensor = ThreadMetrics.pollRecordsSensor(threadId, streamsMetrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MzMxMA=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg1NTE3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1NjozN1rOGAOqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoyNDo1NFrOGAseBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MzQyMw==", "bodyText": "req: Could you please add verifications of the creation of those metrics in StreamThreadTest#shouldCreateMetricsAtStartup()?", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402893423", "createdAt": "2020-04-03T09:56:37Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -445,12 +447,14 @@ public StreamThread(final Time time,\n         this.streamsMetrics = streamsMetrics;\n         this.commitSensor = ThreadMetrics.commitSensor(threadId, streamsMetrics);\n         this.pollSensor = ThreadMetrics.pollSensor(threadId, streamsMetrics);\n+        this.pollRecordsSensor = ThreadMetrics.pollRecordsSensor(threadId, streamsMetrics);\n+        this.pollRatioSensor = ThreadMetrics.pollRatioSensor(threadId, streamsMetrics);\n         this.processLatencySensor = ThreadMetrics.processLatencySensor(threadId, streamsMetrics);\n+        this.processRecordsSensor = ThreadMetrics.processRecordsSensor(threadId, streamsMetrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MTc2Ng==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403381766", "createdAt": "2020-04-03T23:24:54Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -445,12 +447,14 @@ public StreamThread(final Time time,\n         this.streamsMetrics = streamsMetrics;\n         this.commitSensor = ThreadMetrics.commitSensor(threadId, streamsMetrics);\n         this.pollSensor = ThreadMetrics.pollSensor(threadId, streamsMetrics);\n+        this.pollRecordsSensor = ThreadMetrics.pollRecordsSensor(threadId, streamsMetrics);\n+        this.pollRatioSensor = ThreadMetrics.pollRatioSensor(threadId, streamsMetrics);\n         this.processLatencySensor = ThreadMetrics.processLatencySensor(threadId, streamsMetrics);\n+        this.processRecordsSensor = ThreadMetrics.processRecordsSensor(threadId, streamsMetrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MzQyMw=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg4MjI3OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNDoyNlrOGAO7wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoyOToxMlrOGAsiVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5Nzg1Nw==", "bodyText": "req: Please verify the creation of those metrics in StreamTaskTest#shouldConstructMetricsWithBuiltInMetricsVersionLatest().", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402897857", "createdAt": "2020-04-03T10:04:26Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -137,6 +138,7 @@ public StreamTask(final TaskId id,\n         processRatioSensor = TaskMetrics.activeProcessRatioSensor(threadId, taskId, streamsMetrics);\n         processLatencySensor = TaskMetrics.processLatencySensor(threadId, taskId, streamsMetrics);\n         punctuateLatencySensor = TaskMetrics.punctuateSensor(threadId, taskId, streamsMetrics);\n+        bufferedRecordsSensor = TaskMetrics.activeBufferedRecordsSensor(threadId, taskId, streamsMetrics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4Mjg2OA==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403382868", "createdAt": "2020-04-03T23:29:12Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -137,6 +138,7 @@ public StreamTask(final TaskId id,\n         processRatioSensor = TaskMetrics.activeProcessRatioSensor(threadId, taskId, streamsMetrics);\n         processLatencySensor = TaskMetrics.processLatencySensor(threadId, taskId, streamsMetrics);\n         punctuateLatencySensor = TaskMetrics.punctuateSensor(threadId, taskId, streamsMetrics);\n+        bufferedRecordsSensor = TaskMetrics.activeBufferedRecordsSensor(threadId, taskId, streamsMetrics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5Nzg1Nw=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg5MDA2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNjo1OFrOGAPA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzozMDowNVrOGAsjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTE2Mw==", "bodyText": "req: Please rename this unit test to reflect the new verifications.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402899163", "createdAt": "2020-04-03T10:06:58Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -381,7 +381,7 @@ public void shouldRecordProcessRatio() {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MzA1NQ==", "bodyText": "I will add a new function to verify the buffer size.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403383055", "createdAt": "2020-04-03T23:30:05Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -381,7 +381,7 @@ public void shouldRecordProcessRatio() {\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTE2Mw=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg5ODE2OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowOToxMlrOGAPF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzozNToxMVrOGAsnwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDQ1MQ==", "bodyText": "prop: I find assertThat() better readable than assertEquals().", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402900451", "createdAt": "2020-04-03T10:09:12Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -381,7 +381,7 @@ public void shouldRecordProcessRatio() {\n \n         task.recordProcessBatchTime(10L);\n         task.recordProcessBatchTime(15L);\n-        task.recordProcessTimeRatio(100L);\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n \n         assertEquals(0.25d, (double) metric.metricValue(), 0.0001d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4NDI1Ng==", "bodyText": "Fair enough :)", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403384256", "createdAt": "2020-04-03T23:35:11Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -381,7 +381,7 @@ public void shouldRecordProcessRatio() {\n \n         task.recordProcessBatchTime(10L);\n         task.recordProcessBatchTime(15L);\n-        task.recordProcessTimeRatio(100L);\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n \n         assertEquals(0.25d, (double) metric.metricValue(), 0.0001d);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDQ1MQ=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkxNDUwOnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNDoxN1rOGAPP5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNDoxN1rOGAPP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzAxNQ==", "bodyText": "req: Please add verifications or unit tests to verify the values measured by this metric in KafkaStreamsTest.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402903015", "createdAt": "2020-04-03T10:14:17Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -762,6 +762,9 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n             storeProviders.add(new StreamThreadStateStoreProvider(threads[i], internalTopologyBuilder));\n         }\n \n+        ClientMetrics.addNumAliveStreamThreadMetric(streamsMetrics, (metricsConfig, now) ->\n+            Math.toIntExact(Arrays.stream(threads).filter(thread -> thread.state().isAlive()).count()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkxNDk5OnYy", "diffSide": "RIGHT", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNDoyN1rOGAPQPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDo0MTowMVrOGAtbcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzEwMA==", "bodyText": "req: Please add verifications or unit tests to verify the values measured by this metric in KafkaStreamsTest.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r402903100", "createdAt": "2020-04-03T10:14:27Z", "author": {"login": "cadonna"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -773,14 +776,21 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         final GlobalStateStoreProvider globalStateStoreProvider = new GlobalStateStoreProvider(internalTopologyBuilder.globalStateStores());\n         queryableStoreProvider = new QueryableStoreProvider(storeProviders, globalStateStoreProvider);\n \n-        stateDirCleaner = Executors.newSingleThreadScheduledExecutor(r -> {\n+        stateDirCleaner = setupStateDirCleaner();\n+\n+        maybeWarnAboutCodeInRocksDBConfigSetter(log, config);\n+        rocksDBMetricsRecordingService = maybeCreateRocksDBMetricsRecordingService(clientId, config);\n+    }\n+\n+    private ScheduledExecutorService setupStateDirCleaner() {\n+        return Executors.newSingleThreadScheduledExecutor(r -> {\n             final Thread thread = new Thread(r, clientId + \"-CleanupThread\");\n             thread.setDaemon(true);\n+\n+            ClientMetrics.addNumAliveCleanupThreadMetric(streamsMetrics, (metricsConfig, now) -> thread.isAlive() ? 1 : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NzQ4OQ==", "bodyText": "The KafkaStreamsTest has mocks on all of its modules including metrics, I'll do this verification in MetricsIntegrationTest.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r403397489", "createdAt": "2020-04-04T00:41:01Z", "author": {"login": "guozhangwang"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -773,14 +776,21 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         final GlobalStateStoreProvider globalStateStoreProvider = new GlobalStateStoreProvider(internalTopologyBuilder.globalStateStores());\n         queryableStoreProvider = new QueryableStoreProvider(storeProviders, globalStateStoreProvider);\n \n-        stateDirCleaner = Executors.newSingleThreadScheduledExecutor(r -> {\n+        stateDirCleaner = setupStateDirCleaner();\n+\n+        maybeWarnAboutCodeInRocksDBConfigSetter(log, config);\n+        rocksDBMetricsRecordingService = maybeCreateRocksDBMetricsRecordingService(clientId, config);\n+    }\n+\n+    private ScheduledExecutorService setupStateDirCleaner() {\n+        return Executors.newSingleThreadScheduledExecutor(r -> {\n             final Thread thread = new Thread(r, clientId + \"-CleanupThread\");\n             thread.setDaemon(true);\n+\n+            ClientMetrics.addNumAliveCleanupThreadMetric(streamsMetrics, (metricsConfig, now) -> thread.isAlive() ? 1 : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzEwMA=="}, "originalCommit": {"oid": "cbd79095f112883eba0ad90aa2bf94144bbd0b10"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzQ4ODQ4OnYy", "diffSide": "LEFT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0MDo0NlrOGBYOEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0MDo0NlrOGBYOEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA5ODU3Nw==", "bodyText": "Thank you for this! I forgot to remove them.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404098577", "createdAt": "2020-04-06T13:40:46Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -193,30 +204,6 @@\n     private static final String EXPIRED_WINDOW_RECORD_DROP_RATE = \"expired-window-record-drop-rate\";\n     private static final String EXPIRED_WINDOW_RECORD_DROP_TOTAL = \"expired-window-record-drop-total\";\n \n-    // RocksDB metrics\n-    private static final String BYTES_WRITTEN_RATE = \"bytes-written-rate\";\n-    private static final String BYTES_WRITTEN_TOTAL = \"bytes-written-total\";\n-    private static final String BYTES_READ_RATE = \"bytes-read-rate\";\n-    private static final String BYTES_READ_TOTAL = \"bytes-read-total\";\n-    private static final String MEMTABLE_BYTES_FLUSHED_RATE = \"memtable-bytes-flushed-rate\";\n-    private static final String MEMTABLE_BYTES_FLUSHED_TOTAL = \"memtable-bytes-flushed-total\";\n-    private static final String MEMTABLE_HIT_RATIO = \"memtable-hit-ratio\";\n-    private static final String MEMTABLE_FLUSH_TIME_AVG = \"memtable-flush-time-avg\";\n-    private static final String MEMTABLE_FLUSH_TIME_MIN = \"memtable-flush-time-min\";\n-    private static final String MEMTABLE_FLUSH_TIME_MAX = \"memtable-flush-time-max\";\n-    private static final String WRITE_STALL_DURATION_AVG = \"write-stall-duration-avg\";\n-    private static final String WRITE_STALL_DURATION_TOTAL = \"write-stall-duration-total\";\n-    private static final String BLOCK_CACHE_DATA_HIT_RATIO = \"block-cache-data-hit-ratio\";\n-    private static final String BLOCK_CACHE_INDEX_HIT_RATIO = \"block-cache-index-hit-ratio\";\n-    private static final String BLOCK_CACHE_FILTER_HIT_RATIO = \"block-cache-filter-hit-ratio\";\n-    private static final String BYTES_READ_DURING_COMPACTION_RATE = \"bytes-read-compaction-rate\";\n-    private static final String BYTES_WRITTEN_DURING_COMPACTION_RATE = \"bytes-written-compaction-rate\";\n-    private static final String COMPACTION_TIME_AVG = \"compaction-time-avg\";\n-    private static final String COMPACTION_TIME_MIN = \"compaction-time-min\";\n-    private static final String COMPACTION_TIME_MAX = \"compaction-time-max\";\n-    private static final String NUMBER_OF_OPEN_FILES = \"number-open-files\";\n-    private static final String NUMBER_OF_FILE_ERRORS = \"number-file-errors-total\";\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzUyODcxOnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0OToyOVrOGBYnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozODo1MVrOGBiv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwNDk5Nw==", "bodyText": "req: You verify this metric twice, once here in once in testMetricsForBuiltInMetricsVersionLatest(). Since it is a newly added metric und you account for the changes in the tags in getMetric() I guess you just need to keep the one here.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404104997", "createdAt": "2020-04-06T13:49:29Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -434,6 +456,20 @@ private void testMetrics(final String builtInMetricsVersion) {\n             builtInMetricsVersion\n         ));\n \n+        assertNotNull(getMetric(\n+            \"active-process\",\n+            \"%s-ratio\",\n+            task.id().toString(),\n+            builtInMetricsVersion\n+        ));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MTA5Mw==", "bodyText": "Sounds good!", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404271093", "createdAt": "2020-04-06T17:38:51Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -434,6 +456,20 @@ private void testMetrics(final String builtInMetricsVersion) {\n             builtInMetricsVersion\n         ));\n \n+        assertNotNull(getMetric(\n+            \"active-process\",\n+            \"%s-ratio\",\n+            task.id().toString(),\n+            builtInMetricsVersion\n+        ));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwNDk5Nw=="}, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzU1OTY1OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NTo0MFrOGBY6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozOTozOFrOGBix8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwOTg2Mg==", "bodyText": "req: The names of this method and the previous method should be switched.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404109862", "createdAt": "2020-04-06T13:55:40Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -375,24 +375,46 @@ public void shouldProcessInOrder() {\n     public void shouldRecordProcessRatio() {\n         task = createStatelessTask(createConfig(false, \"0\"), StreamsConfig.METRICS_LATEST);\n \n+        final KafkaMetric metric = getMetric(\"active-buffer\", \"%s-count\", task.id().toString(), StreamsConfig.METRICS_LATEST);\n+\n+        assertThat(metric.metricValue(), equalTo(0.0d));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20)\n+        ));\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n+\n+        assertThat(metric.metricValue(), equalTo(2.0d));\n+\n+        task.process(0L);\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n+\n+        assertThat(metric.metricValue(), equalTo(1.0d));\n+    }\n+\n+    @Test\n+    public void shouldRecordBufferedRecords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MTYwMQ==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404271601", "createdAt": "2020-04-06T17:39:38Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -375,24 +375,46 @@ public void shouldProcessInOrder() {\n     public void shouldRecordProcessRatio() {\n         task = createStatelessTask(createConfig(false, \"0\"), StreamsConfig.METRICS_LATEST);\n \n+        final KafkaMetric metric = getMetric(\"active-buffer\", \"%s-count\", task.id().toString(), StreamsConfig.METRICS_LATEST);\n+\n+        assertThat(metric.metricValue(), equalTo(0.0d));\n+\n+        task.addRecords(partition1, asList(\n+            getConsumerRecord(partition1, 10),\n+            getConsumerRecord(partition1, 20)\n+        ));\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n+\n+        assertThat(metric.metricValue(), equalTo(2.0d));\n+\n+        task.process(0L);\n+        task.recordProcessTimeRatioAndBufferSize(100L);\n+\n+        assertThat(metric.metricValue(), equalTo(1.0d));\n+    }\n+\n+    @Test\n+    public void shouldRecordBufferedRecords() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwOTg2Mg=="}, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzU4ODk3OnYy", "diffSide": "RIGHT", "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDowMTo0OFrOGBZNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0Mjo0NlrOGBi5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNDY5MQ==", "bodyText": "req: Please use a constant for the number of stream threads here and on line 260.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404114691", "createdAt": "2020-04-06T14:01:48Z", "author": {"login": "cadonna"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -246,6 +233,7 @@ public void before() throws InterruptedException {\n         streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n         streamsConfiguration.put(StreamsConfig.METRICS_RECORDING_LEVEL_CONFIG, Sensor.RecordingLevel.DEBUG.name);\n         streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 10 * 1024 * 1024L);\n+        streamsConfiguration.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MzQzOA==", "bodyText": "Ack.", "url": "https://github.com/apache/kafka/pull/8371#discussion_r404273438", "createdAt": "2020-04-06T17:42:46Z", "author": {"login": "guozhangwang"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -246,6 +233,7 @@ public void before() throws InterruptedException {\n         streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n         streamsConfiguration.put(StreamsConfig.METRICS_RECORDING_LEVEL_CONFIG, Sensor.RecordingLevel.DEBUG.name);\n         streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 10 * 1024 * 1024L);\n+        streamsConfiguration.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExNDY5MQ=="}, "originalCommit": {"oid": "025a26d6391a51be71487d75b93f8b892f7124e2"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3134, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}