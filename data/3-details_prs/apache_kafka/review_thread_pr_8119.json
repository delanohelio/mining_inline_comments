{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTkzMDgy", "number": 8119, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODo1ODoxNlrODgLCHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0Mzo0MFrODg3RCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDYxNzkwOnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxODo1ODoxNlrOFqQKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwODo0ODoxMVrOFqSZhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0OTM2MA==", "bodyText": "Hmm.. I don't think it's safe to modify topicPartitionOffsets. This is shared by multiple calls following the initial getListOffsetsCalls. It would be better to create a new map. It might bee worth having a test case which uses two partitions with different leaders to verify this case is handled correctly.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r379849360", "createdAt": "2020-02-15T18:58:16Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3803,11 +3803,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n                     }\n \n                     if (!partitionsWithErrors.isEmpty()) {\n-                        partitionsToQuery.keySet().retainAll(partitionsWithErrors);\n                         Set<String> retryTopics = partitionsWithErrors.stream().map(tp -> tp.topic()).collect(Collectors.toSet());\n+                        topicPartitionOffsets.keySet().retainAll(partitionsWithErrors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a52e1bf412570603250f74b9ab3b37d19e13b89"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg4NTk1OQ==", "bodyText": "That's a good point, there's a possibility of clobbering of data between calls. I just pushed a change for this as well as added a test as you suggested that starts out with partitions with the same leader, refreshes metadata, and moves to different leaders.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r379885959", "createdAt": "2020-02-16T08:48:11Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3803,11 +3803,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n                     }\n \n                     if (!partitionsWithErrors.isEmpty()) {\n-                        partitionsToQuery.keySet().retainAll(partitionsWithErrors);\n                         Set<String> retryTopics = partitionsWithErrors.stream().map(tp -> tp.topic()).collect(Collectors.toSet());\n+                        topicPartitionOffsets.keySet().retainAll(partitionsWithErrors);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0OTM2MA=="}, "originalCommit": {"oid": "7a52e1bf412570603250f74b9ab3b37d19e13b89"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkzNTc3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1NjowMVrOFrKc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0ODo0N1rOFrMSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNDMzOA==", "bodyText": "There's a bit of redundancy between this and partitionsWithErrors. Do we need both?", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380804338", "createdAt": "2020-02-18T16:56:01Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNDQ2MA==", "bodyText": "Good point, I think at this point it is redundant and can be removed - I'll remove it.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380834460", "createdAt": "2020-02-18T17:48:47Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNDMzOA=="}, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk0NDM5OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1ODoyMFrOFrKidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MDo1MFrOFrMW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNTc0OA==", "bodyText": "This code reads a bit awkwardly because we only have the check for the first branch. It seems like we are trying to handle the case that the broker has sent us responses for partitions that we did not ask for. Perhaps that should be a fatal error and we can call completeExceptionally?", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380805748", "createdAt": "2020-02-18T16:58:20Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n+                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTU2MQ==", "bodyText": "Yeah I was trying to write the code so that we ignore any partitions we haven't asked for. Is it better behavior in this case to just silently ignore or raise an error and completeExceptionally? Thinking about this more I'm realizing it's probably better to raise an error and call completeExceptionally as we shouldn't be getting partitions we haven't asked for (considering the logic on how we pass the new partitions for metadata refreshes). I'll update the code to reflect that.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380835561", "createdAt": "2020-02-18T17:50:50Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3786,15 +3786,17 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n                     Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n+                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNTc0OA=="}, "originalCommit": {"oid": "161854296db3897472e766b965880a1b3ce2407f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzc4MDE3OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToxNTozMFrOFrSraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozNjoxMFrOFrTSiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTExMw==", "bodyText": "Would this be any clearer?\nOffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\nif (offsetRequestSpec == null) {\n  future.completeExceptionally(error.exception());\n} else if (shouldRefreshMetadata(error) {\n  retryTopicPartitionOffsets.put(tp, offsetRequestSpec);\n} else {\n...\nAlso, in the case of that we got back an unexpected partition, I think we can raise a new KafkaException and provide a clear message indicating what happened.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380939113", "createdAt": "2020-02-18T21:15:30Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3794,8 +3793,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {\n-                            partitionsWithErrors.add(tp);\n+                        if (topicPartitionOffsets.get(tp) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDQ1Mg==", "bodyText": "Yeah that's probably a better way of writing this. When you say raising a new KafkaException, do you mean throw it within the call or calling fail that raises a KafkaException here: https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L707)", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380940452", "createdAt": "2020-02-18T21:18:15Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3794,8 +3793,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {\n-                            partitionsWithErrors.add(tp);\n+                        if (topicPartitionOffsets.get(tp) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTExMw=="}, "originalCommit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTk3MQ==", "bodyText": "Currently in this case, we do the following:\nfuture.completeExceptionally(error.exception());\n\nI am suggesting we do something like this:\nfuture.completeExceptionally(new KafkaException(\"Unexpected partition in response....\");", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380945971", "createdAt": "2020-02-18T21:29:42Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3794,8 +3793,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {\n-                            partitionsWithErrors.add(tp);\n+                        if (topicPartitionOffsets.get(tp) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTExMw=="}, "originalCommit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0OTEzMQ==", "bodyText": "Makes sense, just fixed that.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380949131", "createdAt": "2020-02-18T21:36:10Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3794,8 +3793,11 @@ void handleResponse(AbstractResponse abstractResponse) {\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error) && topicPartitionOffsets.get(tp) != null) {\n-                            partitionsWithErrors.add(tp);\n+                        if (topicPartitionOffsets.get(tp) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTExMw=="}, "originalCommit": {"oid": "01b4eedd6af9e61fa1e6488076855209c06c09c3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg2MjA2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0Mjo0MVrOFrTfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo1NTo1OVrOFrT5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjMyMQ==", "bodyText": "The slf4j {} placeholders will not work here since we are constructing the message ourselves.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380952321", "createdAt": "2020-02-18T21:42:41Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1OTAwOQ==", "bodyText": "Ah I wasn't aware of that, just fixed it.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380959009", "createdAt": "2020-02-18T21:55:59Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjMyMQ=="}, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg2NTA2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0Mzo0MFrOFrTg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo1NjowMFrOFrT5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjgxMg==", "bodyText": "nit: conventionally, we put the else on the same level as the previous branch\n} else if (...", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380952812", "createdAt": "2020-02-18T21:43:40Z", "author": {"login": "hachikuji"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));\n+                        }\n+                        else if (MetadataOperationContext.shouldRefreshMetadata(error)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1OTAxNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/kafka/pull/8119#discussion_r380959016", "createdAt": "2020-02-18T21:56:00Z", "author": {"login": "skaundinya15"}, "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -3785,29 +3785,34 @@ public ListOffsetsResult listOffsets(Map<TopicPartition, OffsetSpec> topicPartit\n                 @Override\n                 void handleResponse(AbstractResponse abstractResponse) {\n                     ListOffsetResponse response = (ListOffsetResponse) abstractResponse;\n-                    Set<TopicPartition> partitionsWithErrors = new HashSet<>();\n+                    Map<TopicPartition, OffsetSpec> retryTopicPartitionOffsets = new HashMap<>();\n \n                     for (Entry<TopicPartition, PartitionData> result : response.responseData().entrySet()) {\n                         TopicPartition tp = result.getKey();\n                         PartitionData partitionData = result.getValue();\n \n                         KafkaFutureImpl<ListOffsetsResultInfo> future = futures.get(tp);\n                         Errors error = partitionData.error;\n-                        if (MetadataOperationContext.shouldRefreshMetadata(error)) {\n-                            partitionsWithErrors.add(tp);\n-                        } else if (error == Errors.NONE) {\n+                        OffsetSpec offsetRequestSpec = topicPartitionOffsets.get(tp);\n+                        if (offsetRequestSpec == null) {\n+                            future.completeExceptionally(new KafkaException(\"Unexpected topic partition {} in broker response!\" + tp));\n+                        }\n+                        else if (MetadataOperationContext.shouldRefreshMetadata(error)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjgxMg=="}, "originalCommit": {"oid": "58a8d11bdfa0b95d00a497d305c0b3826088275a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4026, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}