{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MDEzODc5", "number": 9573, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMzo0MVrOE2pe8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjozMlrOE20Nbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM4MjI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMzo0MVrOHvjIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMzo0MVrOHvjIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMDY2NQ==", "bodyText": "nit: We should check that quotaManager is not null. We can also do it for replicaManager above.", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519620665", "createdAt": "2020-11-09T08:13:41Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala", "diffHunk": "@@ -62,14 +64,16 @@ class IsrExpirationTest {\n     EasyMock.replay(logManager)\n \n     alterIsrManager = TestUtils.createAlterIsrManager()\n+    quotaManager = QuotaFactory.instantiate(configs.head, metrics, time, \"\")\n     replicaManager = new ReplicaManager(configs.head, metrics, time, null, null, logManager, new AtomicBoolean(false),\n-      QuotaFactory.instantiate(configs.head, metrics, time, \"\"), new BrokerTopicStats, new MetadataCache(configs.head.brokerId),\n+      quotaManager, new BrokerTopicStats, new MetadataCache(configs.head.brokerId),\n       new LogDirFailureChannel(configs.head.logDirs.size), alterIsrManager)\n   }\n \n   @After\n   def tearDown(): Unit = {\n     replicaManager.shutdown(false)\n+    quotaManager.shutdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM5OTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxOTowNFrOHvjSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1ODowMlrOHv1hdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMzI5MA==", "bodyText": "nit: Could we get rid of quota?", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519623290", "createdAt": "2020-11-09T08:19:04Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "diffHunk": "@@ -1506,7 +1508,7 @@ class ReplicaManagerTest {\n       purgatoryName = \"ElectLeader\", timer, reaperEnabled = false)\n \n     // Mock network client to show leader offset of 5\n-    val quota = QuotaFactory.instantiate(config, metrics, time, \"\")\n+    val quota = quotaManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3Mzk1NA==", "bodyText": "this is needed to avoid method variable name collision with the ReplicationQuotaManager in the overriden createReplicaFetcherManager a little bit further down in the test.", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519873954", "createdAt": "2020-11-09T14:55:05Z", "author": {"login": "splett2"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "diffHunk": "@@ -1506,7 +1508,7 @@ class ReplicaManagerTest {\n       purgatoryName = \"ElectLeader\", timer, reaperEnabled = false)\n \n     // Mock network client to show leader offset of 5\n-    val quota = QuotaFactory.instantiate(config, metrics, time, \"\")\n+    val quota = quotaManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMzI5MA=="}, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMjAzOA==", "bodyText": "Could we rename quotaManager used in createReplicaFetcherManager to replicationQuotaManager and use quotaManager as the global one everywhere?", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519922038", "createdAt": "2020-11-09T15:58:02Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "diffHunk": "@@ -1506,7 +1508,7 @@ class ReplicaManagerTest {\n       purgatoryName = \"ElectLeader\", timer, reaperEnabled = false)\n \n     // Mock network client to show leader offset of 5\n-    val quota = QuotaFactory.instantiate(config, metrics, time, \"\")\n+    val quota = quotaManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMzI5MA=="}, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzQwMTA4OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxOTozMlrOHvjTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxOTozMlrOHvjTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMzU0NA==", "bodyText": "Should we check that quotaManager is not null?", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519623544", "createdAt": "2020-11-09T08:19:32Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "diffHunk": "@@ -79,22 +81,24 @@ class ReplicaManagerTest {\n     EasyMock.expect(kafkaZkClient.getEntityConfigs(EasyMock.anyString(), EasyMock.anyString())).andReturn(new Properties()).anyTimes()\n     EasyMock.replay(kafkaZkClient)\n \n+    val props = TestUtils.createBrokerConfig(1, TestUtils.MockZkConnect)\n+    config = KafkaConfig.fromProps(props)\n     alterIsrManager = EasyMock.createMock(classOf[AlterIsrManager])\n+    quotaManager = QuotaFactory.instantiate(config, metrics, time, \"\")\n   }\n \n   @After\n   def tearDown(): Unit = {\n     TestUtils.clearYammerMetrics()\n+    quotaManager.shutdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzQwNDE0OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/epoch/OffsetsForLeaderEpochTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyMDoyNVrOHvjVPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyMDoyNVrOHvjVPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMzk5OQ==", "bodyText": "We should check non null in both cases.", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519623999", "createdAt": "2020-11-09T08:20:25Z", "author": {"login": "dajac"}, "path": "core/src/test/scala/unit/kafka/server/epoch/OffsetsForLeaderEpochTest.scala", "diffHunk": "@@ -112,4 +120,11 @@ class OffsetsForLeaderEpochTest {\n     //Then\n     assertEquals(new EpochEndOffset(Errors.UNKNOWN_TOPIC_OR_PARTITION, UNDEFINED_EPOCH, UNDEFINED_EPOCH_OFFSET), response(tp))\n   }\n+\n+  @After\n+  def tearDown(): Unit = {\n+    replicaManager.shutdown(checkpointHW = false)\n+    quotaManager.shutdown()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbbbeb8771cfe1a518556ce9cdd9420988471e9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTEzOTY2OnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjozMlrOHvz1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToyMjozMlrOHvz1cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg5NDM4Ng==", "bodyText": "the two replica managers are intended to be separate. I used the same quota manager for both to avoid polluting the method signature/diff. The tests using this utility function don't rely on any quota manager behavior, so I felt this was okay.", "url": "https://github.com/apache/kafka/pull/9573#discussion_r519894386", "createdAt": "2020-11-09T15:22:32Z", "author": {"login": "splett2"}, "path": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala", "diffHunk": "@@ -1894,10 +1894,10 @@ class ReplicaManagerTest {\n \n     // each replica manager is for a broker\n     val rm0 = new ReplicaManager(config0, metrics, time, kafkaZkClient, new MockScheduler(time), mockLogMgr0,\n-      new AtomicBoolean(false), QuotaFactory.instantiate(config0, metrics, time, \"\"),\n+      new AtomicBoolean(false), quotaManager,\n       brokerTopicStats1, metadataCache0, new LogDirFailureChannel(config0.logDirs.size), alterIsrManager)\n     val rm1 = new ReplicaManager(config1, metrics, time, kafkaZkClient, new MockScheduler(time), mockLogMgr1,\n-      new AtomicBoolean(false), QuotaFactory.instantiate(config1, metrics, time, \"\"),\n+      new AtomicBoolean(false), quotaManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "019f9ab48c289abfb03a66b2ec0c060a4459d348"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3826, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}