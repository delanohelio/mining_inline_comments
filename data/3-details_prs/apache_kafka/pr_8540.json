{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjA4MDI1", "number": 8540, "title": "KAFKA-9127: don't create StreamThreads for global-only topology", "bodyText": "This should fix the flaky GlobalKTableIntegrationTest.shouldRestoreGlobalInMemoryKTableOnRestart as well as address the issue on the ticket (avoid unnecessary group coordination overhead).\nThe deeper issue (and root cause of the test's flakiness) is that currently every StreamThread in a global-only topology will hit IllegalStateException upon trying to poll. Once they all died, the KafkaStreams instance goes into the ERROR state despite the global thread being alive and well.\nThe fix is to check whether the topology is global-only and overwrite the num.threads to 0 in that case. This PR also adds a check for topologies with nothing whatsoever, and throws an exception to fail fast.\nedit: turns out this patch also happens to fix a regression introduced in 2.5, when we switched over to using collection subscription (for which an empty subscription is illegal) from the previous pattern subscription (for which an empty subscription is mysteriously considered fine). This should be cherrypicked back to 2.5", "createdAt": "2020-04-23T21:25:30Z", "url": "https://github.com/apache/kafka/pull/8540", "merged": true, "mergeCommit": {"oid": "b5de44937768304ba17351e7e742f4258533a150"}, "closed": true, "closedAt": "2020-04-29T03:34:18Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcalNiLgFqTM5OTUzNzU1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccG2NOAH2gAyNDA4MjA4MDI1OjA0OWUzNTI4YjgzZGVkNzMwZGE3NWU0Yjg4OGE4MjU2ZDQ5NTUyNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTM3NTU1", "url": "https://github.com/apache/kafka/pull/8540#pullrequestreview-399537555", "createdAt": "2020-04-23T23:08:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowODoxN1rOGK_shg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowODoxN1rOGK_shg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjUzNA==", "bodyText": "Can you create a method to getBuilderWithSource() and just call it inline instead of creating a new mutable field for all the tests to rely on?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414182534", "createdAt": "2020-04-23T23:08:17Z", "author": {"login": "vvcephei"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -161,6 +165,9 @@ public void before() throws Exception {\n         props.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n         props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG, NUM_THREADS);\n \n+        builder = new StreamsBuilder();\n+        builder.stream(\"source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTU2MDgx", "url": "https://github.com/apache/kafka/pull/8540#pullrequestreview-399556081", "createdAt": "2020-04-23T23:59:29Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTU4MzIz", "url": "https://github.com/apache/kafka/pull/8540#pullrequestreview-399558323", "createdAt": "2020-04-24T00:06:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjozNlrOGLBB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyMDoyMFrOGLBUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM2OA==", "bodyText": "Do we really need to add this exception? How much work would it be to reduce the complexity of KafkaStreams?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414204368", "createdAt": "2020-04-24T00:06:36Z", "author": {"login": "mjsax"}, "path": "checkstyle/suppressions.xml", "diffHunk": "@@ -181,7 +181,7 @@\n               files=\"StreamsPartitionAssignor.java\"/>\n \n     <suppress checks=\"NPathComplexity\"\n-              files=\"(ProcessorStateManager|InternalTopologyBuilder|StreamsPartitionAssignor|StreamThread|TaskManager|AssignorConfiguration).java\"/>\n+              files=\"(AssignorConfiguration|InternalTopologyBuilder|KafkaStreams|ProcessorStateManager|StreamsPartitionAssignor|StreamThread|TaskManager).java\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNTEwOA==", "bodyText": "I don't think this should be WARN but an INFO. There is nothing \"wrong\" and thus nothing to warn about?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414205108", "createdAt": "2020-04-24T00:08:42Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzI3MA==", "bodyText": "Do we really want to do this? I understand that and empty topology does not make sense, and it would be appropriate to log a WARN -- but do we need/want to reject it?\nAlso, should we instead throw an InvalidTopologyException? Furthermore, should we add a similar check to StreamsBuilder.builder() to raise this error even earlier (we would still nee this check though).", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414207270", "createdAt": "2020-04-24T00:14:46Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -701,18 +703,33 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n                 internalTopologyBuilder,\n                 parseHostInfo(config.getString(StreamsConfig.APPLICATION_SERVER_CONFIG)));\n \n+        final int numStreamThreads;\n+        if (internalTopologyBuilder.hasNoNonGlobalTopology()) {\n+            log.warn(\"Overriding number of StreamThreads to zero for global-only topology\");\n+            numStreamThreads = 0;\n+        } else {\n+            numStreamThreads = config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+        }\n+\n         // create the stream thread, global update thread, and cleanup thread\n-        threads = new StreamThread[config.getInt(StreamsConfig.NUM_STREAM_THREADS_CONFIG)];\n+        threads = new StreamThread[numStreamThreads];\n+\n+        final ProcessorTopology globalTaskTopology = internalTopologyBuilder.buildGlobalStateTopology();\n+        final boolean hasGlobalTopology = globalTaskTopology != null;\n+\n+        if (numStreamThreads == 0 && !hasGlobalTopology) {\n+            log.error(\"Must subscribe to at least one source topic or global table\");\n+            throw new IllegalArgumentException(\"Topology has no stream threads and no global threads\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzc1NA==", "bodyText": "The change to reject an empty topology make our testing rather \"ugly\"... Do we really need to reject it?", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414207754", "createdAt": "2020-04-24T00:16:06Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -327,15 +331,15 @@ private void prepareStreamThread(final StreamThread thread, final boolean termin\n \n     @Test\n     public void testShouldTransitToNotRunningIfCloseRightAfterCreated() {\n-        final KafkaStreams streams = new KafkaStreams(new StreamsBuilder().build(), props, supplier, time);\n+        final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODI4Mw==", "bodyText": "IMHO, we should always get the exception and assert on the error message (otherwise, it exception might be throw because of. different reason the the test does not test what it is support to test -- we have seen this issue in the past).", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414208283", "createdAt": "2020-04-24T00:17:40Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTIyMw==", "bodyText": "Is the state listener executed on the correct thread (ie, main testing thread?) that thus would really make the test fail? From my current understanding it would be called by the GlobalThread and thus the global thread would die instead (this would lead to a timeout below I guess?)", "url": "https://github.com/apache/kafka/pull/8540#discussion_r414209223", "createdAt": "2020-04-24T00:20:20Z", "author": {"login": "mjsax"}, "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -883,6 +887,50 @@ public void statefulTopologyShouldCreateStateDirectory() throws Exception {\n         startStreamsAndCheckDirExists(topology, true);\n     }\n \n+    @Test\n+    public void shouldThrowIllegalArgumentExceptionOnEmptyTopology() {\n+        assertThrows(\n+            IllegalArgumentException.class,\n+            () -> new KafkaStreams(new StreamsBuilder().build(), props, supplier, time)\n+        );\n+    }\n+\n+    @Test\n+    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+\n+        assertThat(streams.threads.length, equalTo(0));\n+    }\n+\n+    @Test\n+    public void shouldNotTransitToErrorStateWithGlobalOnlyTopology() throws InterruptedException {\n+        final StreamsBuilder builder = new StreamsBuilder();\n+        builder.globalTable(\"anyTopic\");\n+        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n+        streams.setStateListener((newState, oldState) -> {\n+            if (newState.equals(State.ERROR)) {\n+                throw new AssertionError(\"Should not have transitioned to ERROR state with no stream threads\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 290}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5eecbb98ec5627e7bde875d2bc698e287229425", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/d5eecbb98ec5627e7bde875d2bc698e287229425", "committedDate": "2020-04-27T23:11:08Z", "message": "dont create threads, fix up and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08afa21e1870bcc0f64628b6e983e3b5f8bf7a7", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f08afa21e1870bcc0f64628b6e983e3b5f8bf7a7", "committedDate": "2020-04-27T23:11:08Z", "message": "remove unnecessary sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec5dee484868a61b065061148b5feb676d3304fa", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/ec5dee484868a61b065061148b5feb676d3304fa", "committedDate": "2020-04-27T23:11:08Z", "message": "github suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "365c9872bba5a5470dc216020ffa944bb2f66c4e", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/365c9872bba5a5470dc216020ffa944bb2f66c4e", "committedDate": "2020-04-27T23:11:09Z", "message": "fix tests, should stop using find and replace to makes changes already..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "494818e2f6a055049c435e7bcb373dbce184e886", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/494818e2f6a055049c435e7bcb373dbce184e886", "committedDate": "2020-04-27T23:11:09Z", "message": "review props"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f542c7a91390fe34b13dc73f9a1f17454a3642db", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f542c7a91390fe34b13dc73f9a1f17454a3642db", "committedDate": "2020-04-27T23:11:09Z", "message": "change exception to TopologyException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1702f168b6ebd6581f5993bca96f557887201df", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f1702f168b6ebd6581f5993bca96f557887201df", "committedDate": "2020-04-27T23:12:15Z", "message": "'add' test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f1702f168b6ebd6581f5993bca96f557887201df", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f1702f168b6ebd6581f5993bca96f557887201df", "committedDate": "2020-04-27T23:12:15Z", "message": "'add' test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459e38c80dc250613e4b2c18d12ee4915bfcd22b", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/459e38c80dc250613e4b2c18d12ee4915bfcd22b", "committedDate": "2020-04-27T23:19:41Z", "message": "add separate integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d07c5612b1c3e4790239967b8e9f5332b8ad10d", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/0d07c5612b1c3e4790239967b8e9f5332b8ad10d", "committedDate": "2020-04-27T23:20:05Z", "message": "remove added excpt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85ec07e54e251e9c3f4e41fec4213079f4aae755", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/85ec07e54e251e9c3f4e41fec4213079f4aae755", "committedDate": "2020-04-27T23:22:15Z", "message": "remove extra lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzk0NzYy", "url": "https://github.com/apache/kafka/pull/8540#pullrequestreview-401394762", "createdAt": "2020-04-27T23:22:38Z", "commit": {"oid": "0d07c5612b1c3e4790239967b8e9f5332b8ad10d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyMjozOFrOGM7x2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzoyMjozOFrOGM7x2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxNTUxMw==", "bodyText": "Copied this over to trunk and verified that it fails consistently", "url": "https://github.com/apache/kafka/pull/8540#discussion_r416215513", "createdAt": "2020-04-27T23:22:38Z", "author": {"login": "ableegoldman"}, "path": "streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java", "diffHunk": "@@ -265,12 +270,27 @@ public void shouldRestoreGlobalInMemoryKTableOnRestart() throws Exception {\n         kafkaStreams.close();\n \n         startStreams();\n+\n         store = kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.keyValueStore()));\n         assertThat(store.approximateNumEntries(), equalTo(4L));\n         timestampedStore = kafkaStreams.store(StoreQueryParameters.fromNameAndType(globalStore, QueryableStoreTypes.timestampedKeyValueStore()));\n         assertThat(timestampedStore.approximateNumEntries(), equalTo(4L));\n     }\n \n+    @Test\n+    public void shouldGetToRunningWithOnlyGlobalTopology() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d07c5612b1c3e4790239967b8e9f5332b8ad10d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049e3528b83ded730da75e4b888a8256d4955273", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/049e3528b83ded730da75e4b888a8256d4955273", "committedDate": "2020-04-28T16:54:36Z", "message": "fix test exception message"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1194, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}