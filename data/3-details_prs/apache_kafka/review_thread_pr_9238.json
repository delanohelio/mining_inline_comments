{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTUzOTMw", "number": 9238, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo0MDozN1rOEfEl3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNjowOVrOEfFUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDE2NTQxOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo0MDozN1rOHLHa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo0MDozN1rOHLHa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNzk1NA==", "bodyText": "for Java 14 -> for Java 15", "url": "https://github.com/apache/kafka/pull/9238#discussion_r481417954", "createdAt": "2020-09-01T20:40:37Z", "author": {"login": "chia7712"}, "path": "Jenkinsfile", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+def setupGradle() {\n+  // Delete gradle cache to workaround cache corruption bugs, see KAFKA-3167\n+  dir('.gradle') {\n+    deleteDir()\n+  }\n+  sh './gradlew -version'\n+}\n+\n+def doValidation() {\n+  sh '''\n+    ./gradlew -PscalaVersion=$SCALA_VERSION clean compileJava compileScala compileTestJava compileTestScala \\\n+        spotlessScalaCheck checkstyleMain checkstyleTest spotbugsMain rat \\\n+        --profile --no-daemon --continue -PxmlSpotBugsReport=true\n+  '''\n+}\n+\n+def doTest() {\n+  sh '''\n+    ./gradlew -PscalaVersion=$SCALA_VERSION unitTest integrationTest \\\n+        --profile --no-daemon --continue -PtestLoggingEvents=started,passed,skipped,failed \\\n+        -PignoreFailures=true -PmaxParallelForks=2 -PmaxTestRetries=1 -PmaxTestRetryFailures=5\n+  '''\n+  junit '**/build/test-results/**/TEST-*.xml'\n+}\n+\n+def doStreamsArchetype() {\n+  echo 'Verify that Kafka Streams archetype compiles'\n+\n+  sh '''\n+    ./gradlew streams:install clients:install connect:json:install connect:api:install \\\n+         || { echo 'Could not install kafka-streams.jar (and dependencies) locally`'; exit 1; }\n+  '''\n+\n+  sh '''\n+    version=`grep \"^version=\" gradle.properties | cut -d= -f 2` \\\n+        || { echo 'Could not get version from `gradle.properties`'; exit 1; }\n+  '''\n+\n+  dir('streams/quickstart') {\n+    sh '''\n+      mvn clean install -Dgpg.skip  \\\n+          || { echo 'Could not `mvn install` streams quickstart archetype'; exit 1; }\n+    '''\n+\n+    sh '''\n+      mkdir test-streams-archetype && cd test-streams-archetype \\\n+          || { echo 'Could not create test directory for stream quickstart archetype'; exit 1; }\n+    '''\n+\n+    sh '''\n+      echo \"Y\" | mvn archetype:generate \\\n+          -DarchetypeCatalog=local \\\n+          -DarchetypeGroupId=org.apache.kafka \\\n+          -DarchetypeArtifactId=streams-quickstart-java \\\n+          -DarchetypeVersion=$version \\\n+          -DgroupId=streams.examples \\\n+          -DartifactId=streams.examples \\\n+          -Dversion=0.1 \\\n+          -Dpackage=myapps \\\n+          || { echo 'Could not create new project using streams quickstart archetype'; exit 1; }\n+    '''\n+\n+    dir('streams.examples') {\n+      sh '''\n+        mvn compile \\\n+            || { echo 'Could not compile streams quickstart archetype project'; exit 1; }\n+      '''\n+    }\n+  }\n+}\n+\n+def tryStreamsArchetype() {\n+  try {\n+    doStreamsArchetype()\n+  } catch(err) {\n+    echo 'Failed to build Kafka Streams archetype, marking this build UNSTABLE'\n+    currentBuild.result = 'UNSTABLE'\n+  }\n+}\n+\n+\n+pipeline {\n+  agent none\n+  stages {\n+    stage('Build') {\n+      parallel {\n+        stage('JDK 8') {\n+          agent { label 'ubuntu' }\n+          tools {\n+            jdk 'JDK 1.8 (latest)'\n+            maven 'Maven 3.6.3'\n+          }\n+          options {\n+            timeout(time: 8, unit: 'HOURS') \n+            timestamps()\n+          }\n+          environment {\n+            SCALA_VERSION=2.12\n+          }\n+          steps {\n+            setupGradle()\n+            doValidation()\n+            doTest()\n+            tryStreamsArchetype()\n+          }\n+        }\n+\n+        stage('JDK 11') {\n+          agent { label 'ubuntu' }\n+          tools {\n+            jdk 'JDK 11 (latest)'\n+          }\n+          options {\n+            timeout(time: 8, unit: 'HOURS') \n+            timestamps()\n+          }\n+          environment {\n+            SCALA_VERSION=2.13\n+          }\n+          steps {\n+            setupGradle()\n+            doValidation()\n+            doTest()\n+            echo 'Skipping Kafka Streams archetype test for Java 11'\n+          }\n+        }\n+       \n+        stage('JDK 15') {\n+          agent { label 'ubuntu' }\n+          tools {\n+            jdk 'JDK 15 (latest)'\n+          }\n+          options {\n+            timeout(time: 8, unit: 'HOURS') \n+            timestamps()\n+          }\n+          environment {\n+            SCALA_VERSION=2.13\n+          }\n+          steps {\n+            setupGradle()\n+            doValidation()\n+            doTest()\n+            echo 'Skipping Kafka Streams archetype test for Java 14'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dffd2f4103b7a09ddd9476ad48da2ac8fca6358"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI4NTEwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNjowOVrOHLIjDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNjowOVrOHLIjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjQzMA==", "bodyText": "Should this new option be supported by test task?", "url": "https://github.com/apache/kafka/pull/9238#discussion_r481436430", "createdAt": "2020-09-01T21:16:09Z", "author": {"login": "chia7712"}, "path": "build.gradle", "diffHunk": "@@ -336,6 +337,7 @@ subprojects {\n \n   task integrationTest(type: Test, dependsOn: compileJava) {\n     maxParallelForks = userMaxForks ?: Runtime.runtime.availableProcessors()\n+    ignoreFailures = userIgnoreFailures", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dffd2f4103b7a09ddd9476ad48da2ac8fca6358"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1979, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}