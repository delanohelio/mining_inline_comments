{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzIwNzMw", "number": 9178, "title": "KAFKA-8362: fix the old checkpoint won't be removed after alter log dir", "bodyText": "In KIP-113, we support replicas movement between log directories. But while the directory change, we forgot to remove the topicPartition offset data in old directory, which will cause there are more than 1 checkpoint copy stayed in the logs for the altered topicPartition. And it'll let the LogCleaner get stuck due to it's possible to always get the old topicPartition offset data from the old checkpoint file.\nI added one more parameter topicPartitionToBeRemoved in updateCheckpoints() method. So, if the update parameter is None (as before), we'll do the remove action to remove the topicPartitionToBeRemoved data in dir, otherwise, update the data as before.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-08-14T01:46:11Z", "url": "https://github.com/apache/kafka/pull/9178", "merged": true, "mergeCommit": {"oid": "77a0bba140cbf2b249194ac7ba962813cf69fe0c"}, "closed": true, "closedAt": "2020-09-14T15:50:45Z", "author": {"login": "showuon"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-rMuMABqjM2NTQ1MTc3NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH33Y5gFqTQ4Njk0NjM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f89ce6faa6edc1333eda5a3124a27ddd0621449", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/2f89ce6faa6edc1333eda5a3124a27ddd0621449", "committedDate": "2020-08-14T01:40:58Z", "message": "KAFKA-8362: fix the old checkpoint won't be removed after alter log dir and add tests"}, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/bb1ad9cb612218bb793dd294b552721bcb89dd02", "committedDate": "2020-08-14T02:33:48Z", "message": "KAFKA-8362: fix the old checkpoint won't be removed after alter log dir and add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/bb1ad9cb612218bb793dd294b552721bcb89dd02", "committedDate": "2020-08-14T02:33:48Z", "message": "KAFKA-8362: fix the old checkpoint won't be removed after alter log dir and add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDQ4MjAx", "url": "https://github.com/apache/kafka/pull/9178#pullrequestreview-485448201", "createdAt": "2020-09-09T22:33:42Z", "commit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjozMzo0MlrOHPcjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo1ODoyNVrOHPdDqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1ODQzOA==", "bodyText": "typo absooute", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485958438", "createdAt": "2020-09-09T22:33:42Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1698,8 +1698,12 @@ class ReplicaManager(val config: KafkaConfig,\n     Partition.removeMetrics(tp)\n   }\n \n-  // logDir should be an absolute path\n-  // sendZkNotification is needed for unit test\n+  /**\n+   * The log directory failure handler for the replica\n+   *\n+   * @param dir                     the absooute path of the log directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1ODYyOA==", "bodyText": "typo diretory", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485958628", "createdAt": "2020-09-09T22:34:12Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -184,7 +184,11 @@ class LogManager(logDirs: Seq[File],\n     numRecoveryThreadsPerDataDir = newSize\n   }\n \n-  // dir should be an absolute path\n+  /**\n+   * The log diretory failure handler. It'll remove all the checkpoint files located in the directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MzE3Mg==", "bodyText": "Could we make topicPartitionToBeRemoved as Option[TopicPartition]?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485963172", "createdAt": "2020-09-09T22:47:33Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -354,12 +354,24 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)]): Unit = {\n+  /**\n+   * Update checkpoint file, or removing topics and partitions that no longer exist\n+   *\n+   * @param dataDir                       The File object to be updated\n+   * @param update                        The [TopicPartition, Long] map data to be updated. pass \"none\" if doing remove, not add\n+   * @param topicPartitionToBeRemoved     The TopicPartition to be removed\n+   */\n+  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: TopicPartition = null): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NDEzOA==", "bodyText": "updatedOffset is not being used.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485964138", "createdAt": "2020-09-09T22:50:15Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -354,12 +354,24 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)]): Unit = {\n+  /**\n+   * Update checkpoint file, or removing topics and partitions that no longer exist\n+   *\n+   * @param dataDir                       The File object to be updated\n+   * @param update                        The [TopicPartition, Long] map data to be updated. pass \"none\" if doing remove, not add\n+   * @param topicPartitionToBeRemoved     The TopicPartition to be removed\n+   */\n+  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: TopicPartition = null): Unit = {\n     inLock(lock) {\n       val checkpoint = checkpoints(dataDir)\n       if (checkpoint != null) {\n         try {\n-          val existing = checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) } ++ update\n+          val existing = update match {\n+            case Some(updatedOffset) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NDMyOQ==", "bodyText": "typo direcotory", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485964329", "createdAt": "2020-09-09T22:50:52Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -369,13 +381,21 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n+  /**\n+   * alter the checkpoint directory for the topicPartition, to remove the data in sourceLogDir, and add the data in destLogDir\n+   */\n   def alterCheckpointDir(topicPartition: TopicPartition, sourceLogDir: File, destLogDir: File): Unit = {\n     inLock(lock) {\n       try {\n         checkpoints.get(sourceLogDir).flatMap(_.read().get(topicPartition)) match {\n           case Some(offset) =>\n-            // Remove this partition from the checkpoint file in the source log directory\n-            updateCheckpoints(sourceLogDir, None)\n+            debug(s\"Removing the partition offset data in checkpoint file for '${topicPartition}' \" +\n+              s\"from ${sourceLogDir.getAbsoluteFile} direcotory.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NDcwNw==", "bodyText": "removing => remove", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485964707", "createdAt": "2020-09-09T22:51:59Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -354,12 +354,24 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)]): Unit = {\n+  /**\n+   * Update checkpoint file, or removing topics and partitions that no longer exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NTYyNg==", "bodyText": "Stop the cleaning logs => Stop cleaning logs", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485965626", "createdAt": "2020-09-09T22:54:53Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -393,13 +413,21 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n+  /**\n+   * Stop the cleaning logs in the provided directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Njc2MQ==", "bodyText": "We now have 2 different formats for checkpoint files, one for OffsetCheckpointFile and another for LeaderEpochCheckpointFile. Perhaps we can add the above comment to the appropriate class.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r485966761", "createdAt": "2020-09-09T22:58:25Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/checkpoints/CheckpointFile.scala", "diffHunk": "@@ -75,6 +75,17 @@ class CheckpointReadBuffer[T](location: String,\n   }\n }\n \n+/**\n+ * This class interacts with the checkpoint file to read or write [TopicPartition, Offset] entries\n+ *\n+ * The format in the checkpoint file is like this:\n+ *  -----checkpoint file content------\n+ *  0                <- OffsetCheckpointFile.currentVersion\n+ *  2                <- following entries size\n+ *  tp1  par1  1     <- the format is: TOPIC  PARTITION  OFFSET\n+ *  tp1  par2  2\n+ *  -----checkpoint file end----------\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ad9cb612218bb793dd294b552721bcb89dd02"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9005372c674fedd5332fc93f8f4ce47718138f1f", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/9005372c674fedd5332fc93f8f4ce47718138f1f", "committedDate": "2020-09-10T09:23:08Z", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into KAFKA-8362"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5320318eec5cdb938cafd385f45525472370d359", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/5320318eec5cdb938cafd385f45525472370d359", "committedDate": "2020-09-10T11:29:51Z", "message": "KAFKA-8362: address reviewer's comments to refactor the codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDgyMjU3", "url": "https://github.com/apache/kafka/pull/9178#pullrequestreview-486082257", "createdAt": "2020-09-10T15:55:58Z", "commit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1NTo1OFrOHP61pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowMjoyMlrOHP9fBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1NDY5Mw==", "bodyText": "To be consistent, perhaps change update to partitionToUpdateOrAdd and topicPartitionToBeRemoved to partitionToRemove?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486454693", "createdAt": "2020-09-10T15:55:58Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -354,12 +354,30 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)]): Unit = {\n+  /**\n+   * Update checkpoint file, or remove topics and partitions that no longer exist\n+   *\n+   * @param dataDir                       The File object to be updated\n+   * @param update                        The [TopicPartition, Long] map data to be updated. pass \"none\" if doing remove, not add\n+   * @param topicPartitionToBeRemoved     The TopicPartition to be removed\n+   */\n+  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: Option[TopicPartition] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MTg4Mg==", "bodyText": "This method assumes that only one of update and topicPartitionToBeRemoved will be set. Perhaps we could just handle the more general case that both could be set?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486481882", "createdAt": "2020-09-10T16:35:58Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -355,22 +355,28 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n   }\n \n   /**\n-   * Update checkpoint file, or removing topics and partitions that no longer exist\n+   * Update checkpoint file, or remove topics and partitions that no longer exist\n    *\n    * @param dataDir                       The File object to be updated\n    * @param update                        The [TopicPartition, Long] map data to be updated. pass \"none\" if doing remove, not add\n    * @param topicPartitionToBeRemoved     The TopicPartition to be removed\n    */\n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: TopicPartition = null): Unit = {\n+  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: Option[TopicPartition] = None): Unit = {\n     inLock(lock) {\n       val checkpoint = checkpoints(dataDir)\n       if (checkpoint != null) {\n         try {\n           val existing = update match {\n             case Some(updatedOffset) =>\n-              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap ++ update\n+              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap + updatedOffset\n             case None =>\n-              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap - topicPartitionToBeRemoved\n+              topicPartitionToBeRemoved match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MjExOQ==", "bodyText": "Do we need to log this?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486482119", "createdAt": "2020-09-10T16:36:19Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -355,22 +355,28 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n   }\n \n   /**\n-   * Update checkpoint file, or removing topics and partitions that no longer exist\n+   * Update checkpoint file, or remove topics and partitions that no longer exist\n    *\n    * @param dataDir                       The File object to be updated\n    * @param update                        The [TopicPartition, Long] map data to be updated. pass \"none\" if doing remove, not add\n    * @param topicPartitionToBeRemoved     The TopicPartition to be removed\n    */\n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: TopicPartition = null): Unit = {\n+  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)], topicPartitionToBeRemoved: Option[TopicPartition] = None): Unit = {\n     inLock(lock) {\n       val checkpoint = checkpoints(dataDir)\n       if (checkpoint != null) {\n         try {\n           val existing = update match {\n             case Some(updatedOffset) =>\n-              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap ++ update\n+              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap + updatedOffset\n             case None =>\n-              checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap - topicPartitionToBeRemoved\n+              topicPartitionToBeRemoved match {\n+                case Some(topicPartion) =>\n+                  checkpoint.read().filter { case (tp, _) => logs.keys.contains(tp) }.toMap - topicPartion\n+                case None =>\n+                  info(s\"Nothing added or removed for ${dataDir.getAbsoluteFile} directory in updateCheckpoints.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mjk0Mg==", "bodyText": "Could we use the named param for update in updateCheckpoints() below and other places to make it clear?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486482942", "createdAt": "2020-09-10T16:37:41Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -390,9 +396,9 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n         checkpoints.get(sourceLogDir).flatMap(_.read().get(topicPartition)) match {\n           case Some(offset) =>\n             debug(s\"Removing the partition offset data in checkpoint file for '${topicPartition}' \" +\n-              s\"from ${sourceLogDir.getAbsoluteFile} direcotory.\")\n+              s\"from ${sourceLogDir.getAbsoluteFile} directory.\")\n             // Remove this partition data from the checkpoint file in the source log directory\n-            updateCheckpoints(sourceLogDir, None, topicPartitionToBeRemoved = topicPartition)\n+            updateCheckpoints(sourceLogDir, None, topicPartitionToBeRemoved = Some(topicPartition))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjAyMg==", "bodyText": "Truncate the checkpoint file for the given partition => Truncate the checkpointed offset for the given partition", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486486022", "createdAt": "2020-09-10T16:42:36Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -393,13 +419,21 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n+  /**\n+   * Stop cleaning logs in the provided directory\n+   *\n+   * @param dir     the absolute path of the log dir\n+   */\n   def handleLogDirFailure(dir: String): Unit = {\n     warn(s\"Stopping cleaning logs in dir $dir\")\n     inLock(lock) {\n       checkpoints = checkpoints.filter { case (k, _) => k.getAbsolutePath != dir }\n     }\n   }\n \n+  /**\n+   * Truncate the checkpoint file for the given partition if its checkpointed offset is larger than the given offset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NzE3OA==", "bodyText": "The map stores the first offset in each epoch.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486487178", "createdAt": "2020-09-10T16:44:34Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/checkpoints/LeaderEpochCheckpointFile.scala", "diffHunk": "@@ -52,8 +52,16 @@ object LeaderEpochCheckpointFile {\n }\n \n /**\n-  * This class persists a map of (LeaderEpoch => Offsets) to a file (for a certain replica)\n-  */\n+ * This class persists a map of (LeaderEpoch => Offsets) to a file (for a certain replica)\n+ *\n+ * The format in the LeaderEpoch checkpoint file is like this:\n+ * -----checkpoint file begin------\n+ * 0                <- LeaderEpochCheckpointFile.currentVersion\n+ * 2                <- following entries size\n+ * 0  1     <- the format is: leader_epoch(int32) end_offset(int64)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODAzMg==", "bodyText": "Could we used named param for topicPartitionToBeRemoved?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486488032", "createdAt": "2020-09-10T16:45:53Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleaner.scala", "diffHunk": "@@ -203,16 +203,24 @@ class LogCleaner(initialConfig: CleanerConfig,\n   }\n \n   /**\n-   * Update checkpoint file, removing topics and partitions that no longer exist\n+   * Update checkpoint file to remove topics and partitions that no longer exist\n    */\n-  def updateCheckpoints(dataDir: File): Unit = {\n-    cleanerManager.updateCheckpoints(dataDir, update=None)\n+  def updateCheckpoints(dataDir: File, topicPartitionToBeRemoved: Option[TopicPartition] = None): Unit = {\n+    cleanerManager.updateCheckpoints(dataDir, update=None, topicPartitionToBeRemoved)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4OTQwMw==", "bodyText": "Perhaps tweaks the comment to \"Update checkpoint file, adding or removing partitions if necessary.\"?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486489403", "createdAt": "2020-09-10T16:48:15Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogCleanerManager.scala", "diffHunk": "@@ -354,12 +354,30 @@ private[log] class LogCleanerManager(val logDirs: Seq[File],\n     }\n   }\n \n-  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition, Long)]): Unit = {\n+  /**\n+   * Update checkpoint file, or remove topics and partitions that no longer exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MTY1NA==", "bodyText": "It'll remove all the checkpoint files located in the directory  => It will stop log cleaning in that directory.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486491654", "createdAt": "2020-09-10T16:52:05Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -184,7 +184,11 @@ class LogManager(logDirs: Seq[File],\n     numRecoveryThreadsPerDataDir = newSize\n   }\n \n-  // dir should be an absolute path\n+  /**\n+   * The log directory failure handler. It'll remove all the checkpoint files located in the directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5Mjc0OQ==", "bodyText": "typo notificiation", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486492749", "createdAt": "2020-09-10T16:53:51Z", "author": {"login": "junrao"}, "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1729,8 +1729,12 @@ class ReplicaManager(val config: KafkaConfig,\n     Partition.removeMetrics(tp)\n   }\n \n-  // logDir should be an absolute path\n-  // sendZkNotification is needed for unit test\n+  /**\n+   * The log directory failure handler for the replica\n+   *\n+   * @param dir                     the absolute path of the log directory\n+   * @param sendZkNotification      check if we need to send notificiation to zookeeper node (needed for unit test)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5Mzk2Mg==", "bodyText": "Should we handle topicPartitionToBeRemoved or assert it is None?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486493962", "createdAt": "2020-09-10T16:55:46Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala", "diffHunk": "@@ -55,7 +59,8 @@ class LogCleanerManagerTest extends Logging {\n       cleanerCheckpoints.toMap\n     }\n \n-    override def updateCheckpoints(dataDir: File, update: Option[(TopicPartition,Long)]): Unit = {\n+    override def updateCheckpoints(dataDir: File, update: Option[(TopicPartition,Long)],\n+                                   topicPartitionToBeRemoved: Option[TopicPartition] = None): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NTgwNw==", "bodyText": "Could we used named param for update? Ditto below.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486495807", "createdAt": "2020-09-10T16:58:42Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala", "diffHunk": "@@ -361,6 +366,93 @@ class LogCleanerManagerTest extends Logging {\n     assertEquals(\"should have 1 logs ready to be deleted\", 1, deletableLog3.size)\n   }\n \n+  @Test\n+  def testUpdateCheckpointsShouldAddOffsetToPartition(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // expect the checkpoint offset is not the expectedOffset before doing updateCheckpoints\n+    assertNotEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).getOrElse(0))\n+\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NjA1NA==", "bodyText": "expectedOffset => expected offset", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486496054", "createdAt": "2020-09-10T16:59:07Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala", "diffHunk": "@@ -361,6 +366,93 @@ class LogCleanerManagerTest extends Logging {\n     assertEquals(\"should have 1 logs ready to be deleted\", 1, deletableLog3.size)\n   }\n \n+  @Test\n+  def testUpdateCheckpointsShouldAddOffsetToPartition(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // expect the checkpoint offset is not the expectedOffset before doing updateCheckpoints\n+    assertNotEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).getOrElse(0))\n+\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    // expect the checkpoint offset is now updated to the expectedOffset after doing updateCheckpoints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5NjM1MA==", "bodyText": "allCleanerCheckpoints.get(topicPartition).get) can just be allCleanerCheckpoints(topicPartition). Ditto below.", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486496350", "createdAt": "2020-09-10T16:59:34Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala", "diffHunk": "@@ -361,6 +366,93 @@ class LogCleanerManagerTest extends Logging {\n     assertEquals(\"should have 1 logs ready to be deleted\", 1, deletableLog3.size)\n   }\n \n+  @Test\n+  def testUpdateCheckpointsShouldAddOffsetToPartition(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // expect the checkpoint offset is not the expectedOffset before doing updateCheckpoints\n+    assertNotEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).getOrElse(0))\n+\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    // expect the checkpoint offset is now updated to the expectedOffset after doing updateCheckpoints\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5ODA1Mg==", "bodyText": "It seems the < here should be > and the > two lines below should be <?", "url": "https://github.com/apache/kafka/pull/9178#discussion_r486498052", "createdAt": "2020-09-10T17:02:22Z", "author": {"login": "junrao"}, "path": "core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala", "diffHunk": "@@ -361,6 +366,93 @@ class LogCleanerManagerTest extends Logging {\n     assertEquals(\"should have 1 logs ready to be deleted\", 1, deletableLog3.size)\n   }\n \n+  @Test\n+  def testUpdateCheckpointsShouldAddOffsetToPartition(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // expect the checkpoint offset is not the expectedOffset before doing updateCheckpoints\n+    assertNotEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).getOrElse(0))\n+\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    // expect the checkpoint offset is now updated to the expectedOffset after doing updateCheckpoints\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).get)\n+  }\n+\n+  @Test\n+  def testUpdateCheckpointsShouldRemovePartitionData(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // write some data into the cleaner-offset-checkpoint file\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).get)\n+\n+    // updateCheckpoints should remove the topicPartition data in the logDir\n+    cleanerManager.updateCheckpoints(logDir, None, topicPartitionToBeRemoved = Some(topicPartition))\n+    assertTrue(cleanerManager.allCleanerCheckpoints.get(topicPartition).isEmpty)\n+  }\n+\n+  @Test\n+  def testHandleLogDirFailureShouldRemoveDirAndData(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+\n+    // write some data into the cleaner-offset-checkpoint file in logDir and logDir2\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    cleanerManager.updateCheckpoints(logDir2, Option(topicPartition2, offset))\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).get)\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition2).get)\n+\n+    cleanerManager.handleLogDirFailure(logDir.getAbsolutePath)\n+    // verify the partition data in logDir is gone, and data in logDir2 is still there\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition2).get)\n+    assertTrue(cleanerManager.allCleanerCheckpoints.get(topicPartition).isEmpty)\n+  }\n+\n+  @Test\n+  def testMaybeTruncateCheckpointShouldTruncateData(): Unit = {\n+    val records = TestUtils.singletonRecords(\"test\".getBytes, key=\"test\".getBytes)\n+    val log: Log = createLog(records.sizeInBytes * 5, LogConfig.Compact)\n+    val cleanerManager: LogCleanerManager = createCleanerManager(log)\n+    val lowerOffset = 1L\n+    val higherOffset = 1000L\n+\n+    // write some data into the cleaner-offset-checkpoint file in logDir\n+    cleanerManager.updateCheckpoints(logDir, Option(topicPartition, offset))\n+    assertEquals(offset, cleanerManager.allCleanerCheckpoints.get(topicPartition).get)\n+\n+    // we should not truncate the checkpoint data for checkpointed offset < the given offset (higherOffset)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5320318eec5cdb938cafd385f45525472370d359"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f436292209f1778f9455421f67fd81eea81f21", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/c7f436292209f1778f9455421f67fd81eea81f21", "committedDate": "2020-09-11T03:45:46Z", "message": "KAFKA-8362: address reviewer's comment to make the updateCheckpoints method more general and refactor codes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c7f436292209f1778f9455421f67fd81eea81f21", "author": {"user": {"login": "showuon", "name": "Luke Chen"}}, "url": "https://github.com/apache/kafka/commit/c7f436292209f1778f9455421f67fd81eea81f21", "committedDate": "2020-09-11T03:45:46Z", "message": "KAFKA-8362: address reviewer's comment to make the updateCheckpoints method more general and refactor codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTQ2Mzk0", "url": "https://github.com/apache/kafka/pull/9178#pullrequestreview-486946394", "createdAt": "2020-09-11T16:19:59Z", "commit": {"oid": "c7f436292209f1778f9455421f67fd81eea81f21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 762, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}