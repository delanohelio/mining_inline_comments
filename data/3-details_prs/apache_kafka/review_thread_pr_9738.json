{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4NDU1NjYy", "number": 9738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDo1MzowNlrOFTnffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDo1MzowNlrOFTnffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MTE0MzAzOnYy", "diffSide": "RIGHT", "path": "streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/KTableTest.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNDo1MzowNlrOIbLhZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNzoyODo0NVrOIbTM1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM3MTIzOQ==", "bodyText": "shouldn't this line verify the countNode name?", "url": "https://github.com/apache/kafka/pull/9738#discussion_r565371239", "createdAt": "2021-01-27T14:53:06Z", "author": {"login": "bbejeck"}, "path": "streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/KTableTest.scala", "diffHunk": "@@ -391,4 +390,57 @@ class KTableTest extends FlatSpec with Matchers with TestDriver {\n \n     testDriver.close()\n   }\n+\n+  \"setting a name on a filter processor\" should \"pass the name to the topology\" in {\n+    val builder = new StreamsBuilder()\n+    val sourceTopic = \"source\"\n+    val sinkTopic = \"sink\"\n+\n+    val table = builder.stream[String, String](sourceTopic).groupBy((key, _) => key).count()\n+    table\n+      .filter((key, value) => key.equals(\"a\") && value == 1, Named.as(\"my-name\"))\n+      .toStream\n+      .to(sinkTopic)\n+\n+    import scala.jdk.CollectionConverters._\n+\n+    val filterNode = builder.build().describe().subtopologies().asScala.toList(1).nodes().asScala.toList(3)\n+    filterNode.name() shouldBe \"my-name\"\n+  }\n+\n+  \"setting a name on a count processor\" should \"pass the name to the topology\" in {\n+    val builder = new StreamsBuilder()\n+    val sourceTopic = \"source\"\n+    val sinkTopic = \"sink\"\n+\n+    val table = builder.stream[String, String](sourceTopic).groupBy((key, _) => key).count(Named.as(\"my-name\"))\n+    table.toStream.to(sinkTopic)\n+\n+    import scala.jdk.CollectionConverters._\n+\n+    val filterNode = builder.build().describe().subtopologies().asScala.toList(1).nodes().asScala.toList(1)\n+    filterNode.name() shouldBe \"my-name\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d7fea312edabd90688e813296d33f9899ce7df"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ5NzA0NA==", "bodyText": "bad copy-paste of variable name.", "url": "https://github.com/apache/kafka/pull/9738#discussion_r565497044", "createdAt": "2021-01-27T17:28:45Z", "author": {"login": "mdespriee"}, "path": "streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/kstream/KTableTest.scala", "diffHunk": "@@ -391,4 +390,57 @@ class KTableTest extends FlatSpec with Matchers with TestDriver {\n \n     testDriver.close()\n   }\n+\n+  \"setting a name on a filter processor\" should \"pass the name to the topology\" in {\n+    val builder = new StreamsBuilder()\n+    val sourceTopic = \"source\"\n+    val sinkTopic = \"sink\"\n+\n+    val table = builder.stream[String, String](sourceTopic).groupBy((key, _) => key).count()\n+    table\n+      .filter((key, value) => key.equals(\"a\") && value == 1, Named.as(\"my-name\"))\n+      .toStream\n+      .to(sinkTopic)\n+\n+    import scala.jdk.CollectionConverters._\n+\n+    val filterNode = builder.build().describe().subtopologies().asScala.toList(1).nodes().asScala.toList(3)\n+    filterNode.name() shouldBe \"my-name\"\n+  }\n+\n+  \"setting a name on a count processor\" should \"pass the name to the topology\" in {\n+    val builder = new StreamsBuilder()\n+    val sourceTopic = \"source\"\n+    val sinkTopic = \"sink\"\n+\n+    val table = builder.stream[String, String](sourceTopic).groupBy((key, _) => key).count(Named.as(\"my-name\"))\n+    table.toStream.to(sinkTopic)\n+\n+    import scala.jdk.CollectionConverters._\n+\n+    val filterNode = builder.build().describe().subtopologies().asScala.toList(1).nodes().asScala.toList(1)\n+    filterNode.name() shouldBe \"my-name\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM3MTIzOQ=="}, "originalCommit": {"oid": "b4d7fea312edabd90688e813296d33f9899ce7df"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3483, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}