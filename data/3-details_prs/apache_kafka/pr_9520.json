{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjE5MjIx", "number": 9520, "title": "MINOR: replace test \"expected\" parameter by assertThrows", "bodyText": "assertThrows can make checks in testing more flexible and accurate so I think it is worth substituting assertThrows for \"expected\" parameter.\nThis PR includes following changes.\n\n@Test(expected = Exception.class) is replaced by assertThrows\nremove reference to org.scalatest.Assertions\nchange the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\nrename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\nincrease maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-10-28T15:06:37Z", "url": "https://github.com/apache/kafka/pull/9520", "merged": true, "mergeCommit": {"oid": "913a019d6c9b03eb44706deb7fb164f79c1f601f"}, "closed": true, "closedAt": "2021-01-10T12:20:14Z", "author": {"login": "chia7712"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddrvzLABqjQwMDk5NzE2MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdusi57ABqjQxODc3NTk2ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a74703b812598cb62025aef3c421790c0869b746", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/a74703b812598cb62025aef3c421790c0869b746", "committedDate": "2020-11-18T10:38:53Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzE4NjY1", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-548318665", "createdAt": "2020-12-09T15:43:43Z", "commit": {"oid": "a74703b812598cb62025aef3c421790c0869b746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0Mzo0M1rOICbWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo0Mzo0M1rOICbWSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjEzOQ==", "bodyText": "We don't need this anymore?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r539416139", "createdAt": "2020-12-09T15:43:43Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -117,13 +118,12 @@ public void setup() {\n         selector.reset();\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testSendToUnreadyNode() {\n         MetadataRequest.Builder builder = new MetadataRequest.Builder(Collections.singletonList(\"test\"), true);\n         long now = time.milliseconds();\n         ClientRequest request = client.newClientRequest(\"5\", builder, now, false);\n-        client.send(request, now);\n-        client.poll(1, time.milliseconds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74703b812598cb62025aef3c421790c0869b746"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a74703b812598cb62025aef3c421790c0869b746", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/a74703b812598cb62025aef3c421790c0869b746", "committedDate": "2020-11-18T10:38:53Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}, "afterCommit": {"oid": "15275951b436908f24a023652b8fd20bdf339430", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/15275951b436908f24a023652b8fd20bdf339430", "committedDate": "2020-12-09T15:53:36Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15275951b436908f24a023652b8fd20bdf339430", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/15275951b436908f24a023652b8fd20bdf339430", "committedDate": "2020-12-09T15:53:36Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}, "afterCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/e5972a6c028dca139699c235a85de24a4e1968a7", "committedDate": "2020-12-14T09:17:31Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzE5NTYw", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-548319560", "createdAt": "2020-12-09T15:44:35Z", "commit": {"oid": "a74703b812598cb62025aef3c421790c0869b746"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNDozNToyMFrOIJAwMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMTozNDoxOFrOIJIAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMDQzNA==", "bodyText": "We can remove the comment, it's redundant.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546320434", "createdAt": "2020-12-20T04:35:20Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/metrics/MetricsTest.java", "diffHunk": "@@ -196,12 +197,12 @@ public void testHierarchicalSensors() {\n         assertNull(metrics.childrenSensors().get(grandchild));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testBadSensorHierarchy() {\n         Sensor p = metrics.sensor(\"parent\");\n         Sensor c1 = metrics.sensor(\"child1\", p);\n         Sensor c2 = metrics.sensor(\"child2\", p);\n-        metrics.sensor(\"gc\", c1, c2); // should fail\n+        assertThrows(IllegalArgumentException.class, () -> metrics.sensor(\"gc\", c1, c2)); // should fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMTMwNA==", "bodyText": "Hmm, I think this was intended to fail on the second nextBatch, so maybe we should adjust the test.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546321304", "createdAt": "2020-12-20T04:44:51Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "diffHunk": "@@ -116,8 +117,7 @@ public void iteratorRaisesOnTooLargeRecords() {\n         buffer.flip();\n \n         ByteBufferLogInputStream logInputStream = new ByteBufferLogInputStream(buffer, 25);\n-        assertNotNull(logInputStream.nextBatch());\n-        logInputStream.nextBatch();\n+        assertThrows(CorruptRecordException.class, logInputStream::nextBatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTI1Nw==", "bodyText": "We should not remove this, right?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546439257", "createdAt": "2020-12-20T21:34:18Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala", "diffHunk": "@@ -411,14 +411,13 @@ abstract class EndToEndAuthorizationTest extends IntegrationTestHarness with Sas\n     * Tests that a consumer fails to consume messages without the appropriate\n     * ACL set.\n     */\n-  @Test(expected = classOf[KafkaException])\n+  @Test\n   def testNoConsumeWithoutDescribeAclViaAssign(): Unit = {\n     noConsumeWithoutDescribeAclSetup()\n     val consumer = createConsumer()\n     consumer.assign(List(tp).asJava)\n     // the exception is expected when the consumer attempts to lookup offsets\n-    consumeRecords(consumer)\n-    confirmReauthenticationMetrics()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/e5972a6c028dca139699c235a85de24a4e1968a7", "committedDate": "2020-12-14T09:17:31Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}, "afterCommit": {"oid": "2387efe966e9073e251b2b825b02ee51be3cbcc2", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/2387efe966e9073e251b2b825b02ee51be3cbcc2", "committedDate": "2020-12-21T08:53:20Z", "message": "replace org.scalatest.Assertions by junit as much as possible"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2387efe966e9073e251b2b825b02ee51be3cbcc2", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/2387efe966e9073e251b2b825b02ee51be3cbcc2", "committedDate": "2020-12-21T08:53:20Z", "message": "replace org.scalatest.Assertions by junit as much as possible"}, "afterCommit": {"oid": "f04e2adf41f82b522f8ffe10ba30e131119d2388", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/f04e2adf41f82b522f8ffe10ba30e131119d2388", "committedDate": "2020-12-22T03:36:23Z", "message": "replace org.scalatest.Assertions by junit as much as possible"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f04e2adf41f82b522f8ffe10ba30e131119d2388", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/f04e2adf41f82b522f8ffe10ba30e131119d2388", "committedDate": "2020-12-22T03:36:23Z", "message": "replace org.scalatest.Assertions by junit as much as possible"}, "afterCommit": {"oid": "0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "committedDate": "2020-12-23T08:15:54Z", "message": "replace all ExpectedException or @Test(expected = Exception.class) by assertThrows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "committedDate": "2020-12-23T08:15:54Z", "message": "replace all ExpectedException or @Test(expected = Exception.class) by assertThrows"}, "afterCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/e07f732f06db0aed77e6b84c0a364da609d37d73", "committedDate": "2020-12-23T11:45:20Z", "message": "replace all ExpectedException or @test(expected = Exception.class) by assertThrows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MjI1NDA3", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-559225407", "createdAt": "2020-12-28T17:02:30Z", "commit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowMjozMFrOIL9www==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzowNzowNlrOIL92eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzE1NQ==", "bodyText": "Was this new line intentional?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417155", "createdAt": "2020-12-28T17:02:30Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -192,11 +192,12 @@ public void testConstructorWithSerializers() {\n         new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer()).close();\n     }\n \n-    @Test(expected = ConfigException.class)\n+    @Test\n     public void testNoSerializerProvided() {\n         Properties producerProps = new Properties();\n         producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n-        new KafkaProducer(producerProps);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzg5Mg==", "bodyText": "I think this was intended to be groupCommit2, right?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417892", "createdAt": "2020-12-28T17:05:02Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/MockProducerTest.java", "diffHunk": "@@ -663,12 +623,6 @@ public void shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsA\n         producer.beginTransaction();\n \n         String group2 = \"g2\";\n-        Map<TopicPartition, OffsetAndMetadata> groupCommit2 = new HashMap<TopicPartition, OffsetAndMetadata>() {\n-            {\n-                put(new TopicPartition(topic, 2), new OffsetAndMetadata(53L, null));\n-                put(new TopicPartition(topic, 3), new OffsetAndMetadata(84L, null));\n-            }\n-        };\n         producer.sendOffsetsToTransaction(groupCommit, new ConsumerGroupMetadata(group2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODM4OQ==", "bodyText": "This change doesn't seem right. The test is intended to test maybeAddPartitionToTransaction.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418389", "createdAt": "2020-12-28T17:06:33Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODQ3Mw==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418473", "createdAt": "2020-12-28T17:06:45Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODU4MQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418581", "createdAt": "2020-12-28T17:06:59Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODYxNw==", "bodyText": "Same as above.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418617", "createdAt": "2020-12-28T17:07:06Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterFatalError() {\n         doInitTransactions();\n         transactionManager.transitionToFatalError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MjI4MTI5", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-559228129", "createdAt": "2020-12-28T17:10:35Z", "commit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoxMDozNVrOIL96QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNzoyMjo0OVrOIL-IHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxOTU4NQ==", "bodyText": "Do we still need to call close to avoid a leak?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549419585", "createdAt": "2020-12-28T17:10:35Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/memory/GarbageCollectedMemoryPoolTest.java", "diffHunk": "@@ -23,68 +23,74 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertThrows;\n+\n \n public class GarbageCollectedMemoryPoolTest {\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroSize() throws Exception {\n-        new GarbageCollectedMemoryPool(0, 7, true, null);\n+    @Test\n+    public void testZeroSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(0, 7, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeSize() throws Exception {\n-        new GarbageCollectedMemoryPool(-1, 7, false, null);\n+    @Test\n+    public void testNegativeSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(-1, 7, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 0, true, null);\n+    @Test\n+    public void testZeroMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 0, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, -1, false, null);\n+    @Test\n+    public void testNegativeMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, -1, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testMaxAllocationLargerThanSize() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 101, true, null);\n+    @Test\n+    public void testMaxAllocationLargerThanSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 101, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationOverMaxAllocation() throws Exception {\n+    @Test\n+    public void testAllocationOverMaxAllocation() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(11);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(11));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationZero() throws Exception {\n+    @Test\n+    public void testAllocationZero() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.tryAllocate(0);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(0));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationNegative() throws Exception {\n+    @Test\n+    public void testAllocationNegative() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(-1);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(-1));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseNull() throws Exception {\n+    @Test\n+    public void testReleaseNull() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.release(null);\n+        assertThrows(IllegalArgumentException.class, () -> pool.release(null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseForeignBuffer() throws Exception {\n+    @Test\n+    public void testReleaseForeignBuffer() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n         ByteBuffer fellOffATruck = ByteBuffer.allocate(1);\n-        pool.release(fellOffATruck);\n-        pool.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ==", "bodyText": "Why did we change the magic value version here?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549420811", "createdAt": "2020-12-28T17:14:54Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMjE4NQ==", "bodyText": "Why don't we need the verify call?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549422185", "createdAt": "2020-12-28T17:19:18Z", "author": {"login": "ijuma"}, "path": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticatorTest.java", "diffHunk": "@@ -67,8 +68,7 @@ public void testOversizeRequest() throws IOException {\n             invocation.<ByteBuffer>getArgument(0).putInt(SaslServerAuthenticator.MAX_RECEIVE_SIZE + 1);\n             return 4;\n         });\n-        authenticator.authenticate();\n-        verify(transportLayer).read(any(ByteBuffer.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMzEzMg==", "bodyText": "It seems that we are not testing the validate method anymore.", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549423132", "createdAt": "2020-12-28T17:22:49Z", "author": {"login": "ijuma"}, "path": "connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java", "diffHunk": "@@ -293,16 +295,13 @@ public void testEmptyStruct() {\n         new Struct(emptyStructSchema);\n     }\n \n-    @Test(expected = SchemaBuilderException.class)\n+    @Test\n     public void testDuplicateFields() {\n-        final Schema schema = SchemaBuilder.struct()\n-                .name(\"testing\")\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .build();\n-        final Struct struct = new Struct(schema)\n-                .put(\"id\", \"testing\");\n-        struct.validate();\n+        assertThrows(SchemaBuilderException.class, () -> SchemaBuilder.struct()\n+            .name(\"testing\")\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73"}, "originalPosition": 177}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2d573308af4028363743bdde98a3e93662cece3", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/f2d573308af4028363743bdde98a3e93662cece3", "committedDate": "2020-12-29T05:44:07Z", "message": "address review comment"}, "afterCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "committedDate": "2021-01-07T06:50:47Z", "message": "fix conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNTM4NTIy", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-563538522", "createdAt": "2021-01-07T14:40:05Z", "commit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo0MDowNVrOIPu66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNDo1Njo1MlrOIPvkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA==", "bodyText": "Should we keep the close?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553368298", "createdAt": "2021-01-07T14:40:05Z", "author": {"login": "ijuma"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "diffHunk": "@@ -49,18 +49,17 @@\n public class ProcessorNodeTest {\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n+        assertThrows(StreamsException.class, () -> node.init(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n-        node.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2OTg3Mw==", "bodyText": "Why did we change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553369873", "createdAt": "2021-01-07T14:42:39Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -715,7 +711,7 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n   private def cleanMetricsRegistry(): Unit = {\n     val metrics = KafkaYammerMetrics.defaultRegistry\n-    metrics.allMetrics.keySet.forEach(metrics.removeMetric)\n+    metrics.allMetrics.keySet.forEach(m => metrics.removeMetric(m))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NjI5OA==", "bodyText": "Why did we increase maxBlockMs here?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553376298", "createdAt": "2021-01-07T14:53:00Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/integration/kafka/api/TransactionsTest.scala", "diffHunk": "@@ -407,46 +406,40 @@ class TransactionsTest extends KafkaServerTestHarness {\n     TestUtils.waitUntilTrue(() => offsetAndMetadata.equals(consumer.committed(Set(tp).asJava).get(tp)), \"cannot read committed offset\")\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testInitTransactionsTimeout(): Unit = {\n     testTimeout(false, producer => producer.initTransactions())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testSendOffsetsToTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.sendOffsetsToTransaction(\n       Map(new TopicPartition(topic1, 0) -> new OffsetAndMetadata(0)).asJava, \"test-group\"))\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testCommitTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.commitTransaction())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testAbortTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.abortTransaction())\n   }\n \n-  def testTimeout(needInitAndSendMsg: Boolean,\n+  private def testTimeout(needInitAndSendMsg: Boolean,\n                   timeoutProcess: KafkaProducer[Array[Byte], Array[Byte]] => Unit): Unit = {\n-    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs =  1000)\n-\n+    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs = 3000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA==", "bodyText": "Why did you change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553378820", "createdAt": "2021-01-07T14:56:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNTY1MzU4", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-563565358", "createdAt": "2021-01-07T15:11:52Z", "commit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxMTo1MlrOIPwIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNToxMTo1MlrOIPwIrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4ODIwNQ==", "bodyText": "Why did we change this?", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553388205", "createdAt": "2021-01-07T15:11:52Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala", "diffHunk": "@@ -343,7 +340,7 @@ class DynamicBrokerConfigTest {\n \n     class TestAuthorizer extends Authorizer with Reconfigurable {\n       @volatile var superUsers = \"\"\n-      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = Map.empty.asJava\n+      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = util.Collections.emptyMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MzI0NzQz", "url": "https://github.com/apache/kafka/pull/9520#pullrequestreview-564324743", "createdAt": "2021-01-08T14:59:48Z", "commit": {"oid": "f48e4f2875dc2817166cfebf135a46f9dc55b68d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f48e4f2875dc2817166cfebf135a46f9dc55b68d", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/f48e4f2875dc2817166cfebf135a46f9dc55b68d", "committedDate": "2021-01-07T18:33:16Z", "message": "Revert \"revert more changes\"\n\nThis reverts commit d0e2236e96db0b514f4d2c07641eb236feb1de74."}, "afterCommit": {"oid": "90588f259b156fcffb26d925196b7da15c647695", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/90588f259b156fcffb26d925196b7da15c647695", "committedDate": "2021-01-10T05:38:23Z", "message": "fix QuotaUtilsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be166f24b34a4fae5a6ad75571df0df3ff687cd", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/1be166f24b34a4fae5a6ad75571df0df3ff687cd", "committedDate": "2021-01-10T07:11:29Z", "message": "MINOR: replace test \"expected\" parameter by assertThrows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a5b51027621386b467094c382b7e006a67f495", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/70a5b51027621386b467094c382b7e006a67f495", "committedDate": "2021-01-10T07:11:29Z", "message": "replace org.scalatest.Assertions by junit as much as possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcdba8a4b6cc19839fbc42ee5485c5631056f334", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/fcdba8a4b6cc19839fbc42ee5485c5631056f334", "committedDate": "2021-01-10T07:11:29Z", "message": "replace all ExpectedException or @test(expected = Exception.class) by assertThrows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdf7f9b5e01225be07723ab624aa4f45e6d417ad", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/bdf7f9b5e01225be07723ab624aa4f45e6d417ad", "committedDate": "2021-01-10T07:11:29Z", "message": "address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fe0f9c6ac544f180136a7d86e9ccde7e6da226e", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/3fe0f9c6ac544f180136a7d86e9ccde7e6da226e", "committedDate": "2021-01-10T07:11:29Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed00227129730f36576c6cfd6535497015d037e3", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/ed00227129730f36576c6cfd6535497015d037e3", "committedDate": "2021-01-10T07:11:29Z", "message": "revert unnecessary changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1275c81d0d73462467a78d814ace48c8a9c3544", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/c1275c81d0d73462467a78d814ace48c8a9c3544", "committedDate": "2021-01-10T07:11:29Z", "message": "revert changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adff89925fc6b8837d9721e2891f8ee00476e3b4", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/adff89925fc6b8837d9721e2891f8ee00476e3b4", "committedDate": "2021-01-10T07:11:29Z", "message": "revert more changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41cd0beedf85001cfcb1e610bc19556fa09ec3c1", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/41cd0beedf85001cfcb1e610bc19556fa09ec3c1", "committedDate": "2021-01-10T07:11:29Z", "message": "Revert \"revert more changes\"\n\nThis reverts commit d0e2236e96db0b514f4d2c07641eb236feb1de74."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "committedDate": "2021-01-10T07:11:29Z", "message": "fix QuotaUtilsTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90588f259b156fcffb26d925196b7da15c647695", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/90588f259b156fcffb26d925196b7da15c647695", "committedDate": "2021-01-10T05:38:23Z", "message": "fix QuotaUtilsTest"}, "afterCommit": {"oid": "4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "author": {"user": {"login": "chia7712", "name": "Chia-Ping Tsai"}}, "url": "https://github.com/apache/kafka/commit/4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "committedDate": "2021-01-10T07:11:29Z", "message": "fix QuotaUtilsTest"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2907, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}