{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTI2ODI5", "number": 8204, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyNjowN1rOD3WMOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTozODo1OFrOEw6mDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzYxODQ5OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyNjowN1rOGNjfEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyNjowN1rOGNjfEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2NjA2NA==", "bodyText": "Looking at the initialization of workerConfigTransformer I see it should be made final.\nAnd then I notice that this is the case for connectorClientConfigOverridePolicy and all the class members of ConnectorStatusMetricsGroup. @tombentley do you mind tightening these types as well?", "url": "https://github.com/apache/kafka/pull/8204#discussion_r416866064", "createdAt": "2020-04-28T19:26:07Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java", "diffHunk": "@@ -220,6 +220,8 @@ public void stop() {\n \n         workerMetricsGroup.close();\n         connectorStatusMetricsGroup.close();\n+\n+        workerConfigTransformer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b06197f4c1949d21177358701627f41d226ec26"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY1NDk3OnYy", "diffSide": "RIGHT", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNjoyN1rOGNj17w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNjoyN1rOGNj17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTkxOQ==", "bodyText": "should we also change this class to implement AutoCloseable?\nThis can't be used immediately in a try-with-resources clause, but probably better to signal the existence of this method at the class level.", "url": "https://github.com/apache/kafka/pull/8204#discussion_r416871919", "createdAt": "2020-04-28T19:36:27Z", "author": {"login": "kkonstantine"}, "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java", "diffHunk": "@@ -98,4 +101,8 @@ public void onCompletion(Throwable error, Void result) {\n         HerderRequest request = worker.herder().restartConnector(ttl, connectorName, cb);\n         connectorRequests.put(path, request);\n     }\n+\n+    public void close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b06197f4c1949d21177358701627f41d226ec26"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE4Nzg3OnYy", "diffSide": "RIGHT", "path": "clients/src/test/java/org/apache/kafka/common/config/provider/MockFileConfigProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0Mjo0OFrOGOFG4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0Mjo0OFrOGOFG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNjkyOA==", "bodyText": "Seems volatile would works as well in this case. But that's fine for this test class.", "url": "https://github.com/apache/kafka/pull/8204#discussion_r417416928", "createdAt": "2020-04-29T15:42:48Z", "author": {"login": "kkonstantine"}, "path": "clients/src/test/java/org/apache/kafka/common/config/provider/MockFileConfigProvider.java", "diffHunk": "@@ -19,11 +19,46 @@\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n public class MockFileConfigProvider extends FileConfigProvider {\n \n+    private static final Map<String, MockFileConfigProvider> INSTANCES = Collections.synchronizedMap(new HashMap<>());\n+    private String id;\n+    private boolean closed = false;\n+\n+    public void configure(Map<String, ?> configs) {\n+        Object id = configs.get(\"testId\");\n+        if (id == null) {\n+            throw new RuntimeException(getClass().getName() + \" missing 'testId' config\");\n+        }\n+        if (this.id != null) {\n+            throw new RuntimeException(getClass().getName() + \" instance was configured twice\");\n+        }\n+        this.id = id.toString();\n+        INSTANCES.put(id.toString(), this);\n+    }\n+\n     @Override\n     protected Reader reader(String path) throws IOException {\n         return new StringReader(\"key=testKey\\npassword=randomPassword\");\n     }\n+\n+    @Override\n+    public synchronized void close() {\n+        closed = true;\n+    }\n+\n+    public static void assertClosed(String id) {\n+        MockFileConfigProvider instance = INSTANCES.remove(id);\n+        assertNotNull(instance);\n+        synchronized (instance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec295242830e88fa5e4b6f8dc13911053dbc92d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzI3MTE2OnYy", "diffSide": "RIGHT", "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTozODo1OFrOHmw-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNTo1MDozNFrOHm-fUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMDM2Mg==", "bodyText": "if an exception occurs between line 477 and line 486, then the close function won't be called.  The solution would be to either create a type for providers that extends Map<String, ConfigProvider> and implements Autoclosable, or to simply put an explicit try/finally block here to ensure that the close function is called in every case.  That also implies that instantiateConfigProviders should be modified so that if an exception is thrown from inside it, any previously opened ConfigProvider instances are closed.", "url": "https://github.com/apache/kafka/pull/8204#discussion_r510410362", "createdAt": "2020-10-22T19:38:58Z", "author": {"login": "jherico"}, "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -483,6 +483,7 @@ public void logUnused() {\n                 resolvedOriginals.putAll(result.data());\n             }\n         }\n+        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4ff2aa6a62c1e35c225f7bd1a7e54bda6e51c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDYzMTc2Mw==", "bodyText": "Good observations @jherico . I believe the latter approach, of closing all the instantiated providers if an exception occurs in both cases, would be the most straightforward fix.\nIf you'd be interested in submitting a fix, that would be very welcome!", "url": "https://github.com/apache/kafka/pull/8204#discussion_r510631763", "createdAt": "2020-10-23T05:50:34Z", "author": {"login": "kkonstantine"}, "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -483,6 +483,7 @@ public void logUnused() {\n                 resolvedOriginals.putAll(result.data());\n             }\n         }\n+        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMDM2Mg=="}, "originalCommit": {"oid": "bc4ff2aa6a62c1e35c225f7bd1a7e54bda6e51c9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}