{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTEwOTk0", "number": 7917, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTo0NDowN1rODW0zww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTo0NDowN1rODW0zww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjYwNDgzOnYy", "diffSide": "RIGHT", "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTo0NDowN1rOFbzRrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTo1ODozOVrOFbznGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NTk4MA==", "bodyText": "Can we not use TestUtils.waitUntilMetadataIsPropagated?", "url": "https://github.com/apache/kafka/pull/7917#discussion_r364695980", "createdAt": "2020-01-09T11:44:07Z", "author": {"login": "ijuma"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -91,14 +91,11 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n   }\n \n   def waitForTopicCreated(topicName: String, timeout: Int = 10000): Unit = {\n-    val finishTime = System.currentTimeMillis() + timeout\n-    var result = false\n-    while (System.currentTimeMillis() < finishTime && !result) {\n-      val topics = adminClient.listTopics(new ListTopicsOptions().listInternal(true)).names().get()\n-      result = topics.contains(topicName)\n-      Thread.sleep(100)\n-    }\n-    assertTrue(s\"Topic $topicName has not been created within the given $timeout time\", result)\n+    // Wait until metadata is propagated to all brokers so that adminClient.listTopics returns the topic from any broker\n+    TestUtils.waitUntilTrue(() => servers.forall { server => server.metadataCache.contains(topicName) },\n+      s\"Topic not created and propagated within $timeout ms\", timeout)\n+    val topics = adminClient.listTopics(new ListTopicsOptions().listInternal(true)).names().get()\n+    assertTrue(s\"Topic $topicName not returned by adminClient\", topics.contains(topicName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "697225578783cc980096f1161b908c12c56ffc11"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcwMTQ2Ng==", "bodyText": "@ijuma Thanks for the review. Yes, we can use that, updated.", "url": "https://github.com/apache/kafka/pull/7917#discussion_r364701466", "createdAt": "2020-01-09T11:58:39Z", "author": {"login": "rajinisivaram"}, "path": "core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala", "diffHunk": "@@ -91,14 +91,11 @@ class TopicCommandWithAdminClientTest extends KafkaServerTestHarness with Loggin\n   }\n \n   def waitForTopicCreated(topicName: String, timeout: Int = 10000): Unit = {\n-    val finishTime = System.currentTimeMillis() + timeout\n-    var result = false\n-    while (System.currentTimeMillis() < finishTime && !result) {\n-      val topics = adminClient.listTopics(new ListTopicsOptions().listInternal(true)).names().get()\n-      result = topics.contains(topicName)\n-      Thread.sleep(100)\n-    }\n-    assertTrue(s\"Topic $topicName has not been created within the given $timeout time\", result)\n+    // Wait until metadata is propagated to all brokers so that adminClient.listTopics returns the topic from any broker\n+    TestUtils.waitUntilTrue(() => servers.forall { server => server.metadataCache.contains(topicName) },\n+      s\"Topic not created and propagated within $timeout ms\", timeout)\n+    val topics = adminClient.listTopics(new ListTopicsOptions().listInternal(true)).names().get()\n+    assertTrue(s\"Topic $topicName not returned by adminClient\", topics.contains(topicName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5NTk4MA=="}, "originalCommit": {"oid": "697225578783cc980096f1161b908c12c56ffc11"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4303, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}