{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjA3NTQ1", "number": 8803, "title": "KAFKA-10102: update ProcessorTopology instead of rebuilding it", "bodyText": "Rather than recreate the entire topology when we find new regex matched input partitions, we can just update the relevant pieces.\nOnly the SourceNodes and ProcessorTopology seem to care about the input topics, and we can actually extract this information out of the SourceNode altogether by pulling it into the ProcessorTopology.\nShould go to 2.6", "createdAt": "2020-06-05T04:02:58Z", "url": "https://github.com/apache/kafka/pull/8803", "merged": true, "mergeCommit": {"oid": "5bcd7cca2263b4c7909c46a9fce2bd8aec2c3835"}, "closed": true, "closedAt": "2020-06-08T22:55:16Z", "author": {"login": "ableegoldman"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoUci6AFqTQyNTM4NjQ3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcocrVwAFqTQyNTY5OTY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Mzg2NDc1", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425386475", "createdAt": "2020-06-05T15:08:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTowODo0MFrOGfyaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTozMDo1M1rOGfzPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NDkzMA==", "bodyText": "We do not need to pass in the topics here, just make the topic string creation logic inside ProcessorTopology since the data is stored there.", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435984930", "createdAt": "2020-06-05T15:08:40Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java", "diffHunk": "@@ -112,7 +106,7 @@ public String toString() {\n     /**\n      * @return a string representation of this node starting with the given indent, useful for debugging.\n      */\n-    public String toString(final String indent) {\n+    public String toString(final String indent, final List<String> topics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDQ5Ng==", "bodyText": "Why don't we just verify the name of processorTopology.source(\"topic-2\") to be source-1?", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435990496", "createdAt": "2020-06-05T15:17:42Z", "author": {"login": "abbccdda"}, "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java", "diffHunk": "@@ -149,6 +150,29 @@ public void shouldGetTerminalNodes() {\n         assertThat(processorTopology.terminalNodes(), equalTo(mkSet(\"processor-2\", \"sink-1\")));\n     }\n \n+    @Test\n+    public void shouldUpdateSourceTopicsWithNewMatchingTopic() {\n+        topology.addSource(\"source-1\", \"topic-1\");\n+        final ProcessorTopology processorTopology = topology.getInternalBuilder(\"X\").buildTopology();\n+\n+        assertNull(processorTopology.source(\"topic-2\"));\n+        processorTopology.updateSourceTopics(Collections.singletonMap(\"source-1\", asList(\"topic-1\", \"topic-2\")));\n+\n+        assertThat(processorTopology.source(\"topic-2\"), instanceOf(SourceNode.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MzY2Mw==", "bodyText": "For this update function, should we also look at the sourceNodesByName and make sure their keysets are matching, otherwise we would throw illegal state here? I think this is legitimate insurance before @cadonna starts the topology revolution work.", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435993663", "createdAt": "2020-06-05T15:22:41Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -131,6 +139,16 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n+    public void updateSourceTopics(final Map<String, List<String>> nodeToSourceTopics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NTg2Mg==", "bodyText": "Nice to simplify :)", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435995862", "createdAt": "2020-06-05T15:26:18Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -270,16 +270,7 @@ private SourceNodeFactory(final String name,\n \n         @Override\n         public ProcessorNode<K, V> build() {\n-            final List<String> sourceTopics = nodeToSourceTopics.get(name);\n-\n-            // if it is subscribed via patterns, it is possible that the topic metadata has not been updated\n-            // yet and hence the map from source node to topics is stale, in this case we put the pattern as a place holder;\n-            // this should only happen for debugging since during runtime this function should always be called after the metadata has updated.\n-            if (sourceTopics == null) {\n-                return new SourceNode<>(name, Collections.singletonList(String.valueOf(pattern)), timestampExtractor, keyDeserializer, valDeserializer);\n-            } else {\n-                return new SourceNode<>(name, maybeDecorateInternalSourceTopics(sourceTopics), timestampExtractor, keyDeserializer, valDeserializer);\n-            }\n+            return new SourceNode<>(name, timestampExtractor, keyDeserializer, valDeserializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5Nzc1OA==", "bodyText": "nit: space", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435997758", "createdAt": "2020-06-05T15:29:26Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -167,11 +185,21 @@ public String toString() {\n      * @return A string representation of this instance.\n      */\n     public String toString(final String indent) {\n+        final Map<SourceNode<?, ?>, List<String>> sourceToTopics = new HashMap<>();\n+        for (final Map.Entry<String, SourceNode<?, ?>> sourceNodeEntry : sourcesByTopic.entrySet()) {\n+            final String topic = sourceNodeEntry.getKey();\n+            final SourceNode<?, ?> source = sourceNodeEntry.getValue();\n+            sourceToTopics.computeIfAbsent(source, s -> new ArrayList<>());\n+            sourceToTopics.get(source).add(topic);\n+        }\n+\n         final StringBuilder sb = new StringBuilder(indent + \"ProcessorTopology:\\n\");\n \n         // start from sources\n-        for (final SourceNode<?, ?> source : sourcesByTopic.values()) {\n-            sb.append(source.toString(indent + \"\\t\")).append(childrenToString(indent + \"\\t\", source.children()));\n+        for (final Map.Entry<SourceNode<?, ?>, List<String>> sourceNodeEntry : sourceToTopics.entrySet()) {\n+            final SourceNode<?, ?> source  = sourceNodeEntry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5ODYzNw==", "bodyText": "Does the new map ensure a topological order?", "url": "https://github.com/apache/kafka/pull/8803#discussion_r435998637", "createdAt": "2020-06-05T15:30:53Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -167,11 +185,21 @@ public String toString() {\n      * @return A string representation of this instance.\n      */\n     public String toString(final String indent) {\n+        final Map<SourceNode<?, ?>, List<String>> sourceToTopics = new HashMap<>();\n+        for (final Map.Entry<String, SourceNode<?, ?>> sourceNodeEntry : sourcesByTopic.entrySet()) {\n+            final String topic = sourceNodeEntry.getKey();\n+            final SourceNode<?, ?> source = sourceNodeEntry.getValue();\n+            sourceToTopics.computeIfAbsent(source, s -> new ArrayList<>());\n+            sourceToTopics.get(source).add(topic);\n+        }\n+\n         final StringBuilder sb = new StringBuilder(indent + \"ProcessorTopology:\\n\");\n \n         // start from sources\n-        for (final SourceNode<?, ?> source : sourcesByTopic.values()) {\n-            sb.append(source.toString(indent + \"\\t\")).append(childrenToString(indent + \"\\t\", source.children()));\n+        for (final Map.Entry<SourceNode<?, ?>, List<String>> sourceNodeEntry : sourceToTopics.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTczMTk2", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425573196", "createdAt": "2020-06-05T19:38:51Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozODo1MVrOGf7AYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo0MjowNVrOGf7Fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNTc5Mw==", "bodyText": "I prefer we get a newbie ticket to test out this logic in a unit test case.", "url": "https://github.com/apache/kafka/pull/8803#discussion_r436125793", "createdAt": "2020-06-05T19:38:51Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -167,12 +195,36 @@ public String toString() {\n      * @return A string representation of this instance.\n      */\n     public String toString(final String indent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNzEzNQ==", "bodyText": "Could we add a unit test in StreamTaskTest?", "url": "https://github.com/apache/kafka/pull/8803#discussion_r436127135", "createdAt": "2020-06-05T19:42:05Z", "author": {"login": "abbccdda"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -495,12 +496,9 @@ public void closeDirty() {\n     }\n \n     @Override\n-    public void update(final Set<TopicPartition> topicPartitions, final ProcessorTopology processorTopology) {\n-        super.update(topicPartitions, processorTopology);\n+    public void update(final Set<TopicPartition> topicPartitions, final Map<String, List<String>> nodeToSourceTopics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjU4NTQy", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425658542", "createdAt": "2020-06-05T22:16:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNjoxM1rOGf-2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNjoxM1rOGf-2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODY5OQ==", "bodyText": "Should we have a sanity check, that no topic is added twice?", "url": "https://github.com/apache/kafka/pull/8803#discussion_r436188699", "createdAt": "2020-06-05T22:16:13Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java", "diffHunk": "@@ -131,6 +142,23 @@ public boolean hasPersistentGlobalStore() {\n         return false;\n     }\n \n+    public void updateSourceTopics(final Map<String, List<String>> sourceTopicsByName) {\n+        if (!sourceTopicsByName.keySet().equals(sourceNodesByName.keySet())) {\n+            log.error(\"Set of source nodes do not match: \\n\" +\n+                \"sourceNodesByName = {}\\n\" +\n+                \"sourceTopicsByName = {}\",\n+                sourceNodesByName.keySet(), sourceTopicsByName.keySet());\n+            throw new IllegalStateException(\"Tried to update source topics but source nodes did not match\");\n+        }\n+        sourceNodesByTopic.clear();\n+        for (final Map.Entry<String, List<String>> sourceEntry : sourceTopicsByName.entrySet()) {\n+            final String nodeName = sourceEntry.getKey();\n+            for (final String topic : sourceEntry.getValue()) {\n+                sourceNodesByTopic.put(topic, sourceNodesByName.get(nodeName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjU4ODU2", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425658856", "createdAt": "2020-06-05T22:17:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNzoxMFrOGf-3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNzoxMFrOGf-3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODk2Ng==", "bodyText": "Thanks for the cleanup!", "url": "https://github.com/apache/kafka/pull/8803#discussion_r436188966", "createdAt": "2020-06-05T22:17:10Z", "author": {"login": "mjsax"}, "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -512,18 +510,16 @@ public void closeAndRecycleState() {\n         }\n         switch (state()) {\n             case CREATED:\n-            case RUNNING:\n             case RESTORING:\n+            case RUNNING:\n             case SUSPENDED:\n                 stateMgr.recycle();\n                 recordCollector.close();\n                 break;\n-\n             case CLOSED:\n-                throw new IllegalStateException(\"Illegal state \" + state() + \" while closing active task \" + id);\n-\n+                throw new IllegalStateException(\"Illegal state \" + state() + \" while recycling active task \" + id);\n             default:\n-                throw new IllegalStateException(\"Unknown state \" + state() + \" while closing active task \" + id);\n+                throw new IllegalStateException(\"Unknown state \" + state() + \" while recycling active task \" + id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjU5MTU3", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425659157", "createdAt": "2020-06-05T22:18:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16a2027b88351e911ece554bead6a2d9105de53", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/c16a2027b88351e911ece554bead6a2d9105de53", "committedDate": "2020-06-05T22:30:40Z", "message": "dont rebuild topology, remove topics from SourceNode and fix toString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d29fed9e7be299c2c2f04597fc024308e1aa8931", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/d29fed9e7be299c2c2f04597fc024308e1aa8931", "committedDate": "2020-06-05T22:30:40Z", "message": "get source node from node name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f36f51e182f8e617a52c72da92484ac7ab5f730", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/3f36f51e182f8e617a52c72da92484ac7ab5f730", "committedDate": "2020-06-05T22:30:40Z", "message": "tests compiling & checkstyl'in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89abefbacd5137f7b8a80fe1ba7fbd4b69389e3a", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/89abefbacd5137f7b8a80fe1ba7fbd4b69389e3a", "committedDate": "2020-06-05T22:30:40Z", "message": "fix TM test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0b281391f5a0465cdbb6f490ece04e2336ba447", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/f0b281391f5a0465cdbb6f490ece04e2336ba447", "committedDate": "2020-06-05T22:30:40Z", "message": "github review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43cd2c54c32092381c04afb27094c7859b3e3b01", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/43cd2c54c32092381c04afb27094c7859b3e3b01", "committedDate": "2020-06-05T22:30:40Z", "message": "add StreamTask test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81deef5a458af200212138e0cdbe3d66cf08a568", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/81deef5a458af200212138e0cdbe3d66cf08a568", "committedDate": "2020-06-05T22:30:40Z", "message": "sanity check for unique topics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "81deef5a458af200212138e0cdbe3d66cf08a568", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/81deef5a458af200212138e0cdbe3d66cf08a568", "committedDate": "2020-06-05T22:30:40Z", "message": "sanity check for unique topics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a200ccbd54035438ae8628a6fadb43d3b174a3", "author": {"user": {"login": "ableegoldman", "name": "A. Sophie Blee-Goldman"}}, "url": "https://github.com/apache/kafka/commit/61a200ccbd54035438ae8628a6fadb43d3b174a3", "committedDate": "2020-06-05T22:36:35Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njk5Njcw", "url": "https://github.com/apache/kafka/pull/8803#pullrequestreview-425699670", "createdAt": "2020-06-06T01:07:45Z", "commit": {"oid": "61a200ccbd54035438ae8628a6fadb43d3b174a3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 861, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}