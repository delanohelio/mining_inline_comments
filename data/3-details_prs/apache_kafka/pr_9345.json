{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MzQxMDc3", "number": 9345, "title": "KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651)", "bodyText": "Adds support for SSL key and trust stores to be specified in PEM format either as files or directly as configuration values.\nCommitter Checklist (excluded from commit message)\n\n Verify design and implementation\n Verify test coverage and CI build status\n Verify documentation (including upgrade notes)", "createdAt": "2020-09-28T19:01:02Z", "url": "https://github.com/apache/kafka/pull/9345", "merged": true, "mergeCommit": {"oid": "7be8bd8cbfea5cc19f815a142c4689e97728ea4b"}, "closed": true, "closedAt": "2020-10-06T18:13:44Z", "author": {"login": "rajinisivaram"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNkykWABqjM4MTg0ODEwODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP5pUQgBqjM4NDU5MTY0ODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNzkyNDcy", "url": "https://github.com/apache/kafka/pull/9345#pullrequestreview-502792472", "createdAt": "2020-10-06T10:21:35Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoyMTozNVrOHc_rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjoyMTowOVrOHdDoHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NTUzMg==", "bodyText": "unused usePemCerts?", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500165532", "createdAt": "2020-10-06T10:21:35Z", "author": {"login": "omkreddy"}, "path": "clients/src/test/java/org/apache/kafka/common/network/CertStores.java", "diffHunk": "@@ -54,13 +60,30 @@ public CertStores(boolean server, String commonName, InetAddress hostAddress) th\n     }\n \n     private CertStores(boolean server, String commonName, TestSslUtils.CertificateBuilder certBuilder) throws Exception {\n+        this(server, commonName, \"RSA\", certBuilder, false);\n+    }\n+\n+    private CertStores(boolean server, String commonName, String keyAlgorithm, TestSslUtils.CertificateBuilder certBuilder, boolean usePem) throws Exception {\n         String name = server ? \"server\" : \"client\";\n         Mode mode = server ? Mode.SERVER : Mode.CLIENT;\n-        File truststoreFile = File.createTempFile(name + \"TS\", \".jks\");\n-        sslConfig = TestSslUtils.createSslConfig(!server, true, mode, truststoreFile, name, commonName, certBuilder);\n+        File truststoreFile = usePem ? null : File.createTempFile(name + \"TS\", \".jks\");\n+        sslConfig = new SslConfigsBuilder(mode)\n+                .useClientCert(!server)\n+                .certAlias(name)\n+                .cn(commonName)\n+                .createNewTrustStore(truststoreFile)\n+                .certBuilder(certBuilder)\n+                .algorithm(keyAlgorithm)\n+                .usePem(usePem)\n+                .build();\n     }\n \n+\n     public Map<String, Object> getTrustingConfig(CertStores truststoreConfig) {\n+        return getTrustingConfig(truststoreConfig, false);\n+    }\n+\n+    public Map<String, Object> getTrustingConfig(CertStores truststoreConfig, boolean usePemCerts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4NjQzMw==", "bodyText": "Can we remove empty else block?", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500186433", "createdAt": "2020-10-06T11:01:05Z", "author": {"login": "omkreddy"}, "path": "clients/src/test/java/org/apache/kafka/test/TestSslUtils.java", "diffHunk": "@@ -199,6 +206,156 @@ public static void createKeyStore(String filename,\n         return builder.build();\n     }\n \n+    public static void convertToPem(Map<String, Object> sslProps, boolean writeToFile, boolean encryptPrivateKey) throws Exception {\n+        String tsPath = (String) sslProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+        String tsType = (String) sslProps.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n+        Password tsPassword = (Password) sslProps.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        Password trustCerts = (Password) sslProps.remove(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG);\n+        if (trustCerts == null && tsPath != null) {\n+            trustCerts = exportCertificates(tsPath, tsPassword, tsType);\n+        }\n+        if (trustCerts != null) {\n+            if (tsPath == null) {\n+                tsPath = File.createTempFile(\"truststore\", \".pem\").getPath();\n+                sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, tsPath);\n+            }\n+            sslProps.put(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, PEM_TYPE);\n+            if (writeToFile)\n+                writeToFile(tsPath, trustCerts);\n+            else {\n+                sslProps.put(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, trustCerts);\n+                sslProps.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+            }\n+        }\n+\n+        String ksPath = (String) sslProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        Password certChain = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG);\n+        Password key = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_KEY_CONFIG);\n+        if (certChain == null && ksPath != null) {\n+            String ksType = (String) sslProps.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n+            Password ksPassword = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+            Password keyPassword = (Password) sslProps.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG);\n+            certChain = exportCertificates(ksPath, ksPassword, ksType);\n+            Password pemKeyPassword = encryptPrivateKey ? keyPassword : null;\n+            key = exportPrivateKey(ksPath, ksPassword, keyPassword, ksType, pemKeyPassword);\n+            if (!encryptPrivateKey)\n+                sslProps.remove(SslConfigs.SSL_KEY_PASSWORD_CONFIG);\n+        } else if (!encryptPrivateKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NzczNA==", "bodyText": "SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG => SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500197734", "createdAt": "2020-10-06T11:22:55Z", "author": {"login": "omkreddy"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -923,9 +926,12 @@ object KafkaConfig {\n   val SslKeystoreLocationDoc = SslConfigs.SSL_KEYSTORE_LOCATION_DOC\n   val SslKeystorePasswordDoc = SslConfigs.SSL_KEYSTORE_PASSWORD_DOC\n   val SslKeyPasswordDoc = SslConfigs.SSL_KEY_PASSWORD_DOC\n+  val SslKeystoreKeyDoc = SslConfigs.SSL_KEYSTORE_KEY_DOC\n+  val SslKeystoreCertificateChainDoc = SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG\n   val SslTruststoreTypeDoc = SslConfigs.SSL_TRUSTSTORE_TYPE_DOC\n   val SslTruststorePasswordDoc = SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC\n   val SslTruststoreLocationDoc = SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC\n+  val SslTruststoreCertificatesDoc = SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5ODA0NQ==", "bodyText": "SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG => SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500198045", "createdAt": "2020-10-06T11:23:37Z", "author": {"login": "omkreddy"}, "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -923,9 +926,12 @@ object KafkaConfig {\n   val SslKeystoreLocationDoc = SslConfigs.SSL_KEYSTORE_LOCATION_DOC\n   val SslKeystorePasswordDoc = SslConfigs.SSL_KEYSTORE_PASSWORD_DOC\n   val SslKeyPasswordDoc = SslConfigs.SSL_KEY_PASSWORD_DOC\n+  val SslKeystoreKeyDoc = SslConfigs.SSL_KEYSTORE_KEY_DOC\n+  val SslKeystoreCertificateChainDoc = SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIzMDE3Mw==", "bodyText": "unused node variable here and other methods.", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500230173", "createdAt": "2020-10-06T12:21:09Z", "author": {"login": "omkreddy"}, "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -167,17 +181,12 @@ public void testValidEndpointIdentificationSanIp() throws Exception {\n     @Test\n     public void testValidEndpointIdentificationCN() throws Exception {\n         String node = \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba3773c3fead43d4d30cc246f9e9fd9eb1736fa2", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/ba3773c3fead43d4d30cc246f9e9fd9eb1736fa2", "committedDate": "2020-10-06T14:35:08Z", "message": "KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b203a8373333ba3c64ce14ea397f39c0147f646e", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/b203a8373333ba3c64ce14ea397f39c0147f646e", "committedDate": "2020-10-06T14:35:08Z", "message": "Add new SSL configs to KafkaConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "committedDate": "2020-10-06T14:54:14Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "author": {"user": {"login": "rajinisivaram", "name": "Rajini Sivaram"}}, "url": "https://github.com/apache/kafka/commit/19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "committedDate": "2020-10-06T14:54:14Z", "message": "Address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 695, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}