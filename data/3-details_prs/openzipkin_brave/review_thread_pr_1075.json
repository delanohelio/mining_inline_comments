{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjA5Njk1", "number": 1075, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjo0NToyMVrODdOcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzo1MzowM1rODdPPpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTcyMDAwOnYy", "diffSide": "RIGHT", "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjo0NToyMlrOFltNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNjo0NToyMlrOFltNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA4MjQyNQ==", "bodyText": "copied from the parser#response javadoc", "url": "https://github.com/openzipkin/brave/pull/1075#discussion_r375082425", "createdAt": "2020-02-05T06:45:22Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "diffHunk": "@@ -176,16 +176,25 @@ public Span handleSend(HttpClientRequest request, Span span) {\n    * <p>This is typically called once the response headers are received, and after the span is\n    * {@link brave.Tracer.SpanInScope#close() no longer in scope}.\n    *\n+   * <p>Note: Either the response or error parameters may be null, but not both.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1f4dd790549481182a3d2779f49f67e45e0570"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTg1MDYzOnYy", "diffSide": "RIGHT", "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzo1MzowM1rOFlubtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODoyMjo0OFrOFlvFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjM4OA==", "bodyText": "Should we throw an exception instead of using assert since it indicates bad code?", "url": "https://github.com/openzipkin/brave/pull/1075#discussion_r375102388", "createdAt": "2020-02-05T07:53:03Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "diffHunk": "@@ -176,16 +176,25 @@ public Span handleSend(HttpClientRequest request, Span span) {\n    * <p>This is typically called once the response headers are received, and after the span is\n    * {@link brave.Tracer.SpanInScope#close() no longer in scope}.\n    *\n+   * <p>Note: Either the response or error parameters may be null, but not both.\n+   *\n    * @see HttpClientParser#response(HttpAdapter, Object, Throwable, SpanCustomizer)\n    * @since 4.3\n    */\n   public void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span) {\n-    if (response instanceof HttpClientResponse) {\n-      HttpClientResponse.Adapter adapter =\n-        new HttpClientResponse.Adapter((HttpClientResponse) response);\n-      handleFinish(adapter, adapter.unwrapped, error, span);\n-    } else {\n+    assert response != null || error != null :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f93d336e13987ed6a637f992f522be8d725ef4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjU5Ng==", "bodyText": "Or log? How do we find the bugs in the instrumentation?", "url": "https://github.com/openzipkin/brave/pull/1075#discussion_r375102596", "createdAt": "2020-02-05T07:53:40Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "diffHunk": "@@ -176,16 +176,25 @@ public Span handleSend(HttpClientRequest request, Span span) {\n    * <p>This is typically called once the response headers are received, and after the span is\n    * {@link brave.Tracer.SpanInScope#close() no longer in scope}.\n    *\n+   * <p>Note: Either the response or error parameters may be null, but not both.\n+   *\n    * @see HttpClientParser#response(HttpAdapter, Object, Throwable, SpanCustomizer)\n    * @since 4.3\n    */\n   public void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span) {\n-    if (response instanceof HttpClientResponse) {\n-      HttpClientResponse.Adapter adapter =\n-        new HttpClientResponse.Adapter((HttpClientResponse) response);\n-      handleFinish(adapter, adapter.unwrapped, error, span);\n-    } else {\n+    assert response != null || error != null :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjM4OA=="}, "originalCommit": {"oid": "d4f93d336e13987ed6a637f992f522be8d725ef4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMDY1OA==", "bodyText": "we didn't enforce this before, but they would have had a NPE. I think I like trading that assert out for a IAE is good.. wdyt?", "url": "https://github.com/openzipkin/brave/pull/1075#discussion_r375110658", "createdAt": "2020-02-05T08:16:36Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "diffHunk": "@@ -176,16 +176,25 @@ public Span handleSend(HttpClientRequest request, Span span) {\n    * <p>This is typically called once the response headers are received, and after the span is\n    * {@link brave.Tracer.SpanInScope#close() no longer in scope}.\n    *\n+   * <p>Note: Either the response or error parameters may be null, but not both.\n+   *\n    * @see HttpClientParser#response(HttpAdapter, Object, Throwable, SpanCustomizer)\n    * @since 4.3\n    */\n   public void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span) {\n-    if (response instanceof HttpClientResponse) {\n-      HttpClientResponse.Adapter adapter =\n-        new HttpClientResponse.Adapter((HttpClientResponse) response);\n-      handleFinish(adapter, adapter.unwrapped, error, span);\n-    } else {\n+    assert response != null || error != null :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjM4OA=="}, "originalCommit": {"oid": "d4f93d336e13987ed6a637f992f522be8d725ef4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExMzEwMg==", "bodyText": "I think it's common to run with asserts off though so it'd still be NPE in a lot of cases. If we want to make sure to throw an exception we'd want to throw one explicitly - though \"log once\" might be fine too for these checks.", "url": "https://github.com/openzipkin/brave/pull/1075#discussion_r375113102", "createdAt": "2020-02-05T08:22:48Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java", "diffHunk": "@@ -176,16 +176,25 @@ public Span handleSend(HttpClientRequest request, Span span) {\n    * <p>This is typically called once the response headers are received, and after the span is\n    * {@link brave.Tracer.SpanInScope#close() no longer in scope}.\n    *\n+   * <p>Note: Either the response or error parameters may be null, but not both.\n+   *\n    * @see HttpClientParser#response(HttpAdapter, Object, Throwable, SpanCustomizer)\n    * @since 4.3\n    */\n   public void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span) {\n-    if (response instanceof HttpClientResponse) {\n-      HttpClientResponse.Adapter adapter =\n-        new HttpClientResponse.Adapter((HttpClientResponse) response);\n-      handleFinish(adapter, adapter.unwrapped, error, span);\n-    } else {\n+    assert response != null || error != null :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMjM4OA=="}, "originalCommit": {"oid": "d4f93d336e13987ed6a637f992f522be8d725ef4"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1510, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}