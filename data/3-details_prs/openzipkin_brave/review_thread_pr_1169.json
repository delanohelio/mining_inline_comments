{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDg0Mjcz", "number": 1169, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MjoyNlrOD0l0bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OTowNlrOD0l-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcyMTc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/ITTracingFilter_Consumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MjoyNlrOGJmPMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MjoyNlrOGJmPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNjg0OQ==", "bodyText": "funny we documented like this, but didn't use it!", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412716849", "createdAt": "2020-04-22T06:52:26Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/ITTracingFilter_Consumer.java", "diffHunk": "@@ -150,7 +149,7 @@\n     client.get().sayHello(\"jorge\");\n \n     assertThat(reporter.takeRemoteSpan(Span.Kind.CLIENT).name())\n-      .isEqualTo(\"greeterservice/sayhello\");\n+      .isEqualTo(\"brave.dubbo.rpc.greeterservice/sayhello\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcyNjIzOnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MzozOVrOGJmRxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MzozOVrOGJmRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzUwOA==", "bodyText": "an earlier mistake where we made generic parsers, but didn't use them.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717508", "createdAt": "2020-04-22T06:53:39Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcyNzQ4OnYy", "diffSide": "LEFT", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1Mzo1OFrOGJmScg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1Mzo1OFrOGJmScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzY4Mg==", "bodyText": "oneWay is not needed in order to figure out how to proceed.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717682", "createdAt": "2020-04-22T06:53:58Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);\n+      String method = DubboParser.method(invocation);\n       span.name(service + \"/\" + method);\n-      parseRemoteAddress(rpcContext, span);\n+      DubboParser.parseRemoteIpAndPort(span);\n       span.start();\n     }\n \n-    boolean isOneway = false, deferFinish = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc0ODA2OnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OTowNlrOGJmd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo1NToyNlrOGJrSow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA==", "bodyText": "How about String.valueOf(code) for all the cases? I don't think we convert HTTP codes to names in tags, and it makes sure tags are consistently an integer without worrying about maintenance.\nAlternatively, I'd return UNKNOWN_EXCEPTION here so tags are consistently a string. A tag that's string or int seems hard to use.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412720628", "createdAt": "2020-04-22T06:59:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMjk2Mw==", "bodyText": "this is to marry up with rpc.error_code which is defined as a string", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412722963", "createdAt": "2020-04-22T07:03:03Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMzg3NA==", "bodyText": "I wouldn't add anything they don't define as a code as a code, as that is imho more confusing. the fallback to numeric is only there to help us understand drift on dubbo.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412723874", "createdAt": "2020-04-22T07:04:40Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNDM5Nw==", "bodyText": "but yeah if you want I can revert this, just we need it anyway in dubbo for the RPC model, we literally have the string names and should use them.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412724397", "createdAt": "2020-04-22T07:05:38Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNTE3NQ==", "bodyText": "Nah think it's ok", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412725175", "createdAt": "2020-04-22T07:07:00Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNjIwNw==", "bodyText": "probably the _EXCEPTION thing is a bit much I was trying to match what they call it. for example, they have constants and boolean methods for each code http://dubbo.apache.org/docs/2.7.x/api/org/apache/dubbo/rpc/RpcException.html", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412726207", "createdAt": "2020-04-22T07:08:50Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNzM3OA==", "bodyText": "anyway I don't care enough to debate this I'll just put number and it can stay like that even when we move to rpc model.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412727378", "createdAt": "2020-04-22T07:10:42Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczODMyMg==", "bodyText": "I added them back though I feel really bad about this and think we are doing ourselves and users a disservice. we intentionally say we prefer code names instead of numbers, and we  aren't doing that and offered bad choices instead from an irrelevant comparison with http. I'm not in a convincing mood, so I'll fold despite feeling awful about it.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412738322", "createdAt": "2020-04-22T07:27:48Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MjI1MQ==", "bodyText": "#1169 (comment)\nAh - I meant it seems ok to stick with string too like before the latest commit.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412742251", "createdAt": "2020-04-22T07:33:55Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5OTY1MQ==", "bodyText": "I'll resurrect this in a new commit as it is probably deserving to have in a PR title anyway. thanks!", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412799651", "createdAt": "2020-04-22T08:55:26Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA=="}, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1370, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}