{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODYwODQx", "number": 1268, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzozOTowOFrOE0QsOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo0MDo0MlrOE0Qt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjM0ODc0OnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzozOTowOFrOHr4_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo0Nzo1NFrOHr5M9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDUwOA==", "bodyText": "let's catch throwable vs guess which exceptions might be raised during this? less maintenance that way.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (IllegalStateException e) {\n          \n          \n            \n                } catch (Throwable t) {\n          \n          \n            \n                  propagateIfFatal(t);", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515784508", "createdAt": "2020-11-02T07:39:08Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "diffHunk": "@@ -17,12 +17,17 @@\n import org.apache.kafka.common.header.Header;\n import org.apache.kafka.common.header.Headers;\n \n+import static brave.kafka.clients.KafkaTracing.log;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n final class KafkaHeaders {\n   static void replaceHeader(Headers headers, String key, String value) {\n-    headers.remove(key);\n-    headers.add(key, value.getBytes(UTF_8));\n+    try {\n+      headers.remove(key);\n+      headers.add(key, value.getBytes(UTF_8));\n+    } catch (IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4ODAyMQ==", "bodyText": "You did see that headers.remove and headers.add are both declared as throws IllegalStateException? Though since that's not a checked exception I can see the argument that it's not actually easy to maintain.", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515788021", "createdAt": "2020-11-02T07:47:54Z", "author": {"login": "m50d"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "diffHunk": "@@ -17,12 +17,17 @@\n import org.apache.kafka.common.header.Header;\n import org.apache.kafka.common.header.Headers;\n \n+import static brave.kafka.clients.KafkaTracing.log;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n final class KafkaHeaders {\n   static void replaceHeader(Headers headers, String key, String value) {\n-    headers.remove(key);\n-    headers.add(key, value.getBytes(UTF_8));\n+    try {\n+      headers.remove(key);\n+      headers.add(key, value.getBytes(UTF_8));\n+    } catch (IllegalStateException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDUwOA=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjM1MTMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo0MDowNlrOHr5AxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMDoyOVrOHr5zyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDkwMQ==", "bodyText": "update this comment as it drifted both in the content here and the api used from logging (JUL doesn't have parameterizations)", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515784901", "createdAt": "2020-11-02T07:40:06Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "diffHunk": "@@ -243,4 +252,35 @@ static void addTags(ConsumerRecord<?, ?> record, SpanCustomizer result) {\n     }\n     result.tag(KafkaTags.KAFKA_TOPIC_TAG, record.topic());\n   }\n+\n+\n+  /**\n+   * Avoids array allocation when logging a parameterized message when fine level is disabled. The\n+   * second parameter is optional.\n+   *\n+   * <p>Ex.\n+   * <pre>{@code\n+   * try {\n+   *    return message.getStringProperty(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4OTQ4MQ==", "bodyText": "I don't quite follow? I copied this from JmsTracing, it's invoking the same API and I assume the parameterization is working (if not then it must be broken in JmsTracing as well).", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515789481", "createdAt": "2020-11-02T07:51:25Z", "author": {"login": "m50d"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "diffHunk": "@@ -243,4 +252,35 @@ static void addTags(ConsumerRecord<?, ?> record, SpanCustomizer result) {\n     }\n     result.tag(KafkaTags.KAFKA_TOPIC_TAG, record.topic());\n   }\n+\n+\n+  /**\n+   * Avoids array allocation when logging a parameterized message when fine level is disabled. The\n+   * second parameter is optional.\n+   *\n+   * <p>Ex.\n+   * <pre>{@code\n+   * try {\n+   *    return message.getStringProperty(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDkwMQ=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MDEyNw==", "bodyText": "sorry I mean \"message.getStringProperty\" is not relevant in kafka as the name is not message and there's no method getStringProperty. basically the javadoc needs a fixup.\nsimilarly the catch in the javadoc here has drifted.\nmake sense?", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515790127", "createdAt": "2020-11-02T07:52:58Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "diffHunk": "@@ -243,4 +252,35 @@ static void addTags(ConsumerRecord<?, ?> record, SpanCustomizer result) {\n     }\n     result.tag(KafkaTags.KAFKA_TOPIC_TAG, record.topic());\n   }\n+\n+\n+  /**\n+   * Avoids array allocation when logging a parameterized message when fine level is disabled. The\n+   * second parameter is optional.\n+   *\n+   * <p>Ex.\n+   * <pre>{@code\n+   * try {\n+   *    return message.getStringProperty(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDkwMQ=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MjE1OA==", "bodyText": "I see - I've made the javadoc more generic (I don't think it makes sense to use an extremely specific example here as this method is general-purpose?)", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515792158", "createdAt": "2020-11-02T07:57:25Z", "author": {"login": "m50d"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "diffHunk": "@@ -243,4 +252,35 @@ static void addTags(ConsumerRecord<?, ?> record, SpanCustomizer result) {\n     }\n     result.tag(KafkaTags.KAFKA_TOPIC_TAG, record.topic());\n   }\n+\n+\n+  /**\n+   * Avoids array allocation when logging a parameterized message when fine level is disabled. The\n+   * second parameter is optional.\n+   *\n+   * <p>Ex.\n+   * <pre>{@code\n+   * try {\n+   *    return message.getStringProperty(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDkwMQ=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5Nzk2Mg==", "bodyText": "I don't even mind no javadoc, just don't want it wrong :P", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515797962", "createdAt": "2020-11-02T08:10:29Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaTracing.java", "diffHunk": "@@ -243,4 +252,35 @@ static void addTags(ConsumerRecord<?, ?> record, SpanCustomizer result) {\n     }\n     result.tag(KafkaTags.KAFKA_TOPIC_TAG, record.topic());\n   }\n+\n+\n+  /**\n+   * Avoids array allocation when logging a parameterized message when fine level is disabled. The\n+   * second parameter is optional.\n+   *\n+   * <p>Ex.\n+   * <pre>{@code\n+   * try {\n+   *    return message.getStringProperty(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NDkwMQ=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjM1Mjg4OnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo0MDo0MlrOHr5BqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo1NToyN1rOHr5ZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NTEyOA==", "bodyText": "add a test for this class that has the read-only nature that triggered all of this?", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515785128", "createdAt": "2020-11-02T07:40:42Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "diffHunk": "@@ -17,12 +17,17 @@\n import org.apache.kafka.common.header.Header;\n import org.apache.kafka.common.header.Headers;\n \n+import static brave.kafka.clients.KafkaTracing.log;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n final class KafkaHeaders {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MTI1Mg==", "bodyText": "Will do", "url": "https://github.com/openzipkin/brave/pull/1268#discussion_r515791252", "createdAt": "2020-11-02T07:55:27Z", "author": {"login": "m50d"}, "path": "instrumentation/kafka-clients/src/main/java/brave/kafka/clients/KafkaHeaders.java", "diffHunk": "@@ -17,12 +17,17 @@\n import org.apache.kafka.common.header.Header;\n import org.apache.kafka.common.header.Headers;\n \n+import static brave.kafka.clients.KafkaTracing.log;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n final class KafkaHeaders {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NTEyOA=="}, "originalCommit": {"oid": "15a01c9322fc2a6996bfd3fe7fa41f2116f0068f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1495, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}