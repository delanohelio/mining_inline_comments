{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODQ0MTcy", "number": 1221, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0ODoxOVrOD9qLWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1MTozN1rOD9qOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTgwNzYzOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0ODoxOVrOGXSGJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo0ODoxOVrOGXSGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NjkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <h3>MutableSpan.error() vs MutableSpan.tag(\"error)</h3>\n          \n          \n            \n             * <h3>MutableSpan.error() vs MutableSpan.tag(\"error\")</h3>", "url": "https://github.com/openzipkin/brave/pull/1221#discussion_r427066919", "createdAt": "2020-05-19T06:48:19Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -46,6 +46,45 @@\n  * <p>In other words, this type is not thread safe. If you need to mutate this span in a different\n  * thread, use the {@linkplain #MutableSpan(MutableSpan) copy constructor}.\n  *\n+ * <h3>MutableSpan.error() vs MutableSpan.tag(\"error)</h3>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29348f0e9a67328c0cdfd8daa4683193378e8323"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTgxNjMxOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1MTozN1rOGXSLng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNjo1MTozN1rOGXSLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2ODMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>{@code MutableSpan.error() -> MutableSpan.tags[\"exception\"]} to match metrics dimension</li>\n          \n          \n            \n             *   <li>{@code MutableSpan.error() -> MutableSpan.tag(\"exception\", normalized)} to match metrics dimension</li>", "url": "https://github.com/openzipkin/brave/pull/1221#discussion_r427068318", "createdAt": "2020-05-19T06:51:37Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -46,6 +46,45 @@\n  * <p>In other words, this type is not thread safe. If you need to mutate this span in a different\n  * thread, use the {@linkplain #MutableSpan(MutableSpan) copy constructor}.\n  *\n+ * <h3>MutableSpan.error() vs MutableSpan.tag(\"error\")</h3>\n+ * If {@link #tag(String)} returns a result for \"error\", it was from a layered api, instrumentation or the user.\n+ * {@link #error()} is usually an uncaught exception and does not imply there's a tag \"error\".\n+ *\n+ * <p>Here are examples of a span with {@link #error()}, but no \"error\" tag:\n+ * <ul>\n+ *   <li>{@code brave.Span.error(new OutOfMemoryError()) -> MutableSpan.error(new OutOfMemoryError())}</li>\n+ *   <li>{@code brave.Span.error(new RpcException()) -> MutableSpan.error(new RpcException())}</li>\n+ *   <li>{@code brave.Span.error(new NullPointerException()) -> MutableSpan.error(new NullPointerException())}</li>\n+ * </ul>\n+ *\n+ * <p>The above are examples of exceptions that users typically do not process, so are unlikely to\n+ * parse into an \"error\" tag. The opposite is also true as not all errors are derived from\n+ * {@link Throwable}. Particularly, RPC frameworks often do not use exceptions as error signals.\n+ *\n+ * <p>Here are examples of a span with an \"error\" tag, but no {@link #error()}:\n+ * <ul>\n+ *   <li>{@code io.opentracing.Span.tag(ERROR, true) -> MutableSpan.tag(\"error\", \"true\")}</li>\n+ *   <li>{@code brave.SpanCustomizer.tag(\"error\", \"\") -> MutableSpan.tag(\"error\", \"\")}</li>\n+ *   <li>{@code brave.Span.tag(\"error\", \"CANCELLED\") -> MutableSpan.tag(\"error\", \"CANCELLED\")}</li>\n+ * </ul>\n+\n+ * <p>The above examples are using in-band apis in Brave. {@link SpanHandler} is after the fact.\n+ * Since there is no default \"error\" tag, span handlers here can tell the difference between\n+ * explicitly set error messages, and what's needed by their format. For example, those only looking\n+ * at Zipkin clones may forget that {@link #error()} exists for custom formats including metrics!\n+ *\n+ * <p>Here are examples of {@link SpanHandler#end(TraceContext, MutableSpan, SpanHandler.Cause)}\n+ * implementations that process errors:\n+ * <ul>\n+ *   <li>{@code MutableSpan.tag(\"error\", \"\")} to redact the error message from Zipkin</li>\n+ *   <li>{@code MutableSpan.error() -> MutableSpan.tags[\"exception\"]} to match metrics dimension</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f052a648748489df59fa874f65adb50a1887d6"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1463, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}