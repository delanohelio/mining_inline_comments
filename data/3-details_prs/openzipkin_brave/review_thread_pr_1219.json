{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjY1Mjk3", "number": 1219, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyNjo1MFrOD9Pppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozNzowMFrOD9Pv2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ2MTUxOnYy", "diffSide": "RIGHT", "path": "brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyNjo1MFrOGWn8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyNjo1MFrOGWn8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjMwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                spanHandler.end(context, span, FINISHED); // NOT ABANDONED!\n          \n          \n            \n                spanHandler.end(context, span, FINISHED); // NOT ORPHANED!", "url": "https://github.com/openzipkin/brave/pull/1219#discussion_r426376307", "createdAt": "2020-05-18T05:26:50Z", "author": {"login": "codefromthecrypt"}, "path": "brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java", "diffHunk": "@@ -28,6 +29,25 @@\n   TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(2L).build();\n   MutableSpan span = new MutableSpan(context, null);\n \n+  @Test public void goodMessageForUnstartedSpan() {\n+    spanHandler.end(context, span, FINISHED); // NOT ABANDONED!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63e7251277feeb7ef6f4d96f0792cd05fb48410d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ3NzM3OnYy", "diffSide": "RIGHT", "path": "brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozNzowMFrOGWoF8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozNzowMFrOGWoF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3ODczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // This will not be exactly the right timestamp Tracing.Builder.clock is overridden.\n          \n          \n            \n                    // This will not be exactly the right timestamp when Tracing.Builder.clock is overridden.", "url": "https://github.com/openzipkin/brave/pull/1219#discussion_r426378737", "createdAt": "2020-05-18T05:37:00Z", "author": {"login": "codefromthecrypt"}, "path": "brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java", "diffHunk": "@@ -90,14 +116,31 @@\n  */\n public final class IntegrationTestSpanHandler extends SpanHandler implements TestRule {\n   static final String ANY_STRING = \".+\";\n+\n   /**\n    * When testing servers or asynchronous clients, spans are finished on a worker thread. In order\n    * to read them on the main thread, we use a concurrent queue. As some implementations report\n    * after a response is sent, we use a blocking queue to prevent race conditions in tests.\n    */\n-  BlockingQueue<MutableSpan> spans = new LinkedBlockingQueue<>();\n+  final BlockingQueue<MutableSpan> spans = new LinkedBlockingQueue<>();\n+  final SpanHandler orphanTracker;\n   boolean ignoreAnySpans;\n \n+  public IntegrationTestSpanHandler() {\n+    // OrphanTracker detects to see if it should add \"brave.flushed\" or not, as it is used in\n+    // production some times and avoiding this could be helpful. This forces a failed match,\n+    // so that we can detect orphans even when no data was added.\n+    MutableSpan intentionallyWrongDefaultSpan = new MutableSpan();\n+    intentionallyWrongDefaultSpan.tag(\"not\", \"me\");\n+    orphanTracker = OrphanTracker.newBuilder()\n+        .defaultSpan(intentionallyWrongDefaultSpan)\n+        // This will not be exactly the right timestamp Tracing.Builder.clock is overridden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438aec0ce80fa448a44c2d9e3bd8854c69021744"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1458, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}