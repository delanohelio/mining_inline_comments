{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDgxNTQw", "number": 1180, "title": "Decouples propagatation \"extra\" from remote key names", "bodyText": "This starts the process of decoupling internals of BaggagePropagation\nso that we can allow remote configuration independent of state handling.\nI also noticed we can simplify TraceContext.extra() structurally by\nbacking unmodifiable lists with Arrays.asList as opposed to ArrayList.", "createdAt": "2020-04-29T04:27:09Z", "url": "https://github.com/openzipkin/brave/pull/1180", "merged": true, "mergeCommit": {"oid": "9ff7ce50df4010f3c1eda2f507182cfefbc3b790"}, "closed": true, "closedAt": "2020-04-29T05:28:05Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccQtelgH2gAyNDEwNDgxNTQwOjUwYjQ0OGE0NTQ4ZjYyNzY0ZWYyZjgwZTYyZDE2MGUzZTM1MTk1MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccRcBGgFqTQwMjM2NDkxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/50b448a4548f62764ef2f80e62d160e3e3519501", "committedDate": "2020-04-29T04:24:07Z", "message": "Decouples propagatation \"extra\" from remote key names\n\nThis starts the process of decoupling internals of BaggagePropagation\nso that we can allow remote configuration independent of state handling.\n\nI also noticed we can simplify `TraceContext.extra()` structurally by\nbacking unmodifiable lists with Arrays.asList as opposed to ArrayList."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzU3NzA0", "url": "https://github.com/openzipkin/brave/pull/1180#pullrequestreview-402357704", "createdAt": "2020-04-29T04:28:53Z", "commit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDoyODo1M1rOGNvWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDoyODo1M1rOGNvWNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2MDQwNQ==", "bodyText": "a later PR will clear up this odd coupling. The PR starts the process..", "url": "https://github.com/openzipkin/brave/pull/1180#discussion_r417060405", "createdAt": "2020-04-29T04:28:53Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -329,20 +368,24 @@ void inject(ExtraBaggageFields extraBaggageFields, R request) {\n     @Override public TraceContextOrSamplingFlags extract(R request) {\n       TraceContextOrSamplingFlags result = delegate.extract(request);\n \n-      // always allocate in case values are added late\n-      ExtraBaggageFields extraBaggageFields = propagation.factory.stateFactory.create();\n+      // Always allocate as fields could be local-only or have values added late\n+      ExtraBaggageFields extra = propagation.factory.extraFactory.create();\n+      TraceContextOrSamplingFlags.Builder builder = result.toBuilder().addExtra(extra);\n+\n+      if (propagation.factory.allKeyNames == null) return builder.build();\n+\n       for (RemoteHandlerWithKeys<K> handlerWithKeys : propagation.remoteHandlersWithKeys) {\n         for (K key : handlerWithKeys.keys) { // possibly multiple keys when prefixes are in use\n           String value = getter.get(request, key);\n           if (value != null) { // accept the first match\n-            if (extraBaggageFields.putRemoteValue(handlerWithKeys.handler, request, value)) {\n+            if (extra.putRemoteValue(handlerWithKeys.handler, request, value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzU4MDM2", "url": "https://github.com/openzipkin/brave/pull/1180#pullrequestreview-402358036", "createdAt": "2020-04-29T04:30:20Z", "commit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDozMDoyMFrOGNvXaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDozMDoyMFrOGNvXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2MDcxMw==", "bodyText": "I probably made this comment, it feels wrong :) anyway we can retouch this later.", "url": "https://github.com/openzipkin/brave/pull/1180#discussion_r417060713", "createdAt": "2020-04-29T04:30:20Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/Lists.java", "diffHunk": "@@ -14,30 +14,32 @@\n package brave.internal;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n public final class Lists {\n \n-  public static List<Object> ensureMutable(List<Object> list) {\n+  public static <E> List<E> ensureMutable(List<E> list) {\n     if (list instanceof ArrayList) return list;\n     int size = list.size();\n-    ArrayList<Object> mutable = new ArrayList<>(size);\n+    ArrayList<E> mutable = new ArrayList<>(size);\n     for (int i = 0; i < size; i++) {\n       mutable.add(list.get(i));\n     }\n     return mutable;\n   }\n \n-  public static List<Object> ensureImmutable(List<Object> list) {\n+  public static <E> List<E> ensureImmutable(List<E> list) {\n     if (list.isEmpty()) return Collections.emptyList();\n     // Faster to make a copy than check the type to see if it is already a singleton list\n     if (list.size() == 1) return Collections.singletonList(list.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzY0OTE1", "url": "https://github.com/openzipkin/brave/pull/1180#pullrequestreview-402364915", "createdAt": "2020-04-29T04:59:54Z", "commit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1OTo1NFrOGNvxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo1OTo1NFrOGNvxwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NzQ1OA==", "bodyText": "Yeah - feels like it might be true, but no need to feel eventually we can try benchmarking :)", "url": "https://github.com/openzipkin/brave/pull/1180#discussion_r417067458", "createdAt": "2020-04-29T04:59:54Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/Lists.java", "diffHunk": "@@ -14,30 +14,32 @@\n package brave.internal;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n public final class Lists {\n \n-  public static List<Object> ensureMutable(List<Object> list) {\n+  public static <E> List<E> ensureMutable(List<E> list) {\n     if (list instanceof ArrayList) return list;\n     int size = list.size();\n-    ArrayList<Object> mutable = new ArrayList<>(size);\n+    ArrayList<E> mutable = new ArrayList<>(size);\n     for (int i = 0; i < size; i++) {\n       mutable.add(list.get(i));\n     }\n     return mutable;\n   }\n \n-  public static List<Object> ensureImmutable(List<Object> list) {\n+  public static <E> List<E> ensureImmutable(List<E> list) {\n     if (list.isEmpty()) return Collections.emptyList();\n     // Faster to make a copy than check the type to see if it is already a singleton list\n     if (list.size() == 1) return Collections.singletonList(list.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2MDcxMw=="}, "originalCommit": {"oid": "50b448a4548f62764ef2f80e62d160e3e3519501"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1696, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}