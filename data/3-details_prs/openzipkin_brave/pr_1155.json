{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNDg0MzYz", "number": 1155, "title": "Starts making zipkin2.Span optional for external reporting", "bodyText": "This migrates data formerly handled only by the zipkin reporter into\nMutableSpan. To complete decoupling will take future pull requests\nthat add trace IDs to MutableSpan and make the logging reporter use\nMutableSpan by default instead of zipkin types.", "createdAt": "2020-04-13T05:42:10Z", "url": "https://github.com/openzipkin/brave/pull/1155", "merged": true, "mergeCommit": {"oid": "5b98da22e0994c5702f7ba150747f3d423f5fea2"}, "closed": true, "closedAt": "2020-04-13T08:28:18Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXIOrmgH2gAyNDAyNDg0MzYzOjhkYzhhZTJhODY2NmJjNGI1ZTQyZWZmZDlkZWVmMjQ3N2M2ODJjM2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXKUCwgH2gAyNDAyNDg0MzYzOjExYTA5NjE2OGI1NzZlZmI2NGY3N2MxYzA0ZWQ1MzUyMTI1NmFlODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8dc8ae2a8666bc4b5e42effd9deef2477c682c3e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/8dc8ae2a8666bc4b5e42effd9deef2477c682c3e", "committedDate": "2020-04-13T05:41:37Z", "message": "Starts making zipkin2.Span optional for external reporting\n\nThis migrates data formerly handled only by the zipkin reporter into\n`MutableSpan`. To complete decoupling will take future pull requests\nthat add trace IDs to `MutableSpan` and make the logging reporter use\n`MutableSpan` by default instead of zipkin types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2da404e54578034ced74650a2818d015d321cdc3", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/2da404e54578034ced74650a2818d015d321cdc3", "committedDate": "2020-04-13T05:49:10Z", "message": "drift"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/a870c0aa8b65e9daf6497797bc27b085304f0c1e", "committedDate": "2020-04-13T05:49:29Z", "message": "license"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTcyNzg1", "url": "https://github.com/openzipkin/brave/pull/1155#pullrequestreview-391972785", "createdAt": "2020-04-13T06:02:49Z", "commit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjowMjo1MFrOGEdnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjoxNjo1MFrOGEd0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMjY4Mg==", "bodyText": "Should this import be gone too?", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407332682", "createdAt": "2020-04-13T06:02:50Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -34,10 +35,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import zipkin2.reporter.AsyncReporter;\n import zipkin2.reporter.Reporter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzA2Mg==", "bodyText": "Maybe an <a> tag linking to the module or something. Currently, it's hard to know this is a maven artifact.", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407333062", "createdAt": "2020-04-13T06:04:21Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -210,11 +208,9 @@ public Builder endpoint(zipkin2.Endpoint endpoint) {\n     }\n \n     /**\n-     * Controls how spans are reported. Defaults to logging, but often an {@link AsyncReporter}\n-     * which batches spans before sending to Zipkin.\n-     *\n-     * The {@link AsyncReporter} includes a {@link Sender}, which is a driver for transports like\n-     * http, kafka and scribe.\n+     * Controls how {@linkplain TraceContext#sampled() remote sampled} spans report to a {@code\n+     * io.zipkin.reporter2:zipkin-reporter} destination. This input is usually a {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMzIwOA==", "bodyText": "That being said, I think it's still fairly standard to import even from optional dependencies.", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407333208", "createdAt": "2020-04-13T06:05:01Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -34,10 +35,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import zipkin2.reporter.AsyncReporter;\n import zipkin2.reporter.Reporter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzMjY4Mg=="}, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTMwMA==", "bodyText": "Think you still need to compare the values in case of hash collision", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407335300", "createdAt": "2020-04-13T06:13:51Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/handler/MutableSpanConverter.java", "diffHunk": "@@ -65,38 +76,30 @@ void convert(MutableSpan span, Span.Builder result) {\n         .build());\n     }\n \n-    String errorTag = span.tag(\"error\");\n-    if (errorTag == null && span.error() != null) {\n-      errorParser.error(span.error(), span);\n-    }\n-\n     span.forEachTag(Consumer.INSTANCE, result);\n     span.forEachAnnotation(Consumer.INSTANCE, result);\n     if (span.shared()) result.shared(true);\n+    if (span.debug()) result.debug(true);\n   }\n \n   // avoid re-allocating an endpoint when we have the same data\n-  void addLocalEndpoint(String serviceName, @Nullable String ip, int port, Span.Builder span) {\n-    if (serviceName == null) serviceName = localServiceName;\n-    if (ip == null) ip = localIp;\n-    if (port <= 0) port = localPort;\n-    if (localServiceName.equals(serviceName)\n-      && (localIp == null ? ip == null : localIp.equals(ip))\n-      && localPort == port) {\n-      span.localEndpoint(localEndpoint);\n+  void addLocalEndpoint(@Nullable String serviceName, @Nullable String ip, int port, Builder span) {\n+    if (serviceName != null) serviceName = serviceName.toLowerCase(Locale.ROOT);\n+    if (hashEndpointParameters(serviceName, ip, port) == defaultEndpointHashCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNTUzNg==", "bodyText": "Possibly was due to refactoring - suggest putting Span back here", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407335536", "createdAt": "2020-04-13T06:14:43Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/handler/MutableSpanConverter.java", "diffHunk": "@@ -65,38 +76,30 @@ void convert(MutableSpan span, Span.Builder result) {\n         .build());\n     }\n \n-    String errorTag = span.tag(\"error\");\n-    if (errorTag == null && span.error() != null) {\n-      errorParser.error(span.error(), span);\n-    }\n-\n     span.forEachTag(Consumer.INSTANCE, result);\n     span.forEachAnnotation(Consumer.INSTANCE, result);\n     if (span.shared()) result.shared(true);\n+    if (span.debug()) result.debug(true);\n   }\n \n   // avoid re-allocating an endpoint when we have the same data\n-  void addLocalEndpoint(String serviceName, @Nullable String ip, int port, Span.Builder span) {\n-    if (serviceName == null) serviceName = localServiceName;\n-    if (ip == null) ip = localIp;\n-    if (port <= 0) port = localPort;\n-    if (localServiceName.equals(serviceName)\n-      && (localIp == null ? ip == null : localIp.equals(ip))\n-      && localPort == port) {\n-      span.localEndpoint(localEndpoint);\n+  void addLocalEndpoint(@Nullable String serviceName, @Nullable String ip, int port, Builder span) {\n+    if (serviceName != null) serviceName = serviceName.toLowerCase(Locale.ROOT);\n+    if (hashEndpointParameters(serviceName, ip, port) == defaultEndpointHashCode) {\n+      span.localEndpoint(defaultEndpoint);\n     } else {\n       span.localEndpoint(Endpoint.newBuilder().serviceName(serviceName).ip(ip).port(port).build());\n     }\n   }\n \n-  enum Consumer implements TagConsumer<Span.Builder>, AnnotationConsumer<Span.Builder> {\n+  enum Consumer implements TagConsumer<Builder>, AnnotationConsumer<Builder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzMzNjA5NA==", "bodyText": "If not mistaken, this has been added mainly to support defaultSpan. Since defaultSpan only has three fields specified, it seems like it might be a net-loss to copy all these other default fields when creating a span.", "url": "https://github.com/openzipkin/brave/pull/1155#discussion_r407336094", "createdAt": "2020-04-13T06:16:50Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -74,113 +83,204 @@\n   ArrayList<Object> annotations;\n   Throwable error;\n \n+  /** @since 5.4 */\n   public MutableSpan() {\n-    // this cheats because it will not need to grow unless there are more than 5 tags\n-    tags = new ArrayList<>();\n-    // lazy initialize annotations\n-  }\n-\n-  /** Returns true if there was no data added. Usually this indicates an instrumentation bug. */\n-  public boolean isEmpty() {\n-    return kind == null\n-      && !shared\n-      && startTimestamp == 0L\n-      && finishTimestamp == 0L\n-      && name == null\n-      && localServiceName == null\n-      && localIp == null\n-      && remoteServiceName == null\n-      && remoteIp == null\n-      && localPort == 0\n-      && remotePort == 0\n-      && tags.isEmpty()\n-      && annotations == null\n-      && error == null;\n-  }\n-\n-  /** Returns the {@link brave.Span#name(String) span name} or null */\n+  }\n+\n+  /** @since 5.12 */\n+  public MutableSpan(MutableSpan toCopy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a870c0aa8b65e9daf6497797bc27b085304f0c1e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a55f14aadcce28380c688fb76781ec861ca430", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/d8a55f14aadcce28380c688fb76781ec861ca430", "committedDate": "2020-04-13T07:05:07Z", "message": "everything except collission on hashCode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98296196236648b9f2dc937bb7fa09632cf351f7", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/98296196236648b9f2dc937bb7fa09632cf351f7", "committedDate": "2020-04-13T07:18:15Z", "message": "clash of the hash codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b486a2a984e1710148eff7db9a08c2f9648c7d", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/d4b486a2a984e1710148eff7db9a08c2f9648c7d", "committedDate": "2020-04-13T07:21:51Z", "message": "imported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1960e1b3e1a6c43d15a4e91f4a3dfcf33f52d418", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/1960e1b3e1a6c43d15a4e91f4a3dfcf33f52d418", "committedDate": "2020-04-13T07:49:42Z", "message": "finito"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDA4MjI3", "url": "https://github.com/openzipkin/brave/pull/1155#pullrequestreview-392008227", "createdAt": "2020-04-13T07:50:57Z", "commit": {"oid": "1960e1b3e1a6c43d15a4e91f4a3dfcf33f52d418"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a3379474f5eee92b66efde07ba51e35e7ef4994", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/6a3379474f5eee92b66efde07ba51e35e7ef4994", "committedDate": "2020-04-13T08:01:16Z", "message": "remembering why I preferred hashCode (eventhough it isn't bulletproof) :P"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a096168b576efb64f77c1c04ed53521256ae89", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/11a096168b576efb64f77c1c04ed53521256ae89", "committedDate": "2020-04-13T08:07:17Z", "message": "polish"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1944, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}