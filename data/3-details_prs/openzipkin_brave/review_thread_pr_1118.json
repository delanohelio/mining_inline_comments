{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzkyMjU4", "number": 1118, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMjowOTo1NVrODqDYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzoyMlrODqDtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDIyMTM3OnYy", "diffSide": "RIGHT", "path": "instrumentation/httpasyncclient/src/main/java/brave/httpasyncclient/TracingHttpAsyncClientBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMjowOTo1NVrOF5m-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMjowOTo1NVrOF5m-IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1MTY0OA==", "bodyText": "BUG!", "url": "https://github.com/openzipkin/brave/pull/1118#discussion_r395951648", "createdAt": "2020-03-21T02:09:55Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/main/java/brave/httpasyncclient/TracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -76,7 +76,7 @@ public static HttpAsyncClientBuilder create(HttpTracing httpTracing) {\n \n   final class HandleSend implements HttpRequestInterceptor {\n     @Override public void process(HttpRequest request, HttpContext context) {\n-      TraceContext parent = (TraceContext) context.removeAttribute(TraceContext.class.getName());\n+      TraceContext parent = (TraceContext) context.getAttribute(TraceContext.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ce26178487724503775d50c68805a5fbaa94e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDI3NDc3OnYy", "diffSide": "RIGHT", "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzoyMlrOF5nZtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwNTo1MjowOVrOF5nyGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOQ==", "bodyText": "Either is fine but you could consider e.g. as(\"timestamp\") for some less code  (default fail message will dump it with this tag). A bit different than our other cases where we want to print something other than the asserted value.", "url": "https://github.com/openzipkin/brave/pull/1118#discussion_r395958709", "createdAt": "2020-03-21T03:57:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -142,6 +145,15 @@ private Span doTakeSpan() throws InterruptedException {\n     assertThat(result)\n       .withFailMessage(\"Span was not reported\")\n       .isNotNull();\n+\n+    assertThat(result.timestampAsLong())\n+      .withFailMessage(\"Expected a timestamp: %s\", result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d16ce26178487724503775d50c68805a5fbaa94e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2MzU2MQ==", "bodyText": "the intent was to print the span on failure, to see what was set. is there a better way than this to do that?", "url": "https://github.com/openzipkin/brave/pull/1118#discussion_r395963561", "createdAt": "2020-03-21T05:26:50Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -142,6 +145,15 @@ private Span doTakeSpan() throws InterruptedException {\n     assertThat(result)\n       .withFailMessage(\"Span was not reported\")\n       .isNotNull();\n+\n+    assertThat(result.timestampAsLong())\n+      .withFailMessage(\"Expected a timestamp: %s\", result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOQ=="}, "originalCommit": {"oid": "d16ce26178487724503775d50c68805a5fbaa94e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2NDkxMA==", "bodyText": "Oops nevermind for some reason misread that timestamp was passed to the fail message (sleepy). This seems good", "url": "https://github.com/openzipkin/brave/pull/1118#discussion_r395964910", "createdAt": "2020-03-21T05:51:28Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -142,6 +145,15 @@ private Span doTakeSpan() throws InterruptedException {\n     assertThat(result)\n       .withFailMessage(\"Span was not reported\")\n       .isNotNull();\n+\n+    assertThat(result.timestampAsLong())\n+      .withFailMessage(\"Expected a timestamp: %s\", result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOQ=="}, "originalCommit": {"oid": "d16ce26178487724503775d50c68805a5fbaa94e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2NDk1NQ==", "bodyText": "I guess the reason was timestamp: , maybe timestamp in span: but not a big deal", "url": "https://github.com/openzipkin/brave/pull/1118#discussion_r395964955", "createdAt": "2020-03-21T05:52:09Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -142,6 +145,15 @@ private Span doTakeSpan() throws InterruptedException {\n     assertThat(result)\n       .withFailMessage(\"Span was not reported\")\n       .isNotNull();\n+\n+    assertThat(result.timestampAsLong())\n+      .withFailMessage(\"Expected a timestamp: %s\", result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOQ=="}, "originalCommit": {"oid": "d16ce26178487724503775d50c68805a5fbaa94e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}