{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDAxMjMz", "number": 1167, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOToxM1rOD6m8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzoyNTo0NVrOD61AVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzgxOTU0OnYy", "diffSide": "RIGHT", "path": "brave/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOToxM1rOGSibcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyOToxM1rOGSibcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MTYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Spans returned by a tracer report data to Zipkin when , or do\n          \n          \n            \n            Spans returned by a tracer report data to Zipkin when finished, or do", "url": "https://github.com/openzipkin/brave/pull/1167#discussion_r422091632", "createdAt": "2020-05-08T11:29:13Z", "author": {"login": "codefromthecrypt"}, "path": "brave/README.md", "diffHunk": "@@ -56,7 +59,7 @@ The tracer creates and joins spans that model the latency of potentially\n distributed work. It can employ sampling to reduce overhead in process\n or to reduce the amount of data sent to Zipkin.\n \n-Spans returned by a tracer report data to Zipkin when finished, or do\n+Spans returned by a tracer report data to Zipkin when , or do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2240618b35d47927e18171b4e08893067a1317cb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDEyNDM3OnYy", "diffSide": "RIGHT", "path": "brave/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzoyNTo0NVrOGS4JLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzoyNTo0NVrOGS4JLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NzQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ```\n          \n          \n            \n            ```java", "url": "https://github.com/openzipkin/brave/pull/1167#discussion_r422447407", "createdAt": "2020-05-09T03:25:45Z", "author": {"login": "codefromthecrypt"}, "path": "brave/README.md", "diffHunk": "@@ -590,6 +593,69 @@ customizer.customize(tracingBuilder);\n ```\n A span metrics example is [here](src/test/java/brave/features/handler/SpanMetricsCustomizer.java)\n \n+### Non-Zipkin Span Reporting example\n+<h3>Non-Zipkin Span Reporting example</h3>\n+When reporting to a Zipkin compatible collector, use [io.zipkin.reporter2:zipkin-reporter-brave](https://github.com/openzipkin/zipkin-reporter-java).\n+\n+The below example highlights notes for those sending data into a different\n+format. Notably, most trace systems only need data at the `end` hook.\n+\n+```java\n+public boolean end(TraceContext context, MutableSpan span, Cause cause) {\n+  // Return when a user intentionally called Span.abandon()\n+  if (cause == Cause.ABANDONED) return true;\n+  // Sampled means \"remote sampled\", e.g. to the tracing system.\n+  if (!Boolean.TRUE.equals(context.sampled())) return true;\n+\n+  // span.tags(\"error\") is only set when instrumentation sets it. If your\n+  // format requires span.tags(\"error\"), use Tags.ERROR when span.error()\n+  // is set, but span.tags(\"error\") is not. Some formats will look at the\n+  // stack trace instead.\n+  maybeAddErrorTag(context, span);\n+  MyFormat customFormat = convert(context, span);\n+  nonZipkinReporter.report(converted);\n+  return true;\n+}\n+```\n+\n+### Child Counting Example\n+Some data formats desire knowing how many spans a parent created. Below is an\n+example of how to do that, using [WeakConcurrentMap](https://github.com/raphw/weak-lock-free).\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d52374cb3cb96155d95c40e4c9094c64a40fc7"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}