{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NjAyMDgw", "number": 1083, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjozOTozOVrODgCY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMzozMTozNlrODgD9FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTIwMTg4OnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjozOTozOVrOFqFoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjozOTozOVrOFqFoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjY4Nw==", "bodyText": "TODO: comment that we are using interceptor only in this case", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379676687", "createdAt": "2020-02-14T22:39:39Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingInterceptor.java", "diffHunk": "@@ -52,7 +55,14 @@ public static Interceptor create(HttpTracing httpTracing) {\n   @Override public Response intercept(Chain chain) throws IOException {\n     HttpClientRequest request = new HttpClientRequest(chain.request());\n \n-    Span span = handler.handleSend(request);\n+    Span span;\n+    TraceContext parent = chain.request().tag(TraceContext.class);\n+    if (parent != null) {\n+      span = handler.handleSend(request, parent != NULL_SENTINEL ? parent : null);\n+    } else {\n+      span = handler.handleSend(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63591c98c0170747b7e00a08716115b65b975709"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTM4NTYwOnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingCallFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowMjoyOFrOFqHUZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowMjoyOFrOFqHUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDQyMQ==", "bodyText": "note: we only need this because the interceptor can be used two different ways and we can't distinguish based on null alone. This is a conscious alternative to allocating another wrapper.", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379704421", "createdAt": "2020-02-15T01:02:28Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/okhttp3/src/main/java/brave/okhttp3/TracingCallFactory.java", "diffHunk": "@@ -33,6 +29,12 @@\n // NOTE: this is not an interceptor because the current span can get lost when there's a backlog.\n // This will be completely different after https://github.com/square/okhttp/issues/270\n public final class TracingCallFactory implements Call.Factory {\n+  /**\n+   * To save overhead, we use a null sentinel when there's no parent. This helps avoid looking at\n+   * the current trace context when there was no span in scope at invocation time.\n+   */\n+  static final TraceContext NULL_SENTINEL = TraceContext.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f735200046d061210edab51cc154dbb2022b1e95"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTQ1NzU5OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/Tracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMzozMDoyN1rOFqH7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMzozMDoyN1rOFqH7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDM5Ng==", "bodyText": "Remove such as", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379714396", "createdAt": "2020-02-15T03:30:27Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/Tracer.java", "diffHunk": "@@ -543,13 +543,28 @@ public ScopedSpan startScopedSpan(String name) {\n    * @since 5.8\n    */\n   public <T> Span nextSpan(SamplerFunction<T> samplerFunction, T arg) {\n-    return _toSpan(nextContext(samplerFunction, arg));\n+    return _toSpan(nextContext(samplerFunction, arg, currentTraceContext.get()));\n   }\n \n-  <T> TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg) {\n+  /**\n+   * Like {@link #nextSpan(SamplerFunction, Object)} except this controls the parent context\n+   * explicitly. This is useful when an invocation context is propagated manually, such as commonly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f735200046d061210edab51cc154dbb2022b1e95"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTQ1ODEzOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/Tracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMzozMTozN1rOFqH7nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMzozMTozN1rOFqH7nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNDQ2MA==", "bodyText": "parent of the new span, or {@code null} if it should have no parent", "url": "https://github.com/openzipkin/brave/pull/1083#discussion_r379714460", "createdAt": "2020-02-15T03:31:37Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/Tracer.java", "diffHunk": "@@ -543,13 +543,28 @@ public ScopedSpan startScopedSpan(String name) {\n    * @since 5.8\n    */\n   public <T> Span nextSpan(SamplerFunction<T> samplerFunction, T arg) {\n-    return _toSpan(nextContext(samplerFunction, arg));\n+    return _toSpan(nextContext(samplerFunction, arg, currentTraceContext.get()));\n   }\n \n-  <T> TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg) {\n+  /**\n+   * Like {@link #nextSpan(SamplerFunction, Object)} except this controls the parent context\n+   * explicitly. This is useful when an invocation context is propagated manually, such as commonly\n+   * the case with asynchronous client frameworks.\n+   *\n+   * @param samplerFunction invoked if there's no {@link CurrentTraceContext#get() current trace}\n+   * @param arg parameter to {@link SamplerFunction#trySample(Object)}\n+   * @param parent the potentially null parent to use for this span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f735200046d061210edab51cc154dbb2022b1e95"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1511, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}