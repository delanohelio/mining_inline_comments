{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MTY2OTcx", "number": 1170, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozMzo0M1rOD0qQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyMjo1N1rOD0rkjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTQ0NzkwOnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo-rpc/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozMzo0M1rOGJs8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozMzo0M1rOGJs8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyNjY0Nw==", "bodyText": "I hadn't realized Dubbo are still releasing the Alibaba library.. I bumped just to make sure they are still not adding error codes.", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412826647", "createdAt": "2020-04-22T09:33:43Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/pom.xml", "diffHunk": "@@ -32,7 +32,7 @@\n     <main.java.version>1.6</main.java.version>\n     <main.signature.artifact>java16</main.signature.artifact>\n     <!-- Use brave-instrumentation-dubbo for Apache Dubbo 2.7+, not this module. -->\n-    <dubbo.version>2.6.7</dubbo.version>\n+    <dubbo.version>2.6.8</dubbo.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTUwMDQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTo0NTozNVrOGJtcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoxOToxNFrOGJu15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNDg3NQ==", "bodyText": "I get where this is coming from. Just to share only one point I'm concerned about - if some servers in a fleet use a new version of instrumentation and others don't, the same exception shows up as name in some, int in others. It does seem quite rare though since why not bump instrumentation when bumping Dubbo? So all good here.", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412834875", "createdAt": "2020-04-22T09:45:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -69,19 +69,28 @@ static boolean parseRemoteIpAndPort(Span span) {\n   }\n \n   /**\n-   * We decided to not map Dubbo codes to human readable names like {@link\n-   * RpcException#BIZ_EXCEPTION} even though we defined \"rpc.error_code\" as a human readable name.\n-   *\n-   * <p>The reason was a comparison with HTTP status codes, and the choice was between returning\n-   * just numbers or reusing \"UNKNOWN_EXCEPTION\" which is defined in Dubbo for code \"0\" for any\n-   * unknown code. Returning numbers was the less bad option as it doesn't conflate code words.\n-   *\n-   * <p>Later, we can revert this back to code words, but once this gets into the RPC mapping for\n-   * Dubbo it will be hard to change.\n+   * This library is no-longer being released, so it should not have any maintenance on error codes.\n+   * The error codes here were defined in 2012.\n    */\n   @Nullable static String errorCode(Throwable error) {\n     if (error instanceof RpcException) {\n-      return String.valueOf(((RpcException) error).getCode());\n+      int code = ((RpcException) error).getCode();\n+      switch (code) {\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzOTk5MA==", "bodyText": "the only other option I can think of is using reflection in to lookup the symbols. Ex search for public static ints whose name ends in _EXCEPTION\nthat would make it no maintenance and since they are all public, unlikely to cause a weird crash.. wdyt?", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412839990", "createdAt": "2020-04-22T09:52:51Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -69,19 +69,28 @@ static boolean parseRemoteIpAndPort(Span span) {\n   }\n \n   /**\n-   * We decided to not map Dubbo codes to human readable names like {@link\n-   * RpcException#BIZ_EXCEPTION} even though we defined \"rpc.error_code\" as a human readable name.\n-   *\n-   * <p>The reason was a comparison with HTTP status codes, and the choice was between returning\n-   * just numbers or reusing \"UNKNOWN_EXCEPTION\" which is defined in Dubbo for code \"0\" for any\n-   * unknown code. Returning numbers was the less bad option as it doesn't conflate code words.\n-   *\n-   * <p>Later, we can revert this back to code words, but once this gets into the RPC mapping for\n-   * Dubbo it will be hard to change.\n+   * This library is no-longer being released, so it should not have any maintenance on error codes.\n+   * The error codes here were defined in 2012.\n    */\n   @Nullable static String errorCode(Throwable error) {\n     if (error instanceof RpcException) {\n-      return String.valueOf(((RpcException) error).getCode());\n+      int code = ((RpcException) error).getCode();\n+      switch (code) {\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNDg3NQ=="}, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg0MTMxNw==", "bodyText": "I will give it a try. we use one-time reflection in a lot of code, like servlet etc. we would have heard complaints by now if someone is unable to use reflection at all..", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412841317", "createdAt": "2020-04-22T09:54:50Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -69,19 +69,28 @@ static boolean parseRemoteIpAndPort(Span span) {\n   }\n \n   /**\n-   * We decided to not map Dubbo codes to human readable names like {@link\n-   * RpcException#BIZ_EXCEPTION} even though we defined \"rpc.error_code\" as a human readable name.\n-   *\n-   * <p>The reason was a comparison with HTTP status codes, and the choice was between returning\n-   * just numbers or reusing \"UNKNOWN_EXCEPTION\" which is defined in Dubbo for code \"0\" for any\n-   * unknown code. Returning numbers was the less bad option as it doesn't conflate code words.\n-   *\n-   * <p>Later, we can revert this back to code words, but once this gets into the RPC mapping for\n-   * Dubbo it will be hard to change.\n+   * This library is no-longer being released, so it should not have any maintenance on error codes.\n+   * The error codes here were defined in 2012.\n    */\n   @Nullable static String errorCode(Throwable error) {\n     if (error instanceof RpcException) {\n-      return String.valueOf(((RpcException) error).getCode());\n+      int code = ((RpcException) error).getCode();\n+      switch (code) {\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNDg3NQ=="}, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1NDQwMg==", "bodyText": "Thanks, that sounds like a nice approach!", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412854402", "createdAt": "2020-04-22T10:13:51Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -69,19 +69,28 @@ static boolean parseRemoteIpAndPort(Span span) {\n   }\n \n   /**\n-   * We decided to not map Dubbo codes to human readable names like {@link\n-   * RpcException#BIZ_EXCEPTION} even though we defined \"rpc.error_code\" as a human readable name.\n-   *\n-   * <p>The reason was a comparison with HTTP status codes, and the choice was between returning\n-   * just numbers or reusing \"UNKNOWN_EXCEPTION\" which is defined in Dubbo for code \"0\" for any\n-   * unknown code. Returning numbers was the less bad option as it doesn't conflate code words.\n-   *\n-   * <p>Later, we can revert this back to code words, but once this gets into the RPC mapping for\n-   * Dubbo it will be hard to change.\n+   * This library is no-longer being released, so it should not have any maintenance on error codes.\n+   * The error codes here were defined in 2012.\n    */\n   @Nullable static String errorCode(Throwable error) {\n     if (error instanceof RpcException) {\n-      return String.valueOf(((RpcException) error).getCode());\n+      int code = ((RpcException) error).getCode();\n+      switch (code) {\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNDg3NQ=="}, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1NzgyOQ==", "bodyText": "couldn't use _EXCEPTION as they are not consistent :) we blindly trust int constants for now. It is unlikely to cause an issue I think and I agree this is better. thanks, rag!", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412857829", "createdAt": "2020-04-22T10:19:14Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -69,19 +69,28 @@ static boolean parseRemoteIpAndPort(Span span) {\n   }\n \n   /**\n-   * We decided to not map Dubbo codes to human readable names like {@link\n-   * RpcException#BIZ_EXCEPTION} even though we defined \"rpc.error_code\" as a human readable name.\n-   *\n-   * <p>The reason was a comparison with HTTP status codes, and the choice was between returning\n-   * just numbers or reusing \"UNKNOWN_EXCEPTION\" which is defined in Dubbo for code \"0\" for any\n-   * unknown code. Returning numbers was the less bad option as it doesn't conflate code words.\n-   *\n-   * <p>Later, we can revert this back to code words, but once this gets into the RPC mapping for\n-   * Dubbo it will be hard to change.\n+   * This library is no-longer being released, so it should not have any maintenance on error codes.\n+   * The error codes here were defined in 2012.\n    */\n   @Nullable static String errorCode(Throwable error) {\n     if (error instanceof RpcException) {\n-      return String.valueOf(((RpcException) error).getCode());\n+      int code = ((RpcException) error).getCode();\n+      switch (code) {\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNDg3NQ=="}, "originalCommit": {"oid": "eaa0df891e052049d24ece2be78a1829599b4eb9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTY1ODE4OnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyMToyMFrOGJu7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyMToyMFrOGJu7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1OTE2OA==", "bodyText": "Nice", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412859168", "createdAt": "2020-04-22T10:21:20Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "diffHunk": "@@ -25,6 +29,36 @@\n import org.apache.dubbo.rpc.support.RpcUtils;\n \n final class DubboParser {\n+  static final Map<Integer, String> ERROR_CODE_NUMBER_TO_NAME = errorCodeNumberToName();\n+\n+  /**\n+   * Dubbo adds error codes sometimes. For example, they added two in the last two years. If we did\n+   * a simple switch/case of each code, like {@link RpcException#BIZ_EXCEPTION}, new code names\n+   * would not be seen until an upgrade of Brave. That, or we'd have to fall back to a code number\n+   * until the upgrade of Brave converged.\n+   *\n+   * <p>This uses reflection instead, which is unlikely to fail as Dubbo's error codes are public\n+   * constants.\n+   */\n+  static Map<Integer, String> errorCodeNumberToName() {\n+    Map<Integer, String> result = new LinkedHashMap<>();\n+    for (Field field : RpcException.class.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers()) && field.getType() == int.class) {\n+        try {\n+          result.put((Integer) field.get(null), field.getName());\n+        } catch (Exception e) {\n+          assert false : e.getMessage(); // make all unit tests fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc774eb782dff63d1bc76010f4362988a488e99"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTY2NDE1OnYy", "diffSide": "RIGHT", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDoyMjo1N1rOGJu_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDozMzozM1rOGJvZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2MDE5MA==", "bodyText": "How about checking Modifier.isPublic too?", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412860190", "createdAt": "2020-04-22T10:22:57Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "diffHunk": "@@ -25,6 +29,36 @@\n import org.apache.dubbo.rpc.support.RpcUtils;\n \n final class DubboParser {\n+  static final Map<Integer, String> ERROR_CODE_NUMBER_TO_NAME = errorCodeNumberToName();\n+\n+  /**\n+   * Dubbo adds error codes sometimes. For example, they added two in the last two years. If we did\n+   * a simple switch/case of each code, like {@link RpcException#BIZ_EXCEPTION}, new code names\n+   * would not be seen until an upgrade of Brave. That, or we'd have to fall back to a code number\n+   * until the upgrade of Brave converged.\n+   *\n+   * <p>This uses reflection instead, which is unlikely to fail as Dubbo's error codes are public\n+   * constants.\n+   */\n+  static Map<Integer, String> errorCodeNumberToName() {\n+    Map<Integer, String> result = new LinkedHashMap<>();\n+    for (Field field : RpcException.class.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers()) && field.getType() == int.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbc774eb782dff63d1bc76010f4362988a488e99"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2Njg0OA==", "bodyText": "yeah good idea. it makes more sense reading it now, also.", "url": "https://github.com/openzipkin/brave/pull/1170#discussion_r412866848", "createdAt": "2020-04-22T10:33:33Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "diffHunk": "@@ -25,6 +29,36 @@\n import org.apache.dubbo.rpc.support.RpcUtils;\n \n final class DubboParser {\n+  static final Map<Integer, String> ERROR_CODE_NUMBER_TO_NAME = errorCodeNumberToName();\n+\n+  /**\n+   * Dubbo adds error codes sometimes. For example, they added two in the last two years. If we did\n+   * a simple switch/case of each code, like {@link RpcException#BIZ_EXCEPTION}, new code names\n+   * would not be seen until an upgrade of Brave. That, or we'd have to fall back to a code number\n+   * until the upgrade of Brave converged.\n+   *\n+   * <p>This uses reflection instead, which is unlikely to fail as Dubbo's error codes are public\n+   * constants.\n+   */\n+  static Map<Integer, String> errorCodeNumberToName() {\n+    Map<Integer, String> result = new LinkedHashMap<>();\n+    for (Field field : RpcException.class.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers()) && field.getType() == int.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg2MDE5MA=="}, "originalCommit": {"oid": "cbc774eb782dff63d1bc76010f4362988a488e99"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1372, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}