{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjY1Njc0", "number": 1109, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowMzozNFrODlsnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1MDo1M1rODluEyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODU0ODE3OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzowMzozNFrOFyu4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNDoyNzowMlrOF9Guug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MTE4Nw==", "bodyText": "using a mutable array here is intentional. It allows a later change to implement immediate flushing #682", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388741187", "createdAt": "2020-03-06T07:03:34Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,184 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.\n+     *\n+     * @since 5.11\n+     */\n+    public B addExtraField(String name) {\n+      if (name == null) throw new NullPointerException(\"name == null\");\n+      String lowercase = name.toLowerCase(Locale.ROOT); // contract of extra fields internally\n+      extraFields.add(lowercase);\n+      return (B) this;\n+    }\n+\n+    public abstract CurrentTraceContext.ScopeDecorator build();\n+  }\n+\n+  protected CorrelationFieldScopeDecorator(Builder<?> builder) {\n+    String[] extraFields = builder.extraFields.toArray(new String[0]);\n+    updaters = new Updater[4 + extraFields.length];\n+    updaters[0] = new TraceIdUpdater(this);\n+    updaters[1] = new ParentSpanIdUpdater(this);\n+    updaters[2] = new SpanIdUpdater(this);\n+    updaters[3] = new SampledUpdater(this);\n+    for (int i = 0; i < extraFields.length; i++) {\n+      updaters[4 + i] = new ExtraFieldUpdater(this, extraFields[i]);\n+    }\n+  }\n \n   /**\n    * When the input is not null \"traceId\", \"parentId\", \"spanId\" and \"sampled\" correlation properties\n    * are saved off and replaced with those of the current span. When the input is null, these\n    * properties are removed. Either way, \"traceId\", \"parentId\", \"spanId\" and \"sampled\" properties\n    * are restored on {@linkplain Scope#close()}.\n    */\n-  @Override public Scope decorateScope(@Nullable TraceContext currentSpan, Scope scope) {\n-    String previousTraceId = get(\"traceId\");\n-    String previousSpanId = get(\"spanId\");\n-    String previousParentId = get(\"parentId\");\n-    String previousSampled = get(\"sampled\");\n-\n-    if (currentSpan != null) {\n-      maybeReplaceTraceContext(\n-        currentSpan, previousTraceId, previousParentId, previousSpanId, previousSampled);\n-    } else {\n-      remove(\"traceId\");\n-      remove(\"parentId\");\n-      remove(\"spanId\");\n-      remove(\"sampled\");\n+  @Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n+    String[] previousValues = new String[updaters.length];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a290d9747b21c09563c9e91f8ef914076b6fc99"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MzAxNQ==", "bodyText": "Not completely sure but I thought the immediate flushing would mean there are extra fields added, so doesn't it need to be expandable like a List?", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388773015", "createdAt": "2020-03-06T08:38:33Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,184 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.\n+     *\n+     * @since 5.11\n+     */\n+    public B addExtraField(String name) {\n+      if (name == null) throw new NullPointerException(\"name == null\");\n+      String lowercase = name.toLowerCase(Locale.ROOT); // contract of extra fields internally\n+      extraFields.add(lowercase);\n+      return (B) this;\n+    }\n+\n+    public abstract CurrentTraceContext.ScopeDecorator build();\n+  }\n+\n+  protected CorrelationFieldScopeDecorator(Builder<?> builder) {\n+    String[] extraFields = builder.extraFields.toArray(new String[0]);\n+    updaters = new Updater[4 + extraFields.length];\n+    updaters[0] = new TraceIdUpdater(this);\n+    updaters[1] = new ParentSpanIdUpdater(this);\n+    updaters[2] = new SpanIdUpdater(this);\n+    updaters[3] = new SampledUpdater(this);\n+    for (int i = 0; i < extraFields.length; i++) {\n+      updaters[4 + i] = new ExtraFieldUpdater(this, extraFields[i]);\n+    }\n+  }\n \n   /**\n    * When the input is not null \"traceId\", \"parentId\", \"spanId\" and \"sampled\" correlation properties\n    * are saved off and replaced with those of the current span. When the input is null, these\n    * properties are removed. Either way, \"traceId\", \"parentId\", \"spanId\" and \"sampled\" properties\n    * are restored on {@linkplain Scope#close()}.\n    */\n-  @Override public Scope decorateScope(@Nullable TraceContext currentSpan, Scope scope) {\n-    String previousTraceId = get(\"traceId\");\n-    String previousSpanId = get(\"spanId\");\n-    String previousParentId = get(\"parentId\");\n-    String previousSampled = get(\"sampled\");\n-\n-    if (currentSpan != null) {\n-      maybeReplaceTraceContext(\n-        currentSpan, previousTraceId, previousParentId, previousSpanId, previousSampled);\n-    } else {\n-      remove(\"traceId\");\n-      remove(\"parentId\");\n-      remove(\"spanId\");\n-      remove(\"sampled\");\n+  @Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n+    String[] previousValues = new String[updaters.length];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MTE4Nw=="}, "originalCommit": {"oid": "4a290d9747b21c09563c9e91f8ef914076b6fc99"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyNzk1NQ==", "bodyText": "actually the late thing is change in a value not change in the whitelist. so should be fine. this will be separate change anyway", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388827955", "createdAt": "2020-03-06T10:31:45Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,184 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.\n+     *\n+     * @since 5.11\n+     */\n+    public B addExtraField(String name) {\n+      if (name == null) throw new NullPointerException(\"name == null\");\n+      String lowercase = name.toLowerCase(Locale.ROOT); // contract of extra fields internally\n+      extraFields.add(lowercase);\n+      return (B) this;\n+    }\n+\n+    public abstract CurrentTraceContext.ScopeDecorator build();\n+  }\n+\n+  protected CorrelationFieldScopeDecorator(Builder<?> builder) {\n+    String[] extraFields = builder.extraFields.toArray(new String[0]);\n+    updaters = new Updater[4 + extraFields.length];\n+    updaters[0] = new TraceIdUpdater(this);\n+    updaters[1] = new ParentSpanIdUpdater(this);\n+    updaters[2] = new SpanIdUpdater(this);\n+    updaters[3] = new SampledUpdater(this);\n+    for (int i = 0; i < extraFields.length; i++) {\n+      updaters[4 + i] = new ExtraFieldUpdater(this, extraFields[i]);\n+    }\n+  }\n \n   /**\n    * When the input is not null \"traceId\", \"parentId\", \"spanId\" and \"sampled\" correlation properties\n    * are saved off and replaced with those of the current span. When the input is null, these\n    * properties are removed. Either way, \"traceId\", \"parentId\", \"spanId\" and \"sampled\" properties\n    * are restored on {@linkplain Scope#close()}.\n    */\n-  @Override public Scope decorateScope(@Nullable TraceContext currentSpan, Scope scope) {\n-    String previousTraceId = get(\"traceId\");\n-    String previousSpanId = get(\"spanId\");\n-    String previousParentId = get(\"parentId\");\n-    String previousSampled = get(\"sampled\");\n-\n-    if (currentSpan != null) {\n-      maybeReplaceTraceContext(\n-        currentSpan, previousTraceId, previousParentId, previousSpanId, previousSampled);\n-    } else {\n-      remove(\"traceId\");\n-      remove(\"parentId\");\n-      remove(\"spanId\");\n-      remove(\"sampled\");\n+  @Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n+    String[] previousValues = new String[updaters.length];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MTE4Nw=="}, "originalCommit": {"oid": "4a290d9747b21c09563c9e91f8ef914076b6fc99"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxNzcyMg==", "bodyText": "yeah this is just late updates keys, set in the builder and immutable after. so the value holder needn't be expandable. If we change later to make this expandable, we would need to update this code, as would other code which assumes the list is fixed.", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r399617722", "createdAt": "2020-03-28T04:27:02Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,184 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.\n+     *\n+     * @since 5.11\n+     */\n+    public B addExtraField(String name) {\n+      if (name == null) throw new NullPointerException(\"name == null\");\n+      String lowercase = name.toLowerCase(Locale.ROOT); // contract of extra fields internally\n+      extraFields.add(lowercase);\n+      return (B) this;\n+    }\n+\n+    public abstract CurrentTraceContext.ScopeDecorator build();\n+  }\n+\n+  protected CorrelationFieldScopeDecorator(Builder<?> builder) {\n+    String[] extraFields = builder.extraFields.toArray(new String[0]);\n+    updaters = new Updater[4 + extraFields.length];\n+    updaters[0] = new TraceIdUpdater(this);\n+    updaters[1] = new ParentSpanIdUpdater(this);\n+    updaters[2] = new SpanIdUpdater(this);\n+    updaters[3] = new SampledUpdater(this);\n+    for (int i = 0; i < extraFields.length; i++) {\n+      updaters[4 + i] = new ExtraFieldUpdater(this, extraFields[i]);\n+    }\n+  }\n \n   /**\n    * When the input is not null \"traceId\", \"parentId\", \"spanId\" and \"sampled\" correlation properties\n    * are saved off and replaced with those of the current span. When the input is null, these\n    * properties are removed. Either way, \"traceId\", \"parentId\", \"spanId\" and \"sampled\" properties\n    * are restored on {@linkplain Scope#close()}.\n    */\n-  @Override public Scope decorateScope(@Nullable TraceContext currentSpan, Scope scope) {\n-    String previousTraceId = get(\"traceId\");\n-    String previousSpanId = get(\"spanId\");\n-    String previousParentId = get(\"parentId\");\n-    String previousSampled = get(\"sampled\");\n-\n-    if (currentSpan != null) {\n-      maybeReplaceTraceContext(\n-        currentSpan, previousTraceId, previousParentId, previousSpanId, previousSampled);\n-    } else {\n-      remove(\"traceId\");\n-      remove(\"parentId\");\n-      remove(\"spanId\");\n-      remove(\"sampled\");\n+  @Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n+    String[] previousValues = new String[updaters.length];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc0MTE4Nw=="}, "originalCommit": {"oid": "4a290d9747b21c09563c9e91f8ef914076b6fc99"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODc3MzI4OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo0NTo0NFrOFyxARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo0NTo0NFrOFyxARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NjAwNw==", "bodyText": "Small nit this is probably easier to read if the if/else pattern is consistent, currently this line seems particularly special for some reason.\nif (current != null) {\n  return update(previous, current);\n} else if (previous != null) {\n  decorator.remove(field);\n  return true;\n} else {\n  return false;\n}\nCould remove the elses if desired.", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388776007", "createdAt": "2020-03-06T08:45:44Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,176 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.\n+     *\n+     * @since 5.11\n+     */\n+    public B addExtraField(String name) {\n+      if (name == null) throw new NullPointerException(\"name == null\");\n+      String lowercase = name.toLowerCase(Locale.ROOT); // contract of extra fields internally\n+      extraFields.add(lowercase);\n+      return (B) this;\n+    }\n+\n+    public abstract CurrentTraceContext.ScopeDecorator build();\n+  }\n+\n+  protected CorrelationFieldScopeDecorator(Builder<?> builder) {\n+    String[] extraFields = builder.extraFields.toArray(new String[0]);\n+    updaters = new Updater[4 + extraFields.length];\n+    updaters[0] = new TraceIdUpdater(this);\n+    updaters[1] = new ParentSpanIdUpdater(this);\n+    updaters[2] = new SpanIdUpdater(this);\n+    updaters[3] = new SampledUpdater(this);\n+    for (int i = 0; i < extraFields.length; i++) {\n+      updaters[4 + i] = new ExtraFieldUpdater(this, extraFields[i]);\n+    }\n+  }\n \n   /**\n    * When the input is not null \"traceId\", \"parentId\", \"spanId\" and \"sampled\" correlation properties\n    * are saved off and replaced with those of the current span. When the input is null, these\n    * properties are removed. Either way, \"traceId\", \"parentId\", \"spanId\" and \"sampled\" properties\n    * are restored on {@linkplain Scope#close()}.\n    */\n-  @Override public Scope decorateScope(@Nullable TraceContext currentSpan, Scope scope) {\n-    String previousTraceId = get(\"traceId\");\n-    String previousSpanId = get(\"spanId\");\n-    String previousParentId = get(\"parentId\");\n-    String previousSampled = get(\"sampled\");\n-\n-    if (currentSpan != null) {\n-      maybeReplaceTraceContext(\n-        currentSpan, previousTraceId, previousParentId, previousSpanId, previousSampled);\n-    } else {\n-      remove(\"traceId\");\n-      remove(\"parentId\");\n-      remove(\"spanId\");\n-      remove(\"sampled\");\n+  @Override public Scope decorateScope(@Nullable TraceContext context, Scope scope) {\n+    String[] previousValues = new String[updaters.length];\n+\n+    boolean changed = false;\n+    for (int i = 0; i < updaters.length; i++) {\n+      previousValues[i] = get(updaters[i].field);\n+      if (context != null) {\n+        if (updaters[i].update(context, previousValues[i])) {\n+          changed = true;\n+        }\n+      } else if (previousValues[i] != null) {\n+        remove(updaters[i].field);\n+        changed = true;\n+      }\n     }\n \n+    if (!changed) return scope;\n+\n     class CorrelationFieldCurrentTraceContextScope implements Scope {\n       @Override public void close() {\n         scope.close();\n-        replace(\"traceId\", previousTraceId);\n-        replace(\"parentId\", previousParentId);\n-        replace(\"spanId\", previousSpanId);\n-        replace(\"sampled\", previousSampled);\n+        for (int i = 0; i < updaters.length; i++) {\n+          replace(updaters[i].field, previousValues[i]);\n+        }\n       }\n     }\n     return new CorrelationFieldCurrentTraceContextScope();\n   }\n \n-  /**\n-   * Idempotently sets correlation properties to hex representation of trace identifiers in this\n-   * context.\n-   */\n-  void maybeReplaceTraceContext(\n-    TraceContext currentSpan,\n-    String previousTraceId,\n-    @Nullable String previousParentId,\n-    String previousSpanId,\n-    @Nullable String previousSampled\n-  ) {\n-    String traceId = currentSpan.traceIdString();\n-    if (!traceId.equals(previousTraceId)) put(\"traceId\", currentSpan.traceIdString());\n-\n-    String parentId = currentSpan.parentIdString();\n-    if (parentId == null) {\n-      remove(\"parentId\");\n-    } else {\n-      boolean sameParentId = parentId.equals(previousParentId);\n-      if (!sameParentId) put(\"parentId\", parentId);\n+  static final class ExtraFieldUpdater extends Updater {\n+    final Class<? extends PropagationFields<String, String>> propagationType;\n+\n+    ExtraFieldUpdater(CorrelationFieldScopeDecorator decorator, String name) {\n+      super(decorator, name);\n+      this.propagationType = InternalPropagation.instance.extraPropagationFieldsType();\n+    }\n+\n+    @Override boolean update(TraceContext context, @Nullable String previous) {\n+      String current = PropagationFields.get(context, field, propagationType);\n+      return updateNullable(previous, current);\n     }\n+  }\n \n-    String spanId = currentSpan.spanIdString();\n-    if (!spanId.equals(previousSpanId)) put(\"spanId\", spanId);\n+  static final class TraceIdUpdater extends Updater {\n+    TraceIdUpdater(CorrelationFieldScopeDecorator decorator) {\n+      super(decorator, \"traceId\");\n+    }\n \n-    Boolean sampled = currentSpan.sampled();\n-    if (sampled == null) {\n-      remove(\"sampled\");\n-    } else {\n-      String sampledString = sampled.toString();\n-      boolean sameSampled = sampledString.equals(previousSampled);\n-      if (!sameSampled) put(\"sampled\", sampledString);\n+    @Override boolean update(TraceContext context, @Nullable String previous) {\n+      return update(previous, context.traceIdString());\n+    }\n+  }\n+\n+  static final class ParentSpanIdUpdater extends Updater {\n+    ParentSpanIdUpdater(CorrelationFieldScopeDecorator decorator) {\n+      super(decorator, \"parentId\");\n+    }\n+\n+    @Override boolean update(TraceContext context, @Nullable String previous) {\n+      return updateNullable(previous, context.parentIdString());\n+    }\n+  }\n+\n+  static final class SpanIdUpdater extends Updater {\n+    SpanIdUpdater(CorrelationFieldScopeDecorator decorator) {\n+      super(decorator, \"spanId\");\n+    }\n+\n+    @Override boolean update(TraceContext context, @Nullable String previous) {\n+      return update(previous, context.spanIdString());\n+    }\n+  }\n+\n+  static final class SampledUpdater extends Updater {\n+    SampledUpdater(CorrelationFieldScopeDecorator decorator) {\n+      super(decorator, \"sampled\");\n+    }\n+\n+    @Override boolean update(TraceContext context, @Nullable String previous) {\n+      Boolean sampled = context.sampled();\n+      return updateNullable(previous, sampled != null ? sampled.toString() : null);\n+    }\n+  }\n+\n+  static abstract class Updater {\n+    final CorrelationFieldScopeDecorator decorator;\n+    final String field;\n+\n+    Updater(CorrelationFieldScopeDecorator decorator, String field) {\n+      this.decorator = decorator;\n+      this.field = field;\n+    }\n+\n+    /** Returns true if there was a change to the correlation field. */\n+    abstract boolean update(TraceContext context, @Nullable String previous);\n+\n+    boolean update(@Nullable String previous, String current) {\n+      if (!current.equals(previous)) {\n+        decorator.put(field, current);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    boolean updateNullable(@Nullable String previous, @Nullable String current) {\n+      if (current != null) return update(previous, current);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb5c2374d62e0669f77a46606c92dcbe2140560"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODc4NzkyOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo1MDo1M1rOFyxJRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNDoyODozOVrOF9GvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODMwOQ==", "bodyText": "Just want to confirm ExtraFieldPropagation is the only type of propagation this would ever make sense for?", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388778309", "createdAt": "2020-03-06T08:50:53Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,176 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb5c2374d62e0669f77a46606c92dcbe2140560"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyNjk2Ng==", "bodyText": "it might not be the only possible thing but it is what's often requested leading to the sleuth thing a couple years ago.", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r388826966", "createdAt": "2020-03-06T10:29:34Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,176 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODMwOQ=="}, "originalCommit": {"oid": "2fb5c2374d62e0669f77a46606c92dcbe2140560"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxNzg0OQ==", "bodyText": "after thinking about this, yeah I believe it is better to be explicit as we have nothing else and it is hard to predict when we could.", "url": "https://github.com/openzipkin/brave/pull/1109#discussion_r399617849", "createdAt": "2020-03-28T04:28:39Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/CorrelationFieldScopeDecorator.java", "diffHunk": "@@ -13,85 +13,176 @@\n  */\n package brave.internal.propagation;\n \n+import brave.Tracer;\n+import brave.internal.InternalPropagation;\n import brave.internal.Nullable;\n+import brave.internal.PropagationFields;\n+import brave.propagation.CurrentTraceContext;\n import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.CurrentTraceContext.ScopeDecorator;\n+import brave.propagation.ExtraFieldPropagation;\n import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Locale;\n+import java.util.Set;\n \n /**\n- * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@link\n- * brave.Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n+ * Adds correlation properties \"traceId\", \"parentId\", \"spanId\" and \"sampled\" when a {@linkplain\n+ * Tracer#currentSpan() span is current}. \"traceId\" and \"spanId\" are used in log correlation.\n  * \"parentId\" is used for scenarios such as log parsing that reconstructs the trace tree. \"sampled\"\n  * is used as a hint that a span found in logs might be in Zipkin.\n  */\n public abstract class CorrelationFieldScopeDecorator implements ScopeDecorator {\n+  final Updater[] updaters;\n+\n+  protected static abstract class Builder<B extends Builder<B>> {\n+    final Set<String> extraFields = new LinkedHashSet<>(); // insertion order;\n+\n+    /**\n+     * Adds a field from {@link ExtraFieldPropagation} into the correlation context.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODMwOQ=="}, "originalCommit": {"oid": "2fb5c2374d62e0669f77a46606c92dcbe2140560"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1551, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}