{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzA5ODc3", "number": 1117, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1MDozMFrODpwbZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1MDozMFrODpwbZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTExNjU0OnYy", "diffSide": "RIGHT", "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1MDozMFrOF5IRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1NDo1MlrOF5IUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0ODYwMA==", "bodyText": "Recommend a normal loop with Arrays.asList since it's very similar code but there won't be a lambda in the stack trace if failure", "url": "https://github.com/openzipkin/brave/pull/1117#discussion_r395448600", "createdAt": "2020-03-20T05:50:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -157,6 +182,84 @@ protected Tracer tracer() {\n     }\n   };\n \n+  /**\n+   * Like {@link #assertSpansReportedKindInOrder(Span.Kind, Span.Kind)} except order isn't enforced.\n+   * However, the results will return in the kind order specified.\n+   */\n+  protected Span[] assertSpansReportedKindInAnyOrder(@Nullable Span.Kind kind1,\n+    @Nullable Span.Kind kind2) throws InterruptedException {\n+    if (Objects.equals(kind1, kind2)) {\n+      throw new AssertionError(\"Expected test to pass different span kinds\");\n+    }\n+\n+    // Intentionally pull both spans first to ensure neither are errors.\n+    Span span1 = takeSpan(), span2 = takeSpan();\n+\n+    Stream.of(span1, span2).forEach(span -> assertThat(span.kind())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8126088e956d26531079d2d737989f7c3a117295"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0OTM4Nw==", "bodyText": "great idea", "url": "https://github.com/openzipkin/brave/pull/1117#discussion_r395449387", "createdAt": "2020-03-20T05:54:52Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/http-tests/src/main/java/brave/test/http/ITHttp.java", "diffHunk": "@@ -157,6 +182,84 @@ protected Tracer tracer() {\n     }\n   };\n \n+  /**\n+   * Like {@link #assertSpansReportedKindInOrder(Span.Kind, Span.Kind)} except order isn't enforced.\n+   * However, the results will return in the kind order specified.\n+   */\n+  protected Span[] assertSpansReportedKindInAnyOrder(@Nullable Span.Kind kind1,\n+    @Nullable Span.Kind kind2) throws InterruptedException {\n+    if (Objects.equals(kind1, kind2)) {\n+      throw new AssertionError(\"Expected test to pass different span kinds\");\n+    }\n+\n+    // Intentionally pull both spans first to ensure neither are errors.\n+    Span span1 = takeSpan(), span2 = takeSpan();\n+\n+    Stream.of(span1, span2).forEach(span -> assertThat(span.kind())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0ODYwMA=="}, "originalCommit": {"oid": "8126088e956d26531079d2d737989f7c3a117295"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1567, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}