{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDEwNjI0", "number": 1126, "title": "Switches to Docker to run RabbitMQ integration tests", "bodyText": "I keep forgetting to run rabbitmq-server, sometimes forgetting where it is..\nThis makes it work provided docker works.", "createdAt": "2020-03-26T07:53:16Z", "url": "https://github.com/openzipkin/brave/pull/1126", "merged": true, "mergeCommit": {"oid": "1d9315c2281b4b70a75035faf1817b265839387f"}, "closed": true, "closedAt": "2020-03-26T11:32:13Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRXSGhgH2gAyMzk0MDEwNjI0OjMzNjYwNzFkMjlhNDM4MjBlMGQ3MTFlZTliMjk5OWFmNmQ1MGM4YTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRZLcJgH2gAyMzk0MDEwNjI0OjY3MTE5NjcyNTRkMTllM2RmOWM5MjQwZDM2Y2NkZmNlODliZTFjMGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3366071d29a43820e0d711ee9b2999af6d50c8a7", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/3366071d29a43820e0d711ee9b2999af6d50c8a7", "committedDate": "2020-03-26T07:50:23Z", "message": "Switches to Docker to run RabbitMQ integration tests\n\nI keep forgetting to run rabbitmq-server, sometimes forgetting where it is..\nThis makes it work provided docker works."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec", "committedDate": "2020-03-26T07:56:53Z", "message": "less indirect"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzY2NjY3", "url": "https://github.com/openzipkin/brave/pull/1126#pullrequestreview-381766667", "createdAt": "2020-03-26T07:53:31Z", "commit": {"oid": "3366071d29a43820e0d711ee9b2999af6d50c8a7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1MzozMlrOF76z-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzo1Njo1NFrOF766Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3Mzg4Mw==", "bodyText": "master is currently broke", "url": "https://github.com/openzipkin/brave/pull/1126#discussion_r398373883", "createdAt": "2020-03-26T07:53:32Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/pom.xml", "diffHunk": "@@ -18,7 +18,7 @@\n   <parent>\n     <groupId>io.zipkin.brave</groupId>\n     <artifactId>brave-instrumentation-parent</artifactId>\n-    <version>5.10.2-SNAPSHOT</version>\n+    <version>5.10.3-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3366071d29a43820e0d711ee9b2999af6d50c8a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM3NTQzOA==", "bodyText": "inlining these tests saves 15s each on my laptop as the overall container bootstrap seems to have 15s overhead", "url": "https://github.com/openzipkin/brave/pull/1126#discussion_r398375438", "createdAt": "2020-03-26T07:56:54Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/ITSpringRabbitTracing.java", "diffHunk": "@@ -131,4 +135,26 @@\n     assertThat(consumerReporter.takeLocalSpan().name())\n       .isEqualTo(\"on-message\");\n   }\n+\n+  @Test public void producerSampler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3366071d29a43820e0d711ee9b2999af6d50c8a7"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODUzOTI4", "url": "https://github.com/openzipkin/brave/pull/1126#pullrequestreview-381853928", "createdAt": "2020-03-26T09:58:42Z", "commit": {"oid": "dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1ODo0MlrOF7_QSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1ODo0MlrOF7_QSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0NjY2NQ==", "bodyText": "Presume this code is supposed to be calling kiww, not start.", "url": "https://github.com/openzipkin/brave/pull/1126#discussion_r398446665", "createdAt": "2020-03-26T09:58:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/ITSpringRabbit.java", "diffHunk": "@@ -37,43 +38,68 @@\n import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n+import org.springframework.amqp.rabbit.core.RabbitAdmin;\n import org.springframework.amqp.rabbit.core.RabbitTemplate;\n-import org.springframework.amqp.rabbit.junit.BrokerRunning;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.testcontainers.containers.RabbitMQContainer;\n+\n+import static org.springframework.amqp.core.BindingBuilder.bind;\n+import static org.springframework.amqp.core.ExchangeBuilder.topicExchange;\n \n public abstract class ITSpringRabbit extends ITRemote {\n   static final String TEST_QUEUE = \"test-queue\";\n+  static final Exchange exchange = topicExchange(\"test-exchange\").durable(true).build();\n+  static final Queue queue = new Queue(TEST_QUEUE);\n+  static final Binding binding = bind(queue).to(exchange).with(\"test.binding\").noargs();\n+\n+  static RabbitMQContainer rabbit = new RabbitMQContainer();\n+\n+  @BeforeClass public static void startRabbit() {\n+    rabbit.start();\n+    CachingConnectionFactory connectionFactory =\n+      new CachingConnectionFactory(rabbit.getContainerIpAddress(), rabbit.getAmqpPort());\n+    try {\n+      RabbitAdmin amqpAdmin = new RabbitAdmin(connectionFactory);\n+      amqpAdmin.declareExchange(exchange);\n+      amqpAdmin.declareQueue(queue);\n+      amqpAdmin.declareBinding(binding);\n+    } finally {\n+      connectionFactory.destroy();\n+    }\n+  }\n \n-  @ClassRule public static BrokerRunning brokerRunning = BrokerRunning.isRunning();\n+  @AfterClass public static void kiwwTheWabbit() {\n+    rabbit.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODU3MDUy", "url": "https://github.com/openzipkin/brave/pull/1126#pullrequestreview-381857052", "createdAt": "2020-03-26T10:02:41Z", "commit": {"oid": "dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMjo0MVrOF7_aIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDowMjo0MVrOF7_aIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0OTE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                rabbit.start();\n          \n          \n            \n                rabbit.stop();", "url": "https://github.com/openzipkin/brave/pull/1126#discussion_r398449184", "createdAt": "2020-03-26T10:02:41Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/ITSpringRabbit.java", "diffHunk": "@@ -37,43 +38,68 @@\n import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n+import org.springframework.amqp.rabbit.core.RabbitAdmin;\n import org.springframework.amqp.rabbit.core.RabbitTemplate;\n-import org.springframework.amqp.rabbit.junit.BrokerRunning;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.testcontainers.containers.RabbitMQContainer;\n+\n+import static org.springframework.amqp.core.BindingBuilder.bind;\n+import static org.springframework.amqp.core.ExchangeBuilder.topicExchange;\n \n public abstract class ITSpringRabbit extends ITRemote {\n   static final String TEST_QUEUE = \"test-queue\";\n+  static final Exchange exchange = topicExchange(\"test-exchange\").durable(true).build();\n+  static final Queue queue = new Queue(TEST_QUEUE);\n+  static final Binding binding = bind(queue).to(exchange).with(\"test.binding\").noargs();\n+\n+  static RabbitMQContainer rabbit = new RabbitMQContainer();\n+\n+  @BeforeClass public static void startRabbit() {\n+    rabbit.start();\n+    CachingConnectionFactory connectionFactory =\n+      new CachingConnectionFactory(rabbit.getContainerIpAddress(), rabbit.getAmqpPort());\n+    try {\n+      RabbitAdmin amqpAdmin = new RabbitAdmin(connectionFactory);\n+      amqpAdmin.declareExchange(exchange);\n+      amqpAdmin.declareQueue(queue);\n+      amqpAdmin.declareBinding(binding);\n+    } finally {\n+      connectionFactory.destroy();\n+    }\n+  }\n \n-  @ClassRule public static BrokerRunning brokerRunning = BrokerRunning.isRunning();\n+  @AfterClass public static void kiwwTheWabbit() {\n+    rabbit.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc1afd9fed527b68defeeb8a7fed0a1ec9c36ec"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6711967254d19e3df9c9240d36ccdfce89be1c0e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/6711967254d19e3df9c9240d36ccdfce89be1c0e", "committedDate": "2020-03-26T10:02:55Z", "message": "shut down container"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1890, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}