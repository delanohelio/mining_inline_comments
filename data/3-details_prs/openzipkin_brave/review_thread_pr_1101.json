{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDAyNzY3", "number": 1101, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoxNDoyOVrODilpzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1Mjo1OVrODimL1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTk1MDg1OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoxNDoyOVrOFt61-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1MDowMlrOFt7lHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ==", "bodyText": "Perhaps : '{0}' with quotes - IIUC empty string will also log so if it just logs as empty it's tricky to read the log. But either's fine.", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383694329", "createdAt": "2020-02-25T07:14:29Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "diffHunk": "@@ -115,10 +116,14 @@ public FactoryBuilder injectFormats(Span.Kind kind, Format format1, Format forma\n    * decision to the receiver of this header).\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n+  static final String SAMPLED_MALFORMED =\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNjE5Nw==", "bodyText": "good idea.. in this case I'll put the whole thing in single quotes as was aiming for header format.\nEx. X-B3-Sampled:  in the case of empty string", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383706197", "createdAt": "2020-02-25T07:49:36Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "diffHunk": "@@ -115,10 +116,14 @@ public FactoryBuilder injectFormats(Span.Kind kind, Format format1, Format forma\n    * decision to the receiver of this header).\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n+  static final String SAMPLED_MALFORMED =\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ=="}, "originalCommit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNjM5Ng==", "bodyText": "but then again, that would still have the same problem.. yeah single quoting it", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383706396", "createdAt": "2020-02-25T07:50:02Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "diffHunk": "@@ -115,10 +116,14 @@ public FactoryBuilder injectFormats(Span.Kind kind, Format format1, Format forma\n    * decision to the receiver of this header).\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n+  static final String SAMPLED_MALFORMED =\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ=="}, "originalCommit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjAzNzk2OnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/brave/propagation/B3PropagationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1Mjo1OVrOFt7peA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1Mjo1OVrOFt7peA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNzUxMg==", "bodyText": "Nice", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383707512", "createdAt": "2020-02-25T07:52:59Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/brave/propagation/B3PropagationTest.java", "diffHunk": "@@ -179,9 +214,62 @@ void header(String key, String value) {\n \n     assertThat(request.headers)\n       .hasSize(4)\n-      .containsEntry(\"X-B3-TraceId\", \"0000000000000001\")\n-      .containsEntry(\"X-B3-ParentSpanId\", \"0000000000000002\")\n-      .containsEntry(\"X-B3-SpanId\", \"0000000000000003\")\n-      .containsEntry(\"b3\", \"0000000000000001-0000000000000003-0000000000000002\");\n+      .containsEntry(\"X-B3-TraceId\", traceId)\n+      .containsEntry(\"X-B3-ParentSpanId\", parentId)\n+      .containsEntry(\"X-B3-SpanId\", spanId)\n+      .containsEntry(\"b3\", traceId + \"-\" + spanId + \"-\" + parentId);\n+  }\n+\n+  @Test public void extract_notYetSampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    assertThat(extract(headers).sampled()).isNull();\n+  }\n+\n+  @Test public void extract_sampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"1\");\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+\n+    headers.put(\"X-B3-Sampled\", \"true\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+  }\n+\n+  @Test public void extract_sampled_false() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"0\");\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+\n+    headers.put(\"X-B3-Sampled\", \"false\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+  }\n+\n+  @Test public void extract_sampledCorrupt() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    Stream.of(\"\", \"d\", \"\ud83d\udca9\", \"hello\").forEach(sampled -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a034c4d13784f3724fe30558e2efe18b52bd613"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1545, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}