{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjAyMzkx", "number": 1175, "title": "Renovates gRPC instrumentation in preparation of standard parsing", "bodyText": "This fixes some glitches in preparation of #999\n\nBumps gRPC to 1.29 (there was no impact)\nGrpcClientRequest and GrpcServerRequest unwrapped this, not the call.\nAnonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n\nThis is implicitly done in the Zipkin span handler\n\n\nStatus.cause was ignored\n\nThis led to a less precise \"error\" tag\n\n\nClient headers were unnecessarily null during sampling. This was caused by\ntoo eager allocation of a span.\nClientCall.Listener was wrapped twice\nMost ClientCall hooks were not placed in scope\nServerCall's span was started too late", "createdAt": "2020-04-27T01:39:41Z", "url": "https://github.com/openzipkin/brave/pull/1175", "merged": true, "mergeCommit": {"oid": "3f034766f2d4e5b10392a7f4e31a8bbef00e5d30"}, "closed": true, "closedAt": "2020-04-27T13:07:48Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbmGxzABqjMyNzM3NDY4NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbuueZAH2gAyNDA5MjAyMzkxOjhhZjc1NDA2ZWQwMzk2OTUyZjQ1MGVkYzEzMjAzNWRlOTRlODdlMDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5433f3b003b6b3a929402b5a6a5d101cd7c6e48b", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/5433f3b003b6b3a929402b5a6a5d101cd7c6e48b", "committedDate": "2020-04-27T01:49:42Z", "message": "Adds note about status cause"}, "afterCommit": {"oid": "66dd94ef3efdd7a66b3bad5706beb269bd3674ba", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/66dd94ef3efdd7a66b3bad5706beb269bd3674ba", "committedDate": "2020-04-27T02:46:18Z", "message": "Renovates gRPC instrumentation in preparation of standard parsing\n\nThis fixes some glitches in preparation of #999\n\n* Bumps gRPC to 1.29 (there was no impact)\n* GrpcClientRequest and GrpcServerRequest unwrapped `this`, not the call.\n* Anonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n  * This is implicitly done in the Zipkin span handler\n* Status.cause was ignored\n  * This led to a less precise \"error\" tag\n* Client headers were unnecessarily null during sampling. This was caused by\n  too eager allocation of a span.\n* ClientCall.Listener was wrapped twice\n* Most ClientCall hooks were not placed in scope\n* ServerCall's span was started too late"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjUwMjA1", "url": "https://github.com/openzipkin/brave/pull/1175#pullrequestreview-400650205", "createdAt": "2020-04-27T06:11:10Z", "commit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoxMToxMFrOGMSVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjozMzo1NFrOGMS8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzNjQ3Mw==", "bodyText": "Don't know if I've seen @ before and not sure how to search for it. Quick pointer to what it is?", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415536473", "createdAt": "2020-04-27T06:11:10Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/it/grpc12/pom.xml", "diffHunk": "@@ -47,6 +47,11 @@\n       <artifactId>junit</artifactId>\n       <version>@junit.version@</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>@mockito.version@</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzNjYzNQ==", "bodyText": "Maybe not since it's exposed out of tree, but could consider putting these resources in brave-test", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415536635", "createdAt": "2020-04-27T06:11:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/it/grpc12/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MDk5NQ==", "bodyText": "I think status or trailers are never null", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415540995", "createdAt": "2020-04-27T06:22:03Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/main/java/brave/grpc/GrpcClientResponse.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.grpc;\n+\n+import brave.Response;\n+import brave.Span;\n+import brave.internal.Nullable;\n+import io.grpc.ClientCall;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+\n+// intentionally not yet public until we add tag parsing functionality\n+final class GrpcClientResponse extends Response {\n+  final GrpcClientRequest request;\n+  @Nullable final Status status;\n+  @Nullable final Metadata trailers;\n+  @Nullable final Throwable error;\n+\n+  GrpcClientResponse(GrpcClientRequest request,\n+    @Nullable Status status, @Nullable Metadata trailers, @Nullable Throwable error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MjE1Ng==", "bodyText": "Not sure but I think this would only happen if there is an error in the business logic on the client side when processing the closure, even if the request itself succeeded. So this might not warrant marking the span as error.", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415542156", "createdAt": "2020-04-27T06:24:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/main/java/brave/grpc/TracingClientInterceptor.java", "diffHunk": "@@ -127,38 +192,23 @@\n \n     @Override public void onMessage(RespT message) {\n       try (Scope scope = currentTraceContext.maybeScope(invocationContext)) {\n+        Span span = spanRef.get(); // could be an error\n+        SpanCustomizer customizer = span != null ? span.customizer() : NoopSpanCustomizer.INSTANCE;\n+        messageProcessor.onMessageReceived(message, customizer);\n         delegate().onMessage(message);\n       }\n     }\n \n     @Override public void onClose(Status status, Metadata trailers) {\n+      Throwable error = null;\n       try (Scope scope = currentTraceContext.maybeScope(invocationContext)) {\n         delegate().onClose(status, trailers);\n-      }\n-    }\n-  }\n-\n-  final class TracingClientCallListener<RespT> extends SimpleForwardingClientCallListener<RespT> {\n-    final Span span;\n-\n-    TracingClientCallListener(Listener<RespT> responseListener, Span span) {\n-      super(responseListener);\n-      this.span = span;\n-    }\n-\n-    @Override public void onMessage(RespT message) {\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        parser.onMessageReceived(message, span.customizer());\n-        delegate().onMessage(message);\n-      }\n-    }\n-\n-    @Override public void onClose(Status status, Metadata trailers) {\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        super.onClose(status, trailers);\n-        parser.onClose(status, trailers, span.customizer());\n+      } catch (Throwable e) {\n+        error = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzQ3Mw==", "bodyText": "I'm less clear about this one since closure on the server side is handled by the framework, so an error may or may not indicate the response failed. Ideally, our interceptor is in a location where the only possibility of an exception here is a grpc-java bug.", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415543473", "createdAt": "2020-04-27T06:27:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/main/java/brave/grpc/TracingServerInterceptor.java", "diffHunk": "@@ -91,96 +99,119 @@ Span nextSpan(TraceContextOrSamplingFlags extracted, GrpcServerRequest request)\n       : tracer.nextSpan(extracted);\n   }\n \n+  void finish(GrpcServerResponse response, @Nullable Span span) {\n+    if (span == null || span.isNoop()) return;\n+    Throwable error = response.error();\n+    if (error != null) span.error(error);\n+    parser.onClose(response.status, response.trailers, span.customizer());\n+    span.finish();\n+  }\n+\n+  void finishWithError(@Nullable Span span, Throwable error) {\n+    if (span == null || span.isNoop()) return;\n+    if (error != null) span.error(error);\n+    span.finish();\n+  }\n+\n   final class TracingServerCall<ReqT, RespT> extends SimpleForwardingServerCall<ReqT, RespT> {\n-    final Span span;\n+    final TraceContext context;\n+    final AtomicReference<Span> spanRef;\n+    final GrpcServerRequest request;\n \n-    TracingServerCall(Span span, ServerCall<ReqT, RespT> call) {\n-      super(call);\n-      this.span = span;\n+    TracingServerCall(ServerCall<ReqT, RespT> delegate, Span span, AtomicReference<Span> spanRef,\n+      GrpcServerRequest request) {\n+      super(delegate);\n+      this.context = span.context();\n+      this.spanRef = spanRef;\n+      this.request = request;\n     }\n \n     @Override public void request(int numMessages) {\n-      span.start();\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        super.request(numMessages);\n+      try (Scope scope = currentTraceContext.maybeScope(context)) {\n+        delegate().request(numMessages);\n       }\n     }\n \n     @Override public void sendHeaders(Metadata headers) {\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        super.sendHeaders(headers);\n+      try (Scope scope = currentTraceContext.maybeScope(context)) {\n+        delegate().sendHeaders(headers);\n       }\n     }\n \n     @Override public void sendMessage(RespT message) {\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        super.sendMessage(message);\n-        parser.onMessageSent(message, span.customizer());\n+      try (Scope scope = currentTraceContext.maybeScope(context)) {\n+        delegate().sendMessage(message);\n+        Span span = spanRef.get(); // could be an error\n+        SpanCustomizer customizer = span != null ? span.customizer() : NoopSpanCustomizer.INSTANCE;\n+        messageProcessor.onMessageSent(message, customizer);\n       }\n     }\n \n     @Override public void close(Status status, Metadata trailers) {\n-      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-        super.close(status, trailers);\n-        parser.onClose(status, trailers, span.customizer());\n+      Throwable error = null;\n+      try (Scope scope = currentTraceContext.maybeScope(context)) {\n+        delegate().close(status, trailers);\n       } catch (Throwable e) {\n-        span.error(e);\n+        error = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NDA5Mg==", "bodyText": "Related to my other comments, instead of passing in an error, for gRPC it's probably more correct to just always use status.getCause(). The framework is supposed to convert any business logic exception into a Status with the cause set to that exception.", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415544092", "createdAt": "2020-04-27T06:28:47Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/main/java/brave/grpc/GrpcClientResponse.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.grpc;\n+\n+import brave.Response;\n+import brave.Span;\n+import brave.internal.Nullable;\n+import io.grpc.ClientCall;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+\n+// intentionally not yet public until we add tag parsing functionality\n+final class GrpcClientResponse extends Response {\n+  final GrpcClientRequest request;\n+  @Nullable final Status status;\n+  @Nullable final Metadata trailers;\n+  @Nullable final Throwable error;\n+\n+  GrpcClientResponse(GrpcClientRequest request,\n+    @Nullable Status status, @Nullable Metadata trailers, @Nullable Throwable error) {\n+    if (request == null) throw new NullPointerException(\"request == null\");\n+    this.request = request;\n+    this.status = status;\n+    this.trailers = trailers;\n+    this.error = error != null ? error : status != null ? status.getCause() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NjU1MQ==", "bodyText": "I think close will be called with this error packed into the Status and we probably don't need to specially handle it.", "url": "https://github.com/openzipkin/brave/pull/1175#discussion_r415546551", "createdAt": "2020-04-27T06:33:54Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc/src/main/java/brave/grpc/TracingClientInterceptor.java", "diffHunk": "@@ -30,95 +32,158 @@\n import io.grpc.ForwardingClientCall.SimpleForwardingClientCall;\n import io.grpc.ForwardingClientCallListener.SimpleForwardingClientCallListener;\n import io.grpc.Metadata;\n+import io.grpc.Metadata.Key;\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import static brave.grpc.GrpcClientRequest.SETTER;\n \n // not exposed directly as implementation notably changes between versions 1.2 and 1.3\n final class TracingClientInterceptor implements ClientInterceptor {\n-  final Tracer tracer;\n+  final Map<String, Key<String>> nameToKey;\n   final CurrentTraceContext currentTraceContext;\n+  final Tracer tracer;\n   final SamplerFunction<RpcRequest> sampler;\n   final Injector<GrpcClientRequest> injector;\n   final GrpcClientParser parser;\n-  final Map<String, Metadata.Key<String>> nameToKey;\n+  final MessageProcessor messageProcessor;\n \n   TracingClientInterceptor(GrpcTracing grpcTracing) {\n-    tracer = grpcTracing.rpcTracing.tracing().tracer();\n+    nameToKey = grpcTracing.nameToKey;\n     currentTraceContext = grpcTracing.rpcTracing.tracing().currentTraceContext();\n+    tracer = grpcTracing.rpcTracing.tracing().tracer();\n     sampler = grpcTracing.rpcTracing.clientSampler();\n     injector = grpcTracing.propagation.injector(SETTER);\n     parser = grpcTracing.clientParser;\n-    nameToKey = grpcTracing.nameToKey;\n+    messageProcessor = grpcTracing.clientMessageProcessor;\n   }\n \n   @Override\n   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(MethodDescriptor<ReqT, RespT> method,\n     CallOptions callOptions, Channel next) {\n-    TraceContext invocationContext = currentTraceContext.get();\n-\n-    GrpcClientRequest request = new GrpcClientRequest(nameToKey, method);\n-    Span span = tracer.nextSpanWithParent(sampler, request, invocationContext);\n-\n-    Throwable error = null;\n-    try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-      return new SimpleForwardingClientCall<ReqT, RespT>(next.newCall(method, callOptions)) {\n-        @Override public void start(Listener<RespT> responseListener, Metadata headers) {\n-          request.metadata = headers;\n-          injector.inject(span.context(), request);\n-          span.kind(Span.Kind.CLIENT).start();\n-          try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-            parser.onStart(method, callOptions, headers, span.customizer());\n-\n-            // See RATIONALE.md which notes response callbacks are in the invocation context\n-            responseListener = new TraceContextCallListener<>(\n-              responseListener,\n-              currentTraceContext,\n-              invocationContext\n-            );\n-\n-            super.start(new TracingClientCallListener<>(responseListener, span), headers);\n-          }\n-        }\n-\n-        @Override public void sendMessage(ReqT message) {\n-          try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n-            super.sendMessage(message);\n-            parser.onMessageSent(message, span.customizer());\n-          }\n-        }\n-      };\n-    } catch (Throwable e) {\n-      error = e;\n-      throw e;\n-    } finally {\n-      if (error != null) span.error(error).finish();\n+    return new TracingClientCall<>(\n+      method, callOptions, currentTraceContext.get(), next.newCall(method, callOptions));\n+  }\n+\n+  void finish(GrpcClientResponse response, @Nullable Span span) {\n+    if (span == null || span.isNoop()) return;\n+    Throwable error = response.error();\n+    if (error != null) span.error(error);\n+    parser.onClose(response.status, response.trailers, span.customizer());\n+    span.finish();\n+  }\n+\n+  void finishWithError(@Nullable Span span, Throwable error) {\n+    if (span == null || span.isNoop()) return;\n+    if (error != null) span.error(error);\n+    span.finish();\n+  }\n+\n+  final class TracingClientCall<ReqT, RespT> extends SimpleForwardingClientCall<ReqT, RespT> {\n+    final MethodDescriptor<ReqT, RespT> method;\n+    final CallOptions callOptions;\n+    final TraceContext invocationContext;\n+    final AtomicReference<Span> spanRef = new AtomicReference<>();\n+\n+    TracingClientCall(MethodDescriptor<ReqT, RespT> method, CallOptions callOptions,\n+      TraceContext invocationContext, ClientCall<ReqT, RespT> call) {\n+      super(call);\n+      this.method = method;\n+      this.callOptions = callOptions;\n+      this.invocationContext = invocationContext;\n+    }\n+\n+    @Override public void start(Listener<RespT> responseListener, Metadata headers) {\n+      GrpcClientRequest request =\n+        new GrpcClientRequest(nameToKey, method, callOptions, delegate(), headers);\n+\n+      Span span = tracer.nextSpanWithParent(sampler, request, invocationContext);\n+      injector.inject(span.context(), request);\n+      if (!span.isNoop()) {\n+        span.kind(Span.Kind.CLIENT).start();\n+        parser.onStart(method, callOptions, headers, span.customizer());\n+      }\n+      spanRef.set(span);\n+\n+      responseListener = new TracingClientCallListener<>(\n+        responseListener,\n+        invocationContext,\n+        spanRef,\n+        request\n+      );\n+\n+      try (Scope scope = currentTraceContext.maybeScope(span.context())) {\n+        super.start(responseListener, headers);\n+      } catch (Throwable e) {\n+        finishWithError(spanRef.getAndSet(null), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d33e66e088c2d28df52679cd8cd23b622f79230"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzYyMjM2", "url": "https://github.com/openzipkin/brave/pull/1175#pullrequestreview-400762236", "createdAt": "2020-04-27T09:05:46Z", "commit": {"oid": "dadf5e4ec5f3a8aa4b609d4c0cb03d6dd5864953"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04df23e5a98145bfc6776479d7ac0f64ff5c602e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/04df23e5a98145bfc6776479d7ac0f64ff5c602e", "committedDate": "2020-04-27T09:17:36Z", "message": "buttons up"}, "afterCommit": {"oid": "f08c09366b3547a4b19944551412da5cdce17d5e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/f08c09366b3547a4b19944551412da5cdce17d5e", "committedDate": "2020-04-27T11:03:32Z", "message": "Renovates gRPC instrumentation in preparation of standard parsing\n\nThis fixes some glitches in preparation of #999\n\n* Bumps gRPC to 1.29 (there was no impact)\n* GrpcClientRequest and GrpcServerRequest unwrapped `this`, not the call.\n* Anonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n  * This is implicitly done in the Zipkin span handler\n* Status.cause was ignored\n  * This led to a less precise \"error\" tag\n* Client headers were unnecessarily null during sampling. This was caused by\n  too eager allocation of a span.\n* ClientCall.Listener was wrapped twice\n* Most ClientCall hooks were not placed in scope\n* ServerCall's span was started too late"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f08c09366b3547a4b19944551412da5cdce17d5e", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/f08c09366b3547a4b19944551412da5cdce17d5e", "committedDate": "2020-04-27T11:03:32Z", "message": "Renovates gRPC instrumentation in preparation of standard parsing\n\nThis fixes some glitches in preparation of #999\n\n* Bumps gRPC to 1.29 (there was no impact)\n* GrpcClientRequest and GrpcServerRequest unwrapped `this`, not the call.\n* Anonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n  * This is implicitly done in the Zipkin span handler\n* Status.cause was ignored\n  * This led to a less precise \"error\" tag\n* Client headers were unnecessarily null during sampling. This was caused by\n  too eager allocation of a span.\n* ClientCall.Listener was wrapped twice\n* Most ClientCall hooks were not placed in scope\n* ServerCall's span was started too late"}, "afterCommit": {"oid": "8920d3c89d0c4243f9626241eb5dd62a5cc93d51", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/8920d3c89d0c4243f9626241eb5dd62a5cc93d51", "committedDate": "2020-04-27T11:45:32Z", "message": "Renovates gRPC instrumentation in preparation of standard parsing\n\nThis fixes some glitches in preparation of #999\n\n* Bumps gRPC to 1.29 (there was no impact)\n* GrpcClientRequest and GrpcServerRequest unwrapped `this`, not the call.\n* Anonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n  * This is implicitly done in the Zipkin span handler\n* Status.cause was ignored\n  * This led to a less precise \"error\" tag\n* Client headers were unnecessarily null during sampling. This was caused by\n  too eager allocation of a span.\n* ClientCall.Listener was wrapped twice\n* Most ClientCall hooks were not placed in scope\n* ServerCall's span was started too late"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8920d3c89d0c4243f9626241eb5dd62a5cc93d51", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/8920d3c89d0c4243f9626241eb5dd62a5cc93d51", "committedDate": "2020-04-27T11:45:32Z", "message": "Renovates gRPC instrumentation in preparation of standard parsing\n\nThis fixes some glitches in preparation of #999\n\n* Bumps gRPC to 1.29 (there was no impact)\n* GrpcClientRequest and GrpcServerRequest unwrapped `this`, not the call.\n* Anonymous GrpcClientParser and GrpcServerParser used ErrorParser unnecessarily\n  * This is implicitly done in the Zipkin span handler\n* Status.cause was ignored\n  * This led to a less precise \"error\" tag\n* Client headers were unnecessarily null during sampling. This was caused by\n  too eager allocation of a span.\n* ClientCall.Listener was wrapped twice\n* Most ClientCall hooks were not placed in scope\n* ServerCall's span was started too late"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7626a8f0099d026ad5c391ab50906baf6f4e1783", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/7626a8f0099d026ad5c391ab50906baf6f4e1783", "committedDate": "2020-04-27T12:15:43Z", "message": "Good Riddance fancy mocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ea5b6fea775e9ee1aa8979a7db78dae40df219", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/a0ea5b6fea775e9ee1aa8979a7db78dae40df219", "committedDate": "2020-04-27T12:19:32Z", "message": "die mockito"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af75406ed0396952f450edc132035de94e87e03", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/8af75406ed0396952f450edc132035de94e87e03", "committedDate": "2020-04-27T12:48:26Z", "message": "less flakey"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1691, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}