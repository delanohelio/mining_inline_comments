{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTcwMDg1", "number": 1139, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNToxNVrODuO3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowODowNlrODuO6vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA0Njg0OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNToxNVrOGAHeKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNToxNVrOGAHeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTU5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *                                  .name(\"trace-id\").build()\n          \n          \n            \n             *                                  .name(\"trace-id\").build())", "url": "https://github.com/openzipkin/brave/pull/1139#discussion_r402775592", "createdAt": "2020-04-03T07:05:15Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.baggage;\n+\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+\n+/**\n+ * Holds {@link CorrelationScopeDecorator} configuration for a {@linkplain BaggageField baggage\n+ * field}.\n+ *\n+ * <h3>Field mapping</h3>\n+ * Your log correlation properties may not be the same as the baggage field names. You can override\n+ * them with the builder as needed.\n+ *\n+ * <p>Ex. If your log property is %X{trace-id}, you can do this:\n+ * <pre>{@code\n+ * scopeBuilder.clear() // TRACE_ID is a default field!\n+ *             .add(CorrelationField.newBuilder(BaggageFields.TRACE_ID)\n+ *                                  .name(\"trace-id\").build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f320c7e75ea096212e75322b01a9281c178a341"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA0NzkxOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNTo0MFrOGAHeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNTo0MFrOGAHeyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NTc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static class Builder {\n          \n          \n            \n              public static final class Builder {", "url": "https://github.com/openzipkin/brave/pull/1139#discussion_r402775754", "createdAt": "2020-04-03T07:05:40Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.baggage;\n+\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+\n+/**\n+ * Holds {@link CorrelationScopeDecorator} configuration for a {@linkplain BaggageField baggage\n+ * field}.\n+ *\n+ * <h3>Field mapping</h3>\n+ * Your log correlation properties may not be the same as the baggage field names. You can override\n+ * them with the builder as needed.\n+ *\n+ * <p>Ex. If your log property is %X{trace-id}, you can do this:\n+ * <pre>{@code\n+ * scopeBuilder.clear() // TRACE_ID is a default field!\n+ *             .add(CorrelationField.newBuilder(BaggageFields.TRACE_ID)\n+ *                                  .name(\"trace-id\").build()\n+ * }</pre>\n+ *\n+ * <h3>Visibility</h3>\n+ * <p>By default, field updates only apply during {@linkplain CorrelationScopeDecorator scope\n+ * decoration}. This means values set do not flush immediately to the underlying correlation\n+ * context. Rather, they are scheduled for the next scope operation as a way to control overhead.\n+ * {@link CorrelationField#flushOnUpdate()} overrides this.\n+ *\n+ * @see CorrelationScopeDecorator\n+ * @see BaggageField\n+ * @since 5.11\n+ */\n+public final class CorrelationField {\n+  /** @since 5.11 */\n+  public static CorrelationField create(BaggageField baggageField) {\n+    return new Builder(baggageField).build();\n+  }\n+\n+  /** @since 5.11 */\n+  public static Builder newBuilder(BaggageField baggageField) {\n+    return new Builder(baggageField);\n+  }\n+\n+  /**\n+   * Allows decorators to reconfigure correlation of this {@link #baggageField()}\n+   *\n+   * @see CorrelationScopeCustomizer\n+   * @since 5.11\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  /** @since 5.11 */\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f320c7e75ea096212e75322b01a9281c178a341"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA1MzcwOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNzo0MlrOGAHiQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowNzo0MlrOGAHiQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NjY0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns the same value for any correlation field  with the same baggage field. */\n          \n          \n            \n              /** Returns the same value for any correlation field with the same baggage field. */", "url": "https://github.com/openzipkin/brave/pull/1139#discussion_r402776643", "createdAt": "2020-04-03T07:07:42Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/CorrelationField.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.baggage;\n+\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+\n+/**\n+ * Holds {@link CorrelationScopeDecorator} configuration for a {@linkplain BaggageField baggage\n+ * field}.\n+ *\n+ * <h3>Field mapping</h3>\n+ * Your log correlation properties may not be the same as the baggage field names. You can override\n+ * them with the builder as needed.\n+ *\n+ * <p>Ex. If your log property is %X{trace-id}, you can do this:\n+ * <pre>{@code\n+ * scopeBuilder.clear() // TRACE_ID is a default field!\n+ *             .add(CorrelationField.newBuilder(BaggageFields.TRACE_ID)\n+ *                                  .name(\"trace-id\").build()\n+ * }</pre>\n+ *\n+ * <h3>Visibility</h3>\n+ * <p>By default, field updates only apply during {@linkplain CorrelationScopeDecorator scope\n+ * decoration}. This means values set do not flush immediately to the underlying correlation\n+ * context. Rather, they are scheduled for the next scope operation as a way to control overhead.\n+ * {@link CorrelationField#flushOnUpdate()} overrides this.\n+ *\n+ * @see CorrelationScopeDecorator\n+ * @see BaggageField\n+ * @since 5.11\n+ */\n+public final class CorrelationField {\n+  /** @since 5.11 */\n+  public static CorrelationField create(BaggageField baggageField) {\n+    return new Builder(baggageField).build();\n+  }\n+\n+  /** @since 5.11 */\n+  public static Builder newBuilder(BaggageField baggageField) {\n+    return new Builder(baggageField);\n+  }\n+\n+  /**\n+   * Allows decorators to reconfigure correlation of this {@link #baggageField()}\n+   *\n+   * @see CorrelationScopeCustomizer\n+   * @since 5.11\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  /** @since 5.11 */\n+  public static class Builder {\n+    final BaggageField baggageField;\n+    String name;\n+    boolean dirty, flushOnUpdate;\n+\n+    Builder(BaggageField baggageField) {\n+      this.baggageField = baggageField;\n+      this.name = baggageField.name();\n+    }\n+\n+    Builder(CorrelationField input) {\n+      baggageField = input.baggageField;\n+      name = input.name;\n+      dirty = input.dirty;\n+      flushOnUpdate = input.flushOnUpdate;\n+    }\n+\n+    /** @see CorrelationField#name() */\n+    public Builder name(String name) {\n+      this.name = BaggageField.validateName(name);\n+      return this;\n+    }\n+\n+    /** @see CorrelationField#dirty() */\n+    public Builder dirty() {\n+      this.dirty = true;\n+      return this;\n+    }\n+\n+    /** @see CorrelationField#flushOnUpdate() */\n+    public Builder flushOnUpdate() {\n+      this.flushOnUpdate = true;\n+      return this;\n+    }\n+\n+    /** @since 5.11 */\n+    public CorrelationField build() {\n+      return new CorrelationField(this);\n+    }\n+  }\n+\n+  final BaggageField baggageField;\n+  final String name;\n+  final boolean dirty, flushOnUpdate, readOnly;\n+\n+  CorrelationField(Builder builder) { // sealed to this package\n+    baggageField = builder.baggageField;\n+    name = builder.name;\n+    dirty = builder.dirty;\n+    flushOnUpdate = builder.flushOnUpdate;\n+    readOnly = baggageField.context instanceof BaggageContext.ReadOnly;\n+  }\n+\n+  public BaggageField baggageField() {\n+    return baggageField;\n+  }\n+\n+  /**\n+   * The name to use in the correlation context. This defaults to {@link BaggageField#name()} unless\n+   * overridden by {@link Builder#name(String)}.\n+   *\n+   * @since 5.11\n+   */\n+  public String name() {\n+    return name;\n+  }\n+\n+  /**\n+   * Adds a name in the underlying context which is updated directly. The decorator will overwrite\n+   * any underlying changes when the scope closes.\n+   *\n+   * <p>This is used when there are a mix of libraries controlling the same correlation field.\n+   * For example, if SLF4J MDC can update the same field name.\n+   *\n+   * <p>This has a similar performance impact to {@link #flushOnUpdate()}, as it requires tracking\n+   * the field value even if there's no change detected.\n+   *\n+   * @since 5.11\n+   */\n+  public boolean dirty() {\n+    return dirty;\n+  }\n+\n+  /**\n+   * When true, updates made to this name via {@linkplain BaggageField#updateValue(TraceContext,\n+   * String)} flush immediately to the correlation context.\n+   *\n+   * <p>This is useful for callbacks that have a void return. Ex.\n+   * <pre>{@code\n+   * @SendTo(SourceChannels.OUTPUT)\n+   * public void timerMessageSource() {\n+   *   // Assume BUSINESS_PROCESS is an updatable field\n+   *   BUSINESS_PROCESS.updateValue(\"accounting\");\n+   *   // Assuming a Log4j context, the expression %{bp} will show \"accounting\" in businessCode()\n+   *   businessCode();\n+   * }\n+   * }</pre>\n+   *\n+   * <h3>Appropriate Usage</h3>\n+   * This has a significant performance impact as it requires even {@link\n+   * CurrentTraceContext#maybeScope(TraceContext)} to always track values.\n+   *\n+   * <p>Most fields do not change in the scope of a {@link TraceContext}. For example, standard\n+   * fields such as {@link BaggageFields#SPAN_ID the span ID} and {@linkplain\n+   * BaggageFields#constant(String, String) constants} such as env variables do not need to be\n+   * tracked. Even field value updates do not necessarily need to be flushed to the underlying\n+   * correlation context, as they will apply on the next scope operation.\n+   *\n+   * @since 5.11\n+   */\n+  public boolean flushOnUpdate() {\n+    return flushOnUpdate;\n+  }\n+\n+  /** Returns true if this value is immutable within a {@link TraceContext}. */\n+  public boolean readOnly() {\n+    return readOnly;\n+  }\n+\n+  @Override public String toString() {\n+    String baggageName = baggageField.name;\n+    if (baggageName.equals(name)) {\n+      return \"CorrelationField{\" + name + \"}\";\n+    }\n+    return \"CorrelationField{\" + baggageName + \"->\" + name + \"}\";\n+  }\n+\n+  /** Returns true for any correlation field with the same baggage field. */\n+  @Override public boolean equals(Object o) {\n+    if (o == this) return true;\n+    if (!(o instanceof CorrelationField)) return false;\n+    return baggageField.equals(((CorrelationField) o).baggageField);\n+  }\n+\n+  /** Returns the same value for any correlation field  with the same baggage field. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f320c7e75ea096212e75322b01a9281c178a341"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA1NTAyOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/baggage/CorrelationFlushScope.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowODowNlrOGAHjBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowODowNlrOGAHjBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NjgzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Sets up thread locals if they are needed to support {@link CorrelationField#flushOnUpdate()} */\n          \n          \n            \n            /** Sets up thread locals needed to support {@link CorrelationField#flushOnUpdate()} */", "url": "https://github.com/openzipkin/brave/pull/1139#discussion_r402776839", "createdAt": "2020-04-03T07:08:06Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/CorrelationFlushScope.java", "diffHunk": "@@ -22,9 +22,7 @@\n \n import static brave.baggage.CorrelationScopeDecorator.equal;\n \n-/**\n- * Sets up thread locals if they are needed to support {@link CorrelationScopeDecorator.Builder#addFlushOnUpdateName(String)}\n- */\n+/** Sets up thread locals if they are needed to support {@link CorrelationField#flushOnUpdate()} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f320c7e75ea096212e75322b01a9281c178a341"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1618, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}