{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NzI4Njc2", "number": 1062, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozODo0MlrODZv9Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozOTo0OVrODZv-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzI2NzIzOnYy", "diffSide": "LEFT", "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozODo0MlrOFgUCKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozODo0MlrOFgUCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNjk4Nw==", "bodyText": "a separate change would need to make the next version of dubbo not crash tests. this just avoids referencing a constant they later deleted", "url": "https://github.com/openzipkin/brave/pull/1062#discussion_r369426987", "createdAt": "2020-01-22T08:38:42Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/DubboParser.java", "diffHunk": "@@ -19,9 +19,6 @@\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.support.RpcUtils;\n \n-import static org.apache.dubbo.rpc.Constants.$INVOKE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d69ffc0afe5189e55972209ffb01b0bcd9e6aff"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzI2OTkzOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc/src/test/java/brave/grpc/BaseITTracingClientInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozOTo0OVrOFgUD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozOTo0OVrOFgUD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNzQyMQ==", "bodyText": "diff didn't notice this file was just renamed with one method added.", "url": "https://github.com/openzipkin/brave/pull/1062#discussion_r369427421", "createdAt": "2020-01-22T08:39:49Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/grpc/src/test/java/brave/grpc/BaseITTracingClientInterceptor.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.grpc;\n+\n+import brave.ScopedSpan;\n+import brave.SpanCustomizer;\n+import brave.Tracer;\n+import brave.Tracing;\n+import brave.context.log4j2.ThreadContextScopeDecorator;\n+import brave.propagation.StrictScopeDecorator;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import brave.propagation.TraceContextOrSamplingFlags;\n+import brave.rpc.RpcRuleSampler;\n+import brave.rpc.RpcTracing;\n+import brave.sampler.Sampler;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.grpc.CallOptions;\n+import io.grpc.Channel;\n+import io.grpc.ClientCall;\n+import io.grpc.ClientInterceptor;\n+import io.grpc.ForwardingClientCall;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GraterGrpc;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import zipkin2.Annotation;\n+import zipkin2.Span;\n+\n+import static brave.grpc.GreeterImpl.HELLO_REQUEST;\n+import static brave.rpc.RpcRequestMatchers.methodEquals;\n+import static brave.rpc.RpcRequestMatchers.serviceEquals;\n+import static brave.sampler.Sampler.ALWAYS_SAMPLE;\n+import static brave.sampler.Sampler.NEVER_SAMPLE;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowableOfType;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;\n+import static org.junit.Assume.assumeTrue;\n+\n+public abstract class BaseITTracingClientInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d69ffc0afe5189e55972209ffb01b0bcd9e6aff"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1504, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}