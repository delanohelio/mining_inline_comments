{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDg0Mjcz", "number": 1169, "title": "Removes one-way handling via Span.flush and polishes Dubbo", "bodyText": "This removes the now confusing one-way RPC handling where one side calls\nspan.start().flush() and the other span.finish() (without start).\nThis was never implemented consistently. For example, Dubbo did flush on\nclient, but not anything special on the receiving side. It is more\ncoherent for us to eventually add a \"rpc.oneway\" -> \"\" tag at some\npoint, and meanwhile, those who want to know can add their own tags.\nLater, I'll remove the same content from the website.", "createdAt": "2020-04-22T06:51:49Z", "url": "https://github.com/openzipkin/brave/pull/1169", "merged": true, "mergeCommit": {"oid": "191d9f10562e372f2144134c857d9cb5be7ab295"}, "closed": true, "closedAt": "2020-04-22T08:49:45Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaCkifAH2gAyNDA3MDg0MjczOmNiMDEzODhkZjcwM2E1ZDViYWMxZjZlMWU2YTM5Yjg4NWY2N2E3ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaDHWBgH2gAyNDA3MDg0MjczOmNmODMwYWM2Zjc3ZDA3YTk5OThkMzViNGEyZTgwMzM1Njk5NzU4ZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/cb01388df703a5d5bac1f6e1e6a39b885f67a784", "committedDate": "2020-04-22T06:47:50Z", "message": "Removes one-way handling via Span.flush and polishes Dubbo\n\nThis removes the now confusing one-way RPC handling where one side calls\n`span.start().flush()` and the other `span.finish()` (without start).\n\nThis was never implemented consistently. For example, Dubbo did flush on\nclient, but not anything special on the receiving side. It is more\ncoherent for us to eventually add a \"rpc.oneway\" -> \"\" tag at some\npoint, and meanwhile, those who want to know can add their own tags.\n\nLater, I'll remove the same content from the website."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODkwOTA2", "url": "https://github.com/openzipkin/brave/pull/1169#pullrequestreview-397890906", "createdAt": "2020-04-22T06:52:25Z", "commit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MjoyNlrOGJmPMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MjoyNlrOGJmPMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNjg0OQ==", "bodyText": "funny we documented like this, but didn't use it!", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412716849", "createdAt": "2020-04-22T06:52:26Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/ITTracingFilter_Consumer.java", "diffHunk": "@@ -150,7 +149,7 @@\n     client.get().sayHello(\"jorge\");\n \n     assertThat(reporter.takeRemoteSpan(Span.Kind.CLIENT).name())\n-      .isEqualTo(\"greeterservice/sayhello\");\n+      .isEqualTo(\"brave.dubbo.rpc.greeterservice/sayhello\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODkxNTk4", "url": "https://github.com/openzipkin/brave/pull/1169#pullrequestreview-397891598", "createdAt": "2020-04-22T06:53:39Z", "commit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MzozOVrOGJmRxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MzozOVrOGJmRxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzUwOA==", "bodyText": "an earlier mistake where we made generic parsers, but didn't use them.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717508", "createdAt": "2020-04-22T06:53:39Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODkxNzYw", "url": "https://github.com/openzipkin/brave/pull/1169#pullrequestreview-397891760", "createdAt": "2020-04-22T06:53:57Z", "commit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1Mzo1OFrOGJmScg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1Mzo1OFrOGJmScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzY4Mg==", "bodyText": "oneWay is not needed in order to figure out how to proceed.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412717682", "createdAt": "2020-04-22T06:53:58Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/dubbo/src/main/java/brave/dubbo/TracingFilter.java", "diffHunk": "@@ -104,45 +107,35 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n \n     if (!span.isNoop()) {\n       span.kind(kind);\n-      String service = invoker.getInterface().getSimpleName();\n-      String method = RpcUtils.getMethodName(invocation);\n+      String service = DubboParser.service(invocation);\n+      String method = DubboParser.method(invocation);\n       span.name(service + \"/\" + method);\n-      parseRemoteAddress(rpcContext, span);\n+      DubboParser.parseRemoteIpAndPort(span);\n       span.start();\n     }\n \n-    boolean isOneway = false, deferFinish = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODk0Nzc0", "url": "https://github.com/openzipkin/brave/pull/1169#pullrequestreview-397894774", "createdAt": "2020-04-22T06:59:06Z", "commit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OTowNlrOGJmd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OTowNlrOGJmd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDYyOA==", "bodyText": "How about String.valueOf(code) for all the cases? I don't think we convert HTTP codes to names in tags, and it makes sure tags are consistently an integer without worrying about maintenance.\nAlternatively, I'd return UNKNOWN_EXCEPTION here so tags are consistently a string. A tag that's string or int seems hard to use.", "url": "https://github.com/openzipkin/brave/pull/1169#discussion_r412720628", "createdAt": "2020-04-22T06:59:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/DubboParser.java", "diffHunk": "@@ -52,4 +57,37 @@\n     String service = url.getServiceInterface();\n     return service != null && !service.isEmpty() ? service : null;\n   }\n+\n+  static boolean parseRemoteIpAndPort(Span span) {\n+    RpcContext rpcContext = RpcContext.getContext();\n+    InetSocketAddress remoteAddress = rpcContext.getRemoteAddress();\n+    if (remoteAddress == null) return false;\n+    return span.remoteIpAndPort(\n+      Platform.get().getHostString(remoteAddress),\n+      remoteAddress.getPort()\n+    );\n+  }\n+\n+  @Nullable static String errorCode(Throwable error) {\n+    if (error instanceof RpcException) {\n+      int code = ((RpcException) error).getCode();\n+      switch (code) { // requires maintenance if constants are updated\n+        case RpcException.UNKNOWN_EXCEPTION:\n+          return \"UNKNOWN_EXCEPTION\";\n+        case RpcException.NETWORK_EXCEPTION:\n+          return \"NETWORK_EXCEPTION\";\n+        case RpcException.TIMEOUT_EXCEPTION:\n+          return \"TIMEOUT_EXCEPTION\";\n+        case RpcException.BIZ_EXCEPTION:\n+          return \"BIZ_EXCEPTION\";\n+        case RpcException.FORBIDDEN_EXCEPTION:\n+          return \"FORBIDDEN_EXCEPTION\";\n+        case RpcException.SERIALIZATION_EXCEPTION:\n+          return \"SERIALIZATION_EXCEPTION\";\n+        default:\n+          return String.valueOf(code);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01388df703a5d5bac1f6e1e6a39b885f67a784"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf830ac6f77d07a9998d35b4a2e80335699758d3", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/cf830ac6f77d07a9998d35b4a2e80335699758d3", "committedDate": "2020-04-22T07:25:51Z", "message": "add back cryptic numbers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1678, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}