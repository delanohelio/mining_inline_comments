{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDAyNzY3", "number": 1101, "title": "Enforces sampled field must be well formed", "bodyText": "Currently, we restart the trace if the identity fields: traceId and\nspanId are malformed. This restarts on malformed sampled flag. Formerly,\nwe treated malformed the same as an explicit sampled=false decision.", "createdAt": "2020-02-25T07:05:54Z", "url": "https://github.com/openzipkin/brave/pull/1101", "merged": true, "mergeCommit": {"oid": "f25cb4c851443ebfade26b06888eaff5eff3fed9"}, "closed": true, "closedAt": "2020-02-25T08:54:04Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHspIVAH2gAyMzc5NDAyNzY3OmY2MGYxZDJkZGM3ODg4ODBkNzIxNTAyMzcwYWRhY2YwNDIxMjZlOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHtVyugH2gAyMzc5NDAyNzY3OmJmMWZiZTQxNWM5MGNiNjMxYWFlNWM5MmFjYzE0YzUwMjhlZTI2MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/f60f1d2ddc788880d721502370adacf042126e8c", "committedDate": "2020-02-25T07:04:18Z", "message": "Enforces sampled field must be well formed\n\nCurrently, we restart the trace if the identity fields: traceId and\nspanId are malformed. This restarts on malformed sampled flag. Formerly,\nwe treated malformed the same as an explicit sampled=false decision."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTEyMjAz", "url": "https://github.com/openzipkin/brave/pull/1101#pullrequestreview-363912203", "createdAt": "2020-02-25T07:14:28Z", "commit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoxNDoyOVrOFt61-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzoxNDoyOVrOFt61-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ==", "bodyText": "Perhaps : '{0}' with quotes - IIUC empty string will also log so if it just logs as empty it's tricky to read the log. But either's fine.", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383694329", "createdAt": "2020-02-25T07:14:29Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "diffHunk": "@@ -115,10 +116,14 @@ public FactoryBuilder injectFormats(Span.Kind kind, Format format1, Format forma\n    * decision to the receiver of this header).\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n+  static final String SAMPLED_MALFORMED =\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f60f1d2ddc788880d721502370adacf042126e8c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a034c4d13784f3724fe30558e2efe18b52bd613", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/1a034c4d13784f3724fe30558e2efe18b52bd613", "committedDate": "2020-02-25T07:48:19Z", "message": "Ensures b3 single doesn't accept unicode and backfills"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTI4MDE1", "url": "https://github.com/openzipkin/brave/pull/1101#pullrequestreview-363928015", "createdAt": "2020-02-25T07:52:58Z", "commit": {"oid": "1a034c4d13784f3724fe30558e2efe18b52bd613"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1Mjo1OVrOFt7peA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1Mjo1OVrOFt7peA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNzUxMg==", "bodyText": "Nice", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383707512", "createdAt": "2020-02-25T07:52:59Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/brave/propagation/B3PropagationTest.java", "diffHunk": "@@ -179,9 +214,62 @@ void header(String key, String value) {\n \n     assertThat(request.headers)\n       .hasSize(4)\n-      .containsEntry(\"X-B3-TraceId\", \"0000000000000001\")\n-      .containsEntry(\"X-B3-ParentSpanId\", \"0000000000000002\")\n-      .containsEntry(\"X-B3-SpanId\", \"0000000000000003\")\n-      .containsEntry(\"b3\", \"0000000000000001-0000000000000003-0000000000000002\");\n+      .containsEntry(\"X-B3-TraceId\", traceId)\n+      .containsEntry(\"X-B3-ParentSpanId\", parentId)\n+      .containsEntry(\"X-B3-SpanId\", spanId)\n+      .containsEntry(\"b3\", traceId + \"-\" + spanId + \"-\" + parentId);\n+  }\n+\n+  @Test public void extract_notYetSampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    assertThat(extract(headers).sampled()).isNull();\n+  }\n+\n+  @Test public void extract_sampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"1\");\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+\n+    headers.put(\"X-B3-Sampled\", \"true\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+  }\n+\n+  @Test public void extract_sampled_false() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"0\");\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+\n+    headers.put(\"X-B3-Sampled\", \"false\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+  }\n+\n+  @Test public void extract_sampledCorrupt() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    Stream.of(\"\", \"d\", \"\ud83d\udca9\", \"hello\").forEach(sampled -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a034c4d13784f3724fe30558e2efe18b52bd613"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1fbe415c90cb631aae5c92acc14c5028ee2612", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/bf1fbe415c90cb631aae5c92acc14c5028ee2612", "committedDate": "2020-02-25T07:53:05Z", "message": "polish"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}