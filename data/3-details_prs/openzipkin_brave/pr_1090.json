{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDk5ODc3", "number": 1090, "title": "Adds Mongo instrumentation", "bodyText": "Fixes #818", "createdAt": "2020-02-21T22:30:09Z", "url": "https://github.com/openzipkin/brave/pull/1090", "merged": true, "mergeCommit": {"oid": "09185124d9888b5f03ec5deee24a4b66b2221992"}, "closed": true, "closedAt": "2020-03-26T02:27:12Z", "author": {"login": "csabakos"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGneeqgH2gAyMzc4NDk5ODc3OmRmZGRjM2VhMzk4YjA5YmMwMWRiODdhNzA2YWViYjMzMzAzZmExMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQbdpCgFqTM3OTA3MjE3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/dfddc3ea398b09bc01db87a706aebb33303fa138", "committedDate": "2020-02-21T22:29:13Z", "message": "Add Mongo instrumentation. Fixes #818."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg3NjA0", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-362987604", "createdAt": "2020-02-22T00:21:19Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMToyMFrOFtIH7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMToyMFrOFtIH7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzM0Mg==", "bodyText": "please rename the project name and directory to match the artifact ID. Sorry, I think we don't document this convention, but it is one and helps with some duplication when there are multiple drivers.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863342", "createdAt": "2020-02-22T00:21:20Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/pom.xml", "diffHunk": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+\n+    Copyright 2013-2020 The OpenZipkin Authors\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+    in compliance with the License. You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software distributed under the License\n+    is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+    or implied. See the License for the specific language governing permissions and limitations under\n+    the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>io.zipkin.brave</groupId>\n+    <artifactId>brave-instrumentation-parent</artifactId>\n+    <version>5.9.6-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>brave-instrumentation-mongo</artifactId>\n+  <name>Brave Instrumentation: MongoDB</name>\n+\n+  <properties>\n+    <!-- Matches Export-Package in bnd.bnd -->\n+    <module.name>brave.mongo</module.name>\n+\n+    <main.basedir>${project.basedir}/../..</main.basedir>\n+    <!-- mongodb-driver requires Java 8 -->\n+    <main.java.version>1.8</main.java.version>\n+    <main.signature.artifact>java18</main.signature.artifact>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.mongodb</groupId>\n+      <artifactId>mongodb-driver</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg3Njg5", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-362987689", "createdAt": "2020-02-22T00:21:42Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMTo0MlrOFtIIOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMTo0MlrOFtIIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzQxOA==", "bodyText": "please rename the package to brave.mongodb", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863418", "createdAt": "2020-02-22T00:21:42Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg3ODYz", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-362987863", "createdAt": "2020-02-22T00:22:28Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMjoyOFrOFtIIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMjoyOFrOFtIIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzU2Nw==", "bodyText": "all public types final with a package-private constructor", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863567", "createdAt": "2020-02-22T00:22:28Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg3OTk2", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-362987996", "createdAt": "2020-02-22T00:23:09Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoyMzoxMFrOFtIJQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDo0NjozMlrOFtIYCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzY4Mw==", "bodyText": "remove the private modifier as we do this conventionally as we don't support mixed code in the package, it also helps reduce the size of bytecode and clutter reading.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863683", "createdAt": "2020-02-22T00:23:10Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzc4Nw==", "bodyText": "remove protected as we don't support inheritance in our instrumentation. Things are configured via composition usually.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382863787", "createdAt": "2020-02-22T00:23:49Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDA4OQ==", "bodyText": "our policy is to not escalate the java version needed by the underlying driver. Please revert use of java 8 apis. anyway null checking should happen before here.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864089", "createdAt": "2020-02-22T00:25:28Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDIxMA==", "bodyText": "defaults should be moved to the builder.. just assign things here. this makes it easier to change from a diff pov later", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864210", "createdAt": "2020-02-22T00:26:08Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDMzMA==", "bodyText": "remove final keywords on locals as we don't do this unless it is remarkable. since this is how we usually look at locals the opposite is distracting.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864330", "createdAt": "2020-02-22T00:26:50Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDQwMw==", "bodyText": "change to brave.internal.Nullable", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864403", "createdAt": "2020-02-22T00:27:12Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDQ3NA==", "bodyText": "double-check this cannot be null", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864474", "createdAt": "2020-02-22T00:27:33Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDU3MA==", "bodyText": "make sure the api is always returning non-null references. otherwise guard.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864570", "createdAt": "2020-02-22T00:28:15Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDYyMQ==", "bodyText": "use simple if statments, they are faster, smaller bytecode and also <java 8 compatible", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864621", "createdAt": "2020-02-22T00:28:40Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDcxNg==", "bodyText": "use same line early exits here and everywhere", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864716", "createdAt": "2020-02-22T00:29:06Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDgxNQ==", "bodyText": "anything that can be static method should be static method", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864815", "createdAt": "2020-02-22T00:29:44Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDg2Nw==", "bodyText": "remove privates", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382864867", "createdAt": "2020-02-22T00:30:06Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTgyNA==", "bodyText": "move the builder to the top of the file and start like this so as to force the tracer to never be null. Also, we conventionally accept Tracing as that prevents later api breaks when we need other components from there (such as current trace context)\npublic final class MongoDBTracing {\n  public static MongoDBTracing create(Tracing tracing) {\n    return newBuilder(tracing).build();\n  }\n\n  public static Builder newBuilder(Tracing tracing) {\n    return newBuilder(tracing);\n  }\n\n  public static Builder newBuilder(Tracing tracing) {\n    return new Builder(tracing);\n  }\n\n  public static final class Builder {\n    final Tracing tracing;\n// other fields non-final as mutable\n    Builder(Tracing tracing) {\n      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n      this.tracing = tracing;\n--snip--\n  \n  MongoDBTracing(Builder builder) { // note this is package private\n    this.whatINeed = builder...\n--snip--\n\n  public CommandListener commandListener() {\n    return new MongoDBCommandListener(this); // this type can be package private\n  }", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382865824", "createdAt": "2020-02-22T00:35:58Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjA4NA==", "bodyText": "doing like this allows us a possibility to work with multiple versions, which may have multiple types.. In MySQL we use the single type for all because it has to be instantiated statically, which I believe is different here.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866084", "createdAt": "2020-02-22T00:37:43Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NTgyNA=="}, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw==", "bodyText": "this is unusual as we don't do this in any other of our features.. maybe a slight optimization to do that here and now in the first version. I understand that the mongodb.command would be long but so would the sql command, and someone can change data policy on all tags more flexibly with a finishedspanhandler..", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866347", "createdAt": "2020-02-22T00:39:24Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ==", "bodyText": "we don't use any tag like db.type elsewhere (ex mysql) so I don't think we'd do that here.\nalso we need to check the tags are like existing mongo instrumentation people in zipkin use. please ask the people on the referring issue as this type of default policy is something to consider carefully. particularly the tag names ex mongo vs mongodb.\n@kojilin @huydx do you use mongo at LINE?", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866739", "createdAt": "2020-02-22T00:42:09Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjkyOA==", "bodyText": "this is a bomb waiting to happen. unbounded maps can make OOM when there's a bug that causes the hooks not to fire. Consider what we use in MySQL if there's no explicit property across start and finish.. ThreadLocalSpan", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382866928", "createdAt": "2020-02-22T00:43:22Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzE5NQ==", "bodyText": "if we test with system managed resource, travis should start it and set the variables needed.. you can look for our mysql stuff for example. We don't want any tests that aren't actually run in CI", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867195", "createdAt": "2020-02-22T00:44:54Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();\n+\n+  private final Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();\n+  private MongoClient mongoClient;\n+  private MongoDatabase database;\n+\n+  @Before public void init() {\n+    final String databaseName = System.getenv(\"MONGODB_DB\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzM3NQ==", "bodyText": "if there is a chance for different thread start/finish (maybe? if so it should be mentioned in comments in the main code). Anyway, if there is, please use conventions we use elsewhere. I think you'll notice we tend to use blocking queue if something is async as that's more reliable. have a look at other code like kafka ITHttp etc.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867375", "createdAt": "2020-02-22T00:46:07Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NzQ2NA==", "bodyText": "in unit tests we don't mark final anywhere or private as it clutters and protection isn't important", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382867464", "createdAt": "2020-02-22T00:46:32Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {\n+  private static final String A_COLLECTION_NAME = \"myCollection\"; // collection doesn't have to exist\n+  private static final String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  private final List<Span> spans = new CopyOnWriteArrayList<>();\n+\n+  private final Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTk1OTQz", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-362995943", "createdAt": "2020-02-22T01:11:17Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMToxOFrOFtIlKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMToxOFrOFtIlKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDgyNA==", "bodyText": "odd to call this operation when mongo calls it command", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382870824", "createdAt": "2020-02-22T01:11:18Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a76c968227d10381bcee0146e83722330a62f5", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/43a76c968227d10381bcee0146e83722330a62f5", "committedDate": "2020-02-22T02:00:00Z", "message": "Rename package to mongodb."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDA0MTEw", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-363004110", "createdAt": "2020-02-22T02:41:38Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMjo0MTozOFrOFtJFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMjo0OToyMFrOFtJHZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTEzNg==", "bodyText": "If we have databaseName for remoteServiceName, do we need this?", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382879136", "createdAt": "2020-02-22T02:41:38Z", "author": {"login": "kojilin"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTU5MA==", "bodyText": "Yes, we are using MongoDB. IMHO, databaseName usually provide enough information. or like MySQL's code, mongodb-$databasename?\nI have a question when we try to build a similar thing, sometimes we found MongoDB  is not using the same thread as client caller. It means the span may not belong to parent correctly.  Or recent MongoDB driver doesn't have this problem? But maybe ok because of it only happens occasionally.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382879590", "createdAt": "2020-02-22T02:49:20Z", "author": {"login": "kojilin"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjczOQ=="}, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDE1MTEy", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-363015112", "createdAt": "2020-02-22T07:14:04Z", "commit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoxNDowNFrOFtJ8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwNzoyNjoxMlrOFtJ--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzIxOA==", "bodyText": "Using the first value to get the collection name seems to rely on implementation details. The vast majority of commands seem to have a field with commandName: collection. I found one, getMore, which has a field collection: collection. How about trying both?\nBsonValue value = command.get(commandName);\nif (value != null && value.isString()) {\n  return value.asString().getValue().trim();\n}\nvalue = command.get(\"collection\");\nif (value != null && value.isString()) {\n  // Actually we should add a static helper that coorces BsonValue into a String or null\n}", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893218", "createdAt": "2020-02-22T07:14:04Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzM1Ng==", "bodyText": "Not sure but mongo may benefit from this default since SQL in the vast majority of usage will log prepared statements like (INSERT blah VALUES (?)) so while they can get gnarly, it's still sort of a fixed size. If the BsonDocument contains the entire payload of write operations, it's much easier to become ridiculously sized.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893356", "createdAt": "2020-02-22T07:16:37Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzM4NA==", "bodyText": "That being said, 100 seems too small as a default.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893384", "createdAt": "2020-02-22T07:17:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NjM0Nw=="}, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzQ2Ng==", "bodyText": "Better to validate and not accept negative values (have no real meaning and more likely a user bug) instead of using Math.max above.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893466", "createdAt": "2020-02-22T07:18:53Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {\n+    final Iterator<Map.Entry<String, BsonValue>> iterator = command.entrySet().iterator();\n+    if (!iterator.hasNext()) {\n+      return Optional.empty();\n+    }\n+    final BsonValue value = iterator.next().getValue();\n+    if (!value.isString()) {\n+      return Optional.empty();\n+    }\n+    final String stringValue = value.asString().getValue().trim();\n+    return stringValue.isEmpty() ? Optional.empty() : Optional.of(stringValue);\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the Mongo protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  Optional<String> getAbbreviatedCommand(final BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) {\n+      return Optional.empty();\n+    }\n+    final String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? Optional.empty() : Optional.of(abbreviatedCommand);\n+  }\n+\n+  static String getSpanName(final String commandName, final Optional<String> collectionName) {\n+    return collectionName.map(collection -> commandName + \" \" + collection).orElse(commandName);\n+  }\n+\n+  public static class Builder {\n+    private Tracer tracer;\n+    private int maxAbbreviatedCommandLength = 100;\n+\n+    /**\n+     * Sets the {@link Tracer} to use. Required.\n+     */\n+    public Builder tracer(final Tracer tracer) {\n+      this.tracer = tracer;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets how many characters of the Mongo command to report in the \"mongo.command\" tag. Defaults to 100.\n+     * If non-positive, command reporting will be disabled.\n+     */\n+    public Builder maxAbbreviatedCommandLength(final int maxAbbreviatedCommandLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzY4NA==", "bodyText": "Can you add tests for\n\nCommand which does not follow command: collection convention, e.g. getMore\nCommand which does not operate on a collection, e.g. addShard\nWrite command with a large payload", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893684", "createdAt": "2020-02-22T07:23:23Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/test/java/brave/mongo/ITTraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ITTraceMongoCommandListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzgxOA==", "bodyText": "Actually, I also found addShard, and presumably similar commands, which don't operate on collections, and can have values with quite crazy cardinality as it's a comma-separated list <replica_set>/<hostname><:port>,<hostname><:port>, .... In either the current or my proposed scheme, I think this will end up written as the collection tag.\nOur builder probably should accept a whitelist of commands to have the collection annotated with a default conservative, widely used set, I think just the top three categories, aggregation, geospatial, query and write here:\nhttps://docs.mongodb.com/manual/reference/command/#aggregation-commands", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r382893818", "createdAt": "2020-02-22T07:26:12Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongo/src/main/java/brave/mongo/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongo;\n+\n+import brave.Span;\n+import brave.Tracer;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A Mongo command listener that will report via Brave how long each command takes.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(TraceMongoCommandListener.builder().tracer(tracer).build())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public class TraceMongoCommandListener implements CommandListener {\n+  private final Tracer tracer;\n+  private final int maxAbbreviatedCommandLength;\n+  private final JsonWriterSettings jsonWriterSettings;\n+  private final Map<Integer, Span> activeSpans = new ConcurrentHashMap<>();\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  protected TraceMongoCommandListener(final Builder builder) {\n+    tracer = Objects.requireNonNull(builder.tracer, \"tracer cannot be null\");\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(Math.max(0, builder.maxAbbreviatedCommandLength))\n+      .build();\n+  }\n+\n+  @Override public void commandStarted(final CommandStartedEvent event) {\n+    final Span span = tracer.nextSpan();\n+    if (span.isNoop()) {\n+      return;\n+    }\n+    activeSpans.put(event.getRequestId(), span);\n+\n+    final String commandName = event.getCommandName();\n+    final String databaseName = event.getDatabaseName();\n+    final BsonDocument command = event.getCommand();\n+    final Optional<String> collectionName = getCollectionName(command);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(databaseName)\n+      .tag(\"db.type\", \"mongo\")\n+      .tag(\"mongo.database\", databaseName)\n+      .tag(\"mongo.operation\", commandName);\n+\n+    getAbbreviatedCommand(command).ifPresent(abbreviatedCommand -> span.tag(\"mongo.command\", abbreviatedCommand));\n+\n+    collectionName.ifPresent(collection -> span.tag(\"mongo.collection\", collection));\n+\n+    final InetSocketAddress socketAddress = event.getConnectionDescription().getServerAddress().getSocketAddress();\n+    span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(final CommandSucceededEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(final CommandFailedEvent event) {\n+    final Span span = activeSpans.remove(event.getRequestId());\n+    if (span == null) {\n+      return;\n+    }\n+    span.error(event.getThrowable());\n+    span.finish();\n+  }\n+\n+  static Optional<String> getCollectionName(final BsonDocument command) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MzIxOA=="}, "originalCommit": {"oid": "dfddc3ea398b09bc01db87a706aebb33303fa138"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b886de820bdb1f664a60f28cbe807b65e1ac80", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/02b886de820bdb1f664a60f28cbe807b65e1ac80", "committedDate": "2020-02-27T02:28:32Z", "message": "Improvements following code review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a830afa5900669f59247e471243ce3214fa08a9", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/7a830afa5900669f59247e471243ce3214fa08a9", "committedDate": "2020-02-27T02:44:17Z", "message": "Merge branch 'master' into add-mongo-instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/3af61108ba26a953a40e446577f845537376d3fb", "committedDate": "2020-02-27T02:46:11Z", "message": "Small documentation improvement."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mzg2MzQ2", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-365386346", "createdAt": "2020-02-27T02:58:36Z", "commit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMjo1ODozNlrOFvDwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzowOTo1OFrOFvD6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg4ODkyNg==", "bodyText": "This instrumentation can only be used with the synchronous mongodb driver. Do not use it with the asynchronous or reactive drivers as tracing data will be incorrect.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384888926", "createdAt": "2020-02-27T02:58:36Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/README.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# brave-instrumentation-mongodb\n+\n+This includes [`TraceMongoCommandListener`](src/main/java/brave/mongodb/TraceMongoCommandListener.java), a\n+[`CommandListener`](https://mongodb.github.io/mongo-java-driver/3.12/driver/reference/monitoring/#command-monitoring)\n+for the Mongo Java driver that will report via Brave how long each command takes, along with relevant tags like the\n+collection/view name, the command's name (`insert`, `update`, `find`, etc.).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg4OTIwOQ==", "bodyText": "Copy into a new set too, the user will still be able to modify the set through the builder.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384889209", "createdAt": "2020-02-27T03:00:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);\n+      clearCommandsWithCollectionName();\n+      addAllCommandsWithCollectionName(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #commandsWithCollectionName}) that operate on\n+     * collections/views.\n+     *\n+     * @param commandName command name to add to the allow-list\n+     */\n+    public Builder addCommandWithCollectionName(String commandName) {\n+      commandsWithCollectionName.add(commandName);\n+      return this;\n+    }\n+\n+    /**\n+     * Same as {@link #addCommandWithCollectionName(String)} but for a collection of command names.\n+     */\n+    public Builder addAllCommandsWithCollectionName(Collection<String> commandNames) {\n+      commandsWithCollectionName.addAll(commandNames);\n+      return this;\n+    }\n+\n+    public MongoDBTracing build() {\n+      return new MongoDBTracing(this);\n+    }\n+  }\n+\n+  final Tracing tracing;\n+  final int maxAbbreviatedCommandLength;\n+  final Set<String> commandsWithCollectionName;\n+\n+  MongoDBTracing(Builder builder) {\n+    tracing = builder.tracing;\n+    maxAbbreviatedCommandLength = builder.maxAbbreviatedCommandLength;\n+    commandsWithCollectionName = Collections.unmodifiableSet(builder.commandsWithCollectionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDA1Mw==", "bodyText": "Just return commandName if collection is null. I'm not sure but don't expect the JVM to optimize the stringbuilder away for this pattern.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384890053", "createdAt": "2020-02-27T03:03:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * Implementation notes regarding the <b>synchronous</b> MongoDB clients ({@link com.mongodb.MongoClient} and\n+ * {@link com.mongodb.client.MongoClient}):\n+ * <p>It is sufficient to use {@link ThreadLocalSpan} because every command starts and ends on the same thread.</p>\n+ * <p>Most commands are executed in the thread where the {@code MongoClient} methods are called from, so (assuming that\n+ * the tracing context is correctly propagated to that thread) all spans should have the correct parent.</p>\n+ * <p>There are two exceptions to the above rule. Some maintenance operations are done on background threads:\n+ * <a href=\"https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-legacy/src/main/com/mongodb/MongoClient.java#L802\">cursor cleaning</a>\n+ * and\n+ * <a href=\"https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-core/src/main/com/mongodb/internal/connection/DefaultConnectionPool.java#L95\">connection pool maintenance</a>.\n+ * The spans resulting from these maintenance operations will not have a parent span.</p>\n+ *\n+ * Implementation notes regarding the <b>asynchronous</b> MongoDB clients ({@code com.mongodb.async.MongoClient} and\n+ * {@code com.mongodb.reactivestreams.client.MongoClient}:\n+ * <p>Support for asynchronous clients is <b>unimplemented</b>.</p>\n+ * <p>The asynchronous clients use threads for the async completion handlers (meaning that\n+ * {@link #commandStarted(CommandStartedEvent)}} and {@link #commandSucceeded(CommandSucceededEvent)}/\n+ * {@link #commandFailed(CommandFailedEvent)}} may get called from background threads and also not necessarily from the\n+ * same thread).</p>\n+ * <p>It should be possible to set a custom {@link com.mongodb.connection.StreamFactoryFactory} on the {@link\n+ * com.mongodb.MongoClientSettings.Builder} which can propagate the tracing context correctly between those handlers,\n+ * but this is <b>unimplemented</b> and it is unknown if this would be sufficient.</p>\n+ */\n+final class TraceMongoCommandListener implements CommandListener {\n+  final Set<String> commandsWithCollectionName;\n+  final int maxAbbreviatedCommandLength;\n+  final ThreadLocalSpan threadLocalSpan;\n+  final JsonWriterSettings jsonWriterSettings;\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing) {\n+    this(mongoDBTracing, ThreadLocalSpan.create(mongoDBTracing.tracing.tracer()));\n+  }\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing, ThreadLocalSpan threadLocalSpan) {\n+    commandsWithCollectionName = mongoDBTracing.commandsWithCollectionName;\n+    maxAbbreviatedCommandLength = mongoDBTracing.maxAbbreviatedCommandLength;\n+    this.threadLocalSpan = threadLocalSpan;\n+    jsonWriterSettings = JsonWriterSettings.builder()\n+      .maxLength(maxAbbreviatedCommandLength)\n+      .build();\n+  }\n+\n+  /**\n+   * Uses {@link ThreadLocalSpan} as there's no attribute namespace shared between callbacks, but\n+   * all callbacks happen on the same thread.\n+   */\n+  @Override public void commandStarted(CommandStartedEvent event) {\n+    Span span = threadLocalSpan.next();\n+    if (span == null || span.isNoop()) return;\n+\n+    String commandName = event.getCommandName();\n+    String databaseName = event.getDatabaseName();\n+    BsonDocument command = event.getCommand();\n+    String collectionName = getCollectionName(command, commandName);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(\"mongodb-\" + databaseName)\n+      .tag(\"mongodb.command.name\", commandName);\n+\n+    String abbreviatedCommand = getAbbreviatedCommand(command);\n+    if (abbreviatedCommand != null) {\n+      span.tag(\"mongodb.command\", abbreviatedCommand);\n+    }\n+\n+    if (collectionName != null) {\n+      span.tag(\"mongodb.collection\", collectionName);\n+    }\n+\n+    ConnectionDescription connectionDescription = event.getConnectionDescription();\n+    if (connectionDescription != null) {\n+      ConnectionId connectionId = connectionDescription.getConnectionId();\n+      if (connectionId != null) {\n+        span.tag(\"mongodb.cluster.id\", connectionId.getServerId().getClusterId().getValue());\n+      }\n+\n+      try {\n+        InetSocketAddress socketAddress = connectionDescription.getServerAddress().getSocketAddress();\n+        span.remoteIpAndPort(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());\n+      } catch (MongoSocketException ignored) {\n+\n+      }\n+    }\n+\n+    span.start();\n+  }\n+\n+  @Override public void commandSucceeded(CommandSucceededEvent event) {\n+    Span span = threadLocalSpan.remove();\n+    if (span == null) return;\n+    span.finish();\n+  }\n+\n+  @Override public void commandFailed(CommandFailedEvent event) {\n+    Span span = threadLocalSpan.remove();\n+    if (span == null) return;\n+    Throwable throwable = event.getThrowable();\n+    span.error(throwable == null ? new MongoException(\"Command failed but no throwable was reported\") : throwable);\n+    span.finish();\n+  }\n+\n+  @Nullable String getCollectionName(BsonDocument command, String commandName) {\n+    if (commandsWithCollectionName.contains(commandName)) {\n+      String collectionName = getNonEmptyBsonString(command.get(commandName));\n+      if (collectionName != null) {\n+        return collectionName;\n+      }\n+    }\n+    // Some other commands, like getMore, have a field like {\"collection\": collectionName}.\n+    return getNonEmptyBsonString(command.get(\"collection\"));\n+  }\n+\n+  /**\n+   * @return trimmed string from {@code bsonValue} or null if the trimmed string was empty or the value wasn't a string\n+   */\n+  @Nullable static String getNonEmptyBsonString(BsonValue bsonValue) {\n+    if (bsonValue == null || !bsonValue.isString()) return null;\n+    String stringValue = bsonValue.asString().getValue().trim();\n+    return stringValue.isEmpty() ? null : stringValue;\n+  }\n+\n+  /**\n+   * Returns an abbreviated version of the command for logging/tracing purposes. Currently this is simply a\n+   * truncated version of the command's JSON string representation.\n+   *\n+   * Note that sensitive data related to the MongoDB protocol itself is already scrubbed at this point according to\n+   * https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst#security\n+   *\n+   * @return an abbreviated version of the command for logging/tracing purposes\n+   */\n+  @Nullable String getAbbreviatedCommand(BsonDocument command) {\n+    if (maxAbbreviatedCommandLength <= 0) return null;\n+    String abbreviatedCommand = command.toJson(jsonWriterSettings);\n+    return abbreviatedCommand.isEmpty() ? null : abbreviatedCommand;\n+  }\n+\n+  static String getSpanName(String commandName, @Nullable String collectionName) {\n+    return commandName + (collectionName == null ? \"\" : (\" \" + collectionName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDYwNQ==", "bodyText": "Thanks for the test coverage", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384890605", "createdAt": "2020-02-27T03:06:12Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracing.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.MongoCommandException;\n+import com.mongodb.MongoQueryException;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.event.CommandListener;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.entry;\n+\n+public class ITMongoDBTracing extends ITMongoDBTracingBase {\n+  MongoClient mongoClient;\n+  MongoDatabase database;\n+\n+  @Before public void init() {\n+    CommandListener listener = MongoDBTracing.newBuilder(tracing)\n+      .maxAbbreviatedCommandLength(8)\n+      .build()\n+      .commandListener();\n+    MongoClientSettings settings = mongoClientSettingsBuilder()\n+      .addCommandListener(listener)\n+      .build();\n+    mongoClient = MongoClients.create(settings);\n+    database = mongoClient.getDatabase(DATABASE_NAME);\n+\n+    spans.clear();\n+  }\n+\n+  @After public void close() {\n+    Tracing.current().close();\n+    if (mongoClient != null) mongoClient.close();\n+  }\n+\n+  @Test public void makesChildOfCurrentSpan() {\n+    ScopedSpan parent = tracing.tracer().startScopedSpan(\"test\");\n+    try {\n+      executeFind(COLLECTION_NAME);\n+    } finally {\n+      parent.finish();\n+    }\n+\n+    assertThat(spans)\n+      .hasSize(2);\n+  }\n+\n+  @Test public void reportsClientKind() {\n+    executeFind(COLLECTION_NAME);\n+\n+    assertThat(spans)\n+      .extracting(Span::kind)\n+      .containsExactly(Span.Kind.CLIENT);\n+  }\n+\n+  @Test\n+  public void defaultSpanNameIsCommandNameAndCollectionName() {\n+    MongoCursor<?> mongoCursor = database.getCollection(COLLECTION_NAME).find().batchSize(1).iterator();\n+\n+    assertThat(mongoCursor.hasNext()).isTrue(); // id=1\n+    mongoCursor.next();\n+    assertThat(mongoCursor.hasNext()).isTrue(); // id=2\n+    mongoCursor.next();\n+\n+    // getMore\n+    assertThat(spans)\n+      .extracting(Span::name)\n+      .containsExactly(\n+        \"find \" + COLLECTION_NAME.toLowerCase(), // extracted from {\"find\": \"myCollection\"}\n+        \"getmore \" + COLLECTION_NAME.toLowerCase() // extracted from {\"getMore\": <cursorId>, \"collection\": \"myCollection\"}\n+      );\n+  }\n+\n+  /** This intercepts all commands, not just queries. This ensures commands without a collection name work */\n+  @Test\n+  public void defaultSpanNameIsCommandName_notStringArgument() {\n+    database.listCollections().first();\n+\n+    assertThat(spans)\n+      .extracting(Span::name)\n+      .containsExactly(\"listcollections\");\n+  }\n+\n+  @Test\n+  public void defaultSpanNameIsCommandName_nonCollectionCommand() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MTQ0OQ==", "bodyText": "A bit overkill but you may want to add a test that uses the builder after building and show it doesn't mutate the built object.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384891449", "createdAt": "2020-02-27T03:09:58Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/MongoDBTracingTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracer;\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+import org.assertj.core.api.InstanceOfAssertFactories;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MongoDBTracingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af61108ba26a953a40e446577f845537376d3fb"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/a2d42be4eadc25a39b8ecaac8e8e582529aecba5", "committedDate": "2020-02-27T06:19:17Z", "message": "More improvements following review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQwNDk3", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-365440497", "createdAt": "2020-02-27T06:32:04Z", "commit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozMjowNVrOFvGlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozNjo0NlrOFvGq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public final static class Builder {\n          \n          \n            \n              public static final class Builder {", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384935252", "createdAt": "2020-02-27T06:32:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTgzMA==", "bodyText": "While not a huge performance concern, let's go ahead and make a constant for the default commands\npublic static final class Builder {\n  // See https:// ...\n  static final List<String> DEFAULT_COMMANDS_WITH_COLLECTION_NAME = Arrays.asList(...);\n\n  final Set<String> commandsWithCollectionName = new HashSet<>();\n\n  Builder(Tracing tracing) {\n    commandsWithCollectionName.addAll(DEFAULT_COMMANDS_WITH_COLLECTION_NAME);\n  }\n\n  Builder(MongoDbTracing t) {\n    commandsWithCollectionName.addAll(t.commandsWithCollectionName);\n  }", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384935830", "createdAt": "2020-02-27T06:34:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjA2Mg==", "bodyText": "I'd just set maxAbbreviatedCommandLength = t.maxAbbreviated... since we never need to validate values from a built object.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384936062", "createdAt": "2020-02-27T06:34:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjY3NA==", "bodyText": "Let's add To replace the list completely, don't forget to call clearCommands... first.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384936674", "createdAt": "2020-02-27T06:36:46Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public final static class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    final Set<String> commandsWithCollectionName = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      this(mongoDBTracing.tracing);\n+      maxAbbreviatedCommandLength(mongoDBTracing.maxAbbreviatedCommandLength);\n+      clearCommandsWithCollectionName();\n+      addAllCommandsWithCollectionName(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #commandsWithCollectionName}) that operate on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQ1NjY1", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-365445665", "createdAt": "2020-02-27T06:47:47Z", "commit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0Nzo0N1rOFvG2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0Nzo0N1rOFvG2Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTU3OQ==", "bodyText": "Ah can you set this to 5.10.2-SNAPSHOT? I think it's causing the failure.\nSee other poms to make sure there aren't any other discrepencies\nhttps://github.com/openzipkin/brave/blob/master/instrumentation/grpc/pom.xml#L19", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r384939579", "createdAt": "2020-02-27T06:47:47Z", "author": {"login": "anuraaga"}, "path": "instrumentation/mongodb/pom.xml", "diffHunk": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+\n+    Copyright 2013-2020 The OpenZipkin Authors\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+    in compliance with the License. You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software distributed under the License\n+    is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+    or implied. See the License for the specific language governing permissions and limitations under\n+    the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>io.zipkin.brave</groupId>\n+    <artifactId>brave-instrumentation-parent</artifactId>\n+    <version>5.9.6-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d42be4eadc25a39b8ecaac8e8e582529aecba5"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/d4a0f1d43a26363ad372071b39e029078c1bdc51", "committedDate": "2020-02-27T15:37:55Z", "message": "Small performance and documentation tweaks. Fixed version number in POM."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDc0ODE3", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-366074817", "createdAt": "2020-02-27T23:37:16Z", "commit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzozNzoxNlrOFvk7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo0NTo0NFrOFvlFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMjQ5Mw==", "bodyText": "we typically don't triple dot. dots cause enough problems, but we accept the one to separated the component from its parts. Can you use underscores for the other side where needed? ex command_name", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385432493", "createdAt": "2020-02-27T23:37:16Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/README.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# brave-instrumentation-mongodb\n+\n+This includes [`TraceMongoCommandListener`](src/main/java/brave/mongodb/TraceMongoCommandListener.java), a\n+[`CommandListener`](https://mongodb.github.io/mongo-java-driver/3.12/driver/reference/monitoring/#command-monitoring)\n+for the Mongo Java driver that will report via Brave how long each command takes, along with relevant tags like the\n+collection/view name, the command's name (`insert`, `update`, `find`, etc.).\n+\n+This instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the asynchronous or\n+reactive drivers as tracing data will be incorrect.\n+\n+## Span properties:\n+- `name`: command name (and collection/view name, if available). Examples: `find myCollection`, `listCollections`, etc.\n+- `kind`: `CLIENT`\n+- `remoteServiceName`: `mongodb-${databaseName}`. Example: `mongodb-myDatabase`.\n+- `remoteIpAndPort`: the IP address and port number of the MongoDB server that the command was issued to\n+- `error`: `Throwable` in case of failed command\n+- Tags:\n+  - `mongodb.command.name`: the name of the MongoDB command. Examples: `find`, `listCollections`, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzI2OQ==", "bodyText": "I understand a lot more now, reading all of things here. I suggest we typically don't tag large things at all, which is why this has come up a bit. For example, in gRPC we added a hook so that users could do this if they want, but instead rely on logging (with trace/spanid correlation) for large data such as payloads. Remember there are other tools like haystack blobs which will also send the request/response body.\nDespite us chatting a bit about how we would store this, I think we skipped why, and especially why by default store this at all. I'd like to hear from existing sites about this and if anything make it optional, if not a custom addition if the majority aren't interested in doing it like this (vs logging which is typically built for larger data and could have the whole thing)", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385433269", "createdAt": "2020-02-27T23:40:07Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/README.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# brave-instrumentation-mongodb\n+\n+This includes [`TraceMongoCommandListener`](src/main/java/brave/mongodb/TraceMongoCommandListener.java), a\n+[`CommandListener`](https://mongodb.github.io/mongo-java-driver/3.12/driver/reference/monitoring/#command-monitoring)\n+for the Mongo Java driver that will report via Brave how long each command takes, along with relevant tags like the\n+collection/view name, the command's name (`insert`, `update`, `find`, etc.).\n+\n+This instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the asynchronous or\n+reactive drivers as tracing data will be incorrect.\n+\n+## Span properties:\n+- `name`: command name (and collection/view name, if available). Examples: `find myCollection`, `listCollections`, etc.\n+- `kind`: `CLIENT`\n+- `remoteServiceName`: `mongodb-${databaseName}`. Example: `mongodb-myDatabase`.\n+- `remoteIpAndPort`: the IP address and port number of the MongoDB server that the command was issued to\n+- `error`: `Throwable` in case of failed command\n+- Tags:\n+  - `mongodb.command.name`: the name of the MongoDB command. Examples: `find`, `listCollections`, etc.\n+  - `mongodb.command`: a possibly truncated, JSON version of the full command. Example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzQ5Ng==", "bodyText": "unless we expect a value tagged about cluster that is not id, I'd drop the .id part", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385433496", "createdAt": "2020-02-27T23:40:52Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/README.md", "diffHunk": "@@ -0,0 +1,35 @@\n+# brave-instrumentation-mongodb\n+\n+This includes [`TraceMongoCommandListener`](src/main/java/brave/mongodb/TraceMongoCommandListener.java), a\n+[`CommandListener`](https://mongodb.github.io/mongo-java-driver/3.12/driver/reference/monitoring/#command-monitoring)\n+for the Mongo Java driver that will report via Brave how long each command takes, along with relevant tags like the\n+collection/view name, the command's name (`insert`, `update`, `find`, etc.).\n+\n+This instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the asynchronous or\n+reactive drivers as tracing data will be incorrect.\n+\n+## Span properties:\n+- `name`: command name (and collection/view name, if available). Examples: `find myCollection`, `listCollections`, etc.\n+- `kind`: `CLIENT`\n+- `remoteServiceName`: `mongodb-${databaseName}`. Example: `mongodb-myDatabase`.\n+- `remoteIpAndPort`: the IP address and port number of the MongoDB server that the command was issued to\n+- `error`: `Throwable` in case of failed command\n+- Tags:\n+  - `mongodb.command.name`: the name of the MongoDB command. Examples: `find`, `listCollections`, etc.\n+  - `mongodb.command`: a possibly truncated, JSON version of the full command. Example:\n+    `{\"find\": \"myCollection\", \"filter\": { \"myField\": { \"$gte\": 5 } } }`\"\n+  - `mongodb.collection`: the name of the MongoDB collection/view that the command operates on, if available\n+  - `mongodb.cluster.id`: a client-generated identifier that uniquely identifies a connection to a MongoDB cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE3Mg==", "bodyText": "this seems pretty special case, why would a user change this? typically the impl is responsible for knowing the driver.\ndepending on this answer, more review to follow :)", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434172", "createdAt": "2020-02-27T23:43:11Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public CommandListener commandListener() {\n+    return new TraceMongoCommandListener(this);\n+  }\n+\n+  public static final class Builder {\n+    final Tracing tracing;\n+    // See https://docs.mongodb.com/manual/reference/command for the command reference\n+    static final List<String> DEFAULT_COMMANDS_WITH_COLLECTION_NAME = Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+      \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+      \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\");\n+    final Set<String> commandsWithCollectionName = new HashSet<>();\n+    int maxAbbreviatedCommandLength = 1000;\n+\n+    Builder(Tracing tracing) {\n+      if (tracing == null) throw new NullPointerException(\"tracing == null\");\n+      this.tracing = tracing;\n+      commandsWithCollectionName.addAll(DEFAULT_COMMANDS_WITH_COLLECTION_NAME);\n+    }\n+\n+    Builder(MongoDBTracing mongoDBTracing) {\n+      tracing = mongoDBTracing.tracing;\n+      maxAbbreviatedCommandLength = mongoDBTracing.maxAbbreviatedCommandLength;\n+      commandsWithCollectionName.addAll(mongoDBTracing.commandsWithCollectionName);\n+    }\n+\n+    /**\n+     * Sets how many characters of the MongoDB command to report in the \"mongodb.command\" tag. Defaults to 1000.\n+     *\n+     * If zero, command reporting will be disabled. The command name will still be reported as \"mongodb.command.name\".\n+     *\n+     * Set it to a large number (ex. {@link Integer#MAX_VALUE}) to disable truncation.\n+     */\n+    public Builder maxAbbreviatedCommandLength(int maxAbbreviatedCommandLength) {\n+      if (maxAbbreviatedCommandLength < 0) throw new IllegalArgumentException(\"maxAbbreviatedCommandLength < 0\");\n+      this.maxAbbreviatedCommandLength = maxAbbreviatedCommandLength;\n+      return this;\n+    }\n+\n+    /**\n+     * Clear the allow-list of command names for which tracing will attempt to extract the collection/view name from\n+     * the argument.\n+     */\n+    public Builder clearCommandsWithCollectionName() {\n+      commandsWithCollectionName.clear();\n+      return this;\n+    }\n+\n+    /**\n+     * Adds a MongoDB command name to the allow-list, indicating that if the command's argument is a string, the\n+     * argument contains the collection/view name. Tracing will only attempt to extract the collection/view name\n+     * argument from allow-listed commands.\n+     *\n+     * The default allow-list is a set of commonly used commands ({@link #DEFAULT_COMMANDS_WITH_COLLECTION_NAME}) that\n+     * operate on collections/views.\n+     *\n+     * To replace the list completely, don't forget to call {@link #clearCommandsWithCollectionName()} first.\n+     *\n+     * @param commandName command name to add to the allow-list\n+     */\n+    public Builder addCommandWithCollectionName(String commandName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDQ2Mg==", "bodyText": "move this stuff to RATIONALE.md as it is easier to read. you can make a comment to look at that if you like", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434462", "createdAt": "2020-02-27T23:44:06Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonWriterSettings;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * Implementation notes regarding the <b>synchronous</b> MongoDB clients ({@link com.mongodb.MongoClient} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDgwMQ==", "bodyText": "you can add the strict scope decorator", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385434801", "createdAt": "2020-02-27T23:45:06Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import brave.propagation.ThreadLocalCurrentTraceContext;\n+import brave.sampler.Sampler;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.ServerAddress;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.testcontainers.containers.GenericContainer;\n+import zipkin2.Span;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+public class ITMongoDBTracingBase {\n+  static String DATABASE_NAME = \"myDatabase\";\n+  static String COLLECTION_NAME = \"myCollection\";\n+  static String INVALID_COLLECTION_NAME = \"?.$\";\n+\n+  static int MONGODB_PORT = 27017;\n+\n+  BlockingQueue<Span> spans = new LinkedBlockingQueue<>();\n+  Tracing tracing = tracingBuilder(Sampler.ALWAYS_SAMPLE).build();\n+\n+  @ClassRule\n+  public static GenericContainer<?> mongo = new GenericContainer<>(\"mongo:4.0\")\n+    .withExposedPorts(MONGODB_PORT);\n+\n+  @BeforeClass public static void initClass() {\n+    MongoClient mongoClient = MongoClients.create(mongoClientSettingsBuilder().build());\n+    MongoDatabase database = mongoClient.getDatabase(DATABASE_NAME);\n+    MongoCollection<Document> collection = database.getCollection(COLLECTION_NAME);\n+    Document document1 = new Document(\"id\", 1);\n+    Document document2 = new Document(\"id\", 2);\n+    collection.insertMany(Arrays.asList(document1, document2));\n+  }\n+\n+  Tracing.Builder tracingBuilder(Sampler sampler) {\n+    return Tracing.newBuilder()\n+      .spanReporter(spans::add)\n+      .currentTraceContext(ThreadLocalCurrentTraceContext.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTAzNQ==", "bodyText": "if you can, be more specific.. ex what type needs to changed to do this.. add a TODO?", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r385435035", "createdAt": "2020-02-27T23:45:44Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingReactive.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import com.mongodb.reactivestreams.client.MongoDatabase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Ignore(\"makesChildOfCurrentSpan() fails because support for reactive MongoDB tracing is unimplemented\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2c3cac59cb418a9011d240cd00d57157575320", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/be2c3cac59cb418a9011d240cd00d57157575320", "committedDate": "2020-03-03T18:02:14Z", "message": "Prefer underscores to dots and other minor improvements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b9c9b99953bc9b10bbd3d594811bbe115fc02f", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/24b9c9b99953bc9b10bbd3d594811bbe115fc02f", "committedDate": "2020-03-03T19:51:05Z", "message": "Remove mongodb.command tagging."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2469216845b5fb59c6dd7db24e60d91e39c10d1e", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/2469216845b5fb59c6dd7db24e60d91e39c10d1e", "committedDate": "2020-03-03T20:36:44Z", "message": "Update tag names in README."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf592ac75bc59de64350ff1612affba3e2663b72", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/bf592ac75bc59de64350ff1612affba3e2663b72", "committedDate": "2020-03-04T04:23:15Z", "message": "Document tag naming convention in RATIONALE.md and rename command_name to just command accordingly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/cc754307fb1fcb4ef6783be6aad11baee34f8824", "committedDate": "2020-03-04T05:03:28Z", "message": "Remove commandsWithCollectionName from builder."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjkyNzg1", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-370692785", "createdAt": "2020-03-06T23:55:49Z", "commit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo1NTo0OVrOFzKxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozMjoyMFrOFzLMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5ODE0Mg==", "bodyText": "Move this and next sentence to the README as it is external that async isn't implemented.\nThen, move the whole section to a new issue, linked back to that part in the README. I think we'll eventually solve this and the background helps.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389198142", "createdAt": "2020-03-06T23:55:49Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/RATIONALE.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Implementation notes\n+\n+## Implementation notes regarding the *synchronous* MongoDB clients\n+\n+Synchronous MongoDB clients: `com.mongodb.MongoClient` and `com.mongodb.client.MongoClient`.\n+\n+It is sufficient to use `ThreadLocalSpan` because every command starts and ends on the same thread.\n+\n+Most commands are executed in the thread where the `MongoClient` methods are called from, so (assuming that the tracing\n+context is correctly propagated to that thread) all spans should have the correct parent.\n+\n+There are two exceptions to the above rule. Some maintenance operations are done on background threads:\n+ * [cursor cleaning](https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-legacy/src/main/com/mongodb/MongoClient.java#L802)\n+ * [connection pool maintenance](https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-core/src/main/com/mongodb/internal/connection/DefaultConnectionPool.java#L95).\n+\n+The spans resulting from these maintenance operations will not have a parent span.\n+\n+## Implementation notes regarding the *asynchronous* MongoDB clients\n+\n+Asynchronous MongoDB clients: `com.mongodb.async.MongoClient` and `com.mongodb.reactivestreams.client.MongoClient`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5ODM2Mw==", "bodyText": "Maybe rename this part to \"Why do we use ThreadLocalSpan in synchronous instrumentation?\"", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389198363", "createdAt": "2020-03-06T23:56:59Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/RATIONALE.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Implementation notes\n+\n+## Implementation notes regarding the *synchronous* MongoDB clients", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5ODkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Implementation notes\n          \n          \n            \n            # brave-instrumentation-mongodb rationale\n          \n      \n    \n    \n  \n\nto match others", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389198910", "createdAt": "2020-03-06T23:59:42Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/RATIONALE.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Implementation notes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDQyNg==", "bodyText": "nit: move to top as more important vs other things. I've also fleshed this out a bit.\nDefault data policy\nWe tried to make the default data policy similar to other instrumentation, such as MySQL, and also current practice from existing sites. Like other instrumentation, the policy is intentionally conservative, in efforts to avoid large spans and taxing sites that may not be interested in all fields. Site-specific overrides should be supported in a later revision.\nTag naming convention\n\nWhy not command BSON?\nWe considered adding the full command text: some users are logging to console and won't be able to use normal correlation to retrieve the query text.  Adding this by default would be troublesome for reasons of size and privacy. For example, we don't tag \"http.url\" by default for reasons of privacy. In addition to this concern, the tagging BSON could easily be large enough to break the process. For example, this is why Expedia have a different server, haystack-blobs, to handle request uploads (spans only include links to data). In any case, trying to store the full text would lead to a truncation concern. To simplify the first release, we leave out request tagging and plan to permit users to do this on their own with a future Parser feature.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389204426", "createdAt": "2020-03-07T00:28:11Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/RATIONALE.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Implementation notes\n+\n+## Implementation notes regarding the *synchronous* MongoDB clients\n+\n+Synchronous MongoDB clients: `com.mongodb.MongoClient` and `com.mongodb.client.MongoClient`.\n+\n+It is sufficient to use `ThreadLocalSpan` because every command starts and ends on the same thread.\n+\n+Most commands are executed in the thread where the `MongoClient` methods are called from, so (assuming that the tracing\n+context is correctly propagated to that thread) all spans should have the correct parent.\n+\n+There are two exceptions to the above rule. Some maintenance operations are done on background threads:\n+ * [cursor cleaning](https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-legacy/src/main/com/mongodb/MongoClient.java#L802)\n+ * [connection pool maintenance](https://github.com/mongodb/mongo-java-driver/blob/67c9f738ae44bc15befb822644e7266634c7dcf5/driver-core/src/main/com/mongodb/internal/connection/DefaultConnectionPool.java#L95).\n+\n+The spans resulting from these maintenance operations will not have a parent span.\n+\n+## Implementation notes regarding the *asynchronous* MongoDB clients\n+\n+Asynchronous MongoDB clients: `com.mongodb.async.MongoClient` and `com.mongodb.reactivestreams.client.MongoClient`.\n+\n+Support for asynchronous clients is **unimplemented**.\n+\n+The asynchronous clients use threads for the async completion handlers (meaning that\n+`#commandStarted(CommandStartedEvent)` and `#commandSucceeded(CommandSucceededEvent)`/\n+`#commandFailed(CommandFailedEvent)` may get called from background threads and also not necessarily from the same\n+thread).\n+\n+It should be possible to set a custom `com.mongodb.connection.StreamFactoryFactory` on the\n+`com.mongodb.MongoClientSettings.Builder` which can propagate the tracing context correctly between those handlers,\n+but this is **unimplemented** and it is unknown if this would be sufficient.\n+\n+# Tag naming convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDU5MA==", "bodyText": "PS do you know how mongo gets this breakdown, classifying commands by type such as write? https://docs.mongodb.com/manual/reference/command/serverStatus/#opcounters", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389204590", "createdAt": "2020-03-07T00:29:01Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# brave-instrumentation-mongodb\n+\n+This includes [`TraceMongoCommandListener`](src/main/java/brave/mongodb/TraceMongoCommandListener.java), a\n+[`CommandListener`](https://mongodb.github.io/mongo-java-driver/3.12/driver/reference/monitoring/#command-monitoring)\n+for the Mongo Java driver that will report via Brave how long each command takes, along with relevant tags like the\n+collection/view name, the command's name (`insert`, `update`, `find`, etc.).\n+\n+This instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the asynchronous or\n+reactive drivers as tracing data will be incorrect.\n+\n+## Span properties:\n+- `name`: command name (and collection/view name, if available). Examples: `find myCollection`, `listCollections`, etc.\n+- `kind`: `CLIENT`\n+- `remoteServiceName`: `mongodb-${databaseName}`. Example: `mongodb-myDatabase`.\n+- `remoteIpAndPort`: the IP address and port number of the MongoDB server that the command was issued to\n+- `error`: `Throwable` in case of failed command\n+- Tags:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNDkxNg==", "bodyText": "reconsider if this should be \"mongodb.command_name\" as it gets out of the way of \"mongodb.command\" if folks later add the full command as a property..", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389204916", "createdAt": "2020-03-07T00:30:56Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Span;\n+import brave.internal.Nullable;\n+import brave.propagation.ThreadLocalSpan;\n+import com.mongodb.MongoException;\n+import com.mongodb.MongoSocketException;\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.connection.ConnectionId;\n+import com.mongodb.event.CommandFailedEvent;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.event.CommandStartedEvent;\n+import com.mongodb.event.CommandSucceededEvent;\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A MongoDB command listener that will report via Brave how long each command takes and other information about the\n+ * commands.\n+ *\n+ * See <a href=\"https://github.com/openzipkin/brave/blob/master/instrumentation/mongodb/RATIONALE.md\">RATIONALE.md</a>\n+ * for implementation notes.\n+ */\n+final class TraceMongoCommandListener implements CommandListener {\n+  // See https://docs.mongodb.com/manual/reference/command for the command reference\n+  static final Set<String> COMMANDS_WITH_COLLECTION_NAME = new HashSet<>(Arrays.asList(\"aggregate\", \"count\", \"distinct\",\n+    \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\", \"insert\", \"update\", \"collMod\", \"compact\",\n+    \"convertToCapped\", \"create\", \"createIndexes\", \"drop\", \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));\n+\n+  final ThreadLocalSpan threadLocalSpan;\n+\n+  TraceMongoCommandListener(MongoDBTracing mongoDBTracing) {\n+    this(ThreadLocalSpan.create(mongoDBTracing.tracing.tracer()));\n+  }\n+\n+  TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan) {\n+    this.threadLocalSpan = threadLocalSpan;\n+  }\n+\n+  /**\n+   * Uses {@link ThreadLocalSpan} as there's no attribute namespace shared between callbacks, but\n+   * all callbacks happen on the same thread.\n+   */\n+  @Override public void commandStarted(CommandStartedEvent event) {\n+    Span span = threadLocalSpan.next();\n+    if (span == null || span.isNoop()) return;\n+\n+    String commandName = event.getCommandName();\n+    String databaseName = event.getDatabaseName();\n+    BsonDocument command = event.getCommand();\n+    String collectionName = getCollectionName(command, commandName);\n+\n+    span.name(getSpanName(commandName, collectionName))\n+      .kind(Span.Kind.CLIENT)\n+      .remoteServiceName(\"mongodb-\" + databaseName)\n+      .tag(\"mongodb.command\", commandName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTE3Ng==", "bodyText": "bump this", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r389205176", "createdAt": "2020-03-07T00:32:20Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -114,6 +114,8 @@\n     <mockito.version>2.28.2</mockito.version>\n     <jersey.version>2.25.1</jersey.version>\n     <jmh.version>1.22</jmh.version>\n+    <testcontainers.version>1.12.5</testcontainers.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc754307fb1fcb4ef6783be6aad11baee34f8824"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fec6089659cbe8e0007e1d2136d4c4368a404bec", "author": {"user": {"login": "csabakos", "name": "Csaba Kos"}}, "url": "https://github.com/openzipkin/brave/commit/fec6089659cbe8e0007e1d2136d4c4368a404bec", "committedDate": "2020-03-11T16:11:55Z", "message": "One more round of improvements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDcyMTcz", "url": "https://github.com/openzipkin/brave/pull/1090#pullrequestreview-379072173", "createdAt": "2020-03-23T00:06:30Z", "commit": {"oid": "fec6089659cbe8e0007e1d2136d4c4368a404bec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMDowNjozMVrOF5z7WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMDoxOToxM1rOF50Alw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2MzkyOQ==", "bodyText": "we can remove this and the ctor that accepts MongoDBtracing as we don't have this for other builders. (consistency)", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396163929", "createdAt": "2020-03-23T00:06:31Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/main/java/brave/mongodb/MongoDBTracing.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.Tracing;\n+import com.mongodb.event.CommandListener;\n+\n+/**\n+ * Use this class to decorate your MongoDB client and enable Tracing.\n+ *\n+ * <p>To use it, call <code>.addCommandListener(MongoDBTracing.create(tracing).commandListener())</code>\n+ * on the {@link com.mongodb.MongoClientOptions} or {@link com.mongodb.MongoClientSettings} object that is used to\n+ * create the {@code MongoClient} to be instrumented.\n+ *\n+ * As of now, this instrumentation can only be used with the synchronous MongoDB driver. Do not use it with the\n+ * asynchronous or reactive drivers as tracing data will be incorrect.\n+ */\n+public final class MongoDBTracing {\n+  public static MongoDBTracing create(final Tracing tracing) {\n+    return newBuilder(tracing).build();\n+  }\n+\n+  public static Builder newBuilder(final Tracing tracing) {\n+    return new Builder(tracing);\n+  }\n+\n+  public Builder toBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec6089659cbe8e0007e1d2136d4c4368a404bec"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NDQyNQ==", "bodyText": "add the issue number? I think you raised one.", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396164425", "createdAt": "2020-03-23T00:11:36Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingReactive.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import com.mongodb.reactivestreams.client.MongoDatabase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Ignore(\"makesChildOfCurrentSpan() fails because support for reactive MongoDB tracing is unimplemented\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNTAzNQ=="}, "originalCommit": {"oid": "d4a0f1d43a26363ad372071b39e029078c1bdc51"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE2NTI3MQ==", "bodyText": "not handling onError could lead to hard to debug things later. Can you refactor to use AssertableCallback once #1120 is merged?", "url": "https://github.com/openzipkin/brave/pull/1090#discussion_r396165271", "createdAt": "2020-03-23T00:19:13Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/mongodb/src/test/java/brave/mongodb/ITMongoDBTracingReactive.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.mongodb;\n+\n+import brave.ScopedSpan;\n+import brave.Tracing;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.event.CommandListener;\n+import com.mongodb.reactivestreams.client.MongoClient;\n+import com.mongodb.reactivestreams.client.MongoClients;\n+import com.mongodb.reactivestreams.client.MongoDatabase;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+// TODO: Add support for Reactive tracing. See the notes in RATIONALE.md.\n+@Ignore(\"makesChildOfCurrentSpan() fails because support for reactive MongoDB tracing is unimplemented\")\n+public class ITMongoDBTracingReactive extends ITMongoDBTracingBase {\n+  MongoClient mongoClient;\n+  MongoDatabase database;\n+\n+  @Before public void init() {\n+    CommandListener listener = MongoDBTracing.newBuilder(tracing)\n+      .build()\n+      .commandListener();\n+    MongoClientSettings settings = mongoClientSettingsBuilder()\n+      .addCommandListener(listener)\n+      .build();\n+    mongoClient = MongoClients.create(settings);\n+    database = mongoClient.getDatabase(\"testDatabase\");\n+\n+    spans.clear();\n+  }\n+\n+  @After public void close() {\n+    Tracing.current().close();\n+    if (mongoClient != null) mongoClient.close();\n+  }\n+\n+  @Test public void makesChildOfCurrentSpan() throws InterruptedException {\n+    ScopedSpan parent = tracing.tracer().startScopedSpan(\"test\");\n+    try {\n+      blockUntilComplete(database.getCollection(COLLECTION_NAME).find().first());\n+    } finally {\n+      parent.finish();\n+    }\n+\n+    assertThat(spans)\n+      .hasSize(2);\n+  }\n+\n+  static void blockUntilComplete(Publisher<?> publisher) throws InterruptedException {\n+    CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+    publisher.subscribe(new Subscriber<Object>() {\n+      @Override public void onSubscribe(Subscription subscription) {\n+        subscription.request(Long.MAX_VALUE);\n+      }\n+\n+      @Override public void onNext(Object o) {\n+\n+      }\n+\n+      @Override public void onError(Throwable throwable) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec6089659cbe8e0007e1d2136d4c4368a404bec"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}