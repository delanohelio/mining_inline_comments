{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDAwNTI5", "number": 1055, "title": "Propagate current span to http client callback thread", "bodyText": "", "createdAt": "2020-01-15T07:45:32Z", "url": "https://github.com/openzipkin/brave/pull/1055", "merged": true, "mergeCommit": {"oid": "85ca11f46651c9690696d9721b448243d067119c"}, "closed": true, "closedAt": "2020-01-20T12:08:14Z", "author": {"login": "simontoens"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6gz0fAFqTM0MzAzNTIwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7ZXZzgH2gAyMzYzMDAwNTI5OjE2YWZkOTQ1YTZjYzE0NDBhYzhmZGQ2MjQ3YWMzOGNkOTEzMWQ5N2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDM1MjAz", "url": "https://github.com/openzipkin/brave/pull/1055#pullrequestreview-343035203", "createdAt": "2020-01-15T07:53:07Z", "commit": {"oid": "62bc918d29092285f41bd11f7b0f9e50bc838638"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNzo1MzowN1rOFdvn1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNzo1NDowM1rOFdvo_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczMzI2OQ==", "bodyText": "the tracecontext here in currentSpan should be the same as what's above set in context.setAttribute right? as there's some cost to fetching it, I think we should remember or reuse the context value.", "url": "https://github.com/openzipkin/brave/pull/1055#discussion_r366733269", "createdAt": "2020-01-15T07:53:07Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/main/java/brave/httpasyncclient/TracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -131,7 +134,7 @@ static void parseTargetAddress(HttpHost target, Span span) {\n         new TracingAsyncRequestProducer(requestProducer, context),\n         new TracingAsyncResponseConsumer<>(responseConsumer, context),\n         context,\n-        callback\n+        new FutureCallbackWithCurrentSpan(tracer.currentSpan(), callback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bc918d29092285f41bd11f7b0f9e50bc838638"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczMzU2Ng==", "bodyText": "I'd reduce the cost of this by making it a static final, passing the CurrentTraceContext, TraceContext, and the callback. CurrentTraceContext scope commands are a bit cheaper than tracer based ones.", "url": "https://github.com/openzipkin/brave/pull/1055#discussion_r366733566", "createdAt": "2020-01-15T07:54:03Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/main/java/brave/httpasyncclient/TracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -148,6 +151,37 @@ static void parseTargetAddress(HttpHost target, Span span) {\n     }\n   }\n \n+  final class FutureCallbackWithCurrentSpan<T> implements FutureCallback<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bc918d29092285f41bd11f7b0f9e50bc838638"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzM0MTc5", "url": "https://github.com/openzipkin/brave/pull/1055#pullrequestreview-344334179", "createdAt": "2020-01-17T02:30:52Z", "commit": {"oid": "d67ad9f3539c0beff8f6dbb7b49cff05ddb07315"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjozMDo1MlrOFetUMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjozMDo1MlrOFetUMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NDA0OA==", "bodyText": "I would go a bit farther, because you are not only setting a current span, but specifically the invocation context. Ex if you change spanIsVisible to something that catches the current tracecontext, you can compare it against the one in line 124", "url": "https://github.com/openzipkin/brave/pull/1055#discussion_r367744048", "createdAt": "2020-01-17T02:30:52Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/test/java/brave/httpasyncclient/ITTracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -92,4 +98,54 @@ protected void post(CloseableHttpAsyncClient client, String pathIncludingQuery,\n     \n     takeSpan();\n   }\n+\n+  @Test public void currentSpanIsVisibleInCallbackThread() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67ad9f3539c0beff8f6dbb7b49cff05ddb07315"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDg1Mjg0", "url": "https://github.com/openzipkin/brave/pull/1055#pullrequestreview-344485284", "createdAt": "2020-01-17T10:23:43Z", "commit": {"oid": "1089793ce68d80d7cf8e46241caaac40011bfc3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDoyMzo0M1rOFe0rzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDoyMzo0M1rOFe0rzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NDc4MA==", "bodyText": "I think what's left here (besides nit on formatting) is to simplify the code and remove the wait loop. For example, if we use a countdownlatch instead of AtomicBoolean for callbackCompleted. You can search for references to CountdownLatch in brave for similar examples.\nnext, the assertion in 117 may actually occur off the main thread, which is why you are saving a boolean there. I think it is a bit cleaner to have an atomic reference of TraceContext, then you can do assertThat(callbackTraceContext.get()).isSameAs(expected) right after your countdown latch is done.", "url": "https://github.com/openzipkin/brave/pull/1055#discussion_r367864780", "createdAt": "2020-01-17T10:23:43Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/test/java/brave/httpasyncclient/ITTracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -92,4 +99,52 @@ protected void post(CloseableHttpAsyncClient client, String pathIncludingQuery,\n     \n     takeSpan();\n   }\n+\n+  @Test public void currentTraceContextIsVisibleInCallbackThread() throws Exception {\n+    Tracer tracer = httpTracing.tracing().tracer();\n+    AtomicBoolean callbackHasTraceCtx = new AtomicBoolean(false);\n+    AtomicBoolean callbackCompleted = new AtomicBoolean(false);\n+    server.enqueue(new MockResponse());\n+    closeClient(client);\n+    client = TracingHttpAsyncClientBuilder.create(httpTracing).build();\n+    client.start();\n+    ScopedSpan span = tracer.startScopedSpan(\"test\");\n+    TraceContext expectedTraceCtx = span.context();\n+\n+    try { ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1089793ce68d80d7cf8e46241caaac40011bfc3e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDg2MTk2", "url": "https://github.com/openzipkin/brave/pull/1055#pullrequestreview-344486196", "createdAt": "2020-01-17T10:25:22Z", "commit": {"oid": "1089793ce68d80d7cf8e46241caaac40011bfc3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDoyNToyMlrOFe0uSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDoyNToyMlrOFe0uSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NTQxNw==", "bodyText": "is restarting the client needed here? what happens if you don't close it? it looks like it would be the same as what you're doing. maybe try without lines 108-110 or add a comment above why we have to recreate it.", "url": "https://github.com/openzipkin/brave/pull/1055#discussion_r367865417", "createdAt": "2020-01-17T10:25:22Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/httpasyncclient/src/test/java/brave/httpasyncclient/ITTracingHttpAsyncClientBuilder.java", "diffHunk": "@@ -92,4 +99,52 @@ protected void post(CloseableHttpAsyncClient client, String pathIncludingQuery,\n     \n     takeSpan();\n   }\n+\n+  @Test public void currentTraceContextIsVisibleInCallbackThread() throws Exception {\n+    Tracer tracer = httpTracing.tracing().tracer();\n+    AtomicBoolean callbackHasTraceCtx = new AtomicBoolean(false);\n+    AtomicBoolean callbackCompleted = new AtomicBoolean(false);\n+    server.enqueue(new MockResponse());\n+    closeClient(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1089793ce68d80d7cf8e46241caaac40011bfc3e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053b4e611d044c38c2ddbbede68b6099d4f3a130", "author": {"user": {"login": "simontoens", "name": "Simon Toens"}}, "url": "https://github.com/openzipkin/brave/commit/053b4e611d044c38c2ddbbede68b6099d4f3a130", "committedDate": "2020-01-17T23:02:37Z", "message": "Propagate current span to http client callback thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943e2a9a479b9d9ccdc7bc423138106446bf0242", "author": {"user": {"login": "simontoens", "name": "Simon Toens"}}, "url": "https://github.com/openzipkin/brave/commit/943e2a9a479b9d9ccdc7bc423138106446bf0242", "committedDate": "2020-01-17T23:02:40Z", "message": "Reuse current trace ctx instead of getting the current span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c29712edd34a8b81c9b84a97763ffa1ff3b5c38c", "author": {"user": {"login": "simontoens", "name": "Simon Toens"}}, "url": "https://github.com/openzipkin/brave/commit/c29712edd34a8b81c9b84a97763ffa1ff3b5c38c", "committedDate": "2020-01-17T23:02:40Z", "message": "Fix test failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a3562bbd97158ec08a52d14c7566bc28cd19d21", "author": {"user": {"login": "simontoens", "name": "Simon Toens"}}, "url": "https://github.com/openzipkin/brave/commit/9a3562bbd97158ec08a52d14c7566bc28cd19d21", "committedDate": "2020-01-17T23:02:40Z", "message": "Test now checks for expected TraceContext instead of Span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16afd945a6cc1440ac8fdd6247ac38cd9131d97a", "author": {"user": {"login": "simontoens", "name": "Simon Toens"}}, "url": "https://github.com/openzipkin/brave/commit/16afd945a6cc1440ac8fdd6247ac38cd9131d97a", "committedDate": "2020-01-18T01:49:39Z", "message": "Test cleanup based on review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1818, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}