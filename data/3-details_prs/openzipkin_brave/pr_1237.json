{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDMwOTA3", "number": 1237, "title": "Add support for rabbitmq batch consume", "bodyText": "for #1236\n@adriancole  I try fixed this. Please see if that makes sense.", "createdAt": "2020-07-13T04:44:28Z", "url": "https://github.com/openzipkin/brave/pull/1237", "merged": true, "mergeCommit": {"oid": "307dc91c33263fe435ec328da3b39fe53b8f05e6"}, "closed": true, "closedAt": "2020-07-21T00:41:36Z", "author": {"login": "dengliming"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0Z7K4AH2gAyNDQ4MDMwOTA3OjU4MzJiMDUyYTExM2NhOWY3YzNkY2Q4ZTY1NDQ5ZGUwMTQzYTlhZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc27RZyAFqTQ1MjA0OTk4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5832b052a113ca9f7c3dcd8e65449de0143a9ad5", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/5832b052a113ca9f7c3dcd8e65449de0143a9ad5", "committedDate": "2020-07-13T04:42:24Z", "message": "Add support for rabbitmq batch consume"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTgyMTcy", "url": "https://github.com/openzipkin/brave/pull/1237#pullrequestreview-446982172", "createdAt": "2020-07-13T05:01:41Z", "commit": {"oid": "5832b052a113ca9f7c3dcd8e65449de0143a9ad5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTowMTo0MVrOGwbhRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTowMTo0MVrOGwbhRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQzNTcxNw==", "bodyText": "This is an interesting situation as we want one consumer span for the batch I think.. also, there's only one listener, so should only be one listener span!\nThe tricky bit is that we have an ambiguous situation. For example, we may have different trace contexts in the batch of messages. Consider 5 messages, and two of them have \"b3\" header in them.\nThis \"join\" type operation forces us to choose which of these possibly multiple traces should be the trace of the listener.\nAnother option is like you've done, which is to start a span for every message, but since only one can be the \"current trace\" we still I think should pick one. We don't yet have a link model, but meanwhile yeah I feel like we should have only 1 span started for the listener, because only one child started in a listener could be attached to a trace.\ncc @jorgheymans @anuraaga @jeqo for feedback on this.", "url": "https://github.com/openzipkin/brave/pull/1237#discussion_r453435717", "createdAt": "2020-07-13T05:01:41Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/spring-rabbit/src/main/java/brave/spring/rabbit/TracingRabbitListenerAdvice.java", "diffHunk": "@@ -72,40 +76,53 @@\n    * Message)}\n    */\n   @Override public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n-    Message message = (Message) methodInvocation.getArguments()[1];\n-    MessageConsumerRequest request = new MessageConsumerRequest(message);\n+    List<Message> messages = new ArrayList<>();\n+    if (methodInvocation.getArguments()[1] instanceof List) {\n+      messages.addAll((Collection<? extends Message>) methodInvocation.getArguments()[1]);\n+    } else {\n+      messages.add((Message) methodInvocation.getArguments()[1]);\n+    }\n+\n+    List<Span> listenerSpans = new ArrayList<>(messages.size());\n+    for (Message message : messages) {\n+      MessageConsumerRequest request = new MessageConsumerRequest(message);\n \n-    TraceContextOrSamplingFlags extracted =\n-      springRabbitTracing.extractAndClearTraceIdHeaders(extractor, request, message);\n+      TraceContextOrSamplingFlags extracted =\n+        springRabbitTracing.extractAndClearTraceIdHeaders(extractor, request, message);\n \n-    // named for BlockingQueueConsumer.nextMessage, which we can't currently see\n-    Span consumerSpan = springRabbitTracing.nextMessagingSpan(sampler, request, extracted);\n-    Span listenerSpan = tracer.newChild(consumerSpan.context());\n+      // named for BlockingQueueConsumer.nextMessage, which we can't currently see\n+      Span consumerSpan = springRabbitTracing.nextMessagingSpan(sampler, request, extracted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5832b052a113ca9f7c3dcd8e65449de0143a9ad5"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e93376b8d3dbc3e4a5c7fbb52e798bcdb44134", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/22e93376b8d3dbc3e4a5c7fbb52e798bcdb44134", "committedDate": "2020-07-13T06:17:51Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cfd90d2ef26074924fb71bdd8618f1236bffca4", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/2cfd90d2ef26074924fb71bdd8618f1236bffca4", "committedDate": "2020-07-18T06:29:26Z", "message": "Add test case for batch consume."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDg4NTY3", "url": "https://github.com/openzipkin/brave/pull/1237#pullrequestreview-451088567", "createdAt": "2020-07-18T23:45:24Z", "commit": {"oid": "2cfd90d2ef26074924fb71bdd8618f1236bffca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMzo0NToyNVrOGzrQ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMzo0NToyNVrOGzrQ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzOTQxMA==", "bodyText": "please add a test for two messages in all combinations as it shows a problem to solve later\nnon traced that listener is a new trace\nfirst traced that listener continues that trace\ntwo traced that listener continues first  trace but TODO we aren't handling the second.\nlast trace that listener is new trace and TODO about the second", "url": "https://github.com/openzipkin/brave/pull/1237#discussion_r456839410", "createdAt": "2020-07-18T23:45:25Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/ITSpringRabbitTracing.java", "diffHunk": "@@ -150,4 +152,16 @@\n     awaitMessageConsumed();\n     // reporter rules verify nothing was reported\n   }\n+\n+  @Test public void batchConsumerTest() {\n+    produceUntracedMessage(exchange_batch.getName(), binding_batch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfd90d2ef26074924fb71bdd8618f1236bffca4"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60055f7ed967ec421249244b4fa4c761bee1f4c2", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/60055f7ed967ec421249244b4fa4c761bee1f4c2", "committedDate": "2020-07-19T05:59:33Z", "message": "fix testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4f3083d0364fdfca9348847e9ccc930934a1a9", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/4e4f3083d0364fdfca9348847e9ccc930934a1a9", "committedDate": "2020-07-19T06:17:27Z", "message": "fix testcase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTc4MzMw", "url": "https://github.com/openzipkin/brave/pull/1237#pullrequestreview-451178330", "createdAt": "2020-07-20T00:23:48Z", "commit": {"oid": "4e4f3083d0364fdfca9348847e9ccc930934a1a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoyMzo0OFrOGzzjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoyMzo0OFrOGzzjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NTE3OQ==", "bodyText": "last thing from me on this.. I see you are only checking spans.get(0) the reported trace.\nthough I don't see any problems.. maybe ensure the B3 headers are cleared in all messages in each test after onBatchMessageConsumed similar to other tests\n    // cleared the headers to later work doesn't try to use the old parent\n    assertThat(message.getMessageProperties().getHeaders()).isEmpty();", "url": "https://github.com/openzipkin/brave/pull/1237#discussion_r456975179", "createdAt": "2020-07-20T00:23:48Z", "author": {"login": "codefromthecrypt"}, "path": "instrumentation/spring-rabbit/src/test/java/brave/spring/rabbit/TracingRabbitListenerAdviceTest.java", "diffHunk": "@@ -196,6 +203,72 @@\n       .containsExactly(error);\n   }\n \n+  @Test public void batch_starts_new_trace_if_none_exists() throws Throwable {\n+    // non traced that listener is a new trace\n+    onBatchMessageConsumed(Arrays.asList(MessageBuilder.withBody(new byte[0]).build(),\n+      MessageBuilder.withBody(new byte[0]).build()));\n+\n+    assertThat(spans)\n+      .extracting(MutableSpan::kind)\n+      .containsExactly(CONSUMER, null);\n+  }\n+\n+  @Test public void batch_continue_parent_trace() throws Throwable {\n+    MessageProperties props = new MessageProperties();\n+    props.setHeader(\"X-B3-TraceId\", TRACE_ID);\n+    props.setHeader(\"X-B3-SpanId\", SPAN_ID);\n+    props.setHeader(\"X-B3-ParentSpanId\", PARENT_ID);\n+    props.setHeader(\"X-B3-Sampled\", SAMPLED);\n+\n+    Message message = MessageBuilder.withBody(new byte[0]).andProperties(props).build();\n+    MessageProperties props2 = new MessageProperties();\n+    props2.setHeader(\"X-B3-TraceId\", TRACE_ID_2);\n+    props2.setHeader(\"X-B3-SpanId\", SPAN_ID_2);\n+    props2.setHeader(\"X-B3-ParentSpanId\", PARENT_ID_2);\n+    props2.setHeader(\"X-B3-Sampled\", SAMPLED);\n+    Message message2 = MessageBuilder.withBody(new byte[0]).andProperties(props2).build();\n+    onBatchMessageConsumed(Arrays.asList(message, message2));\n+\n+    // two traced that listener continues first trace but TODO we aren't handling the second.\n+    assertThat(spans.get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e4f3083d0364fdfca9348847e9ccc930934a1a9"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa20102ae8625e9c710f281b55e159fb9a644340", "author": {"user": {"login": "dengliming", "name": null}}, "url": "https://github.com/openzipkin/brave/commit/fa20102ae8625e9c710f281b55e159fb9a644340", "committedDate": "2020-07-20T14:44:42Z", "message": "fix review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDQ5OTg3", "url": "https://github.com/openzipkin/brave/pull/1237#pullrequestreview-452049987", "createdAt": "2020-07-21T00:41:24Z", "commit": {"oid": "fa20102ae8625e9c710f281b55e159fb9a644340"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1783, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}