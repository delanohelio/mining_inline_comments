{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NzQ3NzY2", "number": 1284, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDowMDoyOFrOFIy6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDowMDoyOFrOFIy6eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzY3MDk4OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/codec/CharSequences.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDowMDoyOFrOIK7G2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDoxNDoyNFrOIK7Q-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNTA4MQ==", "bodyText": "Don't think I see this used in this PR so just curious what situations this would be used for.", "url": "https://github.com/openzipkin/brave/pull/1284#discussion_r548325081", "createdAt": "2020-12-24T00:00:28Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/codec/CharSequences.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.codec;\n+\n+/**\n+ * Most of our parsing tools accept {@link CharSequence} instead of {@link String} to avoid\n+ * unnecessary allocation. This contains common functions available on {@link String}, preferring\n+ * signatures that match our utilities such as {@link EntrySplitter}.\n+ */\n+public final class CharSequences {\n+\n+  /**\n+   * Joins two character sequences together. Inputs must be immutable. This is useful when the\n+   * result is only scanned. It does not implement {@link #toString()} or {@link #equals(Object)}.\n+   */\n+  public static CharSequence concat(CharSequence left, CharSequence right) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7456d1aa1c5bfdb1360297ab0283c75a440914e4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNzY3Mg==", "bodyText": "Good point, I think initially I thought I would use concat for writing a combined header itself (ex \"b3=1\"+\",otherthings\"), but noticed StringBuilder does a better job when the result is a string. and string is required for Setter anyway.\nThe type used inside the method is a part of implementing withoutSubSequence, used to black hole b3's entry in tracestate, but you are right that the static method isn't used. I was also two minds on this, but no problem moving the javadoc down to the inner type and raising it if there were any later uses.\n\ud83d\udc4d", "url": "https://github.com/openzipkin/brave/pull/1284#discussion_r548327672", "createdAt": "2020-12-24T00:14:24Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/codec/CharSequences.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.codec;\n+\n+/**\n+ * Most of our parsing tools accept {@link CharSequence} instead of {@link String} to avoid\n+ * unnecessary allocation. This contains common functions available on {@link String}, preferring\n+ * signatures that match our utilities such as {@link EntrySplitter}.\n+ */\n+public final class CharSequences {\n+\n+  /**\n+   * Joins two character sequences together. Inputs must be immutable. This is useful when the\n+   * result is only scanned. It does not implement {@link #toString()} or {@link #equals(Object)}.\n+   */\n+  public static CharSequence concat(CharSequence left, CharSequence right) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNTA4MQ=="}, "originalCommit": {"oid": "7456d1aa1c5bfdb1360297ab0283c75a440914e4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1500, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}