{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzg2NzA4", "number": 1146, "title": "Adds an example about counting children", "bodyText": "Those who need to process statistics on children can do something\nlike this, which works for any instrumentation.\nRequested by @fletch3555", "createdAt": "2020-04-10T07:04:18Z", "url": "https://github.com/openzipkin/brave/pull/1146", "merged": true, "mergeCommit": {"oid": "385232bc3cf9523941e350db0f5e84336f023c7c"}, "closed": true, "closedAt": "2020-04-10T10:31:13Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWLmXwgH2gAyNDAxNzg2NzA4OmJiMzJkNTEyMzNkMDVjMWFlYmMyODM4OWI5MGYwYzA1ODYxNmMzZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWOaTYgFqTM5MTM3NDEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb32d51233d05c1aebc28389b90f0c058616c3f5", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/bb32d51233d05c1aebc28389b90f0c058616c3f5", "committedDate": "2020-04-10T07:03:17Z", "message": "Adds an example about counting children\n\nThose who need to process statistics on children can do something\nlike this, which works for any instrumentation.\n\nRequested by @fletch3555"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzAyMjMz", "url": "https://github.com/openzipkin/brave/pull/1146#pullrequestreview-391302233", "createdAt": "2020-04-10T07:17:28Z", "commit": {"oid": "bb32d51233d05c1aebc28389b90f0c058616c3f5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxNzoyOVrOGDzGJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyNzozN1rOGDzS6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNjA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p><em>Note:</em> this currently only works with children enclosed by their parents. If you have\n          \n          \n            \n             * <p><em>Note:</em> this currently only works with children fully enclosed by their parents. If you have\n          \n      \n    \n    \n  \n\nVery small suggestion that I think makes it quite a bit more readable.", "url": "https://github.com/openzipkin/brave/pull/1146#discussion_r406636071", "createdAt": "2020-04-10T07:17:29Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/brave/features/handler/CountingChildrenTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.handler;\n+\n+import brave.Tracer;\n+import brave.Tracing;\n+import brave.handler.FinishedSpanHandler;\n+import brave.handler.MutableSpan;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Test;\n+import zipkin2.Span;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.tuple;\n+\n+/**\n+ * This shows how a {@link FinishedSpanHandler} can add data some external formats need, such as\n+ * child count.\n+ *\n+ * <p><em>Note:</em> this currently only works with children enclosed by their parents. If you have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb32d51233d05c1aebc28389b90f0c058616c3f5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTA1OQ==", "bodyText": "A bit less noisy, and easier to switch to a possibly more efficient structure, using Collections.synchronizedMap instead of synchronizing the methods.", "url": "https://github.com/openzipkin/brave/pull/1146#discussion_r406639059", "createdAt": "2020-04-10T07:26:41Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/brave/features/handler/FinishedChildrenHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.handler;\n+\n+import brave.handler.FinishedSpanHandler;\n+import brave.handler.MutableSpan;\n+import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import static java.util.Collections.emptyList;\n+\n+public abstract class FinishedChildrenHandler extends FinishedSpanHandler {\n+\n+  protected abstract void handle(MutableSpan parent, Iterable<MutableSpan> children);\n+\n+  /** This holds the children of the current parent until the former is finished or abandoned. */\n+  final ParentToChildren parentToChildren = new ParentToChildren();\n+\n+  @Override public boolean supportsOrphans() {\n+    return true; // We need to clear the map entry even if the parent doesn't finish normally\n+  }\n+\n+  @Override public boolean handle(TraceContext context, MutableSpan span) {\n+    if (!context.isLocalRoot()) { // a child\n+      parentToChildren.add(context.parentIdString(), span);\n+    }\n+\n+    Iterable<MutableSpan> children = parentToChildren.remove(context.spanIdString());\n+\n+    FinishedChildrenHandler.this.handle(span, children != null ? children : emptyList());\n+    return true;\n+  }\n+\n+  static final class ParentToChildren {\n+    final Map<String, Set<MutableSpan>> delegate = new WeakHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb32d51233d05c1aebc28389b90f0c058616c3f5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTMzNw==", "bodyText": "Wonder if we should go ahead and copy into another list when passing to handler.", "url": "https://github.com/openzipkin/brave/pull/1146#discussion_r406639337", "createdAt": "2020-04-10T07:27:37Z", "author": {"login": "anuraaga"}, "path": "brave/src/test/java/brave/features/handler/FinishedChildrenHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.handler;\n+\n+import brave.handler.FinishedSpanHandler;\n+import brave.handler.MutableSpan;\n+import brave.propagation.TraceContext;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import static java.util.Collections.emptyList;\n+\n+public abstract class FinishedChildrenHandler extends FinishedSpanHandler {\n+\n+  protected abstract void handle(MutableSpan parent, Iterable<MutableSpan> children);\n+\n+  /** This holds the children of the current parent until the former is finished or abandoned. */\n+  final ParentToChildren parentToChildren = new ParentToChildren();\n+\n+  @Override public boolean supportsOrphans() {\n+    return true; // We need to clear the map entry even if the parent doesn't finish normally\n+  }\n+\n+  @Override public boolean handle(TraceContext context, MutableSpan span) {\n+    if (!context.isLocalRoot()) { // a child\n+      parentToChildren.add(context.parentIdString(), span);\n+    }\n+\n+    Iterable<MutableSpan> children = parentToChildren.remove(context.spanIdString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb32d51233d05c1aebc28389b90f0c058616c3f5"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3eff66eeda9eff9e895c1f8afa83293940e941", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/8d3eff66eeda9eff9e895c1f8afa83293940e941", "committedDate": "2020-04-10T10:02:24Z", "message": "Update brave/src/test/java/brave/features/handler/CountingChildrenTest.java\n\nCo-Authored-By: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dacdf39d48dc93e607203490808e8926cc7b2f68", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/dacdf39d48dc93e607203490808e8926cc7b2f68", "committedDate": "2020-04-10T10:14:14Z", "message": "polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzcyOTk4", "url": "https://github.com/openzipkin/brave/pull/1146#pullrequestreview-391372998", "createdAt": "2020-04-10T10:16:38Z", "commit": {"oid": "dacdf39d48dc93e607203490808e8926cc7b2f68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzc0MTI1", "url": "https://github.com/openzipkin/brave/pull/1146#pullrequestreview-391374125", "createdAt": "2020-04-10T10:19:48Z", "commit": {"oid": "dacdf39d48dc93e607203490808e8926cc7b2f68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo0OFrOGD24nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoxOTo0OFrOGD24nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5ODE0MA==", "bodyText": "@anuraaga actually in this impl we could probably pass control to the user.. just anyway I want to get the other hooks in before we do that, just in case in a concurrent weak map variant, we can't give such a thing.", "url": "https://github.com/openzipkin/brave/pull/1146#discussion_r406698140", "createdAt": "2020-04-10T10:19:48Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/brave/features/handler/FinishedChildrenHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.features.handler;\n+\n+import brave.handler.FinishedSpanHandler;\n+import brave.handler.MutableSpan;\n+import brave.propagation.TraceContext;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+\n+import static java.util.Collections.emptyIterator;\n+import static java.util.Collections.synchronizedMap;\n+\n+public abstract class FinishedChildrenHandler extends FinishedSpanHandler {\n+\n+  protected abstract void handle(MutableSpan parent, Iterator<MutableSpan> children);\n+\n+  /** This holds the children of the current parent until the former is finished or abandoned. */\n+  final ParentToChildren parentToChildren = new ParentToChildren();\n+\n+  @Override public boolean handle(TraceContext context, MutableSpan span) {\n+    if (!context.isLocalRoot()) { // a child\n+      parentToChildren.add(context.parentIdString(), span);\n+    }\n+\n+    // There could be a lot of children. Instead of copying the list result, expose the iterator.\n+    // The main goal is to not add too much overhead as this is invoked on the same thread as\n+    // application code which implicitly call Span.finish() through instrumentation.\n+    Set<MutableSpan> children = parentToChildren.remove(context.spanIdString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dacdf39d48dc93e607203490808e8926cc7b2f68"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1928, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}