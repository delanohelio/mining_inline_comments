{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTM5OTkx", "number": 1128, "title": "Works around possibility to have an empty set of extra fields", "bodyText": "We didn't eagerly validate ExtraFieldPropagation, that it had any\nfields at all. This leads to late bugs where an exception is thrown for\ntrying to inject nothing.\nAs they type ExtraFieldPropagation has public methods in use, this\ndoesn't change signatures. Rather, it creates a wrapper in the case\nnothing exists.", "createdAt": "2020-03-27T04:11:40Z", "url": "https://github.com/openzipkin/brave/pull/1128", "merged": true, "mergeCommit": {"oid": "3406af065caacdbde128fa543610255a4c60f2de"}, "closed": true, "closedAt": "2020-03-27T05:36:45Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRouLPAH2gAyMzk0NTM5OTkxOjc3Mjg5MmE1YTNmYmQyZDhmMDY4YzllZTZlZTEyYTg5MWEyZjY1ZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR57btAFqTM4MzI1OTk5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1", "committedDate": "2020-03-27T04:09:26Z", "message": "Works around possibility to have an empty set of extra fields\n\nWe didn't eagerly validate `ExtraFieldPropagation`, that it had any\nfields at all. This leads to late bugs where an exception is thrown for\ntrying to inject nothing.\n\nAs they type `ExtraFieldPropagation` has public methods in use, this\ndoesn't change signatures. Rather, it creates a wrapper in the case\nnothing exists.\n\nWIP as some unit tests are due."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTY5Njg2", "url": "https://github.com/openzipkin/brave/pull/1128#pullrequestreview-382569686", "createdAt": "2020-03-27T04:12:13Z", "commit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDoxMjoxM1rOF8ikuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDoxMzoxN1rOF8il2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNTMzOQ==", "bodyText": "this signature is retained on empty", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399025339", "createdAt": "2020-03-27T04:12:13Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/propagation/ExtraFieldPropagation.java", "diffHunk": "@@ -272,15 +275,39 @@ public static void set(TraceContext context, String name, String value) {\n     PropagationFields.put(context, lowercase(name), value, Extra.class);\n   }\n \n-  public static final class Factory extends Propagation.Factory {\n+  public static class Factory extends Propagation.Factory {\n     final Propagation.Factory delegate;\n+\n+    Factory(Propagation.Factory delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override public <K> ExtraFieldPropagation<K> create(Propagation.KeyFactory<K> keyFactory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNTQ0Mw==", "bodyText": "this signature is retained on empty", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399025443", "createdAt": "2020-03-27T04:12:35Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/propagation/ExtraFieldPropagation.java", "diffHunk": "@@ -348,7 +360,7 @@ public static void set(TraceContext context, String name, String value) {\n   // This is here to support extraction from carriers missing a get field by name function. The only\n   // known example is OpenTracing TextMap https://github.com/opentracing/opentracing-java/issues/305\n   public List<K> extraKeys() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNTYyNg==", "bodyText": "this signature is retained on empty", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399025626", "createdAt": "2020-03-27T04:13:17Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/propagation/ExtraFieldPropagation.java", "diffHunk": "@@ -163,6 +163,7 @@ public FactoryBuilder addPrefixedFields(String prefix, Collection<String> fieldN\n       return this;\n     }\n \n+    /** Returns a wrapper of the delegate if there are no fields to propagate. */\n     public Factory build() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTgyMTQ5", "url": "https://github.com/openzipkin/brave/pull/1128#pullrequestreview-382582149", "createdAt": "2020-03-27T05:03:57Z", "commit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNTowNDozMFrOF8jUGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNTowOTowM1rOF8jX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNzQ2NA==", "bodyText": "I believe we can keep this class package-private", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399037464", "createdAt": "2020-03-27T05:04:30Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/propagation/ExtraFieldPropagation.java", "diffHunk": "@@ -272,15 +275,39 @@ public static void set(TraceContext context, String name, String value) {\n     PropagationFields.put(context, lowercase(name), value, Extra.class);\n   }\n \n-  public static final class Factory extends Propagation.Factory {\n+  public static class Factory extends Propagation.Factory {\n     final Propagation.Factory delegate;\n+\n+    Factory(Propagation.Factory delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override public <K> ExtraFieldPropagation<K> create(Propagation.KeyFactory<K> keyFactory) {\n+      return new ExtraFieldPropagation<>(delegate, keyFactory);\n+    }\n+\n+    @Override public boolean supportsJoin() {\n+      return delegate.supportsJoin();\n+    }\n+\n+    @Override public boolean requires128BitTraceId() {\n+      return delegate.requires128BitTraceId();\n+    }\n+\n+    @Override public TraceContext decorate(TraceContext context) {\n+      return delegate.decorate(context);\n+    }\n+  }\n+\n+  public static final class RealFactory extends Factory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzODQ0NQ==", "bodyText": "Since we're not doing any extra validation here this is confusing to me. How about\nif (fields.isEmpty()) return new Factory(delegate);\nreturn new RealFactory(delegate, fields.toArray(...", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399038445", "createdAt": "2020-03-27T05:09:03Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/propagation/ExtraFieldPropagation.java", "diffHunk": "@@ -199,8 +200,10 @@ public Factory build() {\n       for (i = 0; i < keyToField.length; i++) {\n         keyToField[i] = keyToFieldList.get(i);\n       }\n-      return new Factory(delegate, fields.toArray(new String[0]), keys.toArray(new String[0]),\n-        keyToField, redacted);\n+      String[] validated = fields.toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "772892a5a3fbd2d8f068c9ee6ee12a891a2f65d1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4236795dd15d842e7c04390d5acb69e6c8f5e58a", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/4236795dd15d842e7c04390d5acb69e6c8f5e58a", "committedDate": "2020-03-27T05:13:37Z", "message": "unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc39466d612429cc3e6a88929294f0c47b7df22", "author": {"user": null}, "url": "https://github.com/openzipkin/brave/commit/4bc39466d612429cc3e6a88929294f0c47b7df22", "committedDate": "2020-03-27T05:15:26Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTg1MzE4", "url": "https://github.com/openzipkin/brave/pull/1128#pullrequestreview-382585318", "createdAt": "2020-03-27T05:16:37Z", "commit": {"oid": "4bc39466d612429cc3e6a88929294f0c47b7df22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjU5OTk2", "url": "https://github.com/openzipkin/brave/pull/1128#pullrequestreview-383259996", "createdAt": "2020-03-28T00:12:17Z", "commit": {"oid": "4bc39466d612429cc3e6a88929294f0c47b7df22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDoxMjoxOFrOF9FEhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDoxMjoxOFrOF9FEhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MDUzMg==", "bodyText": "@meltsufin  this bud's for you\nregardless of if extra fields are added to the builder or not, behavior will be predictable", "url": "https://github.com/openzipkin/brave/pull/1128#discussion_r399590532", "createdAt": "2020-03-28T00:12:18Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/brave/propagation/ExtraFieldPropagationTest.java", "diffHunk": "@@ -105,12 +110,58 @@\n     TraceContext context = extractWithAmazonTraceId();\n \n     try (Tracing t = Tracing.newBuilder().propagationFactory(factory).build();\n-         CurrentTraceContext.Scope scope = t.currentTraceContext().newScope(context)) {\n+         Scope scope = t.currentTraceContext().newScope(context)) {\n       assertThat(ExtraFieldPropagation.get(\"x-amzn-trace-id\"))\n         .isEqualTo(awsTraceId);\n     }\n   }\n \n+  @Test public void emptyFields_disallowed() {\n+    assertThatThrownBy(() -> ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, \"\"))\n+      .hasMessage(\"fieldNames[0] is empty\");\n+\n+    assertThatThrownBy(() -> ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, asList(\"\")))\n+      .hasMessage(\"fieldNames[0] is empty\");\n+\n+    assertThatThrownBy(() -> newFactoryBuilder(B3Propagation.FACTORY).addField(\"\").build())\n+      .hasMessage(\"fieldName is empty\");\n+\n+    assertThatThrownBy(() -> newFactoryBuilder(B3Propagation.FACTORY).addRedactedField(\"\").build())\n+      .hasMessage(\"fieldName is empty\");\n+\n+    assertThatThrownBy(\n+      () -> newFactoryBuilder(B3Propagation.FACTORY).addPrefixedFields(\"foo\", asList(\"\")).build())\n+      .hasMessage(\"fieldNames[0] is empty\");\n+  }\n+\n+  // We formerly enforced presence of field names in the factory's factory method\n+  @Test public void noFields_newFactory_disallowed() {\n+    assertThatThrownBy(() -> ExtraFieldPropagation.newFactory(B3Propagation.FACTORY))\n+      .hasMessage(\"no field names\");\n+\n+    assertThatThrownBy(() -> ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, asList()))\n+      .hasMessage(\"no field names\");\n+  }\n+\n+  // We formerly accepted .build() when no fields were present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc39466d612429cc3e6a88929294f0c47b7df22"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1896, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}