{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDY1OTA5", "number": 1188, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0NzozMlrOD5XdAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowODo1MVrOD5cnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc5NjgwOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/baggage/ExtraHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0NzozMlrOGQltbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0NzozMlrOGQltbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODIzNg==", "bodyText": "this is needed for secondary sampling to set localSampled conditionally. A future PR will integrate that... just I needed to make sure only String keys are possible before proceeding.", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420048236", "createdAt": "2020-05-05T11:47:32Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/baggage/ExtraHandler.java", "diffHunk": "@@ -89,8 +90,13 @@ protected ExtraHandler(Object initialState) {\n    * @see TraceContext.Extractor#extract(Object)\n    */\n   // This operates on the builder directly to allow us to hide newExtra and potential bugs\n-  public final E provisionExtra(TraceContextOrSamplingFlags.Builder builder, Object request) {\n+  public final <R> E provisionExtra(\n+      TraceContextOrSamplingFlags.Builder builder,\n+      Getter<R, String> getter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e09a0fd6d182b049abbf9800a0860264f0851b8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc5ODcxOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/propagation/StringPropagationAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODoxM1rOGQluow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODoxM1rOGQluow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODU0Nw==", "bodyText": "this is the adapter", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420048547", "createdAt": "2020-05-05T11:48:13Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/internal/propagation/StringPropagationAdapter.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.propagation;\n+\n+import brave.propagation.Propagation;\n+import brave.propagation.TraceContext.Extractor;\n+import brave.propagation.TraceContext.Injector;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This supports the deprecated {@link Propagation.Factory#create(KeyFactory)}.\n+ *\n+ * <p>Here's how to integrate:\n+ *\n+ * <p>First, override {@link Propagation.Factory#get()} with your actual implementation. Then,\n+ * dispatch {@link Propagation.Factory#create(KeyFactory)} to your implementation via {@link\n+ * #create(Propagation, KeyFactory)}:\n+ *\n+ * <p><pre>{@code\n+ * @Override public Propagation<String> get() {\n+ *   return new YourPropagation(this);\n+ * }\n+ *\n+ * @Deprecated public <K> Propagation<K> create(KeyFactory<K> keyFactory) {\n+ *   return StringPropagationAdapter.create(get(), keyFactory)\n+ * }\n+ * }</pre>\n+ *\n+ * <p><em>This is internal, and will be removed in Brave 6</em>. However, it won't be removed\n+ * before Brave 6. If you wish to use this, use \"maven-shade-plugin\" with the following\n+ * configuration, or something similar.\n+ *\n+ * <pre>{@code\n+ * <configuration>\n+ * <createDependencyReducedPom>false</createDependencyReducedPom>\n+ * <artifactSet>\n+ *   <includes>\n+ *     <include>io.zipkin.brave:brave</include>\n+ *   </includes>\n+ * </artifactSet>\n+ * <filters>\n+ *   <filter>\n+ *     <artifact>io.zipkin.brave:brave</artifact>\n+ *     <includes>\n+ *       <include>brave/internal/propagation/StringPropagationAdapter*.class</include>\n+ *     </includes>\n+ *   </filter>\n+ * </filters>\n+ * <relocations>\n+ *   <relocation>\n+ *     <pattern>brave.internal.propagation</pattern>\n+ *     <shadedPattern>YOUR_PACKAGE.brave_internal</shadedPattern>\n+ *   </relocation>\n+ * </relocations>\n+ * }</pre>\n+ *\n+ * @since 5.12\n+ */\n+public final class StringPropagationAdapter<K> implements Propagation<K> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e09a0fd6d182b049abbf9800a0860264f0851b8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc5OTM4OnYy", "diffSide": "RIGHT", "path": "brave/src/test/java/brave/internal/propagation/StringPropagationAdapterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODoyN1rOGQlvDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0ODoyN1rOGQlvDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODY1NQ==", "bodyText": "this is the adapter's test", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420048655", "createdAt": "2020-05-05T11:48:27Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/test/java/brave/internal/propagation/StringPropagationAdapterTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.propagation;\n+\n+import brave.internal.propagation.StringPropagationAdapter.GetterAdapter;\n+import brave.internal.propagation.StringPropagationAdapter.SetterAdapter;\n+import brave.propagation.Propagation;\n+import brave.propagation.Propagation.Getter;\n+import brave.propagation.Propagation.KeyFactory;\n+import brave.propagation.Propagation.Setter;\n+import brave.propagation.TraceContext.Extractor;\n+import brave.propagation.TraceContext.Injector;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import org.assertj.core.api.InstanceOfAssertFactories;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class StringPropagationAdapterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e09a0fd6d182b049abbf9800a0860264f0851b8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTYzNDY1OnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/internal/propagation/StringPropagationAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNjo1OFrOGQt7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNjo1OFrOGQt7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4Mjk1Nw==", "bodyText": "Intellij? :P", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420182957", "createdAt": "2020-05-05T15:06:58Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/internal/propagation/StringPropagationAdapter.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal.propagation;\n+\n+import brave.propagation.Propagation;\n+import brave.propagation.TraceContext.Extractor;\n+import brave.propagation.TraceContext.Injector;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This supports the deprecated {@link Propagation.Factory#create(KeyFactory)}.\n+ *\n+ * <p>Here's how to integrate:\n+ *\n+ * <p>First, override {@link Propagation.Factory#get()} with your actual implementation. Then,\n+ * dispatch {@link Propagation.Factory#create(KeyFactory)} to your implementation via {@link\n+ * #create(Propagation, KeyFactory)}:\n+ *\n+ * <p><pre>{@code\n+ * @Override public Propagation<String> get() {\n+ *   return new YourPropagation(this);\n+ * }\n+ *\n+ * @Deprecated public <K> Propagation<K> create(KeyFactory<K> keyFactory) {\n+ *   return StringPropagationAdapter.create(get(), keyFactory)\n+ * }\n+ * }</pre>\n+ *\n+ * <p><em>This is internal, and will be removed in Brave 6</em>. However, it won't be removed\n+ * before Brave 6. If you wish to use this, use \"maven-shade-plugin\" with the following\n+ * configuration, or something similar.\n+ *\n+ * <pre>{@code\n+ * <configuration>\n+ * <createDependencyReducedPom>false</createDependencyReducedPom>\n+ * <artifactSet>\n+ *   <includes>\n+ *     <include>io.zipkin.brave:brave</include>\n+ *   </includes>\n+ * </artifactSet>\n+ * <filters>\n+ *   <filter>\n+ *     <artifact>io.zipkin.brave:brave</artifact>\n+ *     <includes>\n+ *       <include>brave/internal/propagation/StringPropagationAdapter*.class</include>\n+ *     </includes>\n+ *   </filter>\n+ * </filters>\n+ * <relocations>\n+ *   <relocation>\n+ *     <pattern>brave.internal.propagation</pattern>\n+ *     <shadedPattern>YOUR_PACKAGE.brave_internal</shadedPattern>\n+ *   </relocation>\n+ * </relocations>\n+ * }</pre>\n+ *\n+ * @since 5.12\n+ */\n+public final class StringPropagationAdapter<K> implements Propagation<K> {\n+  public static <K> Propagation<K> create(Propagation<String> delegate, KeyFactory<K> keyFactory) {\n+    if (delegate == null) throw new NullPointerException(\"delegate == null\");\n+    if (keyFactory == null) throw new NullPointerException(\"keyFactory == null\");\n+    if (keyFactory == KeyFactory.STRING) return (Propagation<K>) delegate;\n+    return new StringPropagationAdapter<>(delegate, keyFactory);\n+  }\n+\n+  final Propagation<String> delegate;\n+  final KeyFactory<K> keyFactory;\n+  final Map<String, K> map;\n+  final List<K> keysList;\n+\n+  StringPropagationAdapter(Propagation<String> delegate, KeyFactory<K> keyFactory) {\n+    this.delegate = delegate;\n+    this.keyFactory = keyFactory;\n+    this.map = new LinkedHashMap<>();\n+    this.keysList = toKeyList(delegate.keys(), keyFactory);\n+  }\n+\n+  List<K> toKeyList(List<String> keyNames, KeyFactory<K> keyFactory) {\n+    int length = keyNames.size();\n+    K[] keys = (K[]) new Object[length];\n+    for (int i = 0; i < length; i++) {\n+      String keyName = keyNames.get(i);\n+      K key = keyFactory.create(keyName);\n+      keys[i] = key;\n+      map.put(keyName, key);\n+    }\n+    return Collections.unmodifiableList(Arrays.asList(keys));\n+  }\n+\n+  @Override public List<K> keys() {\n+    return keysList;\n+  }\n+\n+  @Override public <R> Injector<R> injector(Setter<R, K> setter) {\n+    return delegate.injector(new SetterAdapter<>(setter, map));\n+  }\n+\n+  @Override public <R> Extractor<R> extractor(Getter<R, K> getter) {\n+    return delegate.extractor(new GetterAdapter<>(getter, map));\n+  }\n+\n+  @Override public int hashCode() {\n+    return delegate.hashCode();\n+  }\n+\n+  @Override public String toString() {\n+    return delegate.toString();\n+  }\n+\n+  @Override public boolean equals(Object obj) {\n+    if (obj instanceof StringPropagationAdapter) {\n+      return delegate.equals(((StringPropagationAdapter) obj).delegate);\n+    } else if (obj instanceof Propagation) {\n+      return delegate.equals(obj);\n+    }\n+    return false;\n+  }\n+\n+  static final class GetterAdapter<R, K> implements Getter<R, String> {\n+    final Getter<R, K> getter;\n+    final Map<String, K> map;\n+\n+    GetterAdapter(Getter<R, K> getter, Map<String, K> map) {\n+      if (getter == null) throw new NullPointerException(\"getter == null\");\n+      this.getter = getter;\n+      this.map = map;\n+    }\n+\n+    @Override public String get(R request, String keyName) {\n+      K key = map.get(keyName);\n+      if (key == null) return null;\n+      return getter.get(request, key);\n+    }\n+\n+    @Override public int hashCode() {\n+      return getter.hashCode();\n+    }\n+\n+    @Override public String toString() {\n+      return getter.toString();\n+    }\n+\n+    @Override public boolean equals(Object obj) {\n+      if (obj instanceof GetterAdapter) {\n+        return getter.equals(((GetterAdapter) obj).getter);\n+      } else if (obj instanceof Getter) {\n+        return getter.equals(obj);\n+      }\n+      return false;\n+    }\n+  }\n+\n+  static final class SetterAdapter<R, K> implements Setter<R, String> {\n+    final Setter<R, K> setter;\n+    final Map<String, K> map;\n+\n+    SetterAdapter(Setter<R, K> setter, Map<String, K> map) {\n+      if (setter == null) throw new NullPointerException(\"setter == null\");\n+      this.setter = setter;\n+      this.map = map;\n+    }\n+\n+    @Override public void put(R request, String keyName, String value) {\n+      K key = map.get(keyName);\n+      if (key == null) return;\n+      setter.put(request, key, value);\n+    }\n+\n+    @Override public int hashCode() {\n+      return setter.hashCode();\n+    }\n+\n+    @Override public String toString() {\n+      return setter.toString();\n+    }\n+\n+    @Override public boolean equals(Object obj) {\n+      if (obj instanceof SetterAdapter) {\n+        return setter.equals(((SetterAdapter) obj).setter);\n+      } else if (obj instanceof Setter) {\n+        return setter.equals(obj);\n+      }\n+      return false;\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5240e4a082c302a2ac90a663a4e124780fb979"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTY0MzUxOnYy", "diffSide": "RIGHT", "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowODo1MVrOGQuBUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODoxOVrOGRAWSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NDQwMg==", "bodyText": "Probably just dejavu but I feel as if I've seen this if statement on the right hand side of 3 PRs now :O", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420184402", "createdAt": "2020-05-05T15:08:51Z", "author": {"login": "anuraaga"}, "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -331,54 +320,55 @@ public FactoryBuilder add(BaggagePropagationConfig config) {\n       BaggageFields extra = context.findExtra(BaggageFields.class);\n       if (extra == null) return;\n       Map<String, String> values =\n-          extra.toMapFilteringFieldNames(propagation.factory.localFieldNames);\n+          extra.toMapFilteringFieldNames(factory.localFieldNames);\n       if (values.isEmpty()) return;\n \n-      for (BaggageCodecWithKeys<K> baggageCodecWithKeys : propagation.baggageCodecWithKeys) {\n-        String value = baggageCodecWithKeys.baggageCodec.encode(values, context, request);\n+      for (BaggagePropagationConfig config : factory.configs) {\n+        if (config.baggageCodec == BaggageCodec.NOOP) continue; // local field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5240e4a082c302a2ac90a663a4e124780fb979"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDY4Mg==", "bodyText": "haha tell me about it.. cleanup of this will come.. I just wanted to get rid of the K first. thanks for your patience with the road work!", "url": "https://github.com/openzipkin/brave/pull/1188#discussion_r420484682", "createdAt": "2020-05-06T00:28:19Z", "author": {"login": "codefromthecrypt"}, "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -331,54 +320,55 @@ public FactoryBuilder add(BaggagePropagationConfig config) {\n       BaggageFields extra = context.findExtra(BaggageFields.class);\n       if (extra == null) return;\n       Map<String, String> values =\n-          extra.toMapFilteringFieldNames(propagation.factory.localFieldNames);\n+          extra.toMapFilteringFieldNames(factory.localFieldNames);\n       if (values.isEmpty()) return;\n \n-      for (BaggageCodecWithKeys<K> baggageCodecWithKeys : propagation.baggageCodecWithKeys) {\n-        String value = baggageCodecWithKeys.baggageCodec.encode(values, context, request);\n+      for (BaggagePropagationConfig config : factory.configs) {\n+        if (config.baggageCodec == BaggageCodec.NOOP) continue; // local field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NDQwMg=="}, "originalCommit": {"oid": "2b5240e4a082c302a2ac90a663a4e124780fb979"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}