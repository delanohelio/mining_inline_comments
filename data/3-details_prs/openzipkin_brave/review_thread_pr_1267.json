{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODQzMzEz", "number": 1267, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMjowN1rOE0TvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoyMDowMVrOE0ULdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjg0ODc2OnYy", "diffSide": "RIGHT", "path": "RELEASE.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMjowN1rOHr9mnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMjowN1rOHr9mnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2MDEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you can look at [bnd.bnd](zipkin/bnd.bnd) to see which packages we export. This rarely changes.\n          \n          \n            \n            you can look at [bnd.bnd](brave/bnd.bnd) to see which packages we export. This rarely changes.", "url": "https://github.com/openzipkin/brave/pull/1267#discussion_r515860127", "createdAt": "2020-11-02T10:02:07Z", "author": {"login": "codefromthecrypt"}, "path": "RELEASE.md", "diffHunk": "@@ -73,52 +64,127 @@ $ git commit -am\"Adjusts copyright headers for this year\"\n \n ## Manually releasing\n \n-If for some reason, you lost access to CI or otherwise cannot get automation to work, bear in mind this is a normal maven project, and can be released accordingly. The main thing to understand is that libraries are not GPG signed here (it happens at bintray), and also that there is a utility to synchronise to maven central. Note that if for some reason [bintray is down](https://status.bintray.com/), the below will not work.\n+If for some reason, you lost access to CI or otherwise cannot get automation to work, bear in mind\n+this is a normal maven project, and can be released accordingly.\n+\n+*Note:* If [Sonatype is down](https://status.sonatype.com/), the below will not work.\n \n ```bash\n # First, set variable according to your personal credentials. These would normally be decrypted from .travis.yml\n-BINTRAY_USER=your_github_account\n-BINTRAY_KEY=xxx-https://bintray.com/profile/edit-xxx\n-SONATYPE_USER=your_sonatype_account\n-SONATYPE_PASSWORD=your_sonatype_password\n+export GPG_TTY=$(tty)\n+export GPG_PASSPHRASE=your_gpg_passphrase\n+export SONATYPE_USER=your_sonatype_account\n+export SONATYPE_PASSWORD=your_sonatype_password\n VERSION=xx-version-to-release-xx\n \n # now from latest master, prepare the release. We are intentionally deferring pushing commits\n-./mvnw --batch-mode -s .settings.xml -Prelease -nsu -DreleaseVersion=$VERSION -Darguments=\"-DskipTests -Dlicense.skip=true\" release:prepare  -DpushChanges=false\n+./mvnw --batch-mode -s ./.settings.xml -Prelease -nsu -DreleaseVersion=$VERSION -Darguments=\"-DskipTests -Dlicense.skip=true\" release:prepare  -DpushChanges=false\n \n # once this works, deploy and synchronize to maven central\n git checkout $VERSION\n-./mvnw --batch-mode -s .settings.xml -Prelease -nsu -DskipTests deploy\n-./mvnw --batch-mode -s .settings.xml -nsu -N io.zipkin.centralsync-maven-plugin:centralsync-maven-plugin:sync\n \n-# If Bintray is down, or having permissions problems, the above won't work, manually release\n-# Note: you'll need GPG setup with your key, similar to Apache process\n-GPG_TTY=$(tty) ./mvnw -s .settings.xml -Prelease -Psonatype -nsu deploy -DskipTests\n-# When finished, click close and release here https://repository.apache.org/#stagingRepositories\n+# Deploy the Bill of Materials (BOM) separately as it is unhooked from the main project intentionally\n+./mvnw --batch-mode -s ./.settings.xml -Prelease -nsu -DskipTests deploy -pl -:brave-bom\n+./mvnw --batch-mode -s ./.settings.xml -Prelease -nsu -DskipTests deploy -f bom/pom.xml\n \n-# if one of the above worked, clean up stuff and push the local changes.\n+# if all the above worked, clean up stuff and push the local changes.\n ./mvnw release:clean\n git checkout master\n git push\n git push --tags\n ```\n \n+## Backport patch release\n+\n+Usually we only release incrementing numbers. For example, if the current\n+release is 2.8.7, we release 2.8.8. In some rare scenarios, we might have\n+to release a backport on a non-current minor. To do this is manual, as we\n+don't have automation. Please proceed with caution when doing this.\n+\n+### Find or create a N.N.x branch\n+\n+If a backport release already existed for a minor, you'll find a N.N.x branch. For example, if the last minor version was 2.4.4, the branch would\n+be 2.4.x. Check this out.\n+\n+If there is no branch, find the last commit before the next minor. For\n+example, using `git log`, you look for the commit for \"prepare release\"\n+and branch off the one right before it.\n+\n+Ex. With the following git log\n+```\n+commit 1f5808b0b5bd7ad911cc2e21d3336540bd4ec83d (tag: 2.5.0)\n+Author: zipkinci <zipkinci+zipkin-dev@googlegroups.com>\n+Date:   Tue Mar 20 11:08:41 2018 +0000\n+\n+    [maven-release-plugin] prepare release 2.5.0\n+\n+commit 9a4ec17cf741bc4dcabef8aad41c1071dd5cfb77 (tag: release-2.5.0)\n+```\n+\n+You would checkout and branch off `9a4ec17cf741bc4dcabef8aad41c1071dd5cfb77` like so:\n+\n+```bash\n+$ git checkout 9a4ec17cf741bc4dcabef8aad41c1071dd5cfb77\n+$ git checkout -b 2.4.x\n+# pushing the branch just so that circleci will check it\n+$ git push origin 2.4.x\n+```\n+\n+### Add the changes you need\n+Once you are on the branch, you'd use `git cherry-pick` to add the\n+commits you need. Once you have what you need, make sure you push\n+them so that circleci can check it.\n+\n+Assuming abcdef1 is the commit ID needed, cherry-pick it like so:\n+```bash\n+$ git cherry-pick abcdef1\n+$ git push origin 2.4.x\n+```\n+\n+### Do a release locally\n+With all the changes staged and ready, you need to do a release.\n+This involves changing the \"pom\" files which is mostly automatic,\n+creating a couple commit, pushing a tag, and running deploy.\n+\n+Assuming you are on branch 2.4.x and you want to release 2.4.5.\n+```bash\n+$ ./mvnw versions:set -DnewVersion=2.4.5 -DgenerateBackupPoms=false\n+# edit the pom and change <tag>HEAD</tag> to <tag>2.4.5</tag>\n+$ git commit -am\"prepare to release 2.4.5\"\n+$ git tag 2.4.5\n+$ git push origin 2.4.5\n+```\n+\n+Once you are here, follow the steps mentioned in \"Manually releasing\"\n+\n+### Prepare the next version number\n+Once all of that is done, push the next snapshot version to the\n+release branch.\n+\n+Assuming you are on branch 2.4.x and you just released 2.4.5.\n+```bash\n+$ ./mvnw versions:set -DnewVersion=2.4.6-SNAPSHOT -DgenerateBackupPoms=false\n+# edit the pom and change <tag>2.4.5</tag> to <tag>HEAD</tag>\n+$ git commit -am\"prepare next version\"\n+$ git push origin 2.4.x\n+```\n+\n ## Generating jdiff and javadoc\n \n-Once the release is done and the artifacts are in maven central, you can generate \n-the jdiff report in the `gh-pages` branch. It's not needed to do this for a \n+Once the release is done and the artifacts are in maven central, you can generate\n+the jdiff report in the `gh-pages` branch. It's not needed to do this for a\n patch release.\n \n ```bash\n $ wget -L -c https://search.maven.org/remotecontent?filepath=org/spf4j/spf4j-jdiff-maven-plugin/8.8.1/spf4j-jdiff-maven-plugin-8.8.1-uber.jar -O jdiff.jar\n-$ java -jar jdiff.jar -gId io.zipkin.brave -aId brave -fromVersion 5.11.2 -toVersion 5.12.3 -o jdiff/5.11_to_5.12 -p 'brave brave.baggage brave.handler brave.propagation brave.sampler'\n-$ git add jdiff/5.11_to_5.12\n+$ java -jar jdiff.jar -gId io.zipkin.zipkin2 -aId zipkin -fromVersion 2.20.2 -toVersion 2.21.3 -o jdiff/2.20_to_2.21 -p 'zipkin2 zipkin2.storage zipkin2.codec zipkin2.v1'\n+$ git add jdiff/2.20_to_2.21\n $ git commit -m\"jdiff report\"\n $ git push upstream gh-pages\n-``` \n+```\n \n-Note that \n+Note that\n * The `fromVersion` and `toVersion` reflect the latest patch version of each release.\n * The output directory does not include the patch version number.\n * The `-p` parameter specifies the packages to include in the jdiff report,\n-you can look at [bnd.bnd](brave/bnd.bnd) to see which packages we export. This rarely changes.\n+you can look at [bnd.bnd](zipkin/bnd.bnd) to see which packages we export. This rarely changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc1ddf08952d45b167f264629c62735d416d9d"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjkyMDIyOnYy", "diffSide": "LEFT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoyMDowMVrOHr-RPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo0NjoxNFrOHsBJYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MTAzNg==", "bodyText": "this was jdk14, but surprised if 11 is related to the vertx fail..", "url": "https://github.com/openzipkin/brave/pull/1267#discussion_r515871036", "createdAt": "2020-11-02T10:20:01Z", "author": {"login": "codefromthecrypt"}, "path": ".travis.yml", "diffHunk": "@@ -1,25 +1,58 @@\n # Run `travis lint` when changing this file to avoid breaking the build.\n \n+# We need a full VM so that testcontainers can use Docker\n+# See https://docs.travis-ci.com/user/reference/overview/#for-a-particular-travisyml-configuration\n+arch: amd64           # arm64 is LXD containers which we can't use because we run Docker tests\n+os: linux             # required for arch different than amd64\n+dist: focal           # newest available distribution\n+\n+# Don't do a shallow clone to allow license plugin to correctly read git history.\n+git:\n+  depth: false\n+\n+language: java\n+\n cache:\n   directories:\n     - $HOME/.m2\n \n-language: java\n+before_install:\n+  - |\n+    # Intentionally don't use \"jdk\" Travis apt key as it is coupled to jdk.java.net availability.\n+    # Use JDK 11, so we can release Java 6 bytecode\n+    OPENJDK_VERSION=11\n+    sudo apt-get -y install openjdk-${OPENJDK_VERSION}-jdk\n+    export JAVA_HOME=/usr/lib/jvm/java-${OPENJDK_VERSION}-openjdk-${TRAVIS_CPU_ARCH}/\n+    ./mvnw -version\n+  - |\n+    # Cache as help:evaluate is not quick\n+    export POM_VERSION=$(./mvnw help:evaluate -N -Dexpression=project.version -q -DforceStdout)\n \n-jdk: openjdk14", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a0c0ca7355f1e7b1986b40a17acef1c0e5bc40"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxODE3Nw==", "bodyText": "JDK wasn't it..", "url": "https://github.com/openzipkin/brave/pull/1267#discussion_r515918177", "createdAt": "2020-11-02T11:46:14Z", "author": {"login": "codefromthecrypt"}, "path": ".travis.yml", "diffHunk": "@@ -1,25 +1,58 @@\n # Run `travis lint` when changing this file to avoid breaking the build.\n \n+# We need a full VM so that testcontainers can use Docker\n+# See https://docs.travis-ci.com/user/reference/overview/#for-a-particular-travisyml-configuration\n+arch: amd64           # arm64 is LXD containers which we can't use because we run Docker tests\n+os: linux             # required for arch different than amd64\n+dist: focal           # newest available distribution\n+\n+# Don't do a shallow clone to allow license plugin to correctly read git history.\n+git:\n+  depth: false\n+\n+language: java\n+\n cache:\n   directories:\n     - $HOME/.m2\n \n-language: java\n+before_install:\n+  - |\n+    # Intentionally don't use \"jdk\" Travis apt key as it is coupled to jdk.java.net availability.\n+    # Use JDK 11, so we can release Java 6 bytecode\n+    OPENJDK_VERSION=11\n+    sudo apt-get -y install openjdk-${OPENJDK_VERSION}-jdk\n+    export JAVA_HOME=/usr/lib/jvm/java-${OPENJDK_VERSION}-openjdk-${TRAVIS_CPU_ARCH}/\n+    ./mvnw -version\n+  - |\n+    # Cache as help:evaluate is not quick\n+    export POM_VERSION=$(./mvnw help:evaluate -N -Dexpression=project.version -q -DforceStdout)\n \n-jdk: openjdk14", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MTAzNg=="}, "originalCommit": {"oid": "c6a0c0ca7355f1e7b1986b40a17acef1c0e5bc40"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1490, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}