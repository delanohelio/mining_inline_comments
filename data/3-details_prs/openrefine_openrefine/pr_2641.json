{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyODE5MjIx", "number": 2641, "title": "Add conflicts-with constraint", "bodyText": "Implemented conflicts-with scrutinizer as part of #2354", "createdAt": "2020-05-25T16:10:46Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641", "merged": true, "mergeCommit": {"oid": "cf851ee6367b764b627e581ae9b002a603e84c58"}, "closed": true, "closedAt": "2020-06-09T18:45:16Z", "author": {"login": "darecoder"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABck2cAOgFqTQxNzg3MjgyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpqnUOAFqTQyNzQ4MzY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODcyODI5", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-417872829", "createdAt": "2020-05-25T20:52:49Z", "commit": {"oid": "058d0775ef0ba1c44981ce2c788836cfeab735cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo1Mjo0OVrOGaJgWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo1Mjo0OVrOGaJgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MTg5Nw==", "bodyText": "Datamodel.makeWikidataItemIdValue(\"P31\") is incorrect, you are trying to create an ItemIdValue with a property identifier.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r430071897", "createdAt": "2020-05-25T20:52:49Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/MockConstraintFetcher.java", "diffHunk": "@@ -59,6 +60,11 @@\n     \n     public static PropertyIdValue propertyOnlyPid = Datamodel.makeWikidataPropertyIdValue(\"P372\");\n \n+    public static PropertyIdValue conflictsWithPid = Datamodel.makeWikidataPropertyIdValue(\"P50\");\n+    public static PropertyIdValue pidConflictingStatement = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n+    public static Value conflictingStatementValue = Datamodel.makeWikidataItemIdValue(\"P31\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058d0775ef0ba1c44981ce2c788836cfeab735cc"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDQ0NjU1", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-418044655", "createdAt": "2020-05-26T07:41:47Z", "commit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0MTo0N1rOGaSRXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjoxMzoyMFrOGcyQIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNTUxOQ==", "bodyText": "If this returns a list of PropertyIdValues, the return type should probably reflect that, no? I would use List<PropertyIdValue> instead of List<Value>.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r430215519", "createdAt": "2020-05-26T07:41:47Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,27 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    List<Value> getConflictsWithProperties (PropertyIdValue pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjA3MA==", "bodyText": "Typo: CONFLICSTS should be CONFLICTS", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r430216070", "createdAt": "2020-05-26T07:42:51Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -96,7 +86,10 @@\n     public static String ALLOWED_ENTITY_TYPES_QID = \"Q52004125\";\n     public static String ALLOWED_ITEM_TYPE_QID = \"Q29934200\";\n     public static String ALLOWED_ENTITY_TYPES_PID = \"P2305\";\n-    \n+\n+    public static String CONFLICSTS_WITH_CONSTRAINT_QID = \"Q21502838\";\n+    public static String CONFLICSTS_WITH_PROPERTY_PID = \"P2306\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzQzNQ==", "bodyText": "This method seems redundant to me: if a property does not conflict with any other, we could just represent that by getConflictsWithProperties returning an empty list.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r430217435", "createdAt": "2020-05-26T07:45:21Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,27 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    List<Value> getConflictsWithProperties (PropertyIdValue pid);\n+\n+    /**\n+     * Returns the list of all the conflicting values\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    List<Value> getItemwithConflicts (PropertyIdValue pid);\n+\n+    /**\n+     * Is this property expected to have conflicts-with any other property/properties?\n+     */\n+    boolean hasConflictsWith(PropertyIdValue propertyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNjQ0Nw==", "bodyText": "I do not think the \"is having\" is necessary here: \"{property_entity} conflicts with {added_property_entity}\" is simpler.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r432836447", "createdAt": "2020-05-30T12:10:34Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -104,6 +104,8 @@\n     \"warnings-messages/remove-statements-with-invalid-format/body\": \"If these statements currently exist on Wikidata, this will solve constraint violations.\",\n     \"warnings-messages/missing-inverse-statements/title\": \"Inverse statements missing for {added_property_entity}.\",\n     \"warnings-messages/missing-inverse-statements/body\": \"Any {added_property_entity} statement such as the one from {source_entity} to {target_entity} should also be added in reverse with {inverse_property_entity}: in this case, {target_entity} {inverse_property_entity} {source_entity}.\",\n+    \"warnings-messages/having-conflicts-with-statements/title\": \"{property_entity} is having conflicts with statement {added_property_entity}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNjU0Mg==", "bodyText": "Style: no space between the method name and the opening parenthesis, one space between the closing parenthesis and the opening curly brace.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r432836542", "createdAt": "2020-05-30T12:12:06Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +333,47 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<Value> getConflictsWithProperties (PropertyIdValue pid){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNjY0MQ==", "bodyText": "Didn't we agree that we needed two parameters here: the property on which the constraint is defined, and the property it conflicts with?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r432836641", "createdAt": "2020-05-30T12:13:20Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,27 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    List<Value> getConflictsWithProperties (PropertyIdValue pid);\n+\n+    /**\n+     * Returns the list of all the conflicting values\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    List<Value> getItemwithConflicts (PropertyIdValue pid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d437ca2bcdec2a53e6d25658e42c6d97a38704a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDk3MjU5", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-421497259", "createdAt": "2020-05-31T13:54:42Z", "commit": {"oid": "9e85f9851beca8b56253b80f2b8cb18f95ce0345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzo1NDo0M1rOGc5J2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzo1NDo0M1rOGc5J2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0OTcyMA==", "bodyText": "Because you are using getSingleConstraint here, this means that for properties with multiple conflicts-with constraints, you will only check the first one.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r432949720", "createdAt": "2020-05-31T13:54:43Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +333,40 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<PropertyIdValue> getConflictsWithProperties(PropertyIdValue pid) {\n+        List<SnakGroup> specs = getSingleConstraint(pid, CONFLICTS_WITH_CONSTRAINT_QID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e85f9851beca8b56253b80f2b8cb18f95ce0345"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzIxODQ4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-423321848", "createdAt": "2020-06-03T08:17:31Z", "commit": {"oid": "efa6d47caacf24a5b62377c3065e3a0813456cf9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoxNzozMlrOGeREnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoyMDo0NFrOGeRL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5MDE3NQ==", "bodyText": "Should be Map<PropertyIdValue, List<Value>>", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r434390175", "createdAt": "2020-06-03T08:17:32Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ConflictsWithScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"having-conflicts-with-statements\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa6d47caacf24a5b62377c3065e3a0813456cf9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5MTIxMQ==", "bodyText": "We need to check to check what happens with no value and some value snaks.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r434391211", "createdAt": "2020-06-03T08:19:17Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ConflictsWithScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"having-conflicts-with-statements\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa6d47caacf24a5b62377c3065e3a0813456cf9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5MjAzNQ==", "bodyText": "You will have an NPE here if the candidate conflicting value is a NoValueSnak.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r434392035", "createdAt": "2020-06-03T08:20:44Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ConflictsWithScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"having-conflicts-with-statements\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            List<PropertyIdValue> conflictingProperties = _fetcher.getConflictsWithProperties(propertyId);\n+            if (conflictingProperties != null){\n+                for (PropertyIdValue conflictingPid : conflictingProperties) {\n+                    if (propertyIdValueValueMap.containsKey(conflictingPid) && raiseWarning(propertyId, propertyIdValueValueMap, conflictingPid)) {\n+                        QAWarning issue = new QAWarning(type, propertyId.getId(), QAWarning.Severity.WARNING, 1);\n+                        issue.setProperty(\"property_entity\", propertyId);\n+                        issue.setProperty(\"added_property_entity\", conflictingPid);\n+                        issue.setProperty(\"example_entity\", update.getItemId());\n+                        addIssue(issue);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean raiseWarning(PropertyIdValue propertyId, Map<PropertyIdValue, Value> propertyIdValueValueMap, PropertyIdValue conflictingPid) {\n+        List<Value> conflictingValues = _fetcher.getItemWithConflicts(propertyId, conflictingPid);\n+        if (conflictingValues == null){\n+            return true;\n+        }\n+\n+        if (propertyIdValueValueMap.containsKey(conflictingPid)){\n+            for (Value value : conflictingValues) {\n+                if (propertyIdValueValueMap.get(conflictingPid).equals(value)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efa6d47caacf24a5b62377c3065e3a0813456cf9"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzMwNTcz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-425730573", "createdAt": "2020-06-06T10:29:53Z", "commit": {"oid": "0457785a0882b8610f761d3cc4c0997151d8d1aa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDoyOTo1M1rOGgDDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDozMDo1M1rOGgDDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NzU1MQ==", "bodyText": "Two things: it is better to avoid referring to PropertyIdValueImpl, you can just use PropertyIdValue which is the interface. Also, this type check is actually redundant with the equality check afterwards. You should just be able to do conflictingPid.equals(snak.getValue()) (since you know conflictingPid is not null and its equals method will only return true for instances of PropertyIdValue).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r436257551", "createdAt": "2020-06-06T10:29:53Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -337,4 +342,57 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<PropertyIdValue> getConflictsWithProperties(PropertyIdValue pid) {\n+        List<Statement> statementList = getConstraintsByType(pid, CONFLICTS_WITH_CONSTRAINT_QID).collect(Collectors.toList());\n+        List<Value> conflictsWithProperties = new ArrayList<>();\n+        for(Statement statement : statementList){\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();\n+            if (specs != null) {\n+                conflictsWithProperties.addAll(findValues(specs, CONFLICTS_WITH_PROPERTY_PID));\n+            }\n+        }\n+\n+        if (!conflictsWithProperties.isEmpty()) {\n+            return conflictsWithProperties.stream().map(e -> e == null ? null : (PropertyIdValue) e).collect(Collectors.toList());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the list of all the conflicting values\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<Value> getItemWithConflicts(PropertyIdValue pid, PropertyIdValue conflictingPid) {\n+        List<Statement> statementList = getConstraintsByType(pid, CONFLICTS_WITH_CONSTRAINT_QID).collect(Collectors.toList());\n+        List<Value> itemList = new ArrayList<>();\n+        for (Statement statement : statementList) {\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();\n+            boolean flag = false;\n+            for(SnakGroup group : specs) {\n+                for (Snak snak : group.getSnaks()) {\n+                    if (snak.getValue() instanceof PropertyIdValueImpl && snak.getValue().equals(conflictingPid)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0457785a0882b8610f761d3cc4c0997151d8d1aa"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NzU2MQ==", "bodyText": "Same here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r436257561", "createdAt": "2020-06-06T10:30:04Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -337,4 +342,57 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    /**\n+     * Returns the list of PropertyIdValues of conflicting statements\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<PropertyIdValue> getConflictsWithProperties(PropertyIdValue pid) {\n+        List<Statement> statementList = getConstraintsByType(pid, CONFLICTS_WITH_CONSTRAINT_QID).collect(Collectors.toList());\n+        List<Value> conflictsWithProperties = new ArrayList<>();\n+        for(Statement statement : statementList){\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();\n+            if (specs != null) {\n+                conflictsWithProperties.addAll(findValues(specs, CONFLICTS_WITH_PROPERTY_PID));\n+            }\n+        }\n+\n+        if (!conflictsWithProperties.isEmpty()) {\n+            return conflictsWithProperties.stream().map(e -> e == null ? null : (PropertyIdValue) e).collect(Collectors.toList());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Returns the list of all the conflicting values\n+     *\n+     * @param pid:\n+     *            the property having conflicts-with constraint\n+     * @return\n+     */\n+    public List<Value> getItemWithConflicts(PropertyIdValue pid, PropertyIdValue conflictingPid) {\n+        List<Statement> statementList = getConstraintsByType(pid, CONFLICTS_WITH_CONSTRAINT_QID).collect(Collectors.toList());\n+        List<Value> itemList = new ArrayList<>();\n+        for (Statement statement : statementList) {\n+            List<SnakGroup> specs = statement.getClaim().getQualifiers();\n+            boolean flag = false;\n+            for(SnakGroup group : specs) {\n+                for (Snak snak : group.getSnaks()) {\n+                    if (snak.getValue() instanceof PropertyIdValueImpl && snak.getValue().equals(conflictingPid)){\n+                        flag = true;\n+                    } else if (snak.getValue() instanceof PropertyIdValueImpl && !snak.getValue().equals(conflictingPid)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0457785a0882b8610f761d3cc4c0997151d8d1aa"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NzY2Mg==", "bodyText": "That is fine then! It would be worth adding a test case with a NoValueSnak to demonstrate that, perhaps?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r436257662", "createdAt": "2020-06-06T10:30:53Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ConflictsWithScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"having-conflicts-with-statements\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5MTIxMQ=="}, "originalCommit": {"oid": "efa6d47caacf24a5b62377c3065e3a0813456cf9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f", "author": {"user": {"login": "darecoder", "name": "Ekta Mishra"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/3aa6e2dd6807111e843169c3b3acd88801e7314f", "committedDate": "2020-06-06T20:33:55Z", "message": "Added conflicts-with constraints\n\nImplemented conflicts-with scrutinizer as part of #2354"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDQyNzIy", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-427442722", "createdAt": "2020-06-09T18:43:45Z", "commit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDgzNjcw", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#pullrequestreview-427483670", "createdAt": "2020-06-09T19:41:32Z", "commit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo0MTozMlrOGhZfnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo1NDoyNlrOGhZ58g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3Mzg4NA==", "bodyText": "This looks like a missed merge conflict", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r437673884", "createdAt": "2020-06-09T19:41:32Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -142,6 +144,7 @@\n     boolean usableOnItems(PropertyIdValue pid);\n \n     /**\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDY5NQ==", "bodyText": "Did your IDE do this without you asking? Can you configure a higher limit for wild card imports and/or review the diff to make sure unnecessary changes aren't included?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r437674695", "createdAt": "2020-06-09T19:43:03Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -28,9 +28,7 @@\n import org.wikidata.wdtk.datamodel.implementation.QuantityValueImpl;\n import org.wikidata.wdtk.datamodel.interfaces.*;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3OTUyMg==", "bodyText": "This appears to duplicate ALLOWED_ENTITY_TYPES_PID just above.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r437679522", "createdAt": "2020-06-09T19:52:13Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -94,7 +92,10 @@\n     public static String ALLOWED_ENTITY_TYPES_QID = \"Q52004125\";\n     public static String ALLOWED_ITEM_TYPE_QID = \"Q29934200\";\n     public static String ALLOWED_ENTITY_TYPES_PID = \"P2305\";\n-    \n+\n+    public static String CONFLICTS_WITH_CONSTRAINT_QID = \"Q21502838\";\n+    public static String CONFLICTS_WITH_PROPERTY_PID = \"P2306\";\n+    public static String ITEM_OF_PROPERTY_CONSTRAINT_PID = \"P2305\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4MDYyNg==", "bodyText": "I recognize Q5, but the rest would have to look up. For the benefit of future readers, it might be nice to give them mnemonic variable names or to put the string values in constants.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2641#discussion_r437680626", "createdAt": "2020-06-09T19:54:26Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/MockConstraintFetcher.java", "diffHunk": "@@ -66,6 +69,11 @@\n     public static QuantityValue minValuePid = Datamodel.makeQuantityValue(new BigDecimal(0));\n     public static QuantityValue maxValuePid = Datamodel.makeQuantityValue(new BigDecimal(150));\n \n+    public static PropertyIdValue conflictsWithPid = Datamodel.makeWikidataPropertyIdValue(\"P50\");\n+    public static PropertyIdValue pidConflictingStatement = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n+    public static Value conflictingStatementValue = Datamodel.makeWikidataItemIdValue(\"Q5\");\n+    public static Value conflictsWithValue = Datamodel.makeWikidataItemIdValue(\"Q36322\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6e2dd6807111e843169c3b3acd88801e7314f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3274, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}