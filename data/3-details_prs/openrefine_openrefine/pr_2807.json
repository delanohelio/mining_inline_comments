{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Mzc5MzM3", "number": 2807, "title": "New implementation for Multivalue Scrutinizer", "bodyText": "Implemented inner class & improved tests using mocks.", "createdAt": "2020-06-24T18:25:54Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807", "merged": true, "mergeCommit": {"oid": "8c1d8cdcb7021e1f9d4cbd0d1cef21ec84d1c238"}, "closed": true, "closedAt": "2020-06-26T08:14:35Z", "author": {"login": "darecoder"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcufAZEgFqTQzNjkzMTMzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu-xE3gFqTQzODA5OTQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTMxMzMz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#pullrequestreview-436931333", "createdAt": "2020-06-24T19:10:52Z", "commit": {"oid": "a525a00a123cfaed9279a152522eba44ded531a5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToxMDo1MlrOGoff6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToxMzowMFrOGofkQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjI5Ng==", "bodyText": "I think the end goal is to remove any methods that are specific to a given constraint from the ConstraintFetcher interface. So I would rather mock a generic method (like getSingleConstraint) and make sure the scrunizer calls that.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445112296", "createdAt": "2020-06-24T19:10:52Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizerTest.java", "diffHunk": "@@ -19,6 +24,9 @@ public void testNoIssue() {\n         ItemIdValue idB = TestingData.matchedId;\n         ItemUpdate update = new ItemUpdateBuilder(idA).addStatement(TestingData.generateStatement(idA, idB))\n                 .addStatement(TestingData.generateStatement(idA, idB)).build();\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.hasMultiValue(anyObject())).thenReturn(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a525a00a123cfaed9279a152522eba44ded531a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMjkxMQ==", "bodyText": "Is this inner class actually used in the scrutinizer?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445112911", "createdAt": "2020-06-24T19:12:04Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";\n+\n+    class MultivalueConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a525a00a123cfaed9279a152522eba44ded531a5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMzQwOA==", "bodyText": "I would rather pass a Statement as parameter, and do the initial fetching externally. This ensures that an instance of this inner class corresponds to a constraint declaration.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445113408", "createdAt": "2020-06-24T19:13:00Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";\n+\n+    class MultivalueConstraint {\n+        Value constraintStatus;\n+\n+        MultivalueConstraint(PropertyIdValue propertyIdValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a525a00a123cfaed9279a152522eba44ded531a5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTg1ODI4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#pullrequestreview-437585828", "createdAt": "2020-06-25T15:03:00Z", "commit": {"oid": "d3472d25657c4e2ccf64ed8b147b8cc5bffaa595"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMzowMFrOGo-7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMzowMFrOGo-7qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNzMwNQ==", "bodyText": "When does it make sense for getConstraintsByType to return a null value in its stream? Intuitively I think these should be filtered out upstream, no?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r445627305", "createdAt": "2020-06-25T15:03:00Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -29,6 +51,7 @@ public void scrutinize(ItemUpdate update) {\n         if (update.isNew()) {\n             for (PropertyIdValue pid : propertyCount.keySet()) {\n                 if (propertyCount.get(pid) == 1) {\n+                    List<MultivalueConstraint> constraints = _fetcher.getConstraintsByType(pid, MULTI_VALUE_CONSTRAINT_QID).map(statement -> statement == null ? null : new MultivalueConstraint(statement)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3472d25657c4e2ccf64ed8b147b8cc5bffaa595"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baaad450039653176f6e1950f39f171a9704d831", "author": {"user": {"login": "darecoder", "name": "Ekta Mishra"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/baaad450039653176f6e1950f39f171a9704d831", "committedDate": "2020-06-26T07:48:23Z", "message": "New implementation for Multivalue Scrutinizer\n\nCreated inner class for Multivalue & mocks for unit tests\n\nNew implementation for multivalue scrutinizer\n\ntests updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDk5MDc0", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#pullrequestreview-438099074", "createdAt": "2020-06-26T08:13:47Z", "commit": {"oid": "baaad450039653176f6e1950f39f171a9704d831"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoxMzo0OFrOGpX32g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODoxMzo0OFrOGpX32g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNTkzMA==", "bodyText": "This \"constraint status\" property is not specific to the multi value constraint, it is applicable to all other constraint definitions, so it should rather be defined in a generic location. We can leave this as it is right now, but in the future it really ought to be used by a class that all constraint definitions inherit from.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#discussion_r446035930", "createdAt": "2020-06-26T08:13:48Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/MultiValueScrutinizer.java", "diffHunk": "@@ -3,15 +3,36 @@\n import org.openrefine.wikidata.qa.QAWarning;\n import org.openrefine.wikidata.updates.ItemUpdate;\n import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;\n+import org.wikidata.wdtk.datamodel.interfaces.Snak;\n+import org.wikidata.wdtk.datamodel.interfaces.SnakGroup;\n import org.wikidata.wdtk.datamodel.interfaces.Statement;\n+import org.wikidata.wdtk.datamodel.interfaces.Value;\n \n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n public class MultiValueScrutinizer extends EditScrutinizer {\n \n     public static final String new_type = \"multi-valued-property-is-required-for-new-item\";\n     public static final String existing_type = \"multi-valued-property-is-required-for-existing-item\";\n+    public static String MULTI_VALUE_CONSTRAINT_QID = \"Q21510857\";\n+    public static String MULTI_VALUE_CONSTRAINT_STATUS = \"P2316\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaad450039653176f6e1950f39f171a9704d831"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDk5NDEz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2807#pullrequestreview-438099413", "createdAt": "2020-06-26T08:14:19Z", "commit": {"oid": "baaad450039653176f6e1950f39f171a9704d831"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3104, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}