{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDU0MDQ2", "number": 2634, "title": "Add difference-within-range Scrutinizer", "bodyText": "Implemented difference-within-range constraint as part of #2354", "createdAt": "2020-05-22T17:15:39Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634", "merged": true, "mergeCommit": {"oid": "1638d68e352a89c3481d661b0cc950e667447da2"}, "closed": true, "closedAt": "2020-06-06T18:48:15Z", "author": {"login": "darecoder"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckL5IjgFqTQxNzMwMTYzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnhXm_gH2gAyNDIyMDU0MDQ2OmZjMDVlZWFmMDk4NjYzZDIyNzAyY2U4ZDk4ZTAwOTgxYTAxYjE5Y2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzAxNjM3", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#pullrequestreview-417301637", "createdAt": "2020-05-23T19:10:34Z", "commit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMDozNFrOGZq6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxODoxMVrOGZq8vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDc0Nw==", "bodyText": "These messages are not very natural. As a user I would expect something like this:\n\"Inconsistent date of birth (P1234) and date of death (P3456)\"\n\"The difference between date of birth (P1234) and date of death (P2345) is expected to be within the range [0 year, 150 year], but this fails on items such as Jane Doe (Q18934) where the difference is -18 year.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570747", "createdAt": "2020-05-23T19:10:34Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -120,6 +120,8 @@\n     \"warnings-messages/disallowed-qualifiers/body\": \"Statements using {statement_property_entity} such as the one on {example_item_entity} should not have a {disallowed_property_entity} qualifier as they are incompatible.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/title\": \"{property_entity} added more than once on the same item.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/body\": \"This property is expected to be used at most once on each item but has been added multiple times on the same item, for instance on {example_entity}.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/title\": \"{property_entity} is not having a difference within the range.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/body\": \"{property_entity} is not having the specified difference w.r.t the lower value property within the range.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDgyMg==", "bodyText": "It would be good to mention that this is used by the difference between range constraint (otherwise one might think this is for another constraint).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570822", "createdAt": "2020-05-23T19:11:35Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,35 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the minimum difference value of the range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDgzMA==", "bodyText": "Same here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570830", "createdAt": "2020-05-23T19:11:43Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,35 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the minimum difference value of the range\n+     *\n+     * @param pid\n+     * @return minimum value\n+     */\n+    QuantityValue getMinimumValue(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the maximum difference value of the range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTIxMw==", "bodyText": "We should handle the case where only some of these parameters have been defined: we should make sure we do not fail with a null pointer exception, for instance\u2026", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571213", "createdAt": "2020-05-23T19:17:42Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng==", "bodyText": "This constraint might also be used on quantities: it would be good to support that case too.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571256", "createdAt": "2020-05-23T19:18:09Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI2Mw==", "bodyText": "I think this would be cleaner if we first compute the difference between the two values, in some unit, and then compare it to the bounds supplied in the constraint.\nAlso, it is not clear to me how this works in the Wikibase implementation, but I think the constraint system automatically converts units: differences can be specified in any unit, as far as I can tell.\nSee the official docs:\n\nWikibaseQualityConstraints normalizes the range endpoints before checking this constraint; for example, the intervals [ 0 days , 14 days] and [ 0 weeks , 2 weeks] are equivalent.\n\nhttps://www.wikidata.org/wiki/Help:Property_constraints_portal/Diff_within_range", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571263", "createdAt": "2020-05-23T19:18:11Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){\n+                        TimeValue lowerDate = (TimeValue)startingValue;\n+                        TimeValue upperDate = (TimeValue)endingValue;\n+\n+                        if (upperDate.getYear() - lowerDate.getYear() < minRangeValue.getNumericValue().longValue()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() < lowerDate.getMonth()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() == lowerDate.getMonth() && upperDate.getDay() < lowerDate.getDay()\n+                            || upperDate.getYear() - lowerDate.getYear() > maxRangeValue.getNumericValue().longValue()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDk3NTMy", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#pullrequestreview-421497532", "createdAt": "2020-05-31T13:58:09Z", "commit": {"oid": "ae3d84b8474f9db0f506d41bc9652b1eb43196ff"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzo1ODowOVrOGc5K_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDowMjowNVrOGc5MUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDAxMw==", "bodyText": "Typo: it's -> its", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950013", "createdAt": "2020-05-31T13:58:09Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +336,84 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    protected List<QuantityValue> getValues(List<SnakGroup> groups, String pid) {\n+        List<QuantityValue> results = new ArrayList<>();\n+        for (SnakGroup group : groups) {\n+            if (group.getProperty().getId().equals(pid)) {\n+                for (Snak snak : group.getSnaks())\n+                    results.add((QuantityValueImpl) snak.getValue());\n+            }\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Is this property expected to have a value whose difference\n+     * with it's lower bound property should be in a range?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3d84b8474f9db0f506d41bc9652b1eb43196ff"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDE2Nw==", "bodyText": "We have the same problem as the Conflicts With constraint here: as a parameter, we should pass the target property id (the one against which the difference is checked), and then find the corresponding constraint definition instead of only reading the first one.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950167", "createdAt": "2020-05-31T14:00:02Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +336,84 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    protected List<QuantityValue> getValues(List<SnakGroup> groups, String pid) {\n+        List<QuantityValue> results = new ArrayList<>();\n+        for (SnakGroup group : groups) {\n+            if (group.getProperty().getId().equals(pid)) {\n+                for (Snak snak : group.getSnaks())\n+                    results.add((QuantityValueImpl) snak.getValue());\n+            }\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Is this property expected to have a value whose difference\n+     * with it's lower bound property should be in a range?\n+     */\n+    @Override\n+    public boolean hasDiffWithinRange(PropertyIdValue pid) {\n+        return getSingleConstraint(pid, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_QID) != null;\n+    }\n+\n+    /**\n+     * Retrieves the lower value property for calculating the difference\n+     * required in difference-within-range constraint\n+     *\n+     * @param pid:\n+     *            the property to calculate difference with\n+     * @return the pid of the lower bound property\n+     */\n+    @Override\n+    public PropertyIdValue getLowerPropertyId(PropertyIdValue pid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3d84b8474f9db0f506d41bc9652b1eb43196ff"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDM1NQ==", "bodyText": "Apparently they are actually supported! :) but we can merge this without full support, so we can focus on the architecture changes.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950355", "createdAt": "2020-05-31T14:02:05Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc05eeaf098663d22702ce8d98e00981a01b19ca", "author": {"user": {"login": "darecoder", "name": "Ekta Mishra"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fc05eeaf098663d22702ce8d98e00981a01b19ca", "committedDate": "2020-06-03T04:01:47Z", "message": "Added difference-within-range Scrutinizer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3262, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}