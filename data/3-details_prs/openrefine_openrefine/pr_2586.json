{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mzg1NDQw", "number": 2586, "title": "(Closes #2510) Fix the true.type() == \"boolean\"", "bodyText": "(Closes #2510)\nFix the true.type() == \"boolean\" instead of \"java.lang.Boolean\".\nRegards,\nAntoine", "createdAt": "2020-04-24T07:42:44Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586", "merged": true, "mergeCommit": {"oid": "557ffad9208788d24d70d1ad0aefd5190f6a136a"}, "closed": true, "closedAt": "2020-05-18T21:24:48Z", "author": {"login": "antoine2711"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcazsdbAFqTQwMDA3Njc0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcimsV6ABqjMzNDkxNzQ0MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDc2NzQ3", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#pullrequestreview-400076747", "createdAt": "2020-04-24T16:01:50Z", "commit": {"oid": "94446ee33e01f4c9c8cd45217a72b76807d716a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjA3MTky", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#pullrequestreview-406607192", "createdAt": "2020-05-06T13:24:11Z", "commit": {"oid": "ed61882959974466e83fefb71b41380a56c436dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoyNDoxMVrOGRSxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoyNDoxMVrOGRSxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4NjQ4MA==", "bodyText": "I would remove this commented out line.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#discussion_r420786480", "createdAt": "2020-05-06T13:24:11Z", "author": {"login": "wetneb"}, "path": "main/tests/server/src/com/google/refine/expr/functions/TypeTests.java", "diffHunk": "@@ -26,15 +26,84 @@\n  ******************************************************************************/\n package com.google.refine.expr.functions;\n \n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n import com.google.refine.expr.functions.Type;\n+import com.google.refine.grel.ControlFunctionRegistry;\n+import com.google.refine.grel.Function;\n import com.google.refine.util.TestUtils;\n \n-public class TypeTests {\n+\n+public class TypeTests extends RefineTest {\n+    private static Properties bindings;\n+    static final List<String> listArray = Arrays.asList(\"v1\", \"v2\", \"v3\");\n+    private static OffsetDateTime dateTimeValue = OffsetDateTime.parse(\"2017-05-12T05:45:00+00:00\", DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+    }\n+    \n+    @BeforeMethod\n+    public void setUp() {\n+        bindings = new Properties();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() {\n+        bindings = null;\n+    }\n+    \n+    /**\n+     * Lookup a control function by name and invoke it with a variable number of args\n+     */\n+    private static Object invoke(String name,Object... args) {\n+        // registry uses static initializer, so no need to set it up\n+        Function function = ControlFunctionRegistry.getFunction(name);\n+        if (function == null) {\n+            throw new IllegalArgumentException(\"Unknown function \"+name);\n+        }\n+        if (args == null) {\n+            return function.call(bindings,new Object[0]);\n+        } else {\n+            return function.call(bindings,args);\n+        }\n+    }\n+    \n+    @Test\n+    public void testTypeInvalidParams() {\n+        Assert.assertTrue(invoke(\"type\") instanceof EvalError);\n+    }\n+    \n+    @Test\n+    public void testType() {\n+        Assert.assertEquals(invoke(\"type\", (Object) null),\"undefined\");\n+        Assert.assertEquals(invoke(\"type\", 1),\"number\");\n+        Assert.assertEquals(invoke(\"type\", true),\"boolean\");\n+        Assert.assertEquals(invoke(\"type\", \"a string\"),\"string\");\n+        Assert.assertEquals(invoke(\"type\", dateTimeValue), \"date\");\n+        Assert.assertEquals(invoke(\"type\", listArray), \"array\");\n+//        Assert.assertEquals(invoke(\"type\", error), \"error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed61882959974466e83fefb71b41380a56c436dd"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Mzc5MDMz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#pullrequestreview-408379033", "createdAt": "2020-05-08T16:58:37Z", "commit": {"oid": "d12326094ba25f57d027b2b40cd83e0dd3bd1566"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo1ODozN1rOGSsdnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzowNjoxNlrOGSsshg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NjAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }    \n          \n          \n            \n                }", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#discussion_r422256031", "createdAt": "2020-05-08T16:58:37Z", "author": {"login": "tfmorris"}, "path": "main/tests/server/src/com/google/refine/expr/functions/TypeTests.java", "diffHunk": "@@ -26,16 +26,82 @@\n  ******************************************************************************/\n package com.google.refine.expr.functions;\n \n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n+import java.util.Properties;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n import com.google.refine.expr.functions.Type;\n+import com.google.refine.grel.ControlFunctionRegistry;\n+import com.google.refine.grel.Function;\n import com.google.refine.util.TestUtils;\n \n-public class TypeTests {\n+\n+public class TypeTests extends RefineTest {\n+    private static Properties bindings;\n+    private static final Integer[] ZERO_TO_TWO = new Integer[] {0, 1, 2};\n+    private static OffsetDateTime dateTimeValue = OffsetDateTime.parse(\"2017-05-12T05:45:00+00:00\", DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+    }\n+    \n+    @BeforeMethod\n+    public void setUp() {\n+        bindings = new Properties();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() {\n+        bindings = null;\n+    }\n+    \n+    /**\n+     * Lookup a control function by name and invoke it with a variable number of args\n+     */\n+    private static Object invoke(String name,Object... args) {\n+        // registry uses static initializer, so no need to set it up\n+        Function function = ControlFunctionRegistry.getFunction(name);\n+        if (function == null) {\n+            throw new IllegalArgumentException(\"Unknown function \"+name);\n+        }\n+        if (args == null) {\n+            return function.call(bindings,new Object[0]);\n+        } else {\n+            return function.call(bindings,args);\n+        }\n+    }\n+    \n+    @Test\n+    public void testTypeInvalidParams() {\n+        Assert.assertTrue(invoke(\"type\") instanceof EvalError);\n+    }\n+    \n+    @Test\n+    public void testType() {\n+        Assert.assertEquals(invoke(\"type\", (Object) null),\"undefined\");\n+        Assert.assertEquals(invoke(\"type\", 1),\"number\");\n+        Assert.assertEquals(invoke(\"type\", true),\"boolean\");\n+        Assert.assertEquals(invoke(\"type\", \"a string\"),\"string\");\n+        Assert.assertEquals(invoke(\"type\", dateTimeValue), \"date\");\n+//        Assert.assertEquals(invoke(\"type\", error), \"error\");\n+    }\n+    \n     @Test\n     public void serializeType() {\n         String json = \"{\\\"description\\\":\\\"Returns the type of o as a string ('string', 'date', 'number', 'array', 'boolean', 'error' or a class name)\\\",\\\"params\\\":\\\"object o\\\",\\\"returns\\\":\\\"string\\\"}\";\n         TestUtils.isSerializedTo(new Type(), json);\n-    }\n+    }    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12326094ba25f57d027b2b40cd83e0dd3bd1566"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1OTMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"Returns the type of o as a string ('string', 'date', 'number', 'array', 'boolean', 'error' or a class name)\";\n          \n          \n            \n                    return \"Returns the type of o as a string ('string', 'date', 'number', 'array', or 'boolean'). The string 'error' is returned if the value can't be evaluated\";\n          \n      \n    \n    \n  \n\nNow that the bug is fixed, can it ever return a Java class name? I'd be tempted to just pare this down to simply \"Returns the type of o as a string.\"", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#discussion_r422259312", "createdAt": "2020-05-08T17:05:06Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/expr/functions/Type.java", "diffHunk": "@@ -70,7 +72,7 @@ public Object call(Properties bindings, Object[] args) {\n \n     @Override\n     public String getDescription() {\n-        return \"Returns the type of o\";\n+        return \"Returns the type of o as a string ('string', 'date', 'number', 'array', 'boolean', 'error' or a class name)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed61882959974466e83fefb71b41380a56c436dd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1OTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        Assert.assertEquals(invoke(\"type\", error), \"error\");", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#discussion_r422259621", "createdAt": "2020-05-08T17:05:45Z", "author": {"login": "tfmorris"}, "path": "main/tests/server/src/com/google/refine/expr/functions/TypeTests.java", "diffHunk": "@@ -26,15 +26,84 @@\n  ******************************************************************************/\n package com.google.refine.expr.functions;\n \n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n import com.google.refine.expr.functions.Type;\n+import com.google.refine.grel.ControlFunctionRegistry;\n+import com.google.refine.grel.Function;\n import com.google.refine.util.TestUtils;\n \n-public class TypeTests {\n+\n+public class TypeTests extends RefineTest {\n+    private static Properties bindings;\n+    static final List<String> listArray = Arrays.asList(\"v1\", \"v2\", \"v3\");\n+    private static OffsetDateTime dateTimeValue = OffsetDateTime.parse(\"2017-05-12T05:45:00+00:00\", DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+    }\n+    \n+    @BeforeMethod\n+    public void setUp() {\n+        bindings = new Properties();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() {\n+        bindings = null;\n+    }\n+    \n+    /**\n+     * Lookup a control function by name and invoke it with a variable number of args\n+     */\n+    private static Object invoke(String name,Object... args) {\n+        // registry uses static initializer, so no need to set it up\n+        Function function = ControlFunctionRegistry.getFunction(name);\n+        if (function == null) {\n+            throw new IllegalArgumentException(\"Unknown function \"+name);\n+        }\n+        if (args == null) {\n+            return function.call(bindings,new Object[0]);\n+        } else {\n+            return function.call(bindings,args);\n+        }\n+    }\n+    \n+    @Test\n+    public void testTypeInvalidParams() {\n+        Assert.assertTrue(invoke(\"type\") instanceof EvalError);\n+    }\n+    \n+    @Test\n+    public void testType() {\n+        Assert.assertEquals(invoke(\"type\", (Object) null),\"undefined\");\n+        Assert.assertEquals(invoke(\"type\", 1),\"number\");\n+        Assert.assertEquals(invoke(\"type\", true),\"boolean\");\n+        Assert.assertEquals(invoke(\"type\", \"a string\"),\"string\");\n+        Assert.assertEquals(invoke(\"type\", dateTimeValue), \"date\");\n+        Assert.assertEquals(invoke(\"type\", listArray), \"array\");\n+//        Assert.assertEquals(invoke(\"type\", error), \"error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed61882959974466e83fefb71b41380a56c436dd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1OTg0Ng==", "bodyText": "Fix test to match above.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#discussion_r422259846", "createdAt": "2020-05-08T17:06:16Z", "author": {"login": "tfmorris"}, "path": "main/tests/server/src/com/google/refine/expr/functions/TypeTests.java", "diffHunk": "@@ -26,15 +26,84 @@\n  ******************************************************************************/\n package com.google.refine.expr.functions;\n \n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import com.google.refine.RefineTest;\n+import com.google.refine.expr.EvalError;\n import com.google.refine.expr.functions.Type;\n+import com.google.refine.grel.ControlFunctionRegistry;\n+import com.google.refine.grel.Function;\n import com.google.refine.util.TestUtils;\n \n-public class TypeTests {\n+\n+public class TypeTests extends RefineTest {\n+    private static Properties bindings;\n+    static final List<String> listArray = Arrays.asList(\"v1\", \"v2\", \"v3\");\n+    private static OffsetDateTime dateTimeValue = OffsetDateTime.parse(\"2017-05-12T05:45:00+00:00\", DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+\n+    @Override\n+    @BeforeTest\n+    public void init() {\n+        logger = LoggerFactory.getLogger(this.getClass());\n+    }\n+    \n+    @BeforeMethod\n+    public void setUp() {\n+        bindings = new Properties();\n+    }\n+\n+    @AfterMethod\n+    public void tearDown() {\n+        bindings = null;\n+    }\n+    \n+    /**\n+     * Lookup a control function by name and invoke it with a variable number of args\n+     */\n+    private static Object invoke(String name,Object... args) {\n+        // registry uses static initializer, so no need to set it up\n+        Function function = ControlFunctionRegistry.getFunction(name);\n+        if (function == null) {\n+            throw new IllegalArgumentException(\"Unknown function \"+name);\n+        }\n+        if (args == null) {\n+            return function.call(bindings,new Object[0]);\n+        } else {\n+            return function.call(bindings,args);\n+        }\n+    }\n+    \n+    @Test\n+    public void testTypeInvalidParams() {\n+        Assert.assertTrue(invoke(\"type\") instanceof EvalError);\n+    }\n+    \n+    @Test\n+    public void testType() {\n+        Assert.assertEquals(invoke(\"type\", (Object) null),\"undefined\");\n+        Assert.assertEquals(invoke(\"type\", 1),\"number\");\n+        Assert.assertEquals(invoke(\"type\", true),\"boolean\");\n+        Assert.assertEquals(invoke(\"type\", \"a string\"),\"string\");\n+        Assert.assertEquals(invoke(\"type\", dateTimeValue), \"date\");\n+        Assert.assertEquals(invoke(\"type\", listArray), \"array\");\n+//        Assert.assertEquals(invoke(\"type\", error), \"error\");\n+    }\n+    \n     @Test\n     public void serializeType() {\n-        String json = \"{\\\"description\\\":\\\"Returns the type of o\\\",\\\"params\\\":\\\"object o\\\",\\\"returns\\\":\\\"string\\\"}\";\n+        String json = \"{\\\"description\\\":\\\"Returns the type of o as a string ('string', 'date', 'number', 'array', 'boolean', 'error' or a class name)\\\",\\\"params\\\":\\\"object o\\\",\\\"returns\\\":\\\"string\\\"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed61882959974466e83fefb71b41380a56c436dd"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzOTQxODcz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2586#pullrequestreview-413941873", "createdAt": "2020-05-18T21:11:17Z", "commit": {"oid": "1ae72f47b55f257032aa5f2c955d7ef6db7d23aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e86619d86ffc98f9482f822cc4fa255091c44ef", "author": {"user": {"login": "antoine2711", "name": "Antoine Beaubien"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/0e86619d86ffc98f9482f822cc4fa255091c44ef", "committedDate": "2020-05-18T21:23:43Z", "message": "Fix the true.type() == \"boolean\"\n\nFix the true.type() == \"boolean\" instead of java.lang.Boolean.\n\nRemove all the references to \"error\" result  in Type(). This will be addressed in:\n@ToDo fix this with issue #2562"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ae72f47b55f257032aa5f2c955d7ef6db7d23aa", "author": {"user": {"login": "antoine2711", "name": "Antoine Beaubien"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/1ae72f47b55f257032aa5f2c955d7ef6db7d23aa", "committedDate": "2020-05-18T17:10:20Z", "message": "Remove references to \"error\" in Type()\n\nRemove all the references to \"error\" result  in Type(). This will be addressed in:\n@ToDo fix this with issue #2562"}, "afterCommit": {"oid": "0e86619d86ffc98f9482f822cc4fa255091c44ef", "author": {"user": {"login": "antoine2711", "name": "Antoine Beaubien"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/0e86619d86ffc98f9482f822cc4fa255091c44ef", "committedDate": "2020-05-18T21:23:43Z", "message": "Fix the true.type() == \"boolean\"\n\nFix the true.type() == \"boolean\" instead of java.lang.Boolean.\n\nRemove all the references to \"error\" result  in Type(). This will be addressed in:\n@ToDo fix this with issue #2562"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3241, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}