{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MzcxMDQ2", "number": 2518, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjo1OTo0N1rODzHyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDoxNVrODzP5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0OTMxNDg4OnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/Cross.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjo1OTo0N1rOGHjpVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzozMTo1NFrOGHrFUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU3NzIzNw==", "bodyText": "Project's can actually have the same name.  I have 25 projects with unique Project IDs but they all have a common name \"clipboard\".  And that's fine, we allow that.  cross() however, without a Project name now supplied here will get confused as shown, so we need to improve this handling (in other words, it should know that I am about to perform a cross() on the current binding to a Project id.\n\nI think that if the args[1] is empty then we should use the current Project ID which we seem to already have in the Project bindings ?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410577237", "createdAt": "2020-04-18T02:59:47Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,18 +41,25 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = args.length < 2 || args[1].equals(\"\") ?\n+                    ((Project) bindings.get(\"project\")).getMetadata().getName() : args[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU4MTMwOQ==", "bodyText": "Got it!", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410581309", "createdAt": "2020-04-18T03:10:04Z", "author": {"login": "afkbrb"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,18 +41,25 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = args.length < 2 || args[1].equals(\"\") ?\n+                    ((Project) bindings.get(\"project\")).getMetadata().getName() : args[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU3NzIzNw=="}, "originalCommit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU5MTIyNQ==", "bodyText": "Project's can actually have the same name. I have 25 projects with unique Project IDs but they all have a common name \"clipboard\". And that's fine, we allow that. cross() however, without a Project name now supplied here will get confused as shown, so we need to improve this handling (in other words, it should know that I am about to perform a cross() on the current binding to a Project id.\n\n@thadguidry: I know we are not keen on overloading function parameters, but, in this case, I really think we should accept number (project IDs) in addition of strings (project names) to identify a project in the cross(1, 2069987961613) function. Because, it's just 2 ways of identifying the exact same thing.\nThe logic is that sometimes, a string is not precise enough to identify a project, whereas, Project ID will always be.\nWhat do you think about that?\nRegards, A.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410591225", "createdAt": "2020-04-18T03:34:25Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,18 +41,25 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = args.length < 2 || args[1].equals(\"\") ?\n+                    ((Project) bindings.get(\"project\")).getMetadata().getName() : args[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU3NzIzNw=="}, "originalCommit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5OTA5MQ==", "bodyText": "@antoine2711 Users can be explicit about the project they want to cross with by specifying name.  If the project names are the same, it is trivial for them to rename a project and then be explicit with the names.  So I'd say let's not introduce extra worry about project ids in cross() for now.  Its a 4 second step for them, and it also enforces them to think well about data sharing via Project naming, metadata, etc. for them.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410699091", "createdAt": "2020-04-18T13:31:54Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,18 +41,25 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = args.length < 2 || args[1].equals(\"\") ?\n+                    ((Project) bindings.get(\"project\")).getMetadata().getName() : args[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU3NzIzNw=="}, "originalCommit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDM5MjkyOnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/Cross.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzo1ODoyN1rOGHrOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzo1ODoyN1rOGHrOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMTQ3Ng==", "bodyText": "@afkbrb Looks like we need to clean up the help text just a bit?  missing the single quote chars '' on the end of those 2 sentences?  Looks like some kind of rendering issue?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410701476", "createdAt": "2020-04-18T13:58:27Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to ''. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ef026ee144614bd5c7916f82bef4551d244c99"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQ3MzI3OnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/Cross.java", "isResolved": true, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyMDo1MlrOGHr07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMToxOTowM1rOGZHzkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA==", "bodyText": "Hmm...  what are we missing here?\nI perform a cross() that has valid syntax and 3 args.\nBut there's no try wrapping here...so... silent error?\nMy expectation was that of some kind of error GIVEN the below scenario:", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410711278", "createdAt": "2020-04-18T15:20:52Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyMjk0OQ==", "bodyText": "I don\u2019t think it\u2019s an error.\nIndexes being numerical, you got to match them with numbers.\nRegards, A.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410722949", "createdAt": "2020-04-18T17:01:02Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNTA0Ng==", "bodyText": "Sorry @antoine2711 I don't quite understand what you mean.  Please explain what I am asking GREL for with that syntax in my image and given the underlying data grid.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410725046", "createdAt": "2020-04-18T17:18:19Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjEwMQ==", "bodyText": "Sorry @antoine2711 I don't quite understand what you mean. Please explain what I am asking GREL for with that syntax in my image and given the underlying data grid.\n\nYou are doing cross(cell.value, \"CurrentProject\", Use the internal index).\nSince internal index is ALWAYS a number, cell.value MUST be a number to match & cross. In your example, 111 or 222 \u00ab could be \u00bb numbers, but since the preview doesn't use the green coloring to confirm it, can't know for sure, but at the look of the grey table in the background, neither 111 or 222 or 333 seams to be cast as number, but rather like strings, which will never match an index.\nBut, even if 111 or 222 were numbers, you would need 112 or 223 rows in your project to have a match.\nIs it clearer? Regards, A.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732101", "createdAt": "2020-04-18T18:20:19Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMzMyNA==", "bodyText": "they are Strings (not numbers)", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410733324", "createdAt": "2020-04-18T18:30:20Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNDE4Nw==", "bodyText": "they are Strings (not numbers)\n\nK. So, unless they are numerical and between 0 and \u00ab\u00a0Max(row.index)\u00a0\u00bb, you can always expect null result value, and not an error. Because, it's not an error, it's just that there is no match, which is fine for cross().\nMaybe I don't understand this phrase: \u00ab But there's no try wrapping here...so... silent error? \u00bb\nRegards, A.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410734187", "createdAt": "2020-04-18T18:37:59Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzE2Ng==", "bodyText": "No, it's much more confusing now.  I need a test case (a fuller test case) that shows how the 3rd argument works or doesn't.  I'd expect that single test case to show a single cross operation that is using the 3rd argument working against a test data grid of 3 rows x 2 columns.\nI was also confused by the issue #2504 and still am, so that's part of the problem....me actually seeing some usefulness...which I have not yet, so I need everyone to help me here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410737166", "createdAt": "2020-04-18T19:01:14Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0MzE3MQ==", "bodyText": "@antoine2711 Would you mind helping everyone understand how the new cross() is supposed to work on some Google document or Hackmd.io so that the community can leave comments?  Call it \"Proposed Cross() in Issue #2504\"  The issue #2504 is not clear to me, sorry.  Thanks.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410743171", "createdAt": "2020-04-18T19:54:22Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0NDU2NQ==", "bodyText": "No, it's much more confusing now.\n\nYour confusion seams to come from \u00ab GREL cross function should support lookup by numbers #2461\u00a0\u00bb, which is committed into the master branch since almost a month.\nNow, when we use the cross() function, matches can be done even if the datatype is not a string, but the 2 elements MUST share the same datatype.\n\nI need a test case (a fuller test case) that shows how the 3rd argument works or doesn't. I'd expect that single test case to show a single cross operation that is using the 3rd argument working against a test data grid of 3 rows x 2 columns.\n\nI think you are raising a good point, that #2461 could have more tests.\nWhat should we add to this file? main/tests/server/src/com/google/refine/expr/functions/CrossTests.java\n\nI was also confused by the issue #2504 and still am, so that's part of the problem....me actually seeing some usefulness...which I have not yet, so I need everyone to help me here.\n\nThe real added value to Issue #2504 is to be able to do cross() with the internal index of rows, that is not a column, but can easily behave like one. It is very powerful as it actually enables every project to be used like an index array. I basically makes it possible to access every cells of every projects. It's very flexible.\nShould we discuss of datatypes with the cross() function in Issue #2461 or here? It much more relevent there.\nRegards, Antoine", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410744565", "createdAt": "2020-04-18T20:09:03Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc0NzUxNQ==", "bodyText": "@antoine2711 Would you mind helping everyone understand how the new cross() is supposed to work on some Google document or Hackmd.io so that the community can leave comments? Call it \"Proposed Cross() in Issue #2504\" The issue #2504 is not clear to me, sorry. Thanks.\n\nYes @thadguidry, I want to write about cross() new abilities, but like I wrote, it would be about Issue #2461. The situation you have here is the same you would have with an added column called ID that would contain numeric values of index (row.index).\nThis is the first thing I was planning to do on the new documentation system. And it's important to have that ready BEFORE v3.4 goes out, since it already committed in the master branch. I could go in the Wiki, and start a new page, that page could be exposed and linked once v3.4 is out.\nRegards,\nAntoine", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410747515", "createdAt": "2020-04-18T20:37:16Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1Mjc5OQ==", "bodyText": "The community can't leave comments on a GitHub Wiki page, unfortunately.  Please use a collaborative environment.  My suggestion is https://hackmd.io", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410752799", "createdAt": "2020-04-18T21:24:56Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0MDM4Nw==", "bodyText": "Hi, @thadguidry , with #2571, we are now using string match for the cross() function now. So the result of your test above will be:\n\nHere the index range is [0, 9], so in column \"#@!c\", only the value \"3\" got a match.\nBut there is another problem here:\nBoth the embedded GREL variable \"rowIndex\" and the index used by the cross() function start from 0, so \"cross(rowIndex)\" will match the same column, which is what we expected.\n\nHowever the row index in the UI starts from 1. This is confusing, because \"cross(3)\" actually match the 4th row.\n\nMy suggestion is that we change the \"rowIndex\" and the index used by the cross() function both to start from 1, so they will be consistent with the UI index. But I am not sure if changing the \"rowIndex\" variable will result in some unexpected behaviour of other GREL functions. What's your opinion on this?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r422740387", "createdAt": "2020-05-11T01:53:23Z", "author": {"login": "afkbrb"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MzkyNQ==", "bodyText": "My suggestion is that we change the \"rowIndex\" and the index used by the cross() function both to start from 1, so they will be consistent with the UI index. But I am not sure if changing the \"rowIndex\" variable will result in some unexpected behaviour of other GREL functions. What's your opinion on this?\n\n@afkbrb: rowIndex is 0-bound everywhere, except in the UI in the preview and the data-grid. I think it would be less breaking and complicated to just change the UI display, and make it 0-bound! ;-)\nI'm joking, but I'm also serious. It would be more coherent.\nRegards,\nAntoine", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r428983925", "createdAt": "2020-05-22T00:30:39Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5NTQ3Mg==", "bodyText": "This has been reviewed and approved. We're not making breaking changes to things. Programmers and computers expect 0-based. Humans expect 1-based. Thus we have two different domains.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r428995472", "createdAt": "2020-05-22T01:19:03Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MDg5OnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/Cross.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMTo0NVrOGHtGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMTo0NVrOGHtGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjIzMA==", "bodyText": "I would change cell value for just value everywhere in the doc. It's just a value, it can come from anywhere (even literals values are accepted!).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732230", "createdAt": "2020-04-18T18:21:45Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MjgzOnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/Cross.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMzozMlrOGHtHpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMTo1NDowMlrOGHwsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjQ1NQ==", "bodyText": "I would change object value for just value everywhere in the doc. It's just a value, it can come from anywhere (even literals values are accepted!). Also, the use of object is misleading, not pertinent and confusing.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732455", "createdAt": "2020-04-18T18:23:32Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\"\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\"\\\"\";\n     }\n \n     @Override\n     public String getParams() {\n-        return \"cell c or object value, string projectName, string columnName\";\n+        return \"cell c or object value, string projectName (optional), string columnName (optional)\";\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4MzEzNA==", "bodyText": "@antoine2711 Good point! I'll change it. The \"jsonize()\" function also uses \"value\" , so I think it's ok to do the same here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410783134", "createdAt": "2020-04-19T00:55:49Z", "author": {"login": "afkbrb"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\"\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\"\\\"\";\n     }\n \n     @Override\n     public String getParams() {\n-        return \"cell c or object value, string projectName, string columnName\";\n+        return \"cell c or object value, string projectName (optional), string columnName (optional)\";\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjQ1NQ=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4NTc5Mw==", "bodyText": "value is loosely defined here: https://github.com/OpenRefine/OpenRefine/wiki/Variables#variables\nWe probably should give a small mention of value somewhere here:\nhttps://github.com/OpenRefine/OpenRefine/wiki/Server-Side-Architecture#data-model\n\nraw data: a list of rows, each row consisting of a list of cells", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410785793", "createdAt": "2020-04-19T01:17:08Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\"\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\"\\\"\";\n     }\n \n     @Override\n     public String getParams() {\n-        return \"cell c or object value, string projectName, string columnName\";\n+        return \"cell c or object value, string projectName (optional), string columnName (optional)\";\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjQ1NQ=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTA4MA==", "bodyText": "In the previous version of cross() even a value was somehow invisibly \u00ab bounded\u00a0\u00bb to the column it came from. So, to name it \u00ab\u00a0object value\u00a0\u00bb, or \u00ab\u00a0cell value\u00a0\u00bb, had a certain logic in it. But now, it's really a pure value, that can be anything. So, might as well just call it that, a value.\n@thadguidry: yah, we have a few definition here and there, so a nice clean up in our new documentation will surely come handy. my favorite is datatype definitions in the Cell page\u2026 But hey! At one point, it made a lot of sens, I guess. ;-)\nI'm eager to see what's coming in that way.\nRegards, Antoine.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410791080", "createdAt": "2020-04-19T01:54:02Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\"\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\"\\\"\";\n     }\n \n     @Override\n     public String getParams() {\n-        return \"cell c or object value, string projectName, string columnName\";\n+        return \"cell c or object value, string projectName (optional), string columnName (optional)\";\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjQ1NQ=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MzQzOnYy", "diffSide": "RIGHT", "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMzo1NVrOGHtH7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMzo1NVrOGHtH7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjUyNA==", "bodyText": "Same.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732524", "createdAt": "2020-04-18T18:23:55Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -263,12 +306,12 @@ public void crossFunctionMatchNotFoundTest() throws Exception {\n      \n     /**\n      *  \n-     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up, and a column name in that project\"\n+     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\"\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MzcwOnYy", "diffSide": "RIGHT", "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDowNFrOGHtICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDowNFrOGHtICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjU1NA==", "bodyText": "Same", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732554", "createdAt": "2020-04-18T18:24:04Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -263,12 +306,12 @@ public void crossFunctionMatchNotFoundTest() throws Exception {\n      \n     /**\n      *  \n-     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up, and a column name in that project\"\n+     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\"\n      */\n     @Test\n     public void crossFunctionNonLiteralValue() throws Exception {\n         Assert.assertEquals(((EvalError) invoke(\"cross\", null, \"My Address Book\", \"friend\")).message,\n-                \"cross expects a cell or cell value, a project name to look up, and a column name in that project\");\n+                \"cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDY0MzgxOnYy", "diffSide": "RIGHT", "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDoxNVrOGHtIGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDoxNVrOGHtIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjU2OQ==", "bodyText": "Same.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732569", "createdAt": "2020-04-18T18:24:15Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -289,7 +332,11 @@ private static Object invoke(String name,Object... args) {\n     \n     @Test\n     public void serializeCross() {\n-        String json = \"{\\\"description\\\":\\\"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\\\",\\\"params\\\":\\\"cell c or object value, string projectName, string columnName\\\",\\\"returns\\\":\\\"array\\\"}\";\n+        String json = \"{\\\"description\\\":\\\"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\\\\\"\\\\\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\\\\\"\\\\\\\"\\\",\" +\n+                \"\\\"params\\\":\\\"cell c or object value, string projectName (optional), string columnName (optional)\\\",\\\"returns\\\":\\\"array\\\"}\";\n         TestUtils.isSerializedTo(new Cross(), json);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2708, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}