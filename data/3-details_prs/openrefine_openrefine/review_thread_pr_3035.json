{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzExMzU4", "number": 3035, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0ODo1N1rOEXLJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNjo0NVrOEZbunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzM1NDI1OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0ODo1N1rOG-0OSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo0ODo1N1rOG-0OSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyMDUyMg==", "bodyText": "It's not clear to me that this is the single most salient sort of issue we should flag about the records mode - perhaps it could be left in normal text without the caution box (which really jumps to the eyes).", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468520522", "createdAt": "2020-08-11T11:48:57Z", "author": {"login": "wetneb"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzM2MDYyOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo1MDo0M1rOG-0SDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo1MDo0M1rOG-0SDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyMTQ4Ng==", "bodyText": "\"each of those five responses would be a text facet\" -> I would not phrase it like this.\nThere should only be one text facet on the column that stores these responses, and there should be five options in this text facet corresponding to each choice.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468521486", "createdAt": "2020-08-11T11:50:43Z", "author": {"login": "wetneb"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::\n \n ## Facets\n \n \n-### Overview \n+### Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d each of those five responses would be a text facet, and you could see how many people selected each answer. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzM3MDE3OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo1MzozOFrOG-0X0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTo1MzozOFrOG-0X0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyMjk2Mw==", "bodyText": "Not sure https://query.wikidata.org/ is the best place to link to. Users will just see a query editor with no query in it, it might be confusing for the uninitiated. I would point to one of:\n\nWikidata's main page: https://www.wikidata.org/wiki/Wikidata:Main_Page\nA direct link to the query results (you can generate that link on query.wikidata.org)\nA copy of the results as it were when you run the query (stored in some archive)", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468522963", "createdAt": "2020-08-11T11:53:38Z", "author": {"login": "wetneb"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::\n \n ## Facets\n \n \n-### Overview \n+### Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d each of those five responses would be a text facet, and you could see how many people selected each answer. \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+#### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected [a list of the 10 most populous cities as per Wikidata](https://query.wikidata.org/), using an example query of theirs. We removed the GPS coordinates and added the country. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzQwMTAyOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjowMjowNVrOG-0ptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODo0OToyM1rOG_E6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNzU0MA==", "bodyText": "The editing part might be worth expanding, it's a powerful feature that is not so easy to discover. It would be worth explaining that this will change all the corresponding cell values: it is an effective way to clean up values in a column. You could add a link to the documentation about clustering (to be written) which does that at a larger scale.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468527540", "createdAt": "2020-08-11T12:02:05Z", "author": {"login": "wetneb"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::\n \n ## Facets\n \n \n-### Overview \n+### Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d each of those five responses would be a text facet, and you could see how many people selected each answer. \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+#### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected [a list of the 10 most populous cities as per Wikidata](https://query.wikidata.org/), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n \n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n \n+#### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n \n ### Text facet\n \n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. You can also automate the cleanup of facets by using clustering, with the \u201cCluster\u201d button displayed within the facet window. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjQ2Mw==", "bodyText": "We internally call it a \"mass edit\" link, because it can massively edit from/to all the values in a column as Antonin says.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468636463", "createdAt": "2020-08-11T14:43:42Z", "author": {"login": "thadguidry"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::\n \n ## Facets\n \n \n-### Overview \n+### Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d each of those five responses would be a text facet, and you could see how many people selected each answer. \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+#### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected [a list of the 10 most populous cities as per Wikidata](https://query.wikidata.org/), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n \n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n \n+#### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n \n ### Text facet\n \n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. You can also automate the cleanup of facets by using clustering, with the \u201cCluster\u201d button displayed within the facet window. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNzU0MA=="}, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDA2MQ==", "bodyText": "I added a sentence or two. I can probably say more here so I'll leave this open for now. Current text:\n\nYou can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using clustering, with the \u201cCluster\u201d button displayed within the facet window.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r468794061", "createdAt": "2020-08-11T18:49:23Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,346 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n sidebar_label: Exploring data\n-\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n+\n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n+\n+## Cell data types\n \n-### Cell data types\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type.\n \n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Null vs empty string\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d \n \n+You can opt to show \u201cnull\u201d values to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-*   Viewing null values\n+To transform data from one type to another, see [Transforming data](transforming-data#transform) for information on using `toString()`, `toDate()`, and other functions.\n \n+## Row types: rows vs. records\n \n-### Rows vs. records\n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column. Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-*   Functions that matter to rows/records distinction\n+OpenRefine assigns a unique key behind the scenes, so your records don\u2019t need a unique identifier. You can keep track of which rows are assigned to which record by the record number that appears under the \u201cAll\u201d column.\n \n+To [split multi-valued cells](transforming-data#split-multi-valued-cells) and apply other operations that take advantage of records mode, see [Transforming data](transforming-data). \n+\n+:::caution\n+Be careful when in records mode that you do not accidentally delete rows based on being blank in one column where there is a value in another. \n+:::\n \n ## Facets\n \n \n-### Overview \n+### Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d each of those five responses would be a text facet, and you could see how many people selected each answer. \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+#### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected [a list of the 10 most populous cities as per Wikidata](https://query.wikidata.org/), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n \n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n \n+#### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n \n ### Text facet\n \n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. You can also automate the cleanup of facets by using clustering, with the \u201cCluster\u201d button displayed within the facet window. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNzU0MA=="}, "originalCommit": {"oid": "cb49e341829ea294a56c1d1e93a6b9a7ffa634bf"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzUwMTg4OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTozMToxMlrOHBtvTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0MDo0NFrOHSFSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MDAxNQ==", "bodyText": "I'd suggest that an ID of some kind would be a better example of a key column - the scenario you describe would work in a sense I think a unique ID that links the rows together is a better example of how records work", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r471560015", "createdAt": "2020-08-17T15:31:12Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Export data function\n+A \u201cdate\u201d type is created when a text column is [transformed into dates](transforming#to-date), or when individual cells are set to have the data type \u201cdate.\u201d \n \n- (only current view)\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d You can opt to [show \u201cnull\u201d values](#view) to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-### Regular expressions\n+Converting a cell's data type is not the same operation as transforming its contents. For example, using a column-wide transform such as \u201cTransform\u201d > \u201cCommon transforms \u2026\u201d > \u201cto date\u201d may not convert all values successfully, but going to an individual cell, clicking \u201cedit\u201d and changing the data type can successfully convert text to a date. These operations use different underlying code. \n \n+To transform data from one type to another, see [Transforming data](transforming#transform) for information on using common tranforms, and see [Expressions](expressions) for information on using `toString()`, `toDate()`, and other functions. \n \n-## Sort and View\n+## Row types: rows vs. records\n \n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n-### Sort\n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column, what we call the \"key column.\" Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-### View: Collapsing (and expanding)\n+For example, your key column may be a family name, with multiple family members identified by their first names, associated to that family name. You may have one or more phone numbers listed for each person. The phone numbers are linked to the first names, which are linked to the last name. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MTAyMw==", "bodyText": "For example a single film identified by an IMDB ID can have multiple actors", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472071023", "createdAt": "2020-08-18T10:15:50Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Export data function\n+A \u201cdate\u201d type is created when a text column is [transformed into dates](transforming#to-date), or when individual cells are set to have the data type \u201cdate.\u201d \n \n- (only current view)\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d You can opt to [show \u201cnull\u201d values](#view) to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-### Regular expressions\n+Converting a cell's data type is not the same operation as transforming its contents. For example, using a column-wide transform such as \u201cTransform\u201d > \u201cCommon transforms \u2026\u201d > \u201cto date\u201d may not convert all values successfully, but going to an individual cell, clicking \u201cedit\u201d and changing the data type can successfully convert text to a date. These operations use different underlying code. \n \n+To transform data from one type to another, see [Transforming data](transforming#transform) for information on using common tranforms, and see [Expressions](expressions) for information on using `toString()`, `toDate()`, and other functions. \n \n-## Sort and View\n+## Row types: rows vs. records\n \n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n-### Sort\n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column, what we call the \"key column.\" Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-### View: Collapsing (and expanding)\n+For example, your key column may be a family name, with multiple family members identified by their first names, associated to that family name. You may have one or more phone numbers listed for each person. The phone numbers are linked to the first names, which are linked to the last name. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MDAxNQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTcyNg==", "bodyText": "I'm not sure why you want a unique ID for this. I think this example works well with just the film title, not the ID?\n\n\n\nIMDB ID\nWork\nActor\nRole\n\n\n\n\ntt0032138\nThe Wizard of Oz\nJudy Garland\nDorothy Gale\n\n\n\n\nRay Bolger\n\"Hunk\"\n\n\n\n\n\nThe Scarecrow\n\n\n\n\nJack Haley\n\"Hickory\"\n\n\n\n\n\nThe Tin Man\n\n\n\n\nBert Lahr\n\"Zeke\"\n\n\n\n\n\nThe Cowardly Lion\n\n\n\n\nFrank Morgan\nProfessor Marvel\n\n\n\n\n\nThe Gatekeeper\n\n\n\n\n\nThe Carriage Driver\n\n\n\n\n\nThe Guard\n\n\n\n\n\nThe Wizard of Oz\n\n\n\n\nMargaret Hamilton\nMiss Almira Gulch\n\n\n\n\n\nThe Wicked Witch of the West", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488129726", "createdAt": "2020-09-14T18:15:06Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Export data function\n+A \u201cdate\u201d type is created when a text column is [transformed into dates](transforming#to-date), or when individual cells are set to have the data type \u201cdate.\u201d \n \n- (only current view)\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d You can opt to [show \u201cnull\u201d values](#view) to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-### Regular expressions\n+Converting a cell's data type is not the same operation as transforming its contents. For example, using a column-wide transform such as \u201cTransform\u201d > \u201cCommon transforms \u2026\u201d > \u201cto date\u201d may not convert all values successfully, but going to an individual cell, clicking \u201cedit\u201d and changing the data type can successfully convert text to a date. These operations use different underlying code. \n \n+To transform data from one type to another, see [Transforming data](transforming#transform) for information on using common tranforms, and see [Expressions](expressions) for information on using `toString()`, `toDate()`, and other functions. \n \n-## Sort and View\n+## Row types: rows vs. records\n \n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n-### Sort\n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column, what we call the \"key column.\" Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-### View: Collapsing (and expanding)\n+For example, your key column may be a family name, with multiple family members identified by their first names, associated to that family name. You may have one or more phone numbers listed for each person. The phone numbers are linked to the first names, which are linked to the last name. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MDAxNQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyMjk4Mw==", "bodyText": "I've removed the unique ID for now - maybe the section needs more explication about how you don't actually need a key column of unique IDs (because OR does that work behind the scenes), but of course your data may need to be sorted (or un-sorted) not to confuse the issue. But I think that can wait for a second pass.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488722983", "createdAt": "2020-09-15T14:40:44Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Export data function\n+A \u201cdate\u201d type is created when a text column is [transformed into dates](transforming#to-date), or when individual cells are set to have the data type \u201cdate.\u201d \n \n- (only current view)\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d You can opt to [show \u201cnull\u201d values](#view) to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-### Regular expressions\n+Converting a cell's data type is not the same operation as transforming its contents. For example, using a column-wide transform such as \u201cTransform\u201d > \u201cCommon transforms \u2026\u201d > \u201cto date\u201d may not convert all values successfully, but going to an individual cell, clicking \u201cedit\u201d and changing the data type can successfully convert text to a date. These operations use different underlying code. \n \n+To transform data from one type to another, see [Transforming data](transforming#transform) for information on using common tranforms, and see [Expressions](expressions) for information on using `toString()`, `toDate()`, and other functions. \n \n-## Sort and View\n+## Row types: rows vs. records\n \n+A row is a simple way to organize data: a series of cells, one cell per column. Sometimes there are multiple pieces of information in one cell, such as when a survey respondent can select more than one response. In cases where there is more than one value for a single column in one or more rows, you may wish to use OpenRefine\u2019s records mode: this defines a single record (a survey response, for example) as potentially containing more than one row. From there you can transform cells into multiple rows, each cell containing one value you\u2019d like to work with. \n \n-### Sort\n+Generally, when you import some data, OpenRefine reads that data in row mode. From there you can convert the project into records mode. OpenRefine remembers this action and will present you with records mode each time you open the project from then on. \n \n+OpenRefine understands records based on the content of the first column, what we call the \"key column.\" Splitting a row into a multi-row record will base all association on the first column in your dataset. If you have more than one column to split out into multiple rows, OpenRefine will keep your data associated with its original record: you can imagine this structure as a tree with many branches, all leading back to the same trunk. \n \n-### View: Collapsing (and expanding)\n+For example, your key column may be a family name, with multiple family members identified by their first names, associated to that family name. You may have one or more phone numbers listed for each person. The phone numbers are linked to the first names, which are linked to the last name. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MDAxNQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzUwNzEzOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTozMjoyMVrOHBtybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTozMjoyMVrOHBtybA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MDgxMg==", "bodyText": "I think \"Row vs. Records\" is better as a heading", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r471560812", "createdAt": "2020-08-17T15:32:21Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)\n+*   error\n+*   null\n \n-### Export data function\n+A \u201cdate\u201d type is created when a text column is [transformed into dates](transforming#to-date), or when individual cells are set to have the data type \u201cdate.\u201d \n \n- (only current view)\n+An \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\n \n+A \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d It\u2019s used to differentiate between cells that have values such as \u201c0\u201d or \u201cfalse\u201d - or a cell that looks empty but has, for example, spaces in it. When you use `type(value)`, it will show you that the cell\u2019s value is \u201cnull\u201d and its type is \u201cundefined.\u201d You can opt to [show \u201cnull\u201d values](#view) to differentiate them from empty strings, by going to \u201cAll\u201d > \u201cView\u201d > \u201cShow/Hide \u2018null\u2019 values in cells.\u201d\n \n-### Regular expressions\n+Converting a cell's data type is not the same operation as transforming its contents. For example, using a column-wide transform such as \u201cTransform\u201d > \u201cCommon transforms \u2026\u201d > \u201cto date\u201d may not convert all values successfully, but going to an individual cell, clicking \u201cedit\u201d and changing the data type can successfully convert text to a date. These operations use different underlying code. \n \n+To transform data from one type to another, see [Transforming data](transforming#transform) for information on using common tranforms, and see [Expressions](expressions) for information on using `toString()`, `toDate()`, and other functions. \n \n-## Sort and View\n+## Row types: rows vs. records", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzUxMzU1OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTozMzo1MlrOHBt2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTozMzo1MlrOHBt2WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MTgxNw==", "bodyText": "It doesn't support cell colours or text formatting might be a better way of putting this (i.e. this isn't an import issue, but a more general one about functionality supported by OR)", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r471561817", "createdAt": "2020-08-17T15:33:52Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU0OTI5OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0MjowNFrOHBuMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjowOFrOHS61GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ==", "bodyText": "I think \"Data loaded\" could just be \"Data\" (it doesn't matter if it's loaded or added by editing a cell)\nI'm not sure about whether we can strictly say that Cell will be considered as a String \"by default\". There's no real \"default\" handling here. On import, it will depend on both what the data is being imported from, and what options were set on import. If data is entered by hand \"String\" is the default option but the user is explicitly setting the type when they enter the data - the backend doesn't have a \"default\" for this", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r471567369", "createdAt": "2020-08-17T15:42:04Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NDExMA==", "bodyText": "On import, OpenRefine considers everything a string at the preview stage, right? That's my experience. Are there specific file formats that import differently?\nI know in preview you can explicitly tell it to parse numbers. But we're no longer in \"default\" by then.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r486564110", "createdAt": "2020-09-10T18:50:56Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyMTc5NQ==", "bodyText": "I hope \"at first\" is an acceptable compromise here. I still think it's a default. :)", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488721795", "createdAt": "2020-09-15T14:39:16Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMjQxOA==", "bodyText": "No I don't think that's true. Importers will have rules about what they do, and it's definitely possible to have an importer that defaults to all values being treated as strings but that's not a general rule. If you import from Excel behaviour is different to if you import from CSV. I agree that certain importers and the UI has some default behaviour here, but this isn't OpenRefine wide \"default\" - its specific to those scenarios.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488732418", "createdAt": "2020-09-15T14:52:47Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczOTAwNA==", "bodyText": "I haven't seen any evidence of this behaviour but I'm happy to believe you if you say so.\nWhat about \"Most of the time, every cell will be considered a string, but....\" or something like that? It does seem to be the vast majority of cases.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488739004", "createdAt": "2020-09-15T15:01:03Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3OTI1MA==", "bodyText": "OpenRefine importers preserve the data types for any format that supports them - Excel (XLS & XLSX), OpenOffice, Google Sheets, JSON, XML, probably others...", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488979250", "createdAt": "2020-09-15T21:19:16Z", "author": {"login": "tfmorris"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDI4MA==", "bodyText": "Each piece of information (each cell) in OpenRefine is assigned a data type. Some file formats, when imported, can set data types that are recognized by OpenRefine. Cells without an associated data type on import will be considered a \u201cstring\u201d at first, but you can have OpenRefine convert cell contents into other data types later.\n\n\ud83e\udd37\u200d\u2640\ufe0f", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r489600280", "createdAt": "2020-09-16T17:22:08Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzM2OQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzYwNTE3OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDozOFrOHButeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDozOFrOHButeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NTkzMA==", "bodyText": "I think Data types rather than Cell data types is more accurate", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r471575930", "createdAt": "2020-08-17T15:54:38Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDc1MzA1OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDowNzoyOFrOHCMowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0MDowMlrOHRbKig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2NjI0MQ==", "bodyText": "Data types are complex :( In terms of what a user can directly put in a cell we support:\n\nstring (this is referred to as \"text\" when you do a single cell edit)\nnumber\ndate\nboolean\n\nNulls maybe stored in a cell as a result of data import or a transformation\nErrors maybe stored in a cell as a result of a transformation\nArrays cannot be stored in cells", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472066241", "createdAt": "2020-08-18T10:07:28Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzMjkwNg==", "bodyText": "Okay, we've removed arrays entirely from this section.\nIt now reads:\n\nThe data types supported are:\nstring (one or more text characters)\nnumber (one or more characters of numbers only)\nboolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\ndate (ISO-8601-compliant extended format with time in UTC: YYYY-MM-DDTHH:MM:SSZ)\n\nA \u201cdate\u201d type is created when a text column is transformed into dates, or when individual cells are set to have the data type \u201cdate.\u201d\nOpenRefine recognizes two further data types as a result of its own processes:\nerror\nnull\n\nAn \u201cerror\u201d data type is created when the cell is storing an error generated during a transformation in OpenRefine.\nA \u201cnull\u201d data type is a special value which basically means \u201cthis cell has no value.\u201d...", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r488032906", "createdAt": "2020-09-14T15:40:02Z", "author": {"login": "allanaaa"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2NjI0MQ=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDc3MzEzOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/exploring.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxMjo1MFrOHCM08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxMjo1MFrOHCM08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2OTM2MQ==", "bodyText": "Arrays aren't strictly comma-separated- they are just a list of things (they are shown to the user with comma separators but in terms of storage they are stored as lists rather than text strings so the concept of a separator doesn't apply).\nYou can get arrays of more types than you list here - probably not exhaustive but you can get:\n\nAn array of arrays\nAn array of celltuples\nAn array of wrappedCells\nAn array of WrappedRows\n\nThese are usually as a result of other operations (e.g. a \"cross\" function returns an array of WrappedRow - or more simply Row - objects)", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472069361", "createdAt": "2020-08-18T10:12:50Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/exploring.md", "diffHunk": "@@ -1,102 +1,60 @@\n ---\n-\n id: exploring\n-\n title: Exploring data\n-\n-sidebar_label: Exploring data\n-\n+sidebar_label: Overview\n ---\n \n-\n ## Overview\n \n+OpenRefine is a powerful tool for learning about your dataset, even if you don\u2019t change a single character. In this section we cover different ways for sorting through, filtering, and viewing your data. \n \n-### Cell data types\n-\n-\n-\n-*   Automatic recognition; colours, etc.\n-*   [https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing](https://github.com/OpenRefine/OpenRefine/wiki/Cell-Editing) \n-*   What an error looks like\n-\n-\n-### Null vs empty string\n-\n-\n-\n-*   Viewing null values\n-\n-\n-### Rows vs. records\n-\n-\n-\n-*   Functions that matter to rows/records distinction\n-\n-\n-## Facets\n-\n-\n-### Overview \n-\n-(Types of Facet views and their common controls such as dragging Facets, organizing, sub elements like include/exclude, edit, sort by, change, reset, etc.)\n-\n-\n-### Text facet\n-\n-\n-### Numeric facet\n-\n-\n-### Timeline facet\n-\n-\n-### Scatterplot facet\n-\n-\n-### Custom facets:\n-\n-\n-\n-*   Word facet\n-*   Duplicates facet\n-*   Numeric log facet\n-*   Text-length facet\n-\n-\n-### Facet by star or blank or flag\n-\n-\n-## Filtering \n+Unlike spreadsheets, OpenRefine doesn\u2019t store formulas and display the output of those calculations; it only shows the value inside each cell. It doesn\u2019t import any cell colors or text formatting. \n \n+## Cell data types\n \n-### Overview\n+Data loaded into OpenRefine is assigned a data type. By default every cell will be considered a \u201cstring\u201d, but you can have OpenRefine convert cell contents into other data types later.\n \n-Applying (case sensitivity; applying multiple in succession), inverting, and removing\n+You can see data types in action when you preview a new project: check the box that says \u201cAttempt to parse cell text into numbers\u201d and cells will be converted to the number type based on their contents. You\u2019ll see numbers change from black text to green if they are recognized.\n \n+The data type will determine what you can do with the value. For example, if you want to add two values together, they must both be recognized as the \u201cnumber\u201d data type. \n \n-### Permalink function\n+You can check data types at any time by:\n+*   clicking \u201cedit\u201d on a single cell (where you can also edit the type)\n+*   creating a Custom Text Facet on a column, and inserting `type(value)` into the \u201cExpression\u201d field. This will generate the data type in the preview, and you can facet by data type if you press \u201cOK.\u201d\n \n+The data types supported are:\n+*   string (one or more text characters)\n+*   number (one or more characters of numbers only)\n+*   boolean (values of \u201ctrue\u201d or \u201cfalse\u201d)\n+*   date (ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z)\n+*   array (a set of comma-separated string, number, boolean, or date values)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDc4Njc2OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxNjo0OFrOHCM9UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoxODozOFrOHCNBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MTUwNA==", "bodyText": "We use \"invert\" rather than \"exclude\" in the UI", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472071504", "createdAt": "2020-08-18T10:16:48Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MjQ3Mg==", "bodyText": "you can select more than one facet by clicking \u201cinclude.\u201d\n\nYou are selecting a facet value, not a facet if that makes sense?", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472072472", "createdAt": "2020-08-18T10:18:38Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MTUwNA=="}, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDc5ODY2OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyMDoxOVrOHCNEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyMDoxOVrOHCNEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3MzM1NA==", "bodyText": "I think a typo is a cause of a near-match rather than being the same thing. So suggest:\n\"It does no guessing about near-matches caused by typos or other data inconsistencies\"", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472073354", "createdAt": "2020-08-18T10:20:19Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDk2Nzc5OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToxNDoxMlrOHCOs9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToxNDoxMlrOHCOs9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMDA4Ng==", "bodyText": "I don't think this is correct. Blank, non-numeric and error values don't appear as zero values - they aren't included in the bar chart - they are included/excluded based on checking the relevant boxes", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472100086", "createdAt": "2020-08-18T11:14:12Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDk4NzIzOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMDo0OFrOHCO5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMDo0OFrOHCO5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMzIyMA==", "bodyText": "I'm not sure I'd say \"simple\". It's a custom text facet", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472103220", "createdAt": "2020-08-18T11:20:48Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.\n+\n+## Timeline facet\n+\n+![A screenshot of an example timeline facet.](/img/timelinefacet.png)\n+\n+Much like a numeric facet, a timeline facet will display as a small bar graph with the values sorted: in this case, chronologically. A timeline facet only works on dates formatted as \u201cdate\u201d data types (e.g. by [using the `toDate()` function](expressions#dates) to transform text into dates, or by manually setting the [data type](#cell-data-types) on individual cells) and in the structure of the ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z. \n+\n+## Scatterplot facet\n+\n+A scatterplot facet can be generated on any number-formatted column. You require two or more number columns to generate scatterplots. \n+\n+You have the option to generate linear scatterplots (where the X and Y axes show continuous increases) or logarithmic scatterplots (where the X and Y axes show exponential or scaled increases). You can also rotate the plot by 45 degrees in either direction, and you can choose the size of the dot indicating a datapoint. You can make these choices in both the preview and in the facet display. \n+\n+Going to \u201cFacet\u201d > \u201cScatterplot facet\u201d will create a preview of data plotted from every number-formatted column in your dataset, comparing every column against every other column. Each scatterplot will show in its own square, allowing you to choose which data comparison you would like to analyze further. \n+\n+When you click on your desired square, that two-column comparison will appear in the facets sidebar. From here, you can drag your mouse to draw a rectangle inside the scatterplot, which will narrow down to just the rows matching the points plotted inside that rectangle. This rectangle can be resized by dragging any of the four edges. To draw a new rectangle, simply click and drag your mouse again. To add more scatterplots to the facet sidebar, re-run this process and select a different square. \n+\n+If you have multiple facets applied, plotted points in your scatterplot displays will be greyed out if they are not part of the current matching data subset. If the rectangle you have drawn within a scatterplot display only includes grey dots, you will see no matching rows.\n+\n+If you would like to export a scatterplot, OpenRefine will open a new tab with a generated PNG image that you can save. \n+\n+## Custom text facet\n+\n+You may want to explore your textual data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use text facets to analyze numerical data, such as by analyzing a number as a string, or by creating a test that will return \u201ctrue\u201d and false\u201d as values. \n+\n+If you would like to build your own version of a text facet, you can use the \u201cCustom Text Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom text facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom text facet operates just like a [text facet](#text-facet) by default. \n+\n+For example, you may wish to analyze only the first word in a text field - perhaps the first name in a column of \u201c[First Name] [Last Name]\u201d entries. In this case, you can tell OpenRefine to facet only on the information that comes before the first space:\n+\n+```value.split(\" \")[0]```\n+\n+In this case, `split()` is creating an array of text strings based on every space in the cells - in this case, one space, so two values in the array. Because arrays number their entries starting with 0, we want the first value, so we ask for `[0]`. We can do the same splitting and ask for the last name with \n+\n+```value.split(\" \")[1]``` \n+\n+You may want to create a facet that references several columns. For example, let\u2019s say you have two columns, \"First Name\" and \"Last Name\", and you want out how many people have the same initial letter for both names (e.g., Marilyn Monroe, Steven Segal). To do so, create a custom text facet on either column and enter the expression\n+\n+```cells[\"First Name\"].value[0] == cells[\"Last Name\"].value[0]```\n+\n+That expression will facet your rows into `true` and `false`. \n+\n+You can learn more about text-modification functions on the [Expressions page](expressions). \n+\n+## Custom numeric facet\n+\n+You may want to explore your numerical data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use custom numeric facets to analyze textual data, such as by getting the length of text strings (with `value.length()`), or by analyzing it as though it were formatted as numbers (with `toNumber(value)`). \n+\n+If you would like to build your own version of a numeric facet, you can use the \u201cCustom Numeric Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom Numeric Facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom numeric facet operates just like a [numeric facet](#numeric-facet) by default.\n+\n+For example, you may wish to create a numeric facet that rounds your value to the nearest integer, enter\n+\n+```round(value)```\n+\n+If you have two columns of numbers and for each row you wish to create a numeric facet only on the larger of the two, enter\n+\n+```max(cells[\"Column1\"].value, cells[\u201cColumn2\u201d].value)```\n+\n+If the numeric values in a column are drawn from a power law distribution, then it's better to group them by their logs:\n+\n+```value.log()```\n+\n+If the values are periodic you could take the modulus by the period to understand if there's a pattern:\n+\n+```mod(value, 7)```\n+\n+You can learn more about numeric-modification functions on the [Expressions page](expressions). \n+\n+## Customized facets\n+\n+Customized facets have been added to expand the number of default facets users can apply with a single click. They represent some common and useful functions you shouldn\u2019t have to work out using an [expression](expressions).\n+\n+All facets that display in the \u201cFacet/Filter\u201d sidebar can be edited by clicking on the \u201cchange\u201d button to the right of the column title. This brings up the expressions window that will allow you to modify and preview the expression being used. \n+\n+### Word facet\n+\n+Word facet is a simple version of a text facet: it splits up the content of the cells based on spaces, and outputs each character string as a facet:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDk5MDUzOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMTo1MVrOHCO7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMTo1MVrOHCO7Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMzcxNA==", "bodyText": "Is it worth mentioning somewhere that (unlike a Text facet) a Custom text facet does not support editing facet values to update the data in the cells used to create the facet?", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472103714", "createdAt": "2020-08-18T11:21:51Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.\n+\n+## Timeline facet\n+\n+![A screenshot of an example timeline facet.](/img/timelinefacet.png)\n+\n+Much like a numeric facet, a timeline facet will display as a small bar graph with the values sorted: in this case, chronologically. A timeline facet only works on dates formatted as \u201cdate\u201d data types (e.g. by [using the `toDate()` function](expressions#dates) to transform text into dates, or by manually setting the [data type](#cell-data-types) on individual cells) and in the structure of the ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z. \n+\n+## Scatterplot facet\n+\n+A scatterplot facet can be generated on any number-formatted column. You require two or more number columns to generate scatterplots. \n+\n+You have the option to generate linear scatterplots (where the X and Y axes show continuous increases) or logarithmic scatterplots (where the X and Y axes show exponential or scaled increases). You can also rotate the plot by 45 degrees in either direction, and you can choose the size of the dot indicating a datapoint. You can make these choices in both the preview and in the facet display. \n+\n+Going to \u201cFacet\u201d > \u201cScatterplot facet\u201d will create a preview of data plotted from every number-formatted column in your dataset, comparing every column against every other column. Each scatterplot will show in its own square, allowing you to choose which data comparison you would like to analyze further. \n+\n+When you click on your desired square, that two-column comparison will appear in the facets sidebar. From here, you can drag your mouse to draw a rectangle inside the scatterplot, which will narrow down to just the rows matching the points plotted inside that rectangle. This rectangle can be resized by dragging any of the four edges. To draw a new rectangle, simply click and drag your mouse again. To add more scatterplots to the facet sidebar, re-run this process and select a different square. \n+\n+If you have multiple facets applied, plotted points in your scatterplot displays will be greyed out if they are not part of the current matching data subset. If the rectangle you have drawn within a scatterplot display only includes grey dots, you will see no matching rows.\n+\n+If you would like to export a scatterplot, OpenRefine will open a new tab with a generated PNG image that you can save. \n+\n+## Custom text facet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDk5MzUzOnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMjo1NlrOHCO8_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyMjo1NlrOHCO8_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwNDE5MQ==", "bodyText": "I'd suggest \"To store errors in cells\" rather than \"To output errors\"", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472104191", "createdAt": "2020-08-18T11:22:56Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.\n+\n+## Timeline facet\n+\n+![A screenshot of an example timeline facet.](/img/timelinefacet.png)\n+\n+Much like a numeric facet, a timeline facet will display as a small bar graph with the values sorted: in this case, chronologically. A timeline facet only works on dates formatted as \u201cdate\u201d data types (e.g. by [using the `toDate()` function](expressions#dates) to transform text into dates, or by manually setting the [data type](#cell-data-types) on individual cells) and in the structure of the ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z. \n+\n+## Scatterplot facet\n+\n+A scatterplot facet can be generated on any number-formatted column. You require two or more number columns to generate scatterplots. \n+\n+You have the option to generate linear scatterplots (where the X and Y axes show continuous increases) or logarithmic scatterplots (where the X and Y axes show exponential or scaled increases). You can also rotate the plot by 45 degrees in either direction, and you can choose the size of the dot indicating a datapoint. You can make these choices in both the preview and in the facet display. \n+\n+Going to \u201cFacet\u201d > \u201cScatterplot facet\u201d will create a preview of data plotted from every number-formatted column in your dataset, comparing every column against every other column. Each scatterplot will show in its own square, allowing you to choose which data comparison you would like to analyze further. \n+\n+When you click on your desired square, that two-column comparison will appear in the facets sidebar. From here, you can drag your mouse to draw a rectangle inside the scatterplot, which will narrow down to just the rows matching the points plotted inside that rectangle. This rectangle can be resized by dragging any of the four edges. To draw a new rectangle, simply click and drag your mouse again. To add more scatterplots to the facet sidebar, re-run this process and select a different square. \n+\n+If you have multiple facets applied, plotted points in your scatterplot displays will be greyed out if they are not part of the current matching data subset. If the rectangle you have drawn within a scatterplot display only includes grey dots, you will see no matching rows.\n+\n+If you would like to export a scatterplot, OpenRefine will open a new tab with a generated PNG image that you can save. \n+\n+## Custom text facet\n+\n+You may want to explore your textual data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use text facets to analyze numerical data, such as by analyzing a number as a string, or by creating a test that will return \u201ctrue\u201d and false\u201d as values. \n+\n+If you would like to build your own version of a text facet, you can use the \u201cCustom Text Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom text facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom text facet operates just like a [text facet](#text-facet) by default. \n+\n+For example, you may wish to analyze only the first word in a text field - perhaps the first name in a column of \u201c[First Name] [Last Name]\u201d entries. In this case, you can tell OpenRefine to facet only on the information that comes before the first space:\n+\n+```value.split(\" \")[0]```\n+\n+In this case, `split()` is creating an array of text strings based on every space in the cells - in this case, one space, so two values in the array. Because arrays number their entries starting with 0, we want the first value, so we ask for `[0]`. We can do the same splitting and ask for the last name with \n+\n+```value.split(\" \")[1]``` \n+\n+You may want to create a facet that references several columns. For example, let\u2019s say you have two columns, \"First Name\" and \"Last Name\", and you want out how many people have the same initial letter for both names (e.g., Marilyn Monroe, Steven Segal). To do so, create a custom text facet on either column and enter the expression\n+\n+```cells[\"First Name\"].value[0] == cells[\"Last Name\"].value[0]```\n+\n+That expression will facet your rows into `true` and `false`. \n+\n+You can learn more about text-modification functions on the [Expressions page](expressions). \n+\n+## Custom numeric facet\n+\n+You may want to explore your numerical data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use custom numeric facets to analyze textual data, such as by getting the length of text strings (with `value.length()`), or by analyzing it as though it were formatted as numbers (with `toNumber(value)`). \n+\n+If you would like to build your own version of a numeric facet, you can use the \u201cCustom Numeric Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom Numeric Facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom numeric facet operates just like a [numeric facet](#numeric-facet) by default.\n+\n+For example, you may wish to create a numeric facet that rounds your value to the nearest integer, enter\n+\n+```round(value)```\n+\n+If you have two columns of numbers and for each row you wish to create a numeric facet only on the larger of the two, enter\n+\n+```max(cells[\"Column1\"].value, cells[\u201cColumn2\u201d].value)```\n+\n+If the numeric values in a column are drawn from a power law distribution, then it's better to group them by their logs:\n+\n+```value.log()```\n+\n+If the values are periodic you could take the modulus by the period to understand if there's a pattern:\n+\n+```mod(value, 7)```\n+\n+You can learn more about numeric-modification functions on the [Expressions page](expressions). \n+\n+## Customized facets\n+\n+Customized facets have been added to expand the number of default facets users can apply with a single click. They represent some common and useful functions you shouldn\u2019t have to work out using an [expression](expressions).\n+\n+All facets that display in the \u201cFacet/Filter\u201d sidebar can be edited by clicking on the \u201cchange\u201d button to the right of the column title. This brings up the expressions window that will allow you to modify and preview the expression being used. \n+\n+### Word facet\n+\n+Word facet is a simple version of a text facet: it splits up the content of the cells based on spaces, and outputs each character string as a facet:\n+\n+```value.split(\" \")```\n+\n+This can be useful for exploring the language used in a corpus, looking for common first and last names or titles, or seeing what\u2019s in multi-valued cells you don\u2019t wish to split up. \n+\n+Word facet is case-sensitive and only splits by spaces, not by line breaks or other natural divisions. \n+\n+### Duplicates facet\n+\n+A duplicates facet will return only rows that have non-unique values in the column you\u2019ve selected. It will create a facet of \u201ctrue\u201d and \u201cfalse\u201d values - true being cells that are not unique, and \u201cfalse\u201d being cells that are. The actual expression being used is\n+\n+```facetCount(value, 'value', '[Column]') > 1```\n+\n+Duplicates facets are case-sensitive and you may wish to filter out things like leading and trailing whitespace or other hard-to-see issues. You can modify the facet expression, for example, with:\n+\n+```facetCount(trim(toLowercase(value)), 'trim(toLowercase(value))', 'cityLabel') > 1```\n+\n+### Numeric log facet \n+\n+Logarithmic scales reduce wide-ranging quantities to tiny scopes. A log transformation can be used to make highly skewed distributions less skewed. If your numerical data is unevenly distributed (say, lots of values in one range, and then a long tail extending off into different magnitudes), a numeric log facet can represent that range better than a simple numeric facet. It will break these values down into more navigable segments than the buckets of a numeric facet. This facet can make patterns in your data more visible.\n+\n+OpenRefine uses a base-10 log, the \"common logarithm.\"\n+\n+For example, we can look at [this data about the body weight of various mammals](http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_Brain2BodyWeight):\n+\n+|Species|BodyWeight (kg)|\n+|---|---|\n+| Newborn_Human | 3.2 |\n+| Adult_Human | 73 |\n+| Pithecanthropus_Man | 70 |\n+| Squirrel | 0.8 |\n+| Hamster | 0.15 |\n+| Chimpanzee | 50 |\n+| Rabbit | 1.4 |\n+| Dog_(Beagle) | 10 |\n+| Cat | 4.5 |\n+| Rat | 0.4 |\n+| Sperm_Whale | 35000 |\n+| Turtle | 3 |\n+| Alligator | 270 |\n+\n+Most values will be clustered in the 0-100 range, but 35,000 is many magnitudes above that. A numeric facet will create 36 equal buckets of 1,000 each - containing almost all the cells in the first bucket. A numeric log facet will instead display the data more evenly across the visual range.\n+\n+![A screenshot of a numeric facet first and a numeric log facet second.](/img/numericlogfacet.png)\n+\n+A 1-bounded numeric log facet can be used if you'd like to exclude all the values below 1 (including zero and negative numbers). \n+\n+### Text-length facet\n+\n+The text-length facet returns a numerical value for each cell and plots it on a numeric facet chart. The expression used is\n+\n+```value.length()```\n+\n+This can be useful to, for example, look for values that did not successfully split on an earlier split operation, or to validate that data is a certain expected length (such as whether a date, as YYYY/MM/DD, is eight to ten characters). \n+\n+You can also employ a log of text-length facet that allows you to navigate more easily a wide range of string lengths. This can be useful in the case of web-scraping, where lots of textual data is loaded into single cells and needs to be parsed out. \n+\n+\n+### Unicode character-code facet\n+\n+![A screenshot of the Unicode facet.](/img/unicodefacet.png)\n+\n+The Unicode facet identifies and returns [Unicode decimal values](https://en.wikipedia.org/wiki/List_of_Unicode_characters). It generates a list of the Unicode numerical values of each character used in each text cell, which allows you to narrow down and search for special characters, punctuation, and other data formatting issues.\n+\n+This facet creates a numerical chart, which offers you the ability to narrow down to a range of numbers. For example, lowercase characters are numbers 97-122, uppercase characters are numbers 65-90, and numerical digits are numbers 48-57. \n+\n+### Facet by error\n+\n+An error is a data type created by OpenRefine in the process of transforming data. For example, say you had converted a column to the number data type. If one cell had text characters in it, OpenRefine could either output the original text string unchanged or output an error. If you allow errors to be created, you can facet by them later to search for them and fix them. \n+\n+![A view of the expressions window with an error converting a string to a number.](/img/error.png)\n+\n+To output errors, ensure that you have \u201cstore error\u201d selected for the \u201cOn error\u201d option in the expressions window. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTAwOTA4OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyNzoyOFrOHCPF_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyNzoyOFrOHCPF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwNjQ5NA==", "bodyText": "Is it worth giving a simple text filter example as well as a regular expression version?", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472106494", "createdAt": "2020-08-18T11:27:28Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.\n+\n+## Timeline facet\n+\n+![A screenshot of an example timeline facet.](/img/timelinefacet.png)\n+\n+Much like a numeric facet, a timeline facet will display as a small bar graph with the values sorted: in this case, chronologically. A timeline facet only works on dates formatted as \u201cdate\u201d data types (e.g. by [using the `toDate()` function](expressions#dates) to transform text into dates, or by manually setting the [data type](#cell-data-types) on individual cells) and in the structure of the ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z. \n+\n+## Scatterplot facet\n+\n+A scatterplot facet can be generated on any number-formatted column. You require two or more number columns to generate scatterplots. \n+\n+You have the option to generate linear scatterplots (where the X and Y axes show continuous increases) or logarithmic scatterplots (where the X and Y axes show exponential or scaled increases). You can also rotate the plot by 45 degrees in either direction, and you can choose the size of the dot indicating a datapoint. You can make these choices in both the preview and in the facet display. \n+\n+Going to \u201cFacet\u201d > \u201cScatterplot facet\u201d will create a preview of data plotted from every number-formatted column in your dataset, comparing every column against every other column. Each scatterplot will show in its own square, allowing you to choose which data comparison you would like to analyze further. \n+\n+When you click on your desired square, that two-column comparison will appear in the facets sidebar. From here, you can drag your mouse to draw a rectangle inside the scatterplot, which will narrow down to just the rows matching the points plotted inside that rectangle. This rectangle can be resized by dragging any of the four edges. To draw a new rectangle, simply click and drag your mouse again. To add more scatterplots to the facet sidebar, re-run this process and select a different square. \n+\n+If you have multiple facets applied, plotted points in your scatterplot displays will be greyed out if they are not part of the current matching data subset. If the rectangle you have drawn within a scatterplot display only includes grey dots, you will see no matching rows.\n+\n+If you would like to export a scatterplot, OpenRefine will open a new tab with a generated PNG image that you can save. \n+\n+## Custom text facet\n+\n+You may want to explore your textual data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use text facets to analyze numerical data, such as by analyzing a number as a string, or by creating a test that will return \u201ctrue\u201d and false\u201d as values. \n+\n+If you would like to build your own version of a text facet, you can use the \u201cCustom Text Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom text facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom text facet operates just like a [text facet](#text-facet) by default. \n+\n+For example, you may wish to analyze only the first word in a text field - perhaps the first name in a column of \u201c[First Name] [Last Name]\u201d entries. In this case, you can tell OpenRefine to facet only on the information that comes before the first space:\n+\n+```value.split(\" \")[0]```\n+\n+In this case, `split()` is creating an array of text strings based on every space in the cells - in this case, one space, so two values in the array. Because arrays number their entries starting with 0, we want the first value, so we ask for `[0]`. We can do the same splitting and ask for the last name with \n+\n+```value.split(\" \")[1]``` \n+\n+You may want to create a facet that references several columns. For example, let\u2019s say you have two columns, \"First Name\" and \"Last Name\", and you want out how many people have the same initial letter for both names (e.g., Marilyn Monroe, Steven Segal). To do so, create a custom text facet on either column and enter the expression\n+\n+```cells[\"First Name\"].value[0] == cells[\"Last Name\"].value[0]```\n+\n+That expression will facet your rows into `true` and `false`. \n+\n+You can learn more about text-modification functions on the [Expressions page](expressions). \n+\n+## Custom numeric facet\n+\n+You may want to explore your numerical data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use custom numeric facets to analyze textual data, such as by getting the length of text strings (with `value.length()`), or by analyzing it as though it were formatted as numbers (with `toNumber(value)`). \n+\n+If you would like to build your own version of a numeric facet, you can use the \u201cCustom Numeric Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom Numeric Facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom numeric facet operates just like a [numeric facet](#numeric-facet) by default.\n+\n+For example, you may wish to create a numeric facet that rounds your value to the nearest integer, enter\n+\n+```round(value)```\n+\n+If you have two columns of numbers and for each row you wish to create a numeric facet only on the larger of the two, enter\n+\n+```max(cells[\"Column1\"].value, cells[\u201cColumn2\u201d].value)```\n+\n+If the numeric values in a column are drawn from a power law distribution, then it's better to group them by their logs:\n+\n+```value.log()```\n+\n+If the values are periodic you could take the modulus by the period to understand if there's a pattern:\n+\n+```mod(value, 7)```\n+\n+You can learn more about numeric-modification functions on the [Expressions page](expressions). \n+\n+## Customized facets\n+\n+Customized facets have been added to expand the number of default facets users can apply with a single click. They represent some common and useful functions you shouldn\u2019t have to work out using an [expression](expressions).\n+\n+All facets that display in the \u201cFacet/Filter\u201d sidebar can be edited by clicking on the \u201cchange\u201d button to the right of the column title. This brings up the expressions window that will allow you to modify and preview the expression being used. \n+\n+### Word facet\n+\n+Word facet is a simple version of a text facet: it splits up the content of the cells based on spaces, and outputs each character string as a facet:\n+\n+```value.split(\" \")```\n+\n+This can be useful for exploring the language used in a corpus, looking for common first and last names or titles, or seeing what\u2019s in multi-valued cells you don\u2019t wish to split up. \n+\n+Word facet is case-sensitive and only splits by spaces, not by line breaks or other natural divisions. \n+\n+### Duplicates facet\n+\n+A duplicates facet will return only rows that have non-unique values in the column you\u2019ve selected. It will create a facet of \u201ctrue\u201d and \u201cfalse\u201d values - true being cells that are not unique, and \u201cfalse\u201d being cells that are. The actual expression being used is\n+\n+```facetCount(value, 'value', '[Column]') > 1```\n+\n+Duplicates facets are case-sensitive and you may wish to filter out things like leading and trailing whitespace or other hard-to-see issues. You can modify the facet expression, for example, with:\n+\n+```facetCount(trim(toLowercase(value)), 'trim(toLowercase(value))', 'cityLabel') > 1```\n+\n+### Numeric log facet \n+\n+Logarithmic scales reduce wide-ranging quantities to tiny scopes. A log transformation can be used to make highly skewed distributions less skewed. If your numerical data is unevenly distributed (say, lots of values in one range, and then a long tail extending off into different magnitudes), a numeric log facet can represent that range better than a simple numeric facet. It will break these values down into more navigable segments than the buckets of a numeric facet. This facet can make patterns in your data more visible.\n+\n+OpenRefine uses a base-10 log, the \"common logarithm.\"\n+\n+For example, we can look at [this data about the body weight of various mammals](http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_Brain2BodyWeight):\n+\n+|Species|BodyWeight (kg)|\n+|---|---|\n+| Newborn_Human | 3.2 |\n+| Adult_Human | 73 |\n+| Pithecanthropus_Man | 70 |\n+| Squirrel | 0.8 |\n+| Hamster | 0.15 |\n+| Chimpanzee | 50 |\n+| Rabbit | 1.4 |\n+| Dog_(Beagle) | 10 |\n+| Cat | 4.5 |\n+| Rat | 0.4 |\n+| Sperm_Whale | 35000 |\n+| Turtle | 3 |\n+| Alligator | 270 |\n+\n+Most values will be clustered in the 0-100 range, but 35,000 is many magnitudes above that. A numeric facet will create 36 equal buckets of 1,000 each - containing almost all the cells in the first bucket. A numeric log facet will instead display the data more evenly across the visual range.\n+\n+![A screenshot of a numeric facet first and a numeric log facet second.](/img/numericlogfacet.png)\n+\n+A 1-bounded numeric log facet can be used if you'd like to exclude all the values below 1 (including zero and negative numbers). \n+\n+### Text-length facet\n+\n+The text-length facet returns a numerical value for each cell and plots it on a numeric facet chart. The expression used is\n+\n+```value.length()```\n+\n+This can be useful to, for example, look for values that did not successfully split on an earlier split operation, or to validate that data is a certain expected length (such as whether a date, as YYYY/MM/DD, is eight to ten characters). \n+\n+You can also employ a log of text-length facet that allows you to navigate more easily a wide range of string lengths. This can be useful in the case of web-scraping, where lots of textual data is loaded into single cells and needs to be parsed out. \n+\n+\n+### Unicode character-code facet\n+\n+![A screenshot of the Unicode facet.](/img/unicodefacet.png)\n+\n+The Unicode facet identifies and returns [Unicode decimal values](https://en.wikipedia.org/wiki/List_of_Unicode_characters). It generates a list of the Unicode numerical values of each character used in each text cell, which allows you to narrow down and search for special characters, punctuation, and other data formatting issues.\n+\n+This facet creates a numerical chart, which offers you the ability to narrow down to a range of numbers. For example, lowercase characters are numbers 97-122, uppercase characters are numbers 65-90, and numerical digits are numbers 48-57. \n+\n+### Facet by error\n+\n+An error is a data type created by OpenRefine in the process of transforming data. For example, say you had converted a column to the number data type. If one cell had text characters in it, OpenRefine could either output the original text string unchanged or output an error. If you allow errors to be created, you can facet by them later to search for them and fix them. \n+\n+![A view of the expressions window with an error converting a string to a number.](/img/error.png)\n+\n+To output errors, ensure that you have \u201cstore error\u201d selected for the \u201cOn error\u201d option in the expressions window. \n+\n+### Facet by null, empty, or blank\n+\n+Any column can be faceted for [null and/or empty cells](#cell-data-types). These can help you find cells where you want to manually enter content. \u201cBlank\u201d means both null values and empty values. All three facets will generate \u201ctrue\u201d and \u201cfalse\u201d facets, \u201ctrue\u201d being blank. \n+\n+An empty cell is a cell that is set to contain a string, but doesn\u2019t have any characters in it (a zero-length string). This can be a leftover from an operation that removed characters, or from manually editing a cell and deleting its contents.\n+\n+\n+### Facet by star or flag\n+\n+Stars and flags offer you the opportunity to mark specific rows for yourself for later focus. Stars and flags persist through closing and opening your project, and thus can provide a different function than using a permalink to persist your facets. Stars and flags can be used in any way you want, although they are designed to help you flag errors and star rows of particular importance. \n+\n+You can manually star or flag rows simply by clicking on the icons to the left of each row. You can also apply stars or flags to all matching rows by using the \u201cAll\u201d dropdown menu and selecting \u201cEdit rows\u201d > \u201cStar rows\u201d or \u201cFlag rows.\u201d These operations will modify all matching rows in your current subset. You can unstar or unflag them as well. \n+\n+You may wish to create a custom subset of your data through a series of separate faceting activities (rather than successively narrowing down with multiple facets applied). For example, you may wish to: \n+*   apply a facet\n+*   star all the matching rows\n+*   remove that facet \n+*   apply another, unrelated facet\n+*   star all the new matching rows (which will not modify already-starred rows)\n+*   remove that facet\n+*   and then work with all of the cumulative starred rows. \n+\n+You can use the dropdown menu on the \u201cAll\u201d column and selecting \u201cFacet by star\u201d or \u201cFacet by flag.\u201d This will create \u201ctrue\u201d and \u201cfalse\u201d facets in the facet sidebar.\n+\n+You can also create a text facet on any column with the expression ```row.starred``` or ```row.flagged```.\n+\n+## Text filter\n+\n+Filters allow you to narrow down your data based on whether a given column includes a text string. \n+\n+When you choose \u201cText filter\u201d a box appears in the \u201cFacet/Filter\u201d sidebar that allows you to enter in text. Matching rows will narrow dynamically with every character you enter. You can set the search to be case-sensitive or not, and you can use this box to enter in a regular expression. This field supports [Java's regular expression language](http://download.oracle.com/javase/tutorial/essential/regex/).\n+\n+For example, you can employ a regular expression to view all properly-formatted emails:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTAxNzM1OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/facets.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyOTo0MlrOHCPKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMToyOTo0MlrOHCPKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwNzcwOQ==", "bodyText": "I'm not sure \"Logarithmic scales reduce wide-ranging quantities to tiny scopes\" is very clear. What are \"tiny scopes\"?\nI think the description from wikipedia is better:\n\"A logarithmic scale (or log scale) is a way of displaying numerical data over a very wide range of values in a compact way\"", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472107709", "createdAt": "2020-08-18T11:29:42Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/facets.md", "diffHunk": "@@ -0,0 +1,284 @@\n+---\n+id: facets\n+title: Exploring facets\n+sidebar_label: Facets\n+---\n+\n+## Overview\n+\n+Facets are one of OpenRefine\u2019s strongest features - that\u2019s where the diamond logo comes from! Faceting allows you to look for patterns and trends. Facets are essentially aspects or angles of data variance in a given column. For example, if you had survey data where respondents indicated one of five responses from \u201cStrongly agree\u201d to \u201cStrongly disagree,\u201d those five responses make up a text facet, showing how many people selected each option.  \n+\n+Faceted browsing gives you a big-picture look at your data (do they agree or disagree?) and also allows you to filter down to a specific subset to explore it more (what do people who disagree say in other responses?). \n+\n+Typically, you create a facet on a particular column. That facet selection appears on the left, in the Facet/Filter tab, and you can click on a displayed facet to view all the records that match. You can also \u201cexclude\u201d the facet, to view every record that does _not_ match, and you can select more than one facet by clicking \u201cinclude.\u201d\n+\n+\n+### An example\n+\n+You can learn about facets and filtering with the following example. \n+\n+We collected a list of the [10 most populous cities from Wikidata](https://w.wiki/3Em), using an example query of theirs. We removed the GPS coordinates and added the country. \n+\n+| cityLabel | population | countryLabel |\n+|-|-|-|\n+| Shanghai | 23390000 | People's Republic of China |\n+| Beijing | 21710000 | People's Republic of China |\n+| Lagos | 21324000 | Nigeria |\n+| Dhaka | 16800000 | Bangladesh |\n+| Mumbai | 15414288 | India |\n+| Istanbul | 14657434 | Turkey |\n+| Tokyo | 13942856 | Japan |\n+| Tianjin | 13245000 | People's Republic of China |\n+| Guangzhou | 13080500 | People's Republic of China |\n+| S\u00e3o Paulo | 12106920 | Brazil |\n+\n+If we want to see which countries have the most populous cities, we can create a \u201ctext facet\u201d on the \u201ccountryLabel\u201d column and OpenRefine will generate a list of all the different strings used in these cells. \n+\n+We will see in the sidebar that the countries identified are displayed, along with the number of matches (the \u201ccount\u201d). We can sort this list alphabetically or by the count. If you sort by count, you\u2019ll learn which countries hold the most populous cities. \n+\n+|Facet|Count|\n+|---|---|\n+|People's Republic of China|4|\n+|Bangladesh|1|\n+|Brazil|1|\n+|India|1|\n+|Japan|1|\n+|Nigeria|1|\n+|Turkey|1|\n+\n+If we want to learn more about a particular country, we can click on its appearance in the facet sidebar. This narrows our dataset down temporarily to only rows matching that facet.\n+\n+You\u2019ll see the \u201c10 rows\u201d notification change to \u201c4 matching rows (10 total)\u201d if you click on \u201cPeople\u2019s Republic of China\u201d. In the data grid, you\u2019ll see the same number of rows, but only the ones matching your current filter. Each row will maintain its original numbering, though - in this case, rows #1, 2, and 8.\n+\n+If you want to go back to the original dataset, click \u201creset\u201d or \u201cexclude.\u201d If you want to view the most populous cities in both China and India, click \u201cinclude\u201d next to each facet. Now you\u2019ll see 5 rows - #1, 2, 5, 8, 9.\n+\n+We can also explore our data using the population information. In this case, because population is a number, we can create a numeric facet. This will give us the ability to explore by range rather than by exact matching values. \n+\n+With the numeric facet, we are given a scale from the smallest to the largest value in the column. We can drag the range minimum and maximum to narrow the results. In this case, if we narrow down to only cities with more than 20 million in population, we get 3 matching rows out of the original 10. \n+\n+When you look at the facet display of countries, you should see a smaller list with a reduced count: OpenRefine is now displaying the facets of the 3 matching rows, not the total dataset of 10 rows. \n+\n+We can combine these facets - say, by narrowing to only the Chinese cities with populations greater than 20 million - simply by clicking in both. You should see 2 matching rows for both these criteria. \n+\n+### Things to know about facets\n+\n+When you have facets applied, you will see \u201cmatching rows\u201d in the [project grid header](running#project-grid-header). If you press \u201cExport\u201d and copy your data out of OpenRefine while facets are active, you will only export the matching rows, not all the rows in your project. \n+\n+OpenRefine has several default facets, which you\u2019ll learn about below. The most powerful facets are the ones designed by you - custom facets, written using [expressions](expressions) to transform the data behind the scenes and help you narrow down to precisely what you\u2019re looking for. \n+\n+Facets are not saved in the project along with the data. But you can save a *permalink* to the current state of the application. Find the \"permalink\" next to the project\u2019s name.\n+\n+You can modify any facet expression by clicking the \u201cchange\u201d button to the right of the column name in the facet sidebar.\n+\n+Facet boxes that appear in the sidebar can be resized and rearranged. You can drag and drop the title bar of each box to reorder them, and drag on the bottom bar of text facet boxes. \n+\n+## Text facet\n+\n+A text facet can be generated on any column with the \u201ctext\u201d data type. Select the column dropdown and go to \u201cFacet\u201d > \u201cText facet\u201d. The created facet will be sorted alphabetically, and can be sorted by count. \n+\n+A text facet is very simple: it takes the total contents of the cells of the column in question and matches them up. It does no guessing about typos or near-matches. \n+\n+You can edit any entry that appears in the facet display, by hovering over the facet and clicking the \u201cedit\u201d button that appears. This will mass-edit every matching cell in your data. This is a great way to fix typos, whitespace, and other issues that may be affecting the way facets appear. You can also automate the cleanup of facets by using [clustering](transforming#cluster-and-edit), with the \u201cCluster\u201d button displayed within the facet window. \n+\n+Each text facet shows up to 2,000 choices by default. You can [increase this limit on the Preferences screen](running#preferences) if you need to, which will increase the processing work required by your browser. If your applied facet has more choices than the current limit, you'll be offered the option to increase the limit, which will edit that preference for you. \n+\n+The choices and counts displayed in each facet can be copied as tab-separated values. To do so, click on the \"X choices\" link near the top left corner of the facet.\n+\n+## Numeric facet\n+\n+![A screenshot of an example numeric facet.](/img/numericfacet.png)\n+\n+Whereas a text facet groups unique text values into groups, a numeric facet sorts numbers by their range - smallest to biggest. This displays visually and allows you to set a custom facet within that range. You can drag the minimum and maximum range markers to set a range. OpenRefine snaps to some basic equal-sized divisions - 19 in the example set above. \n+\n+You will be offered the option to include blank, non-numeric, and error values in your numeric visualization; these will appear in the visual range as \u201c0\u201d values.\n+\n+## Timeline facet\n+\n+![A screenshot of an example timeline facet.](/img/timelinefacet.png)\n+\n+Much like a numeric facet, a timeline facet will display as a small bar graph with the values sorted: in this case, chronologically. A timeline facet only works on dates formatted as \u201cdate\u201d data types (e.g. by [using the `toDate()` function](expressions#dates) to transform text into dates, or by manually setting the [data type](#cell-data-types) on individual cells) and in the structure of the ISO-8601-compliant extended format with time in UTC: **YYYY**-**MM**-**DD**T**HH**:**MM**:**SS**Z. \n+\n+## Scatterplot facet\n+\n+A scatterplot facet can be generated on any number-formatted column. You require two or more number columns to generate scatterplots. \n+\n+You have the option to generate linear scatterplots (where the X and Y axes show continuous increases) or logarithmic scatterplots (where the X and Y axes show exponential or scaled increases). You can also rotate the plot by 45 degrees in either direction, and you can choose the size of the dot indicating a datapoint. You can make these choices in both the preview and in the facet display. \n+\n+Going to \u201cFacet\u201d > \u201cScatterplot facet\u201d will create a preview of data plotted from every number-formatted column in your dataset, comparing every column against every other column. Each scatterplot will show in its own square, allowing you to choose which data comparison you would like to analyze further. \n+\n+When you click on your desired square, that two-column comparison will appear in the facets sidebar. From here, you can drag your mouse to draw a rectangle inside the scatterplot, which will narrow down to just the rows matching the points plotted inside that rectangle. This rectangle can be resized by dragging any of the four edges. To draw a new rectangle, simply click and drag your mouse again. To add more scatterplots to the facet sidebar, re-run this process and select a different square. \n+\n+If you have multiple facets applied, plotted points in your scatterplot displays will be greyed out if they are not part of the current matching data subset. If the rectangle you have drawn within a scatterplot display only includes grey dots, you will see no matching rows.\n+\n+If you would like to export a scatterplot, OpenRefine will open a new tab with a generated PNG image that you can save. \n+\n+## Custom text facet\n+\n+You may want to explore your textual data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use text facets to analyze numerical data, such as by analyzing a number as a string, or by creating a test that will return \u201ctrue\u201d and false\u201d as values. \n+\n+If you would like to build your own version of a text facet, you can use the \u201cCustom Text Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom text facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom text facet operates just like a [text facet](#text-facet) by default. \n+\n+For example, you may wish to analyze only the first word in a text field - perhaps the first name in a column of \u201c[First Name] [Last Name]\u201d entries. In this case, you can tell OpenRefine to facet only on the information that comes before the first space:\n+\n+```value.split(\" \")[0]```\n+\n+In this case, `split()` is creating an array of text strings based on every space in the cells - in this case, one space, so two values in the array. Because arrays number their entries starting with 0, we want the first value, so we ask for `[0]`. We can do the same splitting and ask for the last name with \n+\n+```value.split(\" \")[1]``` \n+\n+You may want to create a facet that references several columns. For example, let\u2019s say you have two columns, \"First Name\" and \"Last Name\", and you want out how many people have the same initial letter for both names (e.g., Marilyn Monroe, Steven Segal). To do so, create a custom text facet on either column and enter the expression\n+\n+```cells[\"First Name\"].value[0] == cells[\"Last Name\"].value[0]```\n+\n+That expression will facet your rows into `true` and `false`. \n+\n+You can learn more about text-modification functions on the [Expressions page](expressions). \n+\n+## Custom numeric facet\n+\n+You may want to explore your numerical data in a way that doesn\u2019t involve modifying it but does require being more selective about what gets considered. You can also use custom numeric facets to analyze textual data, such as by getting the length of text strings (with `value.length()`), or by analyzing it as though it were formatted as numbers (with `toNumber(value)`). \n+\n+If you would like to build your own version of a numeric facet, you can use the \u201cCustom Numeric Facet\u201d option. Clicking on \u201cFacets\u201d > \u201cCustom Numeric Facet\u2026\u201d will bring up an [expressions](expressions) window where you can enter in a GREL, Python or Jython, or Clojure expression to modify how the facet works. A custom numeric facet operates just like a [numeric facet](#numeric-facet) by default.\n+\n+For example, you may wish to create a numeric facet that rounds your value to the nearest integer, enter\n+\n+```round(value)```\n+\n+If you have two columns of numbers and for each row you wish to create a numeric facet only on the larger of the two, enter\n+\n+```max(cells[\"Column1\"].value, cells[\u201cColumn2\u201d].value)```\n+\n+If the numeric values in a column are drawn from a power law distribution, then it's better to group them by their logs:\n+\n+```value.log()```\n+\n+If the values are periodic you could take the modulus by the period to understand if there's a pattern:\n+\n+```mod(value, 7)```\n+\n+You can learn more about numeric-modification functions on the [Expressions page](expressions). \n+\n+## Customized facets\n+\n+Customized facets have been added to expand the number of default facets users can apply with a single click. They represent some common and useful functions you shouldn\u2019t have to work out using an [expression](expressions).\n+\n+All facets that display in the \u201cFacet/Filter\u201d sidebar can be edited by clicking on the \u201cchange\u201d button to the right of the column title. This brings up the expressions window that will allow you to modify and preview the expression being used. \n+\n+### Word facet\n+\n+Word facet is a simple version of a text facet: it splits up the content of the cells based on spaces, and outputs each character string as a facet:\n+\n+```value.split(\" \")```\n+\n+This can be useful for exploring the language used in a corpus, looking for common first and last names or titles, or seeing what\u2019s in multi-valued cells you don\u2019t wish to split up. \n+\n+Word facet is case-sensitive and only splits by spaces, not by line breaks or other natural divisions. \n+\n+### Duplicates facet\n+\n+A duplicates facet will return only rows that have non-unique values in the column you\u2019ve selected. It will create a facet of \u201ctrue\u201d and \u201cfalse\u201d values - true being cells that are not unique, and \u201cfalse\u201d being cells that are. The actual expression being used is\n+\n+```facetCount(value, 'value', '[Column]') > 1```\n+\n+Duplicates facets are case-sensitive and you may wish to filter out things like leading and trailing whitespace or other hard-to-see issues. You can modify the facet expression, for example, with:\n+\n+```facetCount(trim(toLowercase(value)), 'trim(toLowercase(value))', 'cityLabel') > 1```\n+\n+### Numeric log facet \n+\n+Logarithmic scales reduce wide-ranging quantities to tiny scopes. A log transformation can be used to make highly skewed distributions less skewed. If your numerical data is unevenly distributed (say, lots of values in one range, and then a long tail extending off into different magnitudes), a numeric log facet can represent that range better than a simple numeric facet. It will break these values down into more navigable segments than the buckets of a numeric facet. This facet can make patterns in your data more visible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTA0MTU5OnYy", "diffSide": "RIGHT", "path": "docs/docs/manual/sortview.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNjo0NVrOHCPY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMTozNjo0NVrOHCPY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjExMTM0Nw==", "bodyText": "I think an explanation of in what sense sorts are usually not \"permanent\" (i.e. the original row/record order is preserved which can be seen by the numbers in the All column) and what making it \"permanent\" means (rows/records are renumbered sequentially based on the current sort and the \"sort\" disappears\nAlso think we need an explanation of how multiple sorts apply - i.e. if you apply multiple sorts at once, they are ordered and don't override each other (sort by author then title preserves the author orders and sorts titles within a single author).\nThis links to making sorts \"permanent\" as to get a sort of books by author then by title within author you'd want to:\nApply an author sort\nApply a title sort\nMake the sort permanent", "url": "https://github.com/OpenRefine/OpenRefine/pull/3035#discussion_r472111347", "createdAt": "2020-08-18T11:36:45Z", "author": {"login": "ostephens"}, "path": "docs/docs/manual/sortview.md", "diffHunk": "@@ -0,0 +1,29 @@\n+---\n+id: sortview\n+title: Sort and view\n+sidebar_label: Sort and view\n+---\n+\n+## Sort\n+\n+You can temporarily sort your rows by one column. You can sort:\n+*   text alphabetically or reverse\n+*   numbers by largest or smallest\n+*   dates by earliest or latest\n+*   boolean values by false, then true, or by **core-views/true-false**\n+\n+You can also choose where to place errors and blank cells in the sorting. Text can be case-sensitive or not: cells that start with lowercase characters will appear ahead of uppercase.\n+\n+![A screenshot of the Sort window.](/img/sort.png)\n+\n+After you apply sorting, you can make it permanent, remove it, reverse it, or apply a different **sorting**. You\u2019ll find \u201cSort\u201d in the project grid header to the right of the rows-display setting, which will show all current sorting settings. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed84b3250bb6d900528aa7b9c181bcce66914dc"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}