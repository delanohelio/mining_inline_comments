{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjk0MDI3", "number": 2864, "title": "Implemented Difference-within-range Scrutinizer tests using mocks", "bodyText": "Updated all test cases and added DifferenceWithinRangeConstraint class.", "createdAt": "2020-07-02T19:05:16Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864", "merged": true, "mergeCommit": {"oid": "9edb1e514da4984e059a281421a405fce68bdc2a"}, "closed": true, "closedAt": "2020-07-03T12:13:32Z", "author": {"login": "darecoder"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxD9dagFqTQ0MTk2NDcyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxSYeqAFqTQ0MjM3MTYyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTY0NzIz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#pullrequestreview-441964723", "createdAt": "2020-07-02T19:25:12Z", "commit": {"oid": "cd1128e92e3a25f6b351eeffb3d2edf3a00e123c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyNToxMlrOGsac3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOToyNToxMlrOGsac3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyMzkwMQ==", "bodyText": "The seven lines above could be simplified by introducing a function that takes a List<Snak> and returns a List<SnakGroup> by grouping the snaks with identical properties.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449223901", "createdAt": "2020-07-02T19:25:12Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,39 +45,67 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        List<Snak> snakList3 = Collections.singletonList(snak3);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        SnakGroup snakGroup3 = Datamodel.makeSnakGroup(snakList3);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2, snakGroup3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        List<Snak> snakList3 = Collections.singletonList(snak3);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        SnakGroup snakGroup3 = Datamodel.makeSnakGroup(snakList3);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2, snakGroup3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1128e92e3a25f6b351eeffb3d2edf3a00e123c"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTY0NzYw", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#pullrequestreview-442164760", "createdAt": "2020-07-03T06:04:08Z", "commit": {"oid": "0fade77b53fe54ad3c45a7b9400a31610e5524bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjowNDowOFrOGskrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjowNDowOFrOGskrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MTUwNA==", "bodyText": "This could be pulled up in the ScrutinizerTest base class so that other tests can rely on it as well.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449391504", "createdAt": "2020-07-03T06:04:08Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,40 +47,78 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertNoWarningRaised();\n     }\n+\n+    private List<SnakGroup> makeSnakGroupList(Snak... snaks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fade77b53fe54ad3c45a7b9400a31610e5524bb"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjEyNTAw", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#pullrequestreview-442212500", "createdAt": "2020-07-03T07:45:33Z", "commit": {"oid": "ea41039a4891e9cb7f1e272ef9858bd26bff710a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo0NTozM1rOGsnBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzo0NTozM1rOGsnBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQyOTgxMA==", "bodyText": "Same comment as before: it would be good to try to use meaningful variable names: snakGroupList could be constraintQualifiers, statementList could be constraintDefinitions, and so on :)", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#discussion_r449429810", "createdAt": "2020-07-03T07:45:33Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinScrutinizerTest.java", "diffHunk": "@@ -19,39 +44,55 @@ public EditScrutinizer getScrutinizer() {\n     @Test\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(1800, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(upperBoundPid, \"Q21510854\")).thenReturn(statementList);\n+        when(fetcher.findValues(snakGroupList, \"P2306\")).thenReturn(Collections.singletonList(lowerBoundPid));\n+        when(fetcher.findValues(snakGroupList, \"P2313\")).thenReturn(Collections.singletonList(minValue));\n+        when(fetcher.findValues(snakGroupList, \"P2312\")).thenReturn(Collections.singletonList(maxValue));\n+        setFetcher(fetcher);\n+\n         scrutinize(updateA);\n         assertWarningsRaised(DifferenceWithinRangeScrutinizer.type);\n     }\n \n     @Test\n     public void testNoIssue() {\n         ItemIdValue idA = TestingData.existingId;\n-        PropertyIdValue lowerBoundPid = MockConstraintFetcher.lowerBoundPid;\n-        PropertyIdValue upperBoundPid = MockConstraintFetcher.differenceWithinRangePid;\n-\n         TimeValue lowerYear = new TimeValueImpl(2000, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n         TimeValue upperYear = new TimeValueImpl(2020, (byte)10, (byte)15, (byte)0, (byte)0, (byte)0, (byte)11, 0, 0, 0, TimeValue.CM_GREGORIAN_PRO);\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(lowerBoundPid, lowerYear);\n         ValueSnak value2 = Datamodel.makeValueSnak(upperBoundPid, upperYear);\n-\n         Statement statement1 = new StatementImpl(\"P569\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P570\", value2,idA);\n-\n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n+\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, lowerBoundPid);\n+        Snak snak2 = Datamodel.makeValueSnak(minimumValuePID, minValue);\n+        Snak snak3 = Datamodel.makeValueSnak(maximumValuePID, maxValue);\n+        List<SnakGroup> snakGroupList = makeSnakGroupList(snak1, snak2, snak3);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea41039a4891e9cb7f1e272ef9858bd26bff710a"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd00acec5bc04d54deab367c82ac411a9d88671c", "author": {"user": {"login": "darecoder", "name": "Ekta Mishra"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fd00acec5bc04d54deab367c82ac411a9d88671c", "committedDate": "2020-07-03T11:08:54Z", "message": "Implemented Difference-within-range Scrutinizer tests using mocks\n\nUpdated all test cases and added DifferenceWithinRangeConstraint class."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzcxNjI4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2864#pullrequestreview-442371628", "createdAt": "2020-07-03T12:13:24Z", "commit": {"oid": "fd00acec5bc04d54deab367c82ac411a9d88671c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3137, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}