{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDU0MDQ2", "number": 2634, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMDozNFrOD_JmpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDowMDowMlrOEBLu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0MjI5OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/module/langs/translation-en.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMDozNFrOGZq6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMzoxOToyNVrOGZsaaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDc0Nw==", "bodyText": "These messages are not very natural. As a user I would expect something like this:\n\"Inconsistent date of birth (P1234) and date of death (P3456)\"\n\"The difference between date of birth (P1234) and date of death (P2345) is expected to be within the range [0 year, 150 year], but this fails on items such as Jane Doe (Q18934) where the difference is -18 year.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570747", "createdAt": "2020-05-23T19:10:34Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -120,6 +120,8 @@\n     \"warnings-messages/disallowed-qualifiers/body\": \"Statements using {statement_property_entity} such as the one on {example_item_entity} should not have a {disallowed_property_entity} qualifier as they are incompatible.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/title\": \"{property_entity} added more than once on the same item.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/body\": \"This property is expected to be used at most once on each item but has been added multiple times on the same item, for instance on {example_entity}.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/title\": \"{property_entity} is not having a difference within the range.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/body\": \"{property_entity} is not having the specified difference w.r.t the lower value property within the range.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTI0MQ==", "bodyText": "Yes, I also felt the same, that I should change the messages. For the time being, I was more concerned about the implementation. I'll surely update these messages, it's must.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429595241", "createdAt": "2020-05-24T03:19:25Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -120,6 +120,8 @@\n     \"warnings-messages/disallowed-qualifiers/body\": \"Statements using {statement_property_entity} such as the one on {example_item_entity} should not have a {disallowed_property_entity} qualifier as they are incompatible.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/title\": \"{property_entity} added more than once on the same item.\",\n     \"warnings-messages/single-valued-property-added-more-than-once/body\": \"This property is expected to be used at most once on each item but has been added multiple times on the same item, for instance on {example_entity}.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/title\": \"{property_entity} is not having a difference within the range.\",\n+    \"warnings-messages/difference-of-the-properties-is-not-within-the-specified-range/body\": \"{property_entity} is not having the specified difference w.r.t the lower value property within the range.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDc0Nw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0Mjc5OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMTozNVrOGZq7Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMzoxOTo0OVrOGZsahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDgyMg==", "bodyText": "It would be good to mention that this is used by the difference between range constraint (otherwise one might think this is for another constraint).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570822", "createdAt": "2020-05-23T19:11:35Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,35 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the minimum difference value of the range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTI2OQ==", "bodyText": "Sure.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429595269", "createdAt": "2020-05-24T03:19:49Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,35 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the minimum difference value of the range", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDgyMg=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0Mjg2OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMTo0M1rOGZq7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxMTo0M1rOGZq7Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDgzMA==", "bodyText": "Same here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429570830", "createdAt": "2020-05-23T19:11:43Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -134,4 +135,35 @@\n      * Can this property be used on items?\n      */\n     boolean usableOnItems(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the minimum difference value of the range\n+     *\n+     * @param pid\n+     * @return minimum value\n+     */\n+    QuantityValue getMinimumValue(PropertyIdValue pid);\n+\n+    /**\n+     * Retrieves the maximum difference value of the range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0NTYyOnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxNzo0MlrOGZq8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwODowMToyMlrOGZtVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTIxMw==", "bodyText": "We should handle the case where only some of these parameters have been defined: we should make sure we do not fail with a null pointer exception, for instance\u2026", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571213", "createdAt": "2020-05-23T19:17:42Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTE1Ng==", "bodyText": "When I went through the docs It was mentioned that these are mandatory parameters for the constraint. Therefore, I didn't add the conditions. If you say so, I'll add those checks.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429595156", "createdAt": "2020-05-24T03:17:22Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTIxMw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwMzg3Mg==", "bodyText": "They are mandatory indeed, but there is nothing preventing users from not adding them to the constraint definition.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429603872", "createdAt": "2020-05-24T06:25:23Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTIxMw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMDMyMw==", "bodyText": "Done!", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429610323", "createdAt": "2020-05-24T08:01:22Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTIxMw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0NTk3OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxODowOVrOGZq8uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDoyNzo0N1rOGc5VKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng==", "bodyText": "This constraint might also be used on quantities: it would be good to support that case too.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571256", "createdAt": "2020-05-23T19:18:09Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTkyOQ==", "bodyText": "I took a look at the uses of this constraint, and all of them are for date & year. Therefore, I made this specific condition for TimeValue only.\nIf there are chances to use this constraint on other quantities then should I make a different class extending this one for TimeValue and so on for other quantities?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429595929", "createdAt": "2020-05-24T03:36:24Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNDAwMw==", "bodyText": "Good question. Perhaps it is worth checking the code of WikibaseQualityConstraints to see how it was implemented there (perhaps quantities are not supported indeed!)\nhttps://github.com/wikimedia/mediawiki-extensions-WikibaseQualityConstraints", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429604003", "createdAt": "2020-05-24T06:27:25Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxMDE0NA==", "bodyText": "I checked their implementation, quantities are not really supported over there too", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429610144", "createdAt": "2020-05-24T07:58:12Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDM1NQ==", "bodyText": "Apparently they are actually supported! :) but we can merge this without full support, so we can focus on the architecture changes.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950355", "createdAt": "2020-05-31T14:02:05Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MjYxNg==", "bodyText": "Yes, they do.  I'm trying to implement something similar to rangeCheckerHelper and UnitsConverter. Once it gets implemented very well and validated I'll update the PR. implementing these kinds of classes will provide a good help in range constraints too. :)", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432952616", "createdAt": "2020-05-31T14:27:47Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI1Ng=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0NjAzOnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxODoxMVrOGZq8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNjo1ODo1M1rOGZtEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI2Mw==", "bodyText": "I think this would be cleaner if we first compute the difference between the two values, in some unit, and then compare it to the bounds supplied in the constraint.\nAlso, it is not clear to me how this works in the Wikibase implementation, but I think the constraint system automatically converts units: differences can be specified in any unit, as far as I can tell.\nSee the official docs:\n\nWikibaseQualityConstraints normalizes the range endpoints before checking this constraint; for example, the intervals [ 0 days , 14 days] and [ 0 weeks , 2 weeks] are equivalent.\n\nhttps://www.wikidata.org/wiki/Help:Property_constraints_portal/Diff_within_range", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429571263", "createdAt": "2020-05-23T19:18:11Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){\n+                        TimeValue lowerDate = (TimeValue)startingValue;\n+                        TimeValue upperDate = (TimeValue)endingValue;\n+\n+                        if (upperDate.getYear() - lowerDate.getYear() < minRangeValue.getNumericValue().longValue()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() < lowerDate.getMonth()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() == lowerDate.getMonth() && upperDate.getDay() < lowerDate.getDay()\n+                            || upperDate.getYear() - lowerDate.getYear() > maxRangeValue.getNumericValue().longValue()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNTY2OQ==", "bodyText": "If I'll even calculate the difference that would be in terms of year-month-day and the range is provided in years. So, 1st thing that comes in my mind is it might increase the complexity of the code to understand the working and 2nd thing is the comparison with range.\nfor instance: here it's quite simple to even check for same death and birth of year but an invalid month and day.  In case of difference, it will be like 0 years -2 month something which doesn't sound good to me. I also checked wikibase implementation before implementing this. They only checked for the year difference which I guess not so appropriate in cases like:\nD.O.B : 2020-10-09\nD.O.D: 2020-02-02\n(ps: I'm not too good in PHP maybe I have overlooked any condition)\nDo you want to have that implementation, I can proceed with that. No issues :)", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429605669", "createdAt": "2020-05-24T06:53:09Z", "author": {"login": "darecoder"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){\n+                        TimeValue lowerDate = (TimeValue)startingValue;\n+                        TimeValue upperDate = (TimeValue)endingValue;\n+\n+                        if (upperDate.getYear() - lowerDate.getYear() < minRangeValue.getNumericValue().longValue()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() < lowerDate.getMonth()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() == lowerDate.getMonth() && upperDate.getDay() < lowerDate.getDay()\n+                            || upperDate.getYear() - lowerDate.getYear() > maxRangeValue.getNumericValue().longValue()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI2Mw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNjA3Mw==", "bodyText": "Oh indeed, they only support years on their end too. That's not really what the docs say!\nStill, I would prefer to compute the difference in years first, and then check how it compares to the bounds, which is what they do:\nhttps://github.com/wikimedia/mediawiki-extensions-WikibaseQualityConstraints/blob/master/src/ConstraintCheck/Checker/DiffWithinRangeChecker.php#L166", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r429606073", "createdAt": "2020-05-24T06:58:53Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.openrefine.wikidata.qa.scrutinizers;\n+\n+import org.openrefine.wikidata.qa.QAWarning;\n+import org.openrefine.wikidata.updates.ItemUpdate;\n+import org.wikidata.wdtk.datamodel.interfaces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n+\n+    public static final String type = \"difference-of-the-properties-is-not-within-the-specified-range\";\n+\n+    @Override\n+    public void scrutinize(ItemUpdate update) {\n+        Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n+        for (Statement statement : update.getAddedStatements()){\n+            PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n+            Value value = statement.getClaim().getMainSnak().getValue();\n+            propertyIdValueValueMap.put(pid, value);\n+        }\n+\n+        for(PropertyIdValue propertyId : propertyIdValueValueMap.keySet()){\n+            if (_fetcher.hasDiffWithinRange(propertyId)){\n+                PropertyIdValue lowerPropertyId = _fetcher.getLowerPropertyId(propertyId);\n+                QuantityValue minRangeValue = _fetcher.getMinimumValue(propertyId);\n+                QuantityValue maxRangeValue = _fetcher.getMaximumValue(propertyId);\n+\n+                if (propertyIdValueValueMap.containsKey(lowerPropertyId)){\n+                    Value startingValue = propertyIdValueValueMap.get(lowerPropertyId);\n+                    Value endingValue = propertyIdValueValueMap.get(propertyId);\n+\n+                    if (startingValue instanceof TimeValue && endingValue instanceof TimeValue){\n+                        TimeValue lowerDate = (TimeValue)startingValue;\n+                        TimeValue upperDate = (TimeValue)endingValue;\n+\n+                        if (upperDate.getYear() - lowerDate.getYear() < minRangeValue.getNumericValue().longValue()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() < lowerDate.getMonth()\n+                            || upperDate.getYear() == lowerDate.getYear() && upperDate.getMonth() == lowerDate.getMonth() && upperDate.getDay() < lowerDate.getDay()\n+                            || upperDate.getYear() - lowerDate.getYear() > maxRangeValue.getNumericValue().longValue()){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTI2Mw=="}, "originalCommit": {"oid": "3db2a11a4d2abc63deb0418a2e3691e3a5f40abb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njc2MTY4OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzo1ODowOVrOGc5K_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzo1ODowOVrOGc5K_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDAxMw==", "bodyText": "Typo: it's -> its", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950013", "createdAt": "2020-05-31T13:58:09Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +336,84 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    protected List<QuantityValue> getValues(List<SnakGroup> groups, String pid) {\n+        List<QuantityValue> results = new ArrayList<>();\n+        for (SnakGroup group : groups) {\n+            if (group.getProperty().getId().equals(pid)) {\n+                for (Snak snak : group.getSnaks())\n+                    results.add((QuantityValueImpl) snak.getValue());\n+            }\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Is this property expected to have a value whose difference\n+     * with it's lower bound property should be in a range?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3d84b8474f9db0f506d41bc9652b1eb43196ff"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njc2Mjc2OnYy", "diffSide": "RIGHT", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDowMDowMlrOGc5Llw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDowMDowMlrOGc5Llw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MDE2Nw==", "bodyText": "We have the same problem as the Conflicts With constraint here: as a parameter, we should pass the target property id (the one against which the difference is checked), and then find the corresponding constraint definition instead of only reading the first one.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2634#discussion_r432950167", "createdAt": "2020-05-31T14:00:02Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/WikidataConstraintFetcher.java", "diffHunk": "@@ -340,4 +336,84 @@ public boolean usableOnItems(PropertyIdValue pid) {\n         }\n         return results;\n     }\n+\n+    protected List<QuantityValue> getValues(List<SnakGroup> groups, String pid) {\n+        List<QuantityValue> results = new ArrayList<>();\n+        for (SnakGroup group : groups) {\n+            if (group.getProperty().getId().equals(pid)) {\n+                for (Snak snak : group.getSnaks())\n+                    results.add((QuantityValueImpl) snak.getValue());\n+            }\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Is this property expected to have a value whose difference\n+     * with it's lower bound property should be in a range?\n+     */\n+    @Override\n+    public boolean hasDiffWithinRange(PropertyIdValue pid) {\n+        return getSingleConstraint(pid, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_QID) != null;\n+    }\n+\n+    /**\n+     * Retrieves the lower value property for calculating the difference\n+     * required in difference-within-range constraint\n+     *\n+     * @param pid:\n+     *            the property to calculate difference with\n+     * @return the pid of the lower bound property\n+     */\n+    @Override\n+    public PropertyIdValue getLowerPropertyId(PropertyIdValue pid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3d84b8474f9db0f506d41bc9652b1eb43196ff"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2748, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}