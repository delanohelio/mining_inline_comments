{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MzcxMDQ2", "number": 2518, "title": "Support default project name and column name for GREL cross() function", "bodyText": "(Closes #2504)\nCan #200 be closed by this PR?\nCurrently, cross() can take 3 arguments:\ncross(cell or value, string projectName, string columnName)\n\nIn this PR, I added the following enhancements as mentioned in #2504 :\n\nprojectName will be optional and will be interpreted as the current project name if omitted or set to \"\".\ncolumnName will also be optional and will be interpreted as the index column if omitted or set to \"\". Note that I don't mean a column with the name \"index\" by saying \"the index column\", it's actually a column with name \"OpenRefine_Index_Column_Name\", which is the inner name of the index column. See Cross.java for more details.\n\nWith these two enhancements, the cross() function will be more flexible.\nWe can use cross(targetValue, \"\", targetColumn) to lookup the given value in the given column of the current project.\nWe can use cross(targetRowIndex) to access another row in the current project. Similarly, we can use cross(targetRowIndex, targetProjectName) or cross(targetRowIndex, targetProjectName, \"\") to access a specified row in the target project. So this PR can be taken as a solution for #200 .\nOne interesting thing is that we already have an embedded \"rowIndex\" variable for GREL, so we can use cross(rowIndex + offset) to access a row relative to the current row.", "createdAt": "2020-04-06T04:22:56Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518", "merged": true, "mergeCommit": {"oid": "e89eaf0ee2792fb6e0ab61f269a02bef1b7f912a"}, "closed": true, "closedAt": "2020-05-22T07:39:58Z", "author": {"login": "afkbrb"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYcaxfgFqTM5NTIzMjU1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjjrlhgBqjMzNjIxOTExMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjMyNTU5", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395232559", "createdAt": "2020-04-17T07:46:51Z", "commit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODc1MTM4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395875138", "createdAt": "2020-04-18T02:59:47Z", "commit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjo1OTo0N1rOGHjpVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjo1OTo0N1rOGHjpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU3NzIzNw==", "bodyText": "Project's can actually have the same name.  I have 25 projects with unique Project IDs but they all have a common name \"clipboard\".  And that's fine, we allow that.  cross() however, without a Project name now supplied here will get confused as shown, so we need to improve this handling (in other words, it should know that I am about to perform a cross() on the current binding to a Project id.\n\nI think that if the args[1] is empty then we should use the current Project ID which we seem to already have in the Project bindings ?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410577237", "createdAt": "2020-04-18T02:59:47Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,18 +41,25 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = args.length < 2 || args[1].equals(\"\") ?\n+                    ((Project) bindings.get(\"project\")).getMetadata().getName() : args[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7b3469654f94453f9b17168bb8a59cef682c17"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTE2MTU1", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395916155", "createdAt": "2020-04-18T13:58:27Z", "commit": {"oid": "67ef026ee144614bd5c7916f82bef4551d244c99"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzo1ODoyN1rOGHrOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMzo1ODoyN1rOGHrOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMTQ3Ng==", "bodyText": "@afkbrb Looks like we need to clean up the help text just a bit?  missing the single quote chars '' on the end of those 2 sentences?  Looks like some kind of rendering issue?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410701476", "createdAt": "2020-04-18T13:58:27Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to ''. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ef026ee144614bd5c7916f82bef4551d244c99"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTIxNjk3", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395921697", "createdAt": "2020-04-18T15:06:57Z", "commit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTIyOTEw", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395922910", "createdAt": "2020-04-18T15:20:52Z", "commit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyMDo1MlrOGHr07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyMDo1MlrOGHr07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA==", "bodyText": "Hmm...  what are we missing here?\nI perform a cross() that has valid syntax and 3 args.\nBut there's no try wrapping here...so... silent error?\nMy expectation was that of some kind of error GIVEN the below scenario:", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410711278", "createdAt": "2020-04-18T15:20:52Z", "author": {"login": "thadguidry"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTM4MzQ4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-395938348", "createdAt": "2020-04-18T18:20:19Z", "commit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyMDoxOVrOGHtGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxODoyNDoxNVrOGHtIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjEwMQ==", "bodyText": "Sorry @antoine2711 I don't quite understand what you mean. Please explain what I am asking GREL for with that syntax in my image and given the underlying data grid.\n\nYou are doing cross(cell.value, \"CurrentProject\", Use the internal index).\nSince internal index is ALWAYS a number, cell.value MUST be a number to match & cross. In your example, 111 or 222 \u00ab could be \u00bb numbers, but since the preview doesn't use the green coloring to confirm it, can't know for sure, but at the look of the grey table in the background, neither 111 or 222 or 333 seams to be cast as number, but rather like strings, which will never match an index.\nBut, even if 111 or 222 were numbers, you would need 112 or 223 rows in your project to have a match.\nIs it clearer? Regards, A.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732101", "createdAt": "2020-04-18T18:20:19Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -41,24 +41,37 @@\n import com.google.refine.expr.WrappedCell;\n import com.google.refine.grel.ControlFunctionRegistry;\n import com.google.refine.grel.Function;\n+import com.google.refine.model.Project;\n import com.google.refine.util.GetProjectIDException;\n import com.google.refine.util.LookupException;\n \n public class Cross implements Function {\n \n+    public static final String INDEX_COLUMN_NAME = \"_OpenRefine_Index_Column_Name_\";\n+\n     @Override\n     public Object call(Properties bindings, Object[] args) {\n-        if (args.length == 3) {\n+        if (args.length == 1 || args.length == 2 || args.length == 3) {\n             // 1st argument can take either value or cell(for backward compatibility)\n             Object v = args[0];\n-            Object targetProjectName = args[1];\n-            Object targetColumnName = args[2];\n+            // if 2nd argument is omitted or set to \"\", use the current project name\n+            Object targetProjectName = \"\";\n+            boolean isCurrentProject = false;\n+            if (args.length < 2 || args[1].equals(\"\")) {\n+                isCurrentProject = true;\n+            } else {\n+                targetProjectName = args[1];\n+            }\n+            // if 3rd argument is omitted or set to \"\", use the index column\n+            Object targetColumnName = args.length < 3 || args[2].equals(\"\") ? INDEX_COLUMN_NAME: args[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTI3OA=="}, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjIzMA==", "bodyText": "I would change cell value for just value everywhere in the doc. It's just a value, it can come from anywhere (even literals values are accepted!).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732230", "createdAt": "2020-04-18T18:21:45Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjQ1NQ==", "bodyText": "I would change object value for just value everywhere in the doc. It's just a value, it can come from anywhere (even literals values are accepted!). Also, the use of object is misleading, not pertinent and confusing.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732455", "createdAt": "2020-04-18T18:23:32Z", "author": {"login": "antoine2711"}, "path": "main/src/com/google/refine/expr/functions/Cross.java", "diffHunk": "@@ -71,22 +84,27 @@ public Object call(Properties bindings, Object[] args) {\n \n                 if (v instanceof WrappedCell) {\n                     return lookup.getRows(((WrappedCell) v).cell.value);\n+                } else if (v instanceof Number && targetColumnName.equals(INDEX_COLUMN_NAME)){\n+                    return lookup.getRows(((Number) v).intValue());\n                 } else {\n                     return lookup.getRows(v);\n                 }\n             }\n         }\n-        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up, and a column name in that project\");\n+        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + \" expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }\n \n     @Override\n     public String getDescription() {\n-        return \"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\";\n+        return \"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\"\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\"\\\"\";\n     }\n \n     @Override\n     public String getParams() {\n-        return \"cell c or object value, string projectName, string columnName\";\n+        return \"cell c or object value, string projectName (optional), string columnName (optional)\";\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjUyNA==", "bodyText": "Same.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732524", "createdAt": "2020-04-18T18:23:55Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -263,12 +306,12 @@ public void crossFunctionMatchNotFoundTest() throws Exception {\n      \n     /**\n      *  \n-     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up, and a column name in that project\"\n+     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\"\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjU1NA==", "bodyText": "Same", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732554", "createdAt": "2020-04-18T18:24:04Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -263,12 +306,12 @@ public void crossFunctionMatchNotFoundTest() throws Exception {\n      \n     /**\n      *  \n-     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up, and a column name in that project\"\n+     *  rest of cells shows \"Error: cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\"\n      */\n     @Test\n     public void crossFunctionNonLiteralValue() throws Exception {\n         Assert.assertEquals(((EvalError) invoke(\"cross\", null, \"My Address Book\", \"friend\")).message,\n-                \"cross expects a cell or cell value, a project name to look up, and a column name in that project\");\n+                \"cross expects a cell or cell value, a project name to look up (optional), and a column name in that project (optional)\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjU2OQ==", "bodyText": "Same.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#discussion_r410732569", "createdAt": "2020-04-18T18:24:15Z", "author": {"login": "antoine2711"}, "path": "main/tests/server/src/com/google/refine/expr/functions/CrossTests.java", "diffHunk": "@@ -289,7 +332,11 @@ private static Object invoke(String name,Object... args) {\n     \n     @Test\n     public void serializeCross() {\n-        String json = \"{\\\"description\\\":\\\"Looks up the given value in the target column of the target project, returns an array of matched rows, cell will be interpreted as cell.value\\\",\\\"params\\\":\\\"cell c or object value, string projectName, string columnName\\\",\\\"returns\\\":\\\"array\\\"}\";\n+        String json = \"{\\\"description\\\":\\\"Looks up the given value in the target column of the target project, returns an array of matched rows. \" +\n+                \"The first argument will be interpreted as cell.value if set to cell. \" +\n+                \"The second argument will be interpreted as the current project name if omitted or set to \\\\\\\"\\\\\\\". \" +\n+                \"The third argument will be interpreted as the index (starts from 0) column if omitted or set to \\\\\\\"\\\\\\\"\\\",\" +\n+                \"\\\"params\\\":\\\"cell c or object value, string projectName (optional), string columnName (optional)\\\",\\\"returns\\\":\\\"array\\\"}\";\n         TestUtils.isSerializedTo(new Cross(), json);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b4d414d2e0860fc488c2aa9f2b0cce553b1d3d6d", "committedDate": "2020-04-18T14:24:34Z", "message": "update help text of cross()"}, "afterCommit": {"oid": "825e687b0b676fd1be1fa0a9d00be22de0e57060", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/825e687b0b676fd1be1fa0a9d00be22de0e57060", "committedDate": "2020-05-05T12:00:17Z", "message": "Fix bug when both trim and autodetect are enabled in tabular parser. Closes #2584 (#2610)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzc2NTMy", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-410376532", "createdAt": "2020-05-12T19:58:01Z", "commit": {"oid": "60bcbd783e78fffa1826c2a67df0ca000718938c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MTA0NzY2", "url": "https://github.com/OpenRefine/OpenRefine/pull/2518#pullrequestreview-414104766", "createdAt": "2020-05-19T05:07:32Z", "commit": {"oid": "60bcbd783e78fffa1826c2a67df0ca000718938c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f16d9d4815fe68ef3165f7809ae8e66aa1a120", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/78f16d9d4815fe68ef3165f7809ae8e66aa1a120", "committedDate": "2020-05-21T20:20:12Z", "message": "support default project name and column name for cross()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4b088be7add96ddc2092f1b7969525773e51875", "author": {"user": {"login": "antoine2711", "name": "Antoine Beaubien"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/c4b088be7add96ddc2092f1b7969525773e51875", "committedDate": "2020-05-19T23:24:34Z", "message": "Merge branch 'issue-2504' of https://github.com/afkbrb/OpenRefine into issue-2504"}, "afterCommit": {"oid": "78f16d9d4815fe68ef3165f7809ae8e66aa1a120", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/78f16d9d4815fe68ef3165f7809ae8e66aa1a120", "committedDate": "2020-05-21T20:20:12Z", "message": "support default project name and column name for cross()"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}