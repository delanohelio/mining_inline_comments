{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NzM0ODc3", "number": 2810, "title": "Extend Wikidata extension to support arbitrary Wikibase instances", "bodyText": "Close #1640", "createdAt": "2020-06-25T07:05:48Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810", "merged": true, "mergeCommit": {"oid": "7d4e182c7551ba828febe6b26d4aa0c0fd4fb578"}, "closed": true, "closedAt": "2020-08-22T15:58:57Z", "author": {"login": "afkbrb"}, "timelineItems": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1G0YngBqjM1NDc1OTc1NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBbagggFqTQ3MjkzNDU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f98e0f6cce43f8c4286afce8f80dede136d7e07b", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/f98e0f6cce43f8c4286afce8f80dede136d7e07b", "committedDate": "2020-07-14T12:28:39Z", "message": "migrate methods from WikidataConstraintFetcher to scrutinizers (not support manifests yet)"}, "afterCommit": {"oid": "a3fab26cca508ea92f013cfba327d82b95de2c5c", "author": {"user": {"login": "tfmorris", "name": "Tom Morris"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/a3fab26cca508ea92f013cfba327d82b95de2c5c", "committedDate": "2020-07-15T06:56:00Z", "message": "Fix the text format guesser so it doesn't inappropriately guess WikiText (#2924)\n\n* Fix text guesser so it doesn't guess wikitext\r\n\r\nFixes #2850\r\n- Add simple magic detector for zip & gzip files to keep\r\n  it from attempting to guess binary files\r\n- Add a counter for C0 controls for the same reason\r\n- Tighten wikitable counters to require marker at\r\n  beginning of the line, per the specification\r\n- Refactor to use Apache Commons instead of private\r\n  counting methods\r\n- Add tests for most TextGuesser formats\r\n\r\n* Remove misplaced duplicate test data file\r\n\r\n* Fix LGTM warning + minor cleanups\r\n\r\n* Use BoundedInputStream to prevent runaway lines"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e8cb11c58a4c060b748b5dd8341e70febc1e936", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/7e8cb11c58a4c060b748b5dd8341e70febc1e936", "committedDate": "2020-07-15T09:02:41Z", "message": "setup the manifest framework"}, "afterCommit": {"oid": "b579193f51503813103ca9819a1b4631b73ff98d", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b579193f51503813103ca9819a1b4631b73ff98d", "committedDate": "2020-07-15T11:14:30Z", "message": "setup the manifest framework"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTU1MTA2", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-451155106", "createdAt": "2020-07-19T18:59:03Z", "commit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "state": "COMMENTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODo1OTowM1rOGzxkmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMToxODoyNlrOGzybuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0Mjc0Nw==", "bodyText": "Do we want/need to support multiple simultaneous logins? It seems like the user may want to be authenticated to multiple Wikibases and then choose which one to use for a given operation.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456942747", "createdAt": "2020-07-19T18:59:03Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java", "diffHunk": "@@ -145,26 +151,28 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             }\n         }\n \n-        if (isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(username, password) && remember) {\n+            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n                 for (HttpCookie cookie : cookies) {\n                     setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n                 }\n \n+                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, WIKIBASE_USERNAME_COOKIE_KEY, connection.getCurrentUser());\n+                setCookie(response, USERNAME, connection.getCurrentUser());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw==", "bodyText": "Do we want to continue to support password based logins at all? I'd much prefer that we don't have access to the users' passwords unless we absolutely have to.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943047", "createdAt": "2020-07-19T19:01:42Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java", "diffHunk": "@@ -79,29 +80,37 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             manager.logout();\n             removeUsernamePasswordCookies(request, response);\n             removeOwnerOnlyConsumerCookies(request, response);\n+            removeCookie(response, API_ENDPOINT);\n             respond(request, response);\n             return; // return directly\n         }\n \n         boolean remember = \"on\".equals(request.getParameter(\"remember-credentials\"));\n \n         // Credentials from parameters have higher priority than those from cookies.\n+        String wikibaseApiEndpoint = request.getParameter(API_ENDPOINT);\n         String username = request.getParameter(USERNAME);\n         String password = request.getParameter(PASSWORD);\n         String consumerToken = request.getParameter(CONSUMER_TOKEN);\n         String consumerSecret = request.getParameter(CONSUMER_SECRET);\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(username) && isBlank(password) && isBlank(consumerToken) &&\n-                isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n+        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzE5Ng==", "bodyText": "Does the exception include any more information about the parse error which would be useful to pass back to the user? e.g. column, character, error message, etc.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943196", "createdAt": "2020-07-19T19:03:35Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java", "diffHunk": "@@ -81,14 +84,29 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n                 return;\n             }\n \n+            Manifest manifest = null;\n+            String manifestJson = request.getParameter(\"manifest\");\n+            if (manifestJson != null) {\n+                try {\n+                    manifest = ManifestParser.parse(manifestJson);\n+                } catch (ManifestException e) {\n+                    respondError(response, \"Wikibase manifest could not be parsed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzU3MQ==", "bodyText": "What are the semantics of our versioning? Can we deal with any 1.x here or only exactly 1.0?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943571", "createdAt": "2020-07-19T19:06:55Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openrefine.wikidata.manifests.v1_0.ManifestV1_0;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ManifestParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Manifest parse(String manifestJson) throws ManifestException {\n+        JsonNode root;\n+        try {\n+            root = mapper.readTree(manifestJson);\n+        } catch (JsonProcessingException e) {\n+            throw new ManifestException(\"invalid manifest format\");\n+        }\n+\n+        String version = root.path(\"version\").textValue();\n+        if (StringUtils.isBlank(version)) {\n+            version = \"1.0\";\n+            logger.warn(\"version is missing in the manifest, assumed to be \\\"1.0\\\"\");\n+        }\n+\n+        if (\"1.0\".equals(version)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDI1OA==", "bodyText": "Are these Jackson annotations required? It looks like your naming scheme matches the default expected by Jackson so perhaps you don't need them. @wetneb has more experience with Jackson than I, so perhaps he can confirm.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456944258", "createdAt": "2020-07-19T19:14:09Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.openrefine.wikidata.manifests.constraints;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class AllowedEntityTypesConstraint implements Constraint {\n+\n+    private String qid;\n+    private String itemOfPropertyConstraint;\n+    private String wikibaseItem;\n+    private String wikibaseProperty;\n+    private String lexeme;\n+    private String form;\n+    private String sense;\n+    private String wikibaseMediainfo;\n+\n+    @JsonCreator\n+    public AllowedEntityTypesConstraint(@JsonProperty(\"qid\") String qid,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NTc4Mw==", "bodyText": "This field name doesn't match it's serialization. It'd probably be easier if they matched.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456945783", "createdAt": "2020-07-19T19:28:46Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.openrefine.wikidata.manifests.constraints;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class ValueTypeConstraint implements Constraint {\n+\n+    private String qid;\n+    private String relation;\n+    private String instanceOf;\n+    private String subclassOf;\n+    private String instanceOrSubclassOf;\n+    private String klass;\n+\n+    @JsonCreator\n+    public ValueTypeConstraint(@JsonProperty(\"qid\") String qid,\n+                          @JsonProperty(\"relation\") String relation,\n+                          @JsonProperty(\"instance_of\") String instanceOf,\n+                          @JsonProperty(\"subclass_of\") String subclassOf,\n+                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOrSubclassOf,\n+                          @JsonProperty(\"class\") String klass) {\n+        this.qid = qid;\n+        this.relation = relation;\n+        this.instanceOf = instanceOf;\n+        this.subclassOf = subclassOf;\n+        this.instanceOrSubclassOf = instanceOrSubclassOf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NjcxNA==", "bodyText": "Could you compute this transform algorithmically to reduce the verbosity? Perhaps by using the same code that Jackson uses in SnakeCaseStrategy.translate() on an array of Class objects.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456946714", "createdAt": "2020-07-19T19:37:50Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODQ2Mg==", "bodyText": "The cast below will fail at runtime if we don't get what we need, so let's make that explicit here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ConstraintsV1_0(JsonNode node) {\n          \n          \n            \n                public ConstraintsV1_0(ArrayNode constraints) {", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456948462", "createdAt": "2020-07-19T19:54:46Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODcxNQ==", "bodyText": "ArrayNode implements Iterable<JsonNode>, so we can use a for each loop here to make things more compact and easier to read\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArrayNode constraints = (ArrayNode) node;\n          \n          \n            \n                    for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n          \n          \n            \n                        JsonNode constraint = it.next();\n          \n          \n            \n                    for (JsonNode constraint : constraints) {", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456948715", "createdAt": "2020-07-19T19:57:23Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        // underscore style -> camel style\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n+\n+        ArrayNode constraints = (ArrayNode) node;\n+        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n+            JsonNode constraint = it.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MTY5Mw==", "bodyText": "Consider using the same algorithmic name transformation here to avoid having to use strings and let the compiler help us with error checking.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n          \n          \n            \n                    return (AllowedEntityTypesConstraint) nameToConstraint.get(strategy.translate(AllowedEntityTypesConstraint.class.getName());", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456951693", "createdAt": "2020-07-19T20:26:03Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        // underscore style -> camel style\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n+\n+        ArrayNode constraints = (ArrayNode) node;\n+        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n+            JsonNode constraint = it.next();\n+            String constraintName = constraint.path(\"name\").textValue();\n+            if (nameToConstraintClass.containsKey(constraintName)) {\n+                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n+                nameToConstraint.put(constraintName, constraintObject);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n+        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MjIwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new ArrayList<>();\n          \n          \n            \n                        return Collections.emptyList();\n          \n      \n    \n    \n  \n\nUse the Collections method to make it clear what's going on here.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456952205", "createdAt": "2020-07-19T20:31:14Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -45,6 +64,30 @@\n      *            the type of the constraints\n      * @return the list of matching constraint statements\n      */\n-    List<Statement> getConstraintsByType(PropertyIdValue pid, String qid);\n+    public List<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {\n+        Stream<Statement> allConstraints = getConstraintStatements(pid).stream()\n+                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))\n+                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));\n+        return allConstraints.collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Gets all the constraint statements for a given property\n+     * \n+     * @param pid\n+     *             the id of the property to retrieve the constraints for\n+     * @return the list of constraint statements\n+     */\n+    private List<Statement> getConstraintStatements(PropertyIdValue pid) {\n+        PropertyDocument doc = (PropertyDocument) entityCache.get(pid);\n+        StatementGroup group = doc.findStatementGroup(wikibaseConstraintPid);\n+        if (group != null) {\n+            return group.getStatements().stream()\n+                    .filter(s -> s.getValue() != null && s.getValue() instanceof EntityIdValue)\n+                    .collect(Collectors.toList());\n+        } else {\n+            return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzI3NQ==", "bodyText": "I'm not sure I fully understand the lifecycle here, but could this be rolled into batchIsBeginning()? Because it's a new abstract method, it's a breaking change that all subclasses are going to need adapt to, so it's no worse to change the contract of batchIsBeginning to be abstract boolean, making it mandatory and returning the success indication that you need.\nAfter more review, I'm seeing a lot of boilerplate where subclasses just return true. Should that be the default, overridable implementation here to cut down on the boilerplate or is it something that we want subclasses to explicitly think about and handle?\nUnder what circumstances prepareDependencies fail? What should the user do about it?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953275", "createdAt": "2020-07-19T20:41:59Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java", "diffHunk": "@@ -57,6 +54,19 @@ public void setStore(QAWarningStore store) {\n     public void setFetcher(ConstraintFetcher fetcher) {\n         _fetcher = fetcher;\n     }\n+\n+    public void setConstraints(Constraints constraints) {\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Prepare the dependencies(i.e. constraint-related pids and qids) needed by the scrutinizer.\n+     *\n+     * Called before {@link EditScrutinizer#batchIsBeginning()}.\n+     *\n+     * @return false if any necessary dependency is missing, true otherwise.\n+     */\n+    public abstract boolean prepareDependencies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzQ4OA==", "bodyText": "Always use braces please. They avoid subtle and hard to find indentation bugs", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953488", "createdAt": "2020-07-19T20:44:26Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -44,6 +44,16 @@\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getConflictsWithConstraint() == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY1NA==", "bodyText": "The names don't match here. Are they correct? Does one of them need to be adjusted?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953654", "createdAt": "2020-07-19T20:45:48Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -23,9 +23,9 @@\n         DifferenceWithinRangeConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> lowerValueProperty = findValues(specs, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_PID);\n-                List<Value> minValue = findValues(specs, MINIMUM_VALUE_PID);\n-                List<Value> maxValue = findValues(specs, MAXIMUM_VALUE_PID);\n+                List<Value> lowerValueProperty = findValues(specs, differenceWithinRangeConstraintPid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY3Nw==", "bodyText": "Please wrap long lines. Although style guides don't require 80 columns any more, most suggest no more than 100. We've been negligent in formalizing our style guide, so not your fault for not knowing.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953677", "createdAt": "2020-07-19T20:46:11Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -39,6 +39,16 @@\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getDifferenceWithinRangeConstraint() == null) return false;\n+        differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n+        differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n+        minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n+        maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n+        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null && minimumValuePid != null && maximumValuePid != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgzNA==", "bodyText": "Braces", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953834", "createdAt": "2020-07-19T20:47:55Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java", "diffHunk": "@@ -43,18 +44,26 @@\n public class DistinctValuesScrutinizer extends StatementScrutinizer {\n \n     public final static String type = \"identical-values-for-distinct-valued-property\";\n-    public static String DISTINCT_VALUES_CONSTRAINT_QID = \"Q21502410\";\n+    public String distinctValuesConstraintQid;\n \n     private Map<PropertyIdValue, Map<Value, EntityIdValue>> _seenValues;\n \n     public DistinctValuesScrutinizer() {\n         _seenValues = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        DistinctValuesConstraint distinctValuesConstraint = constraints.getDistinctValuesConstraint();\n+        if (distinctValuesConstraint == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDc3Mw==", "bodyText": "Should failures be logged or cause an error here?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456954773", "createdAt": "2020-07-19T20:57:24Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java", "diffHunk": "@@ -76,15 +80,20 @@ public EditInspector(QAWarningStore warningStore) {\n     }\n \n     /**\n-     * Adds a new scrutinizer to the inspector\n+     * Adds a new scrutinizer to the inspector.\n+     *\n+     * If any necessary dependency is missing, the scrutinizer will not be added.\n      * \n      * @param scrutinizer\n      */\n     public void register(EditScrutinizer scrutinizer) {\n-        String key = scrutinizer.getClass().getName();\n-        scrutinizers.put(key, scrutinizer);\n         scrutinizer.setStore(warningStore);\n         scrutinizer.setFetcher(fetcher);\n+        scrutinizer.setConstraints(constraints);\n+        if (scrutinizer.prepareDependencies()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDk3OA==", "bodyText": "wrap", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456954978", "createdAt": "2020-07-19T20:59:12Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java", "diffHunk": "@@ -92,12 +93,23 @@ public QualifierCompatibilityScrutinizer() {\n         _mandatoryQualifiers = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getAllowedQualifiersConstraint() == null) return false;\n+        if (constraints.getMandatoryQualifierConstraint() == null) return false;\n+        allowedQualifiersConstraintQid = constraints.getAllowedQualifiersConstraint().getQid();\n+        allowedQualifiersConstraintPid = constraints.getAllowedQualifiersConstraint().getProperty();\n+        mandatoryQualifiersConstraintQid = constraints.getMandatoryQualifierConstraint().getQid();\n+        mandatoryQualifiersConstraintPid = constraints.getMandatoryQualifierConstraint().getProperty();\n+        return allowedQualifiersConstraintQid != null && allowedQualifiersConstraintPid != null && mandatoryQualifiersConstraintQid != null && mandatoryQualifiersConstraintPid != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (oneOfConstraint == null) return false;\n          \n          \n            \n                    if (noneOfConstraint == null) return false;\n          \n          \n            \n                    if (oneOfConstraint == null || noneOfConstraint == null) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955173", "createdAt": "2020-07-19T21:01:16Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java", "diffHunk": "@@ -15,19 +17,32 @@\n \n public class RestrictedValuesScrutinizer extends SnakScrutinizer {\n     \n-    public static String type = \"forbidden-value\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_QID = \"Q21510859\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public static final String type = \"forbidden-value\";\n+    public String allowedValuesConstraintQid;\n+    public String allowedValuesConstraintPid;\n \n-    public static String DISALLOWED_VALUES_CONSTRAINT_QID = \"Q52558054\";\n-    public static String DISALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public String disallowedValuesConstraintQid;\n+    public String disallowedValuesConstraintPid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        OneOfConstraint oneOfConstraint = constraints.getOneOfConstraint();\n+        NoneOfConstraint noneOfConstraint = constraints.getNoneOfConstraint();\n+        if (oneOfConstraint == null) return false;\n+        if (noneOfConstraint == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTIzMA==", "bodyText": "combine as above", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955230", "createdAt": "2020-07-19T21:01:48Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java", "diffHunk": "@@ -45,17 +47,28 @@\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTMyNg==", "bodyText": "Doesn't this mean that this will never get used?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955326", "createdAt": "2020-07-19T21:02:49Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java", "diffHunk": "@@ -45,17 +47,28 @@\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;\n+        singleValueConstraintQid = singleValueConstraint.getQid();\n+        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTk1Mw==", "bodyText": "Is it too late to sync up these names?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955953", "createdAt": "2020-07-19T21:09:41Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -57,38 +57,39 @@\n \n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n-    @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    protected String baseIri;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"entityPrefix\") String baseIri) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"entityPrefix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjI2Mw==", "bodyText": "This is a very wide throws statement. Can it be narrowed at all to a smaller subset of Exceptions?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456956263", "createdAt": "2020-07-19T21:12:59Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java", "diffHunk": "@@ -39,24 +39,23 @@\n \n public class EntityCache {\n \n-    private static EntityCache _entityCache = new EntityCache(BasicApiConnection.getWikidataApiConnection());\n+    private static Map<String, EntityCache> entityCacheMap = new HashMap<>();\n \n-    private LoadingCache<String, EntityDocument> _cache = null;\n-    private WikibaseDataFetcher _fetcher;\n+    private LoadingCache<String, EntityDocument> cache;\n+    private WikibaseDataFetcher fetcher;\n \n-    protected EntityCache(ApiConnection connection) {\n-        this(new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA));\n+    protected EntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n+        this(new WikibaseDataFetcher(new BasicApiConnection(mediaWikiApiEndpoint), entityPrefix));\n     }\n     \n     protected EntityCache(WikibaseDataFetcher fetcher) {\n-        _fetcher = fetcher;\n+        this.fetcher = fetcher;\n \n-        _cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n+        cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId)\n-                            throws Exception {\n-                        EntityDocument doc = _fetcher.getEntityDocument(entityId);\n+                    public EntityDocument load(String entityId) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjU2Mg==", "bodyText": "As I mentioned by email, if we think users are going to have to deal with manifests, we may want to think about using YAML instead of JSON. In addition to be easier for humans to edit, it allows comments.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456956562", "createdAt": "2020-07-19T21:15:46Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/tests/data/manifest/wikidata-manifest-v1.0.json", "diffHunk": "@@ -0,0 +1,166 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1Njg1OQ==", "bodyText": "In particular, we need tests for version (missing, different minor version, different major version), as well as malformed manifests.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456956859", "createdAt": "2020-07-19T21:18:26Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import org.openrefine.wikidata.manifests.constraints.AllowedEntityTypesConstraint;\n+import org.openrefine.wikidata.manifests.constraints.TypeConstraint;\n+import org.openrefine.wikidata.testing.TestingData;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+public class ManifestTest {\n+\n+    @Test\n+    public void test() throws IOException, ManifestException {\n+        String json = TestingData.jsonFromFile(\"manifest/wikidata-manifest-v1.0.json\");\n+        Manifest manifest = ManifestParser.parse(json);\n+        assertEquals(\"1.0\", manifest.getVersion());\n+        assertEquals(\"Wikidata\", manifest.getName());\n+        assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n+        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n+        assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n+        assertEquals(\"P2302\", manifest.getPropertyConstraintPid());\n+\n+        Constraints constraints = manifest.getConstraints();\n+\n+        // TODO: more tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTkxOTA0", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-454591904", "createdAt": "2020-07-24T01:25:13Z", "commit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTozMToyOFrOG2gw7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo1MTo1MFrOG2hBNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMzEwMQ==", "bodyText": "It would be good if this didn't block the UI (but I know it's probably not your code).", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459813101", "createdAt": "2020-07-24T01:31:28Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/menu-bar-extension.js", "diffHunk": "@@ -1,134 +1,153 @@\n // Load the localization file\n var dictionary = {};\n $.ajax({\n-\turl : \"command/core/load-language?\",\n-\ttype : \"POST\",\n-\tasync : false,\n-\tdata : {\n-\t  module : \"wikidata\",\n+  url: \"command/core/load-language?\",\n+  type: \"POST\",\n+  async: false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMzQ1Nw==", "bodyText": "Can these error messages be internationalized?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459813457", "createdAt": "2020-07-24T01:33:13Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/dialogs/wikibase-dialog.js", "diffHunk": "@@ -0,0 +1,128 @@\n+const WikibaseDialog = {};\n+\n+WikibaseDialog.launch = function () {\n+  const frame = $(DOM.loadHTML(\"wikidata\", \"scripts/dialogs/wikibase-dialog.html\"));\n+  const elmts = this.elmts = DOM.bind(frame);\n+  elmts.dialogHeader.text($.i18n(\"wikibase-management/dialog-header\"));\n+  elmts.explainSelectWikibase.text($.i18n(\"wikibase-management/explain-select-wikibase\"));\n+  elmts.currentSelectedWikibase.html($.i18n(\"wikibase-management/current-selected-wikibase\",\n+      WikibaseManager.getSelectedWikibaseMainPage(), WikibaseManager.getSelectedWikibaseName()));\n+  elmts.closeButton.text($.i18n(\"wikibase-management/close\"));\n+  elmts.addButton.text($.i18n(\"wikibase-management/add-wikibase\"));\n+\n+  WikibaseDialog.populateDialog();\n+\n+  let level = DialogSystem.showDialog(frame);\n+\n+  elmts.closeButton.click(function () {\n+    DialogSystem.dismissUntil(level - 1);\n+  });\n+\n+  elmts.addButton.click(function () {\n+    WikibaseDialog.addWikibaseManifest();\n+  });\n+};\n+\n+WikibaseDialog.populateDialog = function () {\n+  let wikibases = WikibaseManager.getAllWikibases();\n+\n+  WikibaseDialog.elmts.wikibaseList.empty();\n+  for (let wikibaseName in wikibases) {\n+    if (wikibases.hasOwnProperty(wikibaseName)) {\n+      let item = \"<tr onclick=\\\"WikibaseDialog.selectWikibase('\" + wikibaseName + \"')\\\">\";\n+      item += \"<td>\" + wikibaseName + \"</td>\";\n+      if (wikibaseName.toLowerCase() === WikibaseManager.getSelectedWikibaseName().toLowerCase()) {\n+        item += \"<td><a class=\\\"wikibase-dialog-selector-remove wikibase-selected\\\" onclick=\\\"void(0)\\\"></a></td>\";\n+      } else {\n+        item += \"<td><a class=\\\"wikibase-dialog-selector-remove\\\" onclick=\\\"WikibaseDialog.removeWikibase(event, '\" + wikibaseName + \"')\\\"></a></td>\";\n+      }\n+      item += \"</tr>\";\n+      WikibaseDialog.elmts.wikibaseList.append(item);\n+    }\n+  }\n+};\n+\n+WikibaseDialog.selectWikibase = function (wikibaseName) {\n+  if (wikibaseName !== WikibaseManager.getSelectedWikibaseName()) {\n+    WikibaseManager.selectWikibase(wikibaseName);\n+    WikibaseDialog.elmts.currentSelectedWikibase.html($.i18n(\"wikibase-management/current-selected-wikibase\",\n+        WikibaseManager.getSelectedWikibaseMainPage(), WikibaseManager.getSelectedWikibaseName()));\n+    WikibaseDialog.populateDialog();\n+    SchemaAlignment.onWikibaseChange();\n+  }\n+};\n+\n+WikibaseDialog.removeWikibase = function (e, wikibaseName) {\n+  e.stopPropagation(); // must stop, otherwise the removed Wikibase will be selected\n+  WikibaseManager.removeWikibase(wikibaseName);\n+  WikibaseDialog.populateDialog();\n+};\n+\n+\n+WikibaseDialog.addWikibaseManifest = function () {\n+  const frame = $(DOM.loadHTML(\"wikidata\", \"scripts/dialogs/add-wikibase-dialog.html\"));\n+  const elmts = DOM.bind(frame);\n+  elmts.dialogHeader.text($.i18n(\"wikibase-addition/dialog-header\"));\n+  elmts.explainAddManifest.text($.i18n(\"wikibase-addition/explain-add-manifest\"));\n+  elmts.explainAddManifestViaURL.text($.i18n(\"wikibase-addition/explain-add-manifest-via-url\"));\n+  elmts.explainPasteManifest.html($.i18n(\"wikibase-addition/explain-paste-manifest\"));\n+  elmts.cancelButton.text($.i18n(\"wikibase-addition/cancel\"));\n+  elmts.addButton.text($.i18n(\"wikibase-addition/add-wikibase\"));\n+  elmts.invalidManifest.hide();\n+  elmts.invalidManifest.text($.i18n(\"wikibase-addition/invalid-manifest\"));\n+\n+  let level = DialogSystem.showDialog(frame);\n+\n+  elmts.cancelButton.click(function () {\n+    DialogSystem.dismissUntil(level - 1);\n+  });\n+\n+  elmts.addButton.click(function () {\n+    let addManifest = function (manifest) {\n+      if (!manifest) {\n+        alert(\"manifest is empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNjM5OQ==", "bodyText": "\"Gridworks\" is the name that preceded \"Google Refine\", which was replaced by \"OpenRefine\" so occurrences of \"gridworks\" should be globally replaced with \"openrefine\"", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459816399", "createdAt": "2020-07-24T01:47:25Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/menu-bar-extension.js", "diffHunk": "@@ -1,134 +1,153 @@\n // Load the localization file\n var dictionary = {};\n $.ajax({\n-\turl : \"command/core/load-language?\",\n-\ttype : \"POST\",\n-\tasync : false,\n-\tdata : {\n-\t  module : \"wikidata\",\n+  url: \"command/core/load-language?\",\n+  type: \"POST\",\n+  async: false,\n+  data: {\n+    module: \"wikidata\",\n //\t\tlang : lang\n-\t},\n-\tsuccess : function(data) {\n-\t\tdictionary = data['dictionary'];\n-\t\tlang = data['lang'];\n-\t}\n+  },\n+  success: function (data) {\n+    dictionary = data['dictionary'];\n+    lang = data['lang'];\n+  }\n });\n $.i18n().load(dictionary, lang);\n \n \n-\n ExporterManager.MenuItems.push({});\n-ExporterManager.MenuItems.push(\n-        {\n-            id:\"performWikibaseEdits\",\n-            label: $.i18n('wikidata-extension/wikidata-edits'),\n-            click: function() { PerformEditsDialog.checkAndLaunch(); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportQuickStatements\",\n-            label: $.i18n('wikidata-extension/qs-file'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\"); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportWikibaseSchema\",\n-            label: $.i18n('wikidata-extension/wikidata-schema'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\"); }\n-        }\n-);\n+ExporterManager.MenuItems.push({\n+  id: \"performWikibaseEdits\",\n+  label: $.i18n('wikibase-extension/wikibase-edits'),\n+  click: function () {\n+    PerformEditsDialog.checkAndLaunch();\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportQuickStatements\",\n+  label: $.i18n('wikibase-extension/qs-file'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\");\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportWikibaseSchema\",\n+  label: $.i18n('wikibase-extension/wikibase-schema'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\");\n+  }\n+});\n \n WikibaseExporterMenuBar = {};\n \n-WikibaseExporterMenuBar.exportTo = function(format) {\n-    var targetUrl = null;\n-    if (format ===\"quickstatements\") {\n-        targetUrl = \"statements.txt\";\n-    } else {\n-        targetUrl = \"schema.json\";\n-    }\n-    var form = document.createElement(\"form\");\n-    $(form).css(\"display\", \"none\")\n-        .attr(\"method\", \"post\")\n-        .attr(\"action\", \"command/core/export-rows/\"+targetUrl)\n-        .attr(\"target\", \"gridworks-export-\"+format);\n-    $('<input />')\n-        .attr(\"name\", \"engine\")\n-        .attr(\"value\", JSON.stringify(ui.browsingEngine.getJSON()))\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"project\")\n-        .attr(\"value\", theProject.id)\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"format\")\n-        .attr(\"value\", format)\n-        .appendTo(form);\n+WikibaseExporterMenuBar.exportTo = function (format) {\n+  var targetUrl = null;\n+  if (format === \"quickstatements\") {\n+    targetUrl = \"statements.txt\";\n+  } else {\n+    targetUrl = \"schema.json\";\n+  }\n+  var form = document.createElement(\"form\");\n+  $(form).css(\"display\", \"none\")\n+      .attr(\"method\", \"post\")\n+      .attr(\"action\", \"command/core/export-rows/\" + targetUrl)\n+      .attr(\"target\", \"gridworks-export-\" + format);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNjkyNA==", "bodyText": "Can this be put in the Ajax completion function rather than relying on a fixed timer?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459816924", "createdAt": "2020-07-24T01:50:07Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/wikibase-manager.js", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Manages Wikibase instances.\n+ */\n+const WikibaseManager = {\n+  selected: \"Wikidata\",\n+  wikibases: {\n+    \"Wikidata\": WikidataManifestV1_0 // default one\n+  }\n+};\n+\n+WikibaseManager.getSelectedWikibase = function () {\n+  return WikibaseManager.wikibases[WikibaseManager.selected];\n+};\n+\n+WikibaseManager.getSelectedWikibaseRoot = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.root;\n+};\n+\n+WikibaseManager.getSelectedWikibaseMainPage = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.main_page;\n+};\n+\n+WikibaseManager.getSelectedWikibaseApi = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.api;\n+};\n+\n+WikibaseManager.getSelectedWikibaseName = function () {\n+  return WikibaseManager.selected;\n+};\n+\n+WikibaseManager.getSelectedWikibaseEntityPrefix = function () {\n+  return WikibaseManager.getSelectedWikibase().wikibase.properties.entity_prefix;\n+};\n+\n+WikibaseManager.getSelectedWikibaseReconEndpoint = function () {\n+  return WikibaseManager.getSelectedWikibase().reconciliation.endpoint;\n+};\n+\n+WikibaseManager.selectWikibase = function (wikibaseName) {\n+  if (WikibaseManager.wikibases.hasOwnProperty(wikibaseName)) {\n+    WikibaseManager.selected = wikibaseName;\n+  }\n+};\n+\n+WikibaseManager.getAllWikibases = function () {\n+  return WikibaseManager.wikibases;\n+};\n+\n+WikibaseManager.addWikibase = function (manifest) {\n+  WikibaseManager.wikibases[manifest.mediawiki.name] = manifest;\n+  WikibaseManager.saveWikibases();\n+};\n+\n+WikibaseManager.removeWikibase = function (wikibaseName) {\n+  delete WikibaseManager.wikibases[wikibaseName];\n+  WikibaseManager.saveWikibases();\n+};\n+\n+WikibaseManager.saveWikibases = function () {\n+  let manifests = [];\n+  for (let wikibaseName in WikibaseManager.wikibases) {\n+    if (WikibaseManager.wikibases.hasOwnProperty(wikibaseName)) {\n+      manifests.push(WikibaseManager.wikibases[wikibaseName])\n+    }\n+  }\n+\n+  Refine.wrapCSRF(function (token) {\n+    $.ajax({\n+      async: false,\n+      type: \"POST\",\n+      url: \"command/core/set-preference?\" + $.param({\n+        name: \"wikibase.manifests\"\n+      }),\n+      data: {\n+        \"value\": JSON.stringify(manifests),\n+        csrf_token: token\n+      },\n+      dataType: \"json\"\n+    });\n+  });\n+};\n+\n+// TODO: test\n+WikibaseManager.loadWikibases = function () {\n+  $.ajax({\n+    async: true,\n+    url: \"command/core/get-preference?\" + $.param({\n+      name: \"wikibase.manifests\"\n+    }),\n+    success: function (data) {\n+      if (data.value && data.value !== \"null\" && data.value !== \"[]\") {\n+        let toUpdate = false;\n+        let manifests = JSON.parse(data.value);\n+        manifests.forEach(function (manifest) {\n+          if (manifest.custom && manifest.custom.url && manifest.custom.last_updated\n+              && ((Date.now() - manifest.custom.last_updated) > 7 * 24 * 60 * 60 * 1000)) {\n+            toUpdate = true;\n+            // If the manifest was fetched via URL and hasn't been updated for a week,\n+            // fetch it again to keep track of the lasted version\n+            WikibaseManager.fetchManifestFromURL(manifest.custom.url, function (newManifest) {\n+              WikibaseManager.wikibases[newManifest.mediawiki.name] = newManifest;\n+            }, function () {\n+              // fallback to the current one if failed to fetch the latest one\n+              WikibaseManager.wikibases[manifest.mediawiki.name] = manifest;\n+            }, true)\n+          } else {\n+            WikibaseManager.wikibases[manifest.mediawiki.name] = manifest;\n+          }\n+        });\n+\n+        if (toUpdate) {\n+          // wait for 10s for fetching latest manifests to finish\n+          setTimeout(function () {\n+            WikibaseManager.saveWikibases();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNzI3MA==", "bodyText": "Probably don't need the extra level of package depth here (ie remove \".v1\")", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459817270", "createdAt": "2020-07-24T01:51:50Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -4,7 +4,7 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n-import org.openrefine.wikidata.manifests.v1_0.ManifestV1_0;\n+import org.openrefine.wikidata.manifests.v1.ManifestV1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cdd403dcfb86611b778f5ac432cf4082132a648", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/8cdd403dcfb86611b778f5ac432cf4082132a648", "committedDate": "2020-07-25T13:26:08Z", "message": "setup the manifest framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/e8c0bec8ede2a2c8194a37897fc8382463074af2", "committedDate": "2020-07-25T13:26:11Z", "message": "add dependency mechanism to scrutinizers & update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6677c520879d4add5cf51ae7600a41b5f8ca70", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/7e6677c520879d4add5cf51ae7600a41b5f8ca70", "committedDate": "2020-07-25T13:26:12Z", "message": "add json creators to constraint entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "committedDate": "2020-07-25T13:52:13Z", "message": "adapt the backend (units tests are to be updated)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aba889be100074d8b0cbefddc65d6339eda8d2c", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/4aba889be100074d8b0cbefddc65d6339eda8d2c", "committedDate": "2020-07-25T13:52:15Z", "message": "remove the call to prepareDependencies() in the constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b8059ae554235622cc8803263f7dd2e1e7f3642", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/4b8059ae554235622cc8803263f7dd2e1e7f3642", "committedDate": "2020-07-25T13:52:15Z", "message": "update code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "committedDate": "2020-07-25T13:52:16Z", "message": "update code according to review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a0a2026861c84ee971e7de34fed598241e99d24", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/2a0a2026861c84ee971e7de34fed598241e99d24", "committedDate": "2020-07-25T13:53:21Z", "message": "update scrutinizers tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb5af6380f9567a07dad17e05a0251076998f2ff", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fb5af6380f9567a07dad17e05a0251076998f2ff", "committedDate": "2020-07-25T13:53:22Z", "message": "fix typo & update ConstraintsV1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62336661b5fbaaa9cc6e5ab2b24a114f5e3af152", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/62336661b5fbaaa9cc6e5ab2b24a114f5e3af152", "committedDate": "2020-07-25T13:53:23Z", "message": "log if a scrutinizer is skipped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54ccd7afd5c7db6a492f6e17afd6e3c97814bf6d", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/54ccd7afd5c7db6a492f6e17afd6e3c97814bf6d", "committedDate": "2020-07-25T13:53:23Z", "message": "update versioning handling in the backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47a5faa2684b424460e9d21d1c2fdfce1a01606e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/47a5faa2684b424460e9d21d1c2fdfce1a01606e", "committedDate": "2020-07-25T13:53:24Z", "message": "correct the order of \"actual\" and \"expected\" for assertEquals method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "852c8cf4dce8b100738acce2625452d849002762", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/852c8cf4dce8b100738acce2625452d849002762", "committedDate": "2020-07-25T13:53:24Z", "message": "use regex to check manifest versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "403d890a319a99bf3191fa22f00ec0cf643b50ce", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/403d890a319a99bf3191fa22f00ec0cf643b50ce", "committedDate": "2020-07-25T14:25:59Z", "message": "1. add wikibase-manager.js, wikibase-dialog.js, etc.\n2. move dialog/schema-alignment-dialog.js -> schema-alignment.js\n3. remove unused schema-alignment-dialog.html\n4. change most mentions of \"Wikidata\" to \"Wikibase\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5372cc64bb2435fbc42b3bda954bd00612a4773d", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/5372cc64bb2435fbc42b3bda954bd00612a4773d", "committedDate": "2020-07-25T14:26:01Z", "message": "add new line to end of file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "committedDate": "2020-07-25T14:26:01Z", "message": "support saving cookies for different Wikibases & fix LoginCommandTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9307dd214784c92221e114e2fcf5124f4fc1b80", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b9307dd214784c92221e114e2fcf5124f4fc1b80", "committedDate": "2020-07-25T14:26:02Z", "message": "fix schema related tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8571c2b7bc03fe06a2d7200f246ad60f46320cf1", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/8571c2b7bc03fe06a2d7200f246ad60f46320cf1", "committedDate": "2020-07-25T14:26:02Z", "message": "removed unused WikibaseCredentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebee3693d2089f92f8de8cc5351fb9bf799c24c8", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/ebee3693d2089f92f8de8cc5351fb9bf799c24c8", "committedDate": "2020-07-25T14:26:03Z", "message": "include MediaWiki API endpoint in the schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836ee53e93a7caf8530661941c209fd756e48d74", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/836ee53e93a7caf8530661941c209fd756e48d74", "committedDate": "2020-07-25T14:26:04Z", "message": "fetch language codes for different Wikibases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46ba79aab7a5277db0e7ce41bef51763cc574665", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/46ba79aab7a5277db0e7ce41bef51763cc574665", "committedDate": "2020-07-25T15:22:31Z", "message": "Merge remote-tracking branch 'origin/wikibase-support' into wikibase-support\n\n# Conflicts:\n#\textensions/wikidata/module/langs/translation-en.json\n#\textensions/wikidata/module/langs/translation-jp.json\n#\textensions/wikidata/module/langs/translation-nb_NO.json\n#\textensions/wikidata/tests/src/org/openrefine/wikidata/qa/WikidataConstraintFetcherTests.java"}, "afterCommit": {"oid": "836ee53e93a7caf8530661941c209fd756e48d74", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/836ee53e93a7caf8530661941c209fd756e48d74", "committedDate": "2020-07-25T14:26:04Z", "message": "fetch language codes for different Wikibases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502f4b3c496d026f1a47520d4eaed71abf7ac73e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/502f4b3c496d026f1a47520d4eaed71abf7ac73e", "committedDate": "2020-07-26T07:41:53Z", "message": "fix lgtm-bot alerts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd134fb8151407d53f11e06aeb93205550892532", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/dd134fb8151407d53f11e06aeb93205550892532", "committedDate": "2020-07-27T02:18:23Z", "message": "keep a connection map (MediaWiki API endpoint => Connection) in ConnectionManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "committedDate": "2020-07-27T08:21:41Z", "message": "simplify the constraint configurations of the manifest and remove lots of unnecessary code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30db8a6ef7d9e20ee32ffd583eeed7d7693fba7", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b30db8a6ef7d9e20ee32ffd583eeed7d7693fba7", "committedDate": "2020-07-27T08:25:47Z", "message": "add slash to the end of mediawiki.root"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "543bcf02645625a31c55384e4185fe6a1f080bcc", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/543bcf02645625a31c55384e4185fe6a1f080bcc", "committedDate": "2020-07-27T14:06:38Z", "message": "add manifest schema and use ajv to validate the manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e3136a6220e1f1a58be5c83d7b91ed948d986e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/35e3136a6220e1f1a58be5c83d7b91ed948d986e", "committedDate": "2020-07-28T01:37:36Z", "message": "remove JSONP support (Wikibase manifest host should support CORS)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56ec663f027ae6bdcca4bb56b9c31ae3039e04e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/a56ec663f027ae6bdcca4bb56b9c31ae3039e04e", "committedDate": "2020-07-28T01:41:53Z", "message": "save manifests on manifest update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a9c97bcca5bba7df6a2fdbc94a90f41eccc25c0", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/2a9c97bcca5bba7df6a2fdbc94a90f41eccc25c0", "committedDate": "2020-07-28T02:21:11Z", "message": "add unit tests for Manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8472fc1fc7b70fbca8cbc26d1122c9dd69b05fd6", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/8472fc1fc7b70fbca8cbc26d1122c9dd69b05fd6", "committedDate": "2020-07-28T02:22:48Z", "message": "include the exception in logger.error() method to make it easier to debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7aafd2987285ddf2d79938af8175fdacdc2eb08", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b7aafd2987285ddf2d79938af8175fdacdc2eb08", "committedDate": "2020-07-28T02:46:10Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab35a146c6bc17693e8027c03150b58b991bad4", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fab35a146c6bc17693e8027c03150b58b991bad4", "committedDate": "2020-07-28T02:47:17Z", "message": "include the message of ManifestException when calling respondError"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f117b6ccf51cf308fcd8fd070a02cc23635213b1", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/f117b6ccf51cf308fcd8fd070a02cc23635213b1", "committedDate": "2020-07-28T03:05:30Z", "message": "test multiple connections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a7e35997185a0d9d61c8a3b9b7b1b46d6fc990", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/c1a7e35997185a0d9d61c8a3b9b7b1b46d6fc990", "committedDate": "2020-07-28T03:32:54Z", "message": "test no manifest & test invalid manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e51a61599c8a2e2de02de19ff18257ffb73937", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/d7e51a61599c8a2e2de02de19ff18257ffb73937", "committedDate": "2020-07-28T07:22:23Z", "message": "adapt manage-account-dialog.js to support multiple Wikibase connections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e78fc140358c7c6170cf48c312d7b9b10a695aa6", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/e78fc140358c7c6170cf48c312d7b9b10a695aa6", "committedDate": "2020-07-28T07:23:15Z", "message": "remove unused variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0db49a8d10cfa77c6ae6be6f6a245041898fce6", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/d0db49a8d10cfa77c6ae6be6f6a245041898fce6", "committedDate": "2020-07-28T07:50:26Z", "message": "update translations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0bb9aa391e9347662be997b46d1049381c25726", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/e0bb9aa391e9347662be997b46d1049381c25726", "committedDate": "2020-07-28T07:54:42Z", "message": "update instance/subclass of related translations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4bcbc4258015d8c8bd6e37df7e87b90c4eb8f93", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/f4bcbc4258015d8c8bd6e37df7e87b90c4eb8f93", "committedDate": "2020-07-28T08:20:22Z", "message": "beautify import-schema-dialog.html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c53f4b868f8a956e953a20ea23c92fc48e177906", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/c53f4b868f8a956e953a20ea23c92fc48e177906", "committedDate": "2020-07-28T13:00:56Z", "message": "use \"${lang}\" variable in the reconciliation service endpoint of the manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c83ce29911beff86bbecbee0234fbd36975e5e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/e8c83ce29911beff86bbecbee0234fbd36975e5e", "committedDate": "2020-07-29T02:20:57Z", "message": "adapt schema-alignment.js after introducing \"${lang}\" variable in the reconciliation service endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0422fce490d7f447566733ea89d999e6642f1d", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fa0422fce490d7f447566733ea89d999e6642f1d", "committedDate": "2020-07-29T02:22:08Z", "message": "use WikibaseManager.getSelectedWikibaseApi() in SchemaAlignment._getPropertyType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d84268ac66fd6e75fce92d198a617df4aa89541", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/3d84268ac66fd6e75fce92d198a617df4aa89541", "committedDate": "2020-07-29T02:27:47Z", "message": "replace more mentions of \"Wikidata\" to \"Wikibase\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c03940fe3149e7bb36c2c4e80b3aebb79372766", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/1c03940fe3149e7bb36c2c4e80b3aebb79372766", "committedDate": "2020-07-29T02:56:57Z", "message": "Merge branch 'master' into wikibase-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced355db54b8b2cd5b3f2ad5362a1baacf3c0d12", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/ced355db54b8b2cd5b3f2ad5362a1baacf3c0d12", "committedDate": "2020-07-29T03:42:25Z", "message": "use WikibaseManager.getSelectedWikibaseApi() in previewrenderer.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a602e45d639ae1f21a2be4995d2be5beb7cdf643", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/a602e45d639ae1f21a2be4995d2be5beb7cdf643", "committedDate": "2020-07-30T02:52:59Z", "message": "support fetching language codes of different Wikibases in the frontend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d555c90f64fbb121c5e30a51783e81079fbea3d8", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/d555c90f64fbb121c5e30a51783e81079fbea3d8", "committedDate": "2020-07-30T07:28:03Z", "message": "skip EditInspector if missing 'property_constraint_pid' in the manifest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTY2Nzk2", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-458166796", "createdAt": "2020-07-30T07:54:49Z", "commit": {"oid": "d555c90f64fbb121c5e30a51783e81079fbea3d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NDo1MFrOG5YEjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NDo1MFrOG5YEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjM5OA==", "bodyText": "Not all scrutinizers rely on WikibaseQualityConstraints, so it is worth inspecting the batch even if no constraints are set up in the manifest.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r462816398", "createdAt": "2020-07-30T07:54:50Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java", "diffHunk": "@@ -105,10 +105,12 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            // Inspect the edits and generate warnings\n-            EditInspector inspector = new EditInspector(warningStore, manifest);\n-            inspector.inspect(editBatch);\n-            \n+            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d555c90f64fbb121c5e30a51783e81079fbea3d8"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962cc2e79d571d1fff19db0b2b9442ff3ce15124", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/962cc2e79d571d1fff19db0b2b9442ff3ce15124", "committedDate": "2020-07-30T08:33:08Z", "message": "improve unit tests for fetching lang codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "committedDate": "2020-07-30T09:31:03Z", "message": "skip scrutinizers depending on fetcher if 'property_constraint_pid' is missing in the manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25faa2ad8d5faec77c0e2eb6ab611f84a17efdf2", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/25faa2ad8d5faec77c0e2eb6ab611f84a17efdf2", "committedDate": "2020-08-03T01:47:05Z", "message": "make sure the schema alignment panel is set up before rendering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974dee6539ff59e36343a21e22319179d8c2bb65", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/974dee6539ff59e36343a21e22319179d8c2bb65", "committedDate": "2020-08-03T02:52:43Z", "message": "fix preview bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b24c3e37bd712e3f2f32a391250382125bacc7b", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/7b24c3e37bd712e3f2f32a391250382125bacc7b", "committedDate": "2020-08-03T03:09:24Z", "message": "add getters of \"instance of\" and \"subclass of\" to the Manifest interface and use them in NewItemScrutinizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d4d881741396b5e277e0c539a76a73ff19e0d5", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/23d4d881741396b5e277e0c539a76a73ff19e0d5", "committedDate": "2020-08-03T03:10:39Z", "message": "fix hardcode for Wikidata in WbItemVariable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d84eb912ed0ef6e7f8fc0ae8c011822dbd1a20", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/b7d84eb912ed0ef6e7f8fc0ae8c011822dbd1a20", "committedDate": "2020-08-03T09:59:12Z", "message": "rename 'entity_prefix' to 'site_iri' and move it from 'manifest.wikibase.properties' to 'manifest.wikibase'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af735edf68efb57a14475d39b19c18e67153bb87", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/af735edf68efb57a14475d39b19c18e67153bb87", "committedDate": "2020-08-05T13:33:43Z", "message": "include oauth configurations in the manifest & support logging in with owner-only consumer for Wikibases with the OAuth extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc82ba490713160975aa36f038e1cd6eb3a24a19", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fc82ba490713160975aa36f038e1cd6eb3a24a19", "committedDate": "2020-08-06T14:02:50Z", "message": "correct schema fallback logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63433d7c83bb153f70439de8b4c9e9ee9631db0e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/63433d7c83bb153f70439de8b4c9e9ee9631db0e", "committedDate": "2020-08-06T14:52:15Z", "message": "select default wikibase according to the saved schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47e9c17e2f30877ed7328648a27c4a6568484f4", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/a47e9c17e2f30877ed7328648a27c4a6568484f4", "committedDate": "2020-08-14T01:47:41Z", "message": "Merge branch 'master' into wikibase-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "328869f464fd4307be8ab731602d773bb62ffdbd", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/328869f464fd4307be8ab731602d773bb62ffdbd", "committedDate": "2020-08-15T08:40:17Z", "message": "include maxlag in the manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4b2daaba8484c7e4b3665d6408e94799eda890", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/8f4b2daaba8484c7e4b3665d6408e94799eda890", "committedDate": "2020-08-15T09:00:45Z", "message": "[backend] move maxlag setting from preferences to request parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0774bcffddefdd688160c8eec0596398c4c0bc", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/5a0774bcffddefdd688160c8eec0596398c4c0bc", "committedDate": "2020-08-16T02:45:48Z", "message": "support setting maxlag when uploading edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc45fda0d45b103b292830423b706b4a40c2c254", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/bc45fda0d45b103b292830423b706b4a40c2c254", "committedDate": "2020-08-16T07:16:18Z", "message": "Merge branch 'master' into wikibase-support\n\n# Conflicts:\n#\textensions/wikidata/module/langs/translation-nb_NO.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDcwODg0", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-468070884", "createdAt": "2020-08-16T14:53:46Z", "commit": {"oid": "bc45fda0d45b103b292830423b706b4a40c2c254"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDo1Mzo0NlrOHBTBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDo1Mzo0NlrOHBTBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyMjIxNw==", "bodyText": "This \"Manage Wikibase\" string should be localized. I would propose \"Select Wikibase instance\" to be more precise (\"manage\" is vague - I feel bad for using it in \"Manage Wikibase account\"\u2026)", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r471122217", "createdAt": "2020-08-16T14:53:46Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/scripts/menu-bar-extension.js", "diffHunk": "@@ -1,134 +1,153 @@\n // Load the localization file\n var dictionary = {};\n $.ajax({\n-\turl : \"command/core/load-language?\",\n-\ttype : \"POST\",\n-\tasync : false,\n-\tdata : {\n-\t  module : \"wikidata\",\n+  url: \"command/core/load-language?\",\n+  type: \"POST\",\n+  async: false,\n+  data: {\n+    module: \"wikidata\",\n //\t\tlang : lang\n-\t},\n-\tsuccess : function(data) {\n-\t\tdictionary = data['dictionary'];\n-\t\tlang = data['lang'];\n-\t}\n+  },\n+  success: function (data) {\n+    dictionary = data['dictionary'];\n+    lang = data['lang'];\n+  }\n });\n $.i18n().load(dictionary, lang);\n \n \n-\n ExporterManager.MenuItems.push({});\n-ExporterManager.MenuItems.push(\n-        {\n-            id:\"performWikibaseEdits\",\n-            label: $.i18n('wikidata-extension/wikidata-edits'),\n-            click: function() { PerformEditsDialog.checkAndLaunch(); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportQuickStatements\",\n-            label: $.i18n('wikidata-extension/qs-file'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\"); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportWikibaseSchema\",\n-            label: $.i18n('wikidata-extension/wikidata-schema'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\"); }\n-        }\n-);\n+ExporterManager.MenuItems.push({\n+  id: \"performWikibaseEdits\",\n+  label: $.i18n('wikibase-extension/wikibase-edits'),\n+  click: function () {\n+    PerformEditsDialog.checkAndLaunch();\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportQuickStatements\",\n+  label: $.i18n('wikibase-extension/qs-file'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\");\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportWikibaseSchema\",\n+  label: $.i18n('wikibase-extension/wikibase-schema'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\");\n+  }\n+});\n \n WikibaseExporterMenuBar = {};\n \n-WikibaseExporterMenuBar.exportTo = function(format) {\n-    var targetUrl = null;\n-    if (format ===\"quickstatements\") {\n-        targetUrl = \"statements.txt\";\n-    } else {\n-        targetUrl = \"schema.json\";\n-    }\n-    var form = document.createElement(\"form\");\n-    $(form).css(\"display\", \"none\")\n-        .attr(\"method\", \"post\")\n-        .attr(\"action\", \"command/core/export-rows/\"+targetUrl)\n-        .attr(\"target\", \"gridworks-export-\"+format);\n-    $('<input />')\n-        .attr(\"name\", \"engine\")\n-        .val(JSON.stringify(ui.browsingEngine.getJSON()))\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"project\")\n-        .val(theProject.id)\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"format\")\n-        .val(format)\n-        .appendTo(form);\n+WikibaseExporterMenuBar.exportTo = function (format) {\n+  var targetUrl = null;\n+  if (format === \"quickstatements\") {\n+    targetUrl = \"statements.txt\";\n+  } else {\n+    targetUrl = \"schema.json\";\n+  }\n+  var form = document.createElement(\"form\");\n+  $(form).css(\"display\", \"none\")\n+      .attr(\"method\", \"post\")\n+      .attr(\"action\", \"command/core/export-rows/\" + targetUrl)\n+      .attr(\"target\", \"gridworks-export-\" + format);\n+  $('<input />')\n+      .attr(\"name\", \"engine\")\n+      .val(JSON.stringify(ui.browsingEngine.getJSON()))\n+      .appendTo(form);\n+  $('<input />')\n+      .attr(\"name\", \"project\")\n+      .val(theProject.id)\n+      .appendTo(form);\n+  $('<input />')\n+      .attr(\"name\", \"format\")\n+      .val(format)\n+      .appendTo(form);\n \n-    document.body.appendChild(form);\n+  document.body.appendChild(form);\n \n-    window.open(\"about:blank\", \"gridworks-export\");\n-    form.submit();\n+  window.open(\"about:blank\", \"gridworks-export\");\n+  form.submit();\n \n-    document.body.removeChild(form);\n+  document.body.removeChild(form);\n };\n \n-WikibaseExporterMenuBar.checkSchemaAndExport = function(format) {\n-  var onSaved = function(callback) {\n-     WikibaseExporterMenuBar.exportTo(format); \n+WikibaseExporterMenuBar.checkSchemaAndExport = function (format) {\n+  var onSaved = function (callback) {\n+    WikibaseExporterMenuBar.exportTo(format);\n   };\n-  if (!SchemaAlignmentDialog.isSetUp()) {\n-     SchemaAlignmentDialog.launch(null);\n-  } else if (SchemaAlignmentDialog._hasUnsavedChanges) {\n-     SchemaAlignmentDialog._save(onSaved);\n+  if (!SchemaAlignment.isSetUp()) {\n+    SchemaAlignment.launch(null);\n+  } else if (SchemaAlignment._hasUnsavedChanges) {\n+    SchemaAlignment._save(onSaved);\n   } else {\n-     onSaved();\n+    onSaved();\n   }\n-}\n+};\n \n //extend the column header menu\n-$(function(){\n-    \n-    ExtensionBar.MenuItems.push(\n-        {\n-            \"id\":\"reconcile\",\n-                \"label\": $.i18n('wikidata-extension/menu-label'),\n-                \"submenu\" : [\n-                    {\n-                        id: \"wikidata/edit-schema\",\n-                        label: $.i18n('wikidata-extension/edit-wikidata-schema'),\n-                        click: function() { SchemaAlignmentDialog.launch(false); }\n-                    },\n-                    {\n-                        id:\"wikidata/manage-account\",\n-                        label: $.i18n('wikidata-extension/manage-wikidata-account'),\n-                        click: function() { ManageAccountDialog.checkAndLaunch(); }\n-                    },\n-                    {},\n-                    {\n-                        id: \"wikidata/import-schema\",\n-                        label: $.i18n('wikidata-extension/import-wikidata-schema'),\n-                        click: function() { ImportSchemaDialog.launch(); }\n-                    },\n-                    {               \n-                        id:\"wikidata/export-schema\",\n-                        label: $.i18n('wikidata-extension/export-schema'),\n-                        click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\"); }\n-                    },\n-                    {},\n-                    {\n-                        id:\"wikidata/perform-edits\",\n-                        label: $.i18n('wikidata-extension/perform-edits-on-wikidata'),\n-                        click: function() { PerformEditsDialog.checkAndLaunch(); }\n-                    },\n-                    {               \n-                        id:\"wikidata/export-qs\",\n-                        label: $.i18n('wikidata-extension/export-to-qs'),\n-                        click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\"); }\n-                    },\n+$(function () {\n \n-                ]\n-        }\n-    );\n+  ExtensionBar.MenuItems.push(\n+      {\n+        \"id\": \"reconcile\",\n+        \"label\": $.i18n('wikibase-extension/menu-label'),\n+        \"submenu\": [\n+          {\n+            id: \"wikidata/manager-wikibase\",\n+            label: \"Manage Wikibase\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc45fda0d45b103b292830423b706b4a40c2c254"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a001921c6a1d758b8a7ef2d9aa0eed3a119b60b", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/8a001921c6a1d758b8a7ef2d9aa0eed3a119b60b", "committedDate": "2020-08-17T01:28:50Z", "message": "rename \"Manage Wikibase\" to \"Select Wikibase instance\" and localize it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d82d3be84530d2418b1f3dd5c0c21c81f528af0", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/4d82d3be84530d2418b1f3dd5c0c21c81f528af0", "committedDate": "2020-08-17T02:52:22Z", "message": "fix manifest updating bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995026defd15b1e20384988eca515e05a7003944", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/995026defd15b1e20384988eca515e05a7003944", "committedDate": "2020-08-18T11:13:39Z", "message": "remove unnecessary commas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe802513df58707fb5e48bf1b9ddd78a61d2b44f", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fe802513df58707fb5e48bf1b9ddd78a61d2b44f", "committedDate": "2020-08-18T11:15:29Z", "message": "update translation-en.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d1fd5e8f9cb8be731c1a337d7e43d7321ee4aa", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/f5d1fd5e8f9cb8be731c1a337d7e43d7321ee4aa", "committedDate": "2020-08-19T04:58:20Z", "message": "include EditGroups in the manifest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/0ad8f88e423d9352452378ee3c6395710ed39e0a", "committedDate": "2020-08-19T07:08:03Z", "message": "add the reconciliation service from the manifest to standard services if it's not present yet when adding a new manifest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjc4NTU3", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-472678557", "createdAt": "2020-08-21T17:48:56Z", "commit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0ODo1NlrOHE2Amg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxNjowOVrOHE4iNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MTI0Mg==", "bodyText": "async: true is the default.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474841242", "createdAt": "2020-08-21T17:48:56Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/wikibase-manager.js", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Manages Wikibase instances.\n+ */\n+const WikibaseManager = {\n+  selected: \"Wikidata\",\n+  wikibases: {\n+    \"Wikidata\": WikidataManifestV1_0 // default one\n+  }\n+};\n+\n+WikibaseManager.getSelectedWikibase = function () {\n+  return WikibaseManager.wikibases[WikibaseManager.selected];\n+};\n+\n+WikibaseManager.getSelectedWikibaseRoot = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.root;\n+};\n+\n+WikibaseManager.getSelectedWikibaseMainPage = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.main_page;\n+};\n+\n+WikibaseManager.getSelectedWikibaseApi = function () {\n+  return WikibaseManager.getSelectedWikibase().mediawiki.api;\n+};\n+\n+WikibaseManager.getSelectedWikibaseName = function () {\n+  return WikibaseManager.selected;\n+};\n+\n+WikibaseManager.getSelectedWikibaseSiteIri = function () {\n+  return WikibaseManager.getSelectedWikibase().wikibase.site_iri;\n+};\n+\n+WikibaseManager.getSelectedWikibaseMaxlag = function() {\n+  return WikibaseManager.getSelectedWikibase().wikibase.maxlag;\n+};\n+\n+WikibaseManager.getSelectedWikibaseOAuth = function() {\n+  return WikibaseManager.getSelectedWikibase().oauth;\n+};\n+\n+WikibaseManager.getSelectedWikibaseEditGroupsURLSchema = function() {\n+  let editgroups = WikibaseManager.getSelectedWikibase().editgroups;\n+  return editgroups ? editgroups.url_schema : null;\n+};\n+\n+/**\n+ * Returns the default reconciliation service URL of the Wikibase,\n+ * such as \"https://wdreconcile.toolforge.org/${lang}/api\".\n+ *\n+ * Notice that there is a \"${lang}\" variable in the URL, which should\n+ * be replaced with the actual language code.\n+ */\n+WikibaseManager.getSelectedWikibaseReconEndpoint = function () {\n+  return WikibaseManager.getSelectedWikibase().reconciliation.endpoint;\n+};\n+\n+WikibaseManager.selectWikibase = function (wikibaseName) {\n+  if (WikibaseManager.wikibases.hasOwnProperty(wikibaseName)) {\n+    WikibaseManager.selected = wikibaseName;\n+  }\n+};\n+\n+WikibaseManager.getAllWikibases = function () {\n+  return WikibaseManager.wikibases;\n+};\n+\n+WikibaseManager.addWikibase = function (manifest) {\n+  WikibaseManager.wikibases[manifest.mediawiki.name] = manifest;\n+  WikibaseManager.saveWikibases();\n+};\n+\n+WikibaseManager.removeWikibase = function (wikibaseName) {\n+  delete WikibaseManager.wikibases[wikibaseName];\n+  WikibaseManager.saveWikibases();\n+};\n+\n+WikibaseManager.saveWikibases = function () {\n+  let manifests = [];\n+  for (let wikibaseName in WikibaseManager.wikibases) {\n+    if (WikibaseManager.wikibases.hasOwnProperty(wikibaseName)) {\n+      manifests.push(WikibaseManager.wikibases[wikibaseName])\n+    }\n+  }\n+\n+  Refine.wrapCSRF(function (token) {\n+    $.ajax({\n+      async: false,\n+      type: \"POST\",\n+      url: \"command/core/set-preference?\" + $.param({\n+        name: \"wikibase.manifests\"\n+      }),\n+      data: {\n+        \"value\": JSON.stringify(manifests),\n+        csrf_token: token\n+      },\n+      dataType: \"json\"\n+    });\n+  });\n+};\n+\n+WikibaseManager.loadWikibases = function (onDone) {\n+  $.ajax({\n+    async: true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDAwOA==", "bodyText": "Presumably this needs to be an http[s] URL. Is there any reason to leave it open ended?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474844008", "createdAt": "2020-08-21T17:54:24Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/wikibase-manifest-schema-v1.js", "diffHunk": "@@ -0,0 +1,120 @@\n+const WikibaseManifestSchemaV1 = {\n+  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n+  \"$id\": \"TBD\",\n+  \"type\": \"object\",\n+  \"description\": \"The schema validates Wikibase manifests with version 1.x. The manifest contains configurations of basic information (e.g. URL of the main page), extensions (e.g. OAuth extension) or external services (e.g. Reconciliation service) of a Wikibase\",\n+  \"properties\": {\n+    \"version\": {\n+      \"type\": \"string\",\n+      \"pattern\": \"^1\\\\.[0-9]+$\",\n+      \"description\": \"The version of the Wikibase manifest, in the format of 1.x\"\n+    },\n+    \"mediawiki\": {\n+      \"type\": \"object\",\n+      \"description\": \"The configurations of the MediaWiki engine\",\n+      \"properties\": {\n+        \"name\": {\n+          \"type\": \"string\",\n+          \"description\": \"The name of the Wikibase, such as 'Wikidata'\"\n+        },\n+        \"root\": {\n+          \"type\": \"string\",\n+          \"pattern\": \"^.*/$\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NjQxNg==", "bodyText": "Can the colors be inherited from the main project?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474846416", "createdAt": "2020-08-21T17:59:18Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/styles/dialogs/wikibase-dialog.less", "diffHunk": "@@ -0,0 +1,44 @@\n+@import-less url(\"../theme.less\");\n+\n+.wikibase-dialog p {\n+  padding: 0 10px 10px 10px\n+}\n+\n+.wikibase-dialog .add-wikibase-buttons {\n+  text-align: right;\n+}\n+\n+.wikibase-list-wrapper {\n+  max-height: 300px; overflow-y: auto\n+}\n+\n+.wikibase-dialog-wikibase-list {\n+  width: 100%\n+}\n+\n+.wikibase-dialog-wikibase-list tr:hover {\n+  background: #eee;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ==", "bodyText": "You probably want to check isMissingNode() before trying to get the textValue(). Do we have a test for a malformed manifest e.g. missing a version?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474866295", "createdAt": "2020-08-21T18:44:19Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ManifestParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Manifest parse(String manifestJson) throws ManifestException {\n+        JsonNode root;\n+        try {\n+            root = mapper.readTree(manifestJson);\n+        } catch (JsonProcessingException e) {\n+            throw new ManifestException(\"invalid manifest format\", e);\n+        }\n+\n+        String version = root.path(\"version\").textValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3MTcyMg==", "bodyText": "I was wondering why lowerValueProperty wasn't the same as or aligned with differenceWithinRangeConstraintPid but I guess it's just due to the complexity of the Wikidata constraint system.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474871722", "createdAt": "2020-08-21T18:56:17Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -23,9 +23,9 @@\n         DifferenceWithinRangeConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> lowerValueProperty = findValues(specs, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_PID);\n-                List<Value> minValue = findValues(specs, MINIMUM_VALUE_PID);\n-                List<Value> maxValue = findValues(specs, MAXIMUM_VALUE_PID);\n+                List<Value> lowerValueProperty = findValues(specs, differenceWithinRangeConstraintPid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY1NA=="}, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NDg0Mw==", "bodyText": "Can the the JSON property and the getter names be aligned here?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474874843", "createdAt": "2020-08-21T19:03:40Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -59,43 +59,62 @@\n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n     @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n+\n+    @JsonProperty(\"wikibasePrefix\")\n+    protected String baseIri;\n+\n+    @JsonProperty(\"mediaWikiApiEndpoint\")\n+    protected String mediaWikiApiEndpoint;\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    @JsonIgnore\n+    protected String editGroupsURLSchema;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"wikibasePrefix\") String baseIri,\n+                          @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n+                          @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n+        this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n+        this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"wikibasePrefix\")\n     public String getBaseIri() {\n         return baseIri;\n     }\n \n     /**\n      * @return the list of document expressions for this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"itemDocuments\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTAyNQ==", "bodyText": "Can the the JSON property and the getter names be aligned here?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474875025", "createdAt": "2020-08-21T19:04:01Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -59,43 +59,62 @@\n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n     @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n+\n+    @JsonProperty(\"wikibasePrefix\")\n+    protected String baseIri;\n+\n+    @JsonProperty(\"mediaWikiApiEndpoint\")\n+    protected String mediaWikiApiEndpoint;\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    @JsonIgnore\n+    protected String editGroupsURLSchema;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"wikibasePrefix\") String baseIri,\n+                          @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n+                          @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n+        this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n+        this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"wikibasePrefix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTgyOA==", "bodyText": "Can we pretty print this to make it easier to diff for future edits? It's small enough that it shouldn't have a performance impact.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474875828", "createdAt": "2020-08-21T19:05:55Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/tests/data/langcode/wikidata-monolingualtext-langcode.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"batchcomplete\":\"\",\"query\":{\"wbcontentlanguages\":{\"aa\":{\"code\":\"aa\"},\"ab\":{\"code\":\"ab\"},\"abs\":{\"code\":\"abs\"},\"ace\":{\"code\":\"ace\"},\"ady\":{\"code\":\"ady\"},\"ady-cyrl\":{\"code\":\"ady-cyrl\"},\"aeb\":{\"code\":\"aeb\"},\"aeb-arab\":{\"code\":\"aeb-arab\"},\"aeb-latn\":{\"code\":\"aeb-latn\"},\"af\":{\"code\":\"af\"},\"ak\":{\"code\":\"ak\"},\"aln\":{\"code\":\"aln\"},\"als\":{\"code\":\"als\"},\"alt\":{\"code\":\"alt\"},\"am\":{\"code\":\"am\"},\"ami\":{\"code\":\"ami\"},\"an\":{\"code\":\"an\"},\"ang\":{\"code\":\"ang\"},\"anp\":{\"code\":\"anp\"},\"ar\":{\"code\":\"ar\"},\"arc\":{\"code\":\"arc\"},\"arn\":{\"code\":\"arn\"},\"arq\":{\"code\":\"arq\"},\"ary\":{\"code\":\"ary\"},\"arz\":{\"code\":\"arz\"},\"as\":{\"code\":\"as\"},\"ase\":{\"code\":\"ase\"},\"ast\":{\"code\":\"ast\"},\"atj\":{\"code\":\"atj\"},\"av\":{\"code\":\"av\"},\"avk\":{\"code\":\"avk\"},\"awa\":{\"code\":\"awa\"},\"ay\":{\"code\":\"ay\"},\"az\":{\"code\":\"az\"},\"azb\":{\"code\":\"azb\"},\"ba\":{\"code\":\"ba\"},\"ban\":{\"code\":\"ban\"},\"bar\":{\"code\":\"bar\"},\"bbc\":{\"code\":\"bbc\"},\"bbc-latn\":{\"code\":\"bbc-latn\"},\"bcc\":{\"code\":\"bcc\"},\"bcl\":{\"code\":\"bcl\"},\"be\":{\"code\":\"be\"},\"be-tarask\":{\"code\":\"be-tarask\"},\"bg\":{\"code\":\"bg\"},\"bgn\":{\"code\":\"bgn\"},\"bh\":{\"code\":\"bh\"},\"bho\":{\"code\":\"bho\"},\"bi\":{\"code\":\"bi\"},\"bjn\":{\"code\":\"bjn\"},\"bm\":{\"code\":\"bm\"},\"bn\":{\"code\":\"bn\"},\"bo\":{\"code\":\"bo\"},\"bpy\":{\"code\":\"bpy\"},\"bqi\":{\"code\":\"bqi\"},\"br\":{\"code\":\"br\"},\"brh\":{\"code\":\"brh\"},\"bs\":{\"code\":\"bs\"},\"btm\":{\"code\":\"btm\"},\"bto\":{\"code\":\"bto\"},\"bug\":{\"code\":\"bug\"},\"bxr\":{\"code\":\"bxr\"},\"ca\":{\"code\":\"ca\"},\"cbk-zam\":{\"code\":\"cbk-zam\"},\"cdo\":{\"code\":\"cdo\"},\"ce\":{\"code\":\"ce\"},\"ceb\":{\"code\":\"ceb\"},\"ch\":{\"code\":\"ch\"},\"cho\":{\"code\":\"cho\"},\"chr\":{\"code\":\"chr\"},\"chy\":{\"code\":\"chy\"},\"ckb\":{\"code\":\"ckb\"},\"co\":{\"code\":\"co\"},\"cps\":{\"code\":\"cps\"},\"cr\":{\"code\":\"cr\"},\"crh\":{\"code\":\"crh\"},\"crh-cyrl\":{\"code\":\"crh-cyrl\"},\"crh-latn\":{\"code\":\"crh-latn\"},\"cs\":{\"code\":\"cs\"},\"csb\":{\"code\":\"csb\"},\"cu\":{\"code\":\"cu\"},\"cv\":{\"code\":\"cv\"},\"cy\":{\"code\":\"cy\"},\"da\":{\"code\":\"da\"},\"de\":{\"code\":\"de\"},\"de-at\":{\"code\":\"de-at\"},\"de-ch\":{\"code\":\"de-ch\"},\"din\":{\"code\":\"din\"},\"diq\":{\"code\":\"diq\"},\"dsb\":{\"code\":\"dsb\"},\"dtp\":{\"code\":\"dtp\"},\"dty\":{\"code\":\"dty\"},\"dv\":{\"code\":\"dv\"},\"dz\":{\"code\":\"dz\"},\"ee\":{\"code\":\"ee\"},\"egl\":{\"code\":\"egl\"},\"el\":{\"code\":\"el\"},\"eml\":{\"code\":\"eml\"},\"en\":{\"code\":\"en\"},\"en-ca\":{\"code\":\"en-ca\"},\"en-gb\":{\"code\":\"en-gb\"},\"eo\":{\"code\":\"eo\"},\"es\":{\"code\":\"es\"},\"es-419\":{\"code\":\"es-419\"},\"et\":{\"code\":\"et\"},\"eu\":{\"code\":\"eu\"},\"ext\":{\"code\":\"ext\"},\"fa\":{\"code\":\"fa\"},\"ff\":{\"code\":\"ff\"},\"fi\":{\"code\":\"fi\"},\"fit\":{\"code\":\"fit\"},\"fj\":{\"code\":\"fj\"},\"fkv\":{\"code\":\"fkv\"},\"fo\":{\"code\":\"fo\"},\"fr\":{\"code\":\"fr\"},\"frc\":{\"code\":\"frc\"},\"frp\":{\"code\":\"frp\"},\"frr\":{\"code\":\"frr\"},\"fur\":{\"code\":\"fur\"},\"fy\":{\"code\":\"fy\"},\"ga\":{\"code\":\"ga\"},\"gag\":{\"code\":\"gag\"},\"gan\":{\"code\":\"gan\"},\"gan-hans\":{\"code\":\"gan-hans\"},\"gan-hant\":{\"code\":\"gan-hant\"},\"gcr\":{\"code\":\"gcr\"},\"gd\":{\"code\":\"gd\"},\"gl\":{\"code\":\"gl\"},\"glk\":{\"code\":\"glk\"},\"gn\":{\"code\":\"gn\"},\"gom\":{\"code\":\"gom\"},\"gom-deva\":{\"code\":\"gom-deva\"},\"gom-latn\":{\"code\":\"gom-latn\"},\"gor\":{\"code\":\"gor\"},\"got\":{\"code\":\"got\"},\"grc\":{\"code\":\"grc\"},\"gsw\":{\"code\":\"gsw\"},\"gu\":{\"code\":\"gu\"},\"gv\":{\"code\":\"gv\"},\"ha\":{\"code\":\"ha\"},\"hak\":{\"code\":\"hak\"},\"haw\":{\"code\":\"haw\"},\"he\":{\"code\":\"he\"},\"hi\":{\"code\":\"hi\"},\"hif\":{\"code\":\"hif\"},\"hif-latn\":{\"code\":\"hif-latn\"},\"hil\":{\"code\":\"hil\"},\"ho\":{\"code\":\"ho\"},\"hr\":{\"code\":\"hr\"},\"hrx\":{\"code\":\"hrx\"},\"hsb\":{\"code\":\"hsb\"},\"ht\":{\"code\":\"ht\"},\"hu\":{\"code\":\"hu\"},\"hy\":{\"code\":\"hy\"},\"hyw\":{\"code\":\"hyw\"},\"hz\":{\"code\":\"hz\"},\"ia\":{\"code\":\"ia\"},\"id\":{\"code\":\"id\"},\"ie\":{\"code\":\"ie\"},\"ig\":{\"code\":\"ig\"},\"ii\":{\"code\":\"ii\"},\"ik\":{\"code\":\"ik\"},\"ike-cans\":{\"code\":\"ike-cans\"},\"ike-latn\":{\"code\":\"ike-latn\"},\"ilo\":{\"code\":\"ilo\"},\"inh\":{\"code\":\"inh\"},\"io\":{\"code\":\"io\"},\"is\":{\"code\":\"is\"},\"it\":{\"code\":\"it\"},\"iu\":{\"code\":\"iu\"},\"ja\":{\"code\":\"ja\"},\"jam\":{\"code\":\"jam\"},\"jbo\":{\"code\":\"jbo\"},\"jut\":{\"code\":\"jut\"},\"jv\":{\"code\":\"jv\"},\"ka\":{\"code\":\"ka\"},\"kaa\":{\"code\":\"kaa\"},\"kab\":{\"code\":\"kab\"},\"kbd\":{\"code\":\"kbd\"},\"kbd-cyrl\":{\"code\":\"kbd-cyrl\"},\"kbp\":{\"code\":\"kbp\"},\"kea\":{\"code\":\"kea\"},\"kg\":{\"code\":\"kg\"},\"khw\":{\"code\":\"khw\"},\"ki\":{\"code\":\"ki\"},\"kiu\":{\"code\":\"kiu\"},\"kj\":{\"code\":\"kj\"},\"kjp\":{\"code\":\"kjp\"},\"kk\":{\"code\":\"kk\"},\"kk-arab\":{\"code\":\"kk-arab\"},\"kk-cn\":{\"code\":\"kk-cn\"},\"kk-cyrl\":{\"code\":\"kk-cyrl\"},\"kk-kz\":{\"code\":\"kk-kz\"},\"kk-latn\":{\"code\":\"kk-latn\"},\"kk-tr\":{\"code\":\"kk-tr\"},\"kl\":{\"code\":\"kl\"},\"km\":{\"code\":\"km\"},\"kn\":{\"code\":\"kn\"},\"ko\":{\"code\":\"ko\"},\"ko-kp\":{\"code\":\"ko-kp\"},\"koi\":{\"code\":\"koi\"},\"kr\":{\"code\":\"kr\"},\"krc\":{\"code\":\"krc\"},\"kri\":{\"code\":\"kri\"},\"krj\":{\"code\":\"krj\"},\"krl\":{\"code\":\"krl\"},\"ks\":{\"code\":\"ks\"},\"ks-arab\":{\"code\":\"ks-arab\"},\"ks-deva\":{\"code\":\"ks-deva\"},\"ksh\":{\"code\":\"ksh\"},\"ku\":{\"code\":\"ku\"},\"ku-arab\":{\"code\":\"ku-arab\"},\"ku-latn\":{\"code\":\"ku-latn\"},\"kum\":{\"code\":\"kum\"},\"kv\":{\"code\":\"kv\"},\"kw\":{\"code\":\"kw\"},\"ky\":{\"code\":\"ky\"},\"la\":{\"code\":\"la\"},\"lad\":{\"code\":\"lad\"},\"lb\":{\"code\":\"lb\"},\"lbe\":{\"code\":\"lbe\"},\"lez\":{\"code\":\"lez\"},\"lfn\":{\"code\":\"lfn\"},\"lg\":{\"code\":\"lg\"},\"li\":{\"code\":\"li\"},\"lij\":{\"code\":\"lij\"},\"liv\":{\"code\":\"liv\"},\"lki\":{\"code\":\"lki\"},\"lld\":{\"code\":\"lld\"},\"lmo\":{\"code\":\"lmo\"},\"ln\":{\"code\":\"ln\"},\"lo\":{\"code\":\"lo\"},\"loz\":{\"code\":\"loz\"},\"lrc\":{\"code\":\"lrc\"},\"lt\":{\"code\":\"lt\"},\"ltg\":{\"code\":\"ltg\"},\"lus\":{\"code\":\"lus\"},\"luz\":{\"code\":\"luz\"},\"lv\":{\"code\":\"lv\"},\"lzh\":{\"code\":\"lzh\"},\"lzz\":{\"code\":\"lzz\"},\"mai\":{\"code\":\"mai\"},\"map-bms\":{\"code\":\"map-bms\"},\"mdf\":{\"code\":\"mdf\"},\"mg\":{\"code\":\"mg\"},\"mh\":{\"code\":\"mh\"},\"mhr\":{\"code\":\"mhr\"},\"mi\":{\"code\":\"mi\"},\"min\":{\"code\":\"min\"},\"mk\":{\"code\":\"mk\"},\"ml\":{\"code\":\"ml\"},\"mn\":{\"code\":\"mn\"},\"mni\":{\"code\":\"mni\"},\"mnw\":{\"code\":\"mnw\"},\"mo\":{\"code\":\"mo\"},\"mr\":{\"code\":\"mr\"},\"mrj\":{\"code\":\"mrj\"},\"ms\":{\"code\":\"ms\"},\"mt\":{\"code\":\"mt\"},\"mus\":{\"code\":\"mus\"},\"mwl\":{\"code\":\"mwl\"},\"my\":{\"code\":\"my\"},\"myv\":{\"code\":\"myv\"},\"mzn\":{\"code\":\"mzn\"},\"na\":{\"code\":\"na\"},\"nah\":{\"code\":\"nah\"},\"nan\":{\"code\":\"nan\"},\"nap\":{\"code\":\"nap\"},\"nb\":{\"code\":\"nb\"},\"nds\":{\"code\":\"nds\"},\"nds-nl\":{\"code\":\"nds-nl\"},\"ne\":{\"code\":\"ne\"},\"new\":{\"code\":\"new\"},\"ng\":{\"code\":\"ng\"},\"niu\":{\"code\":\"niu\"},\"nl\":{\"code\":\"nl\"},\"nn\":{\"code\":\"nn\"},\"no\":{\"code\":\"no\"},\"nod\":{\"code\":\"nod\"},\"nov\":{\"code\":\"nov\"},\"nqo\":{\"code\":\"nqo\"},\"nrm\":{\"code\":\"nrm\"},\"nso\":{\"code\":\"nso\"},\"nv\":{\"code\":\"nv\"},\"ny\":{\"code\":\"ny\"},\"nys\":{\"code\":\"nys\"},\"oc\":{\"code\":\"oc\"},\"olo\":{\"code\":\"olo\"},\"om\":{\"code\":\"om\"},\"or\":{\"code\":\"or\"},\"os\":{\"code\":\"os\"},\"ota\":{\"code\":\"ota\"},\"pa\":{\"code\":\"pa\"},\"pag\":{\"code\":\"pag\"},\"pam\":{\"code\":\"pam\"},\"pap\":{\"code\":\"pap\"},\"pcd\":{\"code\":\"pcd\"},\"pdc\":{\"code\":\"pdc\"},\"pdt\":{\"code\":\"pdt\"},\"pfl\":{\"code\":\"pfl\"},\"pi\":{\"code\":\"pi\"},\"pih\":{\"code\":\"pih\"},\"pl\":{\"code\":\"pl\"},\"pms\":{\"code\":\"pms\"},\"pnb\":{\"code\":\"pnb\"},\"pnt\":{\"code\":\"pnt\"},\"prg\":{\"code\":\"prg\"},\"ps\":{\"code\":\"ps\"},\"pt\":{\"code\":\"pt\"},\"pt-br\":{\"code\":\"pt-br\"},\"qu\":{\"code\":\"qu\"},\"qug\":{\"code\":\"qug\"},\"rgn\":{\"code\":\"rgn\"},\"rif\":{\"code\":\"rif\"},\"rm\":{\"code\":\"rm\"},\"rmf\":{\"code\":\"rmf\"},\"rmy\":{\"code\":\"rmy\"},\"rn\":{\"code\":\"rn\"},\"ro\":{\"code\":\"ro\"},\"roa-tara\":{\"code\":\"roa-tara\"},\"ru\":{\"code\":\"ru\"},\"rue\":{\"code\":\"rue\"},\"rup\":{\"code\":\"rup\"},\"ruq\":{\"code\":\"ruq\"},\"ruq-cyrl\":{\"code\":\"ruq-cyrl\"},\"ruq-latn\":{\"code\":\"ruq-latn\"},\"rw\":{\"code\":\"rw\"},\"rwr\":{\"code\":\"rwr\"},\"sa\":{\"code\":\"sa\"},\"sah\":{\"code\":\"sah\"},\"sat\":{\"code\":\"sat\"},\"sc\":{\"code\":\"sc\"},\"scn\":{\"code\":\"scn\"},\"sco\":{\"code\":\"sco\"},\"sd\":{\"code\":\"sd\"},\"sdc\":{\"code\":\"sdc\"},\"sdh\":{\"code\":\"sdh\"},\"se\":{\"code\":\"se\"},\"sei\":{\"code\":\"sei\"},\"ses\":{\"code\":\"ses\"},\"sg\":{\"code\":\"sg\"},\"sgs\":{\"code\":\"sgs\"},\"sh\":{\"code\":\"sh\"},\"shi\":{\"code\":\"shi\"},\"shi-latn\":{\"code\":\"shi-latn\"},\"shi-tfng\":{\"code\":\"shi-tfng\"},\"shn\":{\"code\":\"shn\"},\"shy-latn\":{\"code\":\"shy-latn\"},\"si\":{\"code\":\"si\"},\"sjd\":{\"code\":\"sjd\"},\"sje\":{\"code\":\"sje\"},\"sju\":{\"code\":\"sju\"},\"sk\":{\"code\":\"sk\"},\"skr\":{\"code\":\"skr\"},\"skr-arab\":{\"code\":\"skr-arab\"},\"sl\":{\"code\":\"sl\"},\"sli\":{\"code\":\"sli\"},\"sm\":{\"code\":\"sm\"},\"sma\":{\"code\":\"sma\"},\"smj\":{\"code\":\"smj\"},\"smn\":{\"code\":\"smn\"},\"sms\":{\"code\":\"sms\"},\"sn\":{\"code\":\"sn\"},\"so\":{\"code\":\"so\"},\"sq\":{\"code\":\"sq\"},\"sr\":{\"code\":\"sr\"},\"sr-ec\":{\"code\":\"sr-ec\"},\"sr-el\":{\"code\":\"sr-el\"},\"srn\":{\"code\":\"srn\"},\"srq\":{\"code\":\"srq\"},\"ss\":{\"code\":\"ss\"},\"st\":{\"code\":\"st\"},\"stq\":{\"code\":\"stq\"},\"sty\":{\"code\":\"sty\"},\"su\":{\"code\":\"su\"},\"sv\":{\"code\":\"sv\"},\"sw\":{\"code\":\"sw\"},\"szl\":{\"code\":\"szl\"},\"szy\":{\"code\":\"szy\"},\"ta\":{\"code\":\"ta\"},\"tay\":{\"code\":\"tay\"},\"tcy\":{\"code\":\"tcy\"},\"te\":{\"code\":\"te\"},\"tet\":{\"code\":\"tet\"},\"tg\":{\"code\":\"tg\"},\"tg-cyrl\":{\"code\":\"tg-cyrl\"},\"tg-latn\":{\"code\":\"tg-latn\"},\"th\":{\"code\":\"th\"},\"ti\":{\"code\":\"ti\"},\"tk\":{\"code\":\"tk\"},\"tl\":{\"code\":\"tl\"},\"tly\":{\"code\":\"tly\"},\"tn\":{\"code\":\"tn\"},\"to\":{\"code\":\"to\"},\"tpi\":{\"code\":\"tpi\"},\"tr\":{\"code\":\"tr\"},\"tru\":{\"code\":\"tru\"},\"trv\":{\"code\":\"trv\"},\"ts\":{\"code\":\"ts\"},\"tt\":{\"code\":\"tt\"},\"tt-cyrl\":{\"code\":\"tt-cyrl\"},\"tt-latn\":{\"code\":\"tt-latn\"},\"tum\":{\"code\":\"tum\"},\"tw\":{\"code\":\"tw\"},\"ty\":{\"code\":\"ty\"},\"tyv\":{\"code\":\"tyv\"},\"tzm\":{\"code\":\"tzm\"},\"udm\":{\"code\":\"udm\"},\"ug\":{\"code\":\"ug\"},\"ug-arab\":{\"code\":\"ug-arab\"},\"ug-latn\":{\"code\":\"ug-latn\"},\"uk\":{\"code\":\"uk\"},\"ur\":{\"code\":\"ur\"},\"uz\":{\"code\":\"uz\"},\"uz-cyrl\":{\"code\":\"uz-cyrl\"},\"uz-latn\":{\"code\":\"uz-latn\"},\"ve\":{\"code\":\"ve\"},\"vec\":{\"code\":\"vec\"},\"vep\":{\"code\":\"vep\"},\"vi\":{\"code\":\"vi\"},\"vls\":{\"code\":\"vls\"},\"vmf\":{\"code\":\"vmf\"},\"vo\":{\"code\":\"vo\"},\"vot\":{\"code\":\"vot\"},\"vro\":{\"code\":\"vro\"},\"wa\":{\"code\":\"wa\"},\"war\":{\"code\":\"war\"},\"wo\":{\"code\":\"wo\"},\"wuu\":{\"code\":\"wuu\"},\"xal\":{\"code\":\"xal\"},\"xh\":{\"code\":\"xh\"},\"xmf\":{\"code\":\"xmf\"},\"xsy\":{\"code\":\"xsy\"},\"yi\":{\"code\":\"yi\"},\"yo\":{\"code\":\"yo\"},\"yue\":{\"code\":\"yue\"},\"za\":{\"code\":\"za\"},\"zea\":{\"code\":\"zea\"},\"zgh\":{\"code\":\"zgh\"},\"zh\":{\"code\":\"zh\"},\"zh-cn\":{\"code\":\"zh-cn\"},\"zh-hans\":{\"code\":\"zh-hans\"},\"zh-hant\":{\"code\":\"zh-hant\"},\"zh-hk\":{\"code\":\"zh-hk\"},\"zh-mo\":{\"code\":\"zh-mo\"},\"zh-my\":{\"code\":\"zh-my\"},\"zh-sg\":{\"code\":\"zh-sg\"},\"zh-tw\":{\"code\":\"zh-tw\"},\"zu\":{\"code\":\"zu\"},\"und\":{\"code\":\"und\"},\"mis\":{\"code\":\"mis\"},\"mul\":{\"code\":\"mul\"},\"zxx\":{\"code\":\"zxx\"},\"abe\":{\"code\":\"abe\"},\"abq\":{\"code\":\"abq\"},\"abq-latn\":{\"code\":\"abq-latn\"},\"alc\":{\"code\":\"alc\"},\"bdr\":{\"code\":\"bdr\"},\"bnn\":{\"code\":\"bnn\"},\"brx\":{\"code\":\"brx\"},\"ccp\":{\"code\":\"ccp\"},\"chn\":{\"code\":\"chn\"},\"ckt\":{\"code\":\"ckt\"},\"clc\":{\"code\":\"clc\"},\"cnr\":{\"code\":\"cnr\"},\"cop\":{\"code\":\"cop\"},\"crb\":{\"code\":\"crb\"},\"dag\":{\"code\":\"dag\"},\"el-cy\":{\"code\":\"el-cy\"},\"ett\":{\"code\":\"ett\"},\"eya\":{\"code\":\"eya\"},\"fos\":{\"code\":\"fos\"},\"fr-ca\":{\"code\":\"fr-ca\"},\"frm\":{\"code\":\"frm\"},\"fro\":{\"code\":\"fro\"},\"fuf\":{\"code\":\"fuf\"},\"gez\":{\"code\":\"gez\"},\"gil\":{\"code\":\"gil\"},\"gmy\":{\"code\":\"gmy\"},\"hai\":{\"code\":\"hai\"},\"haz\":{\"code\":\"haz\"},\"hbo\":{\"code\":\"hbo\"},\"kjh\":{\"code\":\"kjh\"},\"kld\":{\"code\":\"kld\"},\"koy\":{\"code\":\"koy\"},\"lag\":{\"code\":\"lag\"},\"lcm\":{\"code\":\"lcm\"},\"lkt\":{\"code\":\"lkt\"},\"mfa\":{\"code\":\"mfa\"},\"mic\":{\"code\":\"mic\"},\"mid\":{\"code\":\"mid\"},\"mnc\":{\"code\":\"mnc\"},\"moe\":{\"code\":\"moe\"},\"non\":{\"code\":\"non\"},\"nr\":{\"code\":\"nr\"},\"nrf-gg\":{\"code\":\"nrf-gg\"},\"nrf-je\":{\"code\":\"nrf-je\"},\"nsk\":{\"code\":\"nsk\"},\"nxm\":{\"code\":\"nxm\"},\"ood\":{\"code\":\"ood\"},\"otk\":{\"code\":\"otk\"},\"peo\":{\"code\":\"peo\"},\"pi-sidd\":{\"code\":\"pi-sidd\"},\"pjt\":{\"code\":\"pjt\"},\"ppu\":{\"code\":\"ppu\"},\"pwn\":{\"code\":\"pwn\"},\"pyu\":{\"code\":\"pyu\"},\"quc\":{\"code\":\"quc\"},\"qya\":{\"code\":\"qya\"},\"rar\":{\"code\":\"rar\"},\"rm-puter\":{\"code\":\"rm-puter\"},\"rm-rumgr\":{\"code\":\"rm-rumgr\"},\"rm-surmiran\":{\"code\":\"rm-surmiran\"},\"rm-sursilv\":{\"code\":\"rm-sursilv\"},\"rm-sutsilv\":{\"code\":\"rm-sutsilv\"},\"rm-vallader\":{\"code\":\"rm-vallader\"},\"sa-sidd\":{\"code\":\"sa-sidd\"},\"shy\":{\"code\":\"shy\"},\"sia\":{\"code\":\"sia\"},\"sjk\":{\"code\":\"sjk\"},\"sjn\":{\"code\":\"sjn\"},\"sjt\":{\"code\":\"sjt\"},\"ssf\":{\"code\":\"ssf\"},\"syc\":{\"code\":\"syc\"},\"tlb\":{\"code\":\"tlb\"},\"tli\":{\"code\":\"tli\"},\"tnq\":{\"code\":\"tnq\"},\"tzl\":{\"code\":\"tzl\"},\"uga\":{\"code\":\"uga\"},\"umu\":{\"code\":\"umu\"},\"uun\":{\"code\":\"uun\"},\"wls\":{\"code\":\"wls\"},\"xpu\":{\"code\":\"xpu\"},\"yap\":{\"code\":\"yap\"},\"zun\":{\"code\":\"zun\"}}}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NjM4NQ==", "bodyText": "Looks like we're moving towards having manifests provided to us, so this shouldn't be as big of an issue.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474876385", "createdAt": "2020-08-21T19:07:16Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/tests/data/manifest/wikidata-manifest-v1.0.json", "diffHunk": "@@ -0,0 +1,166 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjU2Mg=="}, "originalCommit": {"oid": "997c121a700b65df10661dd4bd4e6b420c43a828"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4MjYxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .attr(\"target\", \"gridworks-export-\" + format);\n          \n          \n            \n                  .attr(\"target\", \"openrefine-export-\" + format);", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474882613", "createdAt": "2020-08-21T19:16:09Z", "author": {"login": "tfmorris"}, "path": "extensions/wikidata/module/scripts/menu-bar-extension.js", "diffHunk": "@@ -1,134 +1,153 @@\n // Load the localization file\n var dictionary = {};\n $.ajax({\n-\turl : \"command/core/load-language?\",\n-\ttype : \"POST\",\n-\tasync : false,\n-\tdata : {\n-\t  module : \"wikidata\",\n+  url: \"command/core/load-language?\",\n+  type: \"POST\",\n+  async: false,\n+  data: {\n+    module: \"wikidata\",\n //\t\tlang : lang\n-\t},\n-\tsuccess : function(data) {\n-\t\tdictionary = data['dictionary'];\n-\t\tlang = data['lang'];\n-\t}\n+  },\n+  success: function (data) {\n+    dictionary = data['dictionary'];\n+    lang = data['lang'];\n+  }\n });\n $.i18n().load(dictionary, lang);\n \n \n-\n ExporterManager.MenuItems.push({});\n-ExporterManager.MenuItems.push(\n-        {\n-            id:\"performWikibaseEdits\",\n-            label: $.i18n('wikidata-extension/wikidata-edits'),\n-            click: function() { PerformEditsDialog.checkAndLaunch(); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportQuickStatements\",\n-            label: $.i18n('wikidata-extension/qs-file'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\"); }\n-        });\n-ExporterManager.MenuItems.push(\n-        {               \n-            id:\"exportWikibaseSchema\",\n-            label: $.i18n('wikidata-extension/wikidata-schema'),\n-            click: function() { WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\"); }\n-        }\n-);\n+ExporterManager.MenuItems.push({\n+  id: \"performWikibaseEdits\",\n+  label: $.i18n('wikibase-extension/wikibase-edits'),\n+  click: function () {\n+    PerformEditsDialog.checkAndLaunch();\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportQuickStatements\",\n+  label: $.i18n('wikibase-extension/qs-file'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"quickstatements\");\n+  }\n+});\n+ExporterManager.MenuItems.push({\n+  id: \"exportWikibaseSchema\",\n+  label: $.i18n('wikibase-extension/wikibase-schema'),\n+  click: function () {\n+    WikibaseExporterMenuBar.checkSchemaAndExport(\"wikibase-schema\");\n+  }\n+});\n \n WikibaseExporterMenuBar = {};\n \n-WikibaseExporterMenuBar.exportTo = function(format) {\n-    var targetUrl = null;\n-    if (format ===\"quickstatements\") {\n-        targetUrl = \"statements.txt\";\n-    } else {\n-        targetUrl = \"schema.json\";\n-    }\n-    var form = document.createElement(\"form\");\n-    $(form).css(\"display\", \"none\")\n-        .attr(\"method\", \"post\")\n-        .attr(\"action\", \"command/core/export-rows/\"+targetUrl)\n-        .attr(\"target\", \"gridworks-export-\"+format);\n-    $('<input />')\n-        .attr(\"name\", \"engine\")\n-        .attr(\"value\", JSON.stringify(ui.browsingEngine.getJSON()))\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"project\")\n-        .attr(\"value\", theProject.id)\n-        .appendTo(form);\n-    $('<input />')\n-        .attr(\"name\", \"format\")\n-        .attr(\"value\", format)\n-        .appendTo(form);\n+WikibaseExporterMenuBar.exportTo = function (format) {\n+  var targetUrl = null;\n+  if (format === \"quickstatements\") {\n+    targetUrl = \"statements.txt\";\n+  } else {\n+    targetUrl = \"schema.json\";\n+  }\n+  var form = document.createElement(\"form\");\n+  $(form).css(\"display\", \"none\")\n+      .attr(\"method\", \"post\")\n+      .attr(\"action\", \"command/core/export-rows/\" + targetUrl)\n+      .attr(\"target\", \"gridworks-export-\" + format);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNjM5OQ=="}, "originalCommit": {"oid": "3db13647c036f8818c3388dd9d6d4c3c91010e12"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e", "committedDate": "2020-08-22T06:10:03Z", "message": "Merge branch 'master' into wikibase-support\n\n# Conflicts:\n#\textensions/wikidata/module/scripts/schema-alignment.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffd8f1744476303be46ea7984b53ccc5e7692c3", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/1ffd8f1744476303be46ea7984b53ccc5e7692c3", "committedDate": "2020-08-22T07:24:50Z", "message": "update according to review feedback\n\n1. use inherited color variable\n2. rename 'gridwroks' to 'openrefine'\n3. remove unnecessary 'async: true'\n4. add 'format: url' validation to urls to the schema"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTAyNTcz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-472902573", "createdAt": "2020-08-22T06:40:56Z", "commit": {"oid": "fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNjo0MDo1N1rOHFDDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNjo0Mjo0OFrOHFDDyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NDkwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"wikibase-addition/explain-add-manifest-via-url\": \"Enter the Wikibase manifest's URL(recommended, this is helpful for keeping track of the latest manifest):\",\n          \n          \n            \n                \"wikibase-addition/explain-add-manifest-via-url\": \"Enter the Wikibase manifest's URL (recommended, this is helpful for keeping track of the latest manifest):\",", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475054904", "createdAt": "2020-08-22T06:40:57Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -1,121 +1,139 @@\n {\n-    \"wikidata-extension/menu-label\": \"Wikidata\",\n-    \"wikidata-extension/edit-wikidata-schema\": \"Edit Wikidata schema\",\n-    \"wikidata-extension/import-wikidata-schema\": \"Import schema\",\n-    \"wikidata-extension/manage-wikidata-account\": \"Manage Wikidata account\",\n-    \"wikidata-extension/perform-edits-on-wikidata\": \"Upload edits to Wikidata\",\n-    \"wikidata-extension/export-to-qs\": \"Export to QuickStatements\",\n-    \"wikidata-extension/qs-file\": \"QuickStatements file\",\n-    \"wikidata-extension/wikidata-edits\": \"Wikidata edits\u2026\",\n-    \"wikidata-extension/export-schema\": \"Export schema\",\n-    \"wikidata-extension/export-wikidata-schema\": \"Export Wikidata schema\",\n-    \"wikidata-extension/wikidata-schema\": \"Wikidata schema\",\n-    \"wikidata-extension/quickstatements-export-name\": \"QuickStatements\",\n-    \"wikidata-schema/dialog-header\": \"Align to Wikidata\",\n-    \"wikidata-schema/dialog-explanation\": \"The Wikidata schema below specifies how your tabular data will be transformed into Wikidata edits. You can drag and drop the column names below in most input boxes: for each row, edits will be generated with the values in these columns.\",\n-    \"wikidata-schema/preview-explanation\": \"This tab shows the first edits (out of {nb_edits}) that will be made once you upload the changes to Wikidata. You can use facets to inspect the edits on particular items.\",\n-    \"wikidata-schema/schema-tab-header\": \"Schema\",\n-    \"wikidata-schema/warnings-tab-header\": \"Issues\",\n-    \"wikidata-schema/edits-preview-tab-header\": \"Preview\",\n-    \"wikidata-schema/statements-header\": \"Statements\",\n-    \"wikidata-schema/terms-header\": \"Terms\",\n-    \"wikidata-schema/empty-statements\": \"no statements added\",\n-    \"wikidata-schema/empty-terms\": \"no labels, descriptions or aliases added\",\n-    \"wikidata-schema/add-item-button\": \"add item\",\n-    \"wikidata-schema/add-term\": \"add term\",\n-    \"wikidata-schema/remove\": \"remove\",\n-    \"wikidata-schema/add-statement\": \"add statement\",\n-    \"wikidata-schema/add-value\": \"add value\",\n-    \"wikidata-schema/add-qualifier\": \"add qualifier\",\n-    \"wikidata-schema/copy-reference\": \"copy\",\n-    \"wikidata-schema/paste-reference\": \"paste reference\",\n-    \"wikidata-schema/reference-copied\": \"copied\",\n-    \"wikidata-schema/add-reference\": \"add reference\",\n-    \"wikidata-schema/add-reference-snak\": \"add\",\n-    \"wikidata-schema/property-placeholder\": \"property\",\n-    \"wikidata-schema/nb-references\": \"&nbsp;references\",\n-    \"wikidata-schema/remove-column\": \"remove column\",\n-    \"wikidata-schema/label\": \"Label\",\n-    \"wikidata-schema/label-if-new\": \"Label (do not override)\",\n-    \"wikidata-schema/label-override\": \"Label (override if present)\",\n-    \"wikidata-schema/description\": \"Description\",\n-    \"wikidata-schema/description-if-new\": \"Description (do not override)\",\n-    \"wikidata-schema/description-override\": \"Description (override if present)\",\n-    \"wikidata-schema/override-term\": \"override if present\",\n-    \"wikidata-schema/alias\": \"Alias\",\n-    \"wikidata-schema/item-or-reconciled-column\": \"type item or drag reconciled column here\",\n-    \"wikidata-schema/amount\": \"amount\",\n-    \"wikidata-schema/unit\": \"unit\",\n-    \"wikidata-schema/full-url\": \"full URL including the protocol\",\n-    \"wikidata-schema/tabular-data-with-prefix\": \"filename starting with \\\"Data:\\\"\",\n-    \"wikidata-schema/commons-media\": \"filename\",\n-    \"wikidata-schema/math-expression\": \"mathematical expression\",\n-    \"wikidata-schema/geoshape-with-prefix\": \"filename starting with \\\"Data:\\\"\",\n-    \"wikidata-schema/datatype-not-supported-yet\": \"This datatype is not supported yet, sorry.\",\n-    \"wikidata-schema/invalid-schema-warning-issues\": \"Your schema is incomplete, fix it to see the issues.\",\n-    \"wikidata-schema/invalid-schema-warning-preview\": \"Your schema is incomplete, fix it to see the preview.\",\n-    \"wikidata-schema/discard-button\": \"Discard changes\",\n-    \"wikidata-schema/save-button\": \"Save schema\",\n-    \"wikidata-schema/close-button\": \"Close\",\n-    \"wikidata-schema/unsaved-changes-alt\": \"You have made unsaved changes to your Wikidata schema.\",\n-    \"wikidata-schema/save-schema-alt\": \"Save the schema to OpenRefine. The changes will not be uploaded to Wikidata yet.\",\n-    \"wikidata-schema/discard-schema-changes-alt\": \"Discard the changes made to the schema.\",\n-    \"wikidata-schema/incomplete-schema-could-not-be-saved\": \"Your schema is incomplete so it cannot be saved yet.\",\n-    \"wikidata-schema/unsaved-warning\": \"You have made unsaved changes to your Wikidata schema. Close anyway?\",\n-    \"wikidata-preview/new-id\": \"new item\",\n-    \"wikidata-account/dialog-header\": \"Wikidata account\",\n-    \"wikidata-account/explain-log-in\": \"Logging in to <a href=\\\"https://www.wikidata.org/\\\" target=\\\"_blank\\\">Wikidata</a> lets you to upload edits directly from OpenRefine.\",\n-    \"wikidata-account/explain-owner-only-consumer-wiki\": \"See this <a href=\\\"https://github.com/OpenRefine/OpenRefine/wiki/Wikidata-owner-only-consumer\\\" target=\\\"_blank\\\">wiki</a> to get your owner-only consumer if you don't have one.\",\n-    \"wikidata-account/explain-password-login\": \"You can also <a>log in with your username/password.</a>\",\n-    \"wikidata-account/explain-owner-only-consumer-login\": \"You can also <a>login with your owner-only consumer.</a>\",\n-    \"wikidata-account/invalid-credentials\": \"Invalid credentials\",\n-    \"wikidata-account/username-label\": \"Username:\",\n-    \"wikidata-account/username-placeholder\": \"username\",\n-    \"wikidata-account/password-label\": \"Password:\",\n-    \"wikidata-account/password-placeholder\": \"password\",\n-    \"wikidata-account/consumer-token-label\": \"Consumer token:\",\n-    \"wikidata-account/consumer-token-placeholder\": \"consumer token\",\n-    \"wikidata-account/consumer-secret-label\": \"Consumer secret:\",\n-    \"wikidata-account/consumer-secret-placeholder\": \"consumer secret\",\n-    \"wikidata-account/access-token-label\": \"Access token:\",\n-    \"wikidata-account/access-token-placeholder\": \"access token\",\n-    \"wikidata-account/access-secret-label\": \"Access secret:\",\n-    \"wikidata-account/access-secret-placeholder\": \"access secret\",\n-    \"wikidata-account/remember-me\": \"Remember me\",\n-    \"wikidata-account/password-remember-me-title\": \"Your password won't be stored. Don't check this if your computer is public.\",\n-    \"wikidata-account/owner-only-consumer-remember-me-title\": \"Consumer credentials are stored unencrypted in cookies. Don't check this if your computer is public.\",\n-    \"wikidata-account/close\": \"Close\",\n-    \"wikidata-account/log-in\": \"Log in\",\n-    \"wikidata-account/logged-in-as\": \"You are logged in as:\",\n-    \"wikidata-account/log-out\": \"Log out\",\n-    \"wikidata-account/connecting-to-wikidata\": \"Connecting to Wikidata\u2026\",\n-    \"perform-wikidata-edits/dialog-header\": \"Upload edits to Wikidata\",\n-    \"perform-wikidata-edits/review-your-edits\": \"You are about to upload {nb_edits} edits to Wikidata. Please check them carefully. Large edit batches should be submitted for <a href=\\\"https://www.wikidata.org/wiki/Wikidata:Requests_for_permissions/Bot\\\" target=\\\"_blank\\\">bot review</a> first.\",\n-    \"perform-wikidata-edits/logged-in-as\": \"You are logged in as\",\n-    \"perform-wikidata-edits/edit-summary-label\": \"Edit summary:\",\n-    \"perform-wikidata-edits/edit-summary-placeholder\": \"a few words to describe your edits\",\n-    \"perform-wikidata-edits/perform-edits\": \"Upload edits\",\n-    \"perform-wikidata-edits/cancel\": \"Cancel\",\n-    \"perform-wikidata-edits/analyzing-edits\": \"Analyzing your edits\u2026\",\n-    \"import-wikibase-schema/dialog-header\": \"Import Wikidata schema\",\n+    \"wikibase-extension/menu-label\": \"Wikidata\",\n+    \"wikibase-extension/select-wikibase-instance\": \"Select Wikibase instance\",\n+    \"wikibase-extension/edit-wikibase-schema\": \"Edit Wikibase schema\",\n+    \"wikibase-extension/import-wikibase-schema\": \"Import schema\",\n+    \"wikibase-extension/manage-wikibase-account\": \"Manage Wikibase account\",\n+    \"wikibase-extension/perform-edits-on-wikibase\": \"Upload edits to Wikibase\",\n+    \"wikibase-extension/export-to-qs\": \"Export to QuickStatements\",\n+    \"wikibase-extension/qs-file\": \"QuickStatements file\",\n+    \"wikibase-extension/wikibase-edits\": \"Wikibase edits\u2026\",\n+    \"wikibase-extension/export-schema\": \"Export schema\",\n+    \"wikibase-extension/export-wikibase-schema\": \"Export Wikibase schema\",\n+    \"wikibase-extension/wikibase-schema\": \"Wikibase schema\",\n+    \"wikibase-extension/quickstatements-export-name\": \"QuickStatements\",\n+    \"wikibase-management/dialog-header\": \"Select Wikibase instance\",\n+    \"wikibase-management/explain-select-wikibase\":  \"Click on an item below to select it as the target Wikibase to work against. This will cause the schema to be empty. After switching to the target Wikibase, you should reconcile your data against it before editing the schema.\",\n+    \"wikibase-management/current-selected-wikibase\": \"Current selected Wikibase: <a href=\\\"$1\\\" target=\\\"_blank\\\">$2</a>\",\n+    \"wikibase-management/add-wikibase\": \"Add Wikibase\",\n+    \"wikibase-management/close\": \"Close\",\n+    \"wikibase-management/contact-service\": \"Contacting manifest service\",\n+    \"wikibase-management/error-contact\": \"Error contacting manifest service\",\n+    \"wikibase-addition/dialog-header\": \"Add Wikibase manifest\",\n+    \"wikibase-addition/explain-add-manifest\": \"The manifest should specify a reconciliation service linked to the Wikibase, the reconciliation service will be added to OpenRefine if not added yet.\",\n+    \"wikibase-addition/explain-add-manifest-via-url\": \"Enter the Wikibase manifest's URL(recommended, this is helpful for keeping track of the latest manifest):\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NTA1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"wikibase-management/explain-select-wikibase\":  \"Click on an item below to select it as the target Wikibase to work against. This will cause the schema to be empty. After switching to the target Wikibase, you should reconcile your data against it before editing the schema.\",\n          \n          \n            \n                \"wikibase-management/explain-select-wikibase\":  \"Click on an item below to select it as the target Wikibase to work against. This will clear any existing schema. After switching to the target Wikibase, you should reconcile your data against it before editing the schema.\",", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475055051", "createdAt": "2020-08-22T06:42:48Z", "author": {"login": "wetneb"}, "path": "extensions/wikidata/module/langs/translation-en.json", "diffHunk": "@@ -1,121 +1,139 @@\n {\n-    \"wikidata-extension/menu-label\": \"Wikidata\",\n-    \"wikidata-extension/edit-wikidata-schema\": \"Edit Wikidata schema\",\n-    \"wikidata-extension/import-wikidata-schema\": \"Import schema\",\n-    \"wikidata-extension/manage-wikidata-account\": \"Manage Wikidata account\",\n-    \"wikidata-extension/perform-edits-on-wikidata\": \"Upload edits to Wikidata\",\n-    \"wikidata-extension/export-to-qs\": \"Export to QuickStatements\",\n-    \"wikidata-extension/qs-file\": \"QuickStatements file\",\n-    \"wikidata-extension/wikidata-edits\": \"Wikidata edits\u2026\",\n-    \"wikidata-extension/export-schema\": \"Export schema\",\n-    \"wikidata-extension/export-wikidata-schema\": \"Export Wikidata schema\",\n-    \"wikidata-extension/wikidata-schema\": \"Wikidata schema\",\n-    \"wikidata-extension/quickstatements-export-name\": \"QuickStatements\",\n-    \"wikidata-schema/dialog-header\": \"Align to Wikidata\",\n-    \"wikidata-schema/dialog-explanation\": \"The Wikidata schema below specifies how your tabular data will be transformed into Wikidata edits. You can drag and drop the column names below in most input boxes: for each row, edits will be generated with the values in these columns.\",\n-    \"wikidata-schema/preview-explanation\": \"This tab shows the first edits (out of {nb_edits}) that will be made once you upload the changes to Wikidata. You can use facets to inspect the edits on particular items.\",\n-    \"wikidata-schema/schema-tab-header\": \"Schema\",\n-    \"wikidata-schema/warnings-tab-header\": \"Issues\",\n-    \"wikidata-schema/edits-preview-tab-header\": \"Preview\",\n-    \"wikidata-schema/statements-header\": \"Statements\",\n-    \"wikidata-schema/terms-header\": \"Terms\",\n-    \"wikidata-schema/empty-statements\": \"no statements added\",\n-    \"wikidata-schema/empty-terms\": \"no labels, descriptions or aliases added\",\n-    \"wikidata-schema/add-item-button\": \"add item\",\n-    \"wikidata-schema/add-term\": \"add term\",\n-    \"wikidata-schema/remove\": \"remove\",\n-    \"wikidata-schema/add-statement\": \"add statement\",\n-    \"wikidata-schema/add-value\": \"add value\",\n-    \"wikidata-schema/add-qualifier\": \"add qualifier\",\n-    \"wikidata-schema/copy-reference\": \"copy\",\n-    \"wikidata-schema/paste-reference\": \"paste reference\",\n-    \"wikidata-schema/reference-copied\": \"copied\",\n-    \"wikidata-schema/add-reference\": \"add reference\",\n-    \"wikidata-schema/add-reference-snak\": \"add\",\n-    \"wikidata-schema/property-placeholder\": \"property\",\n-    \"wikidata-schema/nb-references\": \"&nbsp;references\",\n-    \"wikidata-schema/remove-column\": \"remove column\",\n-    \"wikidata-schema/label\": \"Label\",\n-    \"wikidata-schema/label-if-new\": \"Label (do not override)\",\n-    \"wikidata-schema/label-override\": \"Label (override if present)\",\n-    \"wikidata-schema/description\": \"Description\",\n-    \"wikidata-schema/description-if-new\": \"Description (do not override)\",\n-    \"wikidata-schema/description-override\": \"Description (override if present)\",\n-    \"wikidata-schema/override-term\": \"override if present\",\n-    \"wikidata-schema/alias\": \"Alias\",\n-    \"wikidata-schema/item-or-reconciled-column\": \"type item or drag reconciled column here\",\n-    \"wikidata-schema/amount\": \"amount\",\n-    \"wikidata-schema/unit\": \"unit\",\n-    \"wikidata-schema/full-url\": \"full URL including the protocol\",\n-    \"wikidata-schema/tabular-data-with-prefix\": \"filename starting with \\\"Data:\\\"\",\n-    \"wikidata-schema/commons-media\": \"filename\",\n-    \"wikidata-schema/math-expression\": \"mathematical expression\",\n-    \"wikidata-schema/geoshape-with-prefix\": \"filename starting with \\\"Data:\\\"\",\n-    \"wikidata-schema/datatype-not-supported-yet\": \"This datatype is not supported yet, sorry.\",\n-    \"wikidata-schema/invalid-schema-warning-issues\": \"Your schema is incomplete, fix it to see the issues.\",\n-    \"wikidata-schema/invalid-schema-warning-preview\": \"Your schema is incomplete, fix it to see the preview.\",\n-    \"wikidata-schema/discard-button\": \"Discard changes\",\n-    \"wikidata-schema/save-button\": \"Save schema\",\n-    \"wikidata-schema/close-button\": \"Close\",\n-    \"wikidata-schema/unsaved-changes-alt\": \"You have made unsaved changes to your Wikidata schema.\",\n-    \"wikidata-schema/save-schema-alt\": \"Save the schema to OpenRefine. The changes will not be uploaded to Wikidata yet.\",\n-    \"wikidata-schema/discard-schema-changes-alt\": \"Discard the changes made to the schema.\",\n-    \"wikidata-schema/incomplete-schema-could-not-be-saved\": \"Your schema is incomplete so it cannot be saved yet.\",\n-    \"wikidata-schema/unsaved-warning\": \"You have made unsaved changes to your Wikidata schema. Close anyway?\",\n-    \"wikidata-preview/new-id\": \"new item\",\n-    \"wikidata-account/dialog-header\": \"Wikidata account\",\n-    \"wikidata-account/explain-log-in\": \"Logging in to <a href=\\\"https://www.wikidata.org/\\\" target=\\\"_blank\\\">Wikidata</a> lets you to upload edits directly from OpenRefine.\",\n-    \"wikidata-account/explain-owner-only-consumer-wiki\": \"See this <a href=\\\"https://github.com/OpenRefine/OpenRefine/wiki/Wikidata-owner-only-consumer\\\" target=\\\"_blank\\\">wiki</a> to get your owner-only consumer if you don't have one.\",\n-    \"wikidata-account/explain-password-login\": \"You can also <a>log in with your username/password.</a>\",\n-    \"wikidata-account/explain-owner-only-consumer-login\": \"You can also <a>login with your owner-only consumer.</a>\",\n-    \"wikidata-account/invalid-credentials\": \"Invalid credentials\",\n-    \"wikidata-account/username-label\": \"Username:\",\n-    \"wikidata-account/username-placeholder\": \"username\",\n-    \"wikidata-account/password-label\": \"Password:\",\n-    \"wikidata-account/password-placeholder\": \"password\",\n-    \"wikidata-account/consumer-token-label\": \"Consumer token:\",\n-    \"wikidata-account/consumer-token-placeholder\": \"consumer token\",\n-    \"wikidata-account/consumer-secret-label\": \"Consumer secret:\",\n-    \"wikidata-account/consumer-secret-placeholder\": \"consumer secret\",\n-    \"wikidata-account/access-token-label\": \"Access token:\",\n-    \"wikidata-account/access-token-placeholder\": \"access token\",\n-    \"wikidata-account/access-secret-label\": \"Access secret:\",\n-    \"wikidata-account/access-secret-placeholder\": \"access secret\",\n-    \"wikidata-account/remember-me\": \"Remember me\",\n-    \"wikidata-account/password-remember-me-title\": \"Your password won't be stored. Don't check this if your computer is public.\",\n-    \"wikidata-account/owner-only-consumer-remember-me-title\": \"Consumer credentials are stored unencrypted in cookies. Don't check this if your computer is public.\",\n-    \"wikidata-account/close\": \"Close\",\n-    \"wikidata-account/log-in\": \"Log in\",\n-    \"wikidata-account/logged-in-as\": \"You are logged in as:\",\n-    \"wikidata-account/log-out\": \"Log out\",\n-    \"wikidata-account/connecting-to-wikidata\": \"Connecting to Wikidata\u2026\",\n-    \"perform-wikidata-edits/dialog-header\": \"Upload edits to Wikidata\",\n-    \"perform-wikidata-edits/review-your-edits\": \"You are about to upload {nb_edits} edits to Wikidata. Please check them carefully. Large edit batches should be submitted for <a href=\\\"https://www.wikidata.org/wiki/Wikidata:Requests_for_permissions/Bot\\\" target=\\\"_blank\\\">bot review</a> first.\",\n-    \"perform-wikidata-edits/logged-in-as\": \"You are logged in as\",\n-    \"perform-wikidata-edits/edit-summary-label\": \"Edit summary:\",\n-    \"perform-wikidata-edits/edit-summary-placeholder\": \"a few words to describe your edits\",\n-    \"perform-wikidata-edits/perform-edits\": \"Upload edits\",\n-    \"perform-wikidata-edits/cancel\": \"Cancel\",\n-    \"perform-wikidata-edits/analyzing-edits\": \"Analyzing your edits\u2026\",\n-    \"import-wikibase-schema/dialog-header\": \"Import Wikidata schema\",\n+    \"wikibase-extension/menu-label\": \"Wikidata\",\n+    \"wikibase-extension/select-wikibase-instance\": \"Select Wikibase instance\",\n+    \"wikibase-extension/edit-wikibase-schema\": \"Edit Wikibase schema\",\n+    \"wikibase-extension/import-wikibase-schema\": \"Import schema\",\n+    \"wikibase-extension/manage-wikibase-account\": \"Manage Wikibase account\",\n+    \"wikibase-extension/perform-edits-on-wikibase\": \"Upload edits to Wikibase\",\n+    \"wikibase-extension/export-to-qs\": \"Export to QuickStatements\",\n+    \"wikibase-extension/qs-file\": \"QuickStatements file\",\n+    \"wikibase-extension/wikibase-edits\": \"Wikibase edits\u2026\",\n+    \"wikibase-extension/export-schema\": \"Export schema\",\n+    \"wikibase-extension/export-wikibase-schema\": \"Export Wikibase schema\",\n+    \"wikibase-extension/wikibase-schema\": \"Wikibase schema\",\n+    \"wikibase-extension/quickstatements-export-name\": \"QuickStatements\",\n+    \"wikibase-management/dialog-header\": \"Select Wikibase instance\",\n+    \"wikibase-management/explain-select-wikibase\":  \"Click on an item below to select it as the target Wikibase to work against. This will cause the schema to be empty. After switching to the target Wikibase, you should reconcile your data against it before editing the schema.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb3c638ed7265906e9ef5303d759545330577f72", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/cb3c638ed7265906e9ef5303d759545330577f72", "committedDate": "2020-08-22T12:02:21Z", "message": "update translation-en.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "author": {"user": {"login": "afkbrb", "name": "Lu Liu"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "committedDate": "2020-08-22T14:27:16Z", "message": "rename 'wikibasePrefix' to 'siteIri'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTM0NTUw", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#pullrequestreview-472934550", "createdAt": "2020-08-22T15:47:33Z", "commit": {"oid": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3111, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}