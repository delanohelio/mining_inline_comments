{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDI5ODA4", "number": 3027, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NjozM1rOEVy_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMTozOToyOFrOEWZv2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjkxMTE4OnYy", "diffSide": "RIGHT", "path": "main/src/com/google/refine/expr/functions/ToDate.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NjozM1rOG8wVtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo0MTozMVrOG8_yTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1OTczNQ==", "bodyText": "It is not clear to me that this new version is equivalent, for instance of datetime objects with precision down to the second. You are correct that the motivation for this .plusSeconds() was to preserve the date part across timezones but I think this code also handles timestamps with a higher precision than day.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r466359735", "createdAt": "2020-08-06T11:56:33Z", "author": {"login": "wetneb"}, "path": "main/src/com/google/refine/expr/functions/ToDate.java", "diffHunk": "@@ -168,8 +167,7 @@ private OffsetDateTime parse(String o1, Locale locale, List<String> formats) {\n         } else {\n             try {\n                 return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime().toInstant()\n-                \t\t.plusSeconds(ZonedDateTime.now().getOffset().getTotalSeconds())\n-                \t\t.atOffset(ZoneOffset.of(\"Z\"));\n+                        .truncatedTo(ChronoUnit.DAYS).atOffset(ZoneOffset.of(\"Z\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4849ea948c60c8978d78aa561d26c7084e02cc3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4OTM3Mw==", "bodyText": "Can you add a (failing) test that demonstrates the problem? I'm not sure I follow what you're trying to say.\nMy understanding of the intent was to make sure that toDate(\"1984\") ends up pinned to midnight, rather than offset by the number of hours that local time is from UTC. The old code apparently doesn't account for summer time / Daylight Savings Time so, on my system, it ends up at 1 hour past midnight rather than at midnight. The new code fixes that. I'm open to other solutions, but I'm trying to resist having to learn all of the complexities of the new Java date/time system.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r466489373", "createdAt": "2020-08-06T15:18:44Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/expr/functions/ToDate.java", "diffHunk": "@@ -168,8 +167,7 @@ private OffsetDateTime parse(String o1, Locale locale, List<String> formats) {\n         } else {\n             try {\n                 return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime().toInstant()\n-                \t\t.plusSeconds(ZonedDateTime.now().getOffset().getTotalSeconds())\n-                \t\t.atOffset(ZoneOffset.of(\"Z\"));\n+                        .truncatedTo(ChronoUnit.DAYS).atOffset(ZoneOffset.of(\"Z\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1OTczNQ=="}, "originalCommit": {"oid": "d4849ea948c60c8978d78aa561d26c7084e02cc3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMjgxMw==", "bodyText": "I've got a better understanding of what the original problem was and have a better fix. The issue occurred when the test date to be parsed was on one side of the Daylight Savings Time boundary and the current date was on the opposite side, resulting in the offset computed using now() to be incorrect. I switched the offset calculation to use the parsed date.\nSomehow, in the mean time, the default timezone for Java switched itself from \"EDT\" to \"UTC\" so I also changed the test to use a fixed, non-UTC timezone to hopefully catch any other UTC dependencies in the future (although it won't catch temporal shifts like DST).", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r466612813", "createdAt": "2020-08-06T18:41:31Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/expr/functions/ToDate.java", "diffHunk": "@@ -168,8 +167,7 @@ private OffsetDateTime parse(String o1, Locale locale, List<String> formats) {\n         } else {\n             try {\n                 return javax.xml.bind.DatatypeConverter.parseDateTime(o1).getTime().toInstant()\n-                \t\t.plusSeconds(ZonedDateTime.now().getOffset().getTotalSeconds())\n-                \t\t.atOffset(ZoneOffset.of(\"Z\"));\n+                        .truncatedTo(ChronoUnit.DAYS).atOffset(ZoneOffset.of(\"Z\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1OTczNQ=="}, "originalCommit": {"oid": "d4849ea948c60c8978d78aa561d26c7084e02cc3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI1OTc2OnYy", "diffSide": "RIGHT", "path": "main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMTozOToyOFrOG9shXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNjowMTozMVrOG90ojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NTc1Nw==", "bodyText": "@wetneb I think this test should pass, but it fails due to UTC timezone offset code that you added. Can you review and see if you agree?", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r467345757", "createdAt": "2020-08-08T01:39:28Z", "author": {"login": "tfmorris"}, "path": "main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java", "diffHunk": "@@ -167,12 +170,22 @@ public void testToDate() throws CalendarParserException {\n       // First string can be a locale identifier instead of a format string\n       Assert.assertEquals(invoke(\"toDate\", \"2013-06-01\",\"zh\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n       Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\",\"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n+      Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\", \"MMM-dd-yyyy\", \"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n \n       // If a long, convert to string\n       Assert.assertEquals(invoke(\"toDate\", (long) 2012), invoke(\"toDate\", \"2012-01-01\"));\n \n       // If already a date, leave it alone\n       Assert.assertEquals(invoke(\"toDate\", CalendarParser.parseAsOffsetDateTime(\"2012-03-01\")),CalendarParser.parseAsOffsetDateTime(\"2012-03-01\"));\n+\n+      // FIXME: Date/times without timezone info should be interpreted as local time, not UTC\n+//      Assert.assertEquals(invoke(\"toDate\", \"2013-06-01T13:12:11\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01 13:12:11\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd7ce92108aa4d57de6b024e87cc18e45a7fd4a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MjgwNQ==", "bodyText": "@tfmorris I don't want to poke my eyes or mouth into this between both of you only to say this bit of history:\nI recall Jacky in a chat asking me about formatter expectations (GREL, cell values, etc.) because he was indeed having issues with correct parsing behavior based on what we expected or not.  That probably should have been a signal for me to ask Antonin or someone else (who was still newish to our team), but I think that discussion did eventually happen between him and Antonin in the contributing PRs and original issues for Java Date that he worked on.  I recall Instant and Locale being 2 terms he asked me about concerning expectations and I didn't have enough Java expertise.  I don't think an opportunity was missed regarding the new Java Date support, instead I just don't think we gave Jacky the right info about our expectations that he was asking of all of us at the time. :-(  After all, he did work for Citi at the time and maintained international date structures in databases and code for them.  So part of that was our fault.\nThe ISO_INSTANT would be UTC, yes? https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_INSTANT\nBut the ISO_LOCAL_DATE_TIME would be local, no? https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME\nThis is all I recall of the conversations with him, sorry.  Hope it helps!", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r467352805", "createdAt": "2020-08-08T02:57:15Z", "author": {"login": "thadguidry"}, "path": "main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java", "diffHunk": "@@ -167,12 +170,22 @@ public void testToDate() throws CalendarParserException {\n       // First string can be a locale identifier instead of a format string\n       Assert.assertEquals(invoke(\"toDate\", \"2013-06-01\",\"zh\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n       Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\",\"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n+      Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\", \"MMM-dd-yyyy\", \"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n \n       // If a long, convert to string\n       Assert.assertEquals(invoke(\"toDate\", (long) 2012), invoke(\"toDate\", \"2012-01-01\"));\n \n       // If already a date, leave it alone\n       Assert.assertEquals(invoke(\"toDate\", CalendarParser.parseAsOffsetDateTime(\"2012-03-01\")),CalendarParser.parseAsOffsetDateTime(\"2012-03-01\"));\n+\n+      // FIXME: Date/times without timezone info should be interpreted as local time, not UTC\n+//      Assert.assertEquals(invoke(\"toDate\", \"2013-06-01T13:12:11\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01 13:12:11\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NTc1Nw=="}, "originalCommit": {"oid": "3fd7ce92108aa4d57de6b024e87cc18e45a7fd4a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MzIxMA==", "bodyText": "Speaking of which...which Resolver style do we feel is most useful for regular OpenRefine users? https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/time/format/ResolverStyle.html#STRICT\nSince we consider ourselves a \"powertool\", perhaps STRICT to avoid surprises for our users?", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r467353210", "createdAt": "2020-08-08T03:02:02Z", "author": {"login": "thadguidry"}, "path": "main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java", "diffHunk": "@@ -167,12 +170,22 @@ public void testToDate() throws CalendarParserException {\n       // First string can be a locale identifier instead of a format string\n       Assert.assertEquals(invoke(\"toDate\", \"2013-06-01\",\"zh\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n       Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\",\"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n+      Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\", \"MMM-dd-yyyy\", \"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n \n       // If a long, convert to string\n       Assert.assertEquals(invoke(\"toDate\", (long) 2012), invoke(\"toDate\", \"2012-01-01\"));\n \n       // If already a date, leave it alone\n       Assert.assertEquals(invoke(\"toDate\", CalendarParser.parseAsOffsetDateTime(\"2012-03-01\")),CalendarParser.parseAsOffsetDateTime(\"2012-03-01\"));\n+\n+      // FIXME: Date/times without timezone info should be interpreted as local time, not UTC\n+//      Assert.assertEquals(invoke(\"toDate\", \"2013-06-01T13:12:11\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01 13:12:11\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NTc1Nw=="}, "originalCommit": {"oid": "3fd7ce92108aa4d57de6b024e87cc18e45a7fd4a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3ODY3MQ==", "bodyText": "@tfmorris that proposed test looks obviously sensible to me.\nBroadly speaking, my user-side requirements for this would be:\n\nif I parse a date string and then extract some date part from it, the value I get should be consistent with what was in the original string\nthe rendered version of the date should be consistent with the source string.\n\nI have not checked but that might require changes to datePart and cell rendering, to make sure these work correctly for local date times.", "url": "https://github.com/OpenRefine/OpenRefine/pull/3027#discussion_r467478671", "createdAt": "2020-08-08T16:01:31Z", "author": {"login": "wetneb"}, "path": "main/tests/server/src/com/google/refine/expr/functions/strings/ToFromConversionTests.java", "diffHunk": "@@ -167,12 +170,22 @@ public void testToDate() throws CalendarParserException {\n       // First string can be a locale identifier instead of a format string\n       Assert.assertEquals(invoke(\"toDate\", \"2013-06-01\",\"zh\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n       Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\",\"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n+      Assert.assertEquals(invoke(\"toDate\", \"01-\u516d\u6708-2013\",\"zh\", \"MMM-dd-yyyy\", \"dd-MMM-yyyy\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01\"));\n \n       // If a long, convert to string\n       Assert.assertEquals(invoke(\"toDate\", (long) 2012), invoke(\"toDate\", \"2012-01-01\"));\n \n       // If already a date, leave it alone\n       Assert.assertEquals(invoke(\"toDate\", CalendarParser.parseAsOffsetDateTime(\"2012-03-01\")),CalendarParser.parseAsOffsetDateTime(\"2012-03-01\"));\n+\n+      // FIXME: Date/times without timezone info should be interpreted as local time, not UTC\n+//      Assert.assertEquals(invoke(\"toDate\", \"2013-06-01T13:12:11\"), CalendarParser.parseAsOffsetDateTime(\"2013-06-01 13:12:11\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NTc1Nw=="}, "originalCommit": {"oid": "3fd7ce92108aa4d57de6b024e87cc18e45a7fd4a"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2595, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}