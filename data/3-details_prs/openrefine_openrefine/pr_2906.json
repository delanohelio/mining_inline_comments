{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzI0MTQ0", "number": 2906, "title": "Migrate reconciliation calls to Apache HTTP client", "bodyText": "Fixes #2903 .\nThere are so many things that would deserve refactoring in these classes, it's a bit of a can of worms. Because my intention is to include this in 3.4, I have tried to keep the patch as small as possible.\nIt could arguably be even more minimal if I had kept the HttpUrlConnection-based code and patched it to handle permanent redirects, but that really feels wrong to me.\nThe changes to StandardReconConfig are covered by existing tests.\nI did not add tests specifically for HTTP redirects even if they are the purpose of this PR - that would amount to testing the library we rely on.\nStill to come: migrate the data extension operation as well.\nEdit: and fix client instantiation as it breaks the tests\u2026", "createdAt": "2020-07-08T15:36:09Z", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906", "merged": true, "mergeCommit": {"oid": "9ac54edbba2fd0876b3f2f99c8bc1588799ecb3b"}, "closed": true, "closedAt": "2020-08-23T12:04:59Z", "author": {"login": "wetneb"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy8MPPAH2gAyNDQ2MzI0MTQ0OmM0MjE4Y2UwZGY5MTE5M2UxYWI4ZjczMTA3NGNkOWEyOWZiNDkwMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBsgwvAH2gAyNDQ2MzI0MTQ0OjU0NmZhNTEzOWFlOGNkNDA0MWFkZDAyOThlYmFjNDdjNGIyZmIzODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4218ce0df91193e1ab8f731074cd9a29fb4900c", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/c4218ce0df91193e1ab8f731074cd9a29fb4900c", "committedDate": "2020-07-08T15:29:58Z", "message": "Migrate reconciliation calls to OkHTTP, for #2903"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c273418c8477fc7427568b33c046efd2805baf1", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/3c273418c8477fc7427568b33c046efd2805baf1", "committedDate": "2020-07-09T09:50:48Z", "message": "Migrate to Apache HTTP Commons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ef3b4aa26f586a2a7327be7de8ebcbd81c2cb5", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/56ef3b4aa26f586a2a7327be7de8ebcbd81c2cb5", "committedDate": "2020-07-09T13:32:28Z", "message": "Migrate data extension to Apache HTTP client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/13ac77ded2810604d28eef97a06259e870c5fce0", "committedDate": "2020-07-09T13:36:52Z", "message": "Deprecate HttpURLConnection in RefineServlet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTQ2NDAz", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#pullrequestreview-445946403", "createdAt": "2020-07-09T20:30:28Z", "commit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDozMDoyOFrOGvgtsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTowNDo1MlrOGvhwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MjI0MA==", "bodyText": "10 seconds should be fine for any reasonable service, but I wonder if it will be enough for Wikidata.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452472240", "createdAt": "2020-07-09T20:30:28Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java", "diffHunk": "@@ -170,70 +183,66 @@ protected IndividualQuery(String query, int limit) {\n         \n         String queriesString = ParsingUtilities.defaultWriter.writeValueAsString(queryMap);\n         try {\n-            URL url = new URL(serviceUrl);\n-            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-            {\n-                connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n-                connection.setConnectTimeout(30000);\n-                connection.setDoOutput(true);\n-                \n-                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n-                try {\n-                    String body = \"queries=\" + ParsingUtilities.encode(queriesString);\n-                    \n-                    dos.writeBytes(body);\n-                } finally {\n-                    dos.flush();\n-                    dos.close();\n+            RequestConfig defaultRequestConfig = RequestConfig.custom()\n+                    .setConnectTimeout(30 * 1000)\n+                    .setConnectionRequestTimeout(30 * 1000)\n+                    .setSocketTimeout(10 * 1000).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NTcyNg==", "bodyText": "Could you just use LaxRedirectStrategy here?\nThe docs only mention 301, 302, & 307. Is the lack of 308 a documentation oversight or a missing capability?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452475726", "createdAt": "2020-07-09T20:37:32Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java", "diffHunk": "@@ -170,70 +183,66 @@ protected IndividualQuery(String query, int limit) {\n         \n         String queriesString = ParsingUtilities.defaultWriter.writeValueAsString(queryMap);\n         try {\n-            URL url = new URL(serviceUrl);\n-            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-            {\n-                connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n-                connection.setConnectTimeout(30000);\n-                connection.setDoOutput(true);\n-                \n-                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n-                try {\n-                    String body = \"queries=\" + ParsingUtilities.encode(queriesString);\n-                    \n-                    dos.writeBytes(body);\n-                } finally {\n-                    dos.flush();\n-                    dos.close();\n+            RequestConfig defaultRequestConfig = RequestConfig.custom()\n+                    .setConnectTimeout(30 * 1000)\n+                    .setConnectionRequestTimeout(30 * 1000)\n+                    .setSocketTimeout(10 * 1000).build();\n+\n+            HttpClientBuilder httpClientBuilder = HttpClients.custom()\n+                    .setUserAgent(RefineServlet.getUserAgent())\n+                    .setRedirectStrategy(new DefaultRedirectStrategy(new String[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3ODg3Ng==", "bodyText": "Old code used a connection timeout of 5 sec. I'm not sure if there was a reason and 30 sec seems fine to me, so just noting the difference.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452478876", "createdAt": "2020-07-09T20:43:55Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java", "diffHunk": "@@ -206,29 +226,49 @@ public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) {\n         }\n     }\n \n+    /**\n+     * @todo this should be refactored to be unified with the HTTP querying code\n+     * from StandardReconConfig. We should ideally extract a library to query\n+     * reconciliation services and expose it as such for others to reuse.\n+     */\n+    \n     static protected InputStream performQuery(String endpoint, String query) throws IOException {\n-        URL url = new URL(endpoint);\n-\n-        URLConnection connection = url.openConnection();\n-        connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        connection.setConnectTimeout(5000);\n-        connection.setDoOutput(true);\n-\n-        DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n-        try {\n-            String body = \"extend=\" + ParsingUtilities.encode(query);\n-\n-            dos.writeBytes(body);\n-        } finally {\n-            dos.flush();\n-            dos.close();\n+        HttpPost request = new HttpPost(endpoint);\n+        List<NameValuePair> body = Collections.singletonList(\n+                new BasicNameValuePair(\"queries\", query));\n+        request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n+        \n+        try (CloseableHttpResponse response = getHttpClient().execute(request)) {\n+            StatusLine statusLine = response.getStatusLine();\n+            if (statusLine.getStatusCode() >= 400) {\n+                throw new IOException(\"Data extension query failed - code: \"\n+                        + Integer.toString(statusLine.getStatusCode())\n+                        + \" message: \" + statusLine.getReasonPhrase());\n+            } else {\n+                return response.getEntity().getContent();\n+            }\n         }\n+    }\n \n-        connection.connect();\n+    private static CloseableHttpClient getHttpClient() {\n+        if (httpClient != null) {\n+            return httpClient;\n+        }\n+        RequestConfig defaultRequestConfig = RequestConfig.custom()\n+                .setConnectTimeout(30 * 1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MTg2MA==", "bodyText": "Is this  (and CloseableHttpClient) thread-safe? I haven't traced how this is used, but it seems unusual and perhaps risky to be reusing it in multiple, perhaps simultaneous, performQuery() method calls.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452481860", "createdAt": "2020-07-09T20:50:05Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java", "diffHunk": "@@ -206,29 +226,49 @@ public ReconciledDataExtensionJob(DataExtensionConfig obj, String endpoint) {\n         }\n     }\n \n+    /**\n+     * @todo this should be refactored to be unified with the HTTP querying code\n+     * from StandardReconConfig. We should ideally extract a library to query\n+     * reconciliation services and expose it as such for others to reuse.\n+     */\n+    \n     static protected InputStream performQuery(String endpoint, String query) throws IOException {\n-        URL url = new URL(endpoint);\n-\n-        URLConnection connection = url.openConnection();\n-        connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        connection.setConnectTimeout(5000);\n-        connection.setDoOutput(true);\n-\n-        DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n-        try {\n-            String body = \"extend=\" + ParsingUtilities.encode(query);\n-\n-            dos.writeBytes(body);\n-        } finally {\n-            dos.flush();\n-            dos.close();\n+        HttpPost request = new HttpPost(endpoint);\n+        List<NameValuePair> body = Collections.singletonList(\n+                new BasicNameValuePair(\"queries\", query));\n+        request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n+        \n+        try (CloseableHttpResponse response = getHttpClient().execute(request)) {\n+            StatusLine statusLine = response.getStatusLine();\n+            if (statusLine.getStatusCode() >= 400) {\n+                throw new IOException(\"Data extension query failed - code: \"\n+                        + Integer.toString(statusLine.getStatusCode())\n+                        + \" message: \" + statusLine.getReasonPhrase());\n+            } else {\n+                return response.getEntity().getContent();\n+            }\n         }\n+    }\n \n-        connection.connect();\n+    private static CloseableHttpClient getHttpClient() {\n+        if (httpClient != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MjQzOQ==", "bodyText": "Unused imports should be removed", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452482439", "createdAt": "2020-07-09T20:51:14Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/model/recon/ReconciledDataExtensionJob.java", "diffHunk": "@@ -44,12 +44,28 @@\n import java.net.URL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDgxMg==", "bodyText": "Since there's no issue with static access, can't this just be initialized in the constructor?", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452484812", "createdAt": "2020-07-09T20:55:38Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/model/recon/StandardReconConfig.java", "diffHunk": "@@ -154,6 +165,9 @@ public String toString() {\n     @JsonProperty(\"limit\")\n     final private int limit;\n \n+    // initialized lazily\n+    private CloseableHttpClient httpClient = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTQxNw==", "bodyText": "I have a feeling I may not want to know the answer to this, but why does an importer test have a dependency on reconciliation? That seems very odd.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452489417", "createdAt": "2020-07-09T21:04:52Z", "author": {"login": "tfmorris"}, "path": "main/tests/server/src/com/google/refine/importers/WikitextImporterTests.java", "diffHunk": "@@ -51,12 +53,16 @@\n import org.testng.annotations.BeforeTest;\n import org.testng.annotations.Test;\n \n-import com.google.refine.importers.WikitextImporter;\n+import com.google.refine.model.Recon;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDQxNDg4", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#pullrequestreview-446041488", "createdAt": "2020-07-09T23:54:57Z", "commit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo1NDo1OFrOGvljHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo1NDo1OFrOGvljHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MTQ1NQ==", "bodyText": "This needs to handle a JsonParseException either here or in the surrounding try/except block.", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#discussion_r452551455", "createdAt": "2020-07-09T23:54:58Z", "author": {"login": "tfmorris"}, "path": "main/src/com/google/refine/commands/recon/GuessTypesOfColumnCommand.java", "diffHunk": "@@ -170,70 +183,66 @@ protected IndividualQuery(String query, int limit) {\n         \n         String queriesString = ParsingUtilities.defaultWriter.writeValueAsString(queryMap);\n         try {\n-            URL url = new URL(serviceUrl);\n-            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-            {\n-                connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n-                connection.setConnectTimeout(30000);\n-                connection.setDoOutput(true);\n-                \n-                DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n-                try {\n-                    String body = \"queries=\" + ParsingUtilities.encode(queriesString);\n-                    \n-                    dos.writeBytes(body);\n-                } finally {\n-                    dos.flush();\n-                    dos.close();\n+            RequestConfig defaultRequestConfig = RequestConfig.custom()\n+                    .setConnectTimeout(30 * 1000)\n+                    .setConnectionRequestTimeout(30 * 1000)\n+                    .setSocketTimeout(10 * 1000).build();\n+\n+            HttpClientBuilder httpClientBuilder = HttpClients.custom()\n+                    .setUserAgent(RefineServlet.getUserAgent())\n+                    .setRedirectStrategy(new DefaultRedirectStrategy(new String[] {\n+                            HttpGet.METHOD_NAME,\n+                            HttpHead.METHOD_NAME,\n+                            HttpPost.METHOD_NAME }))\n+                    .setDefaultRequestConfig(defaultRequestConfig);\n+            \n+            CloseableHttpClient httpClient = httpClientBuilder.build();\n+            HttpPost request = new HttpPost(serviceUrl);\n+            List<NameValuePair> body = Collections.singletonList(\n+                    new BasicNameValuePair(\"queries\", queriesString));\n+            request.setEntity(new UrlEncodedFormEntity(body, Consts.UTF_8));\n+            \n+            try (CloseableHttpResponse response = httpClient.execute(request)) {\n+                StatusLine statusLine = response.getStatusLine();\n+                if (statusLine.getStatusCode() >= 400) {\n+                    throw new IOException(\"Failed  - code:\" \n+                            + Integer.toString(statusLine.getStatusCode()) \n+                            + \" message: \" + statusLine.getReasonPhrase());\n                 }\n                 \n-                connection.connect();\n-            }\n-\n-            if (connection.getResponseCode() >= 400) {\n-                InputStream is = connection.getErrorStream();\n-                throw new IOException(\"Failed  - code:\" \n-                        + Integer.toString(connection.getResponseCode()) \n-                        + \" message: \" + is == null ? \"\" : ParsingUtilities.inputStreamToString(is));\n-            } else {\n-                InputStream is = connection.getInputStream();\n-                try {\n-                    String s = ParsingUtilities.inputStreamToString(is);\n-                    ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);\n+                String s = ParsingUtilities.inputStreamToString(response.getEntity().getContent());\n+                ObjectNode o = ParsingUtilities.evaluateJsonStringToObjectNode(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac77ded2810604d28eef97a06259e870c5fce0"}, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3960bd40d403b1f2123b04a3c93d251f67ea648", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/d3960bd40d403b1f2123b04a3c93d251f67ea648", "committedDate": "2020-07-10T19:50:23Z", "message": "Use LaxRedirectStrategy, clean up imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94708f5ce95031ab6d452e4f4b919ecc5b4fd0ec", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/94708f5ce95031ab6d452e4f4b919ecc5b4fd0ec", "committedDate": "2020-07-15T13:57:36Z", "message": "Remove read and pool timeouts, only keep the connection timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60c41a4979e9c5bbac7270bbd7b9b6e5c5d0bcf", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/d60c41a4979e9c5bbac7270bbd7b9b6e5c5d0bcf", "committedDate": "2020-08-15T10:54:24Z", "message": "Adapt mocking of HTTP calls after migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da398b1c46a3877dfbecf3a23ce260ef78046e17", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/da398b1c46a3877dfbecf3a23ce260ef78046e17", "committedDate": "2020-08-20T07:25:11Z", "message": "Merge branch 'master' into 2903-reconciliation-okhttp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDY2MDI5", "url": "https://github.com/OpenRefine/OpenRefine/pull/2906#pullrequestreview-472066029", "createdAt": "2020-08-21T00:18:11Z", "commit": {"oid": "da398b1c46a3877dfbecf3a23ce260ef78046e17"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546fa5139ae8cd4041add0298ebac47c4b2fb387", "author": {"user": {"login": "wetneb", "name": "Antonin Delpeuch"}}, "url": "https://github.com/OpenRefine/OpenRefine/commit/546fa5139ae8cd4041add0298ebac47c4b2fb387", "committedDate": "2020-08-23T11:42:46Z", "message": "Merge branch 'master' into 2903-reconciliation-okhttp"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}