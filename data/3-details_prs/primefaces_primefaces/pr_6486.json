{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MDM4NzA3", "number": 6486, "title": "Fix #6402 - DataTable: cleanup filtering", "bodyText": "", "createdAt": "2020-11-07T00:19:45Z", "url": "https://github.com/primefaces/primefaces/pull/6486", "merged": true, "mergeCommit": {"oid": "94cd2eb47559b61ddb97e2a4dd7e163c6e2b48f9"}, "closed": true, "closedAt": "2020-11-27T13:18:40Z", "author": {"login": "Rapster"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdaKq9BAFqTUyNTY0OTE4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgWQzygH2gAyNTE3MDM4NzA3OjcwMjhkNDNmNTc2YjkxNDhlZDg1YzNjZjRhNmM2NzM0NWI3NzBiZTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjQ5MTg5", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-525649189", "createdAt": "2020-11-07T12:16:34Z", "commit": {"oid": "e6f9da2912c8ebebb458cab13cd638498f6fbdf2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMjoxNjozNFrOHvHuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMjoyNDoyOFrOHvHxEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MTYzMw==", "bodyText": "Why change the onFilter its been filterEvent for years is it really worth this breaking change?  Also anything in our other components labeled on typically means it is a client side JS hook and that is not the case here.", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r519171633", "createdAt": "2020-11-07T12:16:34Z", "author": {"login": "melloware"}, "path": "docs/9_0/components/datatable.md", "diffHunk": "@@ -43,7 +43,7 @@ DataTable displays data in tabular format.\n | expandedRow               | false              | Boolean          | Defines if row should be rendered as expanded by default.\n | filterBy                  | null               | Map              | Map of filters; This also allows to filter the table by default.\n | filterDelay               | 300                | Integer          | Delay in milliseconds before sending an ajax filter query.\n-| filterEvent               | keyup              | String           | Event to invoke filtering for input filters.\n+| onFilter                  | keyup              | String           | Event to invoke filtering for input filters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f9da2912c8ebebb458cab13cd638498f6fbdf2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MjAxMQ==", "bodyText": "I don't understand the variable name intlSM I can't figure out what that is short for should it be intlFM for FilterMeta?", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r519172011", "createdAt": "2020-11-07T12:20:42Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -1529,11 +1543,139 @@ public boolean isSortingCurrentlyActive() {\n         return getSortByAsMap().values().stream().anyMatch(SortMeta::isActive);\n     }\n \n+    protected Map<String, FilterMeta> initFilterBy(Object userFilterBy) {\n+        Map<String, FilterMeta> filterBy = new HashMap<>();\n+        AtomicBoolean filtered = new AtomicBoolean();\n+\n+\n+        // build global filterBy\n+        String globalFilter = getGlobalFilter();\n+        Set<SearchExpressionHint> hint = LangUtils.isValueBlank(globalFilter)\n+                ? EnumSet.of(SearchExpressionHint.IGNORE_NO_RESULT)\n+                : Collections.emptySet();\n+        UIComponent globalFilterComponent = SearchExpressionFacade\n+                .resolveComponent(getFacesContext(), this, DataTable.PropertyKeys.globalFilter.toString(), hint);\n+        if (globalFilterComponent != null) {\n+            if (globalFilterComponent instanceof ValueHolder) {\n+                ((ValueHolder) globalFilterComponent).setValue(globalFilter);\n+            }\n+            FilterMeta globalFilterBy = FilterMeta.of(globalFilter, getGlobalFilterFunction());\n+            filterBy.put(globalFilterBy.getColumnKey(), globalFilterBy);\n+        }\n+\n+        // build columns filterBy\n+        char separator = UINamingContainer.getSeparatorChar(getFacesContext());\n+        populateFilterBy(getFacesContext(), separator, this, filterBy, filtered);\n+\n+        // merge internal filterBy with user filterBy\n+        if (userFilterBy != null) {\n+            Collection<FilterMeta> filterByTmp;\n+            if (userFilterBy instanceof SortMeta) {\n+                filterByTmp = Collections.singletonList((FilterMeta) userFilterBy);\n+            }\n+            else if (!(userFilterBy instanceof Collection)) {\n+                throw new FacesException(\"DataTable#filterBy expects a single or a collection of FilterMeta\");\n+            }\n+            else {\n+                filterByTmp = (Collection<FilterMeta>) userFilterBy;\n+            }\n+\n+            updateFilterByWithUserFilterBy(filterBy, filterByTmp, filtered);\n+        }\n+\n+        setDefaultFilter(filtered.get());\n+\n+        return filterBy;\n+    }\n+\n+    protected void populateFilterBy(FacesContext context, char separator, UIComponent root, Map<String, FilterMeta> filterBy, AtomicBoolean defaultFilter) {\n+        for (int i = 0; i < root.getChildCount(); i++) {\n+            UIComponent child = root.getChildren().get(i);\n+            if (child.isRendered()) {\n+                if (child instanceof Columns) {\n+                    Columns columns = (Columns) child;\n+                    String uiColumnsClientId = columns.getClientId(context);\n+\n+                    for (int j = 0; j < columns.getRowCount(); j++) {\n+                        DynamicColumn dynaColumn = new DynamicColumn(j, columns);\n+                        dynaColumn.setColumnKey(uiColumnsClientId + separator + j);\n+                        FilterMeta f = FilterMeta.of(getFacesContext(), getVar(), dynaColumn);\n+                        if (f != null) {\n+                            filterBy.put(f.getColumnKey(), f);\n+                            defaultFilter.set(defaultFilter.get() || f.isActive());\n+                        }\n+                    }\n+                }\n+                else if (child instanceof UIColumn) {\n+                    UIColumn column = (UIColumn) child;\n+                    FilterMeta f = FilterMeta.of(getFacesContext(), getVar(), column);\n+                    if (f != null) {\n+                        filterBy.put(f.getColumnKey(), f);\n+                        defaultFilter.set(defaultFilter.get() || f.isActive());\n+                    }\n+                }\n+                else if (child instanceof Row) {\n+                    populateFilterBy(context, separator, child, filterBy, defaultFilter);\n+                }\n+                else if (child instanceof ColumnGroup) {\n+                    populateFilterBy(context, separator, child, filterBy, defaultFilter);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected void updateFilterByWithTableState(Map<String, FilterMeta> tsSortBy) {\n+        if (tsSortBy != null) {\n+            boolean defaultFilter = isDefaultFilter();\n+            for (Map.Entry<String, FilterMeta> entry : tsSortBy.entrySet()) {\n+                FilterMeta intlSortBy = getFilterByAsMap().get(entry.getKey());\n+                if (intlSortBy != null) {\n+                    FilterMeta tsSortMeta = entry.getValue();\n+                    intlSortBy.setFilterValue(tsSortMeta.getFilterValue());\n+                    defaultFilter |= intlSortBy.isActive();\n+                }\n+            }\n+\n+            setDefaultFilter(defaultFilter);\n+        }\n+    }\n+\n+    protected void updateFilterByWithUserFilterBy(Map<String, FilterMeta> intlFilterBy, Collection<FilterMeta> usrFilterBy, AtomicBoolean filtered) {\n+        for (FilterMeta userFM : usrFilterBy) {\n+            FilterMeta intlSM = intlFilterBy.values().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f9da2912c8ebebb458cab13cd638498f6fbdf2"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3MjM2OQ==", "bodyText": "Why comment out and not just remove?", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r519172369", "createdAt": "2020-11-07T12:24:28Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -305,32 +310,32 @@ public void processUpdates(FacesContext context) {\n             setSelection(null);\n         }\n \n-        Map<String, FilterMeta> filterBy = getFilterBy();\n-        if (!filterBy.isEmpty()) {\n-            ELContext elContext = context.getELContext();\n-            for (FilterMeta filter : filterBy.values()) {\n-                UIColumn column = filter.getColumn();\n-                if (column == null) {\n-                    column = findColumn(filter.getColumnKey());\n-                    filter.setColumn(column);\n-                }\n-\n-                if (column != null) {\n-                    ValueExpression columnFilterValueVE = column.getValueExpression(Column.PropertyKeys.filterValue.toString());\n-                    if (columnFilterValueVE != null) {\n-                        if (column.isDynamic()) {\n-                            DynamicColumn dynamicColumn = (DynamicColumn) column;\n-                            dynamicColumn.applyStatelessModel();\n-                            columnFilterValueVE.setValue(elContext, filter.getFilterValue());\n-                            dynamicColumn.cleanStatelessModel();\n-                        }\n-                        else {\n-                            columnFilterValueVE.setValue(elContext, filter.getFilterValue());\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+//        Map<String, FilterMeta> filterBy = getFilterBy();\n+//        if (!filterBy.isEmpty()) {\n+//            ELContext elContext = context.getELContext();\n+//            for (FilterMeta filter : filterBy.values()) {\n+//                UIColumn column = filter.getColumn();\n+//                if (column == null) {\n+//                    column = findColumn(filter.getColumnKey());\n+//                    filter.setColumn(column);\n+//                }\n+//\n+//                if (column != null) {\n+//                    ValueExpression columnFilterValueVE = column.getValueExpression(Column.PropertyKeys.filterValue.toString());\n+//                    if (columnFilterValueVE != null) {\n+//                        if (column.isDynamic()) {\n+//                            DynamicColumn dynamicColumn = (DynamicColumn) column;\n+//                            dynamicColumn.applyStatelessModel();\n+//                            columnFilterValueVE.setValue(elContext, filter.getFilterValue());\n+//                            dynamicColumn.cleanStatelessModel();\n+//                        }\n+//                        else {\n+//                            columnFilterValueVE.setValue(elContext, filter.getFilterValue());\n+//                        }\n+//                    }\n+//                }\n+//            }\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f9da2912c8ebebb458cab13cd638498f6fbdf2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjQzMzIx", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-526243321", "createdAt": "2020-11-09T13:12:04Z", "commit": {"oid": "d89539ac1b015db2f62710eb3baa056d207d6506"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoxMjowNFrOHvuIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoxMjowNFrOHvuIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgwMDg5Ng==", "bodyText": "Will this have the same issue you just fixed for sorting regression?", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r519800896", "createdAt": "2020-11-09T13:12:04Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -1386,13 +1400,13 @@ public void restoreMultiViewState() {\n             }\n \n             updateSortByWithTableState(ts.getSortBy());\n+            updateFilterByWithTableState(ts.getFilterBy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89539ac1b015db2f62710eb3baa056d207d6506"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjQzNzQ0", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-526243744", "createdAt": "2020-11-09T13:12:41Z", "commit": {"oid": "d89539ac1b015db2f62710eb3baa056d207d6506"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoxMjo0MVrOHvuKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoxMjo0MVrOHvuKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgwMTU0OA==", "bodyText": "Will this have the same regression issue as sorting?", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r519801548", "createdAt": "2020-11-09T13:12:41Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -1325,6 +1338,7 @@ public Object saveState(FacesContext context) {\n         }\n \n         setSortByAsMap(null);\n+        setFilterByAsMap(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d89539ac1b015db2f62710eb3baa056d207d6506"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d89539ac1b015db2f62710eb3baa056d207d6506", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/d89539ac1b015db2f62710eb3baa056d207d6506", "committedDate": "2020-11-07T13:19:26Z", "message": "Fix #6402 - DataTable: cleanup filtering"}, "afterCommit": {"oid": "15a385e076a1232f0ed89dea23e12a2140c621e0", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/15a385e076a1232f0ed89dea23e12a2140c621e0", "committedDate": "2020-11-11T18:54:29Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cfcb4b4777aa14c602f2dc22cb13968936e50e1", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/9cfcb4b4777aa14c602f2dc22cb13968936e50e1", "committedDate": "2020-11-17T11:17:03Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f014695577af0d8813b46555ee533aba5170b084", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/f014695577af0d8813b46555ee533aba5170b084", "committedDate": "2020-11-17T11:17:05Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* add header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b37468668c2e923c4a8f395426501190f2418149", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/b37468668c2e923c4a8f395426501190f2418149", "committedDate": "2020-11-17T11:17:05Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c659a82135cd4c8d6b3fd5fe367038861d27de03", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/c659a82135cd4c8d6b3fd5fe367038861d27de03", "committedDate": "2020-11-17T11:17:06Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b299ce508a6a0f1b58c9a69b457ba84e452f8b", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/e8b299ce508a6a0f1b58c9a69b457ba84e452f8b", "committedDate": "2020-11-17T11:17:07Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3554f35f8ea0096c15a795b0a2a1e7324a49abf1", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/3554f35f8ea0096c15a795b0a2a1e7324a49abf1", "committedDate": "2020-11-17T11:17:09Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0ce2acc47bf06da8d56457a70abce8031c1b498", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/d0ce2acc47bf06da8d56457a70abce8031c1b498", "committedDate": "2020-11-17T11:17:09Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ac80586a356f80348e511b5968a29eec694a6d8", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/9ac80586a356f80348e511b5968a29eec694a6d8", "committedDate": "2020-11-17T11:17:10Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f898eff6a6f3b85380919cc74126a26c468743e", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/3f898eff6a6f3b85380919cc74126a26c468743e", "committedDate": "2020-11-17T12:07:06Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f22e83be608c33639c98d9cfe131cb884b6c69cf", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/f22e83be608c33639c98d9cfe131cb884b6c69cf", "committedDate": "2020-11-13T10:38:45Z", "message": "Fix #6402 - DataTable: cleanup filtering\n\n* cosmetics"}, "afterCommit": {"oid": "3f898eff6a6f3b85380919cc74126a26c468743e", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/3f898eff6a6f3b85380919cc74126a26c468743e", "committedDate": "2020-11-17T12:07:06Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a26d020c51cb0136ecab2af15aa2b42e5eb201", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/02a26d020c51cb0136ecab2af15aa2b42e5eb201", "committedDate": "2020-11-17T13:14:32Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef9f2121c7276ae64939835ea90e343d2a2cc3c", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/bef9f2121c7276ae64939835ea90e343d2a2cc3c", "committedDate": "2020-11-17T20:36:36Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9a8e1558c5284240ef9b957debcf3c945e6293", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/0d9a8e1558c5284240ef9b957debcf3c945e6293", "committedDate": "2020-11-17T20:51:55Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66dd59cee8b0f1f6b06957ff58b347e2e9f82b80", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/66dd59cee8b0f1f6b06957ff58b347e2e9f82b80", "committedDate": "2020-11-17T20:54:11Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODIxMzU5", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-532821359", "createdAt": "2020-11-17T21:20:02Z", "commit": {"oid": "66dd59cee8b0f1f6b06957ff58b347e2e9f82b80"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMDowMlrOH1L5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMDowMlrOH1L5pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMTU1Ng==", "bodyText": "Typically our imports are java, javax, org, com.  Or at least that is how I have mine set.", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r525531556", "createdAt": "2020-11-17T21:20:02Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTableBase.java", "diffHunk": "@@ -23,14 +23,13 @@\n  */\n package org.primefaces.component.datatable;\n \n-import java.util.Collections;\n-import java.util.Map;\n+import org.primefaces.component.api.*;\n+import org.primefaces.model.FilterMeta;\n \n import javax.el.MethodExpression;\n import javax.faces.component.behavior.ClientBehaviorHolder;\n-\n-import org.primefaces.component.api.*;\n-import org.primefaces.model.FilterMeta;\n+import java.util.Collections;\n+import java.util.List;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66dd59cee8b0f1f6b06957ff58b347e2e9f82b80"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71c3237f79072063eaeeab70fa17e2cbeb7811ba", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/71c3237f79072063eaeeab70fa17e2cbeb7811ba", "committedDate": "2020-11-17T23:43:50Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d065584fc8f02d4c7c4cdbc96fb47baf4eae4eab", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/d065584fc8f02d4c7c4cdbc96fb47baf4eae4eab", "committedDate": "2020-11-18T11:09:57Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3a67c3c74e5d7272d69e103950eb6798e5e678", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/bf3a67c3c74e5d7272d69e103950eb6798e5e678", "committedDate": "2020-11-18T11:12:23Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODA0Nzc4", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-533804778", "createdAt": "2020-11-18T19:31:00Z", "commit": {"oid": "bf3a67c3c74e5d7272d69e103950eb6798e5e678"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "166210fdc70e6d46acfac085b466a1268ebc1226", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/166210fdc70e6d46acfac085b466a1268ebc1226", "committedDate": "2020-11-19T14:50:12Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d9a553116bf1f78ea9254715d166e5ea08a371", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/b8d9a553116bf1f78ea9254715d166e5ea08a371", "committedDate": "2020-11-19T17:57:41Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad6c79a3c750c93f51b5f39a54b791208462a7a9", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/ad6c79a3c750c93f51b5f39a54b791208462a7a9", "committedDate": "2020-11-21T15:54:00Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "904e399e8aa3b952c20f482c218ddd20481930d8", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/904e399e8aa3b952c20f482c218ddd20481930d8", "committedDate": "2020-11-21T15:57:33Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b911f055b1cd422555e4fe4b954d14aa433c73b", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/5b911f055b1cd422555e4fe4b954d14aa433c73b", "committedDate": "2020-11-21T16:00:11Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d84d93415799283b7719c719ef93ed4ccddd1ed", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/4d84d93415799283b7719c719ef93ed4ccddd1ed", "committedDate": "2020-11-22T00:54:06Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac31ed5d42827a8a6d9b7b41c27f851b6244ecee", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/ac31ed5d42827a8a6d9b7b41c27f851b6244ecee", "committedDate": "2020-11-22T12:53:31Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ef6cadebb03547f86c7d9799561d123ac2c704", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/09ef6cadebb03547f86c7d9799561d123ac2c704", "committedDate": "2020-11-22T13:03:32Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7e8c2866ecb8f6ed1c4fbbc94e85b923aed663", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/5e7e8c2866ecb8f6ed1c4fbbc94e85b923aed663", "committedDate": "2020-11-25T21:18:14Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4308246a2efe77aabbdefe7f23fbe702d2870be5", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/4308246a2efe77aabbdefe7f23fbe702d2870be5", "committedDate": "2020-11-25T21:50:42Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDM5ODgw", "url": "https://github.com/primefaces/primefaces/pull/6486#pullrequestreview-539439880", "createdAt": "2020-11-26T16:14:40Z", "commit": {"oid": "4308246a2efe77aabbdefe7f23fbe702d2870be5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNDo0MFrOH6hdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoxNjo0MFrOH6hhaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyNzY4MQ==", "bodyText": "Variable names in this whole method still say \"sort\" instead of \"filter\"", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r531127681", "createdAt": "2020-11-26T16:14:40Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -1542,11 +1527,152 @@ public boolean isColumnSortable(UIColumn column) {\n         return true;\n     }\n \n+    protected void visitColumns(FacesContext context, char separator, UIComponent root, Consumer<UIColumn> visitor) {\n+        for (int i = 0; i < root.getChildCount(); i++) {\n+            UIComponent child = root.getChildren().get(i);\n+            if (child.isRendered()) {\n+                if (child instanceof Columns) {\n+                    Columns columns = (Columns) child;\n+                    String uiColumnsClientId = columns.getClientId(context);\n+\n+                    for (int j = 0; j < columns.getRowCount(); j++) {\n+                        DynamicColumn dynaColumn = new DynamicColumn(j, columns);\n+                        dynaColumn.setColumnKey(uiColumnsClientId + separator + j);\n+                        visitor.accept(dynaColumn);\n+                    }\n+                }\n+                else if (child instanceof UIColumn) {\n+                    UIColumn column = (UIColumn) child;\n+                    visitor.accept(column);\n+                }\n+                else if (child instanceof ColumnGroup) {\n+                    visitColumns(context, separator, child, visitor);\n+                }\n+            }\n+        }\n+    }\n+\n+    public Map<String, FilterMeta> initFilterBy() {\n+        boolean invalidate = getStateHelper().get(\"_filterBy\") == null;\n+        Map<String, FilterMeta> filterBy = invalidate ? new HashMap<>() : getFilterByAsMap();\n+        AtomicBoolean filtered = invalidate ? new AtomicBoolean() : new AtomicBoolean(isDefaultFilter());\n+\n+        // build columns filterBy\n+        char separator = UINamingContainer.getSeparatorChar(getFacesContext());\n+\n+        visitColumns(getFacesContext(), separator, this, c -> {\n+            FilterMeta f = filterBy.get(c.getColumnKey());\n+            if (f != null && !invalidate) {\n+                f.setColumn(c);\n+            }\n+            else {\n+                f = FilterMeta.of(getFacesContext(), getVar(), c);\n+                if (f != null) {\n+                    filterBy.put(f.getColumnKey(), f);\n+                    filtered.set(filtered.get() || f.isActive());\n+                }\n+            }\n+        });\n+\n+        // merge internal filterBy with user filterBy\n+        Object userfilterBy = getFilterBy();\n+        if (userfilterBy != null) {\n+            updateFilterByWithUserFilterBy(filterBy, userfilterBy, filtered);\n+        }\n+\n+        // build global filterBy\n+        updateFilterByWithGlobalFilter(filterBy, filtered);\n+\n+        // finally set if default filtering is enabled\n+        setDefaultFilter(filtered.get());\n+\n+        setFilterByAsMap(filterBy);\n+\n+        return filterBy;\n+    }\n+\n+    protected void updateFilterByWithTableState(Map<String, FilterMeta> tsSortBy) {\n+        if (tsSortBy != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308246a2efe77aabbdefe7f23fbe702d2870be5"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODY4MQ==", "bodyText": "This will add an unmodifiable map so the user won't be able to add values to it.  Should new HashMap<> be used here?", "url": "https://github.com/primefaces/primefaces/pull/6486#discussion_r531128681", "createdAt": "2020-11-26T16:16:40Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/datatable/DataTable.java", "diffHunk": "@@ -1542,11 +1527,152 @@ public boolean isColumnSortable(UIColumn column) {\n         return true;\n     }\n \n+    protected void visitColumns(FacesContext context, char separator, UIComponent root, Consumer<UIColumn> visitor) {\n+        for (int i = 0; i < root.getChildCount(); i++) {\n+            UIComponent child = root.getChildren().get(i);\n+            if (child.isRendered()) {\n+                if (child instanceof Columns) {\n+                    Columns columns = (Columns) child;\n+                    String uiColumnsClientId = columns.getClientId(context);\n+\n+                    for (int j = 0; j < columns.getRowCount(); j++) {\n+                        DynamicColumn dynaColumn = new DynamicColumn(j, columns);\n+                        dynaColumn.setColumnKey(uiColumnsClientId + separator + j);\n+                        visitor.accept(dynaColumn);\n+                    }\n+                }\n+                else if (child instanceof UIColumn) {\n+                    UIColumn column = (UIColumn) child;\n+                    visitor.accept(column);\n+                }\n+                else if (child instanceof ColumnGroup) {\n+                    visitColumns(context, separator, child, visitor);\n+                }\n+            }\n+        }\n+    }\n+\n+    public Map<String, FilterMeta> initFilterBy() {\n+        boolean invalidate = getStateHelper().get(\"_filterBy\") == null;\n+        Map<String, FilterMeta> filterBy = invalidate ? new HashMap<>() : getFilterByAsMap();\n+        AtomicBoolean filtered = invalidate ? new AtomicBoolean() : new AtomicBoolean(isDefaultFilter());\n+\n+        // build columns filterBy\n+        char separator = UINamingContainer.getSeparatorChar(getFacesContext());\n+\n+        visitColumns(getFacesContext(), separator, this, c -> {\n+            FilterMeta f = filterBy.get(c.getColumnKey());\n+            if (f != null && !invalidate) {\n+                f.setColumn(c);\n+            }\n+            else {\n+                f = FilterMeta.of(getFacesContext(), getVar(), c);\n+                if (f != null) {\n+                    filterBy.put(f.getColumnKey(), f);\n+                    filtered.set(filtered.get() || f.isActive());\n+                }\n+            }\n+        });\n+\n+        // merge internal filterBy with user filterBy\n+        Object userfilterBy = getFilterBy();\n+        if (userfilterBy != null) {\n+            updateFilterByWithUserFilterBy(filterBy, userfilterBy, filtered);\n+        }\n+\n+        // build global filterBy\n+        updateFilterByWithGlobalFilter(filterBy, filtered);\n+\n+        // finally set if default filtering is enabled\n+        setDefaultFilter(filtered.get());\n+\n+        setFilterByAsMap(filterBy);\n+\n+        return filterBy;\n+    }\n+\n+    protected void updateFilterByWithTableState(Map<String, FilterMeta> tsSortBy) {\n+        if (tsSortBy != null) {\n+            boolean defaultFilter = isDefaultFilter();\n+            for (Map.Entry<String, FilterMeta> entry : tsSortBy.entrySet()) {\n+                FilterMeta intlSortBy = getFilterByAsMap().get(entry.getKey());\n+                if (intlSortBy != null) {\n+                    FilterMeta tsSortMeta = entry.getValue();\n+                    intlSortBy.setFilterValue(tsSortMeta.getFilterValue());\n+                    defaultFilter |= intlSortBy.isActive();\n+                }\n+            }\n+\n+            setDefaultFilter(defaultFilter);\n+        }\n+    }\n+\n+    protected void updateFilterByWithUserFilterBy(Map<String, FilterMeta> intlFilterBy, Object usrFilterBy, AtomicBoolean filtered) {\n+        Collection<FilterMeta> filterByTmp;\n+        if (usrFilterBy instanceof FilterMeta) {\n+            filterByTmp = Collections.singletonList((FilterMeta) usrFilterBy);\n+        }\n+        else if (!(usrFilterBy instanceof Collection)) {\n+            throw new FacesException(\"DataTable#filterBy expects a single or a collection of FilterMeta\");\n+        }\n+        else {\n+            filterByTmp = (Collection<FilterMeta>) usrFilterBy;\n+        }\n+\n+        for (FilterMeta userFM : filterByTmp) {\n+            FilterMeta intlFM = intlFilterBy.values().stream()\n+                    .filter(o -> o.getField().equals(userFM.getField()))\n+                    .findAny()\n+                    .orElseThrow(() -> new FacesException(\"No column with field '\" + userFM.getField() + \"' has been found\"));\n+\n+            ValueExpression filterByVE = userFM.getFilterBy();\n+            if (filterByVE == null) {\n+                filterByVE = createValueExprFromVarField(getFacesContext(), getVar(), userFM.getField());\n+            }\n+\n+            intlFM.setFilterValue(userFM.getFilterValue());\n+            intlFM.setFilterBy(filterByVE);\n+            intlFM.setConstraint(userFM.getConstraint());\n+            intlFM.setMatchMode(userFM.getMatchMode());\n+            filtered.set(filtered.get() || userFM.isActive());\n+        }\n+    }\n+\n+    protected void updateFilterByWithGlobalFilter(Map<String, FilterMeta> filterBy, AtomicBoolean filtered) {\n+        String globalFilter = getGlobalFilter();\n+        Set<SearchExpressionHint> hint = LangUtils.isValueBlank(globalFilter)\n+                ? EnumSet.of(SearchExpressionHint.IGNORE_NO_RESULT)\n+                : Collections.emptySet();\n+        UIComponent globalFilterComponent = SearchExpressionFacade\n+                .resolveComponent(getFacesContext(), this, DataTable.PropertyKeys.globalFilter.toString(), hint);\n+        if (globalFilterComponent != null) {\n+            if (globalFilterComponent instanceof ValueHolder) {\n+                ((ValueHolder) globalFilterComponent).setValue(globalFilter);\n+            }\n+            FilterMeta globalFilterBy = FilterMeta.of(filterBy.values(), globalFilter, getGlobalFilterFunction());\n+            filterBy.put(globalFilterBy.getColumnKey(), globalFilterBy);\n+            filtered.set(filtered.get() || globalFilterBy.isActive());\n+        }\n+    }\n+\n+    public boolean isColumnFilterable(UIColumn column) {\n+        Map<String, FilterMeta> filterBy = getFilterByAsMap();\n+        return filterBy.containsKey(column.getColumnKey());\n+    }\n+\n     public Map<String, SortMeta> getSortByAsMap() {\n-        return ComponentUtils.computeIfAbsent(getStateHelper(), \"_sortBy\", () -> initSortBy(getSortBy()));\n+        return ComponentUtils.computeIfAbsent(getStateHelper(), \"_sortBy\", this::initSortBy);\n     }\n \n     public void setSortByAsMap(Map<String, SortMeta> sortBy) {\n         getStateHelper().put(\"_sortBy\", sortBy);\n     }\n+\n+    public Map<String, FilterMeta> getFilterByAsMap() {\n+        return ComponentUtils.eval(getStateHelper(), \"_filterBy\", Collections::emptyMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4308246a2efe77aabbdefe7f23fbe702d2870be5"}, "originalPosition": 414}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7028d43f576b9148ed85c3cf4a6c67345b770be5", "author": {"user": {"login": "Rapster", "name": "S\u00e9bastien Lepage"}}, "url": "https://github.com/primefaces/primefaces/commit/7028d43f576b9148ed85c3cf4a6c67345b770be5", "committedDate": "2020-11-26T17:19:05Z", "message": "Fix #6402 - DataTable: cleanup filtering"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2739, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}