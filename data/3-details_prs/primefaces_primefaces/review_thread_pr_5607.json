{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjI1NDc2", "number": 5607, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NjoyN1rODgdCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1MTowOFrOD4plwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU2NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/primefaces/component/fileupload/NativeFileUploadDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0NjoyN1rOFqqxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMTo1OTo1NVrOFqwfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTIyNA==", "bodyText": "Compile this pattern in a static final CONSTANT for performance so it doesn't have to recompile this pattern on every call.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r380285224", "createdAt": "2020-02-17T16:46:27Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/fileupload/NativeFileUploadDecoder.java", "diffHunk": "@@ -97,10 +99,30 @@ private static void decodeAdvanced(FacesContext context, FileUpload fileUpload,\n         Part part = request.getPart(clientId);\n \n         if (part != null) {\n+            String contentRange = request.getHeader(\"Content-Range\");\n+\n+            Pattern pattern = Pattern.compile(\"bytes ([0-9]+?)-([0-9]+?)/([0-9]+?)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ca06bf53687347c43e0e6b513e470058e0110"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3ODg4NQ==", "bodyText": "Based on https://tools.ietf.org/html/rfc7233#section-4.2, I would go for ^bytes (\\d+)-(\\d+)\\/(\\d+|\\*)$", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r380378885", "createdAt": "2020-02-17T21:59:55Z", "author": {"login": "Rapster"}, "path": "src/main/java/org/primefaces/component/fileupload/NativeFileUploadDecoder.java", "diffHunk": "@@ -97,10 +99,30 @@ private static void decodeAdvanced(FacesContext context, FileUpload fileUpload,\n         Part part = request.getPart(clientId);\n \n         if (part != null) {\n+            String contentRange = request.getHeader(\"Content-Range\");\n+\n+            Pattern pattern = Pattern.compile(\"bytes ([0-9]+?)-([0-9]+?)/([0-9]+?)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTIyNA=="}, "originalCommit": {"oid": "a77ca06bf53687347c43e0e6b513e470058e0110"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzU2OTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/primefaces/component/fileupload/NativeFileUploadDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Njo1NlrOFqqyCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjo0Njo1NlrOFqqyCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTQ1MQ==", "bodyText": "Probably safe to throw an exception here as its an expected case.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r380285451", "createdAt": "2020-02-17T16:46:56Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/fileupload/NativeFileUploadDecoder.java", "diffHunk": "@@ -97,10 +99,30 @@ private static void decodeAdvanced(FacesContext context, FileUpload fileUpload,\n         Part part = request.getPart(clientId);\n \n         if (part != null) {\n+            String contentRange = request.getHeader(\"Content-Range\");\n+\n+            Pattern pattern = Pattern.compile(\"bytes ([0-9]+?)-([0-9]+?)/([0-9]+?)\");\n+            Matcher matcher = pattern.matcher(contentRange);\n+\n             NativeUploadedFile uploadedFile = new NativeUploadedFile(part, fileUpload.getSizeLimit());\n             if (FileUploadUtils.isValidFile(context, fileUpload, uploadedFile)) {\n                 fileUpload.queueEvent(new FileUploadEvent(fileUpload, uploadedFile));\n             }\n+\n+            if (fileUpload.getMaxChunkSize() > 0) {\n+                if (matcher.matches()) {\n+                    //chunking is active\n+                    uploadedFile.setChunkRangeBegin(Long.parseLong(matcher.group(1)));\n+                    uploadedFile.setChunkRangeEnd(Long.parseLong(matcher.group(2)));\n+                    uploadedFile.setChunkTotalFileSize(Long.parseLong(matcher.group(3)));\n+                    if ((uploadedFile.getChunkRangeEnd() + 1) == uploadedFile.getChunkTotalFileSize()) {\n+                        uploadedFile.setLastChunk(true);\n+                    }\n+                }\n+                else {\n+                    //TODO: throw exception?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77ca06bf53687347c43e0e6b513e470058e0110"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDExNjM3OnYy", "diffSide": "RIGHT", "path": "docs/9_0/components/fileupload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNTowOFrOGD31dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNTowOFrOGD31dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzcxNg==", "bodyText": "Still need examples here?", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r406713716", "createdAt": "2020-04-10T11:15:08Z", "author": {"login": "melloware"}, "path": "docs/9_0/components/fileupload.md", "diffHunk": "@@ -285,6 +287,15 @@ folder.\n **Note** that uploadDirectory is used internally, you always need to implement the logic to save the file\n contents yourself in your backing bean.\n \n+## Chunking\n+FileUpload supports chunked fileupload in advanced-mode via maxChunkSize - attribute.\n+\n+Chunked file upload comes with following restrictions:\n+1. It is only supported for `mode=\"advanced\"`\n+2. It does not support `virusScan=\"true\"` and `validateContentType=\"true\"` (The application has to care about this itself. PrimeFaces can't handle this for chunked upload.)\n+\n+TODO: code-example, restrictions, ....\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d0552c005eda4fbb5d24548d56928ee4ec2f9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDExODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNjozMVrOGD322g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNjozMVrOGD322g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxNDA3NA==", "bodyText": "You can remove the parenthesis around this.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r406714074", "createdAt": "2020-04-10T11:16:31Z", "author": {"login": "melloware"}, "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "diffHunk": "@@ -99,4 +121,8 @@ else if (newValue instanceof UploadedFiles) {\n             }\n         }\n     }\n+\n+    public boolean isChunkedUpload() {\n+        return (getMaxChunkSize() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2d0552c005eda4fbb5d24548d56928ee4ec2f9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODU5NDU1OnYy", "diffSide": "RIGHT", "path": "docs/9_0/components/fileupload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo0MDowM1rOGHd40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo0MDowM1rOGHd40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4Mjg5Nw==", "bodyText": "Still a TODO?", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410482897", "createdAt": "2020-04-17T21:40:03Z", "author": {"login": "melloware"}, "path": "docs/9_0/components/fileupload.md", "diffHunk": "@@ -285,6 +287,67 @@ folder.\n **Note** that uploadDirectory is used internally, you always need to implement the logic to save the file\n contents yourself in your backing bean.\n \n+## Chunking\n+FileUpload supports chunked fileupload in advanced-mode via maxChunkSize - attribute.\n+\n+Chunked file upload comes with following restrictions:\n+1. It is only supported for `mode=\"advanced\"`\n+2. It does not support `virusScan=\"true\"` and `validateContentType=\"true\"` (The application has to care about this itself. PrimeFaces can't handle this for chunked upload.)\n+\n+```xhtml\n+<h:form>          \n+\t<p:fileUpload chunkListener=\"#{fileUploadView.handleFileChunkUpload}\" listener=\"#{fileUploadView.handleFileUpload}\" mode=\"advanced\" dragDropSupport=\"false\"\n+\t\t\t\t  multiple=\"true\" update=\"messages\" sizeLimit=\"10000000\" fileLimit=\"3\" allowTypes=\"/(\\.|\\/)(gif|jpe?g|png)$/\"\n+\t\t\t\t  maxChunkSize=\"1000000\" />\n+\n+\t<p:growl id=\"messages\" showDetail=\"true\" keepAlive=\"true\" />\n+</h:form>\n+```\n+\n+```java\n+public void handleFileChunkUpload(FileChunkUploadEvent event) {\n+\tUploadedFileChunk uploadedFileChunk = event.getFileChunk();\n+\n+\tFacesMessage msg = new FacesMessage(\"Chunk Successful\", \"Chunk \" + uploadedFileChunk.getChunkRangeBegin() +\n+\t\t\t\" - \" + uploadedFileChunk.getChunkRangeEnd() +\n+\t\t\t\" of file \" + uploadedFileChunk.getFileName() + \" is uploaded.\");\n+\tFacesContext.getCurrentInstance().addMessage(null, msg);\n+\n+\ttry {\n+\t\tOpenOption openOption = StandardOpenOption.APPEND;\n+\t\tif (uploadedFileChunk.getChunkRangeBegin() == 0) {\n+\t\t\topenOption = StandardOpenOption.CREATE;\n+\t\t}\n+\n+\t\tFiles.write(Paths.get(System.getProperty(\"java.io.tmpdir\"), uploadedFileChunk.getFileName()), uploadedFileChunk.getContent(), openOption);\n+\t}\n+\tcatch (IOException ex) {\n+\t\tmsg = new FacesMessage(\"Chunk Error\", \"Chunk \" + uploadedFileChunk.getChunkRangeBegin() +\n+\t\t\t\t\" - \" + uploadedFileChunk.getChunkRangeEnd() +\n+\t\t\t\t\" of file \" + uploadedFileChunk.getFileName() + \" can\u00b4t be written to tempDir. \" + ex.getMessage());\n+\t\tmsg.setSeverity(FacesMessage.SEVERITY_ERROR);\n+\t\tFacesContext.getCurrentInstance().addMessage(null, msg);\n+\t}\n+}\n+\n+public void handleFileUpload(FileUploadEvent event) {\n+\tFacesMessage msg = new FacesMessage(\"Successful\", event.getFile().getFileName() + \" is uploaded.\");\n+\tFacesContext.getCurrentInstance().addMessage(null, msg);\n+\n+    try {\n+        //TODO: process file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f00a0782ce1eafe3e2a76dac89157da937573a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTg3NzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxMDowOToyMlrOGH1eNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxMzoyNjoxNVrOGH3ozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTMwMg==", "bodyText": "chunks are never submitted as a value (and that's on purpose), so this condition will never be verified", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410869302", "createdAt": "2020-04-19T10:09:22Z", "author": {"login": "Rapster"}, "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "diffHunk": "@@ -97,8 +98,13 @@ else if (newValue instanceof UploadedFiles) {\n                     throw new IllegalArgumentException(\"Argument of type '\" + newValue.getClass().getName() + \"' not supported\");\n                 }\n \n-                if (newValue instanceof UploadedFile && \"advanced\".equals(getMode())) {\n-                    queueEvent(new FileUploadEvent(this, (UploadedFile) newValue));\n+                if (\"advanced\".equals(getMode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwMjk5OQ==", "bodyText": "IMO the core question is do we want to to have a chunkListener? Or are we fine with the \u201enormal\u201c listener which get\u00b4s fired after the last chunk.\nThe code you wrote last night fired the \u201enormal\u201c listener after each chunk. With my modification we fire chunkListener after each chunk and the \u201enormal\u201c listener is fired after the last chunk was uploaded and we have the whole file on the server.\nFrom my side i do not think we need the chunkListener. IMO ist kind of nice2have.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410902999", "createdAt": "2020-04-19T13:16:43Z", "author": {"login": "christophs78"}, "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "diffHunk": "@@ -97,8 +98,13 @@ else if (newValue instanceof UploadedFiles) {\n                     throw new IllegalArgumentException(\"Argument of type '\" + newValue.getClass().getName() + \"' not supported\");\n                 }\n \n-                if (newValue instanceof UploadedFile && \"advanced\".equals(getMode())) {\n-                    queueEvent(new FileUploadEvent(this, (UploadedFile) newValue));\n+                if (\"advanced\".equals(getMode())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTMwMg=="}, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwNDc4MA==", "bodyText": "That's actually something have been wondering as well, do we need this chunkListener...? The only use case I have in mind is whenever you want and can calculate something over chunks (as mentionned digest for example) instead of processing the whole file. Have a look at https://docs.oracle.com/javase/7/docs/api/java/security/DigestInputStream.html to have a clearer of what I'm referring to.\nRight now, that's probably something we don't really need, being said, the use case I mentionned might be solved using a custom FileUploadChunkDecoder", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410904780", "createdAt": "2020-04-19T13:26:15Z", "author": {"login": "Rapster"}, "path": "src/main/java/org/primefaces/component/fileupload/FileUpload.java", "diffHunk": "@@ -97,8 +98,13 @@ else if (newValue instanceof UploadedFiles) {\n                     throw new IllegalArgumentException(\"Argument of type '\" + newValue.getClass().getName() + \"' not supported\");\n                 }\n \n-                if (newValue instanceof UploadedFile && \"advanced\".equals(getMode())) {\n-                    queueEvent(new FileUploadEvent(this, (UploadedFile) newValue));\n+                if (\"advanced\".equals(getMode())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTMwMg=="}, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjAwNjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/primefaces/component/fileupload/DefaultFileUploadChunkDecoder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxMTozNjo0NFrOGH2YMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxMzoxODo0OFrOGH3jNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg4NDE0Nw==", "bodyText": "The chunkDir is deleted right after the final file is merged, I'd rather delete the chunks in one shot after making sure the final file is merged", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410884147", "createdAt": "2020-04-19T11:36:44Z", "author": {"login": "Rapster"}, "path": "src/main/java/org/primefaces/component/fileupload/DefaultFileUploadChunkDecoder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2019 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.fileupload;\n+\n+import org.primefaces.event.FileChunkUploadEvent;\n+import org.primefaces.model.file.*;\n+import org.primefaces.util.FileUploadUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.*;\n+import java.util.List;\n+\n+public class DefaultFileUploadChunkDecoder implements FileUploadChunkDecoder {\n+\n+    @Override\n+    public void decodeContentRange(FileUpload fileUpload, HttpServletRequest request, UploadedFile uploadedFile) throws IOException {\n+        ContentRange contentRange = ContentRange.of(getContentRange(request));\n+\n+        String tmpDir =  getUploadDirectory();\n+        String basename = generateFileInfoKey(request);\n+        Path chunksDir = Paths.get(tmpDir, basename);\n+\n+        UploadedFileChunk chunk = createChunk(fileUpload, uploadedFile, chunksDir, contentRange);\n+\n+        fileUpload.queueEvent(new FileChunkUploadEvent(fileUpload, chunk));\n+\n+        if (chunk.isLastChunk()) {\n+            UploadedFile file = processLastChunk(fileUpload, chunk, chunksDir);\n+            fileUpload.setSubmittedValue(new UploadedFileWrapper(file));\n+        }\n+    }\n+\n+    protected UploadedFileChunk createChunk(FileUpload fileUpload, UploadedFile uploadedFile, Path path, ContentRange contentRange) throws IOException {\n+        if (Files.notExists(path)) {\n+            Files.createDirectory(path);\n+        }\n+\n+        long packet = contentRange.getChunkRangeBegin() / fileUpload.getMaxChunkSize();\n+        String chunkname = String.valueOf(packet);\n+        Path chunkFile = Paths.get(path.toFile().getAbsolutePath(), chunkname);\n+        try (InputStream is = uploadedFile.getInputStream()) {\n+            Files.copy(is, chunkFile, StandardCopyOption.REPLACE_EXISTING);\n+        }\n+\n+        return new DefaultUploadedFileChunk(uploadedFile, contentRange);\n+    }\n+\n+    protected UploadedFile processLastChunk(FileUpload fileUpload, UploadedFileChunk chunk, Path chunksDir) throws IOException {\n+        Path wholePath = Paths.get(getUploadDirectory(), chunk.getFileName());\n+        Files.deleteIfExists(wholePath);\n+        Path whole = Files.createFile(wholePath);\n+\n+        List<Path> chunks = FileUploadUtils.listChunks(chunksDir);\n+        for (Path p : chunks) {\n+            Files.write(whole, Files.readAllBytes(p), StandardOpenOption.APPEND);\n+            Files.delete(p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwMDUzOQ==", "bodyText": "Deleting chunkDir with (chunk-)files within throws a DirectoryNotEmptyException.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410900539", "createdAt": "2020-04-19T13:07:58Z", "author": {"login": "christophs78"}, "path": "src/main/java/org/primefaces/component/fileupload/DefaultFileUploadChunkDecoder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2019 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.fileupload;\n+\n+import org.primefaces.event.FileChunkUploadEvent;\n+import org.primefaces.model.file.*;\n+import org.primefaces.util.FileUploadUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.*;\n+import java.util.List;\n+\n+public class DefaultFileUploadChunkDecoder implements FileUploadChunkDecoder {\n+\n+    @Override\n+    public void decodeContentRange(FileUpload fileUpload, HttpServletRequest request, UploadedFile uploadedFile) throws IOException {\n+        ContentRange contentRange = ContentRange.of(getContentRange(request));\n+\n+        String tmpDir =  getUploadDirectory();\n+        String basename = generateFileInfoKey(request);\n+        Path chunksDir = Paths.get(tmpDir, basename);\n+\n+        UploadedFileChunk chunk = createChunk(fileUpload, uploadedFile, chunksDir, contentRange);\n+\n+        fileUpload.queueEvent(new FileChunkUploadEvent(fileUpload, chunk));\n+\n+        if (chunk.isLastChunk()) {\n+            UploadedFile file = processLastChunk(fileUpload, chunk, chunksDir);\n+            fileUpload.setSubmittedValue(new UploadedFileWrapper(file));\n+        }\n+    }\n+\n+    protected UploadedFileChunk createChunk(FileUpload fileUpload, UploadedFile uploadedFile, Path path, ContentRange contentRange) throws IOException {\n+        if (Files.notExists(path)) {\n+            Files.createDirectory(path);\n+        }\n+\n+        long packet = contentRange.getChunkRangeBegin() / fileUpload.getMaxChunkSize();\n+        String chunkname = String.valueOf(packet);\n+        Path chunkFile = Paths.get(path.toFile().getAbsolutePath(), chunkname);\n+        try (InputStream is = uploadedFile.getInputStream()) {\n+            Files.copy(is, chunkFile, StandardCopyOption.REPLACE_EXISTING);\n+        }\n+\n+        return new DefaultUploadedFileChunk(uploadedFile, contentRange);\n+    }\n+\n+    protected UploadedFile processLastChunk(FileUpload fileUpload, UploadedFileChunk chunk, Path chunksDir) throws IOException {\n+        Path wholePath = Paths.get(getUploadDirectory(), chunk.getFileName());\n+        Files.deleteIfExists(wholePath);\n+        Path whole = Files.createFile(wholePath);\n+\n+        List<Path> chunks = FileUploadUtils.listChunks(chunksDir);\n+        for (Path p : chunks) {\n+            Files.write(whole, Files.readAllBytes(p), StandardOpenOption.APPEND);\n+            Files.delete(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg4NDE0Nw=="}, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkwMzM1MQ==", "bodyText": "Ah indeed... Last night I brought a lot of modifications just like this one, I guess it was too late to see it \ud83d\ude05 Anyway i'll have a look at it", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r410903351", "createdAt": "2020-04-19T13:18:48Z", "author": {"login": "Rapster"}, "path": "src/main/java/org/primefaces/component/fileupload/DefaultFileUploadChunkDecoder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2019 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.component.fileupload;\n+\n+import org.primefaces.event.FileChunkUploadEvent;\n+import org.primefaces.model.file.*;\n+import org.primefaces.util.FileUploadUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.*;\n+import java.util.List;\n+\n+public class DefaultFileUploadChunkDecoder implements FileUploadChunkDecoder {\n+\n+    @Override\n+    public void decodeContentRange(FileUpload fileUpload, HttpServletRequest request, UploadedFile uploadedFile) throws IOException {\n+        ContentRange contentRange = ContentRange.of(getContentRange(request));\n+\n+        String tmpDir =  getUploadDirectory();\n+        String basename = generateFileInfoKey(request);\n+        Path chunksDir = Paths.get(tmpDir, basename);\n+\n+        UploadedFileChunk chunk = createChunk(fileUpload, uploadedFile, chunksDir, contentRange);\n+\n+        fileUpload.queueEvent(new FileChunkUploadEvent(fileUpload, chunk));\n+\n+        if (chunk.isLastChunk()) {\n+            UploadedFile file = processLastChunk(fileUpload, chunk, chunksDir);\n+            fileUpload.setSubmittedValue(new UploadedFileWrapper(file));\n+        }\n+    }\n+\n+    protected UploadedFileChunk createChunk(FileUpload fileUpload, UploadedFile uploadedFile, Path path, ContentRange contentRange) throws IOException {\n+        if (Files.notExists(path)) {\n+            Files.createDirectory(path);\n+        }\n+\n+        long packet = contentRange.getChunkRangeBegin() / fileUpload.getMaxChunkSize();\n+        String chunkname = String.valueOf(packet);\n+        Path chunkFile = Paths.get(path.toFile().getAbsolutePath(), chunkname);\n+        try (InputStream is = uploadedFile.getInputStream()) {\n+            Files.copy(is, chunkFile, StandardCopyOption.REPLACE_EXISTING);\n+        }\n+\n+        return new DefaultUploadedFileChunk(uploadedFile, contentRange);\n+    }\n+\n+    protected UploadedFile processLastChunk(FileUpload fileUpload, UploadedFileChunk chunk, Path chunksDir) throws IOException {\n+        Path wholePath = Paths.get(getUploadDirectory(), chunk.getFileName());\n+        Files.deleteIfExists(wholePath);\n+        Path whole = Files.createFile(wholePath);\n+\n+        List<Path> chunks = FileUploadUtils.listChunks(chunksDir);\n+        for (Path p : chunks) {\n+            Files.write(whole, Files.readAllBytes(p), StandardOpenOption.APPEND);\n+            Files.delete(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg4NDE0Nw=="}, "originalCommit": {"oid": "7e47dd9cedd0d10869568b279e107b8098b9bad1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzgzMzI2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/META-INF/resources/primefaces/fileupload/2-fileupload.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODo1Njo1NlrOGPFTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyODowOVrOGPGv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2ODYyOA==", "bodyText": "Not sure whether this should be at the start of fail-function. Think this would delete already uploaded chunks before we have the chance to resume.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r418468628", "createdAt": "2020-05-01T08:56:56Z", "author": {"login": "christophs78"}, "path": "src/main/resources/META-INF/resources/primefaces/fileupload/2-fileupload.js", "diffHunk": "@@ -225,13 +247,55 @@ PrimeFaces.widget.FileUpload = PrimeFaces.widget.BaseWidget.extend({\n                 }\n             },\n             fail: function(e, data) {\n+                if ($this.cfg.resumeContextPath) {\n+                    $.ajax({\n+                        url: $this.cfg.resumeContextPath + '?' + $.param({'X-File-Id' : $this.createXFileId(data.files[0])}),\n+                        dataType: 'json',\n+                        type: 'DELETE'\n+                    });\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e7eb06bb4e47be61249c2c113d047fe589f9c90"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4MjQ5Ng==", "bodyText": "Not sure what you mean? fail function is called when user abort upload", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r418482496", "createdAt": "2020-05-01T09:49:32Z", "author": {"login": "Rapster"}, "path": "src/main/resources/META-INF/resources/primefaces/fileupload/2-fileupload.js", "diffHunk": "@@ -225,13 +247,55 @@ PrimeFaces.widget.FileUpload = PrimeFaces.widget.BaseWidget.extend({\n                 }\n             },\n             fail: function(e, data) {\n+                if ($this.cfg.resumeContextPath) {\n+                    $.ajax({\n+                        url: $this.cfg.resumeContextPath + '?' + $.param({'X-File-Id' : $this.createXFileId(data.files[0])}),\n+                        dataType: 'json',\n+                        type: 'DELETE'\n+                    });\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2ODYyOA=="}, "originalCommit": {"oid": "7e7eb06bb4e47be61249c2c113d047fe589f9c90"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MjM3Mg==", "bodyText": "Fail is also called when the network-connection breaks. (eg when i simulate this via browser-devtools)\nWe may move this block into the if (data.errorThrown === 'abort') { a few lines down.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r418492372", "createdAt": "2020-05-01T10:28:09Z", "author": {"login": "christophs78"}, "path": "src/main/resources/META-INF/resources/primefaces/fileupload/2-fileupload.js", "diffHunk": "@@ -225,13 +247,55 @@ PrimeFaces.widget.FileUpload = PrimeFaces.widget.BaseWidget.extend({\n                 }\n             },\n             fail: function(e, data) {\n+                if ($this.cfg.resumeContextPath) {\n+                    $.ajax({\n+                        url: $this.cfg.resumeContextPath + '?' + $.param({'X-File-Id' : $this.createXFileId(data.files[0])}),\n+                        dataType: 'json',\n+                        type: 'DELETE'\n+                    });\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2ODYyOA=="}, "originalCommit": {"oid": "7e7eb06bb4e47be61249c2c113d047fe589f9c90"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIyMTYyOnYy", "diffSide": "RIGHT", "path": "src/main/resources/META-INF/web-fragment.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozMToyN1rOGPiL-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozMToyN1rOGPiL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MTk0Nw==", "bodyText": "If I'm not mistaken, web-fragment is servlet 3.0", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r418941947", "createdAt": "2020-05-02T10:31:27Z", "author": {"login": "Rapster"}, "path": "src/main/resources/META-INF/web-fragment.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b212f526e91d2192971aadcee763a16e47da7a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI4MjU3OnYy", "diffSide": "RIGHT", "path": "docs/9_0/components/fileupload.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1MTowOFrOGPioZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1MTowOFrOGPioZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0OTIyMQ==", "bodyText": "@Rapster : Can you help out with your english-language-skills? I\u00b4m not totally happy with my text.", "url": "https://github.com/primefaces/primefaces/pull/5607#discussion_r418949221", "createdAt": "2020-05-02T11:51:08Z", "author": {"login": "christophs78"}, "path": "docs/9_0/components/fileupload.md", "diffHunk": "@@ -287,6 +290,43 @@ folder.\n **Note** that uploadDirectory is used internally, you always need to implement the logic to save the file\n contents yourself in your backing bean.\n \n+## Chunking and Resume\n+FileUpload supports chunked fileupload in advanced-mode using `maxChunkSize` attribute.\n+\n+Chunked file upload comes with following restrictions:\n+1. It is only supported for `mode=\"advanced\"`\n+\n+### Resuming chunked file uploads\n+FileUpload is able to resume uploads that have been canceled (e.g user abort, lost of connection etc.) At first, you'll need to enable chunking and add this servlet:\n+```xml\n+<servlet>\n+    <servlet-name>FileUpload Resume Servlet</servlet-name>\n+    <servlet-class>org.primefaces.webapp.FileUploadChunksServlet</servlet-class>\n+</servlet>\n+<servlet-mapping>\n+    <servlet-name>FileUpload Resume Servlet</servlet-name>\n+    <url-pattern>/file/resume/</url-pattern>\n+</servlet-mapping>\n+```\n+\n+> You're free to choose `url-pattern` mapping, as long it doesn't conflict with an existing page\n+\n+### Removal of uploaded files merged from chunked file upload\n+For Servlet 3.0 and up uploaded files (merged from chunks) are automatically removed from the internal (temporary) \n+upload directory after the request was processed.\n+\n+When you still use a Servlet 2.5 - container you need the add the following listener to your web.xml:\n+```xml\n+<listener>\n+\t<listener-class>org.primefaces.webapp.UploadedFileCleanerListener</listener-class>\n+</listener>\n+```\n+\n+The single uploaded chunks also get put into an internal (temporary) upload directory.\n+These chunk-files get removed\n+1. after the last chunk is uploaded and the merged file is created \n+2. when the users aborts the upload.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbad6c24ef81524a176b07d5775048a56c0f2eb5"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1942, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}