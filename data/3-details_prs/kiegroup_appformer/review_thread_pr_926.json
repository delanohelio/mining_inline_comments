{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNTI1OTkz", "number": 926, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMToxMVrODphSBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMToxMVrODphSBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODYzNDk0OnYy", "diffSide": "RIGHT", "path": "uberfire-security/uberfire-security-api/src/main/java/org/uberfire/security/impl/authz/DefaultAuthorizationPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMToxMVrOF4vwPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozOToyOFrOF4xibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Njk3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Map<Group, DefaultAuthorizationEntry> groupEntryMap = new HashMap<>();\n          \n          \n            \n                final Map<Role, DefaultAuthorizationEntry> rolesEntryMap = new HashMap<>();\n          \n          \n            \n                private final Map<Group, DefaultAuthorizationEntry> groupEntryMap = new HashMap<>();\n          \n          \n            \n                private final Map<Role, DefaultAuthorizationEntry> rolesEntryMap = new HashMap<>();", "url": "https://github.com/kiegroup/appformer/pull/926#discussion_r395046975", "createdAt": "2020-03-19T14:01:11Z", "author": {"login": "caponetto"}, "path": "uberfire-security/uberfire-security-api/src/main/java/org/uberfire/security/impl/authz/DefaultAuthorizationPolicy.java", "diffHunk": "@@ -30,32 +31,34 @@\n public class DefaultAuthorizationPolicy implements AuthorizationPolicy {\n \n     DefaultAuthorizationEntry defaultEntry = new DefaultAuthorizationEntry();\n-    private Set<DefaultAuthorizationEntry> entrySet = new HashSet<>();\n+    final Map<Group, DefaultAuthorizationEntry> groupEntryMap = new HashMap<>();\n+    final Map<Role, DefaultAuthorizationEntry> rolesEntryMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7352d00dbdd046fbadcd42f486b6c285f47a8c0d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3NjIwNg==", "bodyText": "I have added test case covering cache functionality and recalculation of the permissions . Thanks @caponetto for your review and help this. Much appreciated :)", "url": "https://github.com/kiegroup/appformer/pull/926#discussion_r395076206", "createdAt": "2020-03-19T14:39:28Z", "author": {"login": "RishiRajAnand"}, "path": "uberfire-security/uberfire-security-api/src/main/java/org/uberfire/security/impl/authz/DefaultAuthorizationPolicy.java", "diffHunk": "@@ -30,32 +31,34 @@\n public class DefaultAuthorizationPolicy implements AuthorizationPolicy {\n \n     DefaultAuthorizationEntry defaultEntry = new DefaultAuthorizationEntry();\n-    private Set<DefaultAuthorizationEntry> entrySet = new HashSet<>();\n+    final Map<Group, DefaultAuthorizationEntry> groupEntryMap = new HashMap<>();\n+    final Map<Role, DefaultAuthorizationEntry> rolesEntryMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Njk3NQ=="}, "originalCommit": {"oid": "7352d00dbdd046fbadcd42f486b6c285f47a8c0d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2756, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}