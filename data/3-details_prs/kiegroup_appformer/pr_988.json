{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODYzNzU5", "number": 988, "title": "KOGITO-764: Create a Guided Tour for first time users on DMN editor", "bodyText": "See https://issues.redhat.com/browse/KOGITO-764\n\n\n\nPart of an ensemble:\n\n#988\nkiegroup/kie-wb-common#3336\nkiegroup/kogito-tooling#182\n\n\nAssumptions:\n\nThis PR does not include i18n for any tour. It will be separately implemented by https://issues.redhat.com/browse/KOGITO-2471;\nThis PR does not include the final version of the tour, and the steps are a mix of the preliminary input provided by Liz and the Learn DMN in 15 minutes (as accordingly with @ederign).", "createdAt": "2020-06-17T13:46:51Z", "url": "https://github.com/kiegroup/appformer/pull/988", "merged": true, "mergeCommit": {"oid": "59133b88bf8c6fdfac82a362cc55126acb0e24a9"}, "closed": true, "closedAt": "2020-07-01T12:08:48Z", "author": {"login": "karreiro"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsgLxNAFqTQzMzM5ODY3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwVU6rAFqTQzOTk5MjA3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzk4Njc3", "url": "https://github.com/kiegroup/appformer/pull/988#pullrequestreview-433398677", "createdAt": "2020-06-18T15:26:59Z", "commit": {"oid": "4c8131117c37f6b0ae0c2b1454807ee3568b2645"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNjo1OVrOGl0maw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyODozMVrOGl0qlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjI5OQ==", "bodyText": "Could we please add javadoc to all new classes and their public methods?", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442312299", "createdAt": "2020-06-18T15:26:59Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.observers.GlobalHTMLObserver;\n+import org.appformer.kogito.bridge.client.guided.tour.service.GuidedTourService;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+\n+@ApplicationScoped\n+public class GuidedTourBridge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8131117c37f6b0ae0c2b1454807ee3568b2645"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjcyNw==", "bodyText": "This test is not correct", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442312727", "createdAt": "2020-06-18T15:27:35Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.observers.GlobalHTMLObserver;\n+import org.appformer.kogito.bridge.client.guided.tour.service.GuidedTourService;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ioc.client.api.Disposer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GuidedTourBridgeTest {\n+\n+    @Mock\n+    private GuidedTourService service;\n+\n+    @Mock\n+    private GlobalHTMLObserverFake observer;\n+\n+    private GuidedTourBridge bridge;\n+\n+    @Before\n+    public void setup() {\n+        bridge = spy(new GuidedTourBridge(service, observer));\n+        bridge.init();\n+    }\n+\n+    @Test\n+    public void testInit() {\n+        // 'init' is called on setup\n+        assertEquals(singletonList(observer), bridge.observers);\n+    }\n+\n+    @Test\n+    public void testRefresh() {\n+        final UserInteraction userInteraction = mock(UserInteraction.class);\n+        when(service.isEnabled()).thenReturn(true);\n+\n+        bridge.refresh(userInteraction);\n+\n+        verify(service).refresh(userInteraction);\n+    }\n+\n+    @Test\n+    public void testRegisterTutorial() {\n+        final Tutorial tutorial = mock(Tutorial.class);\n+        when(service.isEnabled()).thenReturn(true);\n+\n+        bridge.registerTutorial(tutorial);\n+\n+        verify(service).registerTutorial(tutorial);\n+    }\n+\n+    @Test\n+    public void testRefreshWhenBridgeIsNotEnabled() {\n+        final UserInteraction userInteraction = mock(UserInteraction.class);\n+        when(service.isEnabled()).thenReturn(false);\n+\n+        bridge.refresh(userInteraction);\n+\n+        verify(observer).dispose();\n+    }\n+\n+    @Test\n+    public void testRegisterTutorialWhenBridgeIsNotEnabled() {\n+        final Tutorial tutorial = mock(Tutorial.class);\n+        when(service.isEnabled()).thenReturn(false);\n+\n+        bridge.registerTutorial(tutorial);\n+\n+        verify(observer).dispose();\n+    }\n+\n+    @Test\n+    public void testRegisterObserver() {\n+        final GuidedTourObserver observer = mock(GuidedTourObserver.class);\n+\n+        bridge.registerObserver(observer);\n+\n+        verify(observer).setMonitorBridge(bridge);\n+        assertEquals(asList(this.observer, observer), bridge.observers);\n+    }\n+\n+    @Test\n+    public void testRegisterPositionProvider() {\n+        final GuidedTourCustomSelectorPositionProvider positionProvider = mock(GuidedTourCustomSelectorPositionProvider.class);\n+        final PositionProviderFunction positionProviderFunction = mock(PositionProviderFunction.class);\n+        final String type = \"type\";\n+\n+        doReturn(positionProvider).when(bridge).getPositionProviderInstance();\n+\n+        bridge.registerPositionProvider(type, positionProviderFunction);\n+\n+        verify(bridge).registerPositionProvider(type, positionProviderFunction);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8131117c37f6b0ae0c2b1454807ee3568b2645"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzM2Nw==", "bodyText": "Shouldn't we check if position is Rect.NONE?", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442313367", "createdAt": "2020-06-18T15:28:31Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import java.util.Objects;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.Console;\n+import elemental2.dom.DomGlobal;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class GuidedTourCustomSelectorPositionProviderTest {\n+\n+    @Mock\n+    private Console console;\n+\n+    private GuidedTourCustomSelectorPositionProvider positionProvider;\n+\n+    @Before\n+    public void setup() {\n+        positionProvider = spy(GuidedTourCustomSelectorPositionProvider.getInstance());\n+        DomGlobal.console = console;\n+    }\n+\n+    @Test\n+    public void testGetPosition() {\n+        final Rect rect1 = makeRect(1);\n+        final Rect rect2 = makeRect(2);\n+\n+        positionProvider.registerPositionProvider(\"TEST_PROVIDER_1\", name -> Objects.equals(name, \"OBJECT-1\") ? rect1 : rect2);\n+\n+        assertEquals(rect1, positionProvider.getPosition(\"TEST_PROVIDER_1:::OBJECT-1\"));\n+        assertEquals(rect2, positionProvider.getPosition(\"TEST_PROVIDER_1:::OBJECT-2\"));\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenSelectorIsInvalid() {\n+        final Rect rect1 = makeRect(1);\n+        final Rect rect2 = makeRect(2);\n+\n+        positionProvider.registerPositionProvider(\"TEST_PROVIDER_2\", name -> Objects.equals(name, \"OBJECT-1\") ? rect1 : rect2);\n+\n+        final Rect position = positionProvider.getPosition(\"TEST_PROVIDER_2___OBJECT-1\");\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] Invalid custom query selector: TEST_PROVIDER_2___OBJECT-1\");\n+        assertNotNull(position);\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenNoSelectorIsRegistered() {\n+        final Rect position = positionProvider.getPosition(\"TEST_PROVIDER_3:::OBJECT-1\");\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] The position provider could not be found: TEST_PROVIDER_3\");\n+        assertNotNull(position);\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenSelectorIsNull() {\n+        final Rect position = positionProvider.getPosition(null);\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] Invalid custom query selector: null\");\n+        assertNotNull(position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8131117c37f6b0ae0c2b1454807ee3568b2645"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6474dd24b7b7f94f80c52ae88e6287ceba538f0e", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/6474dd24b7b7f94f80c52ae88e6287ceba538f0e", "committedDate": "2020-06-22T21:23:39Z", "message": "KOGITO-764: Create a Guided Tour for first time users on DMN editor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0174828913f3c32823f41e0c87aef5bfecc5ed", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/4d0174828913f3c32823f41e0c87aef5bfecc5ed", "committedDate": "2020-06-22T21:23:39Z", "message": "Fix issue 10 - Guided Tour does not work on Firefox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c8131117c37f6b0ae0c2b1454807ee3568b2645", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/4c8131117c37f6b0ae0c2b1454807ee3568b2645", "committedDate": "2020-06-17T11:38:16Z", "message": "KOGITO-764: Create a Guided Tour for first time users on DMN editor"}, "afterCommit": {"oid": "4d0174828913f3c32823f41e0c87aef5bfecc5ed", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/4d0174828913f3c32823f41e0c87aef5bfecc5ed", "committedDate": "2020-06-22T21:23:39Z", "message": "Fix issue 10 - Guided Tour does not work on Firefox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883de4cf051fb631811446128060198397c96341", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/883de4cf051fb631811446128060198397c96341", "committedDate": "2020-06-22T23:55:01Z", "message": "Add Java docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "committedDate": "2020-06-23T00:03:54Z", "message": "Improve tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/appformer/commit/e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243", "committedDate": "2020-06-23T00:43:39Z", "message": "Add 'Step' Java doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTIyMDEz", "url": "https://github.com/kiegroup/appformer/pull/988#pullrequestreview-439122013", "createdAt": "2020-06-29T13:06:00Z", "commit": {"oid": "e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTkyMDc0", "url": "https://github.com/kiegroup/appformer/pull/988#pullrequestreview-439992074", "createdAt": "2020-06-30T13:05:18Z", "commit": {"oid": "e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2133, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}