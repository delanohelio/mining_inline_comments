{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjcxMTQ0", "number": 1016, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzozMlrOEWSkNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1Njo1NFrOEaCttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA4MzA5OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzozMlrOG9haZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzozMlrOG9haZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2Mzc0OA==", "bodyText": "Can you please format this file using spaces instead of tabs?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467163748", "createdAt": "2020-08-07T17:07:32Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/pom.xml", "diffHunk": "@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEwMDcyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorPopup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMjo1NFrOG9hk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMjo1NFrOG9hk3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NjQzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setTypeSelectorEnabled(boolean enableTypeSelector) {\n          \n          \n            \n                    editor.setTypeSelectorEnabled(enableTypeSelector);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void setExternalDisplayerEnabled(boolean enabled) {\n          \n          \n            \n                    editor.setExternalComponentSettingsEnabled(enabled);\n          \n          \n            \n                }\n          \n          \n            \n                public void setTypeSelectorEnabled(boolean enableTypeSelector) {\n          \n          \n            \n                    this.editor.setTypeSelectorEnabled(enableTypeSelector);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void setExternalDisplayerEnabled(boolean enabled) {\n          \n          \n            \n                    this.editor.setExternalComponentSettingsEnabled(enabled);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nJust to follow the pattern found on the other methods :)", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467166431", "createdAt": "2020-08-07T17:12:54Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorPopup.java", "diffHunk": "@@ -98,7 +98,15 @@ public void setOnSaveCommand(Command saveCommand) {\n     public void setOnCloseCommand(Command closeCommand) {\n         this.editor.setOnCloseCommand(closeCommand);\n     }\n+    \n+    public void setTypeSelectorEnabled(boolean enableTypeSelector) {\n+        editor.setTypeSelectorEnabled(enableTypeSelector);\n+    }\n \n+    public void setExternalDisplayerEnabled(boolean enabled) {\n+        editor.setExternalComponentSettingsEnabled(enabled);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEwMjkyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorView.ui.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMzo0MVrOG9hmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxMzo0MVrOG9hmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2Njc2OA==", "bodyText": "Please use i18n for Component Editor.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467166768", "createdAt": "2020-08-07T17:13:41Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorView.ui.xml", "diffHunk": "@@ -49,6 +49,7 @@\n       <b:TabListItem ui:field=\"optionType\" text=\"{i18n.displayer_editor_tab_type}\" />\n       <b:TabListItem ui:field=\"optionData\" text=\"{i18n.displayer_editor_tab_data}\" />\n       <b:TabListItem ui:field=\"optionSettings\" text=\"{i18n.displayer_editor_tab_display}\" />\n+      <b:TabListItem ui:field=\"optionComponentSettings\" text=\"Component Editor\" />      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEwNDgzOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorPopUp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNDowN1rOG9hnOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNDowN1rOG9hnOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NzAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.dashbuilder.displayer.client.widgets;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *       http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n             \n          \n          \n            \n            package org.dashbuilder.displayer.client.widgets;", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467167033", "createdAt": "2020-08-07T17:14:07Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorPopUp.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.dashbuilder.displayer.client.widgets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODExMDk1OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.css", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNjowN1rOG9hq_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNjowN1rOG9hq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2Nzk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             #externalComponentPropertiesPane {\n          \n          \n            \n                width: 100%;\n          \n          \n            \n                height: 100%;\n          \n          \n            \n             }\n          \n          \n            \n            #externalComponentPropertiesPane {\n          \n          \n            \n                width: 100%;\n          \n          \n            \n                height: 100%;\n          \n          \n            \n            }", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467167999", "createdAt": "2020-08-07T17:16:07Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.css", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+ \n+ #externalComponentPropertiesPane {\n+    width: 100%;\n+    height: 100%;\n+ }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODExMjYzOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNjo0MlrOG9hsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNjo0MlrOG9hsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2ODI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.dashbuilder.displayer.client.widgets;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *       http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n             \n          \n          \n            \n            package org.dashbuilder.displayer.client.widgets;", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467168267", "createdAt": "2020-08-07T17:16:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.dashbuilder.displayer.client.widgets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODExNTA4OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentView.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNzozNVrOG9htpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNzozNVrOG9htpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2ODY3OA==", "bodyText": "Consider using i18n instead of hardcoding the string External Component Container.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467168678", "createdAt": "2020-08-07T17:17:35Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentView.html", "diffHunk": "@@ -0,0 +1,19 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div id=\"componentRoot\" style=\"width: 100%; height: 100%\">\n+    <iframe id=\"externalComponentIFrame\" width=\"\"\n+        height=\"\" title=\"External Component Container\"></iframe>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEzNzg5OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/external/model/ComponentParameter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyNDo1OFrOG9h7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyNDo1OFrOG9h7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MjI4MA==", "bodyText": "Is there a reason for not having a constructor for this class?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467172280", "createdAt": "2020-08-07T17:24:58Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-services-api/src/main/java/org/dashbuilder/external/model/ComponentParameter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.external.model;\n+\n+import java.util.List;\n+\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+\n+@Portable\n+public class ComponentParameter {\n+\n+    private String name;\n+    private String type;\n+    private String category;\n+    private String defaultValue;\n+    private String label;\n+    private List<String> comboValues;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODE0MzE3OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/impl/ExternalDisplayerSettingsBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyNjoyNVrOG9h-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoyNjoyNVrOG9h-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MzA4MA==", "bodyText": "Am I missing something? I didn't get why this is Portable.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467173080", "createdAt": "2020-08-07T17:26:25Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/impl/ExternalDisplayerSettingsBuilderImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.impl;\n+\n+import org.dashbuilder.displayer.DisplayerSettings;\n+import org.dashbuilder.displayer.DisplayerType;\n+import org.dashbuilder.displayer.ExternalDisplayerSettingsBuilder;\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+\n+@Portable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODIxNTIyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-c3/src/main/java/org/dashbuilder/renderer/c3/client/charts/map/widgets/MapTooltip.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0OTo0OVrOG9irRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo0OTo0OVrOG9irRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NDQ1Mg==", "bodyText": "Can't this be done in the html or css?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467184452", "createdAt": "2020-08-07T17:49:49Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-c3/src/main/java/org/dashbuilder/renderer/c3/client/charts/map/widgets/MapTooltip.java", "diffHunk": "@@ -53,6 +54,11 @@\n     HTMLElement lblTooltipValue;\n     \n     private D3 d3 = D3.Builder.get();\n+    \n+    @PostConstruct\n+    public void init() {\n+        lblTooltipValue.style.visibility = \"hidden\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODMwNjQxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/DisplayerConstraints.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxOTo1N1rOG9jj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxOTo1N1rOG9jj1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5ODkzMg==", "bodyText": "The for loop below will be unnecessarily evaluated in case componentId == null.\nSo probably you'd want to just return in such a case.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467198932", "createdAt": "2020-08-07T18:19:57Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/DisplayerConstraints.java", "diffHunk": "@@ -83,9 +89,10 @@ public DisplayerConstraints setDataSetLookupConstraints(DataSetLookupConstraints\n     }\n \n     public void removeUnsupportedAttributes(DisplayerSettings displayerSettings) {\n+        String componentId = displayerSettings.getComponentId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODMzMTMxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/src/main/java/org/dashbuilder/external/ExternalComponentServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyOTowMFrOG9j0Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyOTowMFrOG9j0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMzA4Mg==", "bodyText": "Keep in mind that getPathInfo can return null.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467203082", "createdAt": "2020-08-07T18:29:00Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/src/main/java/org/dashbuilder/external/ExternalComponentServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.external;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+\n+import javax.activation.MimetypesFileTypeMap;\n+import javax.inject.Inject;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.dashbuilder.external.service.ExternalComponentAssetProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+public class ExternalComponentServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String CACHE_CONTROL_PARAM = \"cache-control\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ExternalComponentServlet.class);\n+\n+    @Inject\n+    ExternalComponentAssetProvider assetProvider;\n+\n+    String cacheControlHeaderValue = \"no-cache\";\n+    private MimetypesFileTypeMap mimetypesFileTypeMap;\n+\n+    @Override\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+        mimetypesFileTypeMap = new MimetypesFileTypeMap();\n+        String cacheControl = config.getInitParameter(CACHE_CONTROL_PARAM);\n+        if (cacheControl != null) {\n+            cacheControlHeaderValue = cacheControl;\n+        }\n+    }\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        try {\n+            handle(req, resp);\n+        } catch (IOException e) {\n+            logger.error(\"Error handling request to retrieve asset.\");\n+            logger.debug(\"Error handling request to retrieve asset.\", e);\n+            errorResponse(resp);\n+        }\n+    }\n+\n+    private void handle(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        resp.reset();\n+        String pathInfo = req.getPathInfo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQ5OTUxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyNzo0MlrOG9lbAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyNzo0MlrOG9lbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQ0MQ==", "bodyText": "Can't you do this in the html or css?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r467229441", "createdAt": "2020-08-07T19:27:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditorView.java", "diffHunk": "@@ -147,6 +161,20 @@ public void gotoDisplaySettings(DisplayerSettingsEditor settingsEditor) {\n         optionType.setActive(false);\n         optionData.setActive(false);\n         optionSettings.setActive(true);\n+        optionComponentSettings.setActive(false);\n+    }\n+    \n+    @Override\n+    public void gotoExternalComponentSettings(ExternalComponentPropertiesEditor externalComponentPropertiesEditor) {\n+        leftColumn.clear();\n+        leftColumn.getElement().getStyle().setOverflowY(Style.Overflow.AUTO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413262188cbd2191c22848db779648faa3f57923"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzUxOTk5OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/src/main/java/org/dashbuilder/external/ExternalComponentServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozNTo1MlrOG-1xHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozNTo1MlrOG-1xHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0NTgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        resp.setHeader(\"Cache-Control\", cacheControlHeaderValue);\n          \n          \n            \n                        resp.setHeader(CACHE_CONTROL_PARAM, cacheControlHeaderValue);\n          \n      \n    \n    \n  \n\nCan we reuse this constant here?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468545820", "createdAt": "2020-08-11T12:35:52Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-external-backend/src/main/java/org/dashbuilder/external/ExternalComponentServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.external;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+\n+import javax.activation.MimetypesFileTypeMap;\n+import javax.inject.Inject;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.dashbuilder.external.service.ExternalComponentAssetProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+public class ExternalComponentServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String CACHE_CONTROL_PARAM = \"cache-control\";\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ExternalComponentServlet.class);\n+\n+    @Inject\n+    ExternalComponentAssetProvider assetProvider;\n+\n+    String cacheControlHeaderValue = \"no-cache\";\n+    private MimetypesFileTypeMap mimetypesFileTypeMap;\n+\n+    @Override\n+    public void init(ServletConfig config) throws ServletException {\n+        super.init(config);\n+        mimetypesFileTypeMap = new MimetypesFileTypeMap();\n+        String cacheControl = config.getInitParameter(CACHE_CONTROL_PARAM);\n+        if (cacheControl != null) {\n+            cacheControlHeaderValue = cacheControl;\n+        }\n+    }\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        try {\n+            handle(req, resp);\n+        } catch (IOException e) {\n+            logger.error(\"Error handling request to retrieve asset.\");\n+            logger.debug(\"Error handling request to retrieve asset.\", e);\n+            errorResponse(resp);\n+        }\n+    }\n+\n+    private void handle(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n+        resp.reset();\n+        String pathInfo = req.getPathInfo();\n+        String[] pathParts = pathInfo.split(\"/\");\n+\n+        if (pathParts.length < 3) {\n+            resp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n+            return;\n+        }\n+\n+        String assetPath = Arrays.stream(pathParts).skip(1).collect(joining(File.separator));\n+\n+        logger.debug(\"Retrieving component asset {}\", assetPath);\n+\n+        try (InputStream assetStream = assetProvider.openAsset(assetPath)) {\n+            int size = IOUtils.copy(assetStream, resp.getOutputStream());\n+            String mimeType = mimetypesFileTypeMap.getContentType(pathInfo);\n+            resp.setContentType(mimeType);\n+            resp.setContentLength(size);\n+            resp.setHeader(\"Cache-Control\", cacheControlHeaderValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzUzMTQ2OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjozOTowNFrOG-14Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoxMjoyOVrOHCkccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0NzYzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        zipComponents(Paths.get(\"file:\" + componentsPath),\n          \n          \n            \n                        zipComponents(Paths.get(\"file://\" + componentsPath),\n          \n      \n    \n    \n  \n\nDoes it work without double slashes?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468547635", "createdAt": "2020-08-11T12:39:04Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -146,6 +150,14 @@ public String doExport(DataTransferExportModel exportModel) throws java.io.IOExc\n             zipFileSystem(navigationFS, zos, readmeFilter);\n         }\n \n+        String componentsPath = externalComponentLoader.getExternalComponentsDir();\n+\n+        if (componentsPath != null) {\n+            zipComponents(Paths.get(\"file:\" + componentsPath),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ1NjMwNQ==", "bodyText": "it works but I guess it only works because I am on Linux (???)", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r472456305", "createdAt": "2020-08-18T20:12:29Z", "author": {"login": "jesuino"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/DataTransferServicesImpl.java", "diffHunk": "@@ -146,6 +150,14 @@ public String doExport(DataTransferExportModel exportModel) throws java.io.IOExc\n             zipFileSystem(navigationFS, zos, readmeFilter);\n         }\n \n+        String componentsPath = externalComponentLoader.getExternalComponentsDir();\n+\n+        if (componentsPath != null) {\n+            zipComponents(Paths.get(\"file:\" + componentsPath),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0NzYzNQ=="}, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU2MDg3OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0Njo0OFrOG-2Jug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0Njo0OFrOG-2Jug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MjEyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    void gotoExternalComponentSettings(ExternalComponentPropertiesEditor externalComponentPropertiesEditor);\n          \n          \n            \n                    void goToExternalComponentSettings(ExternalComponentPropertiesEditor externalComponentPropertiesEditor);\n          \n      \n    \n    \n  \n\nJust upper casing the T in goTo....\nSame applies to gotoTypeSelection, gotoDataSetLookupConf and gotoDisplaySettings.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468552122", "createdAt": "2020-08-11T12:46:48Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditor.java", "diffHunk": "@@ -88,6 +91,9 @@\n         void error(String error);\n \n         void error(ClientRuntimeError error);\n+\n+        void gotoExternalComponentSettings(ExternalComponentPropertiesEditor externalComponentPropertiesEditor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU3MTgyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0OTo1M1rOG-2Qkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0OTo1M1rOG-2Qkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Mzg3NQ==", "bodyText": "Consider creating a constant or even an enum representing the active section to replace the value 3 (and others).\nIt will improve the readability of the switch-case above.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468553875", "createdAt": "2020-08-11T12:49:53Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerEditor.java", "diffHunk": "@@ -347,6 +376,13 @@ public void gotoDisplaySettings() {\n         view.gotoDisplaySettings(settingsEditor);\n     }\n \n+    public void gotoExternalComponentSettings() {\n+        activeSection = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU5NjYyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1NjoyM1rOG-2gIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1NjoyM1rOG-2gIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Nzg1OQ==", "bodyText": "Keep in mind that this method can return null.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468557859", "createdAt": "2020-08-11T12:56:23Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditor.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.uberfire.client.mvp.UberView;\n+\n+@Dependent\n+public class ExternalComponentEditor implements IsWidget {\n+\n+    public interface View extends UberView<ExternalComponentEditor> {\n+\n+    }\n+\n+    @Inject\n+    View view;\n+\n+    @Inject\n+    ExternalComponentPropertiesEditor propertiesEditor;\n+\n+    @Inject\n+    ExternalComponentPresenter externalComponentPresenter;\n+\n+    private Map<String, String> newProperties;\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void withComponent(String componentId, Map<String, String> properties) {\n+        propertiesEditor.init(componentId, properties, this::propertiesChange);\n+        externalComponentPresenter.withComponent(componentId);\n+        propertiesChange(properties);\n+    }\n+\n+    public void propertiesChange(Map<String, String> propertiesChange) {\n+        this.newProperties = propertiesChange;\n+        ExternalComponentMessage message = ExternalComponentMessage.create(propertiesChange);\n+        externalComponentPresenter.sendMessage(message);\n+    }\n+\n+    public Map<String, String> getNewProperties() {\n+        return newProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzYzNDgxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPresenter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNjowMlrOG-23ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNjowMlrOG-23ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzgxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return String.join(\"/\",\n          \n          \n            \n                                       GWT.getHostPageBaseURL(),\n          \n          \n            \n                                       COMPONENT_SERVER_PATH,\n          \n          \n            \n                                       componentId,\n          \n          \n            \n                                       \"index.html\");\n          \n          \n            \n                    return buildUrl(componentId, \"\");", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468563812", "createdAt": "2020-08-11T13:06:02Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPresenter.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.user.client.DOM;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.uberfire.client.mvp.UberView;\n+\n+@Dependent\n+public class ExternalComponentPresenter {\n+\n+    /**\n+     * The base URL for components server. It should match the \n+     */\n+    private static final String COMPONENT_SERVER_PATH = \"dashbuilder/component\";\n+    /**\n+     * The property that should be used by components to find its unique ID during Runtime.\n+     */\n+    private static final String COMPONENT_RUNTIME_ID_PROP = \"component_id\";\n+    /**\n+     * Unique Runtime ID for the component. It is used to identify messages coming from the component.\n+     */\n+    final String componentRuntimeId = DOM.createUniqueId();\n+\n+    private Consumer<ExternalComponentMessage> messageConsumer;\n+\n+    public interface View extends UberView<ExternalComponentPresenter> {\n+\n+        void setComponentURL(String url);\n+\n+        void postMessage(ExternalComponentMessage message);\n+    }\n+\n+    @Inject\n+    View view;\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void withComponent(String componentId) {\n+        String url = buildUrl(componentId);\n+        view.setComponentURL(url);\n+    }\n+\n+    public void withComponent(String componentId, String partition) {\n+        String url = buildUrl(componentId, partition);\n+        view.setComponentURL(url);\n+    }\n+\n+    public void sendMessage(ExternalComponentMessage message) {\n+        message.setProperty(COMPONENT_RUNTIME_ID_PROP, componentRuntimeId);\n+        view.postMessage(message);\n+    }\n+\n+    public void receiveMessage(ExternalComponentMessage message) {\n+        Object destinationId = message.getProperty(COMPONENT_RUNTIME_ID_PROP);\n+        if (!componentRuntimeId.equals(destinationId)) {\n+            return;\n+        }\n+        if (messageConsumer != null) {\n+            messageConsumer.accept(message);\n+        }\n+    }\n+\n+    public View getView() {\n+        return view;\n+    }\n+\n+    public void setMessageConsumer(Consumer<ExternalComponentMessage> messageConsumer) {\n+        this.messageConsumer = messageConsumer;\n+    }\n+\n+    public String getComponentId() {\n+        return componentRuntimeId;\n+    }\n+\n+    private String buildUrl(String componentId, String partition) {\n+        return String.join(\"/\",\n+                           GWT.getHostPageBaseURL(),\n+                           COMPONENT_SERVER_PATH,\n+                           partition, \n+                           componentId, \n+                           \"index.html\");\n+    }\n+\n+    private String buildUrl(String componentId) {\n+        return String.join(\"/\",\n+                           GWT.getHostPageBaseURL(),\n+                           COMPONENT_SERVER_PATH,\n+                           componentId,\n+                           \"index.html\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY3MjMxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxNTowN1rOG-3OCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxNTowN1rOG-3OCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2OTYwOA==", "bodyText": "Can we create a constuctor for ComponentParameter?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468569608", "createdAt": "2020-08-11T13:15:07Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.dashbuilder.external.model.ComponentParameter;\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ExternalComponentService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorCategory;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.mocks.CallerMock;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.matches;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class ExternalComponentPropertiesEditorTest {\n+\n+    @Mock\n+    ExternalComponentService externalComponentServiceMock;\n+\n+    @Mock\n+    ExternalComponentPropertiesEditor.View view;\n+\n+    @Mock\n+    BusyIndicatorView loading;\n+    \n+    @Captor\n+    ArgumentCaptor<Collection<PropertyEditorCategory>> categoriesCaptor;\n+\n+    CallerMock<ExternalComponentService> externalComponentService;\n+\n+    @InjectMocks\n+    ExternalComponentPropertiesEditor externalComponentPropertiesEditor;\n+\n+    @Before\n+    public void init() {\n+        externalComponentService = new CallerMock<>(externalComponentServiceMock);\n+        externalComponentPropertiesEditor.setExternalComponentService(externalComponentService);\n+    }\n+\n+    @Test\n+    public void testComponentNotFound() {\n+        String c1 = \"c1\";\n+        when(externalComponentServiceMock.byId(matches(c1))).thenReturn(Optional.empty());\n+        externalComponentPropertiesEditor.init(c1, Collections.emptyMap(), props -> {\n+        });\n+        verify(view).componentNotFound();\n+    }\n+\n+    @Test\n+    public void testNoProperties() {\n+        ExternalComponent c1 = new ExternalComponent(\"c1\", \"c1 name\", \"c1 icon\", false, Collections.emptyList());\n+\n+        when(externalComponentServiceMock.byId(matches(c1.getId()))).thenReturn(Optional.of(c1));\n+        externalComponentPropertiesEditor.init(c1.getId(), Collections.emptyMap(), props -> {\n+        });\n+\n+        verify(view).noPropertiesComponent();\n+    }\n+\n+    @Test\n+    public void testLoadProperties() {\n+        ComponentParameter p1 = param(\"P1 CAT\", \"p1val\", \"text\", \"P1 Field\", \"p1\", emptyList());\n+        ComponentParameter p2 = param(\"P2 CAT\", \"p2val\", \"combo\", \"P2 Field\", \"p2\", asList(\"V1\", \"V2\"));\n+        ExternalComponent c1 = new ExternalComponent(\"c1\", \"c1 name\", \"c1 icon\", false, asList(p1, p2));\n+\n+        when(externalComponentServiceMock.byId(matches(c1.getId()))).thenReturn(Optional.of(c1));\n+        externalComponentPropertiesEditor.init(c1.getId(),new HashMap<>(), props -> {\n+        });\n+\n+        verify(view).addCategories(categoriesCaptor.capture());\n+        \n+        Collection<PropertyEditorCategory> categories = categoriesCaptor.getValue();\n+        \n+        assertEquals(3, categories.size());\n+    }\n+\n+    private ComponentParameter param(String category, String defaultValue, String type, String label, String name, List<String> comboValues) {\n+        ComponentParameter param1 = new ComponentParameter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY4MzIyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxNzo0NVrOG-3U2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxNzo0NVrOG-3U2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MTM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.dashbuilder.client.editor.external;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *       http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n             \n          \n          \n            \n            package org.dashbuilder.client.editor.external;", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468571355", "createdAt": "2020-08-11T13:17:45Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.dashbuilder.client.editor.external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY5ODY0OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMToyNlrOG-3eVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMToyNlrOG-3eVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3Mzc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public default String[] getSettingsKeys() {\n          \n          \n            \n                default String[] getSettingsKeys() {\n          \n      \n    \n    \n  \n\nAlso applies to the methods below.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468573783", "createdAt": "2020-08-11T13:21:26Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.uberfire.ext.layout.editor.client.api.HasDragAndDropSettings;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponent;\n+\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+\n+public interface ExternalComponentDragDef extends LayoutDragComponent, HasDragAndDropSettings {\n+\n+    @Override\n+    default String getDragComponentTitle() {\n+        final String componentName = getComponentName();\n+        return componentName == null ? \"Unknow\" : componentName;\n+    }\n+\n+    @Override\n+    default String getDragComponentIconClass() {\n+        final String componentIcon = getComponentIcon();\n+        return componentIcon != null ? componentIcon : LayoutDragComponent.super.getDragComponentIconClass();\n+    }\n+\n+    @Override\n+    public default String[] getSettingsKeys() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcwMTQ3OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMjowN1rOG-3gIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMjowN1rOG-3gIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n      \n    \n    \n  \n\nI think you don't need this annotation for default methods.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468574243", "createdAt": "2020-08-11T13:22:07Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.uberfire.ext.layout.editor.client.api.HasDragAndDropSettings;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponent;\n+\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+\n+public interface ExternalComponentDragDef extends LayoutDragComponent, HasDragAndDropSettings {\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcwNDUyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMjo0NlrOG-3h6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1NDo0MlrOHDN45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return componentName == null ? \"Unknow\" : componentName;\n          \n          \n            \n                    return componentName == null ? \"Unknown\" : componentName;\n          \n      \n    \n    \n  \n\nIf this goes to the UI, we're gonna need i18n for that.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468574697", "createdAt": "2020-08-11T13:22:46Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.uberfire.ext.layout.editor.client.api.HasDragAndDropSettings;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponent;\n+\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+\n+public interface ExternalComponentDragDef extends LayoutDragComponent, HasDragAndDropSettings {\n+\n+    @Override\n+    default String getDragComponentTitle() {\n+        final String componentName = getComponentName();\n+        return componentName == null ? \"Unknow\" : componentName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNTMzMg==", "bodyText": "Can you please fix this typo? Unknow -> Unknown", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r473135332", "createdAt": "2020-08-19T15:54:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentDragDef.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.uberfire.ext.layout.editor.client.api.HasDragAndDropSettings;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponent;\n+\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+\n+public interface ExternalComponentDragDef extends LayoutDragComponent, HasDragAndDropSettings {\n+\n+    @Override\n+    default String getDragComponentTitle() {\n+        final String componentName = getComponentName();\n+        return componentName == null ? \"Unknow\" : componentName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY5Nw=="}, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcxODMxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyNTo1NlrOG-3qXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyNTo1NlrOG-3qXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3Njg2Mg==", "bodyText": "If this string goes to the UI, we're gonna need i18n for that.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468576862", "createdAt": "2020-08-11T13:25:56Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Map;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentEditorPopUp;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentPresenter;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.gwtbootstrap3.client.ui.Label;\n+import org.gwtbootstrap3.client.ui.Modal;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.HasModalConfiguration;\n+import org.uberfire.ext.layout.editor.client.api.ModalConfigurationContext;\n+import org.uberfire.ext.layout.editor.client.api.RenderingContext;\n+import org.uberfire.mvp.Command;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_PARTITION_KEY;\n+\n+@Dependent\n+public class ExternalDragComponent implements ExternalComponentDragDef, HasModalConfiguration {\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+    @Inject\n+    ExternalComponentPresenter externalComponentPresenter;\n+\n+    private String componentId;\n+    private String componentName;\n+    private String componentIcon;\n+\n+    @Override\n+    public IsWidget getPreviewWidget(RenderingContext ctx) {\n+        return getShowWidget(ctx);\n+    }\n+\n+    @Override\n+    public IsWidget getShowWidget(RenderingContext ctx) {\n+        Map<String, String> ltProps = ctx.getComponent().getProperties();\n+        String storedComponentId = ltProps.get(COMPONENT_ID_KEY);\n+        String partition = ltProps.get(COMPONENT_PARTITION_KEY);\n+        if (storedComponentId == null) {\n+            return new Label(\"Component not found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzczNjkxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozMDoxNFrOG-32Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozMDoxNFrOG-32Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTg0Nw==", "bodyText": "I didn't get the reason that you have static methods here (and below).", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468579847", "createdAt": "2020-08-11T13:30:14Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Map;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentEditorPopUp;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentPresenter;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.gwtbootstrap3.client.ui.Label;\n+import org.gwtbootstrap3.client.ui.Modal;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.HasModalConfiguration;\n+import org.uberfire.ext.layout.editor.client.api.ModalConfigurationContext;\n+import org.uberfire.ext.layout.editor.client.api.RenderingContext;\n+import org.uberfire.mvp.Command;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_PARTITION_KEY;\n+\n+@Dependent\n+public class ExternalDragComponent implements ExternalComponentDragDef, HasModalConfiguration {\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+    @Inject\n+    ExternalComponentPresenter externalComponentPresenter;\n+\n+    private String componentId;\n+    private String componentName;\n+    private String componentIcon;\n+\n+    @Override\n+    public IsWidget getPreviewWidget(RenderingContext ctx) {\n+        return getShowWidget(ctx);\n+    }\n+\n+    @Override\n+    public IsWidget getShowWidget(RenderingContext ctx) {\n+        Map<String, String> ltProps = ctx.getComponent().getProperties();\n+        String storedComponentId = ltProps.get(COMPONENT_ID_KEY);\n+        String partition = ltProps.get(COMPONENT_PARTITION_KEY);\n+        if (storedComponentId == null) {\n+            return new Label(\"Component not found.\");\n+        }\n+        \n+        if (partition != null) {\n+            externalComponentPresenter.withComponent(storedComponentId, partition);\n+        } else {\n+            externalComponentPresenter.withComponent(storedComponentId);\n+        }\n+        \n+        Map<String, String> componentProperties = retrieveComponentProperties(storedComponentId, ltProps);\n+        ExternalComponentMessage message = ExternalComponentMessage.create(componentProperties);\n+        externalComponentPresenter.sendMessage(message);\n+        \n+        return externalComponentPresenter.getView();\n+    }\n+\n+    @Override\n+    public String getComponentName() {\n+        return componentName;\n+    }\n+\n+    @Override\n+    public String getComponentIcon() {\n+        return componentIcon;\n+    }\n+\n+    @Override\n+    public String getComponentId() {\n+        return componentId;\n+    }\n+\n+    @Override\n+    public void setComponentId(String componentId) {\n+        this.componentId = componentId;\n+    }\n+\n+    @Override\n+    public void setDragInfo(String componentName, String componentIcon) {\n+        this.componentName = componentName;\n+        this.componentIcon = componentIcon;\n+    }\n+\n+    @Override\n+    public Modal getConfigurationModal(ModalConfigurationContext ctx) {\n+        String storedComponentId = ctx.getComponentProperty(COMPONENT_ID_KEY);\n+        ExternalComponentEditorPopUp editor = beanManager.lookupBean(ExternalComponentEditorPopUp.class).newInstance();\n+        Map<String, String> existingProps = retrieveComponentProperties(storedComponentId, ctx.getComponentProperties());\n+        editor.init(storedComponentId,\n+                    existingProps,\n+                    getCloseCommand(editor, ctx),\n+                    getSaveCommand(storedComponentId, editor, ctx));\n+        return editor;\n+    }\n+\n+    protected Command getSaveCommand(String componentId, final ExternalComponentEditorPopUp editor, final ModalConfigurationContext ctx) {\n+        return () -> {\n+            editor.getProperties().forEach((k, v) -> {\n+                String key = appendComponentPrefix(componentId, k);\n+                ctx.getComponentProperties().put(key, v);\n+            });\n+            ctx.configurationFinished();\n+            beanManager.destroyBean(editor);\n+        };\n+    }\n+\n+    protected Command getCloseCommand(final ExternalComponentEditorPopUp editor, final ModalConfigurationContext ctx) {\n+        return () -> {\n+            ctx.configurationCancelled();\n+            beanManager.destroyBean(editor);\n+        };\n+    }\n+\n+    private static Map<String, String> retrieveComponentProperties(String componentId, Map<String, String> componentProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzc0Njc1OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-c3/src/main/java/org/dashbuilder/renderer/c3/client/C3AbstractDisplayerView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozMjoyNlrOG-38CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozMjoyNlrOG-38CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468581385", "createdAt": "2020-08-11T13:32:26Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-renderers/dashbuilder-renderer-c3/src/main/java/org/dashbuilder/renderer/c3/client/C3AbstractDisplayerView.java", "diffHunk": "@@ -100,5 +100,5 @@ public void setTableData(String[][] data) {\n             }\n         }\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzgwNDk1OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorPopUp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0NTo0NlrOG-4g2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0NTo0NlrOG-4g2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MDgxMQ==", "bodyText": "Consider using i18n instead of hardcoding the string Component Editor.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468590811", "createdAt": "2020-08-11T13:45:46Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorPopUp.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import org.uberfire.ext.widgets.common.client.common.popups.BaseModal;\n+import org.uberfire.ext.widgets.common.client.common.popups.footers.ModalFooterOKCancelButtons;\n+import org.uberfire.mvp.Command;\n+\n+@Dependent\n+public class ExternalComponentEditorPopUp extends BaseModal {\n+\n+    @Inject\n+    ExternalComponentEditor externalComponentEditor;\n+    private Command closeCommand;\n+    private Command saveCommand;\n+\n+    @PostConstruct\n+    public void setup() {\n+        ModalFooterOKCancelButtons footer = createModalFooterOKCancelButtons();\n+        footer.enableCancelButton(true);\n+        footer.enableOkButton(true);\n+        setBody(externalComponentEditor.asWidget());\n+        add(footer);\n+        setTitle(\"Component Editor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzgzMzMyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1MTo0OFrOG-4ylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozMzoxNFrOHClnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NTM1MA==", "bodyText": "I think these lines are unnecessary since these elements are always empty on initialization.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468595350", "createdAt": "2020-08-11T13:51:48Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentEditorView extends Composite implements ExternalComponentEditor.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorRootContainer;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPropertiesColumn;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPreviewColumn;\n+\n+    @Inject\n+    Elemental2DomUtil domUtil;\n+\n+    @Override\n+    public void init(ExternalComponentEditor presenter) {\n+        componentEditorPropertiesColumn.innerHTML = \"\";\n+        componentEditorPreviewColumn.innerHTML = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MTYzNw==", "bodyText": "in this specific case I may externally call init again and it requires a cleanup", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r472471637", "createdAt": "2020-08-18T20:29:08Z", "author": {"login": "jesuino"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentEditorView extends Composite implements ExternalComponentEditor.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorRootContainer;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPropertiesColumn;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPreviewColumn;\n+\n+    @Inject\n+    Elemental2DomUtil domUtil;\n+\n+    @Override\n+    public void init(ExternalComponentEditor presenter) {\n+        componentEditorPropertiesColumn.innerHTML = \"\";\n+        componentEditorPreviewColumn.innerHTML = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NTM1MA=="}, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTU1NQ==", "bodyText": "I see now, I made confusion with other init :-D", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r472475555", "createdAt": "2020-08-18T20:33:14Z", "author": {"login": "jesuino"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentEditorView extends Composite implements ExternalComponentEditor.View {\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorRootContainer;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPropertiesColumn;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement componentEditorPreviewColumn;\n+\n+    @Inject\n+    Elemental2DomUtil domUtil;\n+\n+    @Override\n+    public void init(ExternalComponentEditor presenter) {\n+        componentEditorPropertiesColumn.innerHTML = \"\";\n+        componentEditorPreviewColumn.innerHTML = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NTM1MA=="}, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzgzOTM0OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1MzowM1rOG-42Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1MzowM1rOG-42Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NjMxNQ==", "bodyText": "Consider using i18n instead of hardcoding the string This component has no properties..", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468596315", "createdAt": "2020-08-11T13:53:03Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.dom.client.Document;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.ext.properties.editor.client.PropertyEditorWidget;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorCategory;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorChangeEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorFieldInfo;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentPropertiesEditorView extends Composite\n+                                                   implements ExternalComponentPropertiesEditor.View {\n+\n+    private final String externalComponentEditorId = Document.get().createUniqueId();\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement externalComponentPropertiesRoot;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement messageContainer;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"strong\")\n+    HTMLElement messageTextContainer;\n+\n+    @Inject\n+    Elemental2DomUtil elementalUtil;\n+\n+    private PropertyEditorWidget propertyEditorWidget;\n+\n+    private ExternalComponentPropertiesEditor presenter;\n+\n+    @Override\n+    public void init(ExternalComponentPropertiesEditor presenter) {\n+        this.presenter = presenter;\n+        messageContainer.hidden = true;\n+        propertyEditorWidget = new PropertyEditorWidget();\n+        elementalUtil.appendWidgetToElement(externalComponentPropertiesRoot, propertyEditorWidget);\n+    }\n+\n+    @Override\n+    public void componentNotFound() {\n+        showMessage(\"Component was not found.\");\n+    }\n+\n+    @Override\n+    public void addCategories(Collection<PropertyEditorCategory> categories) {\n+        messageContainer.hidden = true;\n+        externalComponentPropertiesRoot.hidden = false;\n+        List<PropertyEditorCategory> catList = new ArrayList<>(categories);\n+        propertyEditorWidget.handle(new PropertyEditorEvent(externalComponentEditorId, catList));\n+    }\n+\n+    protected void onPropertyEditorChange(@Observes PropertyEditorChangeEvent event) {\n+        PropertyEditorFieldInfo property = event.getProperty();\n+        if (property.getEventId().equalsIgnoreCase(externalComponentEditorId)) {\n+            presenter.onPropertyChange(property.getKey(), property.getCurrentStringValue());\n+        }\n+    }\n+\n+    @Override\n+    public void noPropertiesComponent() {\n+        showMessage(\"This component has no properties.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg0MjQzOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1Mzo0NlrOG-44Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1Mzo0NlrOG-44Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NjgwMw==", "bodyText": "Consider using i18n instead of hardcoding the string Component was not found..", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468596803", "createdAt": "2020-08-11T13:53:46Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.dom.client.Document;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.ext.properties.editor.client.PropertyEditorWidget;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorCategory;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorChangeEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorFieldInfo;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentPropertiesEditorView extends Composite\n+                                                   implements ExternalComponentPropertiesEditor.View {\n+\n+    private final String externalComponentEditorId = Document.get().createUniqueId();\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement externalComponentPropertiesRoot;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement messageContainer;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"strong\")\n+    HTMLElement messageTextContainer;\n+\n+    @Inject\n+    Elemental2DomUtil elementalUtil;\n+\n+    private PropertyEditorWidget propertyEditorWidget;\n+\n+    private ExternalComponentPropertiesEditor presenter;\n+\n+    @Override\n+    public void init(ExternalComponentPropertiesEditor presenter) {\n+        this.presenter = presenter;\n+        messageContainer.hidden = true;\n+        propertyEditorWidget = new PropertyEditorWidget();\n+        elementalUtil.appendWidgetToElement(externalComponentPropertiesRoot, propertyEditorWidget);\n+    }\n+\n+    @Override\n+    public void componentNotFound() {\n+        showMessage(\"Component was not found.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg0NTI4OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NDoxOVrOG-45-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NDoxOVrOG-45-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NzI0MQ==", "bodyText": "I'd move this event handler to the presenter.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468597241", "createdAt": "2020-08-11T13:54:19Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.dom.client.Document;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.ext.properties.editor.client.PropertyEditorWidget;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorCategory;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorChangeEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorFieldInfo;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentPropertiesEditorView extends Composite\n+                                                   implements ExternalComponentPropertiesEditor.View {\n+\n+    private final String externalComponentEditorId = Document.get().createUniqueId();\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement externalComponentPropertiesRoot;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement messageContainer;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"strong\")\n+    HTMLElement messageTextContainer;\n+\n+    @Inject\n+    Elemental2DomUtil elementalUtil;\n+\n+    private PropertyEditorWidget propertyEditorWidget;\n+\n+    private ExternalComponentPropertiesEditor presenter;\n+\n+    @Override\n+    public void init(ExternalComponentPropertiesEditor presenter) {\n+        this.presenter = presenter;\n+        messageContainer.hidden = true;\n+        propertyEditorWidget = new PropertyEditorWidget();\n+        elementalUtil.appendWidgetToElement(externalComponentPropertiesRoot, propertyEditorWidget);\n+    }\n+\n+    @Override\n+    public void componentNotFound() {\n+        showMessage(\"Component was not found.\");\n+    }\n+\n+    @Override\n+    public void addCategories(Collection<PropertyEditorCategory> categories) {\n+        messageContainer.hidden = true;\n+        externalComponentPropertiesRoot.hidden = false;\n+        List<PropertyEditorCategory> catList = new ArrayList<>(categories);\n+        propertyEditorWidget.handle(new PropertyEditorEvent(externalComponentEditorId, catList));\n+    }\n+\n+    protected void onPropertyEditorChange(@Observes PropertyEditorChangeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg1MTA1OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NToyOVrOG-49eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1NToyOVrOG-49eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODEzOA==", "bodyText": "This could be set on the html as an initial state.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468598138", "createdAt": "2020-08-11T13:55:29Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPropertiesEditorView.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.dashbuilder.displayer.client.widgets;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.google.gwt.dom.client.Document;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.ext.properties.editor.client.PropertyEditorWidget;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorCategory;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorChangeEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorEvent;\n+import org.uberfire.ext.properties.editor.model.PropertyEditorFieldInfo;\n+\n+@Dependent\n+@Templated\n+public class ExternalComponentPropertiesEditorView extends Composite\n+                                                   implements ExternalComponentPropertiesEditor.View {\n+\n+    private final String externalComponentEditorId = Document.get().createUniqueId();\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement externalComponentPropertiesRoot;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement messageContainer;\n+\n+    @Inject\n+    @DataField\n+    @Named(\"strong\")\n+    HTMLElement messageTextContainer;\n+\n+    @Inject\n+    Elemental2DomUtil elementalUtil;\n+\n+    private PropertyEditorWidget propertyEditorWidget;\n+\n+    private ExternalComponentPropertiesEditor presenter;\n+\n+    @Override\n+    public void init(ExternalComponentPropertiesEditor presenter) {\n+        this.presenter = presenter;\n+        messageContainer.hidden = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg3NzkxOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentGroupProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMTowMFrOG-5N4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMTowMFrOG-5N4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMjMzNg==", "bodyText": "Consider using i18n instead of hardcoding the string External Components.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468602336", "createdAt": "2020-08-11T14:01:00Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentGroupProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ExternalComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.api.AfterInitialization;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.plugin.client.perspective.editor.api.PerspectiveEditorComponentGroupProvider;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class ExternalComponentGroupProvider implements PerspectiveEditorComponentGroupProvider {\n+\n+    @Inject\n+    Caller<ExternalComponentService> externalComponentService;\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+\n+    List<ExternalComponent> loadedComponents = Collections.emptyList();\n+\n+    @AfterInitialization\n+    public void loadComponents() {\n+        externalComponentService.call((List<ExternalComponent> components) -> loadedComponents = components)\n+                                .listComponents();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"External Components\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg3ODczOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentGroupProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMTowOVrOG-5OXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozODo1NFrOHCl1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMjQ2Mg==", "bodyText": "Do we need a loading spinner here?", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468602462", "createdAt": "2020-08-11T14:01:09Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentGroupProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ExternalComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.api.AfterInitialization;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.plugin.client.perspective.editor.api.PerspectiveEditorComponentGroupProvider;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class ExternalComponentGroupProvider implements PerspectiveEditorComponentGroupProvider {\n+\n+    @Inject\n+    Caller<ExternalComponentService> externalComponentService;\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+\n+    List<ExternalComponent> loadedComponents = Collections.emptyList();\n+\n+    @AfterInitialization\n+    public void loadComponents() {\n+        externalComponentService.call((List<ExternalComponent> components) -> loadedComponents = components)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3OTAwNQ==", "bodyText": "this should be loaded in background before user open layout editor itself hence why I didn't add it", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r472479005", "createdAt": "2020-08-18T20:38:54Z", "author": {"login": "jesuino"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalComponentGroupProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ExternalComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.api.AfterInitialization;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.plugin.client.perspective.editor.api.PerspectiveEditorComponentGroupProvider;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class ExternalComponentGroupProvider implements PerspectiveEditorComponentGroupProvider {\n+\n+    @Inject\n+    Caller<ExternalComponentService> externalComponentService;\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+\n+    List<ExternalComponent> loadedComponents = Collections.emptyList();\n+\n+    @AfterInitialization\n+    public void loadComponents() {\n+        externalComponentService.call((List<ExternalComponent> components) -> loadedComponents = components)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMjQ2Mg=="}, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg4ODg2OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMzoyM1rOG-5U1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMzoyM1rOG-5U1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNDExOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <div class=\"col-md-3 componentEditorPropertiesColumn\"></div>\n          \n          \n            \n                        <div class=\"col-md-9 componentEditorPreviewColumn\"></div>\n          \n          \n            \n                        <div class=\"col-md-3\" data-field=\"componentEditorPropertiesColumn\"></div>\n          \n          \n            \n                        <div class=\"col-md-9\" data-field=\"componentEditorPreviewColumn\"></div>", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r468604119", "createdAt": "2020-08-11T14:03:23Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentEditorView.html", "diffHunk": "@@ -0,0 +1,23 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.componentEditorRoot\n+-->\n+<div class=\"componentEditorRootContainer\">\n+    <div class=\"container\">\n+        <div class=\"row\">\n+            <div class=\"col-md-3 componentEditorPropertiesColumn\"></div>\n+            <div class=\"col-md-9 componentEditorPreviewColumn\"></div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e753d66b537a9d9ad64a916110fde57ea905bf8a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM5Nzk2OnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/DisplayerConstraints.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0OToyN1rOHDNrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0OToyN1rOHDNrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMTgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!supportedEditorAttrStrings.contains(setting) && componentId != null && !setting.startsWith(componentId)) {\n          \n          \n            \n                            if (!supportedEditorAttrStrings.contains(setting) && !setting.startsWith(componentId)) {\n          \n      \n    \n    \n  \n\nYou don't need this condition anymore.", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r473131828", "createdAt": "2020-08-19T15:49:27Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/DisplayerConstraints.java", "diffHunk": "@@ -83,10 +89,13 @@ public DisplayerConstraints setDataSetLookupConstraints(DataSetLookupConstraints\n     }\n \n     public void removeUnsupportedAttributes(DisplayerSettings displayerSettings) {\n-        Map<String,String> settingsMap = displayerSettings.getSettingsFlatMap();\n-        for (String setting : new HashSet<>(settingsMap.keySet())) {\n-            if (!supportedEditorAttrStrings.contains(setting)) {\n-                displayerSettings.removeDisplayerSetting(setting);\n+        String componentId = displayerSettings.getComponentId();\n+        if (componentId != null) {\n+            Map<String, String> settingsMap = displayerSettings.getSettingsFlatMap();\n+            for (String setting : new HashSet<>(settingsMap.keySet())) {\n+                if (!supportedEditorAttrStrings.contains(setting) && componentId != null && !setting.startsWith(componentId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431373281ef79fba1b119e415f65ee83d230bba3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzQyOTAyOnYy", "diffSide": "RIGHT", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1Njo1NFrOHDN-5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1Njo1NFrOHDN-5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNjg2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static String appendComponentPrefix(String componentId, String key) {\n          \n          \n            \n                    return componentId + \".\" + key;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static String removeComponentPrefix(String componentId, String key) {\n          \n          \n            \n                    return key.replaceFirst(componentId + \".\", \"\");\n          \n          \n            \n                }\n          \n          \n            \n                private String appendComponentPrefix(String componentId, String key) {\n          \n          \n            \n                    return componentId + \".\" + key;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private String removeComponentPrefix(String componentId, String key) {\n          \n          \n            \n                    return key.replaceFirst(componentId + \".\", \"\");\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/appformer/pull/1016#discussion_r473136868", "createdAt": "2020-08-19T15:56:54Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ExternalDragComponent.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.Map;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentEditorPopUp;\n+import org.dashbuilder.displayer.client.widgets.ExternalComponentPresenter;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.gwtbootstrap3.client.ui.Label;\n+import org.gwtbootstrap3.client.ui.Modal;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.HasModalConfiguration;\n+import org.uberfire.ext.layout.editor.client.api.ModalConfigurationContext;\n+import org.uberfire.ext.layout.editor.client.api.RenderingContext;\n+import org.uberfire.mvp.Command;\n+\n+import static java.util.stream.Collectors.toMap;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_ID_KEY;\n+import static org.dashbuilder.external.model.ExternalComponent.COMPONENT_PARTITION_KEY;\n+\n+@Dependent\n+public class ExternalDragComponent implements ExternalComponentDragDef, HasModalConfiguration {\n+\n+    @Inject\n+    SyncBeanManager beanManager;\n+    @Inject\n+    ExternalComponentPresenter externalComponentPresenter;\n+\n+    private String componentId;\n+    private String componentName;\n+    private String componentIcon;\n+\n+    @Override\n+    public IsWidget getPreviewWidget(RenderingContext ctx) {\n+        return getShowWidget(ctx);\n+    }\n+\n+    @Override\n+    public IsWidget getShowWidget(RenderingContext ctx) {\n+        Map<String, String> ltProps = ctx.getComponent().getProperties();\n+        String storedComponentId = ltProps.get(COMPONENT_ID_KEY);\n+        String partition = ltProps.get(COMPONENT_PARTITION_KEY);\n+        if (storedComponentId == null) {\n+            return new Label(\"Component not found.\");\n+        }\n+        \n+        if (partition != null) {\n+            externalComponentPresenter.withComponent(storedComponentId, partition);\n+        } else {\n+            externalComponentPresenter.withComponent(storedComponentId);\n+        }\n+        \n+        Map<String, String> componentProperties = retrieveComponentProperties(storedComponentId, ltProps);\n+        ExternalComponentMessage message = ExternalComponentMessage.create(componentProperties);\n+        externalComponentPresenter.sendMessage(message);\n+        \n+        return externalComponentPresenter.getView();\n+    }\n+\n+    @Override\n+    public String getComponentName() {\n+        return componentName;\n+    }\n+\n+    @Override\n+    public String getComponentIcon() {\n+        return componentIcon;\n+    }\n+\n+    @Override\n+    public String getComponentId() {\n+        return componentId;\n+    }\n+\n+    @Override\n+    public void setComponentId(String componentId) {\n+        this.componentId = componentId;\n+    }\n+\n+    @Override\n+    public void setDragInfo(String componentName, String componentIcon) {\n+        this.componentName = componentName;\n+        this.componentIcon = componentIcon;\n+    }\n+\n+    @Override\n+    public Modal getConfigurationModal(ModalConfigurationContext ctx) {\n+        String storedComponentId = ctx.getComponentProperty(COMPONENT_ID_KEY);\n+        ExternalComponentEditorPopUp editor = beanManager.lookupBean(ExternalComponentEditorPopUp.class).newInstance();\n+        Map<String, String> existingProps = retrieveComponentProperties(storedComponentId, ctx.getComponentProperties());\n+        editor.init(storedComponentId,\n+                    existingProps,\n+                    getCloseCommand(editor, ctx),\n+                    getSaveCommand(storedComponentId, editor, ctx));\n+        return editor;\n+    }\n+\n+    protected Command getSaveCommand(String componentId, final ExternalComponentEditorPopUp editor, final ModalConfigurationContext ctx) {\n+        return () -> {\n+            editor.getProperties().forEach((k, v) -> {\n+                String key = appendComponentPrefix(componentId, k);\n+                ctx.getComponentProperties().put(key, v);\n+            });\n+            ctx.configurationFinished();\n+            beanManager.destroyBean(editor);\n+        };\n+    }\n+\n+    protected Command getCloseCommand(final ExternalComponentEditorPopUp editor, final ModalConfigurationContext ctx) {\n+        return () -> {\n+            ctx.configurationCancelled();\n+            beanManager.destroyBean(editor);\n+        };\n+    }\n+\n+    private Map<String, String> retrieveComponentProperties(String componentId, Map<String, String> componentProperties) {\n+        String prefix = getComponentPrefix(componentId);\n+        return componentProperties.entrySet()\n+                                  .stream().filter(e -> e.getKey().startsWith(prefix))\n+                                  .collect(toMap(e -> removeComponentPrefix(componentId, e.getKey()),\n+                                                 Map.Entry::getValue));\n+    }\n+\n+    private String getComponentPrefix(String componentId) {\n+        return componentId + \".\";\n+    }\n+\n+    private static String appendComponentPrefix(String componentId, String key) {\n+        return componentId + \".\" + key;\n+    }\n+\n+    private static String removeComponentPrefix(String componentId, String key) {\n+        return key.replaceFirst(componentId + \".\", \"\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431373281ef79fba1b119e415f65ee83d230bba3"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}