{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDA1MTQ3", "number": 1025, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToxOToxN1rOEXb5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNzowNlrOEX5m6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDA5OTEzOnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToxOToxN1rOG_OgSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNjowM1rOG_i6og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MTExMg==", "bodyText": "We're missing the copyright here :-)", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r468951112", "createdAt": "2020-08-12T01:19:17Z", "author": {"login": "karreiro"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NTUzOA==", "bodyText": "@karreiro Done, thank you.", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469285538", "createdAt": "2020-08-12T14:06:03Z", "author": {"login": "yesamer"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MTExMg=="}, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDA5OTMxOnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToxOToyMlrOG_OgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNTo1N1rOG_i6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MTEzNQ==", "bodyText": "We're missing the copyright here :-)", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r468951135", "createdAt": "2020-08-12T01:19:22Z", "author": {"login": "karreiro"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceProducerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NTQ2Mw==", "bodyText": "@karreiro Done, thank you.", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469285463", "createdAt": "2020-08-12T14:05:57Z", "author": {"login": "yesamer"}, "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/PMMLEditorMarshallerServiceProducerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MTEzNQ=="}, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDEwNjU0OnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToyMzoyMlrOG_OkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNTo1MFrOG_i6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MjIxNg==", "bodyText": "I believe this file is missing our auto-format.", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r468952216", "createdAt": "2020-08-12T01:23:22Z", "author": {"login": "karreiro"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import jsinterop.base.Js;\n+import jsinterop.base.JsArrayLike;\n+\n+public class JSIUtils {\n+\n+    private JSIUtils() {\n+        // Utils class\n+    }\n+\n+    /**\n+     * Helper method to create a new, empty <code>JsArrayLike</code>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getNativeArray() /*-{\n+        return [];\n+    }-*/;\n+\n+    /**\n+     * Returns a <code>JsArrayLike</code> where each element represents the <b>unwrapped</b> object (i.e. object.value) of the original one.\n+     * It the original <code>JsArrayLike</code> is <code>null</code>, returns a new, empty one\n+     * @param original\n+     * @param <D>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getUnwrappedElementsArray(final JsArrayLike<D> original) /*-{\n+        var toReturn = [];\n+        if(original != null) {\n+            toReturn = original.map(function (arrayItem) {\n+                var retrieved = arrayItem.value\n+                var toSet = retrieved == null ? arrayItem : retrieved\n+                return toSet;\n+            });\n+        }\n+        return toReturn;\n+    }-*/;\n+\n+    public static<D> List<D> toList(final JsArrayLike<D> jsArrayLike) {\n+        final List<D> toReturn = new ArrayList<>();\n+        if (Objects.nonNull(jsArrayLike)) {\n+            for (int i = 0; (i<jsArrayLike.getLength()); i ++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NTM5Mw==", "bodyText": "@karreiro Done, thank you.", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469285393", "createdAt": "2020-08-12T14:05:50Z", "author": {"login": "yesamer"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import jsinterop.base.Js;\n+import jsinterop.base.JsArrayLike;\n+\n+public class JSIUtils {\n+\n+    private JSIUtils() {\n+        // Utils class\n+    }\n+\n+    /**\n+     * Helper method to create a new, empty <code>JsArrayLike</code>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getNativeArray() /*-{\n+        return [];\n+    }-*/;\n+\n+    /**\n+     * Returns a <code>JsArrayLike</code> where each element represents the <b>unwrapped</b> object (i.e. object.value) of the original one.\n+     * It the original <code>JsArrayLike</code> is <code>null</code>, returns a new, empty one\n+     * @param original\n+     * @param <D>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getUnwrappedElementsArray(final JsArrayLike<D> original) /*-{\n+        var toReturn = [];\n+        if(original != null) {\n+            toReturn = original.map(function (arrayItem) {\n+                var retrieved = arrayItem.value\n+                var toSet = retrieved == null ? arrayItem : retrieved\n+                return toSet;\n+            });\n+        }\n+        return toReturn;\n+    }-*/;\n+\n+    public static<D> List<D> toList(final JsArrayLike<D> jsArrayLike) {\n+        final List<D> toReturn = new ArrayList<>();\n+        if (Objects.nonNull(jsArrayLike)) {\n+            for (int i = 0; (i<jsArrayLike.getLength()); i ++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk1MjIxNg=="}, "originalCommit": {"oid": "85ca5a61f957b9ff819674314c7668f143dd94d0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk2MTgzOnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNTowOVrOG_8c_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNTowOVrOG_8c_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMzkzNQ==", "bodyText": "This is already in org.kie.workbench.common.dmn.webapp.kogito.marshaller.mapper.JsUtils", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469703935", "createdAt": "2020-08-13T05:25:09Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import jsinterop.base.Js;\n+import jsinterop.base.JsArrayLike;\n+\n+public class JSIUtils {\n+\n+    private JSIUtils() {\n+        // Utils class\n+    }\n+\n+    /**\n+     * Helper method to create a new, empty <code>JsArrayLike</code>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getNativeArray() /*-{\n+        return [];\n+    }-*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff41df4c6940e15205630de19758c2d59206033f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk2MzY1OnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNjowMlrOG_8eFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNjowMlrOG_8eFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwNDIxNA==", "bodyText": "This is already in org.kie.workbench.common.dmn.webapp.kogito.marshaller.mapper.JsUtils", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469704214", "createdAt": "2020-08-13T05:26:02Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import jsinterop.base.Js;\n+import jsinterop.base.JsArrayLike;\n+\n+public class JSIUtils {\n+\n+    private JSIUtils() {\n+        // Utils class\n+    }\n+\n+    /**\n+     * Helper method to create a new, empty <code>JsArrayLike</code>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getNativeArray() /*-{\n+        return [];\n+    }-*/;\n+\n+    /**\n+     * Returns a <code>JsArrayLike</code> where each element represents the <b>unwrapped</b> object (i.e. object.value) of the original one.\n+     * It the original <code>JsArrayLike</code> is <code>null</code>, returns a new, empty one\n+     * @param original\n+     * @param <D>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getUnwrappedElementsArray(final JsArrayLike<D> original) /*-{\n+        var toReturn = [];\n+        if (original != null) {\n+            toReturn = original.map(function (arrayItem) {\n+                var retrieved = arrayItem.value\n+                var toSet = retrieved == null ? arrayItem : retrieved\n+                return toSet;\n+            });\n+        }\n+        return toReturn;\n+    }-*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff41df4c6940e15205630de19758c2d59206033f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk2NTUyOnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNzowNlrOG_8fMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNToyNzowNlrOG_8fMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwNDQ5Nw==", "bodyText": "This is already in org.kie.workbench.common.dmn.webapp.kogito.marshaller.mapper.JsUtils", "url": "https://github.com/kiegroup/appformer/pull/1025#discussion_r469704497", "createdAt": "2020-08-13T05:27:06Z", "author": {"login": "jomarko"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/pmmleditor/marshaller/model/JSIUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.appformer.kogito.bridge.client.pmmleditor.marshaller.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import jsinterop.base.Js;\n+import jsinterop.base.JsArrayLike;\n+\n+public class JSIUtils {\n+\n+    private JSIUtils() {\n+        // Utils class\n+    }\n+\n+    /**\n+     * Helper method to create a new, empty <code>JsArrayLike</code>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getNativeArray() /*-{\n+        return [];\n+    }-*/;\n+\n+    /**\n+     * Returns a <code>JsArrayLike</code> where each element represents the <b>unwrapped</b> object (i.e. object.value) of the original one.\n+     * It the original <code>JsArrayLike</code> is <code>null</code>, returns a new, empty one\n+     * @param original\n+     * @param <D>\n+     * @return\n+     */\n+    public static native <D> JsArrayLike<D> getUnwrappedElementsArray(final JsArrayLike<D> original) /*-{\n+        var toReturn = [];\n+        if (original != null) {\n+            toReturn = original.map(function (arrayItem) {\n+                var retrieved = arrayItem.value\n+                var toSet = retrieved == null ? arrayItem : retrieved\n+                return toSet;\n+            });\n+        }\n+        return toReturn;\n+    }-*/;\n+\n+    public static<D> List<D> toList(final JsArrayLike<D> jsArrayLike) {\n+        final List<D> toReturn = new ArrayList<>();\n+        if (Objects.nonNull(jsArrayLike)) {\n+            for (int i = 0; (i < jsArrayLike.getLength()); i++) {\n+                final D toAdd = Js.uncheckedCast(jsArrayLike.getAt(i));\n+                toReturn.add(toAdd);\n+            }\n+        }\n+        return toReturn;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff41df4c6940e15205630de19758c2d59206033f"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2673, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}