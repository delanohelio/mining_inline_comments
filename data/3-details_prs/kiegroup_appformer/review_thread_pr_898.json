{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzMyNjM1", "number": 898, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxMDo0MVrODf2xzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoxMjo0MlrODgsCQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzI5OTMzOnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxMDo0MVrOFpzQSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToyMzoyNlrOFpzj5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NTY5MA==", "bodyText": "I'd be tempted to remove this method all together now.", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379375690", "createdAt": "2020-02-14T11:10:41Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -98,16 +102,14 @@ private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget)\n         return !gridModel.getSelectedHeaderCells().isEmpty();\n     }\n \n-    private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n-        final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n-        final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n+    private boolean isGridWidgetRendered(final BaseGridRendererHelper.RenderingInformation renderingInformation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f59cf498d6d0e6500025b9007b2649e5eecdfc8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4MDcxMQ==", "bodyText": "ok, that is questionable, it is one liner, but the method name gives a little bit more information, what the null check means", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379380711", "createdAt": "2020-02-14T11:23:26Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -98,16 +102,14 @@ private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget)\n         return !gridModel.getSelectedHeaderCells().isEmpty();\n     }\n \n-    private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n-        final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n-        final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n+    private boolean isGridWidgetRendered(final BaseGridRendererHelper.RenderingInformation renderingInformation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NTY5MA=="}, "originalCommit": {"oid": "6f59cf498d6d0e6500025b9007b2649e5eecdfc8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzMwMzcwOnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToxMjoxOVrOFpzS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo0MTozOFrOFpz_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NjM1NQ==", "bodyText": "You could move this line to after the check for renderingInformation == null.\n.. and why are you not using Objects.isNull(..)!!!! (You're the main promoter of it's use!)", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379376355", "createdAt": "2020-02-14T11:12:19Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -98,16 +102,14 @@ private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget)\n         return !gridModel.getSelectedHeaderCells().isEmpty();\n     }\n \n-    private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n-        final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n-        final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n+    private boolean isGridWidgetRendered(final BaseGridRendererHelper.RenderingInformation renderingInformation) {\n         return renderingInformation != null;\n     }\n \n-    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n+    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget,\n+                                                   final BaseGridRendererHelper.RenderingInformation renderingInformation,\n+                                                   final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f59cf498d6d0e6500025b9007b2649e5eecdfc8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4MTA5NA==", "bodyText": "nope, I am promoter of equals, isNull  I asked just in case class mixed isNull and == null", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379381094", "createdAt": "2020-02-14T11:24:22Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -98,16 +102,14 @@ private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget)\n         return !gridModel.getSelectedHeaderCells().isEmpty();\n     }\n \n-    private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n-        final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n-        final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n+    private boolean isGridWidgetRendered(final BaseGridRendererHelper.RenderingInformation renderingInformation) {\n         return renderingInformation != null;\n     }\n \n-    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n+    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget,\n+                                                   final BaseGridRendererHelper.RenderingInformation renderingInformation,\n+                                                   final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NjM1NQ=="}, "originalCommit": {"oid": "6f59cf498d6d0e6500025b9007b2649e5eecdfc8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4NzY3MQ==", "bodyText": "Indeed in if statement  Objects.isNull(..) could be used, however it was made mainly for lambda expressions. Also some people prefer to use ligatures. They work with == sign.", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379387671", "createdAt": "2020-02-14T11:41:38Z", "author": {"login": "dupliaka"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -98,16 +102,14 @@ private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget)\n         return !gridModel.getSelectedHeaderCells().isEmpty();\n     }\n \n-    private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n-        final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n-        final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n+    private boolean isGridWidgetRendered(final BaseGridRendererHelper.RenderingInformation renderingInformation) {\n         return renderingInformation != null;\n     }\n \n-    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n+    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget,\n+                                                   final BaseGridRendererHelper.RenderingInformation renderingInformation,\n+                                                   final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NjM1NQ=="}, "originalCommit": {"oid": "6f59cf498d6d0e6500025b9007b2649e5eecdfc8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzM3ODk3OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo0Mjo0NVrOFp0AsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo0NDo1OFrOFp0EGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODA4MA==", "bodyText": "Why not to use a static import?", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379388080", "createdAt": "2020-02-14T11:42:45Z", "author": {"login": "dupliaka"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -72,7 +72,13 @@ protected boolean scrollSelectedCellIntoView(final GridWidget gridWidget) {\n             isHeaderCellSelected = true;\n         }\n \n-        if (!(isGridWidgetRendered(gridWidget) || isGridColumnCandidateForScroll(gridWidget, isHeaderCellSelected))) {\n+        final BaseGridRendererHelper.RenderingInformation renderingInformation = computeRenderingInformation(gridWidget);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9afa1c851e230120914628787246b4c57c57e97"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODk1NA==", "bodyText": "Will do, thank you", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r379388954", "createdAt": "2020-02-14T11:44:58Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -72,7 +72,13 @@ protected boolean scrollSelectedCellIntoView(final GridWidget gridWidget) {\n             isHeaderCellSelected = true;\n         }\n \n-        if (!(isGridWidgetRendered(gridWidget) || isGridColumnCandidateForScroll(gridWidget, isHeaderCellSelected))) {\n+        final BaseGridRendererHelper.RenderingInformation renderingInformation = computeRenderingInformation(gridWidget);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODA4MA=="}, "originalCommit": {"oid": "b9afa1c851e230120914628787246b4c57c57e97"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjAyNDk2OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoxMjo0MlrOFrBxGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyNTo0OFrOFrCMQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2MjA0Mg==", "bodyText": "Now you obtain RenderingInformation here BUT it is only used in isGridColumnCandidateForScroll(..).\nSo why not simply call computeRenderingInformation(..) in isGridColumnCandidateForScroll(..)?", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r380662042", "createdAt": "2020-02-18T13:12:42Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -72,7 +74,11 @@ protected boolean scrollSelectedCellIntoView(final GridWidget gridWidget) {\n             isHeaderCellSelected = true;\n         }\n \n-        if (!(isGridWidgetRendered(gridWidget) || isGridColumnCandidateForScroll(gridWidget, isHeaderCellSelected))) {\n+        final RenderingInformation renderingInformation = computeRenderingInformation(gridWidget);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "568b965cdfc9c9879c59931d25ab5061ab22e03c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODk5Mw==", "bodyText": "will do, thank you", "url": "https://github.com/kiegroup/appformer/pull/898#discussion_r380668993", "createdAt": "2020-02-18T13:25:48Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -72,7 +74,11 @@ protected boolean scrollSelectedCellIntoView(final GridWidget gridWidget) {\n             isHeaderCellSelected = true;\n         }\n \n-        if (!(isGridWidgetRendered(gridWidget) || isGridColumnCandidateForScroll(gridWidget, isHeaderCellSelected))) {\n+        final RenderingInformation renderingInformation = computeRenderingInformation(gridWidget);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2MjA0Mg=="}, "originalCommit": {"oid": "568b965cdfc9c9879c59931d25ab5061ab22e03c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2876, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}