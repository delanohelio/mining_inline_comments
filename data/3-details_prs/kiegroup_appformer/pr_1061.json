{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODMxODY4", "number": 1061, "title": "AF-2636: Dashbuilder Pluggable Service Interface", "bodyText": "AF-2636\nThis is a major change for components protocol to allow us to plug reusable functions that can be called by components. To achieve this we had first to formalize the messages exchange between custom components and DB, so we introduced Message type and class ExternalComponentDispatcher, that listen for all messages, look for the component and deliver the message.\nThis is a breaking change because now we support messages of type \"INIT\", which are sent without DATASET so users can find its own ID.\nIf a message is a function call then we have a function lookup and its execution. The function is currently made internally, but we could extend it to users so they can register their own function.\nTo a component invoke a function it must:\n\nFirst of all during INIT function retrieve its ID:\n\n  window.addEventListener(\"message\", receiveMessage, false);\n\n  function receiveMessage(event) {\n    const message = event.data;\n    const type = message.type;\n\n    if (type === \"INIT\") {\n      id = message.properties.get(\"component_id\");\n    }\n  }\n\n\nSend a function of type FUNCTION_CALL with a parameter named functionCallRequest and its ID. The parameter functionCallRequest contains all information to invoke a function, including the function name and function parameters:\n\n  function callFunction() {\n    const props = new Map();\n    props.set(\"component_id\", id);\n    props.set(\"functionCallRequest\", {\n      functionName: document.getElementById(\"functionName\").value,\n      parameters: new Map(),\n    });\n    window.parent.postMessage({\n      type: \"FUNCTION_CALL\",\n      properties: props,\n    });\n  }\n\n\nThen the component waits Dashbuilder to respond with a message of type FUNCTION_RESPONSE. The response will bring a FunctionResponse object with the execution result, a message and the result type, which I will talk more later. The function response also includes the function request object, which can help the component to find which function was invoked if multiple invocations are made:\n\n  function receiveMessage(event) {\n    const message = event.data;\n    const type = message.type;\n\n    if (type === \"INIT\") {\n      id = message.properties.get(\"component_id\");\n      console.log(\"INIT Received. Component ID: \" + id);\n    }\n\n    if (type === \"FUNCTION_RESPONSE\") {\n      const response = message.properties.get(\"functionResponse\");\n\n      document.getElementById(\"result\").innerHTML = `\n            <b>Type:</b> ${response.resultType} <br />\n            <b>Message:</b> ${response.message} <br />\n            <b>Result:</b> ${response.result} <br />\n        `;\n    }\n    console.log(message);\n  }\n\nA function call may not be sucessful, in these cases DB will respond either with FUNCTION_ERROR, used when an exception is thrown by the function during execution, or FUNCTION_NOT_FOUND, used when the function name is not found. The message in function response will give more details about what went wrong.\nYou can see this in action in the following GIF:\n\nAnother message added is FILTER. Now components can request filters. To do this it must send a message of type FILTER carrying a property name \"filter\" that contains the FilterRequest object:\nfunction sendMessage(props) {\n    if (!props) {\n        props = new Map();\n    }\n    props.set(\"component_id\", id);\n    window.parent.postMessage({\n        type: \"FILTER\",\n        properties: props\n    });\n}\nfunction filter(reset, col, row) {\n    var props = new Map();\n\n    props.set(\"filter\", {\n        reset: reset,\n        column: col,\n        row: row\n\n    })\n    sendMessage(props);\n}\n\nSee it in action:\n\nImportant to bear in mind:\n\nIf a message does not contain a component_id, then it is ignored.\nThe component is responsible to handle user communication when a function is in execution;\nINIT messages should be responded with a READY, and DB will show a loading state at the component, but ATM we won't be using this or all components would be broken;\nDifferent from FUNCTION_CALL, FILTER does not respond to the component is something is wrong. It just ignore the FILTER if a request\n\nFinally I also added configuration_issue/configuration_ok, but it is not supported at the moment, we will start using it in some experimental components, but it is not part of the supported API. The way it works is that components can tell dashbuilder if dataset columns are not the expected format and dashbuilder will handle the UI, when it is corrected the component can send a message back to dashbuilder saying that the configuration is okay now, see:\n\nThe code for these components can be found in my github:\nCall Function: https://github.com/jesuino/dashbuilder-components/tree/master/call_function\nFilter: https://github.com/jesuino/dashbuilder-components/tree/master/simplest_component\nBad Configuration https://github.com/jesuino/dashbuilder-components/tree/master/configuration_issue", "createdAt": "2020-10-09T21:36:47Z", "url": "https://github.com/kiegroup/appformer/pull/1061", "merged": true, "mergeCommit": {"oid": "24cdba3717f1080e4203294aea02f3d5afe9ca41"}, "closed": true, "closedAt": "2020-10-26T12:38:00Z", "author": {"login": "jesuino"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRU-j9gBqjM4NjMyNDY0MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVPGrfgFqTUxNTMwMTc1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25e06a9a723ef19e3971f9988672a65f4fd14905", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/25e06a9a723ef19e3971f9988672a65f4fd14905", "committedDate": "2020-10-09T21:02:57Z", "message": "AF-2636: Dashbuilder Pluggable Service Interface"}, "afterCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/bd0387eb0f91a28cd6b51de072a49f2952f9e233", "committedDate": "2020-10-11T01:20:14Z", "message": "AF-2636: Dashbuilder Pluggable Service Interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzYwODM4", "url": "https://github.com/kiegroup/appformer/pull/1061#pullrequestreview-507360838", "createdAt": "2020-10-13T12:06:00Z", "commit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjowNjowMFrOHgjWog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NDozOVrOHgngxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5NTcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Defines a contract for classes that wants to listen for components messages.\n          \n          \n            \n             * Defines a contract for classes that want to listen for components messages.", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503895714", "createdAt": "2020-10-13T12:06:00Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n+\n+/**\n+ * Defines a contract for classes that wants to listen for components messages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMTU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void makeReady();\n          \n          \n            \n                void prepare();", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503911597", "createdAt": "2020-10-13T12:32:15Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n+\n+/**\n+ * Defines a contract for classes that wants to listen for components messages.\n+ *\n+ */\n+public interface ExternalComponentListener {\n+\n+    String getId();\n+\n+    void sendMessage(ExternalComponentMessage message);\n+    \n+    void onFilter(ExternalFilterRequest filterRequest);\n+    \n+    void onConfigurationIssue(String message);\n+    \n+    void makeReady();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyMzAxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    void makeReady();\n          \n          \n            \n                    void prepare();", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503923016", "createdAt": "2020-10-13T12:49:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPresenter.java", "diffHunk": "@@ -19,45 +19,91 @@\n import java.util.function.Consumer;\n \n import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.enterprise.context.Dependent;\n import javax.inject.Inject;\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.DOM;\n+import org.dashbuilder.displayer.client.component.ExternalComponentDispatcher;\n+import org.dashbuilder.displayer.client.component.ExternalComponentListener;\n import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n import org.uberfire.client.mvp.UberView;\n \n @Dependent\n-public class ExternalComponentPresenter {\n+public class ExternalComponentPresenter implements ExternalComponentListener {\n \n     /**\n      * The base URL for components server. It should match the \n      */\n     private static final String COMPONENT_SERVER_PATH = \"dashbuilder/component\";\n-    /**\n-     * The property that should be used by components to find its unique ID during Runtime.\n-     */\n-    private static final String COMPONENT_RUNTIME_ID_PROP = \"component_id\";\n     /**\n      * Unique Runtime ID for the component. It is used to identify messages coming from the component.\n      */\n     final String componentRuntimeId = DOM.createUniqueId();\n \n-    private Consumer<ExternalComponentMessage> messageConsumer;\n+    private Consumer<ExternalFilterRequest> filterConsumer;\n \n     public interface View extends UberView<ExternalComponentPresenter> {\n \n         void setComponentURL(String url);\n \n         void postMessage(ExternalComponentMessage message);\n+\n+        void makeReady();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzNDc1NQ==", "bodyText": "Can we use BeforeAll instead?", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503934755", "createdAt": "2020-10-13T13:07:23Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/test/java/org/dashbuilder/displayer/external/ExternalComponentMessageHelperTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.external;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.core.JsMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageHelper.COMPONENT_RUNTIME_ID_PROP;\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageHelper.FILTER_PROP;\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageType.DATASET;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class ExternalComponentMessageHelperTest {\n+\n+    @Mock\n+    JsMap<String, Object> properties;\n+\n+    @InjectMocks\n+    ExternalComponentMessage message;\n+\n+    private ExternalComponentMessageHelper helper;\n+\n+    @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzOTI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final CommonConstants i18n = CommonConstants.INSTANCE;\n          \n          \n            \n                private static final CommonConstants i18n = CommonConstants.INSTANCE;", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503939252", "createdAt": "2020-10-13T13:14:00Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentDispatcher.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.MessageEvent;\n+import jsinterop.base.Js;\n+import org.dashbuilder.displayer.client.component.function.ComponentFunctionLocator;\n+import org.dashbuilder.displayer.client.component.function.ExternalComponentFunction;\n+import org.dashbuilder.displayer.client.resources.i18n.CommonConstants;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageType;\n+import org.dashbuilder.displayer.external.FunctionCallRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen to all component messages and find the destination.\n+ *\n+ */\n+@ApplicationScoped\n+public class ExternalComponentDispatcher {\n+\n+    static final CommonConstants i18n = CommonConstants.INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2Mzg0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check if the given message is a INIT message.\n          \n          \n            \n                 * Check if the given message is an INIT message.", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503963845", "createdAt": "2020-10-13T13:44:39Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/external/ExternalComponentMessageHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import jsinterop.base.Js;\n+\n+/**\n+ * Helper to deal with External Component Messages.\n+ *\n+ */\n+public class ExternalComponentMessageHelper {\n+\n+    /**\n+     * Message when a requested function is not found\n+     */\n+    public static final String FUNCTION_NOT_FOUND = \"Function not found.\";\n+\n+    /**\n+     * Message when a function is executed with success\n+     */\n+    public static final String FUNCTION_CALL_SUCESS = \"Function called with success\";\n+\n+    /**\n+     * Message when a message is of type FUNCTION_CALL, but the request to call the function is not found.\n+     */\n+    public static final String FUNCTION_CALL_REQUEST_NOT_FOUND = \"You must provide a function request to call a function.\";\n+\n+    /**\n+     * Default message when there was an error executing the function.\n+     */\n+    public static final String FUNCTION_EXECUTION_ERROR_FOUND = \"There was an error executing the function\";\n+\n+    /**\n+     * The property that should be used by components to find its unique ID during Runtime.\n+     */\n+    static final String COMPONENT_RUNTIME_ID_PROP = \"component_id\";\n+\n+    /**\n+     * Inbound property to define the dataset to be consumed by components.\n+     */\n+    static final String DATA_SET_PROP = \"dataSet\";\n+\n+    /**\n+     * Outbound property to define the filter request. Should be used with messages of type Filter Request.\n+     */\n+    static final String FILTER_PROP = \"filter\";\n+\n+    /**\n+     * Outbound property to define the name of a function to be invoked.\n+     */\n+    static final String FUNCTION_CALL_PROP = \"functionCallRequest\";\n+\n+    /**\n+     * Inbound property to define the result of a function call.\n+     */\n+    static final String FUNCTION_RESPONSE_PROP = \"functionResponse\";\n+    \n+    /**\n+     * Inbound property to define the result of a function call.\n+     */\n+    static final String CONFIGURATION_ISSUE_PROP = \"configurationIssue\";\n+\n+    /**\n+     * Extract filter request from messages coming from the component.\n+     * \n+     * @param message\n+     * The message sent by the component.\n+     * @return\n+     * An optional containing the filter extracted from the message.\n+     */\n+    public Optional<ExternalFilterRequest> filterRequest(ExternalComponentMessage message) {\n+        Object filterProp = message.getProperty(FILTER_PROP);\n+        if (filterProp != null) {\n+            ExternalFilterRequest filterRequest = Js.cast(filterProp);\n+            return Optional.ofNullable(filterRequest);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * \n+     * Retrieves a function call object from a message.\n+     * \n+     * @param message\n+     */\n+    public Optional<FunctionCallRequest> functionCallRequest(ExternalComponentMessage message) {\n+        Object functionCallObj = message.getProperty(FUNCTION_CALL_PROP);\n+        if (functionCallObj != null) {\n+            FunctionCallRequest functionCallRequest = Js.cast(functionCallObj);\n+            return Optional.ofNullable(functionCallRequest);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Builds a message that contains dataset and component properties.\n+     * @param ds\n+     * The dataset that will be sent to client\n+     * @param componentProperties\n+     * All the component properties\n+     * @return\n+     * The message ready to be sent to the user.\n+     */\n+    public ExternalComponentMessage newDataSetMessage(ExternalDataSet ds, Map<String, Object> componentProperties) {\n+        ExternalComponentMessage message = ExternalComponentMessage.create(ExternalComponentMessageType.DATASET.name(), componentProperties);\n+        message.setProperty(DATA_SET_PROP, ds);\n+        return message;\n+    }\n+\n+    /**\n+     * Creates a message of type INIT, which is the first message sent to the component.\n+     * @param componentProperties\n+     * The initial properties.\n+     * @return\n+     * The message ready to be sent.\n+     */\n+    public ExternalComponentMessage newInitMessage(Map<String, Object> componentProperties) {\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.INIT.name(), componentProperties);\n+    }\n+\n+    public ExternalComponentMessage newFunctionError(FunctionCallRequest functionCallRequest, Exception exception) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.ERROR.name(),\n+                                                                                     FUNCTION_EXECUTION_ERROR_FOUND,\n+                                                                                     exception.getMessage()));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Produces a message to respond function call requests here the function could not be found.\n+     * @param functionCallRequest\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionNotFound(FunctionCallRequest functionCallRequest) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.NOT_FOUND.name(),\n+                                                                                     FUNCTION_NOT_FOUND,\n+                                                                                     null));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * Generate messages for function call message types that does not specify a function call request.\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionRequestNotFound() {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(null,\n+                                                                                     FunctionResultType.ERROR.name(),\n+                                                                                     FUNCTION_CALL_REQUEST_NOT_FOUND,\n+                                                                                     null));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Messages to sent when a function is called with success\n+     * \n+     * @param functionCallRequest\n+     * @param result\n+     * The function execution result.\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionSuccess(FunctionCallRequest functionCallRequest, Object result) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.SUCCESS.name(),\n+                                                                                     FUNCTION_CALL_SUCESS,\n+                                                                                     result));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Add the component runtime ID to a message\n+     * @param message\n+     * The message which the ID should be set\n+     * @param componentId\n+     * The component unique ID. It should be used by components to send messages to DB.\n+     */\n+    public void withId(ExternalComponentMessage message, String componentId) {\n+        message.setProperty(COMPONENT_RUNTIME_ID_PROP, componentId);\n+    }\n+\n+    /**\n+     * Extract the component Id from a message.\n+     * @param message\n+     * The target message to have the component id removed.\n+     * @return\n+     * An optional containing the component id.\n+     */\n+    public Optional<String> getComponentId(ExternalComponentMessage message) {\n+        return getValue(COMPONENT_RUNTIME_ID_PROP, message);\n+    }\n+\n+    public Optional<String> getConfigurationIssue(ExternalComponentMessage message) {\n+        return getValue(CONFIGURATION_ISSUE_PROP, message);\n+    }\n+\n+    /**\n+     * \n+     * Check if the given message is a INIT message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233"}, "originalPosition": 223}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c57c608e88f59afeac14da324d0c20b6d02fbb", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/57c57c608e88f59afeac14da324d0c20b6d02fbb", "committedDate": "2020-10-20T14:08:55Z", "message": "AF-2636: Dashbuilder Pluggable Service Interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e8ff2ce9c37b6f816670be44dc856d20c0344243", "committedDate": "2020-10-20T14:51:21Z", "message": "Improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/bd0387eb0f91a28cd6b51de072a49f2952f9e233", "committedDate": "2020-10-11T01:20:14Z", "message": "AF-2636: Dashbuilder Pluggable Service Interface"}, "afterCommit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e8ff2ce9c37b6f816670be44dc856d20c0344243", "committedDate": "2020-10-20T14:51:21Z", "message": "Improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTIxMTA0", "url": "https://github.com/kiegroup/appformer/pull/1061#pullrequestreview-512921104", "createdAt": "2020-10-20T16:28:39Z", "commit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzM4NjM3", "url": "https://github.com/kiegroup/appformer/pull/1061#pullrequestreview-513738637", "createdAt": "2020-10-21T14:17:28Z", "commit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoxNzoyOFrOHlu13Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyMDoxNFrOHlu_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjgxMw==", "bodyText": "I would prefer to use the capability of optional instead of specific if else statement.\nWe could reduce this in a single line of code:\nmessageHelper.getConfigurationIssue(message)\n.ifPresent(x-> destination.onConfigurationIssue(configurationIssue.get()))\norElse(x-> destination.onConfigurationIssue(i18n.componentConfigDefaultMessage());", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r509326813", "createdAt": "2020-10-21T14:17:28Z", "author": {"login": "sthundat"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentDispatcher.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.MessageEvent;\n+import jsinterop.base.Js;\n+import org.dashbuilder.displayer.client.component.function.ComponentFunctionLocator;\n+import org.dashbuilder.displayer.client.component.function.ExternalComponentFunction;\n+import org.dashbuilder.displayer.client.resources.i18n.CommonConstants;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageType;\n+import org.dashbuilder.displayer.external.FunctionCallRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen to all component messages and find the destination.\n+ *\n+ */\n+@ApplicationScoped\n+public class ExternalComponentDispatcher {\n+\n+    private static final CommonConstants i18n = CommonConstants.INSTANCE;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalComponentDispatcher.class);\n+\n+    @Inject\n+    ExternalComponentMessageHelper messageHelper;\n+\n+    @Inject\n+    ComponentFunctionLocator functionLocator;\n+\n+    Set<ExternalComponentListener> listeners;\n+\n+    @PostConstruct\n+    public void setup() {\n+        listeners = new HashSet<>();\n+        startListening();\n+    }\n+\n+    public void register(ExternalComponentListener listener) {\n+        // make the component listener ready by default\n+        listener.prepare();\n+        listeners.add(listener);\n+    }\n+\n+    public void unregister(ExternalComponentListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    public void onMessage(ExternalComponentMessage message) {\n+\n+        ExternalComponentMessageType type = messageHelper.messageType(message);\n+\n+        switch (type) {\n+            case FILTER:\n+                handleFilter(message);\n+                break;\n+\n+            case FUNCTION_CALL:\n+                handleFunction(message);\n+                break;\n+\n+            case READY:\n+                handleReady(message);\n+                break;\n+\n+            case FIX_CONFIGURATION:\n+                handleConfiguration(message);\n+                break;\n+\n+            case CONFIGURATION_OK:\n+                handleOkConfiguration(message);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+    }\n+\n+    private void handleOkConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, ExternalComponentListener::configurationOk);\n+    }\n+\n+    private void handleConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, destination -> {\n+            Optional<String> configurationIssue = messageHelper.getConfigurationIssue(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyOTIyMQ==", "bodyText": "same implementation could apply in multiple places", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r509329221", "createdAt": "2020-10-21T14:20:14Z", "author": {"login": "sthundat"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentDispatcher.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.MessageEvent;\n+import jsinterop.base.Js;\n+import org.dashbuilder.displayer.client.component.function.ComponentFunctionLocator;\n+import org.dashbuilder.displayer.client.component.function.ExternalComponentFunction;\n+import org.dashbuilder.displayer.client.resources.i18n.CommonConstants;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageType;\n+import org.dashbuilder.displayer.external.FunctionCallRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen to all component messages and find the destination.\n+ *\n+ */\n+@ApplicationScoped\n+public class ExternalComponentDispatcher {\n+\n+    private static final CommonConstants i18n = CommonConstants.INSTANCE;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalComponentDispatcher.class);\n+\n+    @Inject\n+    ExternalComponentMessageHelper messageHelper;\n+\n+    @Inject\n+    ComponentFunctionLocator functionLocator;\n+\n+    Set<ExternalComponentListener> listeners;\n+\n+    @PostConstruct\n+    public void setup() {\n+        listeners = new HashSet<>();\n+        startListening();\n+    }\n+\n+    public void register(ExternalComponentListener listener) {\n+        // make the component listener ready by default\n+        listener.prepare();\n+        listeners.add(listener);\n+    }\n+\n+    public void unregister(ExternalComponentListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    public void onMessage(ExternalComponentMessage message) {\n+\n+        ExternalComponentMessageType type = messageHelper.messageType(message);\n+\n+        switch (type) {\n+            case FILTER:\n+                handleFilter(message);\n+                break;\n+\n+            case FUNCTION_CALL:\n+                handleFunction(message);\n+                break;\n+\n+            case READY:\n+                handleReady(message);\n+                break;\n+\n+            case FIX_CONFIGURATION:\n+                handleConfiguration(message);\n+                break;\n+\n+            case CONFIGURATION_OK:\n+                handleOkConfiguration(message);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+    }\n+\n+    private void handleOkConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, ExternalComponentListener::configurationOk);\n+    }\n+\n+    private void handleConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, destination -> {\n+            Optional<String> configurationIssue = messageHelper.getConfigurationIssue(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjgxMw=="}, "originalCommit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MzAxNzU2", "url": "https://github.com/kiegroup/appformer/pull/1061#pullrequestreview-515301756", "createdAt": "2020-10-23T04:45:31Z", "commit": {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1999, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}