{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODI4OTIw", "number": 918, "title": "[AF-2058] Improve resiliency for K8SFileChannel", "bodyText": "In case of the occurrences of kubAPI or fabric8 client error when opening or closing a K8SFileChannel, the backing InMemoryByteChannel MUST be closed properly so as to be ready for garbage collection.\nSigned-off-by: Evan Zhang evan.zhang@redhat.com", "createdAt": "2020-03-09T21:31:29Z", "url": "https://github.com/kiegroup/appformer/pull/918", "merged": true, "mergeCommit": {"oid": "7e55748203a4807c78ca81e9eca00ad70c8b88c7"}, "closed": true, "closedAt": "2020-04-09T19:54:59Z", "author": {"login": "rhtevan"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMOOGrgFqTM3MTc1MjMzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVWtVLgFqTM4OTMzNDYzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzUyMzMx", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-371752331", "createdAt": "2020-03-10T08:27:14Z", "commit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzoxNFrOF0FIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzoxNFrOF0FIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        k8sfc.close();\n          \n          \n            \n                        k8sfc.close();\n          \n          \n            \n                        fail(\"Channel close should throw an exception.\");", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390154267", "createdAt": "2020-03-10T08:27:14Z", "author": {"login": "sutaakar"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class K8SFileChannelTest {\n+\n+    @ClassRule\n+    public static KubernetesServer SERVER = new KubernetesServer(false, true);\n+    // The default namespace for MockKubernetes Server is 'test'\n+    protected static String TEST_NAMESPACE = \"test\";\n+    protected static ThreadLocal<KubernetesClient> CLIENT_FACTORY =\n+            ThreadLocal.withInitial(() -> SERVER.getClient());\n+\n+    protected static final FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+        @Override\n+        public KubernetesClient createKubernetesClient() {\n+            return CLIENT_FACTORY.get();\n+        }\n+    };\n+\n+    @BeforeClass\n+    public static void setup() {}\n+\n+    @AfterClass\n+    public static void tearDown() {\n+        CLIENT_FACTORY.get().configMaps().inNamespace(TEST_NAMESPACE).delete();\n+        CLIENT_FACTORY.get().close();\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    @Test(expected = IOException.class)\n+    public void testOpenChannelWithInitializationErrors() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path invalid = kfs.getPath(\"/#weirdFileName$@#^&*\");\n+        new K8SFileChannel(invalid, (CloudClientFactory) fsProvider);\n+    }\n+\n+    @Test\n+    public void testOpenAndCloseChannel() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+        k8sfc.close();\n+        assertFalse(k8sfc.isOpen());\n+    }\n+\n+    @Test\n+    public void testChannelMustBeClosedRegardlessError() {\n+        FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+            @Override\n+            public KubernetesClient createKubernetesClient() {\n+                return CLIENT_FACTORY.get();\n+            }\n+        };\n+\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+\n+        k8sfc.ccf = null; // trigger an error\n+        try {\n+            k8sfc.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzUyNTY4", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-371752568", "createdAt": "2020-03-10T08:27:39Z", "commit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzo0MFrOF0FIwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzo0MFrOF0FIwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.fail;", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390154433", "createdAt": "2020-03-10T08:27:40Z", "author": {"login": "sutaakar"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzUyOTU0", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-371752954", "createdAt": "2020-03-10T08:28:19Z", "commit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0", "author": {"user": {"login": "rhtevan", "name": "Evan Zhang"}}, "url": "https://github.com/kiegroup/appformer/commit/3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0", "committedDate": "2020-03-10T12:32:58Z", "message": "[AF-2058] Improve resiliency for K8SFileChannel when opening or closing the channel.\n\nSigned-off-by: Evan Zhang <evan.zhang@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461", "author": {"user": {"login": "rhtevan", "name": "Evan Zhang"}}, "url": "https://github.com/kiegroup/appformer/commit/5a7a1829ad4de3fd228c8022521c2d1c14067461", "committedDate": "2020-03-09T21:17:09Z", "message": "[AF-2058] Improve resiliency for K8SFileChannel when opening or closing the channel.\n\nSigned-off-by: Evan Zhang <evan.zhang@redhat.com>"}, "afterCommit": {"oid": "3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0", "author": {"user": {"login": "rhtevan", "name": "Evan Zhang"}}, "url": "https://github.com/kiegroup/appformer/commit/3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0", "committedDate": "2020-03-10T12:32:58Z", "message": "[AF-2058] Improve resiliency for K8SFileChannel when opening or closing the channel.\n\nSigned-off-by: Evan Zhang <evan.zhang@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTI1NTgy", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-385525582", "createdAt": "2020-04-01T12:15:19Z", "commit": {"oid": "3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzIzMzc3", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-389323377", "createdAt": "2020-04-07T17:10:43Z", "commit": {"oid": "3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzM0NjMx", "url": "https://github.com/kiegroup/appformer/pull/918#pullrequestreview-389334631", "createdAt": "2020-04-07T17:25:55Z", "commit": {"oid": "3a6ca8ccee2f6d71a3c2cdbaa72d0bb9512858c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2062, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}