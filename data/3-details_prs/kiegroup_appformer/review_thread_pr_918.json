{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODI4OTIw", "number": 918, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzoxNFrODmlSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzo0MFrODmlSiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzgzMzQwOnYy", "diffSide": "RIGHT", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzoxNFrOF0FIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozODo0OFrOF0M_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        k8sfc.close();\n          \n          \n            \n                        k8sfc.close();\n          \n          \n            \n                        fail(\"Channel close should throw an exception.\");", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390154267", "createdAt": "2020-03-10T08:27:14Z", "author": {"login": "sutaakar"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class K8SFileChannelTest {\n+\n+    @ClassRule\n+    public static KubernetesServer SERVER = new KubernetesServer(false, true);\n+    // The default namespace for MockKubernetes Server is 'test'\n+    protected static String TEST_NAMESPACE = \"test\";\n+    protected static ThreadLocal<KubernetesClient> CLIENT_FACTORY =\n+            ThreadLocal.withInitial(() -> SERVER.getClient());\n+\n+    protected static final FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+        @Override\n+        public KubernetesClient createKubernetesClient() {\n+            return CLIENT_FACTORY.get();\n+        }\n+    };\n+\n+    @BeforeClass\n+    public static void setup() {}\n+\n+    @AfterClass\n+    public static void tearDown() {\n+        CLIENT_FACTORY.get().configMaps().inNamespace(TEST_NAMESPACE).delete();\n+        CLIENT_FACTORY.get().close();\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    @Test(expected = IOException.class)\n+    public void testOpenChannelWithInitializationErrors() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path invalid = kfs.getPath(\"/#weirdFileName$@#^&*\");\n+        new K8SFileChannel(invalid, (CloudClientFactory) fsProvider);\n+    }\n+\n+    @Test\n+    public void testOpenAndCloseChannel() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+        k8sfc.close();\n+        assertFalse(k8sfc.isOpen());\n+    }\n+\n+    @Test\n+    public void testChannelMustBeClosedRegardlessError() {\n+        FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+            @Override\n+            public KubernetesClient createKubernetesClient() {\n+                return CLIENT_FACTORY.get();\n+            }\n+        };\n+\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+\n+        k8sfc.ccf = null; // trigger an error\n+        try {\n+            k8sfc.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzIwMw==", "bodyText": "Updated commit with suggested changes.", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390283203", "createdAt": "2020-03-10T12:38:48Z", "author": {"login": "rhtevan"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class K8SFileChannelTest {\n+\n+    @ClassRule\n+    public static KubernetesServer SERVER = new KubernetesServer(false, true);\n+    // The default namespace for MockKubernetes Server is 'test'\n+    protected static String TEST_NAMESPACE = \"test\";\n+    protected static ThreadLocal<KubernetesClient> CLIENT_FACTORY =\n+            ThreadLocal.withInitial(() -> SERVER.getClient());\n+\n+    protected static final FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+        @Override\n+        public KubernetesClient createKubernetesClient() {\n+            return CLIENT_FACTORY.get();\n+        }\n+    };\n+\n+    @BeforeClass\n+    public static void setup() {}\n+\n+    @AfterClass\n+    public static void tearDown() {\n+        CLIENT_FACTORY.get().configMaps().inNamespace(TEST_NAMESPACE).delete();\n+        CLIENT_FACTORY.get().close();\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    @Test(expected = IOException.class)\n+    public void testOpenChannelWithInitializationErrors() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path invalid = kfs.getPath(\"/#weirdFileName$@#^&*\");\n+        new K8SFileChannel(invalid, (CloudClientFactory) fsProvider);\n+    }\n+\n+    @Test\n+    public void testOpenAndCloseChannel() {\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+        k8sfc.close();\n+        assertFalse(k8sfc.isOpen());\n+    }\n+\n+    @Test\n+    public void testChannelMustBeClosedRegardlessError() {\n+        FileSystemProvider fsProvider = new K8SFileSystemProvider() {\n+\n+            @Override\n+            public KubernetesClient createKubernetesClient() {\n+                return CLIENT_FACTORY.get();\n+            }\n+        };\n+\n+        final K8SFileSystem kfs = (K8SFileSystem) fsProvider.getFileSystem(URI.create(\"k8s:///\"));\n+        final Path valid = kfs.getPath(\"/test\");\n+        K8SFileChannel k8sfc = new K8SFileChannel(valid, (CloudClientFactory) fsProvider);\n+        assertTrue(k8sfc.isOpen());\n+\n+        k8sfc.ccf = null; // trigger an error\n+        try {\n+            k8sfc.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDI2Nw=="}, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzgzNDM1OnYy", "diffSide": "RIGHT", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyNzo0MFrOF0FIwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozODoyNlrOF0M-_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.fail;", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390154433", "createdAt": "2020-03-10T08:27:40Z", "author": {"login": "sutaakar"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzAwNA==", "bodyText": "Updated commit with suggested changes.", "url": "https://github.com/kiegroup/appformer/pull/918#discussion_r390283004", "createdAt": "2020-03-10T12:38:26Z", "author": {"login": "rhtevan"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-k8s/src/test/java/org/uberfire/java/nio/fs/k8s/K8SFileChannelTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.java.nio.fs.k8s;\n+\n+import java.net.URI;\n+\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.server.mock.KubernetesServer;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.uberfire.java.nio.IOException;\n+import org.uberfire.java.nio.file.Path;\n+import org.uberfire.java.nio.file.spi.FileSystemProvider;\n+import org.uberfire.java.nio.fs.cloud.CloudClientFactory;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDQzMw=="}, "originalCommit": {"oid": "5a7a1829ad4de3fd228c8022521c2d1c14067461"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2749, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}