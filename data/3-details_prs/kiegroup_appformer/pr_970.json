{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODAyNTE2", "number": 970, "title": "AF-2474: Add Remote dataset type (kie server) for Dashbuilder Webapp and Standalone", "bodyText": "MERGE WITH kiegroup/droolsjbpm-build-bootstrap#1321\nThis is a port of Kie Server Dataset to dashbuilder webapp and dashbuilder runtime.\nAs a port most of the code was brought from jbpm-wb Kie Server dataset impl, hence you may find deprecated code. What was done to plug kie server in dashbuilder webapp is remove the code from BC Kie Server APIs and use a plain REST client to query Kie Server.\nTo see a list of available servers you need to set the following system property with comma separated server template names:\norg.dashbuilder.kieserver.serverTemplates=serverTemplate1, serverTemplate2 \u2026\n\nThen you must set up location and credentials for the server template:\norg.dashbuilder.kieserver.serverTemplate.{SERVER_TEMPLATE_NAME}.location={LOCATION}\norg.dashbuilder.kieserver.serverTemplate.{SERVER_TEMPLATE_NAME}.user={USER}\norg.dashbuilder.kieserver.serverTemplate.{SERVER_TEMPLATE_NAME}.password={PASSWORD}\norg.dashbuilder.kieserver.serverTemplate.{SERVER_TEMPLATE_NAME}.token={TOKEN} * not used if user provides credentials\n\nIf you are using dashboards on a new Kie Server instance where queries were not created, the replace_query option will automatically create queries:\norg.dashbuilder.kieserver.serverTemplate.{SERVER_TEMPLATE_NAME}.replace_query=true\n\nWith this option queries will be replaced in the target Kie Server to make sure that queries are consistent to run the dashboards.\nOn Dashbuilder Runtime the org.dashbuilder.kieserver.serverTemplates system property is ignored, there's no use for it there.\nIn another words, to test this PR you must have a running Kie Server, then start web app using the mentioned system properties, create a kie server dataset on dashbuilder webapp and use it in some page.", "createdAt": "2020-05-20T14:50:25Z", "url": "https://github.com/kiegroup/appformer/pull/970", "merged": true, "mergeCommit": {"oid": "b2ef816333c4cde11bdf7b2c793524e4e97fe6fd"}, "closed": true, "closedAt": "2020-06-05T13:17:46Z", "author": {"login": "jesuino"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj357agFqTQxNzA4MTc4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoE4ufAFqTQyNDg0NjQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDgxNzgw", "url": "https://github.com/kiegroup/appformer/pull/970#pullrequestreview-417081780", "createdAt": "2020-05-22T17:39:50Z", "commit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozOTo1MFrOGZe9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTozNzoxNlrOGZh8xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NDg4Mg==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429374882", "createdAt": "2020-05-22T17:39:50Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-webapp/src/main/resources/org/dashbuilder/DashbuilderShowcase.gwt.xml", "diffHunk": "@@ -15,11 +15,13 @@\n   <inherits name=\"org.uberfire.experimental.UberfireExperimentalAPI\"/>\n   <inherits name=\"org.uberfire.experimental.UberfireExperimentalClient\"/>\n \n+  <inherits name=\"org.dashbuilder.DashbuilderKieServerAPI\"/>\n   <inherits name=\"org.dashbuilder.DashbuilderClientAll\"/>\n+  <inherits name=\"org.dashbuilder.DashbuilderKieServerClient\"/>\n   <inherits name=\"org.dashbuilder.DisplayerEditor\"/>\n   <inherits name=\"org.dashbuilder.renderer.ChartJsRenderer\"/>\n   <inherits name=\"org.dashbuilder.renderer.C3Renderer\"/>\n-\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTI0MQ==", "bodyText": "As there're no changes, you can revert this file.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429375241", "createdAt": "2020-05-22T17:40:40Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-webapp/src/main/resources/META-INF/ErraiApp.properties", "diffHunk": "@@ -65,4 +65,4 @@ errai.marshalling.serializableTypes=org.dashbuilder.dataprovider.StaticProviderT\n                                     org.dashbuilder.dataset.impl.DataSetMetadataImpl \\\n                                     org.dashbuilder.dataset.sort.ColumnSort \\\n                                     org.dashbuilder.dataset.sort.DataSetSort \\\n-                                    org.dashbuilder.dataset.sort.SortedList\n+                                    org.dashbuilder.dataset.sort.SortedList ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3OTYxNg==", "bodyText": "Consider using camel case for the names.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429379616", "createdAt": "2020-05-22T17:50:52Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/resources/i18n/KieServerClientConstants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.resources.i18n;\n+\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.i18n.client.Messages;\n+\n+public interface KieServerClientConstants extends Messages {\n+\n+    public static final KieServerClientConstants INSTANCE = GWT.create(KieServerClientConstants.class);\n+\n+    public String remote_data_set_editor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTcyNg==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429381726", "createdAt": "2020-05-22T17:54:45Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/test/java/org/dashbuilder/kieserver/backend/KieServerConnectionInfoProviderImplTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.KieServerConfigurationKey;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.DATASET_PROP_PREFFIX;\n+import static org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_PROP_PREFFIX;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class KieServerConnectionInfoProviderImplTest {\n+\n+    private static final String SERVER_USER = \"serveruser\";\n+    private static final String SERVER_PASSWORD = \"serverpassword\";\n+    private static final String SERVER_TOKEN = \"servertoken\";\n+    private static final String SERVER_LOCATION = \"serverlocation\";\n+    private static final String DS_USER = \"dsuser\";\n+    private static final String DS_PASSWORD = \"dspassword\";\n+    private static final String DS_TOKEN = \"dstoken\";\n+    private static final String DS_LOCATION = \"dslocation\";\n+\n+    private KieServerConnectionInfoProviderImpl kieServerConnectionInfoProvider;\n+\n+    private final static String SERVER_ID = \"server1\";\n+    private final static String DATASET_NAME = \"ds1\";\n+    private final static String SERVER_TEMPLATE_PROP = SERVER_TEMPLATE_PROP_PREFFIX + \".\" + SERVER_ID + \".\";\n+    private final static String DATASET_PROP = DATASET_PROP_PREFFIX + \".\" + DATASET_NAME + \".\";\n+\n+    private RemoteDataSetDef def;\n+\n+    @Before\n+    public void init() {\n+        kieServerConnectionInfoProvider = new KieServerConnectionInfoProviderImpl();\n+        def = new RemoteDataSetDef();\n+        def.setName(DATASET_NAME);\n+        def.setServerTemplateId(SERVER_ID);\n+        clearProperties();\n+    }\n+\n+    @Test\n+    public void serverListTest() {\n+        System.setProperty(KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_LIST_PROPERTY, \"server1, server2, server3\");\n+        List<String> serverTemplates = kieServerConnectionInfoProvider.serverTemplates();\n+        assertEquals(3, serverTemplates.size());\n+        List<String> expectedList = Arrays.asList(\"server1\", \"server2\", \"server3\");\n+        assertEquals(expectedList, serverTemplates);\n+    }\n+\n+    @Test\n+    public void emptyServerListTest() {\n+        System.setProperty(KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_LIST_PROPERTY, \"\");\n+        List<String> serverTemplates = kieServerConnectionInfoProvider.serverTemplates();\n+        assertTrue(serverTemplates.isEmpty());\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void absentConfigurationErrorTest() {\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testServerMissingAuth() {\n+        setServerProp(KieServerConfigurationKey.LOCATION, \"somelocation\");\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testDataSetMissingAuth() {\n+        setDataSetProp(KieServerConfigurationKey.LOCATION, \"somelocation\");\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test\n+    public void testDsPropsPrecedence() {\n+        setDataSetProp(KieServerConfigurationKey.LOCATION, DS_LOCATION);\n+        setDataSetProp(KieServerConfigurationKey.USER, DS_USER);\n+        setDataSetProp(KieServerConfigurationKey.PASSWORD, DS_PASSWORD);\n+\n+        setServerProp(KieServerConfigurationKey.LOCATION, SERVER_LOCATION);\n+        setServerProp(KieServerConfigurationKey.USER, SERVER_USER);\n+        setServerProp(KieServerConfigurationKey.PASSWORD, SERVER_PASSWORD);\n+        KieServerConnectionInfo connectionInfo = kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+\n+        assertEquals(DS_LOCATION, connectionInfo.getLocation().get());\n+        assertEquals(DS_USER, connectionInfo.getUser().get());\n+        assertEquals(DS_PASSWORD, connectionInfo.getPassword().get());\n+    }\n+\n+    @Test\n+    public void testServerTemplateProps() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTc5Ng==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429381796", "createdAt": "2020-05-22T17:54:55Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/test/java/org/dashbuilder/kieserver/backend/KieServerConnectionInfoProviderImplTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.KieServerConfigurationKey;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.DATASET_PROP_PREFFIX;\n+import static org.dashbuilder.kieserver.backend.KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_PROP_PREFFIX;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class KieServerConnectionInfoProviderImplTest {\n+\n+    private static final String SERVER_USER = \"serveruser\";\n+    private static final String SERVER_PASSWORD = \"serverpassword\";\n+    private static final String SERVER_TOKEN = \"servertoken\";\n+    private static final String SERVER_LOCATION = \"serverlocation\";\n+    private static final String DS_USER = \"dsuser\";\n+    private static final String DS_PASSWORD = \"dspassword\";\n+    private static final String DS_TOKEN = \"dstoken\";\n+    private static final String DS_LOCATION = \"dslocation\";\n+\n+    private KieServerConnectionInfoProviderImpl kieServerConnectionInfoProvider;\n+\n+    private final static String SERVER_ID = \"server1\";\n+    private final static String DATASET_NAME = \"ds1\";\n+    private final static String SERVER_TEMPLATE_PROP = SERVER_TEMPLATE_PROP_PREFFIX + \".\" + SERVER_ID + \".\";\n+    private final static String DATASET_PROP = DATASET_PROP_PREFFIX + \".\" + DATASET_NAME + \".\";\n+\n+    private RemoteDataSetDef def;\n+\n+    @Before\n+    public void init() {\n+        kieServerConnectionInfoProvider = new KieServerConnectionInfoProviderImpl();\n+        def = new RemoteDataSetDef();\n+        def.setName(DATASET_NAME);\n+        def.setServerTemplateId(SERVER_ID);\n+        clearProperties();\n+    }\n+\n+    @Test\n+    public void serverListTest() {\n+        System.setProperty(KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_LIST_PROPERTY, \"server1, server2, server3\");\n+        List<String> serverTemplates = kieServerConnectionInfoProvider.serverTemplates();\n+        assertEquals(3, serverTemplates.size());\n+        List<String> expectedList = Arrays.asList(\"server1\", \"server2\", \"server3\");\n+        assertEquals(expectedList, serverTemplates);\n+    }\n+\n+    @Test\n+    public void emptyServerListTest() {\n+        System.setProperty(KieServerConnectionInfoProviderImpl.SERVER_TEMPLATE_LIST_PROPERTY, \"\");\n+        List<String> serverTemplates = kieServerConnectionInfoProvider.serverTemplates();\n+        assertTrue(serverTemplates.isEmpty());\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void absentConfigurationErrorTest() {\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testServerMissingAuth() {\n+        setServerProp(KieServerConfigurationKey.LOCATION, \"somelocation\");\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test(expected = RuntimeException.class)\n+    public void testDataSetMissingAuth() {\n+        setDataSetProp(KieServerConfigurationKey.LOCATION, \"somelocation\");\n+        kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+    }\n+\n+    @Test\n+    public void testDsPropsPrecedence() {\n+        setDataSetProp(KieServerConfigurationKey.LOCATION, DS_LOCATION);\n+        setDataSetProp(KieServerConfigurationKey.USER, DS_USER);\n+        setDataSetProp(KieServerConfigurationKey.PASSWORD, DS_PASSWORD);\n+\n+        setServerProp(KieServerConfigurationKey.LOCATION, SERVER_LOCATION);\n+        setServerProp(KieServerConfigurationKey.USER, SERVER_USER);\n+        setServerProp(KieServerConfigurationKey.PASSWORD, SERVER_PASSWORD);\n+        KieServerConnectionInfo connectionInfo = kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+\n+        assertEquals(DS_LOCATION, connectionInfo.getLocation().get());\n+        assertEquals(DS_USER, connectionInfo.getUser().get());\n+        assertEquals(DS_PASSWORD, connectionInfo.getPassword().get());\n+    }\n+\n+    @Test\n+    public void testServerTemplateProps() {\n+\n+        setServerProp(KieServerConfigurationKey.LOCATION, SERVER_LOCATION);\n+        setServerProp(KieServerConfigurationKey.USER, SERVER_USER);\n+        setServerProp(KieServerConfigurationKey.PASSWORD, SERVER_PASSWORD);\n+        KieServerConnectionInfo connectionInfo = kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+\n+        assertEquals(SERVER_LOCATION, connectionInfo.getLocation().get());\n+        assertEquals(SERVER_USER, connectionInfo.getUser().get());\n+        assertEquals(SERVER_PASSWORD, connectionInfo.getPassword().get());\n+    }\n+\n+    @Test\n+    public void testDsTokenPropPrecedence() {\n+        setDataSetProp(KieServerConfigurationKey.LOCATION, DS_LOCATION);\n+        setDataSetProp(KieServerConfigurationKey.TOKEN, DS_TOKEN);\n+\n+        setServerProp(KieServerConfigurationKey.LOCATION, SERVER_LOCATION);\n+        setServerProp(KieServerConfigurationKey.TOKEN, SERVER_TOKEN);\n+        KieServerConnectionInfo connectionInfo = kieServerConnectionInfoProvider.verifiedConnectionInfo(def);\n+\n+        assertEquals(DS_LOCATION, connectionInfo.getLocation().get());\n+        assertEquals(DS_TOKEN, connectionInfo.getToken().get());\n+    }\n+\n+    @Test\n+    public void testServerToken() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5NzkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((!connectionInfo.getUser().isPresent()) &&\n          \n          \n            \n                        (!connectionInfo.getToken().isPresent())) {\n          \n          \n            \n                    if (!connectionInfo.getUser().isPresent() &&\n          \n          \n            \n                        !connectionInfo.getToken().isPresent()) {", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429397923", "createdAt": "2020-05-22T18:34:39Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/KieServerConnectionInfoProviderImpl.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.jboss.errai.bus.server.annotations.Service;\n+\n+/**\n+ * Provide access to user configured connection provider\n+ *\n+ */\n+@Service\n+@ApplicationScoped\n+public class KieServerConnectionInfoProviderImpl implements KieServerConnectionInfoProvider {\n+\n+    static final String CONFIGURATION_NOT_FOUND_MESSAGE = \"Configuration for dataset %s / server template %s not found\";\n+    static final String MISSING_URL_MESSAGE = \"URL configuration for dataset %s / server template %s is missing\";\n+    static final String MISSING_AUTH_MESSAGE = \"Auth configuration for dataset %s / server template %s is missing.\" +\n+                                               \"You should provide user/password or token authentication\";\n+\n+    private static final String SERVER_TEMPLATE_SEPARATOR = \",\";\n+    static final String SERVER_TEMPLATE_LIST_PROPERTY = \"org.dashbuilder.kieserver.serverTemplates\";\n+    static final String SERVER_TEMPLATE_PROP_PREFFIX = \"org.dashbuilder.kieserver.serverTemplate\";\n+    static final String DATASET_PROP_PREFFIX = \"org.dashbuilder.kieserver.dataset\";\n+\n+    private static final String SERVER_TEMPLATE_PROPERTY_TEMPLATE = SERVER_TEMPLATE_PROP_PREFFIX + \".%s.%s\";\n+    private static final String REMOTE_DATASET_PROPERTY_TEMPLATE = DATASET_PROP_PREFFIX + \".%s.%s\";\n+\n+    public static enum KieServerConfigurationKey {\n+\n+        LOCATION(\"location\"),\n+        USER(\"user\"),\n+        PASSWORD(\"password\"),\n+        TOKEN(\"token\");\n+\n+        private KieServerConfigurationKey(String value) {\n+            this.value = value;\n+        }\n+\n+        private String value;\n+\n+        public String getValue() {\n+            return this.value;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<String> serverTemplates() {\n+        return Optional.ofNullable(System.getProperty(SERVER_TEMPLATE_LIST_PROPERTY))\n+                       .map(templates -> templates.split(SERVER_TEMPLATE_SEPARATOR))\n+                       .map(template -> Arrays.stream(template)\n+                                              .map(String::trim)\n+                                              .filter(s -> !s.isEmpty())\n+                                              .collect(Collectors.toList()))\n+                       .orElse(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public KieServerConnectionInfo verifiedConnectionInfo(RemoteDataSetDef def) {\n+        String name = def.getName();\n+        String serverTemplateId = def.getServerTemplateId();\n+        String missingConfigError = String.format(CONFIGURATION_NOT_FOUND_MESSAGE, name, serverTemplateId);\n+        String missingUrlError = String.format(MISSING_URL_MESSAGE, name, serverTemplateId);\n+        String missingAuthError = String.format(MISSING_AUTH_MESSAGE, name, serverTemplateId);\n+        KieServerConnectionInfo connectionInfo = get(name, serverTemplateId).orElseThrow(() -> new RuntimeException(missingConfigError));\n+\n+        if (!connectionInfo.getLocation().isPresent()) {\n+            throw new RuntimeException(missingUrlError);\n+        }\n+\n+        if ((!connectionInfo.getUser().isPresent()) &&\n+            (!connectionInfo.getToken().isPresent())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwMjMzMQ==", "bodyText": "Consider creating a method that checks if 1...N optionals are present, like:\nprivate static boolean allPresent(final Optional<String> ... optionals) {\n    return Stream.of(optionals).allMatch(Optional::isPresent);\n}\n\nThen, you can use this method on lines 97 and 143 to make them shorter.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429402331", "createdAt": "2020-05-22T18:45:46Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/KieServerConnectionInfoProviderImpl.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.jboss.errai.bus.server.annotations.Service;\n+\n+/**\n+ * Provide access to user configured connection provider\n+ *\n+ */\n+@Service\n+@ApplicationScoped\n+public class KieServerConnectionInfoProviderImpl implements KieServerConnectionInfoProvider {\n+\n+    static final String CONFIGURATION_NOT_FOUND_MESSAGE = \"Configuration for dataset %s / server template %s not found\";\n+    static final String MISSING_URL_MESSAGE = \"URL configuration for dataset %s / server template %s is missing\";\n+    static final String MISSING_AUTH_MESSAGE = \"Auth configuration for dataset %s / server template %s is missing.\" +\n+                                               \"You should provide user/password or token authentication\";\n+\n+    private static final String SERVER_TEMPLATE_SEPARATOR = \",\";\n+    static final String SERVER_TEMPLATE_LIST_PROPERTY = \"org.dashbuilder.kieserver.serverTemplates\";\n+    static final String SERVER_TEMPLATE_PROP_PREFFIX = \"org.dashbuilder.kieserver.serverTemplate\";\n+    static final String DATASET_PROP_PREFFIX = \"org.dashbuilder.kieserver.dataset\";\n+\n+    private static final String SERVER_TEMPLATE_PROPERTY_TEMPLATE = SERVER_TEMPLATE_PROP_PREFFIX + \".%s.%s\";\n+    private static final String REMOTE_DATASET_PROPERTY_TEMPLATE = DATASET_PROP_PREFFIX + \".%s.%s\";\n+\n+    public static enum KieServerConfigurationKey {\n+\n+        LOCATION(\"location\"),\n+        USER(\"user\"),\n+        PASSWORD(\"password\"),\n+        TOKEN(\"token\");\n+\n+        private KieServerConfigurationKey(String value) {\n+            this.value = value;\n+        }\n+\n+        private String value;\n+\n+        public String getValue() {\n+            return this.value;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<String> serverTemplates() {\n+        return Optional.ofNullable(System.getProperty(SERVER_TEMPLATE_LIST_PROPERTY))\n+                       .map(templates -> templates.split(SERVER_TEMPLATE_SEPARATOR))\n+                       .map(template -> Arrays.stream(template)\n+                                              .map(String::trim)\n+                                              .filter(s -> !s.isEmpty())\n+                                              .collect(Collectors.toList()))\n+                       .orElse(Collections.emptyList());\n+    }\n+\n+    @Override\n+    public KieServerConnectionInfo verifiedConnectionInfo(RemoteDataSetDef def) {\n+        String name = def.getName();\n+        String serverTemplateId = def.getServerTemplateId();\n+        String missingConfigError = String.format(CONFIGURATION_NOT_FOUND_MESSAGE, name, serverTemplateId);\n+        String missingUrlError = String.format(MISSING_URL_MESSAGE, name, serverTemplateId);\n+        String missingAuthError = String.format(MISSING_AUTH_MESSAGE, name, serverTemplateId);\n+        KieServerConnectionInfo connectionInfo = get(name, serverTemplateId).orElseThrow(() -> new RuntimeException(missingConfigError));\n+\n+        if (!connectionInfo.getLocation().isPresent()) {\n+            throw new RuntimeException(missingUrlError);\n+        }\n+\n+        if ((!connectionInfo.getUser().isPresent()) &&\n+            (!connectionInfo.getToken().isPresent())) {\n+            throw new RuntimeException(missingAuthError);\n+        }\n+        return connectionInfo;\n+    }\n+\n+    @Override\n+    public Optional<KieServerConnectionInfo> get(String name,\n+                                                 String serverTemplate) {\n+\n+        Optional<KieServerConnectionInfo> optional = get(name, this::remoteDatasetProperty);\n+        if (!optional.isPresent()) {\n+            optional = get(serverTemplate, this::serverTemplateProperty);\n+        }\n+        return optional;\n+    }\n+\n+    public Optional<String> serverTemplateProperty(String serverTemplate,\n+                                                   KieServerConfigurationKey configurationKey) {\n+        String property = String.format(SERVER_TEMPLATE_PROPERTY_TEMPLATE,\n+                                        serverTemplate,\n+                                        configurationKey.value);\n+        return filteredProperty(property);\n+    }\n+\n+    public Optional<String> remoteDatasetProperty(String datasetUUID,\n+                                                  KieServerConfigurationKey configurationKey) {\n+        String property = String.format(REMOTE_DATASET_PROPERTY_TEMPLATE,\n+                                        datasetUUID,\n+                                        configurationKey.value);\n+        return filteredProperty(property);\n+    }\n+\n+    private Optional<String> filteredProperty(String property) {\n+        return Optional.ofNullable(System.getProperty(property)).filter(v -> !v.trim().isEmpty());\n+    }\n+\n+    private Optional<KieServerConnectionInfo> get(String confType,\n+                                                  BiFunction<String, KieServerConfigurationKey, Optional<String>> propertyProvider) {\n+\n+        Optional<String> url = propertyProvider.apply(confType, KieServerConfigurationKey.LOCATION);\n+        Optional<String> user = propertyProvider.apply(confType, KieServerConfigurationKey.USER);\n+        Optional<String> password = propertyProvider.apply(confType, KieServerConfigurationKey.PASSWORD);\n+        Optional<String> token = propertyProvider.apply(confType, KieServerConfigurationKey.TOKEN);\n+\n+        if (!url.isPresent() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzYzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Keeps Kie Server ups to date with remote dataset changes\n          \n          \n            \n             * Keeps Kie Server up to date with remote dataset changes", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429407634", "createdAt": "2020-05-22T18:59:17Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/KieServerDataSetListener.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.events.DataSetDefModifiedEvent;\n+import org.dashbuilder.dataset.events.DataSetDefRegisteredEvent;\n+import org.dashbuilder.dataset.events.DataSetDefRemovedEvent;\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.backend.rest.KieServerQueryClient;\n+import org.dashbuilder.kieserver.backend.rest.QueryDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Keeps Kie Server ups to date with remote dataset changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwOTE2Mw==", "bodyText": "You could use MediaType.APPLICATION_JSON directly instead of creating a constant that holds a constant.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429409163", "createdAt": "2020-05-22T19:01:32Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/rest/KieServerQueryClient.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend.rest;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+\n+/**\n+ * Run queries on Kie Server using its REST API\n+ * \n+ */\n+@ApplicationScoped\n+public class KieServerQueryClient {\n+\n+    private static final String MEDIA_TYPE = MediaType.APPLICATION_JSON;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjI0Mw==", "bodyText": "Don't you need a client.close() at the end of this method?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429412243", "createdAt": "2020-05-22T19:06:52Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/rest/KieServerQueryClient.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend.rest;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+\n+/**\n+ * Run queries on Kie Server using its REST API\n+ * \n+ */\n+@ApplicationScoped\n+public class KieServerQueryClient {\n+\n+    private static final String MEDIA_TYPE = MediaType.APPLICATION_JSON;\n+\n+    public static final String QUERY_MAP_RAW = \"RawList\";\n+\n+    public static final String QUERY_DEFINITION_URI = \"queries/definitions/{id}\";\n+    public static final String QUERY_EXECUTION_URI = QUERY_DEFINITION_URI + \"/filtered-data\";\n+\n+    public QueryDefinition getQuery(KieServerConnectionInfo connectionInfo, String uuid) {\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = requestForQueryDefinition(connectionInfo, uuid, client);\n+\n+        QueryDefinition queryDefinition = target.request()\n+                                                .accept(MEDIA_TYPE)\n+                                                .get(QueryDefinition.class);\n+        client.close();\n+        return queryDefinition;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public List<List> query(KieServerConnectionInfo connectionInfo,\n+                            String uuid,\n+                            QueryFilterSpec filterSpec,\n+                            int i,\n+                            int numberOfRows) {\n+\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = client.target(connectionInfo.getLocation().get())\n+                                 .path(QUERY_EXECUTION_URI)\n+                                 .resolveTemplate(\"id\", uuid)\n+                                 .queryParam(\"mapper\", QUERY_MAP_RAW)\n+                                 .queryParam(\"page\", i)\n+                                 .queryParam(\"pageSize\", numberOfRows);\n+\n+        addAuth(connectionInfo, target);\n+\n+        List<List> response = target.request()\n+                                    .accept(MEDIA_TYPE)\n+                                    .post(Entity.entity(filterSpec, MEDIA_TYPE), List.class);\n+        client.close();\n+        return response;\n+    }\n+\n+    public QueryDefinition replaceQuery(KieServerConnectionInfo connectionInfo, QueryDefinition queryDefinition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMjI4Mg==", "bodyText": "Don't you need a client.close() at the end of this method?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429412282", "createdAt": "2020-05-22T19:07:00Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/rest/KieServerQueryClient.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend.rest;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+\n+/**\n+ * Run queries on Kie Server using its REST API\n+ * \n+ */\n+@ApplicationScoped\n+public class KieServerQueryClient {\n+\n+    private static final String MEDIA_TYPE = MediaType.APPLICATION_JSON;\n+\n+    public static final String QUERY_MAP_RAW = \"RawList\";\n+\n+    public static final String QUERY_DEFINITION_URI = \"queries/definitions/{id}\";\n+    public static final String QUERY_EXECUTION_URI = QUERY_DEFINITION_URI + \"/filtered-data\";\n+\n+    public QueryDefinition getQuery(KieServerConnectionInfo connectionInfo, String uuid) {\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = requestForQueryDefinition(connectionInfo, uuid, client);\n+\n+        QueryDefinition queryDefinition = target.request()\n+                                                .accept(MEDIA_TYPE)\n+                                                .get(QueryDefinition.class);\n+        client.close();\n+        return queryDefinition;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public List<List> query(KieServerConnectionInfo connectionInfo,\n+                            String uuid,\n+                            QueryFilterSpec filterSpec,\n+                            int i,\n+                            int numberOfRows) {\n+\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = client.target(connectionInfo.getLocation().get())\n+                                 .path(QUERY_EXECUTION_URI)\n+                                 .resolveTemplate(\"id\", uuid)\n+                                 .queryParam(\"mapper\", QUERY_MAP_RAW)\n+                                 .queryParam(\"page\", i)\n+                                 .queryParam(\"pageSize\", numberOfRows);\n+\n+        addAuth(connectionInfo, target);\n+\n+        List<List> response = target.request()\n+                                    .accept(MEDIA_TYPE)\n+                                    .post(Entity.entity(filterSpec, MEDIA_TYPE), List.class);\n+        client.close();\n+        return response;\n+    }\n+\n+    public QueryDefinition replaceQuery(KieServerConnectionInfo connectionInfo, QueryDefinition queryDefinition) {\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = requestForQueryDefinition(connectionInfo, queryDefinition.getName(), client);\n+        return target.request()\n+                     .accept(MEDIA_TYPE)\n+                     .put(Entity.entity(queryDefinition, MEDIA_TYPE), QueryDefinition.class);\n+\n+    }\n+\n+    public void unregisterQuery(KieServerConnectionInfo connectionInfo, String dataSetUUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNDUzMQ==", "bodyText": "Please indent this block of code.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429414531", "createdAt": "2020-05-22T19:13:06Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/impl/RemoteDataSetEditor.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.kieserver.dataset.editor.impl;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.kieserver.dataset.editor.RemoteDataSetDefEditor;\n+import org.dashbuilder.client.widgets.common.LoadingBox;\n+import org.dashbuilder.client.widgets.dataset.editor.DataSetDefColumnsFilterEditor;\n+import org.dashbuilder.client.widgets.dataset.editor.DataSetDefPreviewTable;\n+import org.dashbuilder.client.widgets.dataset.editor.DataSetEditor;\n+import org.dashbuilder.client.widgets.dataset.editor.attributes.DataSetDefBackendCacheAttributesEditor;\n+import org.dashbuilder.client.widgets.dataset.editor.attributes.DataSetDefBasicAttributesEditor;\n+import org.dashbuilder.client.widgets.dataset.editor.attributes.DataSetDefClientCacheAttributesEditor;\n+import org.dashbuilder.client.widgets.dataset.editor.attributes.DataSetDefRefreshAttributesEditor;\n+import org.dashbuilder.client.widgets.dataset.event.ErrorEvent;\n+import org.dashbuilder.client.widgets.dataset.event.TabChangedEvent;\n+import org.dashbuilder.common.client.editor.ValueBoxEditor;\n+import org.dashbuilder.common.client.editor.list.DropDownEditor;\n+import org.dashbuilder.dataset.client.DataSetClientServices;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+\n+/**\n+ * <p>KIE Server/Remote Data Set editor presenter.</p>\n+ * \n+ */\n+@Dependent\n+public class RemoteDataSetEditor extends DataSetEditor<RemoteDataSetDef> implements RemoteDataSetDefEditor {\n+\n+    RemoteDataSetDefAttributesEditorImpl attributesEditor;\n+    \n+    @Inject\n+    public RemoteDataSetEditor(final DataSetDefBasicAttributesEditor basicAttributesEditor,\n+                            final RemoteDataSetDefAttributesEditorImpl attributesEditor,\n+                            final DataSetDefColumnsFilterEditor columnsAndFilterEditor,\n+                            final DataSetDefPreviewTable previewTable,\n+                            final DataSetDefBackendCacheAttributesEditor backendCacheAttributesEditor,\n+                            final DataSetDefClientCacheAttributesEditor clientCacheAttributesEditor,\n+                            final DataSetDefRefreshAttributesEditor refreshEditor,\n+                            final DataSetClientServices clientServices,\n+                            final LoadingBox loadingBox,\n+                            final Event<ErrorEvent> errorEvent,\n+                            final Event<TabChangedEvent> tabChangedEvent,\n+                            final View view) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNTYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<ConstraintViolation<RemoteDataSetDef>> _violations = validator.validate(dataSetDef,\n          \n          \n            \n                    Set<ConstraintViolation<RemoteDataSetDef>> violations = validator.validate(dataSetDef,", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429415605", "createdAt": "2020-05-22T19:15:52Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/validator/RemoteDataSetDefValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.dataset.editor.validator;\n+\n+import java.util.Set;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validator;\n+\n+import org.dashbuilder.dataprovider.DataSetProviderType;\n+import org.dashbuilder.dataset.validation.groups.SQLDataSetDefDbSQLValidation;\n+import org.dashbuilder.dataset.validation.groups.SQLDataSetDefValidation;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.RemoteDataSetDefValidation;\n+import org.dashbuilder.kieserver.RuntimeKieServerDataSetProviderType;\n+import org.dashbuilder.validations.dataset.AbstractDataSetDefValidator;\n+\n+/**\n+ * <p>The singleton application Remote data set definition validator.</p>\n+ */\n+@Dependent\n+public class RemoteDataSetDefValidator extends AbstractDataSetDefValidator<RemoteDataSetDef> {\n+\n+    @Inject\n+    public RemoteDataSetDefValidator(Validator validator) {\n+        super(validator);\n+    }\n+\n+    @Override\n+    public DataSetProviderType getSupportedProvider() {\n+        return new RuntimeKieServerDataSetProviderType();\n+    }\n+\n+    @Override\n+    public Iterable<ConstraintViolation<?>> validateCustomAttributes(RemoteDataSetDef dataSetDef, Object... params) {\n+\n+        Set<ConstraintViolation<RemoteDataSetDef>> _violations = validator.validate(dataSetDef,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNTY3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<ConstraintViolation<RemoteDataSetDef>> _violations = validator.validate(dataSetDef,\n          \n          \n            \n                    Set<ConstraintViolation<RemoteDataSetDef>> violations = validator.validate(dataSetDef,", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429415672", "createdAt": "2020-05-22T19:16:03Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/validator/RemoteDataSetDefValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.dataset.editor.validator;\n+\n+import java.util.Set;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validator;\n+\n+import org.dashbuilder.dataprovider.DataSetProviderType;\n+import org.dashbuilder.dataset.validation.groups.SQLDataSetDefDbSQLValidation;\n+import org.dashbuilder.dataset.validation.groups.SQLDataSetDefValidation;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.RemoteDataSetDefValidation;\n+import org.dashbuilder.kieserver.RuntimeKieServerDataSetProviderType;\n+import org.dashbuilder.validations.dataset.AbstractDataSetDefValidator;\n+\n+/**\n+ * <p>The singleton application Remote data set definition validator.</p>\n+ */\n+@Dependent\n+public class RemoteDataSetDefValidator extends AbstractDataSetDefValidator<RemoteDataSetDef> {\n+\n+    @Inject\n+    public RemoteDataSetDefValidator(Validator validator) {\n+        super(validator);\n+    }\n+\n+    @Override\n+    public DataSetProviderType getSupportedProvider() {\n+        return new RuntimeKieServerDataSetProviderType();\n+    }\n+\n+    @Override\n+    public Iterable<ConstraintViolation<?>> validateCustomAttributes(RemoteDataSetDef dataSetDef, Object... params) {\n+\n+        Set<ConstraintViolation<RemoteDataSetDef>> _violations = validator.validate(dataSetDef,\n+                                                                                    RemoteDataSetDefValidation.class,\n+                                                                                    SQLDataSetDefValidation.class,\n+                                                                                    SQLDataSetDefDbSQLValidation.class);\n+        return toIterable(_violations);\n+    }\n+\n+    @Override\n+    public Iterable<ConstraintViolation<?>> validate(RemoteDataSetDef dataSetDef,\n+                                                     boolean isCacheEnabled,\n+                                                     boolean isPushEnabled,\n+                                                     boolean isRefreshEnabled,\n+                                                     Object... params) {\n+\n+        Set<ConstraintViolation<RemoteDataSetDef>> _violations = validator.validate(dataSetDef,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNzgzNg==", "bodyText": "Is it necessary?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429417836", "createdAt": "2020-05-22T19:20:33Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" bean-discovery-mode=\"none\">\n+  <scan>\n+    <exclude name=\"org.jbpm.dashboard.renderer.client.**\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxOTU3Ng==", "bodyText": "Is it intentionally empty?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429419576", "createdAt": "2020-05-22T19:25:26Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/impl/RemoteDataSetDefAttributesEditorImpl.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.dataset.editor.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.editor.client.EditorDelegate;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.client.kieserver.dataset.editor.RemoteDataSetDefAttributesEditor;\n+import org.dashbuilder.client.kieserver.resources.i18n.KieServerClientConstants;\n+import org.dashbuilder.common.client.editor.ValueBoxEditor;\n+import org.dashbuilder.common.client.editor.list.DropDownEditor;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.gwtbootstrap3.client.ui.constants.Placement;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberView;\n+\n+/**\n+ * <p>KIE Server/Remote Data Set specific attributes editor presenter.</p>\n+ */\n+@Dependent\n+public class RemoteDataSetDefAttributesEditorImpl implements IsWidget, RemoteDataSetDefAttributesEditor {\n+\n+    public interface View extends UberView<RemoteDataSetDefAttributesEditorImpl> {\n+\n+        /**\n+         * <p>Specify the views to use for each sub-editor before calling <code>initWidget</code>.</p>\n+         */\n+        void initWidgets(DropDownEditor.View queryTarget,\n+                         DropDownEditor.View serverTemplateId,\n+                         ValueBoxEditor.View dbSourceName,\n+                         ValueBoxEditor.View dbSQL);\n+\n+    }\n+\n+    DropDownEditor queryTarget;\n+    DropDownEditor serverTemplateId;\n+    ValueBoxEditor<String> dataSource;\n+\n+    ValueBoxEditor<String> dbSQL;\n+    public View view;\n+\n+    private Caller<KieServerConnectionInfoProvider> kieServerConnectionInfoProvider;\n+\n+    @Inject\n+    public RemoteDataSetDefAttributesEditorImpl(final DropDownEditor queryTarget,\n+                                                final DropDownEditor serverTemplateId,\n+                                                final ValueBoxEditor<String> dataSource,\n+                                                final ValueBoxEditor<String> dbSQL,\n+                                                final View view,\n+                                                final Caller<KieServerConnectionInfoProvider> specManagementService) {\n+        this.queryTarget = queryTarget;\n+        this.serverTemplateId = serverTemplateId;\n+        this.dataSource = dataSource;\n+        this.dbSQL = dbSQL;\n+        this.view = view;\n+\n+        this.kieServerConnectionInfoProvider = specManagementService;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+        view.initWidgets(queryTarget.view, serverTemplateId.view, dataSource.view, dbSQL.view);\n+\n+        queryTarget.setSelectHint(KieServerClientConstants.INSTANCE.remote_query_target_hint());\n+        List<DropDownEditor.Entry> entries = Stream.of(\"CUSTOM\",\n+                                                       \"PROCESS\",\n+                                                       \"TASK\",\n+                                                       \"BA_TASK\",\n+                                                       \"PO_TASK\",\n+                                                       \"JOBS\",\n+                                                       \"FILTERED_PROCESS\",\n+                                                       \"FILTERED_BA_TASK\",\n+                                                       \"FILTERED_PO_TASK\")\n+                                                   .map(s -> queryTarget.newEntry(s, s)).collect(Collectors.toList());\n+        queryTarget.setEntries(entries);\n+\n+        queryTarget.addHelpContent(KieServerClientConstants.INSTANCE.remote_query_target(),\n+                                   KieServerClientConstants.INSTANCE.remote_query_target_description(),\n+                                   Placement.RIGHT); //bottom placement would interfere with the dropdown\n+\n+        serverTemplateId.setSelectHint(KieServerClientConstants.INSTANCE.remote_server_template_hint());\n+\n+        kieServerConnectionInfoProvider.call((List<String> serverTemplates) -> onServerTemplateLoad(serverTemplates)).serverTemplates();\n+\n+        serverTemplateId.addHelpContent(KieServerClientConstants.INSTANCE.remote_server_template(),\n+                                        KieServerClientConstants.INSTANCE.remote_server_template_description(),\n+                                        Placement.RIGHT);\n+\n+        dataSource.addHelpContent(KieServerClientConstants.INSTANCE.remote_data_set_editor(),\n+                                  KieServerClientConstants.INSTANCE.remote_datasource_description(),\n+                                  Placement.BOTTOM);\n+\n+        dbSQL.addHelpContent(KieServerClientConstants.INSTANCE.remote_data_set_editor(),\n+                             KieServerClientConstants.INSTANCE.remote_datasource_description(),\n+                             Placement.BOTTOM);\n+    }\n+\n+    private void onServerTemplateLoad(List<String> templates) {\n+        List<DropDownEditor.Entry> entries = templates.stream().map(st -> serverTemplateId.newEntry(st, st)).collect(Collectors.toList());\n+        serverTemplateId.setEntries(entries);\n+    }\n+\n+    /*************************************************************\n+     ** GWT EDITOR CONTRACT METHODS **\n+     *************************************************************/\n+\n+    @Override\n+    public Widget asWidget() {\n+        return view.asWidget();\n+    }\n+\n+    @Override\n+    public DropDownEditor queryTarget() {\n+        return queryTarget;\n+    }\n+\n+    @Override\n+    public DropDownEditor serverTemplateId() {\n+        return serverTemplateId;\n+    }\n+\n+    @Override\n+    public ValueBoxEditor<String> dataSource() {\n+        return dataSource;\n+    }\n+\n+    @Override\n+    public ValueBoxEditor<String> dbSQL() {\n+        return dbSQL;\n+    }\n+\n+    @Override\n+    public void flush() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxOTYzMA==", "bodyText": "Is it intentionally empty?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429419630", "createdAt": "2020-05-22T19:25:32Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/impl/RemoteDataSetDefAttributesEditorImpl.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.dataset.editor.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.editor.client.EditorDelegate;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.client.kieserver.dataset.editor.RemoteDataSetDefAttributesEditor;\n+import org.dashbuilder.client.kieserver.resources.i18n.KieServerClientConstants;\n+import org.dashbuilder.common.client.editor.ValueBoxEditor;\n+import org.dashbuilder.common.client.editor.list.DropDownEditor;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.gwtbootstrap3.client.ui.constants.Placement;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberView;\n+\n+/**\n+ * <p>KIE Server/Remote Data Set specific attributes editor presenter.</p>\n+ */\n+@Dependent\n+public class RemoteDataSetDefAttributesEditorImpl implements IsWidget, RemoteDataSetDefAttributesEditor {\n+\n+    public interface View extends UberView<RemoteDataSetDefAttributesEditorImpl> {\n+\n+        /**\n+         * <p>Specify the views to use for each sub-editor before calling <code>initWidget</code>.</p>\n+         */\n+        void initWidgets(DropDownEditor.View queryTarget,\n+                         DropDownEditor.View serverTemplateId,\n+                         ValueBoxEditor.View dbSourceName,\n+                         ValueBoxEditor.View dbSQL);\n+\n+    }\n+\n+    DropDownEditor queryTarget;\n+    DropDownEditor serverTemplateId;\n+    ValueBoxEditor<String> dataSource;\n+\n+    ValueBoxEditor<String> dbSQL;\n+    public View view;\n+\n+    private Caller<KieServerConnectionInfoProvider> kieServerConnectionInfoProvider;\n+\n+    @Inject\n+    public RemoteDataSetDefAttributesEditorImpl(final DropDownEditor queryTarget,\n+                                                final DropDownEditor serverTemplateId,\n+                                                final ValueBoxEditor<String> dataSource,\n+                                                final ValueBoxEditor<String> dbSQL,\n+                                                final View view,\n+                                                final Caller<KieServerConnectionInfoProvider> specManagementService) {\n+        this.queryTarget = queryTarget;\n+        this.serverTemplateId = serverTemplateId;\n+        this.dataSource = dataSource;\n+        this.dbSQL = dbSQL;\n+        this.view = view;\n+\n+        this.kieServerConnectionInfoProvider = specManagementService;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+        view.initWidgets(queryTarget.view, serverTemplateId.view, dataSource.view, dbSQL.view);\n+\n+        queryTarget.setSelectHint(KieServerClientConstants.INSTANCE.remote_query_target_hint());\n+        List<DropDownEditor.Entry> entries = Stream.of(\"CUSTOM\",\n+                                                       \"PROCESS\",\n+                                                       \"TASK\",\n+                                                       \"BA_TASK\",\n+                                                       \"PO_TASK\",\n+                                                       \"JOBS\",\n+                                                       \"FILTERED_PROCESS\",\n+                                                       \"FILTERED_BA_TASK\",\n+                                                       \"FILTERED_PO_TASK\")\n+                                                   .map(s -> queryTarget.newEntry(s, s)).collect(Collectors.toList());\n+        queryTarget.setEntries(entries);\n+\n+        queryTarget.addHelpContent(KieServerClientConstants.INSTANCE.remote_query_target(),\n+                                   KieServerClientConstants.INSTANCE.remote_query_target_description(),\n+                                   Placement.RIGHT); //bottom placement would interfere with the dropdown\n+\n+        serverTemplateId.setSelectHint(KieServerClientConstants.INSTANCE.remote_server_template_hint());\n+\n+        kieServerConnectionInfoProvider.call((List<String> serverTemplates) -> onServerTemplateLoad(serverTemplates)).serverTemplates();\n+\n+        serverTemplateId.addHelpContent(KieServerClientConstants.INSTANCE.remote_server_template(),\n+                                        KieServerClientConstants.INSTANCE.remote_server_template_description(),\n+                                        Placement.RIGHT);\n+\n+        dataSource.addHelpContent(KieServerClientConstants.INSTANCE.remote_data_set_editor(),\n+                                  KieServerClientConstants.INSTANCE.remote_datasource_description(),\n+                                  Placement.BOTTOM);\n+\n+        dbSQL.addHelpContent(KieServerClientConstants.INSTANCE.remote_data_set_editor(),\n+                             KieServerClientConstants.INSTANCE.remote_datasource_description(),\n+                             Placement.BOTTOM);\n+    }\n+\n+    private void onServerTemplateLoad(List<String> templates) {\n+        List<DropDownEditor.Entry> entries = templates.stream().map(st -> serverTemplateId.newEntry(st, st)).collect(Collectors.toList());\n+        serverTemplateId.setEntries(entries);\n+    }\n+\n+    /*************************************************************\n+     ** GWT EDITOR CONTRACT METHODS **\n+     *************************************************************/\n+\n+    @Override\n+    public Widget asWidget() {\n+        return view.asWidget();\n+    }\n+\n+    @Override\n+    public DropDownEditor queryTarget() {\n+        return queryTarget;\n+    }\n+\n+    @Override\n+    public DropDownEditor serverTemplateId() {\n+        return serverTemplateId;\n+    }\n+\n+    @Override\n+    public ValueBoxEditor<String> dataSource() {\n+        return dataSource;\n+    }\n+\n+    @Override\n+    public ValueBoxEditor<String> dbSQL() {\n+        return dbSQL;\n+    }\n+\n+    @Override\n+    public void flush() {\n+\n+    }\n+\n+    @Override\n+    public void onPropertyChange(final String... paths) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyMDU2NA==", "bodyText": "Don't these strings require i18n?", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429420564", "createdAt": "2020-05-22T19:28:10Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-client/dashbuilder-kie-server-client/src/main/java/org/dashbuilder/client/kieserver/dataset/editor/impl/RemoteDataSetDefAttributesEditorImpl.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.kieserver.dataset.editor.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.editor.client.EditorDelegate;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import com.google.gwt.user.client.ui.Widget;\n+import org.dashbuilder.client.kieserver.dataset.editor.RemoteDataSetDefAttributesEditor;\n+import org.dashbuilder.client.kieserver.resources.i18n.KieServerClientConstants;\n+import org.dashbuilder.common.client.editor.ValueBoxEditor;\n+import org.dashbuilder.common.client.editor.list.DropDownEditor;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.gwtbootstrap3.client.ui.constants.Placement;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.client.mvp.UberView;\n+\n+/**\n+ * <p>KIE Server/Remote Data Set specific attributes editor presenter.</p>\n+ */\n+@Dependent\n+public class RemoteDataSetDefAttributesEditorImpl implements IsWidget, RemoteDataSetDefAttributesEditor {\n+\n+    public interface View extends UberView<RemoteDataSetDefAttributesEditorImpl> {\n+\n+        /**\n+         * <p>Specify the views to use for each sub-editor before calling <code>initWidget</code>.</p>\n+         */\n+        void initWidgets(DropDownEditor.View queryTarget,\n+                         DropDownEditor.View serverTemplateId,\n+                         ValueBoxEditor.View dbSourceName,\n+                         ValueBoxEditor.View dbSQL);\n+\n+    }\n+\n+    DropDownEditor queryTarget;\n+    DropDownEditor serverTemplateId;\n+    ValueBoxEditor<String> dataSource;\n+\n+    ValueBoxEditor<String> dbSQL;\n+    public View view;\n+\n+    private Caller<KieServerConnectionInfoProvider> kieServerConnectionInfoProvider;\n+\n+    @Inject\n+    public RemoteDataSetDefAttributesEditorImpl(final DropDownEditor queryTarget,\n+                                                final DropDownEditor serverTemplateId,\n+                                                final ValueBoxEditor<String> dataSource,\n+                                                final ValueBoxEditor<String> dbSQL,\n+                                                final View view,\n+                                                final Caller<KieServerConnectionInfoProvider> specManagementService) {\n+        this.queryTarget = queryTarget;\n+        this.serverTemplateId = serverTemplateId;\n+        this.dataSource = dataSource;\n+        this.dbSQL = dbSQL;\n+        this.view = view;\n+\n+        this.kieServerConnectionInfoProvider = specManagementService;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+        view.initWidgets(queryTarget.view, serverTemplateId.view, dataSource.view, dbSQL.view);\n+\n+        queryTarget.setSelectHint(KieServerClientConstants.INSTANCE.remote_query_target_hint());\n+        List<DropDownEditor.Entry> entries = Stream.of(\"CUSTOM\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyMzgxNA==", "bodyText": "Can we split all long methods into smaller ones? It seems that they have many responsibilities that could be broken down into more specialized methods. Plus, it'd be easier for other developers to work on this class in the future.", "url": "https://github.com/kiegroup/appformer/pull/970#discussion_r429423814", "createdAt": "2020-05-22T19:37:16Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-backend/dashbuilder-kie-server-backend/src/main/java/org/dashbuilder/kieserver/backend/RuntimeKieServerDataSetProvider.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.kieserver.backend;\n+\n+import java.text.NumberFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map.Entry;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataprovider.DataSetProvider;\n+import org.dashbuilder.dataprovider.DataSetProviderType;\n+import org.dashbuilder.dataset.ColumnType;\n+import org.dashbuilder.dataset.DataColumn;\n+import org.dashbuilder.dataset.DataSet;\n+import org.dashbuilder.dataset.DataSetFactory;\n+import org.dashbuilder.dataset.DataSetLookup;\n+import org.dashbuilder.dataset.DataSetMetadata;\n+import org.dashbuilder.dataset.def.DataColumnDef;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.filter.ColumnFilter;\n+import org.dashbuilder.dataset.filter.CoreFunctionFilter;\n+import org.dashbuilder.dataset.filter.DataSetFilter;\n+import org.dashbuilder.dataset.filter.FilterFactory;\n+import org.dashbuilder.dataset.filter.LogicalExprFilter;\n+import org.dashbuilder.dataset.group.ColumnGroup;\n+import org.dashbuilder.dataset.group.DataSetGroup;\n+import org.dashbuilder.dataset.group.GroupFunction;\n+import org.dashbuilder.dataset.group.Interval;\n+import org.dashbuilder.dataset.impl.DataColumnImpl;\n+import org.dashbuilder.dataset.impl.DataSetMetadataImpl;\n+import org.dashbuilder.dataset.sort.ColumnSort;\n+import org.dashbuilder.dataset.sort.DataSetSort;\n+import org.dashbuilder.dataset.sort.SortOrder;\n+import org.dashbuilder.kieserver.ConsoleDataSetLookup;\n+import org.dashbuilder.kieserver.KieServerConnectionInfo;\n+import org.dashbuilder.kieserver.KieServerConnectionInfoProvider;\n+import org.dashbuilder.kieserver.RemoteDataSetDef;\n+import org.dashbuilder.kieserver.RuntimeKieServerDataSetProviderType;\n+import org.dashbuilder.kieserver.backend.rest.KieServerQueryClient;\n+import org.dashbuilder.kieserver.backend.rest.QueryDefinition;\n+import org.dashbuilder.kieserver.backend.rest.QueryFilterSpec;\n+import org.dashbuilder.kieserver.backend.rest.QueryParam;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class RuntimeKieServerDataSetProvider implements DataSetProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/b27a18ec1a7ade90895fcb7e3f3b30c18fad7b9a", "committedDate": "2020-05-20T14:09:30Z", "message": "AF-2474: Add Remote dataset type (kie server) for Dashbuilder Webapp and Standalone"}, "afterCommit": {"oid": "e9bd9f3a4c892b6a398fdc36e6d7db425188eff5", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e9bd9f3a4c892b6a398fdc36e6d7db425188eff5", "committedDate": "2020-05-26T17:19:43Z", "message": "Adding replace_query option"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTk0MTg4", "url": "https://github.com/kiegroup/appformer/pull/970#pullrequestreview-421194188", "createdAt": "2020-05-29T18:33:55Z", "commit": {"oid": "857b51e8173e72acce8fd8ad335126f42e5e335b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "714e02d24bdbbf8d410f036e7462b82a7a8df820", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/714e02d24bdbbf8d410f036e7462b82a7a8df820", "committedDate": "2020-06-02T21:02:31Z", "message": "AF-2474: Add Remote dataset type (kie server) for Dashbuilder Webapp and Standalone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba92b7672893d016458cefe947cb3efc1357ea9", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/eba92b7672893d016458cefe947cb3efc1357ea9", "committedDate": "2020-06-02T21:02:31Z", "message": "updating version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6ce818c72cea81e7143db168375c7c07d2c639", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/bf6ce818c72cea81e7143db168375c7c07d2c639", "committedDate": "2020-06-02T21:02:31Z", "message": "Adding replace_query option"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc965c4c69bb589849c27245cd27b3bb1145f0d", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/4bc965c4c69bb589849c27245cd27b3bb1145f0d", "committedDate": "2020-06-02T21:02:31Z", "message": "Improvements and more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "260c33d2e678c5eedfd622f295cc0b70e5762a03", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/260c33d2e678c5eedfd622f295cc0b70e5762a03", "committedDate": "2020-06-02T21:02:36Z", "message": "Adding Kie Server to runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "857b51e8173e72acce8fd8ad335126f42e5e335b", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/857b51e8173e72acce8fd8ad335126f42e5e335b", "committedDate": "2020-05-28T22:29:58Z", "message": "Improvements and more tests"}, "afterCommit": {"oid": "260c33d2e678c5eedfd622f295cc0b70e5762a03", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/260c33d2e678c5eedfd622f295cc0b70e5762a03", "committedDate": "2020-06-02T21:02:36Z", "message": "Adding Kie Server to runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTI5ODY2", "url": "https://github.com/kiegroup/appformer/pull/970#pullrequestreview-424529866", "createdAt": "2020-06-04T14:49:37Z", "commit": {"oid": "260c33d2e678c5eedfd622f295cc0b70e5762a03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODQ2NDY4", "url": "https://github.com/kiegroup/appformer/pull/970#pullrequestreview-424846468", "createdAt": "2020-06-04T21:24:38Z", "commit": {"oid": "260c33d2e678c5eedfd622f295cc0b70e5762a03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2114, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}