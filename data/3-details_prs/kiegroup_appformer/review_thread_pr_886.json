{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTY0MTYy", "number": 886, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMjo0OVrODc0VZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMjo0OVrODc0VZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTQ0MTY3OnYy", "diffSide": "RIGHT", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/resource/interop/Options.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMDowMjo0OVrOFlEMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDowNDoxMFrOFlny6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDI0Mg==", "bodyText": "hey @jesuino - not sure if makes sense here, but could the value for the type be something more spec-like? I understand calling the resource API, by using whatever options, will finally produce an HTTP request, so maybe can we document properly, in the JavaDocs, and also consider the value for the type, for example, as a valid MIME types?", "url": "https://github.com/kiegroup/appformer/pull/886#discussion_r374410242", "createdAt": "2020-02-04T00:02:49Z", "author": {"login": "romartin"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/resource/interop/Options.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.resource.interop;\n+\n+import jsinterop.annotations.JsOverlay;\n+import jsinterop.annotations.JsPackage;\n+import jsinterop.annotations.JsProperty;\n+import jsinterop.annotations.JsType;\n+\n+@JsType(isNative = true, namespace = JsPackage.GLOBAL, name = \"Object\")\n+public class Options {\n+\n+    /**\n+     * The a content type. When \"text\" the resource content is returned in text format. </br>\n+     * When \"binary\" then the resource content is returned in a base64 encoded format.\n+     * @param type\n+     */\n+    @JsProperty\n+    native void setType(String type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458abadba718e1258f7e77bbf69551db2955fb37"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxODIxNQ==", "bodyText": "Hello @romartin , thanks for the feedback.\nThe calls to the resourceContent API are not actually HTTP requests. They use the envelope API to exchange messages with the channel.\nA call to get a resource fire an async message to retrieve a certain resource content, captured by the envelope messaging API. Later the channel respond with the resource content, so the API finds the original callback to get the resource and call it with the resource content.\nIf you want a binary resource, for example, we will encode it using base64 because \"Base64 is particularly prevalent on the World Wide Web[1] where its uses include the ability to embed image files or other binary assets inside textual assets such as HTML and CSS files.\"[1]\nPlease let me know your thoughts.\nThanks!\n[1] https://en.wikipedia.org/wiki/Base64", "url": "https://github.com/kiegroup/appformer/pull/886#discussion_r374818215", "createdAt": "2020-02-04T17:35:06Z", "author": {"login": "jesuino"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/resource/interop/Options.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.resource.interop;\n+\n+import jsinterop.annotations.JsOverlay;\n+import jsinterop.annotations.JsPackage;\n+import jsinterop.annotations.JsProperty;\n+import jsinterop.annotations.JsType;\n+\n+@JsType(isNative = true, namespace = JsPackage.GLOBAL, name = \"Object\")\n+public class Options {\n+\n+    /**\n+     * The a content type. When \"text\" the resource content is returned in text format. </br>\n+     * When \"binary\" then the resource content is returned in a base64 encoded format.\n+     * @param type\n+     */\n+    @JsProperty\n+    native void setType(String type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDI0Mg=="}, "originalCommit": {"oid": "458abadba718e1258f7e77bbf69551db2955fb37"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5MzY0Mg==", "bodyText": "ok @jesuino , it makes sense, let's keep it as it is, thx for clarification!", "url": "https://github.com/kiegroup/appformer/pull/886#discussion_r374993642", "createdAt": "2020-02-05T00:04:10Z", "author": {"login": "romartin"}, "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/resource/interop/Options.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.resource.interop;\n+\n+import jsinterop.annotations.JsOverlay;\n+import jsinterop.annotations.JsPackage;\n+import jsinterop.annotations.JsProperty;\n+import jsinterop.annotations.JsType;\n+\n+@JsType(isNative = true, namespace = JsPackage.GLOBAL, name = \"Object\")\n+public class Options {\n+\n+    /**\n+     * The a content type. When \"text\" the resource content is returned in text format. </br>\n+     * When \"binary\" then the resource content is returned in a base64 encoded format.\n+     * @param type\n+     */\n+    @JsProperty\n+    native void setType(String type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDI0Mg=="}, "originalCommit": {"oid": "458abadba718e1258f7e77bbf69551db2955fb37"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2863, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}