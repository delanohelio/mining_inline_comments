{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MzE5ODk1", "number": 879, "title": "DROOLS-4585: Focus doesn't moves after the selected header cell", "bodyText": "@jomarko @dupliaka @danielezonca @manstis @danielzhe\nIt seems the management of this case was not present. I just added this case i.e. the case where a HEADER cell is selected. To manage case where header cells are spanned over multiple column, It selects the last selected cell if pressed key is RIGHT, and the first one otherwise.\nhttps://issues.redhat.com/browse/DROOLS-4585", "createdAt": "2020-01-23T11:43:56Z", "url": "https://github.com/kiegroup/appformer/pull/879", "merged": true, "mergeCommit": {"oid": "b595b3070ee61cf4a010be843c51fd4ecf775f0d"}, "closed": true, "closedAt": "2020-02-07T13:28:55Z", "author": {"login": "yesamer"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9Is_5AH2gAyMzY2MzE5ODk1OmJjZDAyZmM3YzQxZDBmY2ZhYzY2NWJjNzQzMGRiY2YxOTgwYzQxNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB8OA2gFqTM1NTAzOTkzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcd02fc7c41d0fcfac665bc7430dbcf1980c416a", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/bcd02fc7c41d0fcfac665bc7430dbcf1980c416a", "committedDate": "2020-01-23T11:32:42Z", "message": "DROOLS-4585: Managing scroll for Header Cells."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/7e3fd3f31256dbc7226e5822b08f410b82784332", "committedDate": "2020-01-23T11:51:21Z", "message": "DROOLS-4585: Managing scroll for Header Cells."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzEyOTMw", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-347312930", "createdAt": "2020-01-23T13:57:02Z", "commit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo1NzowMlrOFg--dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDowMjo1NFrOFg_LyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDU0OA==", "bodyText": "This breaks DMN when a header has multiple rows (I suspect it'll break scesim too as that has columns with multi-row headers). This line uses the uiRowIndex to get the height of a row. For example if the grid has zero or one row and the header has two rows then clicking in the second header row and attempting to use keyboard operations, uiRowIndex equals 1 whereas the rows list is either completely empty or only has index 0. The getCellScrollDeltaY(..) method now also needs to perform different operations depending on whether the rows have the \"selected cell\" or whether the header has the \"selected cell\".", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r370130548", "createdAt": "2020-01-23T13:57:02Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -133,9 +145,9 @@ private double getCellScrollDeltaX(final GridWidget gridWidget) {\n         return dx;\n     }\n \n-    private double getCellScrollDeltaY(final GridWidget gridWidget) {\n+    private double getCellScrollDeltaY(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();\n-        final GridData.SelectedCell origin = gridModel.getSelectedCellsOrigin();\n+        final GridData.SelectedCell origin = getSelectedCellOrigin(gridModel, isHeaderCellSelected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDk1MA==", "bodyText": "You can see an index out of bounds exception in the browser's console and the selection does not move (in the scenario described above).", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r370130950", "createdAt": "2020-01-23T13:57:46Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -133,9 +145,9 @@ private double getCellScrollDeltaX(final GridWidget gridWidget) {\n         return dx;\n     }\n \n-    private double getCellScrollDeltaY(final GridWidget gridWidget) {\n+    private double getCellScrollDeltaY(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();\n-        final GridData.SelectedCell origin = gridModel.getSelectedCellsOrigin();\n+        final GridData.SelectedCell origin = getSelectedCellOrigin(gridModel, isHeaderCellSelected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDU0OA=="}, "originalCommit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMTM3Mw==", "bodyText": "Can you please make final for consistency.", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r370131373", "createdAt": "2020-01-23T13:58:28Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -86,13 +93,18 @@ private boolean isSelectionOriginSet(final GridWidget selectedGridWidget) {\n         return origin != null;\n     }\n \n+    private boolean isHeaderSelectionOriginSet(final GridWidget selectedGridWidget) {\n+        final GridData gridModel = selectedGridWidget.getModel();\n+        return !gridModel.getSelectedHeaderCells().isEmpty();\n+    }\n+\n     private boolean isGridWidgetRendered(final GridWidget gridWidget) {\n         final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();\n         final BaseGridRendererHelper.RenderingInformation renderingInformation = rendererHelper.getRenderingInformation();\n         return renderingInformation != null;\n     }\n \n-    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget) {\n+    private boolean isGridColumnCandidateForScroll(final GridWidget gridWidget, boolean isHeaderCellSelected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMTY5OQ==", "bodyText": "Can you please make the parameters final for consistency please.", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r370131699", "createdAt": "2020-01-23T13:58:56Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -153,6 +165,26 @@ private double getCellScrollDeltaY(final GridWidget gridWidget) {\n         return dy;\n     }\n \n+    /**\n+     * It retrieves the selected cell in <code>GridData</code> model, which could be a <b>header</b> cell or a\n+     * simple one.\n+     * @param gridModel\n+     * @param isHeaderCellSelected\n+     * @return\n+     */\n+    private GridData.SelectedCell getSelectedCellOrigin(GridData gridModel, boolean isHeaderCellSelected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzk2MQ==", "bodyText": "Yep.. I can confirm scesim is broken too.. select a 2nd or 3rd row header (in any new scesim asset) and try to navigate left or right...", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r370133961", "createdAt": "2020-01-23T14:02:54Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -133,9 +145,9 @@ private double getCellScrollDeltaX(final GridWidget gridWidget) {\n         return dx;\n     }\n \n-    private double getCellScrollDeltaY(final GridWidget gridWidget) {\n+    private double getCellScrollDeltaY(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();\n-        final GridData.SelectedCell origin = gridModel.getSelectedCellsOrigin();\n+        final GridData.SelectedCell origin = getSelectedCellOrigin(gridModel, isHeaderCellSelected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDU0OA=="}, "originalCommit": {"oid": "7e3fd3f31256dbc7226e5822b08f410b82784332"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d5e2736a2c6f43df5e29ce854ac107754449d6", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/95d5e2736a2c6f43df5e29ce854ac107754449d6", "committedDate": "2020-01-23T16:38:47Z", "message": "DROOLS-4585: Requested changes during CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODk4MzM3", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-347898337", "createdAt": "2020-01-24T11:35:32Z", "commit": {"oid": "95d5e2736a2c6f43df5e29ce854ac107754449d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8295f0f493028463c8e3cc3f566f42894b2ef3e7", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/8295f0f493028463c8e3cc3f566f42894b2ef3e7", "committedDate": "2020-01-24T13:43:22Z", "message": "DROOLS-4585: Requested changes during CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eabfe7e204dfe5408709ba9eeb733430fe663d9c", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/eabfe7e204dfe5408709ba9eeb733430fe663d9c", "committedDate": "2020-01-27T08:15:09Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4585"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjk4NTA2", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-349298506", "createdAt": "2020-01-28T11:19:16Z", "commit": {"oid": "eabfe7e204dfe5408709ba9eeb733430fe663d9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxOToxNlrOFihb4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxOToxNlrOFihb4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MzcxNQ==", "bodyText": "I do not understand this, will user be able to select just first or last header cell? @yesamer could you please clarify?", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r371743715", "createdAt": "2020-01-28T11:19:16Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperation.java", "diffHunk": "@@ -133,26 +145,49 @@ private double getCellScrollDeltaX(final GridWidget gridWidget) {\n         return dx;\n     }\n \n-    private double getCellScrollDeltaY(final GridWidget gridWidget) {\n+    private double getCellScrollDeltaY(final GridWidget gridWidget, final boolean isHeaderCellSelected) {\n         final GridData gridModel = gridWidget.getModel();\n-        final GridData.SelectedCell origin = gridModel.getSelectedCellsOrigin();\n+        final GridData.SelectedCell origin = getSelectedCellOrigin(gridModel, isHeaderCellSelected);\n         final int uiRowIndex = origin.getRowIndex();\n \n         double dy = 0;\n         final Bounds bounds = gridLayer.getVisibleBounds();\n-        final double rowHeight = gridModel.getRow(uiRowIndex).getHeight();\n+        final int headerRowCount = gridModel.getHeaderRowCount();\n         final double headerHeight = gridWidget.getRenderer().getHeaderHeight();\n-        final double gridCellY = gridWidget.getY() + headerHeight + gridWidget.getRendererHelper().getRowOffset(uiRowIndex);\n+        final double rowHeight = isHeaderCellSelected ? gridWidget.getRenderer().getHeaderRowHeight() : gridModel.getRow(uiRowIndex).getHeight();\n+        final double headerYOffset = isHeaderCellSelected ? headerHeight - headerRowCount * rowHeight : headerHeight;\n+        final double rowOffset = isHeaderCellSelected ? rowHeight * uiRowIndex : gridWidget.getRendererHelper().getRowOffset(uiRowIndex);\n+        final double gridCellY = gridWidget.getY() + headerYOffset + rowOffset;\n \n         if (gridCellY + rowHeight >= bounds.getY() + bounds.getHeight()) {\n             dy = bounds.getY() + bounds.getHeight() - gridCellY - rowHeight;\n-        } else if (gridCellY <= bounds.getY() + headerHeight) {\n-            dy = bounds.getY() + headerHeight - gridCellY;\n+        } else if (gridCellY <= bounds.getY() + headerYOffset) {\n+            dy = bounds.getY() + headerYOffset - gridCellY;\n         }\n \n         return dy;\n     }\n \n+    /**\n+     * It retrieves the selected cell in <code>GridData</code> model, which could be a <b>header</b> cell or a\n+     * simple one.\n+     * @param gridModel\n+     * @param isHeaderCellSelected\n+     * @return\n+     */\n+    private GridData.SelectedCell getSelectedCellOrigin(GridData gridModel, final boolean isHeaderCellSelected) {\n+        if (isHeaderCellSelected) {\n+            List<GridData.SelectedCell> selectedHeaderCells = gridModel.getSelectedHeaderCells();\n+            if (KEY_RIGHT == getKeyCode()) {\n+                return selectedHeaderCells.get(selectedHeaderCells.size() - 1);\n+            } else {\n+                return selectedHeaderCells.get(0);\n+            }\n+        } else {\n+            return gridModel.getSelectedCellsOrigin();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eabfe7e204dfe5408709ba9eeb733430fe663d9c"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ae4c50e4b5fb22a06ac56e67f4f44c4944b366", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/e7ae4c50e4b5fb22a06ac56e67f4f44c4944b366", "committedDate": "2020-01-30T08:13:39Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4585"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ac529b3f2d351906b1bf0c2f96c43cdf350290", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/f6ac529b3f2d351906b1bf0c2f96c43cdf350290", "committedDate": "2020-01-30T09:26:10Z", "message": "DROOLS-4585: Requested changes during CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f9802586d5774ca26c737ac00a989b0d8c99a0", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/03f9802586d5774ca26c737ac00a989b0d8c99a0", "committedDate": "2020-01-30T11:38:02Z", "message": "DROOLS-4585: Requested changes during CR + Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzg4NzA2", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-350788706", "createdAt": "2020-01-30T12:33:42Z", "commit": {"oid": "03f9802586d5774ca26c737ac00a989b0d8c99a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjozMzo0MlrOFjpYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjozMzo0MlrOFjpYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyMjQ2NQ==", "bodyText": "Is this override really needed?", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r372922465", "createdAt": "2020-01-30T12:33:42Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/test/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperationTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import com.ait.lienzo.test.LienzoMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridData;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseBounds;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.GridRenderer;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.impl.BaseGridRendererHelper;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.DefaultGridLayer;\n+\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_LEFT;\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_RIGHT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(LienzoMockitoTestRunner.class)\n+public class BaseKeyboardOperationTest {\n+\n+    private static final double BOUNDS_WIDTH = 1000.0;\n+    private static final double BOUNDS_HEIGHT = 1000.0;\n+\n+    @Mock\n+    private DefaultGridLayer layer;\n+\n+    @Mock\n+    private GridWidget gridWidget;\n+\n+    @Mock\n+    private GridData gridData;\n+\n+    @Mock\n+    private GridColumn gridColumn;\n+\n+    @Mock\n+    private GridRow gridRow;\n+\n+    @Mock\n+    private BaseGridRendererHelper baseGridRendererHelperMock;\n+\n+    @Mock\n+    private BaseGridRendererHelper.RenderingInformation baseGridRendererInformationMock;\n+\n+    @Mock\n+    private GridRenderer gridRenderer;\n+\n+    private BaseKeyboardOperation baseKeyboardOperationSpy;\n+    private int currentKeyCode = 0;\n+\n+    @Before\n+    public void setup() {\n+        when(gridWidget.getModel()).thenReturn(gridData);\n+        when(gridWidget.getRendererHelper()).thenReturn(baseGridRendererHelperMock);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(baseGridRendererInformationMock);\n+        when(gridData.getColumns()).thenReturn(Collections.singletonList(gridColumn));\n+        when(gridColumn.getIndex()).thenReturn(0);\n+        when(gridWidget.getRenderer()).thenReturn(gridRenderer);\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(0, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+\n+        baseKeyboardOperationSpy = spy(new BaseKeyboardOperation(layer) {\n+            @Override\n+            public int getKeyCode() {\n+                return currentKeyCode;\n+            }\n+\n+            @Override\n+            public TriStateBoolean isControlKeyDown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f9802586d5774ca26c737ac00a989b0d8c99a0"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eee3d5817f0eb2c960bbad482e21bf379d2016e", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/1eee3d5817f0eb2c960bbad482e21bf379d2016e", "committedDate": "2020-01-30T13:31:17Z", "message": "DROOLS-4585: Requested changes during CR + Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb65726897df7bec17f86de602ef30736e38189", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/7cb65726897df7bec17f86de602ef30736e38189", "committedDate": "2020-01-30T14:00:27Z", "message": "DROOLS-4585: Requested changes during CR + Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDkzNzc3", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-353093777", "createdAt": "2020-02-04T15:58:43Z", "commit": {"oid": "7cb65726897df7bec17f86de602ef30736e38189"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo1ODo0M1rOFlZkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTo1OTozNFrOFlZmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2MDU0NA==", "bodyText": "I think it'd be great to have an instance mock of Transform (instead of instantiate a new concrete instance)...\nthen....", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r374760544", "createdAt": "2020-02-04T15:58:43Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/test/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ait.lienzo.client.core.shape.Viewport;\n+import com.ait.lienzo.client.core.types.Transform;\n+import com.ait.lienzo.test.LienzoMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridData;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseBounds;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.GridRenderer;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.impl.BaseGridRendererHelper;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.DefaultGridLayer;\n+\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_LEFT;\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_RIGHT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(LienzoMockitoTestRunner.class)\n+public class BaseKeyboardOperationTest {\n+\n+    private static final double BOUNDS_WIDTH = 1000.0;\n+    private static final double BOUNDS_HEIGHT = 1000.0;\n+\n+    @Mock\n+    private DefaultGridLayer layer;\n+\n+    @Mock\n+    private GridWidget gridWidget;\n+\n+    @Mock\n+    private GridData gridData;\n+\n+    @Mock\n+    private GridColumn gridColumn;\n+\n+    @Mock\n+    private GridRow gridRow;\n+\n+    @Mock\n+    private BaseGridRendererHelper baseGridRendererHelperMock;\n+\n+    @Mock\n+    private BaseGridRendererHelper.RenderingInformation baseGridRendererInformationMock;\n+\n+    @Mock\n+    private GridRenderer gridRenderer;\n+\n+    @Mock\n+    private Viewport viewport;\n+\n+    private BaseKeyboardOperation baseKeyboardOperationSpy;\n+    private int currentKeyCode = 0;\n+\n+    @Before\n+    public void setup() {\n+        when(gridWidget.getModel()).thenReturn(gridData);\n+        when(gridWidget.getRendererHelper()).thenReturn(baseGridRendererHelperMock);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(baseGridRendererInformationMock);\n+        when(gridData.getColumns()).thenReturn(Collections.singletonList(gridColumn));\n+        when(gridColumn.getIndex()).thenReturn(0);\n+        when(gridWidget.getRenderer()).thenReturn(gridRenderer);\n+        when(layer.getViewport()).thenReturn(viewport);\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(0, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        when(viewport.getTransform()).thenReturn(new Transform());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cb65726897df7bec17f86de602ef30736e38189"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2MTA1NA==", "bodyText": "... you should be able to assert that the Transform offset X is correctly set here.", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r374761054", "createdAt": "2020-02-04T15:59:27Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/test/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ait.lienzo.client.core.shape.Viewport;\n+import com.ait.lienzo.client.core.types.Transform;\n+import com.ait.lienzo.test.LienzoMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridData;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseBounds;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.GridRenderer;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.impl.BaseGridRendererHelper;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.DefaultGridLayer;\n+\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_LEFT;\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_RIGHT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(LienzoMockitoTestRunner.class)\n+public class BaseKeyboardOperationTest {\n+\n+    private static final double BOUNDS_WIDTH = 1000.0;\n+    private static final double BOUNDS_HEIGHT = 1000.0;\n+\n+    @Mock\n+    private DefaultGridLayer layer;\n+\n+    @Mock\n+    private GridWidget gridWidget;\n+\n+    @Mock\n+    private GridData gridData;\n+\n+    @Mock\n+    private GridColumn gridColumn;\n+\n+    @Mock\n+    private GridRow gridRow;\n+\n+    @Mock\n+    private BaseGridRendererHelper baseGridRendererHelperMock;\n+\n+    @Mock\n+    private BaseGridRendererHelper.RenderingInformation baseGridRendererInformationMock;\n+\n+    @Mock\n+    private GridRenderer gridRenderer;\n+\n+    @Mock\n+    private Viewport viewport;\n+\n+    private BaseKeyboardOperation baseKeyboardOperationSpy;\n+    private int currentKeyCode = 0;\n+\n+    @Before\n+    public void setup() {\n+        when(gridWidget.getModel()).thenReturn(gridData);\n+        when(gridWidget.getRendererHelper()).thenReturn(baseGridRendererHelperMock);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(baseGridRendererInformationMock);\n+        when(gridData.getColumns()).thenReturn(Collections.singletonList(gridColumn));\n+        when(gridColumn.getIndex()).thenReturn(0);\n+        when(gridWidget.getRenderer()).thenReturn(gridRenderer);\n+        when(layer.getViewport()).thenReturn(viewport);\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(0, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        when(viewport.getTransform()).thenReturn(new Transform());\n+\n+        baseKeyboardOperationSpy = spy(new BaseKeyboardOperation(layer) {\n+            @Override\n+            public int getKeyCode() {\n+                return currentKeyCode;\n+            }\n+\n+            @Override\n+            public boolean perform(GridWidget gridWidget, boolean isShiftKeyDown, boolean isControlKeyDown) {\n+                return false;\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_NoSelection() {\n+        assertFalse(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_NoRenderedInformation() {\n+        List<GridData.SelectedCell> selectedCells = Arrays.asList(new GridData.SelectedCell(0,0));\n+        when(gridData.getSelectedHeaderCells()).thenReturn(selectedCells);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(null);\n+        assertFalse(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_HeaderSelected() {\n+        when(gridData.getSelectedHeaderCells()).thenReturn(Collections.singletonList(new GridData.SelectedCell(0,0)));\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, never()).getViewport();\n+        verify(viewport, never()).getTransform();\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_CellSelected() {\n+        when(gridData.getSelectedCellsOrigin()).thenReturn(new GridData.SelectedCell(0,0));\n+        when(gridData.getRow(0)).thenReturn(gridRow);\n+        when(gridRow.getHeight()).thenReturn(30d);\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, never()).getViewport();\n+        verify(viewport, never()).getTransform();\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_HeaderSelected_WithDeltaXScroll() {\n+        when(gridData.getSelectedHeaderCells()).thenReturn(Collections.singletonList(new GridData.SelectedCell(0,0)));\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(500, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, times(1)).getViewport();\n+        verify(viewport, times(1)).getTransform();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cb65726897df7bec17f86de602ef30736e38189"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2MTE0NA==", "bodyText": "... you should be able to assert that the Transform offset X is correctly set here.", "url": "https://github.com/kiegroup/appformer/pull/879#discussion_r374761144", "createdAt": "2020-02-04T15:59:34Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/test/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/BaseKeyboardOperationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ait.lienzo.client.core.shape.Viewport;\n+import com.ait.lienzo.client.core.types.Transform;\n+import com.ait.lienzo.test.LienzoMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.uberfire.ext.wires.core.grids.client.model.GridColumn;\n+import org.uberfire.ext.wires.core.grids.client.model.GridData;\n+import org.uberfire.ext.wires.core.grids.client.model.GridRow;\n+import org.uberfire.ext.wires.core.grids.client.model.impl.BaseBounds;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.GridRenderer;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.renderers.grids.impl.BaseGridRendererHelper;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.DefaultGridLayer;\n+\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_LEFT;\n+import static com.google.gwt.event.dom.client.KeyCodes.KEY_RIGHT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(LienzoMockitoTestRunner.class)\n+public class BaseKeyboardOperationTest {\n+\n+    private static final double BOUNDS_WIDTH = 1000.0;\n+    private static final double BOUNDS_HEIGHT = 1000.0;\n+\n+    @Mock\n+    private DefaultGridLayer layer;\n+\n+    @Mock\n+    private GridWidget gridWidget;\n+\n+    @Mock\n+    private GridData gridData;\n+\n+    @Mock\n+    private GridColumn gridColumn;\n+\n+    @Mock\n+    private GridRow gridRow;\n+\n+    @Mock\n+    private BaseGridRendererHelper baseGridRendererHelperMock;\n+\n+    @Mock\n+    private BaseGridRendererHelper.RenderingInformation baseGridRendererInformationMock;\n+\n+    @Mock\n+    private GridRenderer gridRenderer;\n+\n+    @Mock\n+    private Viewport viewport;\n+\n+    private BaseKeyboardOperation baseKeyboardOperationSpy;\n+    private int currentKeyCode = 0;\n+\n+    @Before\n+    public void setup() {\n+        when(gridWidget.getModel()).thenReturn(gridData);\n+        when(gridWidget.getRendererHelper()).thenReturn(baseGridRendererHelperMock);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(baseGridRendererInformationMock);\n+        when(gridData.getColumns()).thenReturn(Collections.singletonList(gridColumn));\n+        when(gridColumn.getIndex()).thenReturn(0);\n+        when(gridWidget.getRenderer()).thenReturn(gridRenderer);\n+        when(layer.getViewport()).thenReturn(viewport);\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(0, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        when(viewport.getTransform()).thenReturn(new Transform());\n+\n+        baseKeyboardOperationSpy = spy(new BaseKeyboardOperation(layer) {\n+            @Override\n+            public int getKeyCode() {\n+                return currentKeyCode;\n+            }\n+\n+            @Override\n+            public boolean perform(GridWidget gridWidget, boolean isShiftKeyDown, boolean isControlKeyDown) {\n+                return false;\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_NoSelection() {\n+        assertFalse(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_NoRenderedInformation() {\n+        List<GridData.SelectedCell> selectedCells = Arrays.asList(new GridData.SelectedCell(0,0));\n+        when(gridData.getSelectedHeaderCells()).thenReturn(selectedCells);\n+        when(baseGridRendererHelperMock.getRenderingInformation()).thenReturn(null);\n+        assertFalse(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_HeaderSelected() {\n+        when(gridData.getSelectedHeaderCells()).thenReturn(Collections.singletonList(new GridData.SelectedCell(0,0)));\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, never()).getViewport();\n+        verify(viewport, never()).getTransform();\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_CellSelected() {\n+        when(gridData.getSelectedCellsOrigin()).thenReturn(new GridData.SelectedCell(0,0));\n+        when(gridData.getRow(0)).thenReturn(gridRow);\n+        when(gridRow.getHeight()).thenReturn(30d);\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, never()).getViewport();\n+        verify(viewport, never()).getTransform();\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_HeaderSelected_WithDeltaXScroll() {\n+        when(gridData.getSelectedHeaderCells()).thenReturn(Collections.singletonList(new GridData.SelectedCell(0,0)));\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(500, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, times(1)).getViewport();\n+        verify(viewport, times(1)).getTransform();\n+    }\n+\n+    @Test\n+    public void scrollSelectedCellIntoView_CellSelected_WithDeltaXScroll() {\n+        when(gridData.getSelectedCellsOrigin()).thenReturn(new GridData.SelectedCell(0,0));\n+        when(gridData.getRow(0)).thenReturn(gridRow);\n+        when(gridRow.getHeight()).thenReturn(30d);\n+        when(layer.getVisibleBounds()).thenReturn(new BaseBounds(500, 0, BOUNDS_WIDTH, BOUNDS_HEIGHT));\n+        assertTrue(baseKeyboardOperationSpy.scrollSelectedCellIntoView(gridWidget));\n+        verify(layer, times(1)).getViewport();\n+        verify(viewport, times(1)).getTransform();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cb65726897df7bec17f86de602ef30736e38189"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b957176eaa6709dd252722e2b4d500fc88cc289", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/9b957176eaa6709dd252722e2b4d500fc88cc289", "committedDate": "2020-02-05T09:16:07Z", "message": "DROOLS-4585: Requested changes during CR + Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTg2ODU2", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-353586856", "createdAt": "2020-02-05T09:53:39Z", "commit": {"oid": "9b957176eaa6709dd252722e2b4d500fc88cc289"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "537c5caab9f0a83252765e1e409cb3b4f6bb3dc8", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/appformer/commit/537c5caab9f0a83252765e1e409cb3b4f6bb3dc8", "committedDate": "2020-02-05T15:04:25Z", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4585"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDM5OTMw", "url": "https://github.com/kiegroup/appformer/pull/879#pullrequestreview-355039930", "createdAt": "2020-02-07T09:49:37Z", "commit": {"oid": "537c5caab9f0a83252765e1e409cb3b4f6bb3dc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2169, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}