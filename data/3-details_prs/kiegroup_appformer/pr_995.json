{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjc2MzYz", "number": 995, "title": "AF-2549, AF-2550, AF-2551: Dashbuilder Runtime Multi Mode Support", "bodyText": "This is a PR for three tasks:\nAF-2549: Support for multi dashboards mode\nThis tasks itself consisted of enabling the MULTI mode. In this case to enable multi mode you must set the system property dashbuilder.runtime.multi as true. When multi mode is enabled:\n\nEvery time you access root directory you won't see a dashboard, instead, Dashbuilder Runtime will prompt you to upload a new dashboard and list available dashboards (if any - AF-2551). If you decide to upload then you will be able to see its ID in URL (import={id})\nYou can place how many import models you want in the dir configured with dashbuilder.import.base.dir (by default /tmp/dashbuilder). If a file is in this dir you can open it in runtime using: {host}?import={fileName with extension} - so if the file is abc.zip you use import=abc;\n\nAlso with this tasks we have the following changes:\n\nReview the screen to upload dashboards. Now the upload button is a separated widget, so we can re-use it later;\nAvoid duplicated models: When uploading a model which content is already in the mentioned directory then Runtime will check all files if there's one with the same content. And if there's it then the ID of the existing file will be reused. It makes uploads idempotent, so users won't explode the FS by uploading the same model again and again.\n\nAF-2550: Avoid dataset collision when using multi mode\nIn this case we have a system property dashbuilder.dataset.partition when it is true (-Ddashbuilder.dataset.partition=true) then the datasets UUID will be partitioned by runtime model id, meaning that it won't collide with others. By default this property is true. The bootstrap switch was added  because it degrades performance when big imports are being used.\nThis task does not affect the UI or the usability, it is internal.\nAF-2551:\nIn this issue we modified the UI to support multiple dashboards. Main changes are:\n\nWithout multi support when you login you will have to upload a new dashboard and the runtime will have always the same dashboard until is restarted;\nIn multi mode (-Ddashbuilder.runtime.multi=true) we have a different UI. If you uploaded dashboards before, or if you have any dashboard in the model dir (configured by -Dorg.dashbuilder.import.base.dir={DIR} or default /tmp/dashbuilder/models) a list of dashboards will be displayed:\n\n\nAlso notice the multi button in the top right conner, it is only available in multi mode. If you have no model then the default upload dashboards screen will be displayed:\n\nNotice that when you select a dashboard runtime will be \"inside the dashboard\", meaning that to select a new one you will have to use the multi button, to list again all the dashboards. Notice that the URL change to add the \"import\" query parameter, it is the URL that commands the Runtime page.\nFor embedded mode we must provide the import parameter as well otherwise it will give a Not Found screen for the required dashboard.\nThe list of dashboards is loaded during startup, which means that deleting the file have no effect on Runtime. To remove a dashboard you must delete the ZIP file in models dir and restart the server. New uploads are also registered in memory, which means that you will have to restart the server and delete the uploaded file to remove it from memory.  A delete feature was discussed, but not implemented since it would require roles discussion, which is too early for it.\nA few more possible changes to the UI are discussed:\n\nThe \"Dashboards\" menu could be removed when no runtime model is in use;\nThe embedded mode will be improved to replace the \"perspective\" query parameter to \"dashboard\". With this a new button will be added to open the current selected dashboard in embedded mode, this make easier to share a specific dashboard view, without menus, and it is also useful for embedding dashboards in other pages;\nDelete dashboards and roles for upload/delete and only visualizing is in discussion, but it will likely not be added in the short future;\n\nFinally sorry for the big PR. I had to put all together or I would have the reviewers have to review duplicated or removed code. The final commit is test coverage increase, I did added a few more tests now that runtime codebase is getting stable.", "createdAt": "2020-06-25T21:53:39Z", "url": "https://github.com/kiegroup/appformer/pull/995", "merged": true, "mergeCommit": {"oid": "0f9d6f4badf14b88ca12afa5c259f673816e22b9"}, "closed": true, "closedAt": "2020-07-30T15:56:44Z", "author": {"login": "jesuino"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu155EABqjM0ODQyODk3MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6Bs4YgFqTQ1ODUzNTkwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "768b3f25a4a71232ed4d6237b74e5bb4f4a06e25", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/768b3f25a4a71232ed4d6237b74e5bb4f4a06e25", "committedDate": "2020-06-25T21:43:56Z", "message": "AF-2549: Support for multi dashboards mode"}, "afterCommit": {"oid": "259fe020d6e45f713e931ffac637d5f6ee6bc30a", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/259fe020d6e45f713e931ffac637d5f6ee6bc30a", "committedDate": "2020-06-25T21:54:34Z", "message": "AF-2549: Support for multi dashboards mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "259fe020d6e45f713e931ffac637d5f6ee6bc30a", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/259fe020d6e45f713e931ffac637d5f6ee6bc30a", "committedDate": "2020-06-25T21:54:34Z", "message": "AF-2549: Support for multi dashboards mode"}, "afterCommit": {"oid": "e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "committedDate": "2020-06-26T15:01:29Z", "message": "AF-2549: Support for multi dashboards mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "committedDate": "2020-06-26T15:01:29Z", "message": "AF-2549: Support for multi dashboards mode"}, "afterCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "committedDate": "2020-07-07T22:18:54Z", "message": "Increasing test coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzUzOTA3", "url": "https://github.com/kiegroup/appformer/pull/995#pullrequestreview-446353907", "createdAt": "2020-07-10T12:17:43Z", "commit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "state": "COMMENTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoxNzo0M1rOGv1Ixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo0MDo1MlrOGwk5mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwNjg1NA==", "bodyText": "Question: can we format this file with spaces instead of tabs?", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452806854", "createdAt": "2020-07-10T12:17:43Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/pom.xml", "diffHunk": "@@ -120,6 +120,12 @@\n \t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTg4Mw==", "bodyText": "Consider appending the expected size into the constant name, like DEFAULT_UPLOAD_SIZE_KB.\nIt'll improve the code readability.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452809883", "createdAt": "2020-07-10T12:24:28Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -28,41 +27,68 @@\n import org.uberfire.commons.data.Pair;\n \n /**\n- * Holds Runtime System properties\n+ * Holds Runtime System properties and information.\n  *\n  */\n @ApplicationScoped\n public class RuntimeOptions {\n \n     Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n \n+    public static final String DASHBOARD_EXTENSION = \".zip\";\n+\n+    private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n+    \n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTIwMg==", "bodyText": "The other properties don't start with org. Is there a reason for not following this pattern?", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452811202", "createdAt": "2020-07-10T12:27:15Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -28,41 +27,68 @@\n import org.uberfire.commons.data.Pair;\n \n /**\n- * Holds Runtime System properties\n+ * Holds Runtime System properties and information.\n  *\n  */\n @ApplicationScoped\n public class RuntimeOptions {\n \n     Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n \n+    public static final String DASHBOARD_EXTENSION = \".zip\";\n+\n+    private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n+    \n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;\n+\n+    /**\n+     * Base Directory where dashboards ZIPs are stored\n+     */\n     private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMzYwNA==", "bodyText": "Consider using else if here. There is not need to evaluate this if block if the previous one is true.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452813604", "createdAt": "2020-07-10T12:32:27Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -91,14 +117,23 @@ public void init() {\n     }\n \n     /**\n-     * Generates a new valid file path\n-     * \n+     * Generates a new valid file path.\n+     * @param fileName\n+     * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath() {\n-        String fileId = System.currentTimeMillis() + \"\";\n-        String filePath = buildFilePath(fileId);\n-        return Pair.newPair(fileId, filePath);\n+    public Pair<String, String> newFilePath(String fileName) {\n+        if (fileName == null || fileName.trim().isEmpty()) {\n+            fileName = System.currentTimeMillis() + \"\";\n+        }\n+\n+        if (fileName.endsWith(DASHBOARD_EXTENSION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNDYzOA==", "bodyText": "Consider making the parameter fileName immutable.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452814638", "createdAt": "2020-07-10T12:34:26Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -91,14 +117,23 @@ public void init() {\n     }\n \n     /**\n-     * Generates a new valid file path\n-     * \n+     * Generates a new valid file path.\n+     * @param fileName\n+     * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath() {\n-        String fileId = System.currentTimeMillis() + \"\";\n-        String filePath = buildFilePath(fileId);\n-        return Pair.newPair(fileId, filePath);\n+    public Pair<String, String> newFilePath(String fileName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTM0Ng==", "bodyText": "hideLoading() will be called twice if notFound() is called.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452821346", "createdAt": "2020-07-10T12:48:17Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java", "diffHunk": "@@ -83,9 +83,9 @@ private void foundRuntimeModel(RuntimeModel runtimeModel) {\n                                                   .noneMatch(lt -> lt.getName().equals(perspective));\n         if (perspectiveNotFound) {\n             notFound();\n-        } else {\n-            this.hideLoading();\n-        }\n+        } \n+        \n+        this.hideLoading();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMjU4OQ==", "bodyText": "Consider using i18n for \"List Dashboards\".", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452822589", "createdAt": "2020-07-10T12:50:39Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.perspective;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.client.screens.DashboardsListScreen;\n+import org.uberfire.client.annotations.Perspective;\n+import org.uberfire.client.annotations.WorkbenchPerspective;\n+import org.uberfire.client.workbench.panels.impl.StaticWorkbenchPanelPresenter;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+import org.uberfire.workbench.model.PerspectiveDefinition;\n+import org.uberfire.workbench.model.impl.PartDefinitionImpl;\n+import org.uberfire.workbench.model.impl.PerspectiveDefinitionImpl;\n+\n+@ApplicationScoped\n+@WorkbenchPerspective(identifier = DashboardsListPerspective.ID)\n+public class DashboardsListPerspective {\n+\n+    public static final String ID = \"DashboardsListPerspective\";\n+\n+    @Perspective\n+    public PerspectiveDefinition buildPerspective() {\n+        PerspectiveDefinition perspective = new PerspectiveDefinitionImpl(StaticWorkbenchPanelPresenter.class.getName());\n+        final PlaceRequest place = new DefaultPlaceRequest(DashboardsListScreen.ID);\n+        PartDefinitionImpl dashboardScreen = new PartDefinitionImpl(place);\n+        perspective.getRoot().addPart(dashboardScreen);\n+        perspective.setName(\"List Dashboards\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMzA4OQ==", "bodyText": "Consider using i18n from \"Router\".", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452823089", "createdAt": "2020-07-10T12:51:38Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.perspective;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.screens.RouterScreen;\n+import org.uberfire.client.annotations.Perspective;\n+import org.uberfire.client.annotations.WorkbenchPerspective;\n+import org.uberfire.client.workbench.panels.impl.StaticWorkbenchPanelPresenter;\n+import org.uberfire.lifecycle.OnOpen;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+import org.uberfire.workbench.model.PerspectiveDefinition;\n+import org.uberfire.workbench.model.impl.PartDefinitionImpl;\n+import org.uberfire.workbench.model.impl.PerspectiveDefinitionImpl;\n+\n+@ApplicationScoped\n+@WorkbenchPerspective(identifier = RouterPerspective.ID, isDefault = true)\n+public class RouterPerspective {\n+\n+    public static final String ID = \"RouterPerspective\";\n+\n+    @Perspective\n+    public PerspectiveDefinition buildPerspective() {\n+        PerspectiveDefinition perspective = new PerspectiveDefinitionImpl(StaticWorkbenchPanelPresenter.class.getName());\n+        final PlaceRequest place = new DefaultPlaceRequest(RouterScreen.ID);\n+        PartDefinitionImpl dashboardScreen = new PartDefinitionImpl(place);\n+        perspective.getRoot().addPart(dashboardScreen);\n+        perspective.setName(\"Router\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNTM2Mw==", "bodyText": "Please add the copyright header to this file.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452825363", "createdAt": "2020-07-10T12:56:09Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/DashboardsListScreenView.css", "diffHunk": "@@ -0,0 +1,9 @@\n+.listTitle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNzM0MA==", "bodyText": "This inject seems unnecessary.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452827340", "createdAt": "2020-07-10T12:59:54Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens.view;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.client.screens.EmptyScreen;\n+import org.dashbuilder.client.widgets.UploadWidget;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@Dependent\n+public class EmptyScreenView implements EmptyScreen.View {\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement uploadContainer;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTMwMA==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452829300", "createdAt": "2020-07-10T13:03:43Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java", "diffHunk": "@@ -13,48 +13,45 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.dashbuilder.client.screens;\n+\n+package org.dashbuilder.client.widgets;\n \n import javax.annotation.PostConstruct;\n import javax.enterprise.context.Dependent;\n import javax.inject.Inject;\n \n-import com.google.gwt.core.client.GWT;\n import elemental2.dom.DomGlobal;\n import elemental2.dom.FormData;\n+import elemental2.dom.HTMLElement;\n import elemental2.dom.HTMLFormElement;\n import elemental2.dom.RequestInit;\n import elemental2.dom.Response;\n-import org.dashbuilder.client.ClientRuntimeModelLoader;\n import org.dashbuilder.client.resources.i18n.AppConstants;\n-import org.uberfire.client.annotations.WorkbenchPartTitle;\n-import org.uberfire.client.annotations.WorkbenchPartView;\n-import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.dashbuilder.client.screens.RouterScreen;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n import org.uberfire.client.mvp.PlaceManager;\n import org.uberfire.client.mvp.UberElemental;\n \n /**\n- * A screen that prompts users to upload a dashboard.\n+ * Allow users to upload new dashboards\n  *\n  */\n @Dependent\n-@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n-public class UploadDashboardsScreen {\n-\n-    public static final String ID = \"UploadDashboardsScreen\";\n+public class UploadWidget implements IsElement {\n \n-    private static final AppConstants i18n = AppConstants.INSTANCE;\n+    static final AppConstants i18n = AppConstants.INSTANCE;\n \n     @Inject\n     View view;\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjc3Ng==", "bodyText": "If this event goes from server to client, then I guess you'll need to make it @Portable.\nSame applies here (*).", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452832776", "createdAt": "2020-07-10T13:10:18Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java", "diffHunk": "@@ -20,16 +20,27 @@\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n+/**\n+ * Fired when new datasets are found in a Runtime model.\n+ *\n+ */\n public class NewDataSetContentEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMzIyNQ==", "bodyText": "If this event is @Portable then consider annotating these parameters with @MapsTo.\nSame applies here (*).", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452833225", "createdAt": "2020-07-10T13:11:06Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java", "diffHunk": "@@ -20,16 +20,27 @@\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n+/**\n+ * Fired when new datasets are found in a Runtime model.\n+ *\n+ */\n public class NewDataSetContentEvent {\n \n-    List<DataSetContent> content;\n+    private String runtimeModelId;\n+    \n+    private List<DataSetContent> content;\n \n-    public NewDataSetContentEvent(List<DataSetContent> content) {\n+    public NewDataSetContentEvent(String runtimeModelId, List<DataSetContent> content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNDA5OA==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452834098", "createdAt": "2020-07-10T13:12:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java", "diffHunk": "@@ -13,25 +13,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.dashbuilder.shared.event;\n \n-import org.dashbuilder.shared.model.RuntimeModel;\n import org.jboss.errai.common.client.api.annotations.MapsTo;\n \n /**\n- * Fired when runtime model is loaded\n+ * Fired when datasets are removed.\n  *\n  */\n-public class RuntimeModelEvent {\n+public class RemovedRuntimeModelEvent {\n \n-    RuntimeModel runtimeModel;\n+    /**\n+     * Removed runtime model IDs\n+     */\n+    String runtimeModelId;\n \n-    public RuntimeModelEvent(@MapsTo(\"runtimeModel\") RuntimeModel runtimeModel) {\n-        this.runtimeModel = runtimeModel;\n+    public RemovedRuntimeModelEvent(@MapsTo(\"id\") String id) {\n+        this.runtimeModelId = id;\n     }\n-\n-    public RuntimeModel getRuntimeModel() {\n-        return runtimeModel;\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNDY1Mg==", "bodyText": "(*)", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452834652", "createdAt": "2020-07-10T13:13:44Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java", "diffHunk": "@@ -13,25 +13,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNTU0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeServiceResponse() {\n          \n          \n            \n                    // not used\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452835546", "createdAt": "2020-07-10T13:15:28Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jboss.errai.common.client.api.annotations.MapsTo;\n+\n+/**\n+ * Runtime Service response model object that contains any useful information for the client.\n+ */\n+public class RuntimeServiceResponse {\n+\n+    private DashbuilderRuntimeMode mode;\n+\n+    private Optional<RuntimeModel> runtimeModelOp;\n+\n+    private List<String> availableModels;\n+\n+    public RuntimeServiceResponse() {\n+        // not used\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNTg0NQ==", "bodyText": "Please annotate this class with @Portable.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452835845", "createdAt": "2020-07-10T13:16:01Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jboss.errai.common.client.api.annotations.MapsTo;\n+\n+/**\n+ * Runtime Service response model object that contains any useful information for the client.\n+ */\n+public class RuntimeServiceResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNzQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Before\n          \n          \n            \n                public void init() {}", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452837488", "createdAt": "2020-07-10T13:18:44Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dashbuilder.backend.services.dataset.RuntimeCSVFileStorage;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.def.DataSetDefRegistry;\n+import org.dashbuilder.dataset.json.DataSetDefJSONMarshaller;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.event.RemovedRuntimeModelEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.matches;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DataSetContentListenerTest {\n+\n+    @Mock\n+    DataSetDefRegistry registry;\n+\n+    @Mock\n+    RuntimeCSVFileStorage storage;\n+\n+    @Mock\n+    DataSetDefJSONMarshaller defMarshaller;\n+\n+    @Mock\n+    Map<String, List<String>> runtimeModelDatasetContents;\n+\n+    @InjectMocks\n+    DataSetContentListener datasetContentListener;\n+\n+    @Before\n+    public void init() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTIzNQ==", "bodyText": "This BusyIndicatorView does not seem to be used here anymore.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452849235", "createdAt": "2020-07-10T13:38:57Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -57,32 +60,18 @@\n     HTMLInputElement inputFile;\n \n     @Inject\n-    BusyIndicatorView loading;\n+    @DataField\n+    HTMLInputElement inputFileName;\n \n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    private UploadDashboardsScreen presenter;\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return emptyImport;\n-    }\n+    @Inject\n+    BusyIndicatorView loading;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MDI2NA==", "bodyText": "Consider moving this logic to the presenter.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452850264", "createdAt": "2020-07-10T13:40:35Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -104,4 +93,33 @@ public void badResponseUploading(Response response) {\n     public void errorDuringUpload(Object error) {\n         runtimeCommunication.showError(i18n.errorUploadingDashboards(), error);\n     }\n+\n+    @EventHandler(\"btnImport\")\n+    public void handleImport(ClickEvent e) {\n+        inputFile.click();\n+    }\n+\n+    @EventHandler(\"inputFile\")\n+    public void handleInputFileChange(ChangeEvent e) {\n+        inputFileName.value = retrieveFileName(inputFile.value);\n+        presenter.submit(uploadForm);\n+    }\n+\n+    private String retrieveFileName(String value) {\n+        int pos = 0;\n+        if (value.contains(\"\\\\\")) {\n+            pos = value.lastIndexOf(\"\\\\\");\n+        }\n+\n+        if (value.contains(\"/\")) {\n+            pos = value.lastIndexOf(\"/\");\n+        }\n+        return value.substring(pos + 1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MDkyNg==", "bodyText": "Consider an else if here.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452850926", "createdAt": "2020-07-10T13:41:37Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -104,4 +93,33 @@ public void badResponseUploading(Response response) {\n     public void errorDuringUpload(Object error) {\n         runtimeCommunication.showError(i18n.errorUploadingDashboards(), error);\n     }\n+\n+    @EventHandler(\"btnImport\")\n+    public void handleImport(ClickEvent e) {\n+        inputFile.click();\n+    }\n+\n+    @EventHandler(\"inputFile\")\n+    public void handleInputFileChange(ChangeEvent e) {\n+        inputFileName.value = retrieveFileName(inputFile.value);\n+        presenter.submit(uploadForm);\n+    }\n+\n+    private String retrieveFileName(String value) {\n+        int pos = 0;\n+        if (value.contains(\"\\\\\")) {\n+            pos = value.lastIndexOf(\"\\\\\");\n+        }\n+\n+        if (value.contains(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MTczMA==", "bodyText": "Is it a TODO?", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452851730", "createdAt": "2020-07-10T13:42:56Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+\n+    }\n+\n+    @WorkbenchPartView\n+    public View view() {\n+        return view;\n+    }\n+\n+    @OnOpen\n+    public void onOpen() {\n+        doRoute();\n+    }\n+\n+    public void doRoute() {\n+        loading.showBusyIndicator(i18n.loadingDashboards());\n+        clientLoader.load(response -> {\n+            loading.hideBusyIndicator();\n+            route(response);\n+        }, (a, throwable) -> {\n+            loading.hideBusyIndicator();\n+            // Error screen?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MjY0Mg==", "bodyText": "Suggested change", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452852642", "createdAt": "2020-07-10T13:44:34Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1Mjg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public View view() {\n          \n          \n            \n                public View getView() {", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452852860", "createdAt": "2020-07-10T13:45:01Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+\n+    }\n+\n+    @WorkbenchPartView\n+    public View view() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjI1Nw==", "bodyText": "Consider merging these two filter operations into a single one.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452892257", "createdAt": "2020-07-10T14:50:08Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java", "diffHunk": "@@ -48,7 +60,43 @@ private void doInitialImport() {\n \n         if (runtimeOptions.isMultipleImport() && !runtimeOptions.importFileLocation().isPresent()) {\n             runtimeModelRegistry.setMode(DashbuilderRuntimeMode.MULTIPLE_IMPORT);\n+            loadAvailableModels();\n+        }\n+    }\n+\n+    /**\n+     * Create, if do not exist, the base directory for runtime models\n+     */\n+    protected void createBaseDir() {\n+        java.nio.file.Path baseDirPath = Paths.get(runtimeOptions.getImportsBaseDir());\n+        if (!baseDirPath.toFile().exists()) {\n+            try {\n+                Files.createDirectory(baseDirPath);\n+            } catch (IOException e) {\n+                logger.debug(\"Error creating base directory for dashboards: {}\", baseDirPath, e);\n+                throw new RuntimeException(\"Base directory for dashboards could not be created: \" + baseDirPath, e);\n+            }\n+        } else {\n+            logger.info(\"Base directory for dashboards already exist: {}\", runtimeOptions.getImportsBaseDir());\n+        }\n+    }\n+\n+    protected void loadAvailableModels() {\n+        logger.info(\"Registering existing models\");\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            walk.filter(p -> p.toFile().isFile())\n+                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NDEyOQ==", "bodyText": "These logs are redundant since you're throwing a RuntimeException. The exception will be logged anyway.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452894129", "createdAt": "2020-07-10T14:53:07Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java", "diffHunk": "@@ -48,7 +60,43 @@ private void doInitialImport() {\n \n         if (runtimeOptions.isMultipleImport() && !runtimeOptions.importFileLocation().isPresent()) {\n             runtimeModelRegistry.setMode(DashbuilderRuntimeMode.MULTIPLE_IMPORT);\n+            loadAvailableModels();\n+        }\n+    }\n+\n+    /**\n+     * Create, if do not exist, the base directory for runtime models\n+     */\n+    protected void createBaseDir() {\n+        java.nio.file.Path baseDirPath = Paths.get(runtimeOptions.getImportsBaseDir());\n+        if (!baseDirPath.toFile().exists()) {\n+            try {\n+                Files.createDirectory(baseDirPath);\n+            } catch (IOException e) {\n+                logger.debug(\"Error creating base directory for dashboards: {}\", baseDirPath, e);\n+                throw new RuntimeException(\"Base directory for dashboards could not be created: \" + baseDirPath, e);\n+            }\n+        } else {\n+            logger.info(\"Base directory for dashboards already exist: {}\", runtimeOptions.getImportsBaseDir());\n+        }\n+    }\n+\n+    protected void loadAvailableModels() {\n+        logger.info(\"Registering existing models\");\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            walk.filter(p -> p.toFile().isFile())\n+                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                .map(p -> p.toString())\n+                .peek(p -> logger.info(\"Registering {}\", p))\n+                .peek(runtimeModelRegistry::registerFile)\n+                .forEach(p -> logger.info(\"Sucessfully Registered {}\", p));\n+\n+        } catch (Exception e) {\n+            logger.info(\"Error Registering existing models\");\n+            logger.debug(\"Error Registering existing models.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMDc1NQ==", "bodyText": "It might be useful for users if the allowed size is appended into this message.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452900755", "createdAt": "2020-07-10T15:03:51Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java", "diffHunk": "@@ -95,4 +90,53 @@ public Response uploadFile(@MultipartForm FileUploadModel form) throws IOExcepti\n         return Response.ok(newImportInfo.getK1()).build();\n     }\n \n+    /**\n+     * Reads the uploaded model bytes controlling the size and throwing exception when the size exceeds the allowed size.\n+     * @param fileData\n+     * @return\n+     */\n+    private void checkInputSize(byte[] bytes) {\n+        if (bytes.length > runtimeOptions.getUploadSize()) {\n+            logger.debug(\"Total size {} is greater than the allowed size {}\",\n+                         bytes.length,\n+                         runtimeOptions.getUploadSize());\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwNTA1OQ==", "bodyText": "Can you merge these three filter operations into a single one?", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452905059", "createdAt": "2020-07-10T15:10:56Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java", "diffHunk": "@@ -95,4 +90,53 @@ public Response uploadFile(@MultipartForm FileUploadModel form) throws IOExcepti\n         return Response.ok(newImportInfo.getK1()).build();\n     }\n \n+    /**\n+     * Reads the uploaded model bytes controlling the size and throwing exception when the size exceeds the allowed size.\n+     * @param fileData\n+     * @return\n+     */\n+    private void checkInputSize(byte[] bytes) {\n+        if (bytes.length > runtimeOptions.getUploadSize()) {\n+            logger.debug(\"Total size {} is greater than the allowed size {}\",\n+                         bytes.length,\n+                         runtimeOptions.getUploadSize());\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",\n+                                              Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * If a file exists with a given size then probably it is a repeated.\n+     * \n+     * @param uploadSize\n+     * @return\n+     * @throws IOException \n+     */\n+    private Optional<String> checkForExistingFile(byte[] uploadedFile) throws IOException {\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            return walk\n+                       .filter(p -> p.toFile().isFile())\n+                       .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                       .filter(p -> isContentEquals(uploadedFile, p))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3MzgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n          \n          \n            \n                     return row.stream().flatMap(r -> r.getLayoutColumns().stream()).flatMap(cl -> { \n          \n          \n            \n                         return Stream.concat(cl.getLayoutComponents().stream(), allComponentsStream(cl.getRows())); \n          \n          \n            \n                     });\n          \n          \n            \n                }\n          \n          \n            \n                private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n          \n          \n            \n                    return row.stream()\n          \n          \n            \n                            .flatMap(r -> r.getLayoutColumns().stream())\n          \n          \n            \n                            .flatMap(cl -> Stream.concat(cl.getLayoutComponents().stream(),\n          \n          \n            \n                                                         allComponentsStream(cl.getRows())));\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453573801", "createdAt": "2020-07-13T11:09:46Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java", "diffHunk": "@@ -135,4 +157,27 @@ private String nextEntryContent(final ZipInputStream zis) {\n \n     }\n \n+    private void setLayoutTemplateRuntimeModelId(String modelId, LayoutTemplate lt) {\n+       allComponentsStream(lt.getRows())\n+          .filter(lc -> lc.getProperties().get(\"json\") != null)\n+          .forEach(lc -> {\n+              String json = lc.getProperties().get(\"json\");\n+              DisplayerSettings settings = displayerSettingsMarshaller.fromJsonString(json);\n+              DataSetLookup dataSetLookup = settings.getDataSetLookup();\n+              String newId = transformId(modelId, dataSetLookup.getDataSetUUID());\n+              dataSetLookup.setDataSetUUID(newId);\n+              lc.getProperties().put(\"json\", displayerSettingsMarshaller.toJsonString(settings));\n+          });\n+    }\n+    \n+    private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n+         return row.stream().flatMap(r -> r.getLayoutColumns().stream()).flatMap(cl -> { \n+             return Stream.concat(cl.getLayoutComponents().stream(), allComponentsStream(cl.getRows())); \n+         });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDYyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeClientLoader() {\n          \n          \n            \n                    // do nothing\n          \n          \n            \n                }", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453584623", "createdAt": "2020-07-13T11:31:21Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTkyMw==", "bodyText": "Consider adding a BusyIndicatorView for this call.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453585923", "createdAt": "2020-07-13T11:33:57Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NjIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n          \n          \n            \n                public RuntimeClientLoader(Caller<RuntimeModelService> runtimeModelServiceCaller,", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453586215", "createdAt": "2020-07-13T11:34:30Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODc4OQ==", "bodyText": "Shouldn't we show some sort of feedback if ifPresent is false? For example, when importID is null.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453588789", "createdAt": "2020-07-13T11:39:42Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {\n+            response.getRuntimeModelOp().ifPresent(this::registerModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4OTQwMg==", "bodyText": "Consider adding a BusyIndicatorView for this call.", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453589402", "createdAt": "2020-07-13T11:40:52Z", "author": {"login": "caponetto"}, "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {\n+            response.getRuntimeModelOp().ifPresent(this::registerModel);\n+            responseConsumer.accept(response);\n+        }, (msg, t) -> handleError(error, msg, t))\n+                                 .info(importID);\n+\n+    }\n+\n+    public void loadModel(Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        loadModel(importID, modelLoaded, emptyModel, error);\n+\n+    }\n+\n+    public void loadModel(String importId,\n+                          Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Object, Throwable> error) {\n+        runtimeModelServiceCaller.call((Optional<RuntimeModel> runtimeModelOp) -> handleResponse(modelLoaded, emptyModel, runtimeModelOp),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf"}, "originalPosition": 87}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29dd0d86204e39c7c032fb2d046a0157a2952c07", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/29dd0d86204e39c7c032fb2d046a0157a2952c07", "committedDate": "2020-07-13T22:20:36Z", "message": "review response and small improvements"}, "afterCommit": {"oid": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/e99c24c8bc4e95137cf410f860124ecbc106c0f0", "committedDate": "2020-07-13T22:22:38Z", "message": "review response and small improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzg4NjIw", "url": "https://github.com/kiegroup/appformer/pull/995#pullrequestreview-450788620", "createdAt": "2020-07-17T16:16:25Z", "commit": {"oid": "6238e93a504f65bca5c6e38b34f7fd354b80ba51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6238e93a504f65bca5c6e38b34f7fd354b80ba51", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/6238e93a504f65bca5c6e38b34f7fd354b80ba51", "committedDate": "2020-07-14T17:50:53Z", "message": "Improvements"}, "afterCommit": {"oid": "a724b77f23e0b0eb2ea273856e6a6e8cf440a44c", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/a724b77f23e0b0eb2ea273856e6a6e8cf440a44c", "committedDate": "2020-07-27T17:32:36Z", "message": "Changing model import behaviour"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272fa36f49151b086e7686875f76219e1874b1bb", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/272fa36f49151b086e7686875f76219e1874b1bb", "committedDate": "2020-07-29T15:59:56Z", "message": "AF-2550: Avoid dataset collision when using multi mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4d1810f69b8a858472daecb31703a6f88b12e55", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/d4d1810f69b8a858472daecb31703a6f88b12e55", "committedDate": "2020-07-29T15:59:56Z", "message": "AF-2549: Support for multi dashboards mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78e9cad44d87cdc49842cb620069835f10e22378", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/78e9cad44d87cdc49842cb620069835f10e22378", "committedDate": "2020-07-29T15:59:56Z", "message": "AF-2551: List available dashboards in multi mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86b4f9d51ab336d69d43a1c6d86b136468053377", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/86b4f9d51ab336d69d43a1c6d86b136468053377", "committedDate": "2020-07-29T15:59:56Z", "message": "Increasing test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82e8163dd5cc6cfd0108b467cec02126ff197a9e", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/82e8163dd5cc6cfd0108b467cec02126ff197a9e", "committedDate": "2020-07-29T16:01:14Z", "message": "review response and small improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2043b12bcbf6db7288140811c3564f25850e17dc", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/2043b12bcbf6db7288140811c3564f25850e17dc", "committedDate": "2020-07-29T16:01:22Z", "message": "Improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f9a15f0a3f3ad209ca3713fe00431e6fafb654", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/c7f9a15f0a3f3ad209ca3713fe00431e6fafb654", "committedDate": "2020-07-29T16:01:22Z", "message": "Changing model import behaviour"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80925a8f130f0b8e034a55223b20b8073ac553c4", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/80925a8f130f0b8e034a55223b20b8073ac553c4", "committedDate": "2020-07-29T16:01:22Z", "message": "fix: dataset partition and redirect in single mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "committedDate": "2020-07-29T16:01:22Z", "message": "Removing unused import"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "213b15c8bedfafb6417f4eeb71cfcbda50aaeffc", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/213b15c8bedfafb6417f4eeb71cfcbda50aaeffc", "committedDate": "2020-07-28T13:53:53Z", "message": "Removing unused import"}, "afterCommit": {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "author": {"user": {"login": "jesuino", "name": "William Ant\u00f4nio Siqueira"}}, "url": "https://github.com/kiegroup/appformer/commit/d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "committedDate": "2020-07-29T16:01:22Z", "message": "Removing unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDcxMDA1", "url": "https://github.com/kiegroup/appformer/pull/995#pullrequestreview-458071005", "createdAt": "2020-07-30T04:57:37Z", "commit": {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTM1OTA0", "url": "https://github.com/kiegroup/appformer/pull/995#pullrequestreview-458535904", "createdAt": "2020-07-30T15:52:37Z", "commit": {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2145, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}