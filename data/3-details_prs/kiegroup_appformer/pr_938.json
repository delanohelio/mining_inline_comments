{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDc5MjMz", "number": 938, "title": "RHPAM-2721 :Clone project via http can not be re-enabled", "bodyText": "Http wasn't enabled for the repositories because the project public URI's (ssh, http) are stored at project basis. During initialisation these project info are initialised with default values (without http/https) and stored in cache. Later on http/https support was added to the provider, making the existing projects unaware of http support.\nImplemented update cache functionality, which will update all the file system caches with hostnames whenever http support is added.", "createdAt": "2020-04-07T07:04:48Z", "url": "https://github.com/kiegroup/appformer/pull/938", "merged": true, "mergeCommit": {"oid": "dec68e71722069e248f2c4dd1b5f7ed3c7d490f9"}, "closed": true, "closedAt": "2020-04-23T17:30:52Z", "author": {"login": "RishiRajAnand"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVN6IQgBqjMyMDg0OTMwMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcadXBDAFqTM5OTEyNTk4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7591c1c28a5ec2c2b41bb5d4d33b00947c1fc632", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/7591c1c28a5ec2c2b41bb5d4d33b00947c1fc632", "committedDate": "2020-04-07T06:52:10Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}, "afterCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/72cdfa5173299a95c22821715bf0d6d079dc277a", "committedDate": "2020-04-07T07:10:06Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTA3NDYy", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-388907462", "createdAt": "2020-04-07T08:43:50Z", "commit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0Mzo1MFrOGB5PFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1Njo1MVrOGB5wOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTUxMQ==", "bodyText": "We could simplify as:\n    @Override\n    public void setPublicURI(Map<String, String> fullHostNames) {\n        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n            toStringContent = fullHostNames.entrySet()\n                    .stream()\n                    .map(e -> e.getKey() + \"://\" + e.getValue() + \"/\" + name)\n                    .collect(Collectors.joining(\"\\n\"));\n        } else {\n            toStringContent = \"git://\" + name;\n        }\n    }", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404639511", "createdAt": "2020-04-07T08:43:50Z", "author": {"login": "jomarko"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java", "diffHunk": "@@ -559,4 +546,22 @@ public void filterBranchAccess(final UploadPack uploadPack,\n             JGitFSHooks.executeFSHooks(hook, FileSystemHooks.BranchAccessFilter, ctx);\n         }\n     }\n+\n+    @Override\n+    public void setPublicURI(Map<String, String> fullHostNames) {\n+        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n+            final StringBuilder sb = new StringBuilder();\n+            final Iterator<Map.Entry<String, String>> iterator = fullHostNames.entrySet().iterator();\n+            while (iterator.hasNext()) {\n+                final Map.Entry<String, String> entry = iterator.next();\n+                sb.append(entry.getKey()).append(\"://\").append(entry.getValue()).append(\"/\").append(name);\n+                if (iterator.hasNext()) {\n+                    sb.append(\"\\n\");\n+                }\n+            }\n+            toStringContent = sb.toString();\n+        } else {\n+            toStringContent = \"git://\" + name;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTIyOQ==", "bodyText": "formatting if (...", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404641229", "createdAt": "2020-04-07T08:46:31Z", "author": {"login": "jomarko"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +78,13 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n+       if(getFsCache().containsKey(fsKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzYxMw==", "bodyText": "Could we please replace uri.equals(protocolName) with Objects.equals(uri, protocolName)? The later one doesn't throw an exception in case uri or protocolName is null.", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404643613", "createdAt": "2020-04-07T08:50:15Z", "author": {"login": "jomarko"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java", "diffHunk": "@@ -355,4 +356,10 @@ protected static String multiline(String prefix, String... lines) {\n                 .reduce((s1, s2) -> s1 + \"\\n\" + s2)\n                 .orElse(\"\");\n     }\n+    protected static boolean checkProtocolPresent(String hostNames, String protocolName) {\n+        final String[] uris = hostNames.toString().split(\"\\\\r?\\\\n\");\n+        return Arrays.stream(uris)\n+                .map(uri -> uri.substring(0, uri.indexOf(PROTOCOL_SEPARATOR)))\n+                .anyMatch(uri -> uri.equals(protocolName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Nzk5NQ==", "bodyText": "In past, sonarcloud reported anonymous static initialization as possible risk. @hasys implemented different kind of builders due to this.\nCould we please replace all HashMap constructions in this way?\nnew Maps.Builder<String, String>()\n   .put(\"ssh\", \"localhost:8080/git\")\n   .build()", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404647995", "createdAt": "2020-04-07T08:56:51Z", "author": {"login": "jomarko"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new HashMap<String, String>() {{\n+                                                                         put(\"ssh\", \"localhost:8080/git\");\n+                                                                     }},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/72cdfa5173299a95c22821715bf0d6d079dc277a", "committedDate": "2020-04-07T07:10:06Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}, "afterCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "committedDate": "2020-04-07T14:47:48Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjgxMzAw", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-389281300", "createdAt": "2020-04-07T16:20:25Z", "commit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyMDoyNlrOGCLl2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyODo0OVrOGCL-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MDI1MA==", "bodyText": "Just a suggestion.\nYou could replace the collect() by a forEach with the content of the for loop below.\nThis way you don't need to create a List<JGitFileSystem>.", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404940250", "createdAt": "2020-04-07T16:20:26Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java", "diffHunk": "@@ -439,6 +440,18 @@ public void addHostName(final String protocol, String s) {\n         fullHostNames.put(protocol, s);\n     }\n \n+    public void updateCacheWithHostNames() {\n+        JGitFileSystemsCache fc = fsManager.getFsCache();\n+        List<JGitFileSystem> jGitFileSystems = fc.getFileSystems().stream()\n+                .map(fsName -> ((JGitFileSystemProxy) fsManager.get(fsName)).getRealJGitFileSystem()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MTk3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n          \n            \n                public void updateFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n      \n    \n    \n  \n\nJust a suggestion.", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404941978", "createdAt": "2020-04-07T16:22:53Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +77,14 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzY5Mw==", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943693", "createdAt": "2020-04-07T16:25:13Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new Maps.Builder<String, String>()\n+                                                                             .put(\"ssh\", \"localhost:8080/git\")\n+                                                                             .build(),\n+                                                                     git,\n+                                                                     createFSLock(git),\n+                                                                     \"my-repo\",\n+                                                                     CredentialsProvider.getDefault(),\n+                                                                     null,\n+                                                                     null);\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        fileSystem.setPublicURI(new Maps.Builder<String, String>()\n+                                        .put(\"http\", \"localhost:8080/git\")\n+                                        .put(\"ssh\", \"localhost:8080/git\")\n+                                        .build());\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzgyMQ==", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943821", "createdAt": "2020-04-07T16:25:22Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjAwMg==", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946002", "createdAt": "2020-04-07T16:28:12Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjI2NQ==", "bodyText": "You could use assertFalse() here instead of assertThat().isEqualTo(false).", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946265", "createdAt": "2020-04-07T16:28:34Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjQzNw==", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946437", "createdAt": "2020-04-07T16:28:49Z", "author": {"login": "caponetto"}, "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "committedDate": "2020-04-07T14:47:48Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}, "afterCommit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/12b2f75af6492094b25f6ef4eb50d480d51eb17d", "committedDate": "2020-04-08T06:23:15Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Njk4NzA2", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-389698706", "createdAt": "2020-04-08T06:58:35Z", "commit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODQ4Njg2", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-389848686", "createdAt": "2020-04-08T10:29:32Z", "commit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTkzNzk4", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-389993798", "createdAt": "2020-04-08T13:50:52Z", "commit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODg2NTQ4", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-393886548", "createdAt": "2020-04-15T15:26:59Z", "commit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "committedDate": "2020-04-21T18:06:04Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/12b2f75af6492094b25f6ef4eb50d480d51eb17d", "committedDate": "2020-04-08T06:23:15Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}, "afterCommit": {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "author": {"user": {"login": "RishiRajAnand", "name": "Rishiraj Anand"}}, "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "committedDate": "2020-04-21T18:06:04Z", "message": "RHPAM-2721 :Clone project via http can not be re-enabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTI1OTg5", "url": "https://github.com/kiegroup/appformer/pull/938#pullrequestreview-399125989", "createdAt": "2020-04-23T14:00:30Z", "commit": {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}