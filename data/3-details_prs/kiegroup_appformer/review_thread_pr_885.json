{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTc3MDMx", "number": 885, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNjo1NVrODcPBiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzowNTowOFrODfEQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTMyODczOnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNjo1NVrOFkLRFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNjo1NVrOFkLRFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NzY1Mw==", "bodyText": "You can probably make this the interface GridLienzoScrollable instead of GridLienzoPanel?", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r373477653", "createdAt": "2020-01-31T13:26:55Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoPanel> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoPanel panel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbb85e254ebeb64f36ade25cda8d71572366137"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjg2ODU5OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowNzozNVrOFlRv3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxNTozMlrOFlR9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMjQxNQ==", "bodyText": "@danielzhe Just curious, why is this indirection required?", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r374632415", "createdAt": "2020-02-04T12:07:35Z", "author": {"login": "yesamer"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);\n+    }\n+\n+    @Override\n+    public boolean perform(final GridWidget gridWidget,\n+                           final boolean isShiftKeyDown,\n+                           final boolean isControlKeyDown) {\n+        final boolean redraw = gridWidget.adjustSelection(getSelectionExtension(),\n+                                                          isShiftKeyDown);\n+        baseScrollSelectedCellIntoView(gridWidget);\n+        panel.ifPresent(p -> p.refreshScrollPosition());\n+        return redraw;\n+    }\n+\n+    void baseScrollSelectedCellIntoView(final GridWidget gridWidget) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNTg1NQ==", "bodyText": "It seems to be mocked in a test (presumably to avoid more extensive mocking for the grid widget).", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r374635855", "createdAt": "2020-02-04T12:15:32Z", "author": {"login": "manstis"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);\n+    }\n+\n+    @Override\n+    public boolean perform(final GridWidget gridWidget,\n+                           final boolean isShiftKeyDown,\n+                           final boolean isControlKeyDown) {\n+        final boolean redraw = gridWidget.adjustSelection(getSelectionExtension(),\n+                                                          isShiftKeyDown);\n+        baseScrollSelectedCellIntoView(gridWidget);\n+        panel.ifPresent(p -> p.refreshScrollPosition());\n+        return redraw;\n+    }\n+\n+    void baseScrollSelectedCellIntoView(final GridWidget gridWidget) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMjQxNQ=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjkxMDQ5OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyMjozMVrOFlSJVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo0NDoxMVrOFl4Jvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzODkzMw==", "bodyText": "@danielzhe Which is the scope of this new method? I don't see this SelectionExtension used previously.Thanks!", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r374638933", "createdAt": "2020-02-04T12:22:31Z", "author": {"login": "yesamer"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);\n+    }\n+\n+    @Override\n+    public boolean perform(final GridWidget gridWidget,\n+                           final boolean isShiftKeyDown,\n+                           final boolean isControlKeyDown) {\n+        final boolean redraw = gridWidget.adjustSelection(getSelectionExtension(),\n+                                                          isShiftKeyDown);\n+        baseScrollSelectedCellIntoView(gridWidget);\n+        panel.ifPresent(p -> p.refreshScrollPosition());\n+        return redraw;\n+    }\n+\n+    void baseScrollSelectedCellIntoView(final GridWidget gridWidget) {\n+        scrollSelectedCellIntoView(gridWidget);\n+    }\n+\n+    abstract SelectionExtension getSelectionExtension();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMjkyMQ==", "bodyText": "This is because I refactored KeyboardOperationMoveDown, KeyboardOperationMoveUp, KeyboardOperationMoveLeft and KeyboardOperationMoveRight introducing a new class in the inheritance between those classes and BaseKeyboardOperation\nPreviously all those classes have repeating code:\npublic boolean perform(final GridWidget gridWidget,\n                           final boolean isShiftKeyDown,\n                           final boolean isControlKeyDown) {\n        final boolean redraw = gridWidget.adjustSelection(SelectionExtension.DOWN,\n                                                          isShiftKeyDown);\n        scrollSelectedCellIntoView(gridWidget);\n        return redraw;\n\nThe only difference in each class was the SelectionExtension.DOWN (which was SelectionExtension.UP and so on, depending of the class that you was looking.\nSo I moved those logic to the new abstract class KeyboardOperationMove and added this new abstract method that you mentioned, which returns SelectionExtension.DOWN, SelectionExtension.UP and so on.", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r374732921", "createdAt": "2020-02-04T15:17:22Z", "author": {"login": "danielzhe"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);\n+    }\n+\n+    @Override\n+    public boolean perform(final GridWidget gridWidget,\n+                           final boolean isShiftKeyDown,\n+                           final boolean isControlKeyDown) {\n+        final boolean redraw = gridWidget.adjustSelection(getSelectionExtension(),\n+                                                          isShiftKeyDown);\n+        baseScrollSelectedCellIntoView(gridWidget);\n+        panel.ifPresent(p -> p.refreshScrollPosition());\n+        return redraw;\n+    }\n+\n+    void baseScrollSelectedCellIntoView(final GridWidget gridWidget) {\n+        scrollSelectedCellIntoView(gridWidget);\n+    }\n+\n+    abstract SelectionExtension getSelectionExtension();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzODkzMw=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2MTYzMQ==", "bodyText": "Thank you @danielzhe!", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r375261631", "createdAt": "2020-02-05T13:44:11Z", "author": {"login": "yesamer"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);\n+    }\n+\n+    @Override\n+    public boolean perform(final GridWidget gridWidget,\n+                           final boolean isShiftKeyDown,\n+                           final boolean isControlKeyDown) {\n+        final boolean redraw = gridWidget.adjustSelection(getSelectionExtension(),\n+                                                          isShiftKeyDown);\n+        baseScrollSelectedCellIntoView(gridWidget);\n+        panel.ifPresent(p -> p.refreshScrollPosition());\n+        return redraw;\n+    }\n+\n+    void baseScrollSelectedCellIntoView(final GridWidget gridWidget) {\n+        scrollSelectedCellIntoView(gridWidget);\n+    }\n+\n+    abstract SelectionExtension getSelectionExtension();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzODkzMw=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTYxMzA4OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTo1NzowMVrOFoC2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1OTozMFrOFox5TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNDAyMg==", "bodyText": "I think also KeyboardOperationSelectTopLeftCell and KeyboardOperationSelectBottomRightCell should extend this, what do you think?", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r377534022", "createdAt": "2020-02-11T09:57:01Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3NDQ3Nw==", "bodyText": "Makes sense.", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r378274477", "createdAt": "2020-02-12T14:12:58Z", "author": {"login": "danielzhe"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNDAyMg=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwNDg0NA==", "bodyText": "Well, in fact the logic of the super classes are different. As you may notice, KeyboardOperationSelectTopLeftCell in the method perform calls selectTopLeftCell while the other classes derived from KeyboardOperationMove in the perform method has a common logic. @jomarko", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r378304844", "createdAt": "2020-02-12T14:59:30Z", "author": {"login": "danielzhe"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNDAyMg=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTAyMTk1OnYy", "diffSide": "RIGHT", "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzowNTowOFrOFojmJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNDo1MlrOFo3rdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MDU2NA==", "bodyText": "We need ofNullable. I am running FDB to demonstrate we need it. It will cause GuidedDecisionTableModellerPresenterTest to fail.", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r378070564", "createdAt": "2020-02-12T07:05:08Z", "author": {"login": "jomarko"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5OTYwNw==", "bodyText": "Change applied.", "url": "https://github.com/kiegroup/appformer/pull/885#discussion_r378399607", "createdAt": "2020-02-12T17:24:52Z", "author": {"login": "danielzhe"}, "path": "uberfire-extensions/uberfire-wires/uberfire-wires-core/uberfire-wires-core-grids/src/main/java/org/uberfire/ext/wires/core/grids/client/widget/grid/impl/KeyboardOperationMove.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.uberfire.ext.wires.core.grids.client.widget.grid.impl;\n+\n+import java.util.Optional;\n+\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n+import org.uberfire.ext.wires.core.grids.client.widget.grid.selections.SelectionExtension;\n+import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;\n+import org.uberfire.ext.wires.core.grids.client.widget.scrollbars.GridLienzoScrollable;\n+\n+public abstract class KeyboardOperationMove extends BaseKeyboardOperation {\n+\n+    private final Optional<GridLienzoScrollable> panel;\n+\n+    KeyboardOperationMove(final GridLayer gridLayer,\n+                          final GridLienzoScrollable panel) {\n+        super(gridLayer);\n+        this.panel = Optional.of(panel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MDU2NA=="}, "originalCommit": {"oid": "2e9405833a2792dc10ae99cee7fd824dfd8e8040"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2860, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}