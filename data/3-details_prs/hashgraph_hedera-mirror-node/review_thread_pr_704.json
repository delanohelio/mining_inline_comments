{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTMyMjc4", "number": 704, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjo0NDo1MVrOD1EA7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjozMzo1MFrOD1gUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTY2ODk0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessages-05-all-params.spec.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjo0NDo1MVrOGKUFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDowOTo0OVrOGK6E9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NzkyMQ==", "bodyText": "'binary' is confusing since the output is not really 'binary' (0101...).\nIn future, if we have to add say hex encoding and call it 'hex', that'd be okay, but it'll make 'binary' even more wrong.\nShould rename this to following for clarity: encoding=utf8/base64", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413467921", "createdAt": "2020-04-23T02:44:51Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-05-all-params.spec.json", "diffHunk": "@@ -38,7 +38,7 @@\n       }\n     ]\n   },\n-  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005\",\n+  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005&format=binary\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxMzQ5Mw==", "bodyText": "encoding=utf8/base64 does seem more appropriate and specific.\n@steven-sheehy you okay with this or did you have a different intent with binary/text ?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413813493", "createdAt": "2020-04-23T13:53:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-05-all-params.spec.json", "diffHunk": "@@ -38,7 +38,7 @@\n       }\n     ]\n   },\n-  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005\",\n+  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005&format=binary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NzkyMQ=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4OTg5NQ==", "bodyText": "I am okay with encoding=utf8/base64. Would suggest making it case insensitive and maybe support a dash since most people use UTF-8", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413989895", "createdAt": "2020-04-23T17:32:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-05-all-params.spec.json", "diffHunk": "@@ -38,7 +38,7 @@\n       }\n     ]\n   },\n-  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005\",\n+  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005&format=binary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NzkyMQ=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MDQ4Nw==", "bodyText": "Done. Encoding, case sensitive and optional hyphen", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414090487", "createdAt": "2020-04-23T20:09:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-05-all-params.spec.json", "diffHunk": "@@ -38,7 +38,7 @@\n       }\n     ]\n   },\n-  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005\",\n+  \"url\": \"/api/v1/topic/7/messages?sequencenumber=gt:3&timestamp=lte:1234567890.000000005&format=binary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NzkyMQ=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTY4MjQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjo1MDo1MlrOGKUMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxOToyOVrOGKqkaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTgxMQ==", "bodyText": "param should be just 'messageEncoding'. The value can be 'text' (utf8) too, so 'binary..' is wrong.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413469811", "createdAt": "2020-04-23T02:50:52Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -85,16 +85,21 @@ const validateGetTopicMessagesRequest = (topicId, filters) => {\n /**\n  * Format row in postgres query's result to object which is directly returned to user as json.\n  */\n-const formatTopicMessageRow = function (row) {\n+const formatTopicMessageRow = function (row, binaryMessageFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNTUxMA==", "bodyText": "Fair point", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413835510", "createdAt": "2020-04-23T14:18:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -85,16 +85,21 @@ const validateGetTopicMessagesRequest = (topicId, filters) => {\n /**\n  * Format row in postgres query's result to object which is directly returned to user as json.\n  */\n-const formatTopicMessageRow = function (row) {\n+const formatTopicMessageRow = function (row, binaryMessageFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTgxMQ=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNjM5Mg==", "bodyText": "Changed. Will change again depending on consensus on format vs encoding", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413836392", "createdAt": "2020-04-23T14:19:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -85,16 +85,21 @@ const validateGetTopicMessagesRequest = (topicId, filters) => {\n /**\n  * Format row in postgres query's result to object which is directly returned to user as json.\n  */\n-const formatTopicMessageRow = function (row) {\n+const formatTopicMessageRow = function (row, binaryMessageFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTgxMQ=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTY5ODQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjo1Njo1MlrOGKUUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzo1NDo1MVrOGKpQAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MTkwOA==", "bodyText": "Better in utils.\nconst encode = function (buffer, encoding) {\n  return null === buffer ? null : buffer.toString(encoding);\n}\n\nAnd other encode* functions in utils.js can call this.\nAlso goes well with converting query param to 'encoding=utf8/base64'", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413471908", "createdAt": "2020-04-23T02:56:52Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -85,16 +85,21 @@ const validateGetTopicMessagesRequest = (topicId, filters) => {\n /**\n  * Format row in postgres query's result to object which is directly returned to user as json.\n  */\n-const formatTopicMessageRow = function (row) {\n+const formatTopicMessageRow = function (row, binaryMessageFormat) {\n   return {\n     consensus_timestamp: utils.nsToSecNs(row[topicMessageColumns.CONSENSUS_TIMESTAMP]),\n     topic_id: `${config.shard}.${row[topicMessageColumns.REALM_NUM]}.${row[topicMessageColumns.TOPIC_NUM]}`,\n-    message: utils.encodeBase64(row[topicMessageColumns.MESSAGE]),\n+    message: formatTopicMessage(row[topicMessageColumns.MESSAGE], binaryMessageFormat),\n     running_hash: utils.encodeBase64(row[topicMessageColumns.RUNNING_HASH]),\n     sequence_number: parseInt(row[topicMessageColumns.SEQUENCE_NUMBER]),\n   };\n };\n \n+const formatTopicMessage = function (message, format) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxNDc4NQ==", "bodyText": "Good suggestion assuming the 'encoding=utf8/base64'\nWill wait to settle on that as without it still makes sense to check topic message format here and not in utils.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413814785", "createdAt": "2020-04-23T13:54:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -85,16 +85,21 @@ const validateGetTopicMessagesRequest = (topicId, filters) => {\n /**\n  * Format row in postgres query's result to object which is directly returned to user as json.\n  */\n-const formatTopicMessageRow = function (row) {\n+const formatTopicMessageRow = function (row, binaryMessageFormat) {\n   return {\n     consensus_timestamp: utils.nsToSecNs(row[topicMessageColumns.CONSENSUS_TIMESTAMP]),\n     topic_id: `${config.shard}.${row[topicMessageColumns.REALM_NUM]}.${row[topicMessageColumns.TOPIC_NUM]}`,\n-    message: utils.encodeBase64(row[topicMessageColumns.MESSAGE]),\n+    message: formatTopicMessage(row[topicMessageColumns.MESSAGE], binaryMessageFormat),\n     running_hash: utils.encodeBase64(row[topicMessageColumns.RUNNING_HASH]),\n     sequence_number: parseInt(row[topicMessageColumns.SEQUENCE_NUMBER]),\n   };\n };\n \n+const formatTopicMessage = function (message, format) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MTkwOA=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTc1NzA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzoyMjoxOVrOGKU0JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToyMzoxMFrOGK4VmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTk3Mg==", "bodyText": "utils.buildFilterObject should return a map from Map(param => value or [values]).\nWhen looking for limit, order, etc to make sql query or 'encoding' to get format, iterate shouldn't be the way.\nA for loop in extractSqlFromTopicMessagesRequest below does that making logic more complex than need to be.\nNot asking from perf angle (not worth worry here), but from right design perspective.\nThat way, when looking for say 'limit', we will not breaking out of loop at first instance of 'limit' and ignore if there are multiple of those (..limit=2&limit=3). In fact, we can also make validate better by ensuring that single user params are not repeated.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413479972", "createdAt": "2020-04-23T03:22:19Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +148,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const binaryMessageFormat = utils.getFilterValue(constants.filterKeys.FORMAT, filters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyNTc5MA==", "bodyText": "Yeah I went back and forth on the map vs array for the filters object.\nFor the most part there's more scenarios where you go though all the filters than cases like this where you need just one.\nIn terms of repeated params we do support them as it's user prescribed. We don't want to be too strict there case we don't know what logic they build their queries with.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413825790", "createdAt": "2020-04-23T14:07:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +148,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const binaryMessageFormat = utils.getFilterValue(constants.filterKeys.FORMAT, filters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTk3Mg=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzOTA5NQ==", "bodyText": "I believe looping on query params (or parsed query params) every time would be bad.\nWe can loop just ones on query params  and build our apiParams map.\nThen building sql query would be:\nif (apiParams.has('limit')) {\n  sqlLimitClause = \"limit X\";\n}\nif (apiParams.has('consensusTimestmap')) {\n  consensusTimestampWhereClause = .\n}\nif (apiParams.has('order')) {\n  sqlOrderClause = .\n}\n\nEarlier, I had also looked at existing scenarios, and they tool will be simpler with map.  For example, for loop in extractSqlFromTopicMessagesRequest with 3 continue.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414039095", "createdAt": "2020-04-23T18:46:51Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +148,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const binaryMessageFormat = utils.getFilterValue(constants.filterKeys.FORMAT, filters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTk3Mg=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NzU1MA==", "bodyText": "Started on this and it's a bit of a refactor to do. I can simply pull the encoding format from the query for now and address going from filter array to filter map in a separate refactor PR.\nThere's something to be said for the params that don't make sense when there's more than one value e.g. limit, order, type, result, encoding etc\nWe can think on how to handle that", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414047550", "createdAt": "2020-04-23T18:59:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +148,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const binaryMessageFormat = utils.getFilterValue(constants.filterKeys.FORMAT, filters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTk3Mg=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MTk3Nw==", "bodyText": "Captured to be addressed by #712", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414061977", "createdAt": "2020-04-23T19:23:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +148,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const binaryMessageFormat = utils.getFilterValue(constants.filterKeys.FORMAT, filters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTk3Mg=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTc1OTgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzoyMzo0M1rOGKU1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzo1MDozMVrOGKpDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4MDM1Mg==", "bodyText": "just return results.rows?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413480352", "createdAt": "2020-04-23T03:23:43Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -248,7 +268,7 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n     })\n     .then((results) => {\n       for (let i = 0; i < results.rowCount; i++) {\n-        messages.push(formatTopicMessageRow(results.rows[i]));\n+        messages.push(results.rows[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxMTQ1Nw==", "bodyText": "SO I need to figure out the javascript bug here. When I just return the value is lost and messages ends up being undefined. Can investigate and address why in a separate PR", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413811457", "createdAt": "2020-04-23T13:50:31Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -248,7 +268,7 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n     })\n     .then((results) => {\n       for (let i = 0; i < results.rowCount; i++) {\n-        messages.push(formatTopicMessageRow(results.rows[i]));\n+        messages.push(results.rows[i]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4MDM1Mg=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTc4MDExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzozMjo1NFrOGKVAiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxOTo1MFrOGKqlUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4MzE0NA==", "bodyText": "topicMessagesResponse.messages = messages.map(m \u2192 formatTopicMessageRow(m, messageFormat))", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413483144", "createdAt": "2020-04-23T03:32:54Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -152,11 +159,18 @@ const processGetTopicMessages = (req, res) => {\n \n   // get results and return formatted response\n   return getMessages(query, params).then((messages) => {\n-    topicMessagesResponse.messages = messages;\n+    // format messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNjYyNg==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r413836626", "createdAt": "2020-04-23T14:19:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -152,11 +159,18 @@ const processGetTopicMessages = (req, res) => {\n \n   // get results and return formatted response\n   return getMessages(query, params).then((messages) => {\n-    topicMessagesResponse.messages = messages;\n+    // format messages", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ4MzE0NA=="}, "originalCommit": {"oid": "015cce0c3906e698dd173ef4775c747c7bc09776"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzU0NTM5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToxMDo1NlrOGK34TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxOTo0OVrOGK6cSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1NDQ3Nw==", "bodyText": "make these agnostic to 'topicMessage' since this operation is possible for any general set of bytes. That's the reason to move to utils.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414054477", "createdAt": "2020-04-23T19:10:56Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -602,7 +614,26 @@ const encodeKey = function (key) {\n  * @return {String} base64 encoded string\n  */\n const encodeBase64 = function (buffer) {\n-  return null === buffer ? null : buffer.toString('base64');\n+  return encodeMessage(buffer, constants.topicMessageEncoding.BASE64);\n+};\n+\n+/**\n+ * Base64 encoding of a byte array for returning in JSON output\n+ * @param {Array} key Byte array to be encoded\n+ * @return {String} utf-8 encoded string\n+ */\n+const encodeUtf8 = function (buffer) {\n+  return encodeMessage(buffer, constants.topicMessageEncoding.UTF8);\n+};\n+\n+const encodeMessage = function (buffer, encoding) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NjQ1OQ==", "bodyText": "Will rename to encodeBinary as that's more appropriate", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414096459", "createdAt": "2020-04-23T20:19:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -602,7 +614,26 @@ const encodeKey = function (key) {\n  * @return {String} base64 encoded string\n  */\n const encodeBase64 = function (buffer) {\n-  return null === buffer ? null : buffer.toString('base64');\n+  return encodeMessage(buffer, constants.topicMessageEncoding.BASE64);\n+};\n+\n+/**\n+ * Base64 encoding of a byte array for returning in JSON output\n+ * @param {Array} key Byte array to be encoded\n+ * @return {String} utf-8 encoded string\n+ */\n+const encodeUtf8 = function (buffer) {\n+  return encodeMessage(buffer, constants.topicMessageEncoding.UTF8);\n+};\n+\n+const encodeMessage = function (buffer, encoding) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1NDQ3Nw=="}, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzU3MzQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/constants.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToxNzo0NlrOGK4I2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoyMDoyNFrOGK6dcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1ODcxNA==", "bodyText": "encoding (topicMessage agnostic)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414058714", "createdAt": "2020-04-23T19:17:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -45,6 +46,12 @@ const orderFilterValues = {\n   DESC: 'desc',\n };\n \n+// topic messages filter options\n+const topicMessageEncoding = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5Njc1Mw==", "bodyText": "change to characterEncoding as it's specific to what it is", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414096753", "createdAt": "2020-04-23T20:20:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -45,6 +46,12 @@ const orderFilterValues = {\n   DESC: 'desc',\n };\n \n+// topic messages filter options\n+const topicMessageEncoding = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1ODcxNA=="}, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzU3NzQ3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToxODo0OFrOGK4LTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoyMDozMVrOGK6dog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1OTM0Mw==", "bodyText": "not used anymore. Can be deleted.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414059343", "createdAt": "2020-04-23T19:18:48Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -714,19 +745,33 @@ const formatComparator = (comparator) => {\n   }\n };\n \n+const getFilterValue = (key, filters, defaultVal) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NjgwMg==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414096802", "createdAt": "2020-04-23T20:20:31Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -714,19 +745,33 @@ const formatComparator = (comparator) => {\n   }\n };\n \n+const getFilterValue = (key, filters, defaultVal) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1OTM0Mw=="}, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY2NDE5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo0MDoyMFrOGK4-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoyMToyOFrOGK6gIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjUyMg==", "bodyText": "we shouldn't expose a function just for testing if it's not used anywhere in prod code.\nTests should test for functionality in same way prod code invokes it.\nAt first I thought writing tests for filterValidityChecks would be the right thing. Digging more, looks like it is exporter by not used (so can be removed).\nThe right way is to test this via validateAndParseFilters since thats what topicmessage.js uses.\ndescribe('Encoding param checks', () => {\n  test('Verify invalid for 0', () => {\n    expect(validateAndParseFilters({key:'encoding', op:..., value: '0'}).toBe(false);\n  });\n  ....\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414072522", "createdAt": "2020-04-23T19:40:20Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -714,19 +745,33 @@ const formatComparator = (comparator) => {\n   }\n };\n \n+const getFilterValue = (key, filters, defaultVal) => {\n+  for (const filter of filters) {\n+    if (key == filter.key) {\n+      return filter.value;\n+    }\n+  }\n+\n+  return defaultVal;\n+};\n+\n module.exports = {\n   buildFilterObject: buildFilterObject,\n   buildComparatorFilter: buildComparatorFilter,\n   buildPgSqlObject: buildPgSqlObject,\n   createTransactionId: createTransactionId,\n   convertMySqlStyleQueryToPostgres: convertMySqlStyleQueryToPostgres,\n+  encodeMessage: encodeMessage,\n   encodeBase64: encodeBase64,\n+  encodeUtf8,\n   encodeKey: encodeKey,\n   ENTITY_TYPE_FILE: ENTITY_TYPE_FILE,\n   filterValidityChecks: filterValidityChecks,\n   formatComparator: formatComparator,\n+  getFilterValue,\n   getNullableNumber: getNullableNumber,\n   getPaginationLink: getPaginationLink,\n+  isValidEncoding,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NzQ0MA==", "bodyText": "Good point. Added it to the already existing validateAndParseFilters checks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414097440", "createdAt": "2020-04-23T20:21:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -714,19 +745,33 @@ const formatComparator = (comparator) => {\n   }\n };\n \n+const getFilterValue = (key, filters, defaultVal) => {\n+  for (const filter of filters) {\n+    if (key == filter.key) {\n+      return filter.value;\n+    }\n+  }\n+\n+  return defaultVal;\n+};\n+\n module.exports = {\n   buildFilterObject: buildFilterObject,\n   buildComparatorFilter: buildComparatorFilter,\n   buildPgSqlObject: buildPgSqlObject,\n   createTransactionId: createTransactionId,\n   convertMySqlStyleQueryToPostgres: convertMySqlStyleQueryToPostgres,\n+  encodeMessage: encodeMessage,\n   encodeBase64: encodeBase64,\n+  encodeUtf8,\n   encodeKey: encodeKey,\n   ENTITY_TYPE_FILE: ENTITY_TYPE_FILE,\n   filterValidityChecks: filterValidityChecks,\n   formatComparator: formatComparator,\n+  getFilterValue,\n   getNullableNumber: getNullableNumber,\n   getPaginationLink: getPaginationLink,\n+  isValidEncoding,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjUyMg=="}, "originalCommit": {"oid": "956899b755c249f359ce1d776f10096577943f00"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDMwNjkyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjozMzo1MFrOGK-0vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyMToyNVrOGLBWwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2ODI1NA==", "bodyText": "am not sure 'utf8' will work. The comparison in encodeBinary will fail and default to base64.\nFor now changing the condition in encodeBinary would be sufficient. Right now the code is bug prone since the parser, validator, api processor, and utility functions are all having to support \"alternate values\". This is bad abstraction.\nBetter way would be (in future):\n{query params} => Parse => {parsed params} => API handler\nHTTPRequest's query params are already Map<name => value/[values...]>\nParse function will\n- validate that value of a param is of expected format\n- support alternate param names or alternate values\n- be api agnostic (so basically we can't have a 'paramName' mean two different things in different apis and that's good).\n- iteratively parse each [key, value] and will finally return parsed params. For eg\nMap {\n  constants.filterKeys.LIMIT: X,\n  constants.filterKeys.ENCODING: constants.characterEncoding.UTF8,\n  constants.filterKeys.TIMESTAMP: {eq: 10},\n  ...\n}\n\nThen all the benefits mentioned previously about Map come into picture too.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414168254", "createdAt": "2020-04-23T22:33:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +143,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const messageEncoding = req.query[constants.filterKeys.ENCODING];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbebaf990d6087a80e83d2a631d01ae05a27092b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTczMA==", "bodyText": "Gosh. Yeah I missed this. Had that coverage in the initial getFilterValue and missed it when I removed it.\nDefinitely good suggestion above.\nI had similar ideas to refactor and started on it but it's a large PR than this so halted.\nWill add your suggestion to the ticket I opened.\nFor now I updated the condition to be more exhaustive on the matching and used the constant utf value. Also added the unit tests that should have caught this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/704#discussion_r414209730", "createdAt": "2020-04-24T00:21:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -143,6 +143,8 @@ const processGetTopicMessages = (req, res) => {\n   // build sql query validated param and filters\n   let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n \n+  const messageEncoding = req.query[constants.filterKeys.ENCODING];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2ODI1NA=="}, "originalCommit": {"oid": "bbebaf990d6087a80e83d2a631d01ae05a27092b"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 991, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}