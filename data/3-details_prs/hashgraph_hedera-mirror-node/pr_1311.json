{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTcyNDY1", "number": 1311, "title": "Publish topic messages to redis in a separate thread", "bodyText": "Detailed description:\nThis PR changes RedisEntityListener to publish topic messages to redis in a separate thread so as to improve ingestion throughput and latency especially under heavy HCS traffic.\n\nPublish topic messages to redis in a separate thread\nIgnore duplicate topic messages, e.g., when parsing fails at the middle and the record file is reprocessed later\n\nWhich issue(s) this PR fixes:\nFixes #1308\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-12-02T17:25:37Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311", "merged": true, "mergeCommit": {"oid": "37143536977c12b97f8548a52ebd619ab215557c"}, "closed": true, "closedAt": "2020-12-11T22:42:19Z", "author": {"login": "xin-hedera"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkkKecABqjQwOTE2ODQ2OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlPD7bAFqTU1MDU5ODM0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7183ae326cd6637bb6ea8814050681d97b9cb71", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d7183ae326cd6637bb6ea8814050681d97b9cb71", "committedDate": "2020-12-09T17:37:09Z", "message": "fix InterruptedException handling and address code smells\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}, "afterCommit": {"oid": "cfa1b74143bb1c0703a84cf57b0decc0e1c523ea", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cfa1b74143bb1c0703a84cf57b0decc0e1c523ea", "committedDate": "2020-12-09T19:44:28Z", "message": "- publish topic messages to redis service in a separate thread\n- integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0eb230840ae026138a88bbc0bf96304f068e607f", "committedDate": "2020-12-09T19:47:07Z", "message": "- publish topic messages to redis service in a separate thread\n- integration tests\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfa1b74143bb1c0703a84cf57b0decc0e1c523ea", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cfa1b74143bb1c0703a84cf57b0decc0e1c523ea", "committedDate": "2020-12-09T19:44:28Z", "message": "- publish topic messages to redis service in a separate thread\n- integration tests"}, "afterCommit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0eb230840ae026138a88bbc0bf96304f068e607f", "committedDate": "2020-12-09T19:47:07Z", "message": "- publish topic messages to redis service in a separate thread\n- integration tests\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NTU3Njky", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-548557692", "createdAt": "2020-12-09T19:57:38Z", "commit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo1NzozOFrOICm0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo1NzozOFrOICm0VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwNDA1Mw==", "bodyText": "leave TASK_QUEUE_SIZE as a static non-configurable field due to spring validation penalty on redisProperties.isEnabled() which is checked in every onSave() invocation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539604053", "createdAt": "2020-12-09T19:57:38Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -51,22 +56,31 @@\n @RequiredArgsConstructor\n public class RedisEntityListener implements BatchEntityListener {\n \n+    public static final int TASK_QUEUE_SIZE = 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzIyMTQ1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-548722145", "createdAt": "2020-12-10T00:17:28Z", "commit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoxNzoyOFrOICvhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozMDo1MVrOICv2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0NjYzMA==", "bodyText": "make this a comment since there's an intention behind it", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539746630", "createdAt": "2020-12-10T00:17:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -51,22 +56,31 @@\n @RequiredArgsConstructor\n public class RedisEntityListener implements BatchEntityListener {\n \n+    public static final int TASK_QUEUE_SIZE = 8;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwNDA1Mw=="}, "originalCommit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0OTEyOA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // batch save action may run asynchronously, trigger it before other operations can reduce latency\n          \n          \n            \n                        // batch save action may run asynchronously, triggering it before other operations can reduce latency\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // batch save action may run asynchronously, trigger it before other operations can reduce latency\n          \n          \n            \n                        // batch save action may run asynchronously, trigger it before other operations to potentially reduce latency", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539749128", "createdAt": "2020-12-10T00:23:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -184,6 +184,9 @@ private void executeBatches() {\n         Connection connection = null;\n \n         try {\n+            // batch save action may run asynchronously, trigger it before other operations can reduce latency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MjA3Ng==", "bodyText": "nit: please add a bit more content to this to highlight the intricacies of the flux here.\nIf my understanding is correct you're generating topicmessage and adding to the sink, whiles supporting subscription on a single thread with messages in the pipeline converted and published.\nThis is something I'm pushing for with all our reactive streams to ensure the intent is clear and make it easier to understand and manage future changes/improvements.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539752076", "createdAt": "2020-12-10T00:30:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -77,20 +91,39 @@ public boolean isEnabled() {\n \n     @Override\n     public void onTopicMessage(TopicMessage topicMessage) throws ImporterException {\n+        long consensusTimestamp = topicMessage.getConsensusTimestamp();\n+        if (consensusTimestamp <= lastConsensusTimestamp) {\n+            return;\n+        }\n+\n+        lastConsensusTimestamp = consensusTimestamp;\n         topicMessages.add(topicMessage);\n     }\n \n     @Override\n     @EventListener\n-    public void onSave(EntityBatchSaveEvent event) {\n-        try {\n-            if (isEnabled()) {\n-                Stopwatch stopwatch = Stopwatch.createStarted();\n-                timer.record(() -> redisOperations.executePipelined(callback()));\n-                log.info(\"Finished notifying {} messages in {}\", topicMessages.size(), stopwatch);\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Unable to publish to redis\", e);\n+    public void onSave(EntityBatchSaveEvent event) throws InterruptedException {\n+        if (!isEnabled() || topicMessages.isEmpty()) {\n+            return;\n+        }\n+\n+        // defer flux, subscription, and scheduler creation\n+        if (subscription == null) {\n+            // run the flux operations in a different thread", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eb230840ae026138a88bbc0bf96304f068e607f"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e04643e8339a32c3feff3bb91d21cd1e08b1157c", "committedDate": "2020-12-10T05:31:23Z", "message": "address feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTA4NTgw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-548908580", "createdAt": "2020-12-10T07:16:07Z", "commit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoxNjowOFrOIC6otQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoxNjowOFrOIC6otQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkyODc1Nw==", "bodyText": "I'm still learning the ins and outs of Flux, if there were a period where no messages were coming in would this cause the complete() to close the Flux?  And then what would happen if messages were then to come in later, would it generate a new Flux?  This code looks good, just trying to make sure I understand.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539928757", "createdAt": "2020-12-10T07:16:08Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -101,12 +138,37 @@ public void onCleanup(EntityBatchCleanupEvent event) {\n         topicMessages.clear();\n     }\n \n+    private void generate(SynchronousSink<List<TopicMessage>> sink) {\n+        try {\n+            List<TopicMessage> messages = topicMessagesQueue.take();\n+            if (messages.isEmpty()) {\n+                sink.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTE3MDM3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-548917037", "createdAt": "2020-12-10T07:31:32Z", "commit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzozMTozM1rOIC7K1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzozNDo0MFrOIC7Q4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzNzQ5Mw==", "bodyText": "nit: I would name this something a little clearer, maybe latestMessageBatch.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539937493", "createdAt": "2020-12-10T07:31:33Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -77,20 +93,41 @@ public boolean isEnabled() {\n \n     @Override\n     public void onTopicMessage(TopicMessage topicMessage) throws ImporterException {\n+        long consensusTimestamp = topicMessage.getConsensusTimestamp();\n+        if (consensusTimestamp <= lastConsensusTimestamp) {\n+            return;\n+        }\n+\n+        lastConsensusTimestamp = consensusTimestamp;\n         topicMessages.add(topicMessage);\n     }\n \n     @Override\n     @EventListener\n-    public void onSave(EntityBatchSaveEvent event) {\n-        try {\n-            if (isEnabled()) {\n-                Stopwatch stopwatch = Stopwatch.createStarted();\n-                timer.record(() -> redisOperations.executePipelined(callback()));\n-                log.info(\"Finished notifying {} messages in {}\", topicMessages.size(), stopwatch);\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Unable to publish to redis\", e);\n+    public void onSave(EntityBatchSaveEvent event) throws InterruptedException {\n+        if (!isEnabled() || topicMessages.isEmpty()) {\n+            return;\n+        }\n+\n+        // defer flux, subscription, and scheduler creation\n+        if (subscription == null) {\n+            // create a flux from the generator to pull then pump the topic messages list, immediately subscribe to the\n+            // flux to publish the topic messages list to redis service. With subscribeOn the new single thread\n+            // scheduler, the whole flux pipeline runs in a single thread.\n+            subscription = Flux.generate(this::generate)\n+                    .doOnSubscribe(s -> log.info(\"Starting redis publish flow\"))\n+                    .doFinally(s -> log.info(\"Redis publish flow stopped with {} signal\", s))\n+                    .doOnError(t -> log.error(\"Unexpected error during redis publish flow\", t))\n+                    .subscribeOn(Schedulers.newSingle(\"redis-publish\"))\n+                    .subscribe(this::publish);\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> topicMessagesQueue.offer(new ArrayList<>())));\n+        }\n+\n+        List<TopicMessage> messages = topicMessages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzOTA0MQ==", "bodyText": "nit: I would prefer either messages or topicMessages be renamed, having a hard time following which is which at times.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r539939041", "createdAt": "2020-12-10T07:34:40Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListenerTest.java", "diffHunk": "@@ -60,4 +82,86 @@ public RedisEntityListenerTest(RedisEntityListener entityListener, RedisProperti\n         redisOperations.execute(redisCallback);\n         return processor;\n     }\n+\n+    @Test\n+    void onDuplicateTopicMessages() throws InterruptedException {\n+        // given\n+        TopicMessage topicMessage1 = topicMessage();\n+        TopicMessage topicMessage2 = topicMessage();\n+        TopicMessage topicMessage3 = topicMessage();\n+        Flux<TopicMessage> topicMessages = subscribe(topicMessage1.getTopicNum());\n+\n+        // when\n+        entityListener.onTopicMessage(topicMessage1);\n+        entityListener.onTopicMessage(topicMessage2);\n+        entityListener.onTopicMessage(topicMessage1); // duplicate\n+        entityListener.onTopicMessage(topicMessage2); // duplicate\n+        entityListener.onTopicMessage(topicMessage3);\n+        entityListener.onSave(new EntityBatchSaveEvent(this));\n+        entityListener.onCleanup(new EntityBatchCleanupEvent(this));\n+\n+        // then\n+        topicMessages.as(StepVerifier::create)\n+                .expectNext(topicMessage1, topicMessage2, topicMessage3)\n+                .thenCancel()\n+                .verify(Duration.ofMillis(1000));\n+    }\n+\n+    @Test\n+    void onSlowPublish() {\n+        CountDownLatch latch = new CountDownLatch(1);\n+        AtomicInteger saveCount = new AtomicInteger(0);\n+\n+        // given\n+        List<TopicMessage> messages = new ArrayList<>();\n+        for (int i = 0; i < RedisEntityListener.TASK_QUEUE_SIZE + 2; i++) {\n+            messages.add(topicMessage());\n+        }\n+        Flux<TopicMessage> topicMessages = subscribe(messages.get(0).getTopicNum());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e04643e8339a32c3feff3bb91d21cd1e08b1157c"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d56c995855f34378dfecfcf44f2af43a7d75f2bb", "committedDate": "2020-12-10T20:26:29Z", "message": "address feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTg1NTU1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-549585555", "createdAt": "2020-12-10T20:43:07Z", "commit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjMwOTcy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-549630972", "createdAt": "2020-12-10T21:49:30Z", "commit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjI0NjM3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-549624637", "createdAt": "2020-12-10T21:40:05Z", "commit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTo0MDowNlrOIDegUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTo1MToyNFrOIDe5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxNjQzMw==", "bodyText": "When I said we should consider Flux I meant replace things entirely with it. We shouldn't mix and match non-blocking Flux with blocking queues and regular array lists. We should either use all flux or all BlockingQueue with a regular thread. For latter can just have a method like below:\n@Async\n@EventListener\npublic void onStartup(ApplicationReadyEvent event) {\n  while (true) {\n    publish(topicMessagesQueue.take());\n  }\n}\nFor Flux only approach, can actually remove queue and list and just create a flux on startup like below (exact processor, overflow strategy and values would need to be investigated):\nvoid init() {\n  DirectProcessor<TopicMessage> directProcessor = DirectProcessor.create();\n  topicMessageSink = directProcessor.sink();\n  directProcessor.filter(last timestamp)\n    .bufferTimeout(1000, Duration.ofSeconds(1))\n    .subscribeOn(Schedulers.single())\n    .subscribe(this::publish);\n}\n\npublic void onTopicMessage(TopicMessage topicMessage) {\n  topicMessageSink.next(topicMessage);\n}\nFlux only approach would have the added benefit of allowing us to remove batch onSave() and make the class stateless.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r540516433", "createdAt": "2020-12-10T21:40:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -51,22 +56,33 @@\n @RequiredArgsConstructor\n public class RedisEntityListener implements BatchEntityListener {\n \n+    // hardcode it now to avoid spring validation performance penalty incurred on RedisProperties.isEnabled() if it were\n+    // added to RedisProperties with validation annotations\n+    public static final int TASK_QUEUE_SIZE = 8;\n+\n     private final MirrorProperties mirrorProperties;\n     private final RedisProperties redisProperties;\n     private final RedisOperations<String, StreamMessage> redisOperations;\n-    private final List<TopicMessage> topicMessages = new ArrayList<>();\n     private final MeterRegistry meterRegistry;\n \n+    private long lastConsensusTimestamp;\n+    private Disposable subscription;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxNzIzMg==", "bodyText": "Should be made volatile or AtomicLong. Sonar seems to complain about volatile even when used properly, so maybe AtomicLong.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r540517232", "createdAt": "2020-12-10T21:41:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -51,22 +56,33 @@\n @RequiredArgsConstructor\n public class RedisEntityListener implements BatchEntityListener {\n \n+    // hardcode it now to avoid spring validation performance penalty incurred on RedisProperties.isEnabled() if it were\n+    // added to RedisProperties with validation annotations\n+    public static final int TASK_QUEUE_SIZE = 8;\n+\n     private final MirrorProperties mirrorProperties;\n     private final RedisProperties redisProperties;\n     private final RedisOperations<String, StreamMessage> redisOperations;\n-    private final List<TopicMessage> topicMessages = new ArrayList<>();\n     private final MeterRegistry meterRegistry;\n \n+    private long lastConsensusTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxOTQ5MA==", "bodyText": "Shouldn't remove generics. Sonar will most likely complain", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r540519490", "createdAt": "2020-12-10T21:45:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -101,12 +138,37 @@ public void onCleanup(EntityBatchCleanupEvent event) {\n         topicMessages.clear();\n     }\n \n+    private void generate(SynchronousSink<List<TopicMessage>> sink) {\n+        try {\n+            List<TopicMessage> messages = topicMessagesQueue.take();\n+            if (messages.isEmpty()) {\n+                sink.complete();\n+            } else {\n+                sink.next(messages);\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Unable to retrieve topicMessages from the blocking queue\", e);\n+            sink.error(new RuntimeException(\"Unexpected error when generating messages for the flow\", e));\n+        }\n+    }\n+\n+    private void publish(List<TopicMessage> messages) {\n+        try {\n+            Stopwatch stopwatch = Stopwatch.createStarted();\n+            timer.record(() -> redisOperations.executePipelined(callback(messages)));\n+            log.info(\"Finished notifying {} messages in {}\", messages.size(), stopwatch);\n+            messages.clear();\n+        } catch (Exception e) {\n+            log.error(\"Unable to publish to redis\", e);\n+        }\n+    }\n+\n     // Batch send using Redis pipelining\n-    private <K, V> SessionCallback<Object> callback() {\n+    private SessionCallback<Object> callback(List<TopicMessage> messages) {\n         return new SessionCallback<>() {\n             @Override\n-            public <K, V> Object execute(RedisOperations<K, V> operations) throws DataAccessException {\n-                for (TopicMessage topicMessage : topicMessages) {\n+            public Object execute(RedisOperations operations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyMDQ3OA==", "bodyText": "Should probably onErrorContinue since we never want to stop publishing and not know about it or keep trying.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r540520478", "createdAt": "2020-12-10T21:47:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -77,20 +93,41 @@ public boolean isEnabled() {\n \n     @Override\n     public void onTopicMessage(TopicMessage topicMessage) throws ImporterException {\n+        long consensusTimestamp = topicMessage.getConsensusTimestamp();\n+        if (consensusTimestamp <= lastConsensusTimestamp) {\n+            return;\n+        }\n+\n+        lastConsensusTimestamp = consensusTimestamp;\n         topicMessages.add(topicMessage);\n     }\n \n     @Override\n     @EventListener\n-    public void onSave(EntityBatchSaveEvent event) {\n-        try {\n-            if (isEnabled()) {\n-                Stopwatch stopwatch = Stopwatch.createStarted();\n-                timer.record(() -> redisOperations.executePipelined(callback()));\n-                log.info(\"Finished notifying {} messages in {}\", topicMessages.size(), stopwatch);\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Unable to publish to redis\", e);\n+    public void onSave(EntityBatchSaveEvent event) throws InterruptedException {\n+        if (!isEnabled() || topicMessages.isEmpty()) {\n+            return;\n+        }\n+\n+        // defer flux, subscription, and scheduler creation\n+        if (subscription == null) {\n+            // create a flux from the generator to pull then pump the topic messages list, immediately subscribe to the\n+            // flux to publish the topic messages list to redis service. With subscribeOn the new single thread\n+            // scheduler, the whole flux pipeline runs in a single thread.\n+            subscription = Flux.generate(this::generate)\n+                    .doOnSubscribe(s -> log.info(\"Starting redis publish flow\"))\n+                    .doFinally(s -> log.info(\"Redis publish flow stopped with {} signal\", s))\n+                    .doOnError(t -> log.error(\"Unexpected error during redis publish flow\", t))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyMjg1Mw==", "bodyText": "There's not really any point in clearing this anymore, right?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r540522853", "createdAt": "2020-12-10T21:51:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -101,12 +138,37 @@ public void onCleanup(EntityBatchCleanupEvent event) {\n         topicMessages.clear();\n     }\n \n+    private void generate(SynchronousSink<List<TopicMessage>> sink) {\n+        try {\n+            List<TopicMessage> messages = topicMessagesQueue.take();\n+            if (messages.isEmpty()) {\n+                sink.complete();\n+            } else {\n+                sink.next(messages);\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Unable to retrieve topicMessages from the blocking queue\", e);\n+            sink.error(new RuntimeException(\"Unexpected error when generating messages for the flow\", e));\n+        }\n+    }\n+\n+    private void publish(List<TopicMessage> messages) {\n+        try {\n+            Stopwatch stopwatch = Stopwatch.createStarted();\n+            timer.record(() -> redisOperations.executePipelined(callback(messages)));\n+            log.info(\"Finished notifying {} messages in {}\", messages.size(), stopwatch);\n+            messages.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56c995855f34378dfecfcf44f2af43a7d75f2bb"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476ac3757e60f0527527237c099195bb43b73a45", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/476ac3757e60f0527527237c099195bb43b73a45", "committedDate": "2020-12-11T03:45:44Z", "message": "remove flux, use single thread executor to run the publish task\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjQxNDUy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550241452", "createdAt": "2020-12-11T16:17:53Z", "commit": {"oid": "476ac3757e60f0527527237c099195bb43b73a45"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjc5Nzc3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550279777", "createdAt": "2020-12-11T16:51:35Z", "commit": {"oid": "476ac3757e60f0527527237c099195bb43b73a45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1MTozNlrOIEBO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1MTozNlrOIEBO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4NTM5Mg==", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#discussion_r541085392", "createdAt": "2020-12-11T16:51:36Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/redis/RedisEntityListener.java", "diffHunk": "@@ -51,23 +55,43 @@\n @RequiredArgsConstructor\n public class RedisEntityListener implements BatchEntityListener {\n \n+    // hardcode it now to avoid spring validation performance penalty incurred on RedisProperties.isEnabled() if it were\n+    // added to RedisProperties with validation annotations\n+    public static final int TASK_QUEUE_SIZE = 8;\n+\n     private final MirrorProperties mirrorProperties;\n     private final RedisProperties redisProperties;\n     private final RedisOperations<String, StreamMessage> redisOperations;\n-    private final List<TopicMessage> topicMessages = new ArrayList<>();\n     private final MeterRegistry meterRegistry;\n \n+    private AtomicLong lastConsensusTimestamp;\n     private Timer timer;\n+    private List<TopicMessage> topicMessages;\n+    private BlockingQueue<List<TopicMessage>> topicMessagesQueue;\n     private String topicPrefix;\n \n     @PostConstruct\n     void init() {\n+        lastConsensusTimestamp = new AtomicLong(0);\n         timer = Timer.builder(\"hedera.mirror.importer.publish.duration\")\n                 .description(\"The amount of time it took to publish the domain entity\")\n                 .tag(\"entity\", TopicMessage.class.getSimpleName())\n                 .tag(\"type\", \"redis\")\n                 .register(meterRegistry);\n+        topicMessages = new ArrayList<>();\n+        topicMessagesQueue = new ArrayBlockingQueue<>(TASK_QUEUE_SIZE);\n         topicPrefix = \"topic.\" + mirrorProperties.getShard() + \".\"; // Cache to avoid reflection penalty\n+\n+        Executor executor = Executors.newSingleThreadExecutor();\n+        executor.execute(() -> {\n+            try {\n+                while (true) {\n+                    publish(topicMessagesQueue.take());\n+                }\n+            } catch (InterruptedException ex) {\n+                //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476ac3757e60f0527527237c099195bb43b73a45"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNDc3NzMz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550477733", "createdAt": "2020-12-11T18:53:51Z", "commit": {"oid": "476ac3757e60f0527527237c099195bb43b73a45"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84e91cfba2e2ae607a7683089f8c794520a4218d", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/84e91cfba2e2ae607a7683089f8c794520a4218d", "committedDate": "2020-12-11T20:21:31Z", "message": "address feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTU0MzY5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550554369", "createdAt": "2020-12-11T20:25:36Z", "commit": {"oid": "84e91cfba2e2ae607a7683089f8c794520a4218d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTY5Mzkw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550569390", "createdAt": "2020-12-11T20:51:57Z", "commit": {"oid": "84e91cfba2e2ae607a7683089f8c794520a4218d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTk4MzQ2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1311#pullrequestreview-550598346", "createdAt": "2020-12-11T21:45:18Z", "commit": {"oid": "84e91cfba2e2ae607a7683089f8c794520a4218d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3391, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}