{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzczNTQz", "number": 541, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1NDoxN1rODg2V2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1NDoxN1rODg2V2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzcxMzU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1NDoxN1rOFrSDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozMTo0MFrOFrwqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyODgxNg==", "bodyText": "q: can results be cached? So in the cases of repeated calls we don't waste db resources checking", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/541#discussion_r380928816", "createdAt": "2020-02-18T20:54:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.hedera.mirror.grpc.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.data.r2dbc.repository.Query;\n+import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n+import reactor.core.publisher.Mono;\n+\n+import com.hedera.mirror.grpc.domain.Entity;\n+\n+public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+\n+    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4ab388a6836465c56fed450e6182018f148d2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzNTI1Mg==", "bodyText": "We can only cache the existence of an entity. Caching the non-existence of an entity would introduce additional delays to being able to subscribe after create and risk causing further issues with when to invalidate the cache.\nCaching with Flux is a bit more complex than I thought. Spring does not support @Cacheable with Flux, so you have to use reactor-extra with its CacheMono and a cache library like Caffeine.\nAfter attempting it, I found that it does cache the non-existence of entities in addition to existence. I'm not sure how to tweak it to not do that, so don't think I can do this recommendation at this time.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/541#discussion_r381035252", "createdAt": "2020-02-19T01:45:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.hedera.mirror.grpc.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.data.r2dbc.repository.Query;\n+import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n+import reactor.core.publisher.Mono;\n+\n+import com.hedera.mirror.grpc.domain.Entity;\n+\n+public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+\n+    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyODgxNg=="}, "originalCommit": {"oid": "36d4ab388a6836465c56fed450e6182018f148d2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMDMxMQ==", "bodyText": "Sounds good, brings in too many uncertainties so we can explore this another time. Hopefully reactor has made more caching progress", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/541#discussion_r381430311", "createdAt": "2020-02-19T17:31:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.hedera.mirror.grpc.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.data.r2dbc.repository.Query;\n+import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n+import reactor.core.publisher.Mono;\n+\n+import com.hedera.mirror.grpc.domain.Entity;\n+\n+public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+\n+    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyODgxNg=="}, "originalCommit": {"oid": "36d4ab388a6836465c56fed450e6182018f148d2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1152, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}