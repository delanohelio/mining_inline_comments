{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjkzNDQ2", "number": 1319, "title": "TimescaleDB : Add Flyway v2 migrations in support of new schema", "bodyText": "Detailed description:\nIn support of timescale db the current db schema and migration would need to be updated w v2 files.\nAlso given all the migrations in v1 we can start afresh with a cleaner schema\n\nAdd v2.0.0 migration sql file that creates the tables\nAdd v2.0.1 migration sql file to create hyper tables\nAdd v2.0.2 migration sql file to create necessary indexes\nAdd v2.0.3 migration sql file to create compression policies\nUpdate bootstrap yaml to set embedded.postgres.docker-image file as this needs to be set before application context is populated\n\nWhich issue(s) this PR fixes:\nFixes #1306\nSpecial notes for your reviewer:\n\nVerified switching between v1 and v2 as well as container only switch works with simple yaml updates\nThere's optimization to be done on the chunking side. Which should be explored in conjunction with performance testing\n\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-12-04T17:58:40Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319", "merged": true, "mergeCommit": {"oid": "da65e8aa1e58965f5701e5a12b00d7998dc93248"}, "closed": true, "closedAt": "2020-12-14T18:35:57Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjJ8w3AFqTU0NTU3NzAwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmKGXvAFqTU1MTc3OTczOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTc3MDAx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-545577001", "createdAt": "2020-12-05T10:37:32Z", "commit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMDozNzozMlrOH_zeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMDozOToyMlrOH_ziKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2NTYzMw==", "bodyText": "Probably don't need to ingest FileData entries as the db environment is new and file_data should be empty.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r536665633", "createdAt": "2020-12-05T10:37:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        if (Utility.skipMigrationVersion(getVersion(), context.getConfiguration())) {\n+            return;\n+        }\n+\n+        jdbcTemplate = new JdbcTemplate(dataSource);\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+        byte[] addressBookBytes;\n+\n+        // if address book table is not empty skip migration\n+        try {\n+            // addressBookService throws when No valid address book found in DB\n+            addressBookService.getCurrent();\n+            log.warn(\"Address books exist in address_book table. Skipping migration\");\n+            return;\n+        } catch (IllegalStateException ex) {\n+            log.debug(\"No address book found in db. Searching for address book on file system\");\n+        }\n+\n+        // retrieve bootstrap address book from filesystem or classpath\n+        try {\n+            Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+            if (initialAddressBook != null) {\n+                addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                        initialAddressBook);\n+            } else {\n+                MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                Resource resource = new ClassPathResource(resourcePath, getClass());\n+                addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Unable to load bootstrap address book\", e);\n+        }\n+\n+        FileData bootStrapFileData = new FileData(0L, addressBookBytes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2NjY2NA==", "bodyText": "nit: If possible get variable to work. If not remove these lines", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r536666664", "createdAt": "2020-12-05T10:39:22Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTUwMDY0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-546550064", "createdAt": "2020-12-07T21:26:56Z", "commit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNjo1NlrOIA7cqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjowMzoxMFrOIBlxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDkwNw==", "bodyText": "Why are there two locations? Most of this info looks the same as the one in the classpath. Is there any where else to specify this info as these circleci config hacks will go away once we switch to Github actions. They've only been used to configure containers since we couldn't use test containers.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537844907", "createdAt": "2020-12-07T21:26:56Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -125,6 +125,10 @@ commands:\n                 grpc:\n                   \\<<: *db\n             spring:\n+              flyway:\n+                baseline-version: 0\n+                locations: \"filesystem:./src/main/resources/db/migration/v1,filesystem:../hedera-mirror-importer/src/main/resources/db/migration/v1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NzY4NQ==", "bodyText": "Should use camel case variant like others", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537847685", "createdAt": "2020-12-07T21:31:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/resources/config/application.yml", "diffHunk": "@@ -31,16 +31,17 @@ spring:\n     url: jdbc:postgresql://${hedera.mirror.grpc.db.host}:${hedera.mirror.grpc.db.port}/${hedera.mirror.grpc.db.name}\n     username: ${hedera.mirror.grpc.db.username}\n   flyway:\n-    connectRetries: 10\n     baselineOnMigrate: true\n-    baselineVersion: 0\n+    baseline-version: 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTIxNQ==", "bodyText": "Why can't we use latest-pg12 now?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537849215", "createdAt": "2020-12-07T21:34:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,6 +1,7 @@\n embedded:\n   postgresql:\n     enabled: true\n-    docker-image: postgres:9.6-alpine\n+    # set to timescale/timescaledb:latest-pg11 for v2 db schema. Eventually we'll want to use latest-pg12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDY3Mg==", "bodyText": "Would prefer this logic in an abstract base class that extends BaseJavaMigration. Utility methods should be avoided if at all possible as an anti-pattern.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537864672", "createdAt": "2020-12-07T21:59:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -505,4 +507,21 @@ public static boolean verifyHashChain(\n         }\n         return false;\n     }\n+\n+    /**\n+     * Determine whether a java migration should be skipped based on version and isIgnoreMissingMigrations setting\n+     *\n+     * @param current                The current java migration version\n+     * @param migrationConfiguration flyway Configuration\n+     * @return\n+     */\n+    public static boolean skipMigrationVersion(MigrationVersion current, Configuration migrationConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTQ4MQ==", "bodyText": "A ton of code duplication. The two address book migrations should extend the same base class and share 99% of their code.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537865481", "createdAt": "2020-12-07T22:01:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjEzNA==", "bodyText": "There's no test for this class so there's ton of missed coverage warnings here. Should add a test and similarly have a common base test class to reduce duplication.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537866134", "createdAt": "2020-12-07T22:02:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NzExMA==", "bodyText": "extra n should be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537877110", "createdAt": "2020-12-07T22:21:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -70,15 +70,18 @@ spring:\n         reWriteBatchedInserts: true\n       maximumPoolSize: 14 # recommended connections = ((core_count * 2) + effective_spindle_count), though somewhat outdated as we use SSDs\n   flyway:\n-    connectRetries: 20\n+    # set baselineVersion as large v1 version and target as high v2 version to run v2 migrations only\n     baselineOnMigrate: true\n     baselineVersion: 0\n+    connectRetries: 20\n     ignoreMissingMigrations: true\n+    locations: \"classpath:db/migration/v1\"\n     placeholders:\n-      api-password: ${hedera.mirror.importer.db.restPassword}\n+      api-password: ${hedera.mirror.importer.db.restPassword}n", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODI1NA==", "bodyText": "Now that we have to run this migration again, should we consider moving this logic into AddressBookService and running every startup if address_book is empty? Or even better, can run lazy on first call to getCurrent().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537878254", "createdAt": "2020-12-07T22:23:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V2_0_3__Address_Book.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class V2_0_3__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final MirrorProperties mirrorProperties;\n+    private final DataSource dataSource;\n+    private static final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > ? and entity_id \" +\n+            \"in (101, 102) order by consensus_timestamp asc limit ?\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V2_0_3__Address_Book(MirrorProperties mirrorProperties, @Lazy AddressBookService addressBookService,\n+                                DataSource dataSource) {\n+        this.addressBookService = addressBookService;\n+        this.mirrorProperties = mirrorProperties;\n+        this.dataSource = dataSource;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        if (Utility.skipMigrationVersion(getVersion(), context.getConfiguration())) {\n+            return;\n+        }\n+\n+        jdbcTemplate = new JdbcTemplate(dataSource);\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+        byte[] addressBookBytes;\n+\n+        // if address book table is not empty skip migration\n+        try {\n+            // addressBookService throws when No valid address book found in DB\n+            addressBookService.getCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3OTMxNQ==", "bodyText": "Undo indentation as it breaks the config for pubsub and redis", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537879315", "createdAt": "2020-12-07T22:24:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,11 +1,11 @@\n embedded:\n   postgresql:\n-    enabled: true\n-    docker-image: postgres:9.6-alpine\n-  google:\n-    pubsub:\n-      # Adding embedded containers' dependencies enables them by default. However, only few tests needs pubsub emulator,\n-      # so it is enabled only for those tests.\n-      enabled: false\n-  redis:\n-    docker-image: redis:5.0.9-alpine\n+    # set to timescale/timescaledb:latest-pg11 for v2 db schema. Eventually we'll want to use latest-pg12\n+    docker-image: postgres:9.6-alpine #  postgres:12-alpine is current default\n+google:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDI2Mg==", "bodyText": "Why are we grouping by so many fields here and below? This can't be good performance or functionally correct.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537880262", "createdAt": "2020-12-07T22:26:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -154,7 +154,7 @@ const getTransactionsOuterQuery = function (innerQuery, order) {\n        LEFT OUTER JOIN token_transfer ttl\n          ON t.type = ${constants.transactionTypes.CRYPTOTRANSFER}\n          AND tlist.consensus_timestamp = ttl.consensus_timestamp\n-     GROUP BY t.consensus_ns, ctl_entity_id, ctl.amount, ttr.result, ttt.name\n+     GROUP BY t.consensus_ns, ctl_entity_id, ctl.amount, ttr.result, ttt.name, t.payer_account_id, t.memo, t.valid_start_ns, t.node_account_id, t.charged_tx_fee, t.valid_duration_seconds, t.max_fee, t.transaction_hash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MzUxOQ==", "bodyText": "I'm not a fan of these domains as they're PostgreSQL specific, they obfuscate the underlying type when looking at a particular table schema, their implementation is not easily discoverable without digging through past migrations and we're not using the features that might make them worthwhile like constraints.\nRecommend removing as long as it's still compatible with importing from the old data.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r537883519", "createdAt": "2020-12-07T22:32:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.0__time_scale_init.sql", "diffHunk": "@@ -0,0 +1,475 @@\n+-------------------\n+-- Init mirror node db, defining table schema\n+-- Supports mirror nodes migrated from v1.0\n+-------------------\n+\n+-- domains\n+create domain hbar_tinybars as bigint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMzMzNQ==", "bodyText": "Why do we add some constraints in this migration and some in v2.0.0? I would prefer constraints inline in the create table.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538503335", "createdAt": "2020-12-08T15:32:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.2__time_scale_index_init.sql", "diffHunk": "@@ -0,0 +1,85 @@\n+-------------------\n+-- Add constraints and indexes to tables\n+-------------------\n+\n+-- account_balance\n+alter table account_balance\n+    add constraint account_balance__pk primary key (consensus_timestamp, account_id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwODU0MA==", "bodyText": "Why do we need to create indexes in a separate file? Does it help with migration? Do we do 2.0.0 and 2.0.1 then stop and migrate data, then do 2.0.2? And doing that way greatly speeds things up?\nOtherwise, I would prefer index creation be done inline in the create table statement for better atomicity and clarity. That way we can reference one file for the schema structure.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538508540", "createdAt": "2020-12-08T15:37:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.2__time_scale_index_init.sql", "diffHunk": "@@ -0,0 +1,85 @@\n+-------------------\n+-- Add constraints and indexes to tables\n+-------------------\n+\n+-- account_balance\n+alter table account_balance\n+    add constraint account_balance__pk primary key (consensus_timestamp, account_id);\n+create index if not exists account_balance__account_timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNTg2NA==", "bodyText": "id is just a generated ID. We should probably use consensus_start. We could potentially get rid of id in the future.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538515864", "createdAt": "2020-12-08T15:43:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNjYzNQ==", "bodyText": "We should remove explicit chunk_time_interval unless we're setting it different from the default.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538516635", "createdAt": "2020-12-08T15:44:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw==", "bodyText": "Have we done any analysis on what a good chunk interval is for our data set? This seems like a pretty important variable to get right.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538517667", "createdAt": "2020-12-08T15:44:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMjQ0NA==", "bodyText": "There's no create_distributed_hypertable in here. We said we would start using TimescaleDB 2.0 which has distributed hypertables. Distributed hypertables also can take multiple columns to index on so we can add realm, shard or entity Ids.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538522444", "createdAt": "2020-12-08T15:49:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNDkwOQ==", "bodyText": "We should consider enabling compression by default. It provides 90+% storage improvements and can improve query performance.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538534909", "createdAt": "2020-12-08T15:59:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzNzEzMg==", "bodyText": "Should probably use created_timestamp instead as it's the consensus timestamp.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538537132", "createdAt": "2020-12-08T16:01:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);\n+\n+-- t_application_status\n+\n+-- t_entities\n+select create_hypertable('t_entities', 'id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- t_entity_types hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_results hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_types hyper table skipped as table rarely gets updated\n+\n+-- token\n+select create_hypertable('token', 'token_id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- token_account\n+select create_hypertable('token_account', 'id', chunk_time_interval => 10000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzODQzNQ==", "bodyText": "Should probably use created_timestamp instead as it's the consensus timestamp.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r538538435", "createdAt": "2020-12-08T16:03:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- \\set default_chunk_time_interval 604800000000000;\n+-- \\set default_chunk_id_interval 10000;\n+\n+-- Extend the database with TimescaleDB\n+create extension if not exists timescaledb cascade;\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => 604800000000000, if_not_exists => true);\n+\n+-- address_book skipped because foreign keys are supported with hyper tables, also we don't expect high traffic inserts\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp', chunk_time_interval => 604800000000000,\n+                         if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'id', chunk_time_interval => 1000, if_not_exists => true);\n+\n+-- t_application_status\n+\n+-- t_entities\n+select create_hypertable('t_entities', 'id', chunk_time_interval => 10000, if_not_exists => true);\n+\n+-- t_entity_types hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_results hyper table skipped as table rarely gets updated\n+\n+-- t_transaction_types hyper table skipped as table rarely gets updated\n+\n+-- token\n+select create_hypertable('token', 'token_id', chunk_time_interval => 10000, if_not_exists => true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MzkxNDI5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-547391429", "createdAt": "2020-12-08T16:13:49Z", "commit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODgyNjMx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-548882631", "createdAt": "2020-12-10T06:16:29Z", "commit": {"oid": "ecd4cf5929eaa6fa4ae3e3cd813c1e9cd093cf94"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoxNjozMFrOIC3ovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoxNzo0M1rOIC3skA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3OTYxNQ==", "bodyText": "Update to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # set to timescale/timescaledb:latest-pg12 for v2 db schema.\n          \n          \n            \n                # set to timescaledev/timescaledb-ha:pg12-ts2.0.0-rc3  (same as chart) for v2 db schema.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539879615", "createdAt": "2020-12-10T06:16:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/resources/config/bootstrap.yml", "diffHunk": "@@ -1,6 +1,7 @@\n embedded:\n   postgresql:\n     enabled: true\n-    docker-image: postgres:9.6-alpine\n+    # set to timescale/timescaledb:latest-pg12 for v2 db schema.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecd4cf5929eaa6fa4ae3e3cd813c1e9cd093cf94"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4MDU5Mg==", "bodyText": "Remove as test images have extension installed and same for containers in upcoming chart.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r539880592", "createdAt": "2020-12-10T06:17:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- Extend the database with TimescaleDB - assumes super user permissions on database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecd4cf5929eaa6fa4ae3e3cd813c1e9cd093cf94"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjQ2MTkw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-549646190", "createdAt": "2020-12-10T22:12:36Z", "commit": {"oid": "285ae00394fbba4f2de08f7af4cb1deed6882db3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoxMjozNlrOIDfpVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoxMjo0N1rOIDfp4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTEyNw==", "bodyText": "Delete file on merge", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540535127", "createdAt": "2020-12-10T22:12:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/migration/V1_28_1__Address_BookTest.java", "diffHunk": "@@ -32,6 +32,7 @@\n import java.util.List;\n import javax.annotation.Resource;\n import javax.sql.DataSource;\n+import org.flywaydb.core.api.configuration.ClassicConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285ae00394fbba4f2de08f7af4cb1deed6882db3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTI2NQ==", "bodyText": "Do all tables", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r540535265", "createdAt": "2020-12-10T22:12:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,37 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based require a function that returns the now() value (current time) in the units of the time column\n+-- Needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$ select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');\n+alter table transaction\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_ns desc', timescaledb.compress_segmentby = 'type');\n+\n+-- add compression policy\n+select add_compression_policy('account_balance', bigint '${compressionAge}');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285ae00394fbba4f2de08f7af4cb1deed6882db3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d94bf4abc5451063215536f9a1ee84731c5fd64c", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d94bf4abc5451063215536f9a1ee84731c5fd64c", "committedDate": "2020-12-11T05:05:22Z", "message": "Add v2 migrations flyway migrations for timescaledb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "871014584e95ee50aa7c8ab32ebc386199548378", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/871014584e95ee50aa7c8ab32ebc386199548378", "committedDate": "2020-12-11T05:05:22Z", "message": "Added test support to flip between v1 and v2 dbs\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5853ecfa5ec50607ab4f69293202bbb906b79cd0", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5853ecfa5ec50607ab4f69293202bbb906b79cd0", "committedDate": "2020-12-11T05:05:22Z", "message": "Added config documentation and moved topicRunningHashV2AddedTimestamp config into FlywayConfiguration\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38714578d536f7d9682e7316d58d10396b3ed443", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38714578d536f7d9682e7316d58d10396b3ed443", "committedDate": "2020-12-11T05:07:33Z", "message": "Utilize flyway migrations locations and fix grpc and rest tests to support timescaledb\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4cf44e85f0069ae08d009ffa9ebb456830e09da", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e4cf44e85f0069ae08d009ffa9ebb456830e09da", "committedDate": "2020-12-11T05:07:33Z", "message": "Add v2 directory of migrations and revert AbstractDownloaderTest change\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dadb7c064a4d1550acdb871c0fa8c600e39bf749", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dadb7c064a4d1550acdb871c0fa8c600e39bf749", "committedDate": "2020-12-11T05:07:57Z", "message": "Updated config docs and removed FlywayProperties and updated locations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9381142bea4c4b4c4ac648cd4b8c5225a466d116", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9381142bea4c4b4c4ac648cd4b8c5225a466d116", "committedDate": "2020-12-11T05:07:57Z", "message": "Revert config additions for simplicity\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac465e9ae2a6f8e0997287d67abd992b77cfa172", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac465e9ae2a6f8e0997287d67abd992b77cfa172", "committedDate": "2020-12-11T05:08:24Z", "message": "Reverted db usernam config removal and updated circle config w flyway props\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96222d56705b2c6fadf151e8f2b05289858973d", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d96222d56705b2c6fadf151e8f2b05289858973d", "committedDate": "2020-12-11T05:08:24Z", "message": "Update v1 script location for grpc test in circle ci\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa40a59c73fa383e6d8f2b927641bb9b62cf0521", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aa40a59c73fa383e6d8f2b927641bb9b62cf0521", "committedDate": "2020-12-11T05:08:24Z", "message": "Addressed minor feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e215d362a3c4aa84c83e66a9b94148226eb84a4c", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e215d362a3c4aa84c83e66a9b94148226eb84a4c", "committedDate": "2020-12-11T05:08:24Z", "message": "Address feedback on timesacle db init migrations regarding domains, placeholders and distributed hyper tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaaf5cbe2c27845aa24f47688548c4b18f269f31", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aaaf5cbe2c27845aa24f47688548c4b18f269f31", "committedDate": "2020-12-11T05:08:24Z", "message": "Fix up constraints and add compression policy\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d72c99f050e85111f7076ab67ce435bad2abe541", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d72c99f050e85111f7076ab67ce435bad2abe541", "committedDate": "2020-12-11T05:08:24Z", "message": "Fix rest tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26607543f4125b0d18fceb2f17629b6d00154fc8", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/26607543f4125b0d18fceb2f17629b6d00154fc8", "committedDate": "2020-12-11T05:08:24Z", "message": "Added compression for most tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2225a2f8f96a34d364a594747d24f7d60b7ba439", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2225a2f8f96a34d364a594747d24f7d60b7ba439", "committedDate": "2020-12-11T05:08:36Z", "message": "CLeaned up configuration\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b04a1d43bde67f53eab5c3c70f7fdbab901fde1", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8b04a1d43bde67f53eab5c3c70f7fdbab901fde1", "committedDate": "2020-12-11T05:08:36Z", "message": "Add filesystem path to imported flyway locations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749e0f6b9fd0cc5b1d4fab8d84bb46e2e8076e18", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/749e0f6b9fd0cc5b1d4fab8d84bb46e2e8076e18", "committedDate": "2020-12-11T05:08:36Z", "message": "Restore circle ci flyway locations config\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "committedDate": "2020-12-11T05:13:52Z", "message": "Removed V2_0_4__Address_Book and utility function\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5918a8dfcad4eb6b3f97b1b94c563c184f394cca", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5918a8dfcad4eb6b3f97b1b94c563c184f394cca", "committedDate": "2020-12-11T04:24:43Z", "message": "Restore circle ci flyway locations config\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}, "afterCommit": {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f", "committedDate": "2020-12-11T05:13:52Z", "message": "Removed V2_0_4__Address_Book and utility function\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTcwNzU5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-550570759", "createdAt": "2020-12-11T20:54:12Z", "commit": {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1NDoxMlrOIENCPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1NTo1M1rOIENI-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODc4Mg==", "bodyText": "Will remove this and leave it under flyway placeholders", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541278782", "createdAt": "2020-12-11T20:54:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -2,6 +2,9 @@ hedera:\n   mirror:\n     importer:\n       db:\n+        chunkIdInterval: 10000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3OTkyOA==", "bodyText": "Looking, will have to weigh different TPS and envs. I'm leaning towards open a ticket for this in conjunction with local perf testing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541279928", "createdAt": "2020-12-11T20:55:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUxNzY2Nw=="}, "originalCommit": {"oid": "50cdfa2e6be1acc11091ba38b74c4aa6e424a23e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDUwNQ==", "bodyText": "Looking into this error for compression but the rest is good.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541280505", "createdAt": "2020-12-11T20:55:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbbe1eac8ecf6b1b5ae54c5f22876db31a85a5f"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f03f549e23723a4d4e5cdbf3447c6081cb2be3", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a2f03f549e23723a4d4e5cdbf3447c6081cb2be3", "committedDate": "2020-12-11T22:01:40Z", "message": "Try moving flyway locations to test bootstrap\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/63ef736d83daf3cf9d7bac76dac4af65e4df2997", "committedDate": "2020-12-11T22:08:14Z", "message": "Try main bootstrap over test bootstrap\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c42ef3f56f531fcfed3f2f7f4e397ba3d29bb8e", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2c42ef3f56f531fcfed3f2f7f4e397ba3d29bb8e", "committedDate": "2020-12-11T22:43:39Z", "message": "Fix compression\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjExNjY3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-550611667", "createdAt": "2020-12-11T22:12:05Z", "commit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjoxMjowNVrOIERYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo0Mzo1NVrOIETFzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MDA1MA==", "bodyText": "Is there a cost with making them hypertables? What are the pro/cons? Once we go permissionless, I could see address_book/entry having high traffic. I say we make them hypertables unless the cons outweigh the pros for current levels of traffic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541350050", "createdAt": "2020-12-11T22:12:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,80 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because we don't expect high traffic inserts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzUxOQ==", "bodyText": "Why would freeze_default be a good pick? You're supposed to pick a segmentby with a secondary column or columns that are used a lot in queries. It says generally that's primary keys or other columns in indexes. Should this be token_id or maybe treasury_account_id? We query more on token_id so that is preferable.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541367519", "createdAt": "2020-12-11T22:31:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2ODk3NQ==", "bodyText": "deleted is a poor choice. I think fk_entity_type_id would be best.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541368975", "createdAt": "2020-12-11T22:33:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MjQ1OA==", "bodyText": "segmentby = entity_id", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541372458", "createdAt": "2020-12-11T22:37:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NTMwMA==", "bodyText": "Should probably be realm num and topic num since we use those in queries", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541375300", "createdAt": "2020-12-11T22:40:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.\n+-- alter table token_balance\n+--     set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NjAxMg==", "bodyText": "This should be payer_account_id as that is the more frequently accessed field.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541376012", "createdAt": "2020-12-11T22:41:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');\n+\n+alter table token_account\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+-- The constraint \"token_balance_timestamp_ids\" cannot be enforced with the given compression configuration.\n+-- alter table token_balance\n+--     set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table token_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table topic_message\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'topic_num');\n+\n+alter table transaction\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_ns desc', timescaledb.compress_segmentby = 'type');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3Nzk5Nw==", "bodyText": "It looks like the default timescaledb.compress_orderby is already set to the timestamp column in descending order. Thus, it would be better to leave off the hardcoded value and let it use the default if possible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r541377997", "createdAt": "2020-12-11T22:43:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,106 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+-- address_book_entry skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc', timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_timestamp desc');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'consensus_start desc', timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped\n+alter table t_entities\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'id desc', timescaledb.compress_segmentby = 'deleted');\n+\n+-- t_entity_types skipped as not a hyper table\n+\n+-- t_transaction_results skipped as not a hyper table\n+\n+-- t_transaction_types skipped as not a hyper table\n+\n+alter table token\n+    set (timescaledb.compress, timescaledb.compress_orderby = 'created_timestamp desc', timescaledb.compress_segmentby = 'freeze_default');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ef736d83daf3cf9d7bac76dac4af65e4df2997"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92acbaaf880aaf9beb534e3b779c66ac36db057", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f92acbaaf880aaf9beb534e3b779c66ac36db057", "committedDate": "2020-12-12T00:58:52Z", "message": "Fix rest specs not honoring unique index on tokens\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869d165da5916720174908625036b387c38ae4b9", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/869d165da5916720174908625036b387c38ae4b9", "committedDate": "2020-12-12T02:28:15Z", "message": "Addressed feedback on compression and missing hyper tables\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4575053a5120273de6ff9822759d5ee2a7d81ca6", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4575053a5120273de6ff9822759d5ee2a7d81ca6", "committedDate": "2020-12-12T02:55:23Z", "message": "Added env config support to run rest integration tests w v2 schema\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e6fb3361e3268b793dc3aebb1334678a39969f34", "committedDate": "2020-12-14T15:47:47Z", "message": "Removed config repetition for flyway migrations\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTAyNDQw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551502440", "createdAt": "2020-12-14T15:50:13Z", "commit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1MDoxM1rOIFXEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNzo0MlrOIFX7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MTc1NQ==", "bodyText": "We don't use flyway in production on grpc. Can this be moved to test bootstrap.yml?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542491755", "createdAt": "2020-12-14T15:50:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/resources/bootstrap.yml", "diffHunk": "@@ -2,3 +2,7 @@ spring:\n   cloud:\n     kubernetes:\n       enabled: false\n+  flyway:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNTg0MQ==", "bodyText": "Why did this start showing up?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542505841", "createdAt": "2020-12-14T16:07:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/token-balances-01-no-args.spec.json", "diffHunk": "@@ -48,23 +48,28 @@\n     \"tokens\": [\n       {\n         \"token_id\": \"0.20.1\",\n-        \"symbol\": \"TOKEN1\"\n+        \"symbol\": \"TOKEN1\",\n+        \"created_timestamp\": \"1234567890000000001\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjc2ODI3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551676827", "createdAt": "2020-12-14T17:29:17Z", "commit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyOToxN1rOIFbzDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozMzozN1rOIFb_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTIyOQ==", "bodyText": "nit: since every other statement has a comment above, would make sense to add one here too.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542569229", "createdAt": "2020-12-14T17:29:17Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because timescale doesn't support hyper tables that serve as foreign keys referenced by other tables\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTkwNQ==", "bodyText": "Was this just a placeholder, or should there be more information here?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542569905", "createdAt": "2020-12-14T17:30:11Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.1__hyper_tables.sql", "diffHunk": "@@ -0,0 +1,82 @@\n+-------------------\n+-- Create hyper tables for tables that have mostly insert logic\n+-- Use default of 604800000000000 ns (7 days) as chunk time interval\n+-- add TIMESTAMPTZ data type column to tables where no monotonically increasing id exists\n+-------------------\n+\n+-- account_balance\n+select create_hypertable('account_balance', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_file\n+select create_hypertable('account_balance_file', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- account_balance_sets\n+select create_hypertable('account_balance_sets', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- address_book skipped because timescale doesn't support hyper tables that serve as foreign keys referenced by other tables\n+\n+select create_hypertable('address_book_entry', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- contract_result\n+select create_hypertable('contract_result', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- crypto_transfer\n+select create_hypertable('crypto_transfer', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- file_data\n+select create_hypertable('file_data', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- live_hash\n+select create_hypertable('live_hash', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- non_fee_transfer\n+select create_hypertable('non_fee_transfer', 'consensus_timestamp',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- record_file\n+select create_hypertable('record_file', 'consensus_start',\n+                         chunk_time_interval => ${chunkTimeInterval}, if_not_exists => true);\n+\n+-- t_application_status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MjMyNA==", "bodyText": "nit: new line in between to be in line with other skip comments.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#discussion_r542572324", "createdAt": "2020-12-14T17:33:37Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/v2/V2.0.3__time_scale_compression.sql", "diffHunk": "@@ -0,0 +1,109 @@\n+-------------------\n+-- Add compression policies to larger tables\n+-------------------\n+\n+-- hyper tables with integer based time_column_name require a function that returns the now() value (current time) in the units of the time column\n+-- This is needed for policies\n+create or replace function unix_now() returns bigint\n+    language sql\n+    stable as\n+$$\n+select extract(epoch from now())::bigint * 1000000000\n+$$;\n+\n+-- set integer now functions for tables\n+select set_integer_now_func('account_balance', 'unix_now');\n+select set_integer_now_func('account_balance_file', 'unix_now');\n+select set_integer_now_func('account_balance_sets', 'unix_now');\n+select set_integer_now_func('address_book_entry', 'unix_now');\n+select set_integer_now_func('contract_result', 'unix_now');\n+select set_integer_now_func('crypto_transfer', 'unix_now');\n+select set_integer_now_func('file_data', 'unix_now');\n+select set_integer_now_func('non_fee_transfer', 'unix_now');\n+select set_integer_now_func('record_file', 'unix_now');\n+select set_integer_now_func('t_entities', 'unix_now');\n+select set_integer_now_func('token', 'unix_now');\n+select set_integer_now_func('token_account', 'unix_now');\n+select set_integer_now_func('token_balance', 'unix_now');\n+select set_integer_now_func('token_transfer', 'unix_now');\n+select set_integer_now_func('topic_message', 'unix_now');\n+select set_integer_now_func('transaction', 'unix_now');\n+\n+-- turn compression on\n+alter table account_balance\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'account_id');\n+\n+alter table account_balance_file\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'node_account_id');\n+\n+alter table account_balance_sets\n+    set (timescaledb.compress);\n+\n+alter table address_book_entry\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'consensus_timestamp,memo');\n+\n+-- address_book skipped skipped since not a hyper table\n+\n+alter table contract_result\n+    set (timescaledb.compress);\n+\n+alter table crypto_transfer\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table file_data\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+-- live_hash skipped\n+\n+alter table non_fee_transfer\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'entity_id');\n+\n+alter table record_file\n+    set (timescaledb.compress, timescaledb.compress_segmentby = 'node_account_id');\n+\n+-- t_application_status skipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6fb3361e3268b793dc3aebb1334678a39969f34"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab353cf334448880612bdee48def0d509dec21bc", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ab353cf334448880612bdee48def0d509dec21bc", "committedDate": "2020-12-14T17:46:45Z", "message": "Made address_book a hyper table and added compression\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzIyMzA3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551722307", "createdAt": "2020-12-14T17:53:39Z", "commit": {"oid": "ab353cf334448880612bdee48def0d509dec21bc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187dfb473f2af5ffee8203d2c3168ba7c7134ff2", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/187dfb473f2af5ffee8203d2c3168ba7c7134ff2", "committedDate": "2020-12-14T18:26:23Z", "message": "Updated hyper table comments\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzc2MDYw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551776060", "createdAt": "2020-12-14T18:27:56Z", "commit": {"oid": "187dfb473f2af5ffee8203d2c3168ba7c7134ff2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzc4MTc3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551778177", "createdAt": "2020-12-14T18:30:24Z", "commit": {"oid": "187dfb473f2af5ffee8203d2c3168ba7c7134ff2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzc5NzM5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1319#pullrequestreview-551779739", "createdAt": "2020-12-14T18:32:22Z", "commit": {"oid": "187dfb473f2af5ffee8203d2c3168ba7c7134ff2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3396, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}