{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTY2NzE4", "number": 575, "title": "Postgres Writer #1 : move ctl and non-fee transfers", "bodyText": "Detailed description:\n\nAdd PostgresWritingRecordParsedItemHandler\nMove CTL and non-fee transfers to PostgresWritingRecordParsedItemHandler\n\nWhich issue(s) this PR fixes:\nPartially fixes #566\nSpecial notes for your reviewer:\nLocally, i had complete refactor of 566, but it was big change. Chunking it up into small PRs as requested during design review. Additionally, would like to propose following for swift progress:\n\nif reviewer feels that there are no critical/blocking comments, please also approve the PR. I'll address everything in the next batch of changes. That'll save precious iterations. :) Thanks.\n\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-01T00:25:04Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575", "merged": true, "mergeCommit": {"oid": "91f5590ceb057257ca208274de3202b3665c1c78"}, "closed": true, "closedAt": "2020-03-02T17:47:17Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJN64kgH2gAyMzgxOTY2NzE4OmIxMWNhMmE2MzgyMjk4MWQxNzYwMTZmMjMyMzEwNGUwMjY5MmI2Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJwEnSgFqTM2NzMyMDQ4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b11ca2a63822981d176016f2323104e02692b627", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b11ca2a63822981d176016f2323104e02692b627", "committedDate": "2020-03-01T00:24:29Z", "message": "PostgresWritingRecordParsedItemHandler#1 : move ctl and non-fee transfers\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac19f665632b33428cf88bda3c64241b993e6a07", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac19f665632b33428cf88bda3c64241b993e6a07", "committedDate": "2020-03-01T00:10:23Z", "message": "PostgresWritingRecordParsedItemHandler#1 : move ctl and non-fee transfers\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "b11ca2a63822981d176016f2323104e02692b627", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b11ca2a63822981d176016f2323104e02692b627", "committedDate": "2020-03-01T00:24:29Z", "message": "PostgresWritingRecordParsedItemHandler#1 : move ctl and non-fee transfers\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7434b17ae9068c350c64ee20872f1dd094943452", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7434b17ae9068c350c64ee20872f1dd094943452", "committedDate": "2020-03-01T02:07:37Z", "message": "add licenses\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/657e15655f36fad8da6d5bb73e0597ee18dd3166", "committedDate": "2020-03-01T02:36:46Z", "message": "setup generic testing\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzIwNDgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#pullrequestreview-367320481", "createdAt": "2020-03-02T16:05:35Z", "commit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNTozNVrOFwlRxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNzo0MFrOFwlXDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NjcyNQ==", "bodyText": "nit: always best to do a notimplementedexception here and in other places so there's no chance of missing it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386486725", "createdAt": "2020-03-02T16:05:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" VALUES (?, ?, ?, ?)\");\n+\n+            sqlInsertNonFeeTransfers = connection.prepareStatement(\"insert into non_fee_transfers\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" values (?, ?, ?, ?)\");\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Unable to prepare SQL statements\", e);\n+        }\n+    }\n+\n+    public void finish() {\n+        closeStatements();\n+    }\n+\n+    @Override\n+    public void onFileComplete() {\n+        executeBatches();\n+    }\n+\n+    private void closeStatements() {\n+        try {\n+            sqlInsertTransferList.close();\n+            sqlInsertNonFeeTransfers.close();\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Error closing connection\", e);\n+        }\n+    }\n+\n+    void executeBatches() {\n+        try {\n+            int[] transferLists = sqlInsertTransferList.executeBatch();\n+            int[] nonFeeTransfers = sqlInsertNonFeeTransfers.executeBatch();\n+            log.info(\"Inserted {} transfer lists, {} non-fee transfers\", transferLists.length, nonFeeTransfers.length);\n+        } catch (SQLException e) {\n+            log.error(\"Error committing sql insert batch \", e);\n+            throw new ParserSQLException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onTransaction(Transaction transaction) throws ImporterException {\n+        // to be implemented in followup change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4ODA3OQ==", "bodyText": "q: what do you think about making a getter for the prepared statements? Might reduce code repetition and ensure statements used by tests modules are always the correct ones.\nNot sure if there's a downside to it", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386488079", "createdAt": "2020-03-02T16:07:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}