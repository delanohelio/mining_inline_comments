{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjQ5Mjk1", "number": 1199, "title": "Add Transaction Suppliers to generate HAPI transactions", "bodyText": "Detailed description:\nAdd TransactionSupplier classes, which allow for a centralized place to quickly generate HAPI transactions.\nWhich issue(s) this PR fixes:\nFixes #1151\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-10-28T03:21:33Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199", "merged": true, "mergeCommit": {"oid": "71b97e75ace3049984f2aabfc26c5110d1aaa2d7"}, "closed": true, "closedAt": "2020-10-30T17:42:49Z", "author": {"login": "ijungmann"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWyLFoAH2gAyNTExMjQ5Mjk1Ojg0NGI0NDc3ZjAzOGZlYWZjMGI4MmEwMjBkN2UyZWE4YjdiYzkwNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXqU6ggFqTUyMDg5MzIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "844b4477f038feafc0b82a020d7e2ea8b7bc9071", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/844b4477f038feafc0b82a020d7e2ea8b7bc9071", "committedDate": "2020-10-28T00:10:56Z", "message": "Add interface for Transaction Suppliers and Account suppliers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa3adba5cb7651a8415a98bf26c21fef200ba93", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cfa3adba5cb7651a8415a98bf26c21fef200ba93", "committedDate": "2020-10-28T03:14:22Z", "message": "Add HCS basic suppliers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cedc87a9e964aa2d7acd8ce5980f742c38426602", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cedc87a9e964aa2d7acd8ce5980f742c38426602", "committedDate": "2020-10-28T03:22:23Z", "message": "Add sdk to datagenerator pom\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3948aa333cb9d0feb7662350b6716343d74ca098", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3948aa333cb9d0feb7662350b6716343d74ca098", "committedDate": "2020-10-29T04:26:45Z", "message": "Add HTS Suppliers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4a6f4eff18fd1bdd8a27fa4e54351664bb439afc", "committedDate": "2020-10-29T04:31:26Z", "message": "Refactor Crypto Transfer class name\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzYzMTEx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-519763111", "createdAt": "2020-10-29T15:03:39Z", "commit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMzozOVrOHqgOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyMzo0OVrOHqhMjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMDE5NA==", "bodyText": "Licenses missing from most files", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514330194", "createdAt": "2020-10-29T15:03:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionSupplier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.datagenerator.sdk.supplier;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMTk5OQ==", "bodyText": "Should probably remove logging of secrets.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514331999", "createdAt": "2020-10-29T15:05:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());\n+    }\n+\n+    private Ed25519PublicKey generateKeys() {\n+        Ed25519PrivateKey privateKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey publicKey = privateKey.publicKey;\n+\n+        log.debug(\"Private key = {}\", privateKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzcwMw==", "bodyText": "Should probably mention mirror node generating this. Mirror node created test account at now()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514333703", "createdAt": "2020-10-29T15:07:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNDkzNA==", "bodyText": "Would prefer all fields be built-in Java types so they can be populated dynamically from Spring Boot config. It also keeps SDK classes from leaking outside the suppliers. For example, this field should be String.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514334934", "createdAt": "2020-10-29T15:09:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNzI4Mw==", "bodyText": "Null check here is redundant as setting null has no side effects. Can just add to chaining methods.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514337283", "createdAt": "2020-10-29T15:12:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)\n+                .setKey(publicKey)\n+                .setReceiverSignatureRequired(receiverSignatureRequired)\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier update account_\" + Instant.now());\n+\n+        if (proxyAccountId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODMyNQ==", "bodyText": "Would prefer fields sorted alphabetically within their required/optional groupings. Would also prefer an extra newline between annotated fields as it's hard to read without.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514338325", "createdAt": "2020-10-29T15:13:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODg4NQ==", "bodyText": "Would prefer chaining invocations sorted.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514338885", "createdAt": "2020-10-29T15:14:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjEyNQ==", "bodyText": "Since we don't have an acronym HAS for accounts, etc. it might be better to name the package after the transaction prefix for consistency with the other network services. e.g. hcs -> consensus and hts -> token", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514346125", "createdAt": "2020-10-29T15:23:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aceae19806cafe8322699f17dbee47725b1c31fb", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/aceae19806cafe8322699f17dbee47725b1c31fb", "committedDate": "2020-10-29T15:57:07Z", "message": "Refactoring\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc8173001da2e55897c067fcfdfe02f845c84d1a", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fc8173001da2e55897c067fcfdfe02f845c84d1a", "committedDate": "2020-10-29T15:58:17Z", "message": "Add licensing info\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dab5575d0d606af453e5b150ad6432ed98923211", "committedDate": "2020-10-29T16:13:11Z", "message": "Correct license info\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5ODc1ODIx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-519875821", "createdAt": "2020-10-29T16:52:10Z", "commit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo1MjoxMFrOHqlVkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNDoxMlrOHqmspg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzk3MA==", "bodyText": "Can we make it so that the timestamp always starts the message and any optional message provided is added to it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMessage(message != null ? message : getMessage())\n          \n          \n            \n                            .setMessage(getMessage() + message != null ? \"_\" + message : '')", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514413970", "createdAt": "2020-10-29T16:52:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final ConsensusTopicId topicId;\n+\n+    //Optional\n+    private final String message;\n+    @Builder.Default\n+    private final int messageSize = 256;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setTopicId(topicId)\n+                .setMessage(message != null ? message : getMessage())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTQwOA==", "bodyText": "This is missing the setFreezeDefault property.\nAssuming default of false this will mean the freezeKey is set accounts onboarded to the token will have an Unfrozen status and can immediately start to transfer tokens.\nSetting it to true would give the opposite effect.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514429408", "createdAt": "2020-10-29T17:14:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenCreateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenCreateTransactionSupplier implements TransactionSupplier<TokenCreateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccount;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final int initialSupply = 1000000000;\n+    @Builder.Default\n+    private boolean freezeDefault = false;\n+    @Builder.Default\n+    private int decimals = 10;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenCreateTransaction get() {\n+        TokenCreateTransaction tokenCreateTransaction = new TokenCreateTransaction()\n+                .setSymbol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setDecimals(decimals)\n+                .setInitialSupply(initialSupply)\n+                .setAutoRenewAccount(treasuryAccount)\n+                .setTreasury(treasuryAccount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Create token_\" + Instant.now());\n+\n+        if (adminKey != null) {\n+            tokenCreateTransaction\n+                    .setAdminKey(adminKey)\n+                    .setSupplyKey(adminKey)\n+                    .setWipeKey(adminKey)\n+                    .setFreezeKey(adminKey)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMDQ1Mg==", "bodyText": "Use maxTransactionFee\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMaxTransactionFee(1_000_000_000)\n          \n          \n            \n                            .setMaxTransactionFee(maxTransactionFee)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514430452", "createdAt": "2020-10-29T17:15:41Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenFreezeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenFreezeTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenFreezeTransactionSupplier implements TransactionSupplier<TokenFreezeTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenFreezeTransaction get() {\n+        return new TokenFreezeTransaction()\n+                .setAccountId(accountId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMjA5OQ==", "bodyText": "Use maxTransactionFee\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMaxTransactionFee(1_000_000_000)\n          \n          \n            \n                            .setMaxTransactionFee(maxTransactionFee)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514432099", "createdAt": "2020-10-29T17:17:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenRevokeKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenRevokeKycTransaction;\n+\n+@Builder\n+@Value\n+public class TokenRevokeKYCTransactionSupplier implements TransactionSupplier<TokenRevokeKycTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenRevokeKycTransaction get() {\n+        return new TokenRevokeKycTransaction()\n+                .setAccountId(accountId)\n+                .setTokenId(tokenId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTQ2Mw==", "bodyText": "Should we update this to be like the HCS submit message and use a timestamp here that will allow us to calculate latency on the perf subscriber side?\nPretty much set it to the same value returned by ConsensusSubmitTransactionSupplier.getMessage()\nIf there's an applicable class that can hold the function for sharing that would be good also.\nI might do this on the acceptance side myself so suggesting it here also.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514435463", "createdAt": "2020-10-29T17:23:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenTransferTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenTransferTransaction;\n+\n+@Builder\n+@Value\n+public class TokenTransferTransactionSupplier implements TransactionSupplier<TokenTransferTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId senderId;\n+    private final AccountId recipientId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final int amount = 1;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public TokenTransferTransaction get() {\n+        return new TokenTransferTransaction()\n+                .addSender(tokenId, senderId, amount)\n+                .addRecipient(tokenId, recipientId, amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Transfer token_\" + Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNjI2Mg==", "bodyText": "Missing timestamp which seems to be the convention being establish\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setTransactionMemo(\"Supplier Update token_\");\n          \n          \n            \n                            .setTransactionMemo(\"Supplier Update token_\" +  Instant.now());", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514436262", "createdAt": "2020-10-29T17:24:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenUpdateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenUpdateTransactionSupplier implements TransactionSupplier<TokenUpdateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccountId;\n+    private final TokenId tokenId;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Override\n+    public TokenUpdateTransaction get() {\n+        TokenUpdateTransaction tokenUpdateTransaction = new TokenUpdateTransaction()\n+                .setTokenId(tokenId)\n+                .setSybmol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Update token_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae67c9d7ded037da06b1ef7e73275028c66140be", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae67c9d7ded037da06b1ef7e73275028c66140be", "committedDate": "2020-10-29T17:41:31Z", "message": "Remove key logging when creating account\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70884667710eb398950c28edef8d5a5fb035fbde", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/70884667710eb398950c28edef8d5a5fb035fbde", "committedDate": "2020-10-29T17:55:42Z", "message": "Refactor Account Update to account for NPE\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45afc23767aa5e6cc36b333cbf69a02dfd2f1297", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/45afc23767aa5e6cc36b333cbf69a02dfd2f1297", "committedDate": "2020-10-29T19:11:57Z", "message": "Rename supplier packages to be consistent\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feadbc70157c0947b8bac7d785e53db16f997fd8", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/feadbc70157c0947b8bac7d785e53db16f997fd8", "committedDate": "2020-10-29T19:14:15Z", "message": "Rename supplier packages to be consistent\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "503465d56ded39aef50d91585db3b96c644314ff", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/503465d56ded39aef50d91585db3b96c644314ff", "committedDate": "2020-10-29T20:19:20Z", "message": "Alphabetize supplier fields and chaining\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007fe81064821ea10057899e9c953800c773beee", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/007fe81064821ea10057899e9c953800c773beee", "committedDate": "2020-10-29T20:28:01Z", "message": "Correct max transaction fee chain to use field\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a0040399d2b3d30577f5919d35e777b36521a9", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/40a0040399d2b3d30577f5919d35e777b36521a9", "committedDate": "2020-10-29T20:34:24Z", "message": "Add freeze default to chain\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052659f8d63b0939848486425c8944514990a777", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/052659f8d63b0939848486425c8944514990a777", "committedDate": "2020-10-29T20:42:58Z", "message": "Fix missing timestamp in token update\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241ff7ae5a21a2fc09d59139cee77c3cdaaef726", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/241ff7ae5a21a2fc09d59139cee77c3cdaaef726", "committedDate": "2020-10-29T20:55:32Z", "message": "Reword transaction memos to be clear for main nodes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10cb8c042a9fc447a94172e7bf28f159b19a411", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c10cb8c042a9fc447a94172e7bf28f159b19a411", "committedDate": "2020-10-29T21:36:52Z", "message": "Refactor supplier fields to be primitives for spring boot\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fb7234bdcaf4c1871e0b9c4377ce5094b5f63c", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e9fb7234bdcaf4c1871e0b9c4377ce5094b5f63c", "committedDate": "2020-10-29T21:45:59Z", "message": "Refactor to put instant and duration fields back\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d7e3432d9ebd1f2732cc1565a8a16a17a74f189", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9d7e3432d9ebd1f2732cc1565a8a16a17a74f189", "committedDate": "2020-10-29T22:06:35Z", "message": "Refactor submit message supplier to append timestamp to message regardless\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8a4796d2918952cd55878a3a5ba3dd97c3660f49", "committedDate": "2020-10-29T23:10:19Z", "message": "Alter transaction memos to have encoded timestamp in front\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTU5NTE1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-520159515", "createdAt": "2020-10-29T23:33:31Z", "commit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozMzozMlrOHqySVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozNjoyMVrOHqyVzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjEzNQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Base64.encodeBase64String(timeRefBytes) + randomAlphanumeric;\n          \n          \n            \n                    return Utility.getEncodedTimestamp() + \"_\" + randomAlphanumeric;\n          \n      \n    \n    \n  \n\nOr call once and use is both returns\nString encodedTimestamp = Utility.getEncodedTimestamp();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514626135", "createdAt": "2020-10-29T23:33:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;\n+\n+    @Builder.Default\n+    private final int messageSize = 256;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setMessage(getMessage())\n+                .setTopicId(ConsensusTopicId.fromString(topicId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node submitted test message at \" + Instant\n+                        .now());\n+    }\n+\n+    private String getMessage() {\n+        //If a custom message is entered, append the timestamp to the front and leave the message unaltered\n+        if (StringUtils.isNotBlank(message)) {\n+            return Utility.getEncodedTimestamp() + \"_\" + message;\n+        }\n+        //Generate a message from the timestamp and a random alphanumeric String\n+        byte[] timeRefBytes = Longs.toByteArray(Instant.now().toEpochMilli());\n+        int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n+        String randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+        return Base64.encodeBase64String(timeRefBytes) + randomAlphanumeric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzAyMg==", "bodyText": "This is correct. Should be encodedTimestamp plus  on of the two, custom message or random message .", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514627022", "createdAt": "2020-10-29T23:36:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final ConsensusTopicId topicId;\n+\n+    //Optional\n+    private final String message;\n+    @Builder.Default\n+    private final int messageSize = 256;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setTopicId(topicId)\n+                .setMessage(message != null ? message : getMessage())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzk3MA=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d5cff498f194c249f87999860f69b0e74bd843", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d7d5cff498f194c249f87999860f69b0e74bd843", "committedDate": "2020-10-29T23:44:14Z", "message": "Add exception throwing when required fields are not set\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973d959a110ae98f5dc46cf6f628c7a5fe6d1a1a", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/973d959a110ae98f5dc46cf6f628c7a5fe6d1a1a", "committedDate": "2020-10-29T23:47:32Z", "message": "Add new lines to standardize format\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTYyODU5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-520162859", "createdAt": "2020-10-29T23:43:33Z", "commit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0MzozM1rOHqyeAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0MzozM1rOHqyeAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTEyMg==", "bodyText": "I realize we're repeating the encodedTimestamp + message + readable instant time.\nWe could move this into the new Utility class you added and make it easier\n    public static String getTransactionMemo(String message) {\n         return Utility.getEncodedTimestamp() + \"_\" + message + \" at \" + Instant.now();\n     }\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node wiped test token at \" + Instant\n          \n          \n            \n                            .setTransactionMemo(Utility.getTransactionMemo(\"Mirror node wiped test token\"))", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514629122", "createdAt": "2020-10-29T23:43:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenWipeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenWipeTransaction;\n+\n+@Builder\n+@Value\n+public class TokenWipeTransactionSupplier implements TransactionSupplier<TokenWipeTransaction> {\n+    private final String accountId;\n+    private final String tokenId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long amount = 1;\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenWipeTransaction get() {\n+        return new TokenWipeTransaction()\n+                .setAccountId(AccountId.fromString(accountId))\n+                .setAmount(amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTokenId(TokenId.fromString(tokenId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node wiped test token at \" + Instant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "067d88ed68ec6221265cd93f9cb7f7fbea392b3f", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/067d88ed68ec6221265cd93f9cb7f7fbea392b3f", "committedDate": "2020-10-29T23:51:23Z", "message": "Correct token transaction error message\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7adc93c88e595b15fae531904c1a9eec57d98e24", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7adc93c88e595b15fae531904c1a9eec57d98e24", "committedDate": "2020-10-30T00:00:13Z", "message": "Minor refactor of submit message\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f26a3bb43a1e8335804fa906f3be970c01085f9", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1f26a3bb43a1e8335804fa906f3be970c01085f9", "committedDate": "2020-10-30T00:18:18Z", "message": "Refactor transaction memos to use utility class\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ff723c17ca13616cc7e318df25e5d4cc076a7193", "committedDate": "2020-10-30T14:55:06Z", "message": "Change Supplier error message to use simple class name\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNzY2Njgy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-520766682", "createdAt": "2020-10-30T15:14:52Z", "commit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxNDo1M1rOHrTmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0NjowNlrOHrVEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MTk4Nw==", "bodyText": "needs some newlines", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515171987", "createdAt": "2020-10-30T15:14:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/common/Utility.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.datagenerator.common;/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MTUwNA==", "bodyText": "Would be simpler if the exception took in the TransactionSupplier object and formatted the message internally.\nthrow new TransactionSupplierException(this, \"topicId\");", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515191504", "createdAt": "2020-10-30T15:39:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusDeleteTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusDeleteTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicDeleteTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicDeleteTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId)) {\n+            throw new TransactionSupplierException(this.getClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MjY1Ng==", "bodyText": "Think this needs a @Builder.Default otherwise it can never be changed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515192656", "createdAt": "2020-10-30T15:40:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MzQ0Mg==", "bodyText": "This checks two fields but error only mentions one. Should probably separate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515193442", "createdAt": "2020-10-30T15:42:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusUpdateTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+public class ConsensusUpdateTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicUpdateTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    private final String adminKey;\n+    private final String autoRenewAccountId;\n+\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicUpdateTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId) || StringUtils.isBlank(autoRenewAccountId)) {\n+            throw new TransactionSupplierException(this.getClass()\n+                    .getSimpleName() + \" requires a topicId be provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NjAyMQ==", "bodyText": "TokenGrantKycTransactionSupplier to preserve the naming from the SDK and the proto. Same for revoke", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515196021", "createdAt": "2020-10-30T15:46:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenGrantKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenGrantKycTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenGrantKYCTransactionSupplier implements TransactionSupplier<TokenGrantKycTransaction> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1effd118bb0f405c02277c76fd7fb1fdeb0ded92", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1effd118bb0f405c02277c76fd7fb1fdeb0ded92", "committedDate": "2020-10-30T16:44:06Z", "message": "Rename kyc suppliers\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778b2fa15d8018fda646a52455cb6a4198875937", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/778b2fa15d8018fda646a52455cb6a4198875937", "committedDate": "2020-10-30T16:44:58Z", "message": "Fix Utility class license\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6413cd42bf1f99b4cde5279cafedd6c6e41e7e1b", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6413cd42bf1f99b4cde5279cafedd6c6e41e7e1b", "committedDate": "2020-10-30T16:46:13Z", "message": "Fix message field on submit message supplier\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3590c11c15a066e8f09d2bf3871a4d394701ed7", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b3590c11c15a066e8f09d2bf3871a4d394701ed7", "committedDate": "2020-10-30T17:00:28Z", "message": "Refactor how exception message is formatted\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODg2MDA1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-520886005", "createdAt": "2020-10-30T17:29:29Z", "commit": {"oid": "b3590c11c15a066e8f09d2bf3871a4d394701ed7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyOToyOVrOHrZEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyOToyOVrOHrZEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2MTUyNA==", "bodyText": "nit: It will always be 8 bytes, as it's a long, I should have changed this in the performance side also.\nNo biggie, can change in future PR or if there's a next commit.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n          \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - 8;\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n          \n          \n            \n                    int timeByteLength = 8; \n          \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeByteLength;", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515261524", "createdAt": "2020-10-30T17:29:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    private static final List<String> requiredFields = Arrays.asList(\"topicId\");\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Builder.Default\n+    private final String message = StringUtils.EMPTY;\n+\n+    @Builder.Default\n+    private final int messageSize = 256;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId)) {\n+            throw new TransactionSupplierException(this, requiredFields);\n+        }\n+\n+        return new ConsensusMessageSubmitTransaction()\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setMessage(getMessage())\n+                .setTopicId(ConsensusTopicId.fromString(topicId))\n+                .setTransactionMemo(Utility.getMemo(\"Mirror node submitted test message\"));\n+    }\n+\n+    private String getMessage() {\n+        String encodedTimestamp = Utility.getEncodedTimestamp();\n+        //If a custom message is entered, append the timestamp to the front and leave the message unaltered\n+        if (StringUtils.isNotBlank(message)) {\n+            return encodedTimestamp + \"_\" + message;\n+        }\n+        //Generate a message from the timestamp and a random alphanumeric String\n+        byte[] timeRefBytes = Longs.toByteArray(Instant.now().toEpochMilli());\n+        int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3590c11c15a066e8f09d2bf3871a4d394701ed7"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODkzMjIy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#pullrequestreview-520893222", "createdAt": "2020-10-30T17:36:21Z", "commit": {"oid": "b3590c11c15a066e8f09d2bf3871a4d394701ed7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3468, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}