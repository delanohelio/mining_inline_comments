{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjAyMjEy", "number": 696, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0MzoxOVrODz2I6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1ODozMVrODz2jLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjkwOTg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0MzoxOVrOGIgK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTo0NVrOGIjsBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2ODg5MQ==", "bodyText": "I don't think this method has test coverage.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411568891", "createdAt": "2020-04-20T17:43:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f36472b8a85379c813a7de96d154ea3fab3e4f83"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjUwMg==", "bodyText": "There is integration test coverage in RecordItemParserFileTest. Will add NetworkAddressBook unit tests when porting to master.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411626502", "createdAt": "2020-04-20T19:15:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2ODg5MQ=="}, "originalCommit": {"oid": "f36472b8a85379c813a7de96d154ea3fab3e4f83"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk3NzA4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1ODozMVrOGIgy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOTowMzo0NlrOGIjQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3OTEyNQ==", "bodyText": "Since NetworkAddressBook \"owns\" underlying file, it doesn't need a disk IO every time Downloader needs list of nodes.\nWe can store Collection<NodeAddress> in local variable, initializing it in init() and updating it in saveToDisk in if (!nodeAddresses.isEmpty()) { condition", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411579125", "createdAt": "2020-04-20T17:58:31Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);\n     }\n \n-    private void saveToDisk() throws IOException {\n+    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n         Path path = mirrorProperties.getAddressBookPath();\n-        Files.write(path, addressBookBytes);\n-        log.info(\"New address book successfully saved to {}\", path);\n+        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n+        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n+        log.info(\"Saved temporary address book to {}\", tempPath);\n+\n+        try {\n+            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n+            if (!nodeAddresses.isEmpty()) {\n+                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                log.info(\"New address book successfully parsed and saved to {}\", path);\n+            }\n+        } catch (Exception e) {\n+            // Ignore partial update errors\n+        }\n     }\n \n-    public Collection<NodeAddress> load() {\n+    private Collection<NodeAddress> parse(Path path) throws Exception {\n+        byte[] addressBookBytes = Files.readAllBytes(path);\n+        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n+\n+        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                .getNodeAddressList()) {\n+            NodeAddress nodeAddress = NodeAddress.builder()\n+                    .id(nodeAddressProto.getMemo().toStringUtf8())\n+                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                    .port(nodeAddressProto.getPortno())\n+                    .publicKey(nodeAddressProto.getRSAPubKey())\n+                    .build();\n+            builder.add(nodeAddress);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    public Collection<NodeAddress> load() {\n         Path path = mirrorProperties.getAddressBookPath();\n \n         try {\n-            byte[] addressBookBytes = Files.readAllBytes(path);\n-            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n-\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                NodeAddress nodeAddress = NodeAddress.builder()\n-                        .id(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .build();\n-                builder.add(nodeAddress);\n-            }\n+            return parse(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f36472b8a85379c813a7de96d154ea3fab3e4f83"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxOTQ2OQ==", "bodyText": "We will defer this item to resolving it on master", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/696#discussion_r411619469", "createdAt": "2020-04-20T19:03:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -72,45 +72,58 @@ private void init() {\n     }\n \n     public void update(byte[] newContents) throws IOException {\n-        addressBookBytes = newContents;\n-        saveToDisk();\n+        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n     }\n \n     public void append(byte[] extraContents) throws IOException {\n-        byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);\n-        System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);\n-        addressBookBytes = newAddressBook;\n-        saveToDisk();\n+        saveToDisk(extraContents, StandardOpenOption.APPEND);\n     }\n \n-    private void saveToDisk() throws IOException {\n+    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n         Path path = mirrorProperties.getAddressBookPath();\n-        Files.write(path, addressBookBytes);\n-        log.info(\"New address book successfully saved to {}\", path);\n+        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n+        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n+        log.info(\"Saved temporary address book to {}\", tempPath);\n+\n+        try {\n+            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n+            if (!nodeAddresses.isEmpty()) {\n+                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                log.info(\"New address book successfully parsed and saved to {}\", path);\n+            }\n+        } catch (Exception e) {\n+            // Ignore partial update errors\n+        }\n     }\n \n-    public Collection<NodeAddress> load() {\n+    private Collection<NodeAddress> parse(Path path) throws Exception {\n+        byte[] addressBookBytes = Files.readAllBytes(path);\n+        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n+\n+        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                .getNodeAddressList()) {\n+            NodeAddress nodeAddress = NodeAddress.builder()\n+                    .id(nodeAddressProto.getMemo().toStringUtf8())\n+                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                    .port(nodeAddressProto.getPortno())\n+                    .publicKey(nodeAddressProto.getRSAPubKey())\n+                    .build();\n+            builder.add(nodeAddress);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    public Collection<NodeAddress> load() {\n         Path path = mirrorProperties.getAddressBookPath();\n \n         try {\n-            byte[] addressBookBytes = Files.readAllBytes(path);\n-            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n-\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                NodeAddress nodeAddress = NodeAddress.builder()\n-                        .id(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .build();\n-                builder.add(nodeAddress);\n-            }\n+            return parse(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3OTEyNQ=="}, "originalCommit": {"oid": "f36472b8a85379c813a7de96d154ea3fab3e4f83"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 983, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}