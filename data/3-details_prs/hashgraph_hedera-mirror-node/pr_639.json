{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzEzNTY4", "number": 639, "title": "Add TransactionBody to RecordItem", "bodyText": "Detailed description:\n\nFunctionality in all TransactionHandlers (to be added in followups) require TransactionBody.\nTransaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to TransactionHandlers. Transaction.body field is not good candidate since it is deprecated. RecordItem is the best place to keep it.\nRecordItem has uniform ctor pattern now. Can be constructed from either:\n\ntransaction & record proto instances\ntransaction & record bytes\n\n\nDeserialization is done in RecordItem constructor because:\n\nPassing both Transaction (which has body) and TransactionBody to ctor (two sources of truth) would be bad\nDon't have to change 50+ places in tests\n\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma apekshit.sharma@hedera.com\nWhich issue(s) this PR fixes:\nPart of #571 . Needed to do #560 in right way, hence P1.\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-04-01T01:55:45Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/639", "merged": true, "mergeCommit": {"oid": "8e808eb5c0d5022c430af5b484756d993cd8c3dd"}, "closed": true, "closedAt": "2020-04-01T18:16:48Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTN2gugBqjMxODU4NTQ3NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTabG3gFqTM4NTc1Nzg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df22aa858c4249ffafa9028148c155809485d9c0", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/df22aa858c4249ffafa9028148c155809485d9c0", "committedDate": "2020-04-01T01:54:00Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to TransactionHandlers.\n  Transaction.body field is not good candidate since it is deprecated. RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "6356420542b2fcf1a510bee36b1cec3891ca726e", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6356420542b2fcf1a510bee36b1cec3891ca726e", "committedDate": "2020-04-01T01:57:49Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6356420542b2fcf1a510bee36b1cec3891ca726e", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6356420542b2fcf1a510bee36b1cec3891ca726e", "committedDate": "2020-04-01T01:57:49Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "fb8bfc562cc9ced4d12ce4067bd29343d8d3b18c", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fb8bfc562cc9ced4d12ce4067bd29343d8d3b18c", "committedDate": "2020-04-01T02:02:33Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b56bc860c77ea2a507c9965dd0a6c86e995520", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b7b56bc860c77ea2a507c9965dd0a6c86e995520", "committedDate": "2020-04-01T02:19:35Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb8bfc562cc9ced4d12ce4067bd29343d8d3b18c", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fb8bfc562cc9ced4d12ce4067bd29343d8d3b18c", "committedDate": "2020-04-01T02:02:33Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "b7b56bc860c77ea2a507c9965dd0a6c86e995520", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b7b56bc860c77ea2a507c9965dd0a6c86e995520", "committedDate": "2020-04-01T02:19:35Z", "message": "Add TransactionBody to RecordItem\n\n- Functionality in all TransactionHandlers (to be added in followups) require TransactionBody.\n  Transaction.bodyBytes needs to be deserialized only once and stored somewhere accessible to\n  TransactionHandlers. Transaction.body field is not good candidate since it is deprecated.\n  RecordItem is the best place to keep it.\n- RecordItem has uniform ctor pattern now. Can be constructed from either:\n  - transaction & record proto instances\n  - transaction & record bytes\n- Deserialization is done in RecordItem constructor because:\n  - Passing both Transaction (which has body) and TransactionBody to ctor\n    (two sources of truth) would be bad\n  - Don't have to change 50+ places in tests\n- Side benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSide benefit: Removed duplicate deserialization that was happening in RecordFileParser.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzU3ODc2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/639#pullrequestreview-385757876", "createdAt": "2020-04-01T16:35:39Z", "commit": {"oid": "b7b56bc860c77ea2a507c9965dd0a6c86e995520"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNTo0MFrOF_JBmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNjoyMlrOF_JDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MjQ3NA==", "bodyText": "Nit: Use assert4j chaining. You also don't need helper testException method with this approach, imo:\nassertThatThrownBy(() -> { throw new IllegalArgumentException(\"boom!\"); })\n                     .isInstanceOf(IllegalArgumentException.class)\n                     .hasMessageContaining(\"boom\");", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/639#discussion_r401752474", "createdAt": "2020-04-01T16:35:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/RecordItemTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.protobuf.ByteString;\n+\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.AbstractTransactionHandlerTest;\n+\n+import com.hederahashgraph.api.proto.java.SignatureMap;\n+import com.hederahashgraph.api.proto.java.SignaturePair;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionReceipt;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class RecordItemTest extends AbstractTransactionHandlerTest {\n+\n+    private static final Transaction DEFAULT_TRANSACTION = Transaction.newBuilder()\n+            .setBodyBytes(TransactionBody.getDefaultInstance().toByteString())\n+            .build();\n+    private static final byte[] DEFAULT_TRANSACTION_BYTES = DEFAULT_TRANSACTION.toByteArray();\n+    private static final TransactionRecord DEFAULT_RECORD = TransactionRecord.getDefaultInstance();\n+    private static final byte[] DEFAULT_RECORD_BYTES = DEFAULT_RECORD.toByteArray();\n+\n+    // 'body' and 'bodyBytes' feilds left empty\n+    private static final Transaction TRANSACTION = Transaction.newBuilder()\n+            .setSigMap(SignatureMap.newBuilder()\n+                    .addSigPair(SignaturePair.newBuilder()\n+                            .setEd25519(ByteString.copyFromUtf8(\"ed25519\"))\n+                            .setPubKeyPrefix(ByteString.copyFromUtf8(\"pubKeyPrefix\"))\n+                            .build())\n+                    .build())\n+            .build();\n+\n+    private static final TransactionBody TRANSACTION_BODY = TransactionBody.newBuilder()\n+            .setTransactionFee(10L)\n+            .setMemo(\"memo\")\n+            .build();\n+\n+    private static final TransactionRecord TRANSACTION_RECORD = TransactionRecord.newBuilder()\n+            .setReceipt(TransactionReceipt.newBuilder().setStatusValue(22).build())\n+            .setMemo(\"memo\")\n+            .build();\n+\n+    @Test\n+    public void testBadTransactionBytesThrowException() {\n+        testException(new byte[] {0x0, 0x1}, DEFAULT_RECORD_BYTES, RecordItem.BAD_TRANSACTION_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testBadRecordBytesThrowException() {\n+        testException(DEFAULT_TRANSACTION_BYTES, new byte[] {0x0, 0x1}, RecordItem.BAD_RECORD_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testTransactionBytesWithoutTransactionBodyThrowException() {\n+        testException(Transaction.newBuilder().build().toByteArray(),\n+                DEFAULT_RECORD_BYTES, RecordItem.BAD_TRANSACTION_BODY_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testWithBody() {\n+        Transaction transaction = TRANSACTION.toBuilder().setBody(TRANSACTION_BODY).build();\n+        RecordItem recordItem = new RecordItem(transaction.toByteArray(), TRANSACTION_RECORD.toByteArray());\n+        assertRecordItem(transaction, recordItem);\n+    }\n+\n+    @Test\n+    public void testWithBodyBytes() {\n+        Transaction transaction = TRANSACTION.toBuilder().setBodyBytes(TRANSACTION_BODY.toByteString()).build();\n+        RecordItem recordItem = new RecordItem(transaction.toByteArray(), TRANSACTION_RECORD.toByteArray());\n+        assertRecordItem(transaction, recordItem);\n+    }\n+\n+    private void testException(byte[] transactionBytes, byte[] recordBytes, String expectedMessage) {\n+        Exception exception = assertThrows(ParserException.class, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b56bc860c77ea2a507c9965dd0a6c86e995520"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1Mjk1OA==", "bodyText": "nit: Recommend always using assert4j assertThat() for cleaner approach, consistency with other code and ability to chain", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/639#discussion_r401752958", "createdAt": "2020-04-01T16:36:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/RecordItemTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.protobuf.ByteString;\n+\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.AbstractTransactionHandlerTest;\n+\n+import com.hederahashgraph.api.proto.java.SignatureMap;\n+import com.hederahashgraph.api.proto.java.SignaturePair;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionReceipt;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class RecordItemTest extends AbstractTransactionHandlerTest {\n+\n+    private static final Transaction DEFAULT_TRANSACTION = Transaction.newBuilder()\n+            .setBodyBytes(TransactionBody.getDefaultInstance().toByteString())\n+            .build();\n+    private static final byte[] DEFAULT_TRANSACTION_BYTES = DEFAULT_TRANSACTION.toByteArray();\n+    private static final TransactionRecord DEFAULT_RECORD = TransactionRecord.getDefaultInstance();\n+    private static final byte[] DEFAULT_RECORD_BYTES = DEFAULT_RECORD.toByteArray();\n+\n+    // 'body' and 'bodyBytes' feilds left empty\n+    private static final Transaction TRANSACTION = Transaction.newBuilder()\n+            .setSigMap(SignatureMap.newBuilder()\n+                    .addSigPair(SignaturePair.newBuilder()\n+                            .setEd25519(ByteString.copyFromUtf8(\"ed25519\"))\n+                            .setPubKeyPrefix(ByteString.copyFromUtf8(\"pubKeyPrefix\"))\n+                            .build())\n+                    .build())\n+            .build();\n+\n+    private static final TransactionBody TRANSACTION_BODY = TransactionBody.newBuilder()\n+            .setTransactionFee(10L)\n+            .setMemo(\"memo\")\n+            .build();\n+\n+    private static final TransactionRecord TRANSACTION_RECORD = TransactionRecord.newBuilder()\n+            .setReceipt(TransactionReceipt.newBuilder().setStatusValue(22).build())\n+            .setMemo(\"memo\")\n+            .build();\n+\n+    @Test\n+    public void testBadTransactionBytesThrowException() {\n+        testException(new byte[] {0x0, 0x1}, DEFAULT_RECORD_BYTES, RecordItem.BAD_TRANSACTION_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testBadRecordBytesThrowException() {\n+        testException(DEFAULT_TRANSACTION_BYTES, new byte[] {0x0, 0x1}, RecordItem.BAD_RECORD_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testTransactionBytesWithoutTransactionBodyThrowException() {\n+        testException(Transaction.newBuilder().build().toByteArray(),\n+                DEFAULT_RECORD_BYTES, RecordItem.BAD_TRANSACTION_BODY_BYTES_MESSAGE);\n+    }\n+\n+    @Test\n+    public void testWithBody() {\n+        Transaction transaction = TRANSACTION.toBuilder().setBody(TRANSACTION_BODY).build();\n+        RecordItem recordItem = new RecordItem(transaction.toByteArray(), TRANSACTION_RECORD.toByteArray());\n+        assertRecordItem(transaction, recordItem);\n+    }\n+\n+    @Test\n+    public void testWithBodyBytes() {\n+        Transaction transaction = TRANSACTION.toBuilder().setBodyBytes(TRANSACTION_BODY.toByteString()).build();\n+        RecordItem recordItem = new RecordItem(transaction.toByteArray(), TRANSACTION_RECORD.toByteArray());\n+        assertRecordItem(transaction, recordItem);\n+    }\n+\n+    private void testException(byte[] transactionBytes, byte[] recordBytes, String expectedMessage) {\n+        Exception exception = assertThrows(ParserException.class, () -> {\n+            new RecordItem(transactionBytes, recordBytes);\n+        });\n+        assertEquals(expectedMessage, exception.getMessage());\n+    }\n+\n+    private void assertRecordItem(Transaction transaction, RecordItem recordItem) {\n+        assertEquals(transaction, recordItem.getTransaction());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b56bc860c77ea2a507c9965dd0a6c86e995520"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3368, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}