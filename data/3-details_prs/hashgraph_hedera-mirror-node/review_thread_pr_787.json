{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTg3NTUw", "number": 787, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMToxMTo1MlrOD_GZ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzoxNzoxNFrOD_GyCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDkxODE5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMToxMTo1MlrOGZmpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMToxNjo1OFrOGZmqpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMDcwNg==", "bodyText": "nit: Saying the attempt number is good for troubleshooting e.g. \"Attempt 1 timed out....\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429500706", "createdAt": "2020-05-23T01:11:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {\n+        for (int numRetries = 0; numRetries < pubSubProperties.getNumSendTries(); numRetries++) {\n+            try {\n+                pubsubOutputChannel.send(MessageBuilder\n+                        .withPayload(pubSubMessage)\n+                        .setHeader(\"consensusTimestamp\", pubSubMessage.getConsensusTimestamp())\n+                        .build());\n+            } catch (MessageTimeoutException e) {\n+                log.warn(\"Timed out sending message to PubSub\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54685ee3b02869b4c9a12a920798f53aa74c10db"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMTA5Mw==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429501093", "createdAt": "2020-05-23T01:16:58Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {\n+        for (int numRetries = 0; numRetries < pubSubProperties.getNumSendTries(); numRetries++) {\n+            try {\n+                pubsubOutputChannel.send(MessageBuilder\n+                        .withPayload(pubSubMessage)\n+                        .setHeader(\"consensusTimestamp\", pubSubMessage.getConsensusTimestamp())\n+                        .build());\n+            } catch (MessageTimeoutException e) {\n+                log.warn(\"Timed out sending message to PubSub\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMDcwNg=="}, "originalCommit": {"oid": "54685ee3b02869b4c9a12a920798f53aa74c10db"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk3MTIzOnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMjo1ODo1OFrOGZnFzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzoyNzo1MVrOGZnMvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwODA0NA==", "bodyText": "Naming is a bit weird. Would suggest following spring-retry's example and naming it maxAttempts or maxRetries.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429508044", "createdAt": "2020-05-23T02:58:58Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -73,6 +73,7 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.parser.record.entity.persist.transactionBytes`      | false                   | Persist raw transaction bytes to the database                                                  |\n | `hedera.mirror.importer.parser.record.entity.sql.batchSize`                 | 2000                    | When inserting transactions into db, executeBatches() is called every these many transactions  |\n | `hedera.mirror.importer.parser.record.pubsub.topicName`                     |                         | Pubsub topic to publish transactions to                                                        |\n+| `hedera.mirror.importer.parser.record.pubsub.numSendTries`                  | 5                       | Number of attempts when sending messages to PubSub (only for retryable errors)                 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTgyMA==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429509820", "createdAt": "2020-05-23T03:27:51Z", "author": {"login": "apeksharma"}, "path": "docs/configuration.md", "diffHunk": "@@ -73,6 +73,7 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.parser.record.entity.persist.transactionBytes`      | false                   | Persist raw transaction bytes to the database                                                  |\n | `hedera.mirror.importer.parser.record.entity.sql.batchSize`                 | 2000                    | When inserting transactions into db, executeBatches() is called every these many transactions  |\n | `hedera.mirror.importer.parser.record.pubsub.topicName`                     |                         | Pubsub topic to publish transactions to                                                        |\n+| `hedera.mirror.importer.parser.record.pubsub.numSendTries`                  | 5                       | Number of attempts when sending messages to PubSub (only for retryable errors)                 |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwODA0NA=="}, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk3OTk0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzoxNzoxNFrOGZnJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1MzoyMFrOGauBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw==", "bodyText": "Would prefer we not to mix non-business logic in with business logic. Since you're using Spring Integration you should take advantage of the Enterprise Integration Patterns it provides and decouple the two. Besides always being better to delegate such common patterns to a well tested library, it also allows advanced features like customizing backoff policies. Can suggest at least two other ways:\n\nUse an interface annotated with @MessagingGateway as I originally suggested and just put @Retryable(include = MessageTimeoutException.class, maxAttemptsExpression = \"${hedera....maxAttempts}\"} on it\nUse Spring Integration DSL in PubSubAutoConfiguration with retry advice.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429509117", "createdAt": "2020-05-23T03:17:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTk1Nw==", "bodyText": "Won't be able to do this right now. I understand above suggestions might be better way of doing it, but right now i lack the bandwidth to learn springy way of doing things. Need to get this out.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429509957", "createdAt": "2020-05-23T03:30:38Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzA0Nw==", "bodyText": "Fair enough. Let's create a ticket to track for later inclusion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r429573047", "createdAt": "2020-05-23T19:45:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MDI1OA==", "bodyText": "Thanks. Created #789  :)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/787#discussion_r430670258", "createdAt": "2020-05-26T19:53:20Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -79,6 +78,22 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         }\n     }\n \n+    // Publishes the PubSubMessage while retrying if a retryable error is encountered.\n+    private void sendPubSubMessage(PubSubMessage pubSubMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTExNw=="}, "originalCommit": {"oid": "c9a6ae3431e6ae41f08117d9b76fa4e561913184"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}