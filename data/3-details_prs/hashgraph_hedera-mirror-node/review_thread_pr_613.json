{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTQxOTAz", "number": 613, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1NjowN1rODqH9kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NDozMFrODqd0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3MjM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1NjowN1rOF5s6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1NjowN1rOF5s6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTAzNg==", "bodyText": "Should be snake case to match the others: topic_id", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049036", "createdAt": "2020-03-22T02:56:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3MzAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1NzoxOFrOF5s63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1NzoxOFrOF5s63w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTExOQ==", "bodyText": "To match transactions API, we should format it the same way using utils.nsToSecNs", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049119", "createdAt": "2020-03-22T02:57:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3MzkyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1OToyMVrOF5s7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMjo1OToyMVrOF5s7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTIzMw==", "bodyText": "We encode memo in other APIs to base64, so we should use that instead of hex for these byte[] fields. Also, base64 is more efficient in that it uses less characters: Hex will take two characters for each byte - Base64 takes 4 characters for every 3 bytes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049233", "createdAt": "2020-03-22T02:59:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3NTkxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowNToxN1rOF5s8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowNToxN1rOF5s8WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTQ5Ng==", "bodyText": "This should technically compare against config.hedera.mirror.shard and not assume shard is 0. It will be hard to track down all these places that hardcode shard later if we ever have multiple shards.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049496", "createdAt": "2020-03-22T03:05:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),\n+    sequence_number: parseInt(row['sequence_number'])\n+  };\n+};\n+\n+const getMessage = function(topicId, seqNum, messageOnly, httpResponse) {\n+  const validationResult = validateParams(topicId, seqNum);\n+  if (!validationResult.isValid) {\n+    return new Promise((resolve, reject) => {\n+      resolve(validationResult);\n+    });\n+  }\n+\n+  let topicEntityId = utils.parseEntityId(topicId);\n+  if (parseInt(topicEntityId.shard) !== 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3NzA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowNzo0OFrOF5s84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowNzo0OFrOF5s84Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTYzMw==", "bodyText": "nit: Should avoid string concatenation and use backticks for this and other logging statements: Multiple rows found for topicId ${topicId} and seqNum ${seqNum}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049633", "createdAt": "2020-03-22T03:07:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),\n+    sequence_number: parseInt(row['sequence_number'])\n+  };\n+};\n+\n+const getMessage = function(topicId, seqNum, messageOnly, httpResponse) {\n+  const validationResult = validateParams(topicId, seqNum);\n+  if (!validationResult.isValid) {\n+    return new Promise((resolve, reject) => {\n+      resolve(validationResult);\n+    });\n+  }\n+\n+  let topicEntityId = utils.parseEntityId(topicId);\n+  if (parseInt(topicEntityId.shard) !== 0) {\n+    httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    return;\n+  }\n+  const pgSqlQuery =\n+    'SELECT * FROM topic_message WHERE realm_num= ' +\n+    topicEntityId.realm +\n+    ' AND topic_num= ' +\n+    topicEntityId.num +\n+    ' AND sequence_number=' +\n+    seqNum;\n+  return pool.query(pgSqlQuery).then(results => {\n+    if (results.rows.length === 1) {\n+      let topicMessage = formatTopicMessageRow(topicId, results.rows[0]);\n+      if (messageOnly) {\n+        httpResponse.json(topicMessage.message);\n+      } else {\n+        httpResponse.json(topicMessage);\n+      }\n+    } else if (results.rows.length === 0) {\n+      httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    } else {\n+      logger.error('Multiple rows found for topicId:' + topicId + ' seqNum:' + seqNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk3NzY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowOToxNVrOF5s9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzowOToxNVrOF5s9LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTcwOA==", "bodyText": "Reminder to remove contents", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396049708", "createdAt": "2020-03-22T03:09:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -111,6 +112,9 @@ app.get(apiPrefix + '/transactions/:id', transactions.getOneTransaction);\n app.get(apiPrefix + '/balances', (req, res) => caches['balances'].getResponse(req, res, balances.getBalances));\n app.get(apiPrefix + '/accounts', (req, res) => caches['accounts'].getResponse(req, res, accounts.getAccounts));\n app.get(apiPrefix + '/accounts/:id', accounts.getOneAccount);\n+app.get(apiPrefix + '/topic/:topicId/message/:seqNum', topic.getMessageInfo);\n+app.get(apiPrefix + '/topic/:topicId/message/:seqNum/contents', topic.getMessageContents);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk4MDc1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoxODoxOFrOF5s-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoxODoxOFrOF5s-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MDA3Ng==", "bodyText": "nit: there's a results.rowCount field that gives you this value with better perf", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396050076", "createdAt": "2020-03-22T03:18:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),\n+    sequence_number: parseInt(row['sequence_number'])\n+  };\n+};\n+\n+const getMessage = function(topicId, seqNum, messageOnly, httpResponse) {\n+  const validationResult = validateParams(topicId, seqNum);\n+  if (!validationResult.isValid) {\n+    return new Promise((resolve, reject) => {\n+      resolve(validationResult);\n+    });\n+  }\n+\n+  let topicEntityId = utils.parseEntityId(topicId);\n+  if (parseInt(topicEntityId.shard) !== 0) {\n+    httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    return;\n+  }\n+  const pgSqlQuery =\n+    'SELECT * FROM topic_message WHERE realm_num= ' +\n+    topicEntityId.realm +\n+    ' AND topic_num= ' +\n+    topicEntityId.num +\n+    ' AND sequence_number=' +\n+    seqNum;\n+  return pool.query(pgSqlQuery).then(results => {\n+    if (results.rows.length === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk4MTQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoyMDo0MVrOF5s-7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoyMDo0MVrOF5s-7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MDE1OA==", "bodyText": "You should add a limit = 1, to ensure you only get one result.\nI also had this message as overkill and took the first occurrence and warned on this instead of erroring.\nI think the limit would be best, I don't mind how you handle multiple if it happens.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396050158", "createdAt": "2020-03-22T03:20:41Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),\n+    sequence_number: parseInt(row['sequence_number'])\n+  };\n+};\n+\n+const getMessage = function(topicId, seqNum, messageOnly, httpResponse) {\n+  const validationResult = validateParams(topicId, seqNum);\n+  if (!validationResult.isValid) {\n+    return new Promise((resolve, reject) => {\n+      resolve(validationResult);\n+    });\n+  }\n+\n+  let topicEntityId = utils.parseEntityId(topicId);\n+  if (parseInt(topicEntityId.shard) !== 0) {\n+    httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    return;\n+  }\n+  const pgSqlQuery =\n+    'SELECT * FROM topic_message WHERE realm_num= ' +\n+    topicEntityId.realm +\n+    ' AND topic_num= ' +\n+    topicEntityId.num +\n+    ' AND sequence_number=' +\n+    seqNum;\n+  return pool.query(pgSqlQuery).then(results => {\n+    if (results.rows.length === 1) {\n+      let topicMessage = formatTopicMessageRow(topicId, results.rows[0]);\n+      if (messageOnly) {\n+        httpResponse.json(topicMessage.message);\n+      } else {\n+        httpResponse.json(topicMessage);\n+      }\n+    } else if (results.rows.length === 0) {\n+      httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    } else {\n+      logger.error('Multiple rows found for topicId:' + topicId + ' seqNum:' + seqNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDk4Mjc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topic.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoyMzo0NlrOF5s_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQwMzoyMzo0NlrOF5s_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA1MDMwNw==", "bodyText": "nit: Convention of other files is to pass in query and params i.e.\nconst pgSqlQuery =\n'SELECT * FROM topic_message WHERE realm_num= $1 AND topic_num= $2'\n\n' AND sequence_number= $3';\npool.query(pgSqlQuery, [topicEntityId.realm, topicEntityId.num, seqNum]).then...", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396050307", "createdAt": "2020-03-22T03:23:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topic.js", "diffHunk": "@@ -0,0 +1,107 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const validateParams = function(topicId, seqNum) {\n+  let badParams = [];\n+  if (!/^\\d{1,10}\\.\\d{1,10}\\.\\d{1,10}$/.test(topicId)) {\n+    badParams.push({message: `Invalid parameter: TOPIC_ID`});\n+  }\n+  if (!/^\\d+$/.test(seqNum)) {\n+    badParams.push({message: `Invalid parameter: SEQ_NUM`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+const formatTopicMessageRow = function(topicId, row) {\n+  return {\n+    consensus_timestamp: parseInt(['consensus_timestamp']),\n+    topicId: topicId,\n+    message: utils.toHexString(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),\n+    sequence_number: parseInt(row['sequence_number'])\n+  };\n+};\n+\n+const getMessage = function(topicId, seqNum, messageOnly, httpResponse) {\n+  const validationResult = validateParams(topicId, seqNum);\n+  if (!validationResult.isValid) {\n+    return new Promise((resolve, reject) => {\n+      resolve(validationResult);\n+    });\n+  }\n+\n+  let topicEntityId = utils.parseEntityId(topicId);\n+  if (parseInt(topicEntityId.shard) !== 0) {\n+    httpResponse.status(utils.httpStatusCodes.NOT_FOUND).send('not found');\n+    return;\n+  }\n+  const pgSqlQuery =\n+    'SELECT * FROM topic_message WHERE realm_num= ' +\n+    topicEntityId.realm +\n+    ' AND topic_num= ' +\n+    topicEntityId.num +\n+    ' AND sequence_number=' +\n+    seqNum;\n+  return pool.query(pgSqlQuery).then(results => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71eb68eb599c523b323923a00773c581d9038f90"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA4MzU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxNjoxNlrOF52eXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0ODozOFrOF6OfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTY2MQ==", "bodyText": "q: it's a naming question but should we have named this 'topicmessage' instead of just 'message'?\ni.e. specific instead of general?\nJust a thought", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396205661", "createdAt": "2020-03-23T04:16:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -105,12 +106,13 @@ let apiPrefix = '/api/v1';\n \n // routes\n app.get(apiPrefix + '/transactions', (req, res) =>\n-  caches['transactions'].getResponse(req, res, transactions.getTransactions)\n+        caches['transactions'].getResponse(req, res, transactions.getTransactions)\n );\n app.get(apiPrefix + '/transactions/:id', transactions.getOneTransaction);\n app.get(apiPrefix + '/balances', (req, res) => caches['balances'].getResponse(req, res, balances.getBalances));\n app.get(apiPrefix + '/accounts', (req, res) => caches['accounts'].getResponse(req, res, accounts.getAccounts));\n app.get(apiPrefix + '/accounts/:id', accounts.getOneAccount);\n+app.get(apiPrefix + '/message/:consensusTimestamp', message.getMessageByConsensusTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5OTA4NQ==", "bodyText": "I changed it to /api/v1/topic/message/:consensusTimestamp. This will at least group it under a common path when we add /api/v1/topic/:id/message/:seqNum", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396599085", "createdAt": "2020-03-23T16:48:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -105,12 +106,13 @@ let apiPrefix = '/api/v1';\n \n // routes\n app.get(apiPrefix + '/transactions', (req, res) =>\n-  caches['transactions'].getResponse(req, res, transactions.getTransactions)\n+        caches['transactions'].getResponse(req, res, transactions.getTransactions)\n );\n app.get(apiPrefix + '/transactions/:id', transactions.getOneTransaction);\n app.get(apiPrefix + '/balances', (req, res) => caches['balances'].getResponse(req, res, balances.getBalances));\n app.get(apiPrefix + '/accounts', (req, res) => caches['accounts'].getResponse(req, res, accounts.getAccounts));\n app.get(apiPrefix + '/accounts/:id', accounts.getOneAccount);\n+app.get(apiPrefix + '/message/:consensusTimestamp', message.getMessageByConsensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTY2MQ=="}, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA4NTg4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODowOFrOF52foA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODowOFrOF52foA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNTk4NA==", "bodyText": "missing a unit test in utils.test.js for this method", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396205984", "createdAt": "2020-03-23T04:18:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -39,6 +40,11 @@ function isNumeric(n) {\n   return !isNaN(parseFloat(n)) && isFinite(n);\n }\n \n+const isValidTimestampParam = function(timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA4NjE5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODoyM1rOF52fzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODoyM1rOF52fzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNjAyOQ==", "bodyText": "missing a unit test in utils.test.js for this method", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396206029", "createdAt": "2020-03-23T04:18:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -182,6 +189,18 @@ const parseEntityId = function(acc) {\n   return ret;\n };\n \n+const parseTimestampParam = function(timestampParam) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA4NjgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODo1NFrOF52gJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoxODo1NFrOF52gJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNjExOQ==", "bodyText": "missing a unit test in utils.test.js for this method", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396206119", "createdAt": "2020-03-23T04:18:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -140,9 +139,12 @@ const validateReq = function(req) {\n       }\n     }\n   }\n+  return makeValidationResponse(badParams);\n+};\n \n+const makeValidationResponse = function(badParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjE0MDU2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/message.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTowMjoxMlrOF53AZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0MTo1OVrOF6QwHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNDM3Mw==", "bodyText": "Running hash should also be base64", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396214373", "createdAt": "2020-03-23T05:02:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/message.js", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const MESSAGE_NOT_FOUND = {message: 'hcs message not found'};\n+\n+const validateParams = function(consensusTimestamp) {\n+  let badParams = [];\n+  if (!utils.isValidTimestampParam(consensusTimestamp)) {\n+    badParams.push({message: `Invalid parameter: consensusTimestamp`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+/**\n+ * Format row in postgres query's result to object which is directly returned to user as json.\n+ */\n+const formatTopicMessageRow = function(row) {\n+  return {\n+    consensus_timestamp: utils.nsToSecNs(row['consensus_timestamp']),\n+    topic_id: `${config.shard}.${row['realm_num']}.${row['topic_num']}`,\n+    message: utils.encodeBase64(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNjE5MQ==", "bodyText": "running_hash was left hex because kabuto also returns hash in hex-encoded format. Also, in crypto world, all hashes are always encoded in hex format, never in base64 format.\nIt's fine for now.\n@Nana-EC can you please change this to hex and same for the apis you are adding. Thanks.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396636191", "createdAt": "2020-03-23T17:41:59Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/message.js", "diffHunk": "@@ -0,0 +1,82 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const config = require('./config.js');\n+const utils = require('./utils.js');\n+\n+const MESSAGE_NOT_FOUND = {message: 'hcs message not found'};\n+\n+const validateParams = function(consensusTimestamp) {\n+  let badParams = [];\n+  if (!utils.isValidTimestampParam(consensusTimestamp)) {\n+    badParams.push({message: `Invalid parameter: consensusTimestamp`});\n+  }\n+  return utils.makeValidationResponse(badParams);\n+};\n+\n+/**\n+ * Format row in postgres query's result to object which is directly returned to user as json.\n+ */\n+const formatTopicMessageRow = function(row) {\n+  return {\n+    consensus_timestamp: utils.nsToSecNs(row['consensus_timestamp']),\n+    topic_id: `${config.shard}.${row['realm_num']}.${row['topic_num']}`,\n+    message: utils.encodeBase64(row['message']),\n+    running_hash: utils.toHexString(row['running_hash']),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNDM3Mw=="}, "originalCommit": {"oid": "7ce92b339455e42cb2e044a046531597f9e8a8ad"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU0MzA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessage-02-timestamp-invalid.spec.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MjoxNlrOF6OpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0MDowN1rOF6Qrhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTY2MQ==", "bodyText": "nit: no need to change here but we should standardize on our error response format.\nIn transactions.js and accounts.js I see place where non json is returned. And in this PR we have messages : [{...}] and then message: {...} in other cases.\nI have a separate PR where I'm addressing this but just pointing it out here so both formats are presented.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396601661", "createdAt": "2020-03-23T16:52:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-02-timestamp-invalid.spec.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{\n+  \"description\": \"Invalid consensus timestamp\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": []\n+  },\n+  \"url\": \"/api/v1/topic/message/123abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"messages\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096d2c4faa3cfaa8a2b21bf42556fde91e52c37"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTAxNQ==", "bodyText": "feel free to change the 'interim' apis as you like :)\nmessages : [{...}] format is also returned for current apis when param validation fails.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396635015", "createdAt": "2020-03-23T17:40:07Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-02-timestamp-invalid.spec.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{\n+  \"description\": \"Invalid consensus timestamp\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": []\n+  },\n+  \"url\": \"/api/v1/topic/message/123abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"messages\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTY2MQ=="}, "originalCommit": {"oid": "9096d2c4faa3cfaa8a2b21bf42556fde91e52c37"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU1MzA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessage-01-timestamp-valid.spec.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NDozMFrOF6OvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo1Njo0N1rOF6RXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMzI0OA==", "bodyText": "q: I can address in my PR but shouldn't we have parity with grpc here and require a valid entity for the expected topic? If so then tests should populate an entity.\nThis is also in my upcoming PR so I can add it if agreed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396603248", "createdAt": "2020-03-23T16:54:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-01-timestamp-valid.spec.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"description\": \"Get single message by valid consensus timestamp\",\n+  \"setup\": {\n+    \"accounts\": [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096d2c4faa3cfaa8a2b21bf42556fde91e52c37"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMjgzNA==", "bodyText": "if the code path being tested doesn't need a particular setup, that it's useless to add that setup.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396632834", "createdAt": "2020-03-23T17:36:43Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-01-timestamp-valid.spec.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"description\": \"Get single message by valid consensus timestamp\",\n+  \"setup\": {\n+    \"accounts\": [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMzI0OA=="}, "originalCommit": {"oid": "9096d2c4faa3cfaa8a2b21bf42556fde91e52c37"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY0NjIwOQ==", "bodyText": "I don't think it's necessary. The GRPC streaming API pays a performance penalty if we stream messages indefinitely for topics that don't/never exist. Adding it to REST we would just be paying a performance penalty every call regardless if it exists or not. We should always have an entity if we have a message.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/613#discussion_r396646209", "createdAt": "2020-03-23T17:56:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-01-timestamp-valid.spec.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"description\": \"Get single message by valid consensus timestamp\",\n+  \"setup\": {\n+    \"accounts\": [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMzI0OA=="}, "originalCommit": {"oid": "9096d2c4faa3cfaa8a2b21bf42556fde91e52c37"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1245, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}