{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDQ4OTI5", "number": 523, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo1ODowNVrODdLhRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo0MTo1M1rODfQESg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI0MDM3OnYy", "diffSide": "LEFT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo1ODowNVrOFlorKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo1Nzo0MVrOFmOpDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODA0MA==", "bodyText": "Why was this deleted? It tests rows before start time are not returned.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375008040", "createdAt": "2020-02-05T00:58:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "diffHunk": "@@ -106,7 +106,6 @@ void findByFilterWithTopicNum() {\n \n     @Test\n     void findByFilterWithStartTime() {\n-        TopicMessage topicMessage1 = domainBuilder.topicMessage().block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTQ4OA==", "bodyText": "Gotcha, I mistook it for an unused line since the topicMessage1 is never used.\nThere's no need for the assignment in that case.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375629488", "createdAt": "2020-02-06T03:54:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "diffHunk": "@@ -106,7 +106,6 @@ void findByFilterWithTopicNum() {\n \n     @Test\n     void findByFilterWithStartTime() {\n-        TopicMessage topicMessage1 = domainBuilder.topicMessage().block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODA0MA=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMDA5NA==", "bodyText": "It's not unused. That line inserts into the database, validating that rows before start time are not returned. Please put it back.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375630094", "createdAt": "2020-02-06T03:57:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "diffHunk": "@@ -106,7 +106,6 @@ void findByFilterWithTopicNum() {\n \n     @Test\n     void findByFilterWithStartTime() {\n-        TopicMessage topicMessage1 = domainBuilder.topicMessage().block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODA0MA=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI0NDg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTowMDo1M1rOFlot-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo1NToxNlrOFmOnaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODc2MQ==", "bodyText": "Why have one test for just start time overflow and another test that has both start and end time overflow? I would say the latter is sufficient.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375008761", "createdAt": "2020-02-05T01:00:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "diffHunk": "@@ -121,6 +120,22 @@ void findByFilterWithStartTime() {\n                 .verifyComplete();\n     }\n \n+    @Test\n+    void findByFilterWithStartTimeOverflow() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyOTY3NQ==", "bodyText": "Sure.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375629675", "createdAt": "2020-02-06T03:55:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryTest.java", "diffHunk": "@@ -121,6 +120,22 @@ void findByFilterWithStartTime() {\n                 .verifyComplete();\n     }\n \n+    @Test\n+    void findByFilterWithStartTimeOverflow() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODc2MQ=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI2MDc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMTowOTo1NVrOFlo3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToxNDowM1rOFmPeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTIwOQ==", "bodyText": "My concern here is this approach has to be done for every query instead of just once inside ConsensusController to validate input. Exception generation and catching are orders of magnitude slower then normal java functions. And queries are now split into pages and run every 2s times Y subscribers, so might have more impact.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375011209", "createdAt": "2020-02-05T01:09:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMDkxNw==", "bodyText": "Gotcha, will move away from the exception catch logic then", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375630917", "createdAt": "2020-02-06T04:02:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTIwOQ=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNDA4Mg==", "bodyText": "Exception logic is fine if just done once, just not in a loop. Other approach would be to create an Instant that represents our max supported and just compare with isAfter/isBefore. Either way", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375634082", "createdAt": "2020-02-06T04:20:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTIwOQ=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MzY3Ng==", "bodyText": "This was what I ended up doing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375643676", "createdAt": "2020-02-06T05:14:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTIwOQ=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MTQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjowN1rOFlpELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNjoyNjoyNVrOFmQaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw==", "bodyText": "This approach does not address all instances of InstantToLongConverter since the shared poller uses it as well. Would be better to centralize in controller.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375014447", "createdAt": "2020-02-05T01:22:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzMDk3OA==", "bodyText": "Agreed. Got rid of extra method. Now every reference should be covered.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375630978", "createdAt": "2020-02-06T04:02:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzODkwMA==", "bodyText": "Will handle centralization in next commit as it would include modifying TopicMessageFilter class", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375638900", "createdAt": "2020-02-06T04:48:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDU4Mg==", "bodyText": "I see the centralization benefit about converting once.\nTo centralize however, it would require both TopicMessageFilter and TopicMessage times be converted to longs.\nThe result is all future arithmetic on them will be in the form of longs that represent nanoseconds and not utilizing the benefit on Instant object operations.\nI think leaving it as Instant leaves it easier to read and operate on the time in a way that's clear.\nLet me know if you feel strongly about centralizing or if I missed your intent here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375644582", "createdAt": "2020-02-06T05:18:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzM0Ng==", "bodyText": "Why would it require both TopicMessageFilter and TopicMessage times be converted to longs? Just check the proto timestamp if the seconds or nanos is less than 0 then set messageFilter.setStartTime(Instant.EPOCH) if so.  Likewise check if seconds+nanos > max that can fit in our long and skip setting filter.endTime if so.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375647346", "createdAt": "2020-02-06T05:32:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1OTAxMw==", "bodyText": "I think I see the mixup.\nYour centralization comment suggested you wanted there to be a central location for the convert() call. So that all the listeners would not have to call it as they do now.\nWhat you've suggested above was a consideration but doesn't achieve centralization of the convert() call.\nDoing the above will still require the InstantToLong conversion prior to the dbclient operation.\nMy last comment explained the effect of centralizing the convert() call in the controller and therefore having to handle times represented as Longs all the way to the repository call.\nI think what you meant was centralizing the initial overflow catch logic, which makes sense.\nI think we're on the same page now.\nI'll make the change", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375659013", "createdAt": "2020-02-06T06:26:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -47,11 +47,12 @@\n                 .and(\"topic_num\")\n                 .is(filter.getTopicNum())\n                 .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+                .greaterThanOrEquals(instantToLongConverter.convertOrDefault(filter.getStartTime()));\n \n-        if (filter.getEndTime() != null) {\n+        Long endTime = instantToLongConverter.convertOrDefault(filter.getEndTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ0Nw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4NzA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/InstantToLongConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNTozM1rOFlpHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDo0MjoyMFrOFmPHkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTMzNw==", "bodyText": "Not a fan of the extra method. The class implements Spring's Converter interface so it can be registered with Spring and used automatically within the framework. This extra method bypasses that. Though to be fair we are actually just calling it manually since Spring R2DBC doesn't currently support this, but in the future it could and we wouldn't need to call this manually in the repository.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375015337", "createdAt": "2020-02-05T01:25:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/InstantToLongConverter.java", "diffHunk": "@@ -39,4 +39,12 @@ public Long convert(Instant instant) {\n         }\n         return Math.addExact(Math.multiplyExact(instant.getEpochSecond(), NANOS_PER_SECOND), instant.getNano());\n     }\n+\n+    public Long convertOrDefault(Instant instant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNzkwNQ==", "bodyText": "Removing extra method. Agreed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r375637905", "createdAt": "2020-02-06T04:42:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/converter/InstantToLongConverter.java", "diffHunk": "@@ -39,4 +39,12 @@ public Long convert(Instant instant) {\n         }\n         return Math.addExact(Math.multiplyExact(instant.getEpochSecond(), NANOS_PER_SECOND), instant.getNano());\n     }\n+\n+    public Long convertOrDefault(Instant instant) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTMzNw=="}, "originalCommit": {"oid": "6929e5e70b9ccbf5e2191e23f6b8a70c442dc06e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTU5MTQyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjoxODo0MFrOFnL6qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTozOTo1N1rOFn2irA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNDAyNQ==", "bodyText": "nit: Long.MAX_VALUE / NANOS_PER_SECOND * NANOS_PER_SECOND might be clearer", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r376634025", "createdAt": "2020-02-07T22:18:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -49,6 +51,8 @@\n @RequiredArgsConstructor\n public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusServiceImplBase {\n \n+    private static final long LONG_MAX_SECONDS = 9_223_372_036_000_000_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzMjM5Ng==", "bodyText": "Good point. Changed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377332396", "createdAt": "2020-02-10T21:39:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -49,6 +51,8 @@\n @RequiredArgsConstructor\n public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusServiceImplBase {\n \n+    private static final long LONG_MAX_SECONDS = 9_223_372_036_000_000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzNDAyNQ=="}, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTYxOTYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMToyMlrOFnMLyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo0MDoyMlrOFn2jaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODQwOA==", "bodyText": "This is wrong.  Having  seconds=0 and nanos=999999999 will cause end time to not be set.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r376638408", "createdAt": "2020-02-07T22:31:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +76,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();\n+\n+            // scope pre epoch timestamps to epoch instant\n+            if (startTimeStamp.getSeconds() < 0 || startTimeStamp.getNanos() < 0) {\n+                builder.startTime(Instant.EPOCH);\n+            } else {\n+                builder.startTime(ProtoUtil.fromTimestamp(startTimeStamp));\n+            }\n         }\n \n         if (query.hasConsensusEndTime()) {\n-            builder.endTime(ProtoUtil.fromTimestamp(query.getConsensusEndTime()));\n+            Timestamp endTimeStamp = query.getConsensusEndTime();\n+\n+            // only set endTime if it's smaller than the seconds and nanoseconds in the Long.MAX value\n+            if (endTimeStamp.getSeconds() <= LONG_MAX_SECONDS && endTimeStamp.getNanos() <= LONG_MAX_NANOSECONDS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzMjU4NQ==", "bodyText": "Good catch. I'm just gonna do a boundary check to ensure all cases", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377332585", "createdAt": "2020-02-10T21:40:22Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +76,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();\n+\n+            // scope pre epoch timestamps to epoch instant\n+            if (startTimeStamp.getSeconds() < 0 || startTimeStamp.getNanos() < 0) {\n+                builder.startTime(Instant.EPOCH);\n+            } else {\n+                builder.startTime(ProtoUtil.fromTimestamp(startTimeStamp));\n+            }\n         }\n \n         if (query.hasConsensusEndTime()) {\n-            builder.endTime(ProtoUtil.fromTimestamp(query.getConsensusEndTime()));\n+            Timestamp endTimeStamp = query.getConsensusEndTime();\n+\n+            // only set endTime if it's smaller than the seconds and nanoseconds in the Long.MAX value\n+            if (endTimeStamp.getSeconds() <= LONG_MAX_SECONDS && endTimeStamp.getNanos() <= LONG_MAX_NANOSECONDS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODQwOA=="}, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTYyMzE1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMzowNVrOFnMN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo0MDoxOFrOFn2jRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODk1NA==", "bodyText": "Please add a test to ConsensusControllerTest for these scenarios.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r376638954", "createdAt": "2020-02-07T22:33:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +76,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzMjU0OQ==", "bodyText": "Added two, pre epoch and post max in the COntrollerTest", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377332549", "createdAt": "2020-02-10T21:40:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +76,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODk1NA=="}, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY0MDk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo0Mjo0OVrOFnMYqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo0MDowMFrOFn2ixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MTcwNQ==", "bodyText": "nit: Long.MAX_VALUE % NANOS_PER_SECOND might be clearer", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r376641705", "createdAt": "2020-02-07T22:42:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -49,6 +51,8 @@\n @RequiredArgsConstructor\n public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusServiceImplBase {\n \n+    private static final long LONG_MAX_SECONDS = 9_223_372_036_000_000_000L;\n+    private static final int LONG_MAX_NANOSECONDS = 854_775_807;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzMjQyMA==", "bodyText": "Good point. Changed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377332420", "createdAt": "2020-02-10T21:40:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -49,6 +51,8 @@\n @RequiredArgsConstructor\n public class ConsensusController extends ReactorConsensusServiceGrpc.ConsensusServiceImplBase {\n \n+    private static final long LONG_MAX_SECONDS = 9_223_372_036_000_000_000L;\n+    private static final int LONG_MAX_NANOSECONDS = 854_775_807;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MTcwNQ=="}, "originalCommit": {"oid": "f86f4675506774c3a30fad74a6041401efbb14c7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY3NDY0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxMjo0NVrOFn6KLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNDowNzo0N1rOFn9D7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MTY2MQ==", "bodyText": "This should fail if endTimestamp is negative instead of assuming they want to never end", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377391661", "createdAt": "2020-02-11T00:12:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -104,4 +121,13 @@ private Throwable unknownError(Throwable t) {\n         log.error(\"Unknown error subscribing to topic\", t);\n         return Status.INTERNAL.augmentDescription(t.getMessage()).asRuntimeException();\n     }\n+\n+    private boolean validEndTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {\n+            return false;\n+        }\n+\n+        return (endTimeStamp.getSeconds() >= 0 && endTimeStamp.getSeconds() <= LONG_MAX_SECONDS) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f813a3e79387836572c0afa844d2921d5de9fe"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzOTIxMw==", "bodyText": "Addressed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377439213", "createdAt": "2020-02-11T04:07:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -104,4 +121,13 @@ private Throwable unknownError(Throwable t) {\n         log.error(\"Unknown error subscribing to topic\", t);\n         return Status.INTERNAL.augmentDescription(t.getMessage()).asRuntimeException();\n     }\n+\n+    private boolean validEndTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {\n+            return false;\n+        }\n+\n+        return (endTimeStamp.getSeconds() >= 0 && endTimeStamp.getSeconds() <= LONG_MAX_SECONDS) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MTY2MQ=="}, "originalCommit": {"oid": "d7f813a3e79387836572c0afa844d2921d5de9fe"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc5MDc5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0MjoyMFrOFoOCVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1MzozMlrOFoTAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzMzMw==", "bodyText": "This looks like it will throw an IAE if startTimeStamp is negative, but we said negative timestamps should just default to epoch.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377717333", "createdAt": "2020-02-11T15:42:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +74,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();\n+\n+            // scope pre epoch timestamps to epoch instant\n+            if (TimestampUtil.isValidTimeStamp(startTimeStamp)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5ODgxMw==", "bodyText": "That's a regression. startTimes out of the bound should indeed be bounded to EPOCH as we agreed and no exception thrown. That case should be for endTime only.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377798813", "createdAt": "2020-02-11T17:53:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +74,23 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();\n+\n+            // scope pre epoch timestamps to epoch instant\n+            if (TimestampUtil.isValidTimeStamp(startTimeStamp)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzMzMw=="}, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgyODQ2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MToxMVrOFoOZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1Mzo1M1rOFoTBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzM1NQ==", "bodyText": "Not sure naming makes sense. A timestamp can be valid if greater than LONG_MAX_SECONDS, it's just not valid when we convert it to our internal representation of it as a long. It may make more sense to just move this logic to ProtoUtils.fromTimestamp(). A parameter can be added to control whether to take timestamp as is or do bounds checking.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377723355", "createdAt": "2020-02-11T15:51:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.grpc.util;\n+\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import io.grpc.Status;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Log4j2\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TimestampUtil {\n+    private static final long NANOS_PER_SECOND = 1_000_000_000L;\n+    public static final long LONG_MAX_SECONDS = Long.MAX_VALUE / NANOS_PER_SECOND * NANOS_PER_SECOND;\n+    public static final int LONG_MAX_NANOSECONDS = (int) (Long.MAX_VALUE % NANOS_PER_SECOND);\n+\n+    public static boolean isValidTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {\n+            return false;\n+        }\n+\n+        if (endTimeStamp.getSeconds() < 0 || endTimeStamp.getNanos() < 0) {\n+            log.warn(\"Negative endTimeStamp supplied\");\n+            throw Status.INVALID_ARGUMENT.augmentDescription(\"Negative endTimeStamp supplied\").asRuntimeException();\n+        }\n+\n+        // valid if seconds is less than max or if seconds is at max and nanoseconds are at or below max\n+        // 0 <= valid_time < LONG_MAX_SECONDS (9_223_372_036_000_000_000L) + LONG_MAX_NANOSECONDS (854_775_807)\n+        return (endTimeStamp.getSeconds() < LONG_MAX_SECONDS) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5OTAxNg==", "bodyText": "Moved this logic to ProtoUtil.\nI didn't like the extra parameter option as in the startTime case you want to check and then covert or scope . Then in the endTime case you want to check and throw and error for the client if it's out of bound.\nAs such it makes sense to have a check method (say isLongSupportedTimeStamp() ) and based in its result take the appropriate action for your given timestamp.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377799016", "createdAt": "2020-02-11T17:53:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.grpc.util;\n+\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import io.grpc.Status;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Log4j2\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TimestampUtil {\n+    private static final long NANOS_PER_SECOND = 1_000_000_000L;\n+    public static final long LONG_MAX_SECONDS = Long.MAX_VALUE / NANOS_PER_SECOND * NANOS_PER_SECOND;\n+    public static final int LONG_MAX_NANOSECONDS = (int) (Long.MAX_VALUE % NANOS_PER_SECOND);\n+\n+    public static boolean isValidTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {\n+            return false;\n+        }\n+\n+        if (endTimeStamp.getSeconds() < 0 || endTimeStamp.getNanos() < 0) {\n+            log.warn(\"Negative endTimeStamp supplied\");\n+            throw Status.INVALID_ARGUMENT.augmentDescription(\"Negative endTimeStamp supplied\").asRuntimeException();\n+        }\n+\n+        // valid if seconds is less than max or if seconds is at max and nanoseconds are at or below max\n+        // 0 <= valid_time < LONG_MAX_SECONDS (9_223_372_036_000_000_000L) + LONG_MAX_NANOSECONDS (854_775_807)\n+        return (endTimeStamp.getSeconds() < LONG_MAX_SECONDS) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzM1NQ=="}, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgzMTQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MTo1N1rOFoObvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzo1MzowM1rOFoS_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzgzNg==", "bodyText": "Shouldn't be named endTimeStamp", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377723836", "createdAt": "2020-02-11T15:51:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.grpc.util;\n+\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import io.grpc.Status;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Log4j2\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TimestampUtil {\n+    private static final long NANOS_PER_SECOND = 1_000_000_000L;\n+    public static final long LONG_MAX_SECONDS = Long.MAX_VALUE / NANOS_PER_SECOND * NANOS_PER_SECOND;\n+    public static final int LONG_MAX_NANOSECONDS = (int) (Long.MAX_VALUE % NANOS_PER_SECOND);\n+\n+    public static boolean isValidTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5ODU3Mg==", "bodyText": "File will be removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r377798572", "createdAt": "2020-02-11T17:53:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/util/TimestampUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.grpc.util;\n+\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import io.grpc.Status;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Log4j2\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class TimestampUtil {\n+    private static final long NANOS_PER_SECOND = 1_000_000_000L;\n+    public static final long LONG_MAX_SECONDS = Long.MAX_VALUE / NANOS_PER_SECOND * NANOS_PER_SECOND;\n+    public static final int LONG_MAX_NANOSECONDS = (int) (Long.MAX_VALUE % NANOS_PER_SECOND);\n+\n+    public static boolean isValidTimeStamp(Timestamp endTimeStamp) {\n+        if (endTimeStamp == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzgzNg=="}, "originalCommit": {"oid": "632472cce196428e645c256de25e9c9d1834f1a7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDk1NjkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo0MTo1M1rOFo2GPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo0MTo1M1rOFo2GPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3MzY5NA==", "bodyText": "Don't need to re-parse timestamp. Also can reduce if else to ternary:\nbuilder.startTime(startInstant.isBefore(Instant.EPOCH) ? Instant.EPOCH : startInstant);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/523#discussion_r378373694", "createdAt": "2020-02-12T16:41:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -72,11 +74,25 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n                 .topicNum((int) query.getTopicID().getTopicNum());\n \n         if (query.hasConsensusStartTime()) {\n-            builder.startTime(ProtoUtil.fromTimestamp(query.getConsensusStartTime()));\n+            Timestamp startTimeStamp = query.getConsensusStartTime();\n+            Instant startInstant = ProtoUtil.fromTimestamp(startTimeStamp);\n+\n+            if (startInstant.isBefore(Instant.EPOCH)) {\n+                builder.startTime(Instant.EPOCH);\n+            } else {\n+                builder.startTime(ProtoUtil.fromTimestamp(startTimeStamp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac603fcbc54bbafe96b40e06bc15790b9ec8071"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1133, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}