{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTcyMDE5", "number": 1128, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNjozNlrOEtjsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1NjowNFrOEto7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjA2MDk1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNjozNlrOHhagPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNjozNlrOHhagPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5OTI5NA==", "bodyText": "map isn't thread safe. This should probably have some double checked locking pattern to ensure the map doesn't get corrupted if multiple threads write to it during initialization.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1128#discussion_r504799294", "createdAt": "2020-10-14T16:06:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "diffHunk": "@@ -98,29 +100,49 @@ func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n }\n \n // Types returns map of all Transaction Types\n-// TODO implement cache instead of retrieving this everytime form DB\n-func (tr *TransactionRepository) Types() map[int]string {\n+func (tr *TransactionRepository) Types() (map[int]string, *rTypes.Error) {\n+\tif tr.types != nil {\n+\t\treturn tr.types, nil\n+\t}\n+\n \ttypesArray := tr.retrieveTransactionTypes()\n-\ttMap := make(map[int]string)\n+\tif len(typesArray) == 0 {\n+\t\tlog.Println(\"No Transaction Types were found in the database.\")\n+\t\treturn nil, errors.Errors[errors.OperationTypesNotFound]\n+\t}\n+\n+\ttr.types = make(map[int]string)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b4c6c24cfd3e045ce3189c74b9777e7b1de95c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjA2NjQ5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNzo1NFrOHhaj0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNzo1NFrOHhaj0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMDIxMA==", "bodyText": "Same comment about thread safety", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1128#discussion_r504800210", "createdAt": "2020-10-14T16:07:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "diffHunk": "@@ -98,29 +100,49 @@ func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n }\n \n // Types returns map of all Transaction Types\n-// TODO implement cache instead of retrieving this everytime form DB\n-func (tr *TransactionRepository) Types() map[int]string {\n+func (tr *TransactionRepository) Types() (map[int]string, *rTypes.Error) {\n+\tif tr.types != nil {\n+\t\treturn tr.types, nil\n+\t}\n+\n \ttypesArray := tr.retrieveTransactionTypes()\n-\ttMap := make(map[int]string)\n+\tif len(typesArray) == 0 {\n+\t\tlog.Println(\"No Transaction Types were found in the database.\")\n+\t\treturn nil, errors.Errors[errors.OperationTypesNotFound]\n+\t}\n+\n+\ttr.types = make(map[int]string)\n \tfor _, t := range typesArray {\n-\t\ttMap[t.ProtoID] = t.Name\n+\t\ttr.types[t.ProtoID] = t.Name\n \t}\n-\treturn tMap\n+\treturn tr.types, nil\n }\n \n // Statuses returns map of all Transaction Results\n-// TODO implement cache instead of retrieving this everytime form DB\n-func (tr *TransactionRepository) Statuses() map[int]string {\n+func (tr *TransactionRepository) Statuses() (map[int]string, *rTypes.Error) {\n+\tif tr.statuses != nil {\n+\t\treturn tr.statuses, nil\n+\t}\n+\n \trArray := tr.retrieveTransactionResults()\n-\trMap := make(map[int]string)\n+\tif len(rArray) == 0 {\n+\t\tlog.Println(\"No Transaction Results were found in the database.\")\n+\t\treturn nil, errors.Errors[errors.OperationStatusesNotFound]\n+\t}\n+\n+\ttr.statuses = make(map[int]string)\n \tfor _, s := range rArray {\n-\t\trMap[s.ProtoID] = s.Result\n+\t\ttr.statuses[s.ProtoID] = s.Result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25b4c6c24cfd3e045ce3189c74b9777e7b1de95c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjkyMDA3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1NjowNFrOHhi0wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo1NjowNFrOHhi0wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzNTYxNw==", "bodyText": "suggestion: it's better to use sync.Once to guarantee statues /  types is only retrieved once when the first time it's needed, then can just return a normal map since it's all read operations", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1128#discussion_r504935617", "createdAt": "2020-10-14T19:56:04Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/transaction/transaction.go", "diffHunk": "@@ -98,29 +103,51 @@ func NewTransactionRepository(dbClient *gorm.DB) *TransactionRepository {\n }\n \n // Types returns map of all Transaction Types\n-// TODO implement cache instead of retrieving this everytime form DB\n-func (tr *TransactionRepository) Types() map[int]string {\n+func (tr *TransactionRepository) Types() (*sync.Map, *rTypes.Error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c5e4ea67b1a0cf62ac97cee3ba540d950c06ac"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1542, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}