{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzQ4NTIz", "number": 1125, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowNjoyN1rOEuCqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0NToxMlrOEuDx_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzEzNjM1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/token-info-01-no-args.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowNjoyN1rOHiMlHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxMjowN1rOHiR5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxOTc0Mg==", "bodyText": "I thought Xin's PR renamed this to entities? Are these all accounts or are some tokens? Can you please always put the types so it's clear. I think these are defaulting to account type.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505619742", "createdAt": "2020-10-15T15:06:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-01-no-args.spec.json", "diffHunk": "@@ -0,0 +1,63 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNjgzNQ==", "bodyText": "Yeah, left over logic missed in merge. Will update.\nLooks like not all the token specs are using entities.\nSo I might update those too", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505706835", "createdAt": "2020-10-15T17:12:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-01-no-args.spec.json", "diffHunk": "@@ -0,0 +1,63 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxOTc0Mg=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzE1MzIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/tokens.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowOTozOVrOHiMvqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxMjoxN1rOHiR5tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMjQ0MA==", "bodyText": "Alphabetic sort of keys, please. Even primary keys.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505622440", "createdAt": "2020-10-15T15:09:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNjkzNA==", "bodyText": "Can do", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505706934", "createdAt": "2020-10-15T17:12:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMjQ0MA=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzE2Njg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/tokens.js", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToxMjoyMlrOHiM4IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTo1NDo1MVrOHiXsdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNDYwOQ==", "bodyText": "This is weird and inefficient. Why do we not have a separate fromNumber(num) that can handle null?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505624609", "createdAt": "2020-10-15T15:12:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),\n+    symbol: row.symbol,\n+    treasury_account_id: EntityId.fromString(row.treasury_account_id).toString(),\n+    freeze_default: row.freeze_default,\n+    admin_key: utils.encodeKey(row.key),\n+    kyc_key: utils.encodeKey(row.kyc_key),\n+    freeze_key: utils.encodeKey(row.freeze_key),\n+    supply_key: utils.encodeKey(row.supply_key),\n+    wipe_key: utils.encodeKey(row.wipe_key),\n+    created_timestamp: utils.nsToSecNs(row.created_timestamp),\n+    decimals: row.decimals,\n+    initial_supply: row.initial_supply,\n+    total_supply: row.total_supply,\n+    expiry_timestamp: row.exp_time_ns,\n+    auto_renew_account:\n+      row.auto_renew_account_id === null ? null : EntityId.fromString(row.auto_renew_account_id.toString()).toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNzE4Ng==", "bodyText": "Yeah, better to move into that function or have one that handles num", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505707186", "createdAt": "2020-10-15T17:12:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),\n+    symbol: row.symbol,\n+    treasury_account_id: EntityId.fromString(row.treasury_account_id).toString(),\n+    freeze_default: row.freeze_default,\n+    admin_key: utils.encodeKey(row.key),\n+    kyc_key: utils.encodeKey(row.kyc_key),\n+    freeze_key: utils.encodeKey(row.freeze_key),\n+    supply_key: utils.encodeKey(row.supply_key),\n+    wipe_key: utils.encodeKey(row.wipe_key),\n+    created_timestamp: utils.nsToSecNs(row.created_timestamp),\n+    decimals: row.decimals,\n+    initial_supply: row.initial_supply,\n+    total_supply: row.total_supply,\n+    expiry_timestamp: row.exp_time_ns,\n+    auto_renew_account:\n+      row.auto_renew_account_id === null ? null : EntityId.fromString(row.auto_renew_account_id.toString()).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNDYwOQ=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNzk4OQ==", "bodyText": "I don't think explicitly toString() is needed, since auto_renew_account_id is of type bigint, pg pool will present it as string. So the value is either null or the encoded entity ID string.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505707989", "createdAt": "2020-10-15T17:14:06Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),\n+    symbol: row.symbol,\n+    treasury_account_id: EntityId.fromString(row.treasury_account_id).toString(),\n+    freeze_default: row.freeze_default,\n+    admin_key: utils.encodeKey(row.key),\n+    kyc_key: utils.encodeKey(row.kyc_key),\n+    freeze_key: utils.encodeKey(row.freeze_key),\n+    supply_key: utils.encodeKey(row.supply_key),\n+    wipe_key: utils.encodeKey(row.wipe_key),\n+    created_timestamp: utils.nsToSecNs(row.created_timestamp),\n+    decimals: row.decimals,\n+    initial_supply: row.initial_supply,\n+    total_supply: row.total_supply,\n+    expiry_timestamp: row.exp_time_ns,\n+    auto_renew_account:\n+      row.auto_renew_account_id === null ? null : EntityId.fromString(row.auto_renew_account_id.toString()).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNDYwOQ=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNjg0OA==", "bodyText": "We'd still need a conversion to string in the non null case.\nI'll configure the fromInt and update the Entity.toString() to handle nullable for more general usage", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505726848", "createdAt": "2020-10-15T17:45:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),\n+    symbol: row.symbol,\n+    treasury_account_id: EntityId.fromString(row.treasury_account_id).toString(),\n+    freeze_default: row.freeze_default,\n+    admin_key: utils.encodeKey(row.key),\n+    kyc_key: utils.encodeKey(row.kyc_key),\n+    freeze_key: utils.encodeKey(row.freeze_key),\n+    supply_key: utils.encodeKey(row.supply_key),\n+    wipe_key: utils.encodeKey(row.wipe_key),\n+    created_timestamp: utils.nsToSecNs(row.created_timestamp),\n+    decimals: row.decimals,\n+    initial_supply: row.initial_supply,\n+    total_supply: row.total_supply,\n+    expiry_timestamp: row.exp_time_ns,\n+    auto_renew_account:\n+      row.auto_renew_account_id === null ? null : EntityId.fromString(row.auto_renew_account_id.toString()).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNDYwOQ=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMTg0Nw==", "bodyText": "So all the response values are indeed String, hence why Xin updated the fromString method.\nI've added a isNullable param for table columns that may be null.\nAlso added the fromInt method that can be used which fromString utilizes", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505801847", "createdAt": "2020-10-15T19:54:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -103,6 +108,28 @@ const formatTokenRow = (row) => {\n   };\n };\n \n+const formatTokenInfoRow = (row) => {\n+  return {\n+    token_id: EntityId.fromString(row.token_id).toString(),\n+    symbol: row.symbol,\n+    treasury_account_id: EntityId.fromString(row.treasury_account_id).toString(),\n+    freeze_default: row.freeze_default,\n+    admin_key: utils.encodeKey(row.key),\n+    kyc_key: utils.encodeKey(row.kyc_key),\n+    freeze_key: utils.encodeKey(row.freeze_key),\n+    supply_key: utils.encodeKey(row.supply_key),\n+    wipe_key: utils.encodeKey(row.wipe_key),\n+    created_timestamp: utils.nsToSecNs(row.created_timestamp),\n+    decimals: row.decimals,\n+    initial_supply: row.initial_supply,\n+    total_supply: row.total_supply,\n+    expiry_timestamp: row.exp_time_ns,\n+    auto_renew_account:\n+      row.auto_renew_account_id === null ? null : EntityId.fromString(row.auto_renew_account_id.toString()).toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyNDYwOQ=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMwMzQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/tokens.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0MTo0M1rOHiOM8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxMjo1NVrOHiR7KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NjMyMQ==", "bodyText": "should use results.rows.length. rowCount is not really rows.length, though for this query, they have the same value. https://node-postgres.com/api/result\nnit: it's easier to read in this way:\nif (results.rows.length !== 1) {\n  throw new NotFoundError();\n}\n\n// normal processing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505646321", "createdAt": "2020-10-15T15:41:43Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -336,7 +383,28 @@ const getTokenBalances = async (req, res) => {\n     });\n };\n \n+const getToken = async (pgSqlQuery, pgSqlParams) => {\n+  if (logger.isTraceEnabled()) {\n+    logger.trace(`getTokenInfo query: ${pgSqlQuery}, params: ${pgSqlParams}`);\n+  }\n+\n+  return pool\n+    .query(pgSqlQuery, pgSqlParams)\n+    .catch((err) => {\n+      throw new DbError(err.message);\n+    })\n+    .then((results) => {\n+      if (results.rowCount === 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNzMwNA==", "bodyText": "Will take your suggestion", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505707304", "createdAt": "2020-10-15T17:12:55Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -336,7 +383,28 @@ const getTokenBalances = async (req, res) => {\n     });\n };\n \n+const getToken = async (pgSqlQuery, pgSqlParams) => {\n+  if (logger.isTraceEnabled()) {\n+    logger.trace(`getTokenInfo query: ${pgSqlQuery}, params: ${pgSqlParams}`);\n+  }\n+\n+  return pool\n+    .query(pgSqlQuery, pgSqlParams)\n+    .catch((err) => {\n+      throw new DbError(err.message);\n+    })\n+    .then((results) => {\n+      if (results.rowCount === 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NjMyMQ=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMxOTAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0NToxMlrOHiOWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzozMDo1NlrOHiSj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0ODgzOA==", "bodyText": "it's changed to tokenId in token balances API", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505648838", "createdAt": "2020-10-15T15:45:12Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -0,0 +1,54 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1\n+      },\n+      {\n+        \"entity_num\": 1135\n+      },\n+      {\n+        \"entity_realm\": 7,\n+        \"entity_num\": 25301\n+      },\n+      {\n+        \"entity_realm\": 23,\n+        \"entity_num\": 45678\n+      }\n+    ],\n+    \"tokens\": [\n+      {\n+        \"token_id\": \"0.0.1\",\n+        \"symbol\": \"FIRSTMOVERLPDJH\"\n+      },\n+      {\n+        \"token_id\": \"0.0.1135\",\n+        \"symbol\": \"ORIGINALRDKSE\"\n+      },\n+      {\n+        \"token_id\": \"0.7.25301\",\n+        \"symbol\": \"MIRRORTOKEN\"\n+      },\n+      {\n+        \"token_id\": \"0.23.45678\",\n+        \"symbol\": \"HEDERACOIN\"\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"tokentransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: token.id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNzUzNQ==", "bodyText": "Will update, missed this as part of merge", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505707535", "createdAt": "2020-10-15T17:13:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -0,0 +1,54 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1\n+      },\n+      {\n+        \"entity_num\": 1135\n+      },\n+      {\n+        \"entity_realm\": 7,\n+        \"entity_num\": 25301\n+      },\n+      {\n+        \"entity_realm\": 23,\n+        \"entity_num\": 45678\n+      }\n+    ],\n+    \"tokens\": [\n+      {\n+        \"token_id\": \"0.0.1\",\n+        \"symbol\": \"FIRSTMOVERLPDJH\"\n+      },\n+      {\n+        \"token_id\": \"0.0.1135\",\n+        \"symbol\": \"ORIGINALRDKSE\"\n+      },\n+      {\n+        \"token_id\": \"0.7.25301\",\n+        \"symbol\": \"MIRRORTOKEN\"\n+      },\n+      {\n+        \"token_id\": \"0.23.45678\",\n+        \"symbol\": \"HEDERACOIN\"\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"tokentransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: token.id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0ODgzOA=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNjA5MA==", "bodyText": "Actually, this is referring to the path param not the query param.\nThe /tokens endpoint still uses the token.id noted in constants.filterKeys.TOKEN_ID which as we noted would be used when multiple entities are used in a query. So I won't remove that constant", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505716090", "createdAt": "2020-10-15T17:28:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -0,0 +1,54 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1\n+      },\n+      {\n+        \"entity_num\": 1135\n+      },\n+      {\n+        \"entity_realm\": 7,\n+        \"entity_num\": 25301\n+      },\n+      {\n+        \"entity_realm\": 23,\n+        \"entity_num\": 45678\n+      }\n+    ],\n+    \"tokens\": [\n+      {\n+        \"token_id\": \"0.0.1\",\n+        \"symbol\": \"FIRSTMOVERLPDJH\"\n+      },\n+      {\n+        \"token_id\": \"0.0.1135\",\n+        \"symbol\": \"ORIGINALRDKSE\"\n+      },\n+      {\n+        \"token_id\": \"0.7.25301\",\n+        \"symbol\": \"MIRRORTOKEN\"\n+      },\n+      {\n+        \"token_id\": \"0.23.45678\",\n+        \"symbol\": \"HEDERACOIN\"\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"tokentransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: token.id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0ODgzOA=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNzc0MA==", "bodyText": "I added a constants.filterKeys.TOKENID that can be used and cases where there are multi entity filters would still want to use the constants.filterKeys.TOKEN_ID", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1125#discussion_r505717740", "createdAt": "2020-10-15T17:30:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -0,0 +1,54 @@\n+{\n+  \"description\": \"Token info api call for a given token\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1\n+      },\n+      {\n+        \"entity_num\": 1135\n+      },\n+      {\n+        \"entity_realm\": 7,\n+        \"entity_num\": 25301\n+      },\n+      {\n+        \"entity_realm\": 23,\n+        \"entity_num\": 45678\n+      }\n+    ],\n+    \"tokens\": [\n+      {\n+        \"token_id\": \"0.0.1\",\n+        \"symbol\": \"FIRSTMOVERLPDJH\"\n+      },\n+      {\n+        \"token_id\": \"0.0.1135\",\n+        \"symbol\": \"ORIGINALRDKSE\"\n+      },\n+      {\n+        \"token_id\": \"0.7.25301\",\n+        \"symbol\": \"MIRRORTOKEN\"\n+      },\n+      {\n+        \"token_id\": \"0.23.45678\",\n+        \"symbol\": \"HEDERACOIN\"\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"tokentransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/abc\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: token.id\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0ODgzOA=="}, "originalCommit": {"oid": "858c11b050aa8ac1efe584009623327190ed7902"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1538, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}