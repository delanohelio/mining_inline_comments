{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4ODQ5NDU1", "number": 1016, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0MDoxMlrOEgIWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyODo0MlrOEgZ30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI2NzkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0MDoxM1rOHM067Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzozMDo0NFrOHM-RhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjAxMw==", "bodyText": "yaml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483212013", "createdAt": "2020-09-03T19:40:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTI1Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483365253", "createdAt": "2020-09-04T03:30:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjAxMw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI3MjkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0MTo1NlrOHM0-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzozMDo0OFrOHM-RkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjgxNw==", "bodyText": "Missing new host, file options and still has sample", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483212817", "createdAt": "2020-09-03T19:41:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTI2NA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483365264", "createdAt": "2020-09-04T03:30:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjgxNw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI3NDk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0MjozN1rOHM0_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzozMzoxMFrOHM-T0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMzE1Mw==", "bodyText": "Remove error, instead recommend they explicitly invoke --help and show its output", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483213153", "createdAt": "2020-09-03T19:42:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTg0Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483365843", "createdAt": "2020-09-04T03:33:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMzE1Mw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4MDQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NDoyM1rOHM1Crg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo0NzoyM1rOHNQYKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMzk5OA==", "bodyText": "Should support file as stdin input so you can curl | check-state-proof", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483213998", "createdAt": "2020-09-03T19:44:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTU0MA==", "bodyText": "Seems weird to support stdin input when the -f option is supported.\nEspecially for the case of curl when the tool itself makes an http call by design.\nI get that it's once less step but node script design makes it not very pretty (trying now) for a script to support both console arguments and stdin input.\nMainly because the result stdin input isn't available immediately and is chunked through so you have to build it over time and ensure everything came though.\nThis process isn't synchronous so I'd have to add await logic and some refactoring which is unnecessary for the non pipe scenario.\nWill take another look but I'm suggesting punting for this PR.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483409540", "createdAt": "2020-09-04T06:17:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMzk5OA=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MTg2Nw==", "bodyText": "Found an easier way to do this but it's essentially serves as a replacement for -f and still requires async handling of the time it takes to populate the buffer in the case of doing an actual curl.\nThought I'd have it in the next commit but I'll hold off", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483661867", "createdAt": "2020-09-04T14:47:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMzk5OA=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4Mzk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NToyMlrOHM1E0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjowODo0M1rOHNAzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDU0Nw==", "bodyText": "Would be better to add local as an explicit option and throw an error for default", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483214547", "createdAt": "2020-09-03T19:45:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {\n+    alias: 'file',\n+    describe: 'Absolute file path containing State Proof REST API response json',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('h', {\n+    alias: 'host',\n+    describe: 'REST API host. Default is testnet',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('e', {\n+    alias: 'env',\n+    describe: 'Your environment e.g. previewnet/testnet/mainnet',\n+    type: 'string',\n+    demandOption: false,\n+  }).argv;\n \n const startUpScreen = () => {\n-  const greeting = chalk.bold(`Hedera Transaction State Proof CLI!`);\n+  const greeting = chalk.bold(`Hedera Transaction State Proof Checker CLI!`);\n \n   const msgBox = boxen(greeting, boxenOptions);\n   console.log(msgBox);\n \n   let host;\n-  switch (options.env) {\n-    case 'testnet':\n-      host = 'https://testnet.mirrornode.hedera.com';\n-      break;\n-    case 'mainnet':\n-      host = 'https://mainnet.mirrornode.hedera.com';\n-      break;\n-    default:\n-      host = 'localhost:5551';\n+  // if host parameter was not passed then set host according to env.\n+  if (_.isUndefined(options.host)) {\n+    switch (options.env) {\n+      case 'previewnet':\n+        host = 'https://previewnet.mirrornode.hedera.com';\n+        break;\n+      case 'mainnet':\n+        host = 'https://mainnet.mirrornode.hedera.com';\n+        break;\n+      case 'testnet':\n+        host = 'https://testnet.mirrornode.hedera.com';\n+        break;\n+      default:\n+        host = 'http://localhost:5551';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTg3Nw==", "bodyText": "Added local and throwing for default", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483365877", "createdAt": "2020-09-04T03:33:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {\n+    alias: 'file',\n+    describe: 'Absolute file path containing State Proof REST API response json',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('h', {\n+    alias: 'host',\n+    describe: 'REST API host. Default is testnet',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('e', {\n+    alias: 'env',\n+    describe: 'Your environment e.g. previewnet/testnet/mainnet',\n+    type: 'string',\n+    demandOption: false,\n+  }).argv;\n \n const startUpScreen = () => {\n-  const greeting = chalk.bold(`Hedera Transaction State Proof CLI!`);\n+  const greeting = chalk.bold(`Hedera Transaction State Proof Checker CLI!`);\n \n   const msgBox = boxen(greeting, boxenOptions);\n   console.log(msgBox);\n \n   let host;\n-  switch (options.env) {\n-    case 'testnet':\n-      host = 'https://testnet.mirrornode.hedera.com';\n-      break;\n-    case 'mainnet':\n-      host = 'https://mainnet.mirrornode.hedera.com';\n-      break;\n-    default:\n-      host = 'localhost:5551';\n+  // if host parameter was not passed then set host according to env.\n+  if (_.isUndefined(options.host)) {\n+    switch (options.env) {\n+      case 'previewnet':\n+        host = 'https://previewnet.mirrornode.hedera.com';\n+        break;\n+      case 'mainnet':\n+        host = 'https://mainnet.mirrornode.hedera.com';\n+        break;\n+      case 'testnet':\n+        host = 'https://testnet.mirrornode.hedera.com';\n+        break;\n+      default:\n+        host = 'http://localhost:5551';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDU0Nw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwNjY0Ng==", "bodyText": "Moved stuff around since with default throwing error when a file is provided -e doesn't need to be set and it throws.\nRearranged by skipping host and env logic when a file is provided", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483406646", "createdAt": "2020-09-04T06:08:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/startUp.js", "diffHunk": "@@ -42,36 +43,59 @@ const options = yargs\n     type: 'string',\n     demandOption: true,\n   })\n-  .option('s', {alias: 'sample', describe: 'Use sample data', type: 'boolean', demandOption: false})\n-  .option('e', {alias: 'env', describe: 'Your environment e.g. test / main', type: 'string', demandOption: true}).argv;\n+  .option('f', {\n+    alias: 'file',\n+    describe: 'Absolute file path containing State Proof REST API response json',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('h', {\n+    alias: 'host',\n+    describe: 'REST API host. Default is testnet',\n+    type: 'string',\n+    demandOption: false,\n+  })\n+  .option('e', {\n+    alias: 'env',\n+    describe: 'Your environment e.g. previewnet/testnet/mainnet',\n+    type: 'string',\n+    demandOption: false,\n+  }).argv;\n \n const startUpScreen = () => {\n-  const greeting = chalk.bold(`Hedera Transaction State Proof CLI!`);\n+  const greeting = chalk.bold(`Hedera Transaction State Proof Checker CLI!`);\n \n   const msgBox = boxen(greeting, boxenOptions);\n   console.log(msgBox);\n \n   let host;\n-  switch (options.env) {\n-    case 'testnet':\n-      host = 'https://testnet.mirrornode.hedera.com';\n-      break;\n-    case 'mainnet':\n-      host = 'https://mainnet.mirrornode.hedera.com';\n-      break;\n-    default:\n-      host = 'localhost:5551';\n+  // if host parameter was not passed then set host according to env.\n+  if (_.isUndefined(options.host)) {\n+    switch (options.env) {\n+      case 'previewnet':\n+        host = 'https://previewnet.mirrornode.hedera.com';\n+        break;\n+      case 'mainnet':\n+        host = 'https://mainnet.mirrornode.hedera.com';\n+        break;\n+      case 'testnet':\n+        host = 'https://testnet.mirrornode.hedera.com';\n+        break;\n+      default:\n+        host = 'http://localhost:5551';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDU0Nw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI4OTMzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NzoxMlrOHM1IXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzozMDozOVrOHM-Rdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTQ1Mg==", "bodyText": "We should change the folder name to match check-state-proof", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483215452", "createdAt": "2020-09-03T19:47:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NTIzOA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483365238", "createdAt": "2020-09-04T03:30:39Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTQ1Mg=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTI5ODk1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo1MDoxMVrOHM1OFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzo0OTowNVrOHM-hWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNjkxOA==", "bodyText": "Extra ticks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483216918", "createdAt": "2020-09-03T19:50:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2OTMwNw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483369307", "createdAt": "2020-09-04T03:49:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNjkxOA=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTMwNTYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo1MjoyNFrOHM1SPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzo0OToyOVrOHM-hrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNzk4Mw==", "bodyText": "Not necessarily. Most users will probably depend upon our managed mirror node to invoke against. That's why requirements should be npm and a mirror node with State Proof Alpha REST API enabled. Then we can mention if they'd like to run the REST API themselves, see how to enable it in docs/configuration.md. Any steps for how to run mirror node should be moved to the config doc. This doc should stay focused on running the cli against an existing API.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483217983", "createdAt": "2020-09-03T19:52:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2OTM4OA==", "bodyText": "Moved configuration to configuration doc and added a link", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483369388", "createdAt": "2020-09-04T03:49:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNzk4Mw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTMxNTY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo1NTo0MlrOHM1YOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMzo1OTo0MlrOHM-rkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxOTUxMw==", "bodyText": "This duplicates the help output above. Can probably remove that output and move it here to consolidate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483219513", "createdAt": "2020-09-03T19:55:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3MTkyMw==", "bodyText": "Consolidated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483371923", "createdAt": "2020-09-04T03:59:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxOTUxMw=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTMyMzQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo1ODoyNlrOHM1dAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDowNzo1M1rOHM-zig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMDczOA==", "bodyText": "Sample case terminology is still weird. I think we should simplify to 3 types of run modes: Environment, Custom Endpoint and Input File, in that order. For environment, can just mention the 3 values instead of showing separate commands for each environment.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483220738", "createdAt": "2020-09-03T19:58:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified\n+- e - Hedera network environment to point at e.g. previewnet | mainnet | testnet\n+- h - The host of the REST API endpoint e.g. https://testnet.mirrornode.hedera.com (also the default). This overrides the value of the environment.\n+\n+\n+> **_Note_** `npm start --` may be used in favor of `check-state-proof` if you don't install the tool globally\n+e.g. `npm start -- -t <transactionId> -h <host> -e <previewnet|mainnet|testnet> -f <filePath>`\n+\n+\n+### Sample Case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3Mzk2Mg==", "bodyText": "Good suggestion. Taken", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483373962", "createdAt": "2020-09-04T04:07:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified\n+- e - Hedera network environment to point at e.g. previewnet | mainnet | testnet\n+- h - The host of the REST API endpoint e.g. https://testnet.mirrornode.hedera.com (also the default). This overrides the value of the environment.\n+\n+\n+> **_Note_** `npm start --` may be used in favor of `check-state-proof` if you don't install the tool globally\n+e.g. `npm start -- -t <transactionId> -h <host> -e <previewnet|mainnet|testnet> -f <filePath>`\n+\n+\n+### Sample Case", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMDczOA=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTMyNjgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/state-proof-demo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo1OTozNlrOHM1fKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDoxMDowM1rOHM-1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMTI4OA==", "bodyText": "Think this makes more sense back at the top. Can simplify header to Algorithm or Logic or Architecture", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483221288", "createdAt": "2020-09-03T19:59:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified\n+- e - Hedera network environment to point at e.g. previewnet | mainnet | testnet\n+- h - The host of the REST API endpoint e.g. https://testnet.mirrornode.hedera.com (also the default). This overrides the value of the environment.\n+\n+\n+> **_Note_** `npm start --` may be used in favor of `check-state-proof` if you don't install the tool globally\n+e.g. `npm start -- -t <transactionId> -h <host> -e <previewnet|mainnet|testnet> -f <filePath>`\n+\n+\n+### Sample Case\n+To verify the sample case run the following command\n+\n+`check-state-proof -t 0.0.94139-1570800748-313194300 -f <absoluteDirPath>/stateProofSample.json`\n+\n+> **_Note_** The -f option requires an absolute filePath to be provided\n+\n+\n+### Testnet Case\n+\n+`check-state-proof -t <transactionId> -e testnet`\n+\n+### Mainnet Case\n+\n+`check-state-proof -t <transactionId> -e mainnet`\n+\n+### Custom Endpoint Case\n+\n+`check-state-proof -t <transactionId> -h <http(s)Endpoint>`\n+\n+## State Proof Logic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NDQ5Mg==", "bodyText": "Moved back up , to before requirements", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483374492", "createdAt": "2020-09-04T04:10:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/state-proof-demo/README.md", "diffHunk": "@@ -0,0 +1,115 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Requirements\n+To run the CLI you must first install and then configure the REST API as explained below\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+2. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof` or `npm start` with no parameters.\n+The following help section will be displayed to showcase usage\n+```.env\n+Usage: -t <transactionId> -e <env>\n+\n+Options:\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -s, --sample         Use sample data                                 [boolean]\n+  -e, --env            Your environment e.g. test / main     [string] [required]\n+\n+Missing required arguments: t, e\n+```\n+\n+``\n+\n+### Configure REST API\n+To enable State Proof logic the REST API configurations must updated to allow for communication with cloud buckets to pull down the necessary files (address book, signatures files and record file).\n+The process involves setting the properties under `hedera.mirror.rest.stateproof` as documented at [REST API Config](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/configuration.md#rest-api)\n+\n+An example configuration is provided below\n+\n+```.env\n+hedera:\n+  mirror:\n+    rest:\n+      stateproof:\n+        enabled: true\n+        streams:\n+          network: 'TESTNET'\n+          cloudProvider: 'GCP'\n+          region: 'us-east-1'\n+          accessKey: <accessKey>\n+          secretKey: <secretKey>\n+          bucketName: 'hedera-stable-testnet-streams-2020-08-27'\n+```\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+- t - The transactionId to be verified\n+- e - Hedera network environment to point at e.g. previewnet | mainnet | testnet\n+- h - The host of the REST API endpoint e.g. https://testnet.mirrornode.hedera.com (also the default). This overrides the value of the environment.\n+\n+\n+> **_Note_** `npm start --` may be used in favor of `check-state-proof` if you don't install the tool globally\n+e.g. `npm start -- -t <transactionId> -h <host> -e <previewnet|mainnet|testnet> -f <filePath>`\n+\n+\n+### Sample Case\n+To verify the sample case run the following command\n+\n+`check-state-proof -t 0.0.94139-1570800748-313194300 -f <absoluteDirPath>/stateProofSample.json`\n+\n+> **_Note_** The -f option requires an absolute filePath to be provided\n+\n+\n+### Testnet Case\n+\n+`check-state-proof -t <transactionId> -e testnet`\n+\n+### Mainnet Case\n+\n+`check-state-proof -t <transactionId> -e mainnet`\n+\n+### Custom Endpoint Case\n+\n+`check-state-proof -t <transactionId> -h <http(s)Endpoint>`\n+\n+## State Proof Logic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMTI4OA=="}, "originalCommit": {"oid": "a8802fd2a5af85b83a7a3de97b7ddd2635291302"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDEzNzc5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/check-state-proof/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyODo0MlrOHNPskA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo0NzoxNlrOHNQX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MDcwNA==", "bodyText": "nit: This would be better to add to the help output directly", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483650704", "createdAt": "2020-09-04T14:28:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/check-state-proof/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Logic\n+The CLI takes the following steps to prove legitimacy of provided transaction ID\n+\n+1. Obtains user input of transactionId and other params\n+\n+2. Makes a REST API call to the mirror node to retrieve stateproof supporting files - addressBook(s), signature files and a record file.\n+\n+3. Store files locally and verifies at least 1 addressBook, 2 signatures, 1 rcd file were retrieved.\n+\n+4. Parses AddressBook(s) pulling out and creating a map of nodeIds to public keys\n+\n+5. Parses signature file buffer pulling out signature and hash from each file\n+\n+6. Parses record file pulling out file hash and a map of transactionsIds\n+\n+7. Verified the record file contains the requested transactionId\n+\n+8. Verifies the public keys of each node were used to sign the hashes noted in the signature files and produced the provided signatures.\n+\n+9. Verifies there is a hash from the signatures files that is matched by at least 1/3 of the nodes.\n+\n+10. Verified the record file hash matches the hash that reached 1/3 consensus from nodes.\n+\n+11. Returns true if all  verifications pass\n+\n+## Requirements\n+To run the CLI you must\n+1. Install the node application\n+2. Point to a mirror node with the State Proof Alpha REST API enabled.\n+\n+If you would like to configure your mirror node to support State Proof Alpha you can follow the configuration steps [Enable State Proof Alpha](../../docs/configuration.md#enable-state-proof-alpha)\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Ensure you've installed [NodeJS](https://nodejs.org/en/about/)\n+2. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+3. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof --help` or `npm start -- --help` to show usage instructions.\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+Usage options include\n+```.env\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -f, --file           Absolute file path containing State Proof REST API\n+                       response json                                    [string]\n+  -h, --host           REST API host. Default is testnet                [string]\n+  -e, --env            Your environment e.g. local|mainnet|previewnet|testnet\n+                                                                        [string]\n+```\n+\n+> **_Note 1:_** The host value overrides the value of the environment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9f6c2f05260fbcf2b0eabed057d7e11f36944af"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MTgwNQ==", "bodyText": "I'll add it there and also leave it here since people don't always read --help when the command works the fist time.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1016#discussion_r483661805", "createdAt": "2020-09-04T14:47:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/check-state-proof/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+# Hedera Mirror State Proof Alpha\n+\n+The Mirror Node State Proof Alpha provides the ability to cryptographically prove a transaction is valid on Hedera Network.\n+It's the interim solution until [full state proof](https://www.hedera.com/blog/state-proofs-on-hedera) is implemented.\n+\n+Refer to the [State Proof Alpha Design](https://github.com/hashgraph/hedera-mirror-node/blob/master/docs/design/stateproofalpha.md) for more architectural details.\n+\n+A node based CLI tool `check-state-proof` is provided here to showcase the steps necessary to independently check the validity of a transaction.\n+\n+## Logic\n+The CLI takes the following steps to prove legitimacy of provided transaction ID\n+\n+1. Obtains user input of transactionId and other params\n+\n+2. Makes a REST API call to the mirror node to retrieve stateproof supporting files - addressBook(s), signature files and a record file.\n+\n+3. Store files locally and verifies at least 1 addressBook, 2 signatures, 1 rcd file were retrieved.\n+\n+4. Parses AddressBook(s) pulling out and creating a map of nodeIds to public keys\n+\n+5. Parses signature file buffer pulling out signature and hash from each file\n+\n+6. Parses record file pulling out file hash and a map of transactionsIds\n+\n+7. Verified the record file contains the requested transactionId\n+\n+8. Verifies the public keys of each node were used to sign the hashes noted in the signature files and produced the provided signatures.\n+\n+9. Verifies there is a hash from the signatures files that is matched by at least 1/3 of the nodes.\n+\n+10. Verified the record file hash matches the hash that reached 1/3 consensus from nodes.\n+\n+11. Returns true if all  verifications pass\n+\n+## Requirements\n+To run the CLI you must\n+1. Install the node application\n+2. Point to a mirror node with the State Proof Alpha REST API enabled.\n+\n+If you would like to configure your mirror node to support State Proof Alpha you can follow the configuration steps [Enable State Proof Alpha](../../docs/configuration.md#enable-state-proof-alpha)\n+\n+### Install CLI\n+The node based CLI tool `check-state-proof` can be installed as follows\n+1. Ensure you've installed [NodeJS](https://nodejs.org/en/about/)\n+2. Navigate to the `hedera-mirror-rest/state-proof-demo` directory\n+3. Npm install the tool -  `npm install -g .`\n+\n+To verify correct installation simply run `check-state-proof --help` or `npm start -- --help` to show usage instructions.\n+\n+## Run Check-State-Proof CLI\n+From command line run\n+\n+`check-state-proof -t <transactionId> -h <host> -e <environment> -f <filePath>`\n+\n+Usage options include\n+```.env\n+  --help               Show help                                       [boolean]\n+  --version            Show version number                             [boolean]\n+  -t, --transactionId  Your Hedera Network Transaction Id e.g.\n+                       0.0.94139-1570800748-313194300        [string] [required]\n+  -f, --file           Absolute file path containing State Proof REST API\n+                       response json                                    [string]\n+  -h, --host           REST API host. Default is testnet                [string]\n+  -e, --env            Your environment e.g. local|mainnet|previewnet|testnet\n+                                                                        [string]\n+```\n+\n+> **_Note 1:_** The host value overrides the value of the environment.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MDcwNA=="}, "originalCommit": {"oid": "d9f6c2f05260fbcf2b0eabed057d7e11f36944af"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1622, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}