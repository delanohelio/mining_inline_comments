{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODUzMDc0", "number": 597, "title": "Switch from R2DBC to Hibernate", "bodyText": "Detailed description:\n\nSwitch from R2DBC to Hibernate\nAdds a cache for entity existence since we can now use @Cacheable\nFix shared poller running when disabled\nFix shared poller not retrying when database down and never reconnecting\nFix polling retriever not retrying when database down and immediately failing\nBump maxPageSize to 1000 since Hibernate can handle it\nBump retriever timeout to 60s\nUse TopicMessageRetriever for missed messages in case importer is down for a long time and it needs to poll missed\nDisable shared poller during tests except for tests that explicitly need it\n\nWhich issue(s) this PR fixes:\nFixes #558\nFixes #544\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-13T15:54:36Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597", "merged": true, "mergeCommit": {"oid": "c00b1e34c430453622ecbbfd31fbba1c6357c300"}, "closed": true, "closedAt": "2020-03-17T14:37:24Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNSlJnAH2gAyMzg3ODUzMDc0OjM5OTg2NzJmNTZiZTk4MjNhYjRjM2FlODE5Zjg4NjhlMTk0MTgyYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOjoixgFqTM3NjA5MDQ3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3998672f56be9823ab4c3ae819f8868e194182b4", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3998672f56be9823ab4c3ae819f8868e194182b4", "committedDate": "2020-03-13T16:05:58Z", "message": "Remove R2DBC in favor of Hibernate/JPA\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bf68ad1da10be788d7dfdc594d26a12a337e26e", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9bf68ad1da10be788d7dfdc594d26a12a337e26e", "committedDate": "2020-03-13T15:54:05Z", "message": "Merge remote-tracking branch 'origin/master' into grpc-hibernate\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}, "afterCommit": {"oid": "3998672f56be9823ab4c3ae819f8868e194182b4", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3998672f56be9823ab4c3ae819f8868e194182b4", "committedDate": "2020-03-13T16:05:58Z", "message": "Remove R2DBC in favor of Hibernate/JPA\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/092e879fc86b35d1d99476135a391c9c0c026144", "committedDate": "2020-03-13T18:32:06Z", "message": "Self review\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjkxMDY5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#pullrequestreview-374691069", "createdAt": "2020-03-14T02:35:04Z", "commit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjozNTowNFrOF2XTMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo1NDo0NlrOF2XYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTE3MQ==", "bodyText": "nit: since we changed from r2dbc you could note this is with a hibernate ORM", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549171", "createdAt": "2020-03-14T02:35:04Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -98,10 +99,10 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.netty.maxInboundMetadataSize`          | 1024                    | The maximum size of metadata allowed to be received                                            |\n | `hedera.mirror.grpc.port`                                  | 5600                    | The GRPC API port                                                                              |\n | `hedera.mirror.grpc.retriever.enabled`                     | true                    | Whether to retrieve historical massages or not                                                 |\n-| `hedera.mirror.grpc.retriever.maxPageSize`                 | 200                     | The maximum number of messages the retriever can return in a single call to the database       |\n+| `hedera.mirror.grpc.retriever.maxPageSize`                 | 1000                    | The maximum number of messages the retriever can return in a single call to the database       |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTI0Mg==", "bodyText": "\ud83d\ude2d but ah well", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549242", "createdAt": "2020-03-14T02:36:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/pom.xml", "diffHunk": "@@ -41,15 +45,6 @@\n             <groupId>io.projectreactor.addons</groupId>\n             <artifactId>reactor-extra</artifactId>\n         </dependency>\n-        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTczNg==", "bodyText": "q: did you not need topicNum?\nThen maybe additionally sequenceNumber and realm_num?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549736", "createdAt": "2020-03-14T02:43:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;\n+    }\n+\n+    public static class TopicMessageBuilder {\n+        private long consensusTimestamp;\n+\n+        public TopicMessageBuilder consensusTimestamp(Instant consensusTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTkwNQ==", "bodyText": "Just checking that the benefits of the limit 1 are no longer valid or needed here? Just in case you missed it in your refactor", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549905", "createdAt": "2020-03-14T02:45:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDI5MQ==", "bodyText": "q: So do we have other options for getting those metrics? Not sure how crucial the were.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550291", "createdAt": "2020-03-14T02:51:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -39,37 +40,32 @@\n @RequiredArgsConstructor\n public class TopicMessageRepositoryCustomImpl implements TopicMessageRepositoryCustom {\n \n-    private final DatabaseClient databaseClient;\n-    private final InstantToLongConverter instantToLongConverter;\n+    private final EntityManager entityManager;\n+    private final InstantToLongConverter converter;\n \n     @Override\n-    public Flux<TopicMessage> findByFilter(TopicMessageFilter filter) {\n-        Criteria whereClause = Criteria.where(\"realm_num\")\n-                .is(filter.getRealmNum())\n-                .and(\"topic_num\")\n-                .is(filter.getTopicNum())\n-                .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+    public Stream<TopicMessage> findByFilter(TopicMessageFilter filter) {\n+        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n+        CriteriaQuery<TopicMessage> query = cb.createQuery(TopicMessage.class);\n+        Root<TopicMessage> root = query.from(TopicMessage.class);\n+\n+        Predicate predicate = cb.and(\n+                cb.equal(root.get(\"realmNum\"), filter.getRealmNum()),\n+                cb.equal(root.get(\"topicNum\"), filter.getTopicNum()),\n+                cb.greaterThanOrEqualTo(root.get(\"consensusTimestamp\"), converter.convert(filter.getStartTime()))\n+        );\n \n         if (filter.getEndTime() != null) {\n-            whereClause = whereClause.and(\"consensus_timestamp\")\n-                    .lessThan(instantToLongConverter.convert(filter.getEndTime()));\n+            predicate = cb.and(predicate, cb\n+                    .lessThan(root.get(\"consensusTimestamp\"), converter.convert(filter.getEndTime())));\n         }\n \n-        Pageable pageable = filter.hasLimit() ? PageRequest.of(0, (int) filter.getLimit()) : Pageable.unpaged();\n+        query = query.select(root).where(predicate).orderBy(cb.asc(root.get(\"consensusTimestamp\")));\n \n-        return databaseClient.select()\n-                .from(TopicMessage.class)\n-                .matching(whereClause)\n-                .orderBy(Sort.by(\"consensus_timestamp\"))\n-                .page(pageable)\n-                .fetch()\n-                .all()\n-                .name(\"findByFilter\")\n-                .metrics()\n-                .doOnSubscribe(s -> log.debug(\"Executing query: {}\", filter))\n-                .doOnCancel(() -> log.debug(\"[{}] Cancelled query\", filter.getSubscriberId()))\n-                .doOnComplete(() -> log.debug(\"[{}] Completed query\", filter.getSubscriberId()))\n-                .doOnNext(t -> log.trace(\"[{}] Next message: {}\", filter.getSubscriberId(), t));\n+        TypedQuery<TopicMessage> typedQuery = entityManager.createQuery(query);\n+        if (filter.hasLimit()) {\n+            typedQuery.setMaxResults((int) filter.getLimit());\n+        }\n+        return typedQuery.getResultList().stream(); // getResultStream()'s cursor doesn't work with reactive streams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDM4MA==", "bodyText": "q: curious, why the change to Stream vs converting to Flux?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550380", "createdAt": "2020-03-14T02:53:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/retriever/PollingTopicMessageRetriever.java", "diffHunk": "@@ -61,36 +61,34 @@ public PollingTopicMessageRetriever(RetrieverProperties retrieverProperties,\n         }\n \n         PollingContext context = new PollingContext(filter);\n-        Duration frequency = retrieverProperties.getPollingFrequency();\n-\n-        return Flux.defer(() -> poll(context))\n+        return Flux.fromStream(() -> poll(context))\n                 .repeatWhen(Repeat.create(r -> !context.isComplete(), Long.MAX_VALUE)\n-                        .fixedBackoff(frequency)\n+                        .fixedBackoff(retrieverProperties.getPollingFrequency())\n                         .jitter(Jitter.random(0.1))\n                         .withBackoffScheduler(scheduler))\n                 .name(\"retriever\")\n                 .metrics()\n                 .timeout(retrieverProperties.getTimeout(), scheduler)\n                 .doOnCancel(context::onComplete)\n                 .doOnComplete(context::onComplete)\n-                .doOnNext(context::onNext)\n-                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms: {}\", frequency.toMillis(), filter));\n+                .doOnNext(context::onNext);\n     }\n \n-    private Flux<TopicMessage> poll(PollingContext context) {\n+    private Stream<TopicMessage> poll(PollingContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDQ2Mw==", "bodyText": "nit: left over from local debugging?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550463", "createdAt": "2020-03-14T02:54:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/resources/application.yml", "diffHunk": "@@ -20,6 +15,8 @@ logging:\n   level:\n     root: warn\n     com.hedera.mirror.grpc: info\n+    # org.hibernate.SQL: debug", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21040ff84e943271131bfbc6c53a5619a9e06df5", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/21040ff84e943271131bfbc6c53a5619a9e06df5", "committedDate": "2020-03-14T21:09:38Z", "message": "Review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796c7b0838db414016e1989087fd6d8372255fac", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/796c7b0838db414016e1989087fd6d8372255fac", "committedDate": "2020-03-14T21:17:00Z", "message": "Merge remote-tracking branch 'origin/master' into grpc-hibernate\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/49558a05a8d4999dd02b54e70a0e03a49956b6b3", "committedDate": "2020-03-16T15:04:20Z", "message": "Small fixes\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzY4ODM0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#pullrequestreview-375368834", "createdAt": "2020-03-16T16:14:17Z", "commit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNDoxOFrOF27f6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNDoxOFrOF27f6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MjI1MQ==", "bodyText": "q: should this be conditional on consensusTimestamp being not null?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393142251", "createdAt": "2020-03-16T16:14:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njc2Njg1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#pullrequestreview-375676685", "createdAt": "2020-03-17T01:06:01Z", "commit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozMDozMlrOF3LCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTo1Mjo0NVrOF3LXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjkyOQ==", "bodyText": "Thinking about new topics.\nSay i create a new topic, and immediately subscribe for it. The topic will take ~5-10 seconds to be created in db. So the first lookup will return empty, and also all the subsequent lookups until cache gets invalidated.\nI believe the tests may be working since they share the Repo instance, but that won't be the case in prod were importer inserts the data.\nIf we cache only non-null values, that should work and should be okay (since this isn't anywhere near being the perf bottleneck in our system). Further optimizations can be in future.\nSide question for my understanding: does the cache has any internal time based invalidation too if size limit is never reached? Not saying we need it, just random q.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393396929", "createdAt": "2020-03-17T01:30:32Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3 limit 1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5ODc5NQ==", "bodyText": "why do we need to disable it?\nLet's also add the comment to the config itself.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393398795", "createdAt": "2020-03-17T01:38:24Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/resources/application-default.yml", "diffHunk": "@@ -15,10 +15,13 @@ hedera:\n         username: mirror_node\n       endTimeInterval: 100ms\n       listener:\n+        enabled: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5OTUyMw==", "bodyText": "in future,  maybe we can let domainBuilder keep track of seq numbers for topics.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393399523", "createdAt": "2020-03-17T01:41:13Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -446,13 +456,13 @@ void bothMessagesWithTopicNum() {\n     void bothMessagesWithRealmNum() {\n         domainBuilder.entity(e -> e.entityRealm(1L)).block();\n         domainBuilder.entity(e -> e.entityRealm(2L)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(0)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(1)).block();\n+        domainBuilder.topicMessage(t -> t.realmNum(0).sequenceNumber(1)).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwMjMxNQ==", "bodyText": "We should not use grpc server's Repository instances (here and in other places) to insert data.\nCorrect setup, and one analogous to production would be, where writers and readers are isolated. Writers would be analogous to mirror-node-importer, and readers would be grpc server's repository instances (since the tests are to test them).", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393402315", "createdAt": "2020-03-17T01:52:45Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "diffHunk": "@@ -103,12 +106,13 @@ void setup() {\n         return Flux.concat(publishers);\n     }\n \n-    private <T> Mono<?> insert(T domainObject) {\n-        return databaseClient.insert()\n-                .into((Class<T>) domainObject.getClass())\n-                .using(domainObject)\n-                .fetch()\n-                .first()\n-                .doOnNext(d -> log.debug(\"Inserted: {}\", domainObject));\n+    private Mono<Entity> insert(Entity entity) {\n+        return Mono.defer(() -> Mono.just(entityRepository.save(entity)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69cc8bec8874cba20b0815eb2bb89e755425aa2", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b69cc8bec8874cba20b0815eb2bb89e755425aa2", "committedDate": "2020-03-17T03:24:02Z", "message": "Review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDkwNDcw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#pullrequestreview-376090470", "createdAt": "2020-03-17T14:31:59Z", "commit": {"oid": "b69cc8bec8874cba20b0815eb2bb89e755425aa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3325, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}