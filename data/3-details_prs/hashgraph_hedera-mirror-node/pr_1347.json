{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTU3MzM1", "number": 1347, "title": "Add monitor dashboard", "bodyText": "Detailed description:\n\nAdd a monitor Grafana dashboard\nAdd additional Prometheus alerts for monitor\nAdd scenario name tag to metrics\nAdd status logs to REST subscriber and make the frequency configurable\nAdd project reactor metrics\nAdd hedera.mirror.monitor.publish.handle metric to track the how long it takes to submit a transaction and be handled\nAdd hedera.mirror.monitor.publish.duration metric to track how long transaction publishing has been active\nAdd hedera.mirror.monitor.subscribe.duration metric to track how long a subscription scenario has been active\nRename hedera.mirror.monitor.publish to hedera.mirror.monitor.publish.submit for clarity\nChange publish receipt and record percentages from integer to double for finer grained configuration\nFix deprecated setup-gcloud GitHub action\nFix extra % in alert messages using humanizePercentage\nFix gRPC subscriber not retrying\nFix monitor images not being cleaned up\nFix not closing subscriber resources\nRefactor subscribers into a common base class\n\nWhich issue(s) this PR fixes:\nFixes #1314\nSpecial notes for your reviewer:\n\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-12-11T17:02:43Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347", "merged": true, "mergeCommit": {"oid": "16a0a1a5bf821591f4a992783133fd1a6fb7f57b"}, "closed": true, "closedAt": "2020-12-14T16:44:14Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlK_33gH2gAyNTM3MTU3MzM1OjI2Yzc3OTU3Mzk5MDZiYzg0MmI2ZTk1OWViZThiNzcwNjdiNmRiOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmIYO6AFqTU1MTU2MzkzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26c7795739906bc842b6e959ebe8b77067b6db8f", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/26c7795739906bc842b6e959ebe8b77067b6db8f", "committedDate": "2020-12-11T17:01:15Z", "message": "Add monitor dashboard\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a46beea2c98f62f823731cf807a90a4f45930a", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a3a46beea2c98f62f823731cf807a90a4f45930a", "committedDate": "2020-12-11T17:39:10Z", "message": "Fix tests after merge\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb83acae0c3ea155b2f3d67747ca76d639631ba", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/abb83acae0c3ea155b2f3d67747ca76d639631ba", "committedDate": "2020-12-11T18:11:57Z", "message": "Fix code smells\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d0fdb793d37d99f300e8294181fd99e9287cc89c", "committedDate": "2020-12-11T19:41:42Z", "message": "Clean up monitor images\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTM4NDA0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#pullrequestreview-550538404", "createdAt": "2020-12-11T20:01:46Z", "commit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowMTo0NlrOIEJ5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowODoxNVrOIEKQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNzI3Ng==", "bodyText": "q: we use nanos (TimeGauge) and milliseconds (Timers).\nDoes this mean the graphs have differing precisions or is this to comply with the metrics calculation defaults?\nWondering why differing precisions are interpreted and whether we consider standardizing it?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541227276", "createdAt": "2020-12-11T20:01:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/publish/PublishMetrics.java", "diffHunk": "@@ -86,22 +91,49 @@ public PublishResponse record(PublishRequest publishRequest,\n             log.debug(\"{} submitting {} transaction: {}\", status, type, e.getMessage());\n             throw new PublishException(e);\n         } finally {\n-            long endTime = System.currentTimeMillis();\n-            Tags tags = new Tags(status, type);\n-            Timer timer = timers.computeIfAbsent(tags, this::newTimer);\n-            timer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            long endTime = response != null ? response.getTimestamp().toEpochMilli() : System.currentTimeMillis();\n+            String scenarioName = publishRequest.getScenarioName();\n+            Tags tags = new Tags(scenarioName, status, type);\n+            Timer submitTimer = submitTimers.computeIfAbsent(tags, this::newSubmitMetric);\n+            submitTimer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            durationGauges.computeIfAbsent(tags, this::newDurationMetric);\n+\n+            if (response != null && response.getReceipt() != null) {\n+                long elapsed = System.currentTimeMillis() - startTime;\n+                Timer handleTimer = handleTimers.computeIfAbsent(tags, this::newHandleMetric);\n+                handleTimer.record(elapsed, TimeUnit.MILLISECONDS);\n+            }\n \n             if (!SUCCESS.equals(status)) {\n                 errors.add(status);\n             }\n         }\n     }\n \n-    private Timer newTimer(Tags tags) {\n-        return Timer.builder(\"hedera.mirror.monitor.publish\")\n-                .description(\"The time it takes to publish a transaction\")\n-                .tag(\"status\", tags.getStatus())\n-                .tag(\"type\", tags.getType().toString())\n+    private TimeGauge newDurationMetric(Tags tags) {\n+        TimeUnit unit = TimeUnit.NANOSECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzMxMQ==", "bodyText": "nit: Would it be worth adding a method in this class to give the metric names here?\ne.g.\n...\nString METRIC_NAME_PREFIX = \"hedera.mirror.monitor.publish.\";\n...\npublic static String getMetricName(String postfix) {\n return METRIC_NAME_PREFIX + postfix\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#discussion_r541233311", "createdAt": "2020-12-11T20:08:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/publish/PublishMetrics.java", "diffHunk": "@@ -86,22 +91,49 @@ public PublishResponse record(PublishRequest publishRequest,\n             log.debug(\"{} submitting {} transaction: {}\", status, type, e.getMessage());\n             throw new PublishException(e);\n         } finally {\n-            long endTime = System.currentTimeMillis();\n-            Tags tags = new Tags(status, type);\n-            Timer timer = timers.computeIfAbsent(tags, this::newTimer);\n-            timer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            long endTime = response != null ? response.getTimestamp().toEpochMilli() : System.currentTimeMillis();\n+            String scenarioName = publishRequest.getScenarioName();\n+            Tags tags = new Tags(scenarioName, status, type);\n+            Timer submitTimer = submitTimers.computeIfAbsent(tags, this::newSubmitMetric);\n+            submitTimer.record(endTime - startTime, TimeUnit.MILLISECONDS);\n+            durationGauges.computeIfAbsent(tags, this::newDurationMetric);\n+\n+            if (response != null && response.getReceipt() != null) {\n+                long elapsed = System.currentTimeMillis() - startTime;\n+                Timer handleTimer = handleTimers.computeIfAbsent(tags, this::newHandleMetric);\n+                handleTimer.record(elapsed, TimeUnit.MILLISECONDS);\n+            }\n \n             if (!SUCCESS.equals(status)) {\n                 errors.add(status);\n             }\n         }\n     }\n \n-    private Timer newTimer(Tags tags) {\n-        return Timer.builder(\"hedera.mirror.monitor.publish\")\n-                .description(\"The time it takes to publish a transaction\")\n-                .tag(\"status\", tags.getStatus())\n-                .tag(\"type\", tags.getType().toString())\n+    private TimeGauge newDurationMetric(Tags tags) {\n+        TimeUnit unit = TimeUnit.NANOSECONDS;\n+        return TimeGauge.builder(\"hedera.mirror.monitor.publish.duration\", stopwatch, unit, s -> s.elapsed(unit))\n+                .description(\"The amount of time this scenario has been publishing transactions\")\n+                .tag(Tags.TAG_SCENARIO, tags.getScenarioName())\n+                .tag(Tags.TAG_TYPE, tags.getType().toString())\n+                .register(meterRegistry);\n+    }\n+\n+    private Timer newHandleMetric(Tags tags) {\n+        return Timer.builder(\"hedera.mirror.monitor.publish.handle\")\n+                .description(\"The time it takes from submit to being handled by the main nodes\")\n+                .tag(Tags.TAG_SCENARIO, tags.getScenarioName())\n+                .tag(Tags.TAG_STATUS, tags.getStatus())\n+                .tag(Tags.TAG_TYPE, tags.getType().toString())\n+                .register(meterRegistry);\n+    }\n+\n+    private Timer newSubmitMetric(Tags tags) {\n+        return Timer.builder(\"hedera.mirror.monitor.publish.submit\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDc3NzY0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#pullrequestreview-551477764", "createdAt": "2020-12-14T15:25:56Z", "commit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTYzOTMz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1347#pullrequestreview-551563933", "createdAt": "2020-12-14T16:32:05Z", "commit": {"oid": "d0fdb793d37d99f300e8294181fd99e9287cc89c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3418, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}